METHOD main
METHOD_RETURN int
scanf scanf("\x25\x64",&t)
RETURN return(0x6fb+6059-0x1ea6); return(0x6fb+6059-0x1ea6);
<operator>.lessEqualsThan i<=t
<operator>.postIncrement i++
<operator>.subtraction 0x6fb+6059-0x1ea6
<operator>.assignment i=(0x137c+2081-0x1b9c)
<operator>.assignment ReplacementFor_hcf=(0x81f+2019-0x1002)
<operator>.assignment ReplacementFor_flag=(0x18cc+2825-0x23d5)
scanf scanf(\012"\x25\x64\x20\x25\x64\x20\x25\x64",&ReplacementFor_n,&ReplacementFor_d,&\012ReplacementFor_g)
<operator>.assignment ReplacementFor_hcf=ReplacementFor_gcd(ReplacementFor_d \012(0x5c1+7650-0x233f))
<operator>.assignment ReplacementFor_tmp=(0x132a+953-0x167f)/ReplacementFor_hcf
<operator>.assignment ReplacementFor_temp=ReplacementFor_tmp
<operator>.lessEqualsThan ReplacementFor_temp<=ReplacementFor_n
<operator>.logicalAnd ReplacementFor_g==\012(0x14af+3648-0x22ef)&&ReplacementFor_d==(0x637+1516-0xc23)
IDENTIFIER ReplacementFor_flag if (ReplacementFor_flag)
<operator>.notEquals i!=t
<operator>.addition 0x6fb+6059
<operator>.subtraction 0x137c+2081-0x1b9c
<operator>.subtraction 0x81f+2019-0x1002
<operator>.subtraction 0x18cc+2825-0x23d5
ReplacementFor_gcd ReplacementFor_gcd(ReplacementFor_d \012(0x5c1+7650-0x233f))
<operator>.division (0x132a+953-0x167f)/ReplacementFor_hcf
<operator>.assignment ReplacementFor_flag=\012(0x273+6201-0x1aab)
printf printf(\012"\x43\x61\x73\x65\x20\x23\x25\x64\x3a\x20\x50\x6f\x73\x73\x69\x62\x6c\x65",i)
printf printf("\n")
<operator>.addition 0x137c+2081
<operator>.addition 0x81f+2019
<operator>.addition 0x18cc+2825
<operator>.subtraction 0x5c1+7650-0x233f
<operator>.subtraction 0x132a+953-0x167f
<operator>.logicalAnd ReplacementFor_g==(0x18c1+2982-0x2403)&&ReplacementFor_d!=\012(0x1805+980-0x1b75)
<operator>.equals ReplacementFor_g==\012(0x14af+3648-0x22ef)
<operator>.equals ReplacementFor_d==(0x637+1516-0xc23)
printf printf("\x43\x61\x73\x65\x20\x23\x25\x64\x3a\x20\x42\x72\x6f\x6b\x65\x6e",i\012)
<operator>.addition 0x5c1+7650
<operator>.addition 0x132a+953
<operator>.assignment ReplacementFor_flag=(0x12ea+1272-0x17e2)
<operator>.subtraction 0x14af+3648-0x22ef
<operator>.subtraction 0x637+1516-0xc23
<operator>.subtraction 0x273+6201-0x1aab
<operator>.equals ReplacementFor_g==(0x18c1+2982-0x2403)
<operator>.notEquals ReplacementFor_d!=\012(0x1805+980-0x1b75)
<operator>.addition 0x14af+3648
<operator>.addition 0x637+1516
<operator>.addition 0x273+6201
<operator>.subtraction 0x18c1+2982-0x2403
<operator>.subtraction 0x1805+980-0x1b75
<operator>.subtraction 0x12ea+1272-0x17e2
<operator>.equals ReplacementFor_g==(0x3ec+1682-0xa7e)
<operator>.addition 0x18c1+2982
<operator>.addition 0x1805+980
<operator>.addition 0x12ea+1272
<operator>.assignment ReplacementFor_flag=(0x28+5511-0x15af)
<operator>.subtraction 0x3ec+1682-0xa7e
<operator>.assignment ReplacementFor_flag=(0x6df+1772-0xdca)
<operator>.addition 0x3ec+1682
<operator>.subtraction 0x28+5511-0x15af
<operator>.addition 0x28+5511
<operator>.subtraction 0x6df+1772-0xdca
<operator>.addition 0x6df+1772
<operator>.addressOf &ReplacementFor_n
<operator>.addressOf &ReplacementFor_d
<operator>.addressOf &\012ReplacementFor_g
>>>PDG&65 0->2 0->4 0->5 0->6 0->10 0->13 0->14 0->16 0->17 0->18 0->19 0->20 0->21 0->22 0->23 0->25 0->26 0->27 0->28 0->29 0->30 0->31 0->33 0->34 0->35 0->36 0->37 0->39 0->40 0->41 0->42 0->43 0->44 0->45 0->46 0->47 0->48 0->49 0->50 0->51 0->52 0->53 0->55 0->57 0->58 0->59 0->60 0->61 2->1 2->4 2->17 3->1 4->1 4->1 4->1 4->4 4->5 4->8 4->9 4->10 4->11 4->12 4->13 4->14 4->15 4->17 4->17 4->20 4->21 4->22 4->23 4->25 4->25 4->28 4->29 4->30 4->31 4->33 4->35 4->35 4->36 4->37 4->39 4->44 4->62 4->63 4->64 5->1 5->4 6->1 6->1 6->3 7->1 7->1 7->4 8->1 8->1 9->1 9->1 9->1 10->1 10->1 10->1 10->14 11->1 11->1 11->23 12->1 12->1 12->13 13->1 13->1 13->14 14->1 14->1 14->1 14->10 14->32 14->42 14->47 14->51 15->1 15->1 15->1 15->24 15->41 15->46 17->1 17->4 17->5 17->26 19->1 19->7 19->7 20->1 20->8 20->8 21->1 21->9 21->9 22->1 22->1 22->11 22->11 22->34 22->43 23->1 23->1 23->12 23->12 24->1 24->1 24->1 25->1 25->17 26->1 30->1 30->22 30->22 31->1 31->23 31->23 32->1 32->1 32->1 32->38 32->49 32->50 32->53 32->55 32->57 33->1 33->1 33->15 33->15 33->34 33->40 33->42 33->45 34->1 34->1 34->15 34->15 34->22 35->1 35->17 38->1 38->1 38->1 39->1 39->33 39->33 40->1 40->34 40->34 41->1 41->24 41->24 42->1 42->32 42->32 42->33 42->43 42->48 42->50 42->52 43->1 43->1 43->22 43->32 43->32 43->34 47->1 47->42 47->42 48->1 48->43 48->43 49->1 49->38 49->38 50->1 50->1 50->33 50->54 50->56 50->58 50->59 50->60 50->61 54->1 54->1 54->1 55->1 55->50 55->50 56->1 56->1 56->1 58->1 58->54 58->54 60->1 60->56 60->56
>>>Token int main ( ) { int t , i ; scanf ( " \x25 \x64 " , & t ) ; for ( i = ( 0x137c + 2081 - 0x1b9c ) ; i <= t ; i ++ ) { int ReplacementFor_n , ReplacementFor_g , ReplacementFor_d , ReplacementFor_tmp , ReplacementFor_temp ; int ReplacementFor_hcf = ( 0x81f + 2019 - 0x1002 ) ; int ReplacementFor_flag = ( 0x18cc + 2825 - 0x23d5 ) ; scanf ( " \x25 \x64 \x20 \x25 \x64 \x20 \x25 \x64 " , & ReplacementFor_n , & ReplacementFor_d , & ReplacementFor_g ) ; ReplacementFor_hcf = ReplacementFor_gcd ( ReplacementFor_d , ( 0x5c1 + 7650 - 0x233f ) ) ; ReplacementFor_tmp = ( 0x132a + 953 - 0x167f ) / ReplacementFor_hcf ; ReplacementFor_temp = ReplacementFor_tmp ; if ( ReplacementFor_temp <= ReplacementFor_n ) { if ( ReplacementFor_g == ( 0x18c1 + 2982 - 0x2403 ) && ReplacementFor_d != ( 0x1805 + 980 - 0x1b75 ) ) ReplacementFor_flag = ( 0x12ea + 1272 - 0x17e2 ) ; else if ( ReplacementFor_g == ( 0x3ec + 1682 - 0xa7e ) ) ReplacementFor_flag = ( 0x28 + 5511 - 0x15af ) ; else ReplacementFor_flag = ( 0x6df + 1772 - 0xdca ) ; } if ( ReplacementFor_g == ( 0x14af + 3648 - 0x22ef ) && ReplacementFor_d == ( 0x637 + 1516 - 0xc23 ) ) ReplacementFor_flag = ( 0x273 + 6201 - 0x1aab ) ; if ( ReplacementFor_flag ) printf ( " \x43 \x61 \x73 \x65 \x20 \x23 \x25 \x64 \x3a \x20 \x50 \x6f \x73 \x73 \x69 \x62 \x6c \x65 " , i ) ; else printf ( " \x43 \x61 \x73 \x65 \x20 \x23 \x25 \x64 \x3a \x20 \x42 \x72 \x6f \x6b \x65 \x6e " , i ) ; if ( i != t ) printf ( " \n " ) ; } return ( 0x6fb + 6059 - 0x1ea6 ) ; }
>>>Func
METHOD ReplacementFor_quote_name_buf
METHOD_RETURN size_t
PARAM char**\012ReplacementFor_inbuf
PARAM size_t ReplacementFor_bufsize
PARAM char*name
PARAM struct \012ReplacementFor_quoting_options const*options
PARAM int \012ReplacementFor_needs_general_quoting
PARAM size_t*ReplacementFor_width
PARAM bool*\012ReplacementFor_pad
>>>PDG&9 0->2 0->3 0->4 0->5 0->6 0->7 0->8 2->1 3->1 4->1 5->1 6->1 7->1 8->1
>>>Token ( ReplacementFor_ls_mode == ReplacementFor_LS_MULTI_COL ? " \x64 \x69 \x72 " : " \x76 \x64 \x69 \x72 " ) ) ReplacementFor_proper_name < ReplacementFor_missing ( ( char ) ( 0xeba + 929 - 0x11e0 ) ) > ( " \x52 \x69 \x63 \x68 \x61 \x72 \x64 \x20 \x4d \x2e \x20 \x53 \x74 \x61 \x6c \x6c \x6d \x61 \x6e " ) , ReplacementFor_proper_name ( " \x44 \x61 \x76 \x69 \x64 \x20 \x4d \x61 \x63 \x4b \x65 \x6e \x7a \x69 \x65 " ) < ReplacementFor_missing ( ( char ) ( 0x1ae7 + 3068 - 0x26a8 ) ) > ReplacementFor_ndef  ReplacementFor_READDIR_LIES_ABOUT_MOUNTPOINT_D_INO ReplacementFor_ndif  ReplacementFor_READDIR_LIES_ABOUT_MOUNTPOINT_D_INO ReplacementFor_lse ReplacementFor_ndif ! ReplacementFor_HAVE_STRUCT_STAT_ST_AUTHOR < ReplacementFor_missing ( ( char ) ( 0x1a1 + 6561 - 0x1b07 ) ) > ReplacementFor_ndif  enum ReplacementFor_filetype { ReplacementFor_unknown , ReplacementFor_fifo , ReplacementFor_chardev , ReplacementFor_directory , ReplacementFor_blockdev , ReplacementFor_normal , ReplacementFor_symbolic_link , ReplacementFor_sock , ReplacementFor_whiteout , ReplacementFor_arg_directory } ; static char const ReplacementFor_filetype_letter [ ] = " \x3f \x70 \x63 \x64 \x62 \x2d \x6c \x73 \x77 \x64 " ; static_assert ( sizeof ReplacementFor_filetype_letter - ( 0xcbf + 96 - 0xd1e ) == ReplacementFor_arg_directory + ( 0x2ad + 7264 - 0x1f0c ) ) ; { ReplacementFor_C_ORPHAN , ReplacementFor_C_FIFO , ReplacementFor_C_CHR , ReplacementFor_C_DIR , ReplacementFor_C_BLK , ReplacementFor_C_FILE , ReplacementFor_C_LINK , ReplacementFor_C_SOCK , ReplacementFor_C_FILE , ReplacementFor_C_DIR < ReplacementFor_missing ( ( char ) ( 0x1c6c + 2290 - 0x2523 ) ) > } enum ReplacementFor_acl_type { ReplacementFor_ACL_T_NONE , ReplacementFor_ACL_T_LSM_CONTEXT_ONLY , ReplacementFor_ACL_T_YES } ; struct ReplacementFor_fileinfo { char * name ; char * ReplacementFor_linkname ; char * ReplacementFor_absolute_name ; struct stat stat ; enum ReplacementFor_filetype ReplacementFor_filetype ; mode_t ReplacementFor_linkmode ; char * ReplacementFor_scontext ; bool ReplacementFor_stat_ok ; bool ReplacementFor_linkok ; enum ReplacementFor_acl_type ReplacementFor_acl_type ; bool ReplacementFor_has_capability ; int ReplacementFor_quoted ; size_t ReplacementFor_width ; } ; struct ReplacementFor_bin_str { size_t len ; char const * ReplacementFor_string ; } ; ! ReplacementFor_HAVE_TCGETPGRP < ReplacementFor_missing ( ( char ) ( 0x253 + 8046 - 0x2186 ) ) > ReplacementFor_ndif  static size_t ReplacementFor_quote_name ( char const * name , struct ReplacementFor_quoting_options const * options , int ReplacementFor_needs_general_quoting , const struct ReplacementFor_bin_str * ReplacementFor_color , bool ReplacementFor_allow_pad , struct ReplacementFor_obstack * ReplacementFor_stack , char const * ReplacementFor_absolute_name ) ; static size_t ReplacementFor_quote_name_buf ( char * * ReplacementFor_inbuf , size_t ReplacementFor_bufsize , char * name , struct ReplacementFor_quoting_options const * options , int ReplacementFor_needs_general_quoting , size_t * ReplacementFor_width , bool * ReplacementFor_pad ) ; static char * ReplacementFor_make_link_name ( char const * name , char const * ReplacementFor_linkname ) ; static int ReplacementFor_decode_switches ( int ReplacementFor_argc , char * * ReplacementFor_argv ) ; static bool ReplacementFor_file_ignored ( char const * name ) ; static uintmax_t ReplacementFor_gobble_file ( char const * name , enum ReplacementFor_filetype type , ino_t ReplacementFor_inode , bool ReplacementFor_command_line_arg , char const * ReplacementFor_dirname ) ; static const struct ReplacementFor_bin_str * ReplacementFor_get_color_indicator ( const struct ReplacementFor_fileinfo * ReplacementFor_f , bool ReplacementFor_symlink_target ) ; static bool ReplacementFor_print_color_indicator ( const struct ReplacementFor_bin_str * ReplacementFor_ind ) ; static void ReplacementFor_put_indicator ( const struct ReplacementFor_bin_str * ReplacementFor_ind ) ; static void ReplacementFor_add_ignore_pattern ( char const * ReplacementFor_pattern ) ; static void ReplacementFor_attach ( char * ReplacementFor_dest , char const * ReplacementFor_dirname , char const * name ) ; static void ReplacementFor_clear_files ( void ) ; static void ReplacementFor_extract_dirs_from_files ( char const * ReplacementFor_dirname , bool ReplacementFor_command_line_arg ) ; static void ReplacementFor_get_link_name ( char const * ReplacementFor_filename , struct ReplacementFor_fileinfo * ReplacementFor_f , bool ReplacementFor_command_line_arg ) ; static void ReplacementFor_indent ( size_t ReplacementFor_from , size_t ReplacementFor_to ) ; static size_t ReplacementFor_calculate_columns ( bool ReplacementFor_by_columns ) ; static void ReplacementFor_print_current_files ( void ) ; static void ReplacementFor_print_dir ( char const * name , char const * ReplacementFor_realname , bool ReplacementFor_command_line_arg ) ; static size_t ReplacementFor_print_file_name_and_frills ( const struct ReplacementFor_fileinfo * ReplacementFor_f , size_t ReplacementFor_start_col ) ; static void ReplacementFor_print_horizontal ( void ) ; static int ReplacementFor_format_user_width ( uid_t ReplacementFor_u ) ; static int ReplacementFor_format_group_width ( gid_t ReplacementFor_g ) ; static void ReplacementFor_print_long_format ( const struct ReplacementFor_fileinfo * ReplacementFor_f ) ; static void ReplacementFor_print_many_per_line ( void ) ; static size_t ReplacementFor_print_name_with_quoting ( const struct ReplacementFor_fileinfo * ReplacementFor_f , bool ReplacementFor_symlink_target , struct ReplacementFor_obstack * ReplacementFor_stack , size_t ReplacementFor_start_col ) ; static void ReplacementFor_prep_non_filename_text ( void ) ; static bool ReplacementFor_print_type_indicator ( bool ReplacementFor_stat_ok , mode_t mode , enum ReplacementFor_filetype type ) ; static void ReplacementFor_print_with_separator ( char ReplacementFor_sep ) ; static void ReplacementFor_queue_directory ( char const * name , char const * ReplacementFor_realname , bool ReplacementFor_command_line_arg ) ; static void ReplacementFor_sort_files ( void ) ; static void ReplacementFor_parse_ls_color ( void ) ; static int ReplacementFor_getenv_quoting_style ( void ) ; static size_t ReplacementFor_quote_name_width ( char const * name , struct ReplacementFor_quoting_options const * options , int ReplacementFor_needs_general_quoting ) ; enum { ReplacementFor_INITIAL_TABLE_SIZE = ( 0x254a + 194 - 0x25ee ) } ; static ReplacementFor_Hash_table * ReplacementFor_active_dir_set ; static struct ReplacementFor_fileinfo * ReplacementFor_cwd_file ; static size_t ReplacementFor_cwd_n_alloc ; static size_t ReplacementFor_cwd_n_used ; static bool ReplacementFor_cwd_some_quoted ; static bool ReplacementFor_align_variable_outer_quotes ; static void * * ReplacementFor_sorted_file ; static size_t ReplacementFor_sorted_file_alloc ; static bool ReplacementFor_color_symlink_as_referent ; static char const * ReplacementFor_hostname ; static mode_t ReplacementFor_file_or_link_mode ( struct ReplacementFor_fileinfo const * ReplacementFor_file ) < ReplacementFor_missing ( ( char ) ( 0xe7 +6573 -0x1a59 ) ) > { return ( ReplacementFor_color_symlink_as_referent && ReplacementFor_file -> ReplacementFor_linkok ? ReplacementFor_file -> ReplacementFor_linkmode : ReplacementFor_file -> stat . st_mode ) ; } struct ReplacementFor_pending { char * name ; char * ReplacementFor_realname ; bool ReplacementFor_command_line_arg ; struct ReplacementFor_pending * next ; } ; static struct ReplacementFor_pending * ReplacementFor_pending_dirs ; static struct ReplacementFor_timespec ReplacementFor_current_time ; static bool ReplacementFor_print_scontext ; static char ReplacementFor_UNKNOWN_SECURITY_CONTEXT [ ] = " \x3f " ; static bool ReplacementFor_any_has_acl ; static int ReplacementFor_inode_number_width ; static int ReplacementFor_block_size_width ; static int ReplacementFor_nlink_width ; static int ReplacementFor_scontext_width ; static int ReplacementFor_owner_width ; static int ReplacementFor_group_width ; static int ReplacementFor_author_width ; static int ReplacementFor_major_device_number_width ; static int ReplacementFor_minor_device_number_width ; static int ReplacementFor_file_size_width ; enum format { ReplacementFor_long_format , ReplacementFor_one_per_line , ReplacementFor_many_per_line , ReplacementFor_horizontal , ReplacementFor_with_commas } ; static enum format format ; enum ReplacementFor_time_style { ReplacementFor_full_iso_time_style , ReplacementFor_long_iso_time_style , ReplacementFor_iso_time_style , ReplacementFor_locale_time_style } ; static char const * const ReplacementFor_time_style_args [ ] = { " \x66 \x75 \x6c \x6c \x2d \x69 \x73 \x6f " , " \x6c \x6f \x6e \x67 \x2d \x69 \x73 \x6f " , " \x69 \x73 \x6f " , " \x6c \x6f \x63 \x61 \x6c \x65 " , NULL } ; static enum ReplacementFor_time_style const ReplacementFor_time_style_types [ ] = { ReplacementFor_full_iso_time_style , ReplacementFor_long_iso_time_style , ReplacementFor_iso_time_style , ReplacementFor_locale_time_style } ; ReplacementFor_ARGMATCH_VERIFY ( ReplacementFor_time_style_args , ReplacementFor_time_style_types ) ; enum ReplacementFor_time_type { ReplacementFor_time_mtime = ( 0x9ac + 3239 - 0x1653 ) , ReplacementFor_time_ctime , ReplacementFor_time_atime , ReplacementFor_time_btime , ReplacementFor_time_numtypes } ; static enum ReplacementFor_time_type ReplacementFor_time_type ; enum ReplacementFor_sort_type { ReplacementFor_sort_name = ( 0x1f2c + 1790 - 0x262a ) , ReplacementFor_sort_extension , ReplacementFor_sort_width , ReplacementFor_sort_size , ReplacementFor_sort_version , ReplacementFor_sort_time , ReplacementFor_sort_none , ReplacementFor_sort_numtypes } ; static enum ReplacementFor_sort_type ReplacementFor_sort_type ; static bool ReplacementFor_sort_reverse ; static bool ReplacementFor_print_owner = true ; static bool ReplacementFor_print_author ; static bool ReplacementFor_print_group = true ; static bool ReplacementFor_numeric_ids ; static bool ReplacementFor_print_block_size ; static int ReplacementFor_human_output_opts ; static uintmax_t ReplacementFor_output_block_size ; static int ReplacementFor_file_human_output_opts ; static uintmax_t ReplacementFor_file_output_block_size = ( 0x1f3 + 7148 - 0x1dde ) ; static bool ReplacementFor_dired ; enum ReplacementFor_indicator_style { ReplacementFor_none = ( 0x21b + 6402 - 0x1b1d ) , ReplacementFor_slash , ReplacementFor_file_type , ReplacementFor_classify } ; static enum ReplacementFor_indicator_style ReplacementFor_indicator_style ; static char const * const ReplacementFor_indicator_style_args [ ] = { " \x6e \x6f \x6e \x65 " , " \x73 \x6c \x61 \x73 \x68 " , " \x66 \x69 \x6c \x65 \x2d \x74 \x79 \x70 \x65 " , " \x63 \x6c \x61 \x73 \x73 \x69 \x66 \x79 " , NULL } ; static enum ReplacementFor_indicator_style const ReplacementFor_indicator_style_types [ ] = { ReplacementFor_none , ReplacementFor_slash , ReplacementFor_file_type , ReplacementFor_classify } ; ReplacementFor_ARGMATCH_VERIFY ( ReplacementFor_indicator_style_args , ReplacementFor_indicator_style_types ) ; static bool ReplacementFor_print_with_color ; static bool ReplacementFor_print_hyperlink ; static bool ReplacementFor_used_color = false ; enum ReplacementFor_when_type { ReplacementFor_when_never , ReplacementFor_when_always , ReplacementFor_when_if_tty } ; enum ReplacementFor_Dereference_symlink { ReplacementFor_DEREF_UNDEFINED = ( 0x187 + 2194 - 0xa19 ) , ReplacementFor_DEREF_NEVER , ReplacementFor_DEREF_COMMAND_LINE_ARGUMENTS , ReplacementFor_DEREF_COMMAND_LINE_SYMLINK_TO_DIR , ReplacementFor_DEREF_ALWAYS } ; enum ReplacementFor_indicator_no { ReplacementFor_C_LEFT , ReplacementFor_C_RIGHT , ReplacementFor_C_END , ReplacementFor_C_RESET , ReplacementFor_C_NORM , ReplacementFor_C_FILE , ReplacementFor_C_DIR , ReplacementFor_C_LINK , ReplacementFor_C_FIFO , ReplacementFor_C_SOCK , ReplacementFor_C_BLK , ReplacementFor_C_CHR , ReplacementFor_C_MISSING , ReplacementFor_C_ORPHAN , ReplacementFor_C_EXEC , ReplacementFor_C_DOOR , ReplacementFor_C_SETUID , ReplacementFor_C_SETGID , ReplacementFor_C_STICKY , ReplacementFor_C_OTHER_WRITABLE , ReplacementFor_C_STICKY_OTHER_WRITABLE , ReplacementFor_C_CAP , ReplacementFor_C_MULTIHARDLINK , ReplacementFor_C_CLR_TO_EOL } ; static char const * const ReplacementFor_indicator_name [ ] = { " \x6c \x63 " , " \x72 \x63 " , " \x65 \x63 " , " \x72 \x73 " , " \x6e \x6f " , " \x66 \x69 " , " \x64 \x69 " , " \x6c \x6e " , " \x70 \x69 " , " \x73 \x6f " , " \x62 \x64 " , " \x63 \x64 " , " \x6d \x69 " , " \x6f \x72 " , " \x65 \x78 " , " \x64 \x6f " , " \x73 \x75 " , " \x73 \x67 " , " \x73 \x74 " , " \x6f \x77 " , " \x74 \x77 " , " \x63 \x61 " , " \x6d \x68 " , " \x63 \x6c " , NULL } ; struct ReplacementFor_color_ext_type { struct ReplacementFor_bin_str ReplacementFor_ext ; struct ReplacementFor_bin_str ReplacementFor_seq ; struct ReplacementFor_color_ext_type * next ; } ; static struct ReplacementFor_bin_str ReplacementFor_color_indicator [ ] = { { ReplacementFor_LEN_STR_PAIR ( " \033 " ) } , { ReplacementFor_LEN_STR_PAIR ( " \x6d " ) } , { ( 0x288 + 7190 - 0x1e9e ) , NULL } , { ReplacementFor_LEN_STR_PAIR ( " \x30 " ) } , { ( 0x1220 + 4616 - 0x2428 ) , NULL } , { ( 0x1cd6 + 1794 - 0x23d8 ) , NULL } , { ReplacementFor_LEN_STR_PAIR ( " \x30 \x31 \x3b \x33 \x34 " ) } , { ReplacementFor_LEN_STR_PAIR ( " \x30 \x31 \x3b \x33 \x36 " ) } , { ReplacementFor_LEN_STR_PAIR ( " \x33 \x33 " ) } , { ReplacementFor_LEN_STR_PAIR ( " \x30 \x31 \x3b \x33 \x35 " ) } , { ReplacementFor_LEN_STR_PAIR ( " \x30 \x31 \x3b \x33 \x33 " ) } , { ReplacementFor_LEN_STR_PAIR ( " \x30 \x31 \x3b \x33 \x33 " ) } , { ( 0x5ca + 150 - 0x660 ) , NULL } , { ( 0xa3 + 100 - 0x107 ) , NULL } , { ReplacementFor_LEN_STR_PAIR ( " \x30 \x31 \x3b \x33 \x32 " ) } , { ReplacementFor_LEN_STR_PAIR ( " \x30 \x31 \x3b \x33 \x35 " ) } , { ReplacementFor_LEN_STR_PAIR ( " \x33 \x37 \x3b \x34 \x31 " ) } , { ReplacementFor_LEN_STR_PAIR ( " \x33 \x30 \x3b \x34 \x33 " ) } , { ReplacementFor_LEN_STR_PAIR ( " \x33 \x37 \x3b \x34 \x34 " ) } , { ReplacementFor_LEN_STR_PAIR ( " \x33 \x34 \x3b \x34 \x32 " ) } , { ReplacementFor_LEN_STR_PAIR ( " \x33 \x30 \x3b \x34 \x32 " ) } , { ( 0x748 + 5629 - 0x1d45 ) , NULL } , { ( 0xc39 + 3329 - 0x193a ) , NULL } , { ReplacementFor_LEN_STR_PAIR ( " \033 " ) } , } ; static struct ReplacementFor_color_ext_type * ReplacementFor_color_ext_list = NULL ; static char * ReplacementFor_color_buf ; static bool ReplacementFor_check_symlink_mode ; static bool ReplacementFor_print_inode ; static enum ReplacementFor_Dereference_symlink ReplacementFor_dereference ; static bool ReplacementFor_recursive ; static bool ReplacementFor_immediate_dirs ; static bool ReplacementFor_directories_first ; static enum { ReplacementFor_IGNORE_DEFAULT = ( 0xa88 + 259 - 0xb8b ) , ReplacementFor_IGNORE_DOT_AND_DOTDOT , ReplacementFor_IGNORE_MINIMAL } ReplacementFor_ignore_mode ; struct ReplacementFor_ignore_pattern { char const * ReplacementFor_pattern ; struct ReplacementFor_ignore_pattern * next ; } ; static struct ReplacementFor_ignore_pattern * ReplacementFor_ignore_patterns ; static struct ReplacementFor_ignore_pattern * ReplacementFor_hide_patterns ; static bool ReplacementFor_qmark_funny_chars ; static struct ReplacementFor_quoting_options * ReplacementFor_filename_quoting_options ; static struct ReplacementFor_quoting_options * ReplacementFor_dirname_quoting_options ; static size_t ReplacementFor_tabsize ; static bool ReplacementFor_print_dir_name ; static size_t ReplacementFor_line_length ; static ReplacementFor_timezone_t ReplacementFor_localtz ; static bool ReplacementFor_format_needs_stat ; static bool ReplacementFor_format_needs_type ; enum { ReplacementFor_TIME_STAMP_LEN_MAXIMUM = ReplacementFor_MAX ( ( 0x1e2d + 2095 - 0x2274 ) , ReplacementFor_INT_STRLEN_BOUND ( time_t ) ) } ; static char const * ReplacementFor_long_time_format [ ( 0x1547 + 4124 - 0x2561 ) ] = { ReplacementFor_N_ ( " \x25 \x62 \x20 \x25 \x65 \x20 \x20 \x25 \x59 " ) , ReplacementFor_N_ ( " \x25 \x62 \x20 \x25 \x65 \x20 \x25 \x48 \x3a \x25 \x4d " ) } ; static sigset_t ReplacementFor_caught_signals ; static sig_atomic_t volatile ReplacementFor_interrupt_signal ; static sig_atomic_t volatile ReplacementFor_stop_signal_count ; static int exit_status ; enum { ReplacementFor_LS_MINOR_PROBLEM = ( 0x946 + 882 - 0xcb7 ) , ReplacementFor_LS_FAILURE = ( 0x73 + 1022 - 0x46f ) } ; enum { ReplacementFor_AUTHOR_OPTION = CHAR_MAX + ( 0x17cc + 91 - 0x1826 ) , ReplacementFor_BLOCK_SIZE_OPTION , ReplacementFor_COLOR_OPTION , ReplacementFor_DEREFERENCE_COMMAND_LINE_SYMLINK_TO_DIR_OPTION , ReplacementFor_FILE_TYPE_INDICATOR_OPTION , ReplacementFor_FORMAT_OPTION , ReplacementFor_FULL_TIME_OPTION , ReplacementFor_GROUP_DIRECTORIES_FIRST_OPTION , ReplacementFor_HIDE_OPTION , ReplacementFor_HYPERLINK_OPTION , ReplacementFor_INDICATOR_STYLE_OPTION , ReplacementFor_QUOTING_STYLE_OPTION , ReplacementFor_SHOW_CONTROL_CHARS_OPTION , ReplacementFor_SI_OPTION , ReplacementFor_SORT_OPTION , ReplacementFor_TIME_OPTION , ReplacementFor_TIME_STYLE_OPTION , ReplacementFor_ZERO_OPTION , } ; static struct ReplacementFor_option const ReplacementFor_long_options [ ] = { { " \x61 \x6c \x6c " , ReplacementFor_no_argument , NULL , ( ( char ) ( 0xb72 + 2017 - 0x12f2 ) ) } , { " \x65 \x73 \x63 \x61 \x70 \x65 " , ReplacementFor_no_argument , NULL , ( ( char ) ( 0xe55 + 2289 - 0x16e4 ) ) } , { " \x64 \x69 \x72 \x65 \x63 \x74 \x6f \x72 \x79 " , ReplacementFor_no_argument , NULL , ( ( char ) ( 0x1f5 + 2983 - 0xd38 ) ) } , { " \x64 \x69 \x72 \x65 \x64 " , ReplacementFor_no_argument , NULL , ( ( char ) ( 0xf2a + 5617 - 0x24d7 ) ) } , { " \x66 \x75 \x6c \x6c \x2d \x74 \x69 \x6d \x65 " , ReplacementFor_no_argument , NULL , ReplacementFor_FULL_TIME_OPTION } , { " \x67 \x72 \x6f \x75 \x70 \x2d \x64 \x69 \x72 \x65 \x63 \x74 \x6f \x72 \x69 \x65 \x73 \x2d \x66 \x69 \x72 \x73 \x74 " , ReplacementFor_no_argument , NULL , ReplacementFor_GROUP_DIRECTORIES_FIRST_OPTION } , { " \x68 \x75 \x6d \x61 \x6e \x2d \x72 \x65 \x61 \x64 \x61 \x62 \x6c \x65 " , ReplacementFor_no_argument , NULL , ( ( char ) ( 0xa80 + 2608 - 0x1448 ) ) } , { " \x69 \x6e \x6f \x64 \x65 " , ReplacementFor_no_argument , NULL , ( ( char ) ( 0xc9 + 8996 - 0x2384 ) ) } , { " \x6b \x69 \x62 \x69 \x62 \x79 \x74 \x65 \x73 " , ReplacementFor_no_argument , NULL , ( ( char ) ( 0x829 + 7922 - 0x26b0 ) ) } , { " \x6e \x75 \x6d \x65 \x72 \x69 \x63 \x2d \x75 \x69 \x64 \x2d \x67 \x69 \x64 " , ReplacementFor_no_argument , NULL , ( ( char ) ( 0x51f + 8049 - 0x2422 ) ) } , { " \x6e \x6f \x2d \x67 \x72 \x6f \x75 \x70 " , ReplacementFor_no_argument , NULL , ( ( char ) ( 0x87a + 3064 - 0x142b ) ) } , { " \x68 \x69 \x64 \x65 \x2d \x63 \x6f \x6e \x74 \x72 \x6f \x6c \x2d \x63 \x68 \x61 \x72 \x73 " , ReplacementFor_no_argument , NULL , ( ( char ) ( 0xff6 + 4554 - 0x214f ) ) } , { " \x72 \x65 \x76 \x65 \x72 \x73 \x65 " , ReplacementFor_no_argument , NULL , ( ( char ) ( 0x551 + 6249 - 0x1d48 ) ) } , { " \x73 \x69 \x7a \x65 " , ReplacementFor_no_argument , NULL , ( ( char ) ( 0x1344 + 1674 - 0x195b ) ) } , { " \x77 \x69 \x64 \x74 \x68 " , ReplacementFor_required_argument , NULL , ( ( char ) ( 0x181 + 8948 - 0x23fe ) ) } , { " \x61 \x6c \x6d \x6f \x73 \x74 \x2d \x61 \x6c \x6c " , ReplacementFor_no_argument , NULL , ( ( char ) ( 0x684 + 1171 - 0xad6 ) ) } , { " \x69 \x67 \x6e \x6f \x72 \x65 \x2d \x62 \x61 \x63 \x6b \x75 \x70 \x73 " , ReplacementFor_no_argument , NULL , ( ( char ) ( 0x11fb + 5019 - 0x2554 ) ) } , { " \x63 \x6c \x61 \x73 \x73 \x69 \x66 \x79 " , ReplacementFor_optional_argument , NULL , ( ( char ) ( 0x20b + 1867 - 0x910 ) ) } , { " \x66 \x69 \x6c \x65 \x2d \x74 \x79 \x70 \x65 " , ReplacementFor_no_argument , NULL , ReplacementFor_FILE_TYPE_INDICATOR_OPTION } , { " \x73 \x69 " , ReplacementFor_no_argument , NULL , ReplacementFor_SI_OPTION } , { " \x64 \x65 \x72 \x65 \x66 \x65 \x72 \x65 \x6e \x63 \x65 \x2d \x63 \x6f \x6d \x6d \x61 \x6e \x64 \x2d \x6c \x69 \x6e \x65 " , ReplacementFor_no_argument , NULL , ( ( char ) ( 0xd65 + 2571 - 0x1728 ) ) } , { " \x64 \x65 \x72 \x65 \x66 \x65 \x72 \x65 \x6e \x63 \x65 \x2d \x63 \x6f \x6d \x6d \x61 \x6e \x64 \x2d \x6c \x69 \x6e \x65 \x2d \x73 \x79 \x6d \x6c \x69 \x6e \x6b \x2d \x74 \x6f \x2d \x64 \x69 \x72 " , ReplacementFor_no_argument , NULL , ReplacementFor_DEREFERENCE_COMMAND_LINE_SYMLINK_TO_DIR_OPTION } , { " \x68 \x69 \x64 \x65 " , ReplacementFor_required_argument , NULL , ReplacementFor_HIDE_OPTION } , { " \x69 \x67 \x6e \x6f \x72 \x65 " , ReplacementFor_required_argument , NULL , ( ( char ) ( 0x239 + 433 - 0x3a1 ) ) } , { " \x69 \x6e \x64 \x69 \x63 \x61 \x74 \x6f \x72 \x2d \x73 \x74 \x79 \x6c \x65 " , ReplacementFor_required_argument , NULL , ReplacementFor_INDICATOR_STYLE_OPTION } , { " \x64 \x65 \x72 \x65 \x66 \x65 \x72 \x65 \x6e \x63 \x65 " , ReplacementFor_no_argument , NULL , ( ( char ) ( 0x44a + 2375 - 0xd45 ) ) } , { " \x6c \x69 \x74 \x65 \x72 \x61 \x6c " , ReplacementFor_no_argument , NULL , ( ( char ) ( 0x16e5 + 1048 - 0x1aaf ) ) } , { " \x71 \x75 \x6f \x74 \x65 \x2d \x6e \x61 \x6d \x65 " , ReplacementFor_no_argument , NULL , ( ( char ) ( 0x1350 + 4597 - 0x24f4 ) ) } , { " \x71 \x75 \x6f \x74 \x69 \x6e \x67 \x2d \x73 \x74 \x79 \x6c \x65 " , ReplacementFor_required_argument , NULL , ReplacementFor_QUOTING_STYLE_OPTION } , { " \x72 \x65 \x63 \x75 \x72 \x73 \x69 \x76 \x65 " , ReplacementFor_no_argument , NULL , ( ( char ) ( 0x2217 + 1082 - 0x25ff ) ) } , { " \x66 \x6f \x72 \x6d \x61 \x74 " , ReplacementFor_required_argument , NULL , ReplacementFor_FORMAT_OPTION } , { " \x73 \x68 \x6f \x77 \x2d \x63 \x6f \x6e \x74 \x72 \x6f \x6c \x2d \x63 \x68 \x61 \x72 \x73 " , ReplacementFor_no_argument , NULL , ReplacementFor_SHOW_CONTROL_CHARS_OPTION } , { " \x73 \x6f \x72 \x74 " , ReplacementFor_required_argument , NULL , ReplacementFor_SORT_OPTION } , { " \x74 \x61 \x62 \x73 \x69 \x7a \x65 " , ReplacementFor_required_argument , NULL , ( ( char ) ( 0x750 + 7965 - 0x2619 ) ) } , { " \x74 \x69 \x6d \x65 " , ReplacementFor_required_argument , NULL , ReplacementFor_TIME_OPTION } , { " \x74 \x69 \x6d \x65 \x2d \x73 \x74 \x79 \x6c \x65 " , ReplacementFor_required_argument , NULL , ReplacementFor_TIME_STYLE_OPTION } , { " \x7a \x65 \x72 \x6f " , ReplacementFor_no_argument , NULL , ReplacementFor_ZERO_OPTION } , { " \x63 \x6f \x6c \x6f \x72 " , ReplacementFor_optional_argument , NULL , ReplacementFor_COLOR_OPTION } , { " \x68 \x79 \x70 \x65 \x72 \x6c \x69 \x6e \x6b " , ReplacementFor_optional_argument , NULL , ReplacementFor_HYPERLINK_OPTION } , { " \x62 \x6c \x6f \x63 \x6b \x2d \x73 \x69 \x7a \x65 " , ReplacementFor_required_argument , NULL , ReplacementFor_BLOCK_SIZE_OPTION } , { " \x63 \x6f \x6e \x74 \x65 \x78 \x74 " , ReplacementFor_no_argument , ( 0x1799 + 415 - 0x1938 ) , ( ( char ) ( 0x9ac + 6926 - 0x2460 ) ) } , { " \x61 \x75 \x74 \x68 \x6f \x72 " , ReplacementFor_no_argument , NULL , ReplacementFor_AUTHOR_OPTION } , { ReplacementFor_GETOPT_HELP_OPTION_DECL } , { ReplacementFor_GETOPT_VERSION_OPTION_DECL } , { NULL , ( 0x1173 + 1044 - 0x1587 ) , NULL , ( 0x118f + 3603 - 0x1fa2 ) } } ; static char const * const ReplacementFor_format_args [ ] = { " \x76 \x65 \x72 \x62 \x6f \x73 \x65 " , " \x6c \x6f \x6e \x67 " , " \x63 \x6f \x6d \x6d \x61 \x73 " , " \x68 \x6f \x72 \x69 \x7a \x6f \x6e \x74 \x61 \x6c " , " \x61 \x63 \x72 \x6f \x73 \x73 " , " \x76 \x65 \x72 \x74 \x69 \x63 \x61 \x6c " , " \x73 \x69 \x6e \x67 \x6c \x65 \x2d \x63 \x6f \x6c \x75 \x6d \x6e " , NULL } ; static enum format const ReplacementFor_format_types [ ] = { ReplacementFor_long_format , ReplacementFor_long_format , ReplacementFor_with_commas , ReplacementFor_horizontal , ReplacementFor_horizontal , ReplacementFor_many_per_line , ReplacementFor_one_per_line } ; ReplacementFor_ARGMATCH_VERIFY ( ReplacementFor_format_args , ReplacementFor_format_types ) ; static char const * const ReplacementFor_sort_args [ ] = { " \x6e \x6f \x6e \x65 " , " \x74 \x69 \x6d \x65 " , " \x73 \x69 \x7a \x65 " , " \x65 \x78 \x74 \x65 \x6e \x73 \x69 \x6f \x6e " , " \x76 \x65 \x72 \x73 \x69 \x6f \x6e " , " \x77 \x69 \x64 \x74 \x68 " , NULL } ; static enum ReplacementFor_sort_type const ReplacementFor_sort_types [ ] = { ReplacementFor_sort_none , ReplacementFor_sort_time , ReplacementFor_sort_size , ReplacementFor_sort_extension , ReplacementFor_sort_version , ReplacementFor_sort_width } ; ReplacementFor_ARGMATCH_VERIFY ( ReplacementFor_sort_args , ReplacementFor_sort_types ) ; static char const * const ReplacementFor_time_args [ ] = { " \x61 \x74 \x69 \x6d \x65 " , " \x61 \x63 \x63 \x65 \x73 \x73 " , " \x75 \x73 \x65 " , " \x63 \x74 \x69 \x6d \x65 " , " \x73 \x74 \x61 \x74 \x75 \x73 " , " \x6d \x74 \x69 \x6d \x65 " , " \x6d \x6f \x64 \x69 \x66 \x69 \x63 \x61 \x74 \x69 \x6f \x6e " , " \x62 \x69 \x72 \x74 \x68 " , " \x63 \x72 \x65 \x61 \x74 \x69 \x6f \x6e " , NULL } ; static enum ReplacementFor_time_type const ReplacementFor_time_types [ ] = { ReplacementFor_time_atime , ReplacementFor_time_atime , ReplacementFor_time_atime , ReplacementFor_time_ctime , ReplacementFor_time_ctime , ReplacementFor_time_mtime , ReplacementFor_time_mtime , ReplacementFor_time_btime , ReplacementFor_time_btime , } ; ReplacementFor_ARGMATCH_VERIFY ( ReplacementFor_time_args , ReplacementFor_time_types ) ; static char const * const ReplacementFor_when_args [ ] = { " \x61 \x6c \x77 \x61 \x79 \x73 " , " \x79 \x65 \x73 " , " \x66 \x6f \x72 \x63 \x65 " , " \x6e \x65 \x76 \x65 \x72 " , " \x6e \x6f " , " \x6e \x6f \x6e \x65 " , " \x61 \x75 \x74 \x6f " , " \x74 \x74 \x79 " , " \x69 \x66 \x2d \x74 \x74 \x79 " , NULL } ; static enum ReplacementFor_when_type const ReplacementFor_when_types [ ] = { ReplacementFor_when_always , ReplacementFor_when_always , ReplacementFor_when_always , ReplacementFor_when_never , ReplacementFor_when_never , ReplacementFor_when_never , ReplacementFor_when_if_tty , ReplacementFor_when_if_tty , ReplacementFor_when_if_tty } ; ReplacementFor_ARGMATCH_VERIFY ( ReplacementFor_when_args , ReplacementFor_when_types ) ; struct ReplacementFor_column_info { bool ReplacementFor_valid_len ; size_t ReplacementFor_line_len ; size_t * ReplacementFor_col_arr ; } ; static struct ReplacementFor_column_info * ReplacementFor_column_info ; static size_t ReplacementFor_max_idx ; enum { ReplacementFor_MIN_COLUMN_WIDTH = ( 0x4d1 + 1463 - 0xa85 ) } ; static off_t ReplacementFor_dired_pos ; static void ReplacementFor_dired_outbyte ( char ReplacementFor_c ) < ReplacementFor_missing ( ( char ) ( 0x1d04 +1914 -0x2443 ) ) > { ReplacementFor_dired_pos ++ ; putchar ( ReplacementFor_c ) ; } static void ReplacementFor_dired_outbuf ( char const * s , size_t ReplacementFor_s_len ) < ReplacementFor_missing ( ( char ) ( 0x2265 +142 -0x22b8 ) ) > { ReplacementFor_dired_pos += ReplacementFor_s_len ; fwrite ( s , sizeof * s , ReplacementFor_s_len , stdout ) ; } static void ReplacementFor_dired_outstring ( char const * s ) < ReplacementFor_missing ( ( char ) ( 0xd02 +3850 -0x1bd1 ) ) > { ReplacementFor_dired_outbuf ( s , strlen ( s ) ) ; } static void ReplacementFor_dired_indent ( void ) < ReplacementFor_missing ( ( char ) ( 0x399 +6723 -0x1da1 ) ) > { if ( ReplacementFor_dired ) ReplacementFor_dired_outstring ( " \x20 \x20 " ) ; } static struct ReplacementFor_obstack ReplacementFor_dired_obstack ; static struct ReplacementFor_obstack ReplacementFor_subdired_obstack ; static void ReplacementFor_push_current_dired_pos ( struct ReplacementFor_obstack * ReplacementFor_obs ) < ReplacementFor_missing ( ( char ) ( 0x304 +8897 -0x258a ) ) > { if ( ReplacementFor_dired ) ReplacementFor_obstack_grow ( ReplacementFor_obs , & ReplacementFor_dired_pos , sizeof ReplacementFor_dired_pos ) ; } static struct ReplacementFor_obstack ReplacementFor_dev_ino_obstack ; static void ReplacementFor_dev_ino_push ( dev_t ReplacementFor_dev , ino_t ReplacementFor_ino ) < ReplacementFor_missing ( ( char ) ( 0x58d +7330 -0x21f4 ) ) > { void * ReplacementFor_vdi ; struct ReplacementFor_dev_ino * ReplacementFor_di ; int ReplacementFor_dev_ino_size = sizeof * ReplacementFor_di ; ReplacementFor_obstack_blank ( & ReplacementFor_dev_ino_obstack , ReplacementFor_dev_ino_size ) ; ReplacementFor_vdi = ReplacementFor_obstack_next_free ( & ReplacementFor_dev_ino_obstack ) ; ReplacementFor_di = ReplacementFor_vdi ; ReplacementFor_di -- ; ReplacementFor_di -> st_dev = ReplacementFor_dev ; ReplacementFor_di -> st_ino = ReplacementFor_ino ; } static struct ReplacementFor_dev_ino ReplacementFor_dev_ino_pop ( void ) < ReplacementFor_missing ( ( char ) ( 0x16ed +2489 -0x206b ) ) > { void * ReplacementFor_vdi ; struct ReplacementFor_dev_ino * ReplacementFor_di ; int ReplacementFor_dev_ino_size = sizeof * ReplacementFor_di ; ReplacementFor_assert ( ReplacementFor_dev_ino_size <= ReplacementFor_obstack_object_size ( & ReplacementFor_dev_ino_obstack ) ) ; ReplacementFor_obstack_blank_fast ( & ReplacementFor_dev_ino_obstack , - ReplacementFor_dev_ino_size ) ; ReplacementFor_vdi = ReplacementFor_obstack_next_free ( & ReplacementFor_dev_ino_obstack ) ; ReplacementFor_di = ReplacementFor_vdi ; return * ReplacementFor_di ; } static void ReplacementFor_assert_matching_dev_ino ( char const * name , struct ReplacementFor_dev_ino ReplacementFor_di ) < ReplacementFor_missing ( ( char ) ( 0x7f1 +1804 -0xec2 ) ) > { struct stat ReplacementFor_sb ; ReplacementFor_assert ( name ) ; ReplacementFor_assert ( ( 0xb18 + 245 - 0xc0d ) <= stat ( name , & ReplacementFor_sb ) ) ; ReplacementFor_assert ( ReplacementFor_sb . st_dev == ReplacementFor_di . st_dev ) ; ReplacementFor_assert ( ReplacementFor_sb . st_ino == ReplacementFor_di . st_ino ) ; } static char ReplacementFor_eolbyte = ' \n ' ; static void ReplacementFor_dired_dump_obstack ( char const * ReplacementFor_prefix , struct ReplacementFor_obstack * ReplacementFor_os ) < ReplacementFor_missing ( ( char ) ( 0x2a6 +2310 -0xb71 ) ) > { size_t ReplacementFor_n_pos ; ReplacementFor_n_pos = ReplacementFor_obstack_object_size ( ReplacementFor_os ) / sizeof ( ReplacementFor_dired_pos ) ; if ( ReplacementFor_n_pos > ( 0xea0 + 1269 - 0x1395 ) ) { off_t * ReplacementFor_pos = ReplacementFor_obstack_finish ( ReplacementFor_os ) ; fputs ( ReplacementFor_prefix , stdout ) ; for ( size_t i = ( 0xcb9 + 1869 - 0x1406 ) ; i < ReplacementFor_n_pos ; i ++ ) { intmax_t ReplacementFor_p = ReplacementFor_pos [ i ] ; < ReplacementFor_missing ( ( char ) ( 0x2e1 + 7212 - 0x1ed2 ) ) > printf < ReplacementFor_missing ( ( char ) ( 0x24a + 8505 - 0x2348 ) ) > ( < ReplacementFor_missing ( ( char ) ( 0x24cc + 183 - 0x2548 ) ) > " \x20 \x25 " < ReplacementFor_missing ( ( char ) ( 0x12ac + 2109 - 0x1aae ) ) > ReplacementFor_PRIdMAX , ReplacementFor_p ) ; } putchar ( ' \n ' ) ; } } static struct ReplacementFor_timespec ReplacementFor_get_stat_btime ( struct stat const * ReplacementFor_st ) < ReplacementFor_missing ( ( char ) ( 0x12d1 +4989 -0x2613 ) ) > { struct ReplacementFor_timespec ReplacementFor_btimespec ; ReplacementFor_HAVE_STATX && defined < ReplacementFor_missing ( ( char ) ( 0x127b + 1340 - 0x177c ) ) > ReplacementFor_STATX_INO  ReplacementFor_btimespec = ReplacementFor_get_stat_mtime ( ReplacementFor_st ) ; ReplacementFor_lse ReplacementFor_btimespec = ReplacementFor_get_stat_birthtime ( ReplacementFor_st ) ; ReplacementFor_ndif return ReplacementFor_btimespec ; } ReplacementFor_HAVE_STATX && defined < ReplacementFor_missing ( ( char ) ( 0x3b1 + 4006 - 0x131c ) ) > ReplacementFor_STATX_INO  ReplacementFor_ATTRIBUTE_PURE static unsigned  int ReplacementFor_time_type_to_statx ( void ) < ReplacementFor_missing ( ( char ) ( 0xe9f +765 -0x1161 ) ) > { switch ( ReplacementFor_time_type ) { case ReplacementFor_time_ctime : return ReplacementFor_STATX_CTIME ; case ReplacementFor_time_mtime : return ReplacementFor_STATX_MTIME ; case ReplacementFor_time_atime : return ReplacementFor_STATX_ATIME ; case ReplacementFor_time_btime : return ReplacementFor_STATX_BTIME ; default : abort ( ) ; } return ( 0x146a + 1910 - 0x1be0 ) ; } ReplacementFor_ATTRIBUTE_PURE static unsigned  int ReplacementFor_calc_req_mask ( void ) < ReplacementFor_missing ( ( char ) ( 0x542 +1057 -0x928 ) ) > { unsigned int ReplacementFor_mask = ReplacementFor_STATX_MODE ; if ( ReplacementFor_print_inode ) ReplacementFor_mask |= ReplacementFor_STATX_INO ; if ( ReplacementFor_print_block_size ) ReplacementFor_mask |= ReplacementFor_STATX_BLOCKS ; if ( format == ReplacementFor_long_format ) { ReplacementFor_mask |= ReplacementFor_STATX_NLINK | ReplacementFor_STATX_SIZE | ReplacementFor_time_type_to_statx ( ) ; if ( ReplacementFor_print_owner || ReplacementFor_print_author ) ReplacementFor_mask |= ReplacementFor_STATX_UID ; if ( ReplacementFor_print_group ) ReplacementFor_mask |= ReplacementFor_STATX_GID ; } switch ( ReplacementFor_sort_type ) { case ReplacementFor_sort_none : case ReplacementFor_sort_name : case ReplacementFor_sort_version : case ReplacementFor_sort_extension : case ReplacementFor_sort_width : break ; case ReplacementFor_sort_time : ReplacementFor_mask |= ReplacementFor_time_type_to_statx ( ) ; break ; case ReplacementFor_sort_size : ReplacementFor_mask |= ReplacementFor_STATX_SIZE ; break ; default : abort ( ) ; } return ReplacementFor_mask ; } static int ReplacementFor_do_statx ( int fd , char const * name , struct stat * ReplacementFor_st , int flags , unsigned int ReplacementFor_mask ) < ReplacementFor_missing ( ( char ) ( 0x418 +6857 -0x1ea6 ) ) > { struct ReplacementFor_statx ReplacementFor_stx ; bool ReplacementFor_want_btime = ReplacementFor_mask & ReplacementFor_STATX_BTIME ; int ReplacementFor_ret = ReplacementFor_statx ( fd , name , flags | ReplacementFor_AT_NO_AUTOMOUNT , ReplacementFor_mask , & ReplacementFor_stx ) ; if ( ReplacementFor_ret >= ( 0x874 + 3680 - 0x16d4 ) ) { ReplacementFor_statx_to_stat ( & ReplacementFor_stx , ReplacementFor_st ) ; if ( ReplacementFor_want_btime ) { if ( ReplacementFor_stx . ReplacementFor_stx_mask & ReplacementFor_STATX_BTIME ) ReplacementFor_st -> ReplacementFor_st_mtim = ReplacementFor_statx_timestamp_to_timespec ( ReplacementFor_stx . ReplacementFor_stx_btime ) ; else ReplacementFor_st -> ReplacementFor_st_mtim . tv_sec = ReplacementFor_st -> ReplacementFor_st_mtim . ReplacementFor_tv_nsec = - ( 0x155f + 3049 - 0x2147 ) ; } } return ReplacementFor_ret ; } static int ReplacementFor_do_stat ( char const * name , struct stat * ReplacementFor_st ) < ReplacementFor_missing ( ( char ) ( 0xfb5 +1829 -0x169f ) ) > { return ReplacementFor_do_statx ( ReplacementFor_AT_FDCWD , name , ReplacementFor_st , ( 0x263 + 8894 - 0x2521 ) , ReplacementFor_calc_req_mask ( ) ) ; } static int ReplacementFor_do_lstat ( char const * name , struct stat * ReplacementFor_st ) < ReplacementFor_missing ( ( char ) ( 0x21f +6622 -0x1bc2 ) ) > { return ReplacementFor_do_statx ( ReplacementFor_AT_FDCWD , name , ReplacementFor_st , ReplacementFor_AT_SYMLINK_NOFOLLOW , ReplacementFor_calc_req_mask ( ) ) ; } static int ReplacementFor_stat_for_mode ( char const * name , struct stat * ReplacementFor_st ) < ReplacementFor_missing ( ( char ) ( 0xe37 +4252 -0x1e98 ) ) > { return ReplacementFor_do_statx ( ReplacementFor_AT_FDCWD , name , ReplacementFor_st , ( 0x2c9 + 2083 - 0xaec ) , ReplacementFor_STATX_MODE ) ; } static int ReplacementFor_stat_for_ino ( char const * name , struct stat * ReplacementFor_st ) < ReplacementFor_missing ( ( char ) ( 0xe27 +1265 -0x12dd ) ) > { return ReplacementFor_do_statx ( ReplacementFor_AT_FDCWD , name , ReplacementFor_st , ( 0x7d + 2221 - 0x92a ) , ReplacementFor_STATX_INO ) ; } static int ReplacementFor_fstat_for_ino ( int fd , struct stat * ReplacementFor_st ) < ReplacementFor_missing ( ( char ) ( 0x1338 +3004 -0x1eb9 ) ) > { return ReplacementFor_do_statx ( fd , " " , ReplacementFor_st , ReplacementFor_AT_EMPTY_PATH , ReplacementFor_STATX_INO ) ; } ReplacementFor_lse static int ReplacementFor_do_stat ( char const * name , struct stat * ReplacementFor_st ) < ReplacementFor_missing ( ( char ) ( 0x2fa +6869 -0x1d94 ) ) > { return stat ( name , ReplacementFor_st ) ; } static int ReplacementFor_do_lstat ( char const * name , struct stat * ReplacementFor_st ) < ReplacementFor_missing ( ( char ) ( 0xaea +2719 -0x154e ) ) > { return lstat ( name , ReplacementFor_st ) ; } static int ReplacementFor_stat_for_mode ( char const * name , struct stat * ReplacementFor_st ) < ReplacementFor_missing ( ( char ) ( 0x122c +2584 -0x1c09 ) ) > { return stat ( name , ReplacementFor_st ) ; } static int ReplacementFor_stat_for_ino ( char const * name , struct stat * ReplacementFor_st ) < ReplacementFor_missing ( ( char ) ( 0x13b8 +2194 -0x1c0f ) ) > { return stat ( name , ReplacementFor_st ) ; } static int ReplacementFor_fstat_for_ino ( int fd , struct stat * ReplacementFor_st ) < ReplacementFor_missing ( ( char ) ( 0x159a +102 -0x15c5 ) ) > { return fstat ( fd , ReplacementFor_st ) ; } ReplacementFor_ndif ReplacementFor_ATTRIBUTE_PURE  static char const * ReplacementFor_first_percent_b ( char const * ReplacementFor_fmt ) < ReplacementFor_missing ( ( char ) ( 0x431 +6584 -0x1dae ) ) > { for ( ; * ReplacementFor_fmt ; ReplacementFor_fmt ++ ) if ( ReplacementFor_fmt [ ( 0x22df + 220 - 0x23bb ) ] == ( ( char ) ( 0x17f + 5411 - 0x167d ) ) ) switch ( ReplacementFor_fmt [ ( 0x1339 + 1650 - 0x19aa ) ] ) { case ( ( char ) ( 0x6a2 + 3003 - 0x11fb ) ) : return ReplacementFor_fmt ; case ( ( char ) ( 0x1579 + 3369 - 0x227d ) ) : ReplacementFor_fmt ++ ; break ; } return NULL ; } static char ReplacementFor_RFC3986 [ ( 0x1547 + 3186 - 0x20b9 ) ] ; static void ReplacementFor_file_escape_init ( void ) < ReplacementFor_missing ( ( char ) ( 0x1469 +2600 -0x1e56 ) ) > { for ( int i = ( 0x10d7 + 3698 - 0x1f49 ) ; i < ( 0x3bf + 6484 - 0x1c13 ) ; i ++ ) ReplacementFor_RFC3986 [ i ] |= ReplacementFor_c_isalnum ( i ) || i == ( ( char ) ( 0x5f5 + 3373 - 0x12a4 ) ) || i == ( ( char ) ( 0x1dac + 1437 - 0x231c ) ) || i == ( ( char ) ( 0x8ff + 3429 - 0x1636 ) ) || i == ( ( char ) ( 0x582 + 1384 - 0xa8b ) ) ; } enum { ReplacementFor_MAX_MON_WIDTH = ( 0x2aa + 1338 - 0x7d8 ) } ; enum { ReplacementFor_ABFORMAT_SIZE = ( 0x91b + 7367 - 0x2562 ) } ; static char ReplacementFor_abformat [ ( 0xfc7 + 4388 - 0x20e9 ) ] [ ( 0x215 + 5890 - 0x190b ) ] [ ReplacementFor_ABFORMAT_SIZE ] ; static bool ReplacementFor_use_abformat ; static bool ReplacementFor_abmon_init ( char ReplacementFor_abmon [ ( 0x1276 + 2985 - 0x1e13 ) ] [ ReplacementFor_ABFORMAT_SIZE ] ) < ReplacementFor_missing ( ( char ) ( 0x1247 +1271 -0x1703 ) ) > { ReplacementFor_ndef ReplacementFor_HAVE_NL_LANGINFO  return false ; ReplacementFor_lse size_t ReplacementFor_required_mon_width = ReplacementFor_MAX_MON_WIDTH ; size_t ReplacementFor_curr_max_width ; do { ReplacementFor_curr_max_width = ReplacementFor_required_mon_width ; ReplacementFor_required_mon_width = ( 0x1 + 591 - 0x250 ) ; for ( int i = ( 0x1280 + 4453 - 0x23e5 ) ; i < ( 0x68b + 5302 - 0x1b35 ) ; i ++ ) { size_t ReplacementFor_width = ReplacementFor_curr_max_width ; char const * ReplacementFor_abbr = nl_langinfo ( ABMON_1 + i ) ; if ( strchr ( ReplacementFor_abbr , ( ( char ) ( 0xf08 + 1490 - 0x14b5 ) ) ) ) return false ; ReplacementFor_mbs_align_t ReplacementFor_alignment = isdigit ( ReplacementFor_to_uchar ( * ReplacementFor_abbr ) ) ? ReplacementFor_MBS_ALIGN_RIGHT : ReplacementFor_MBS_ALIGN_LEFT ; size_t ReplacementFor_req = ReplacementFor_mbsalign ( ReplacementFor_abbr , ReplacementFor_abmon [ i ] , ReplacementFor_ABFORMAT_SIZE , & ReplacementFor_width , ReplacementFor_alignment , ( 0x1a2f + 1873 - 0x2180 ) ) ; if ( ! ( ReplacementFor_req < ReplacementFor_ABFORMAT_SIZE ) ) return false ; ReplacementFor_required_mon_width = ReplacementFor_MAX ( ReplacementFor_required_mon_width , ReplacementFor_width ) ; } } while ( ReplacementFor_curr_max_width > ReplacementFor_required_mon_width ) ; return true ; ReplacementFor_ndif  } static void ReplacementFor_abformat_init ( void ) < ReplacementFor_missing ( ( char ) ( 0xf31 +3107 -0x1b19 ) ) > { char const * ReplacementFor_pb [ ( 0x1b4 + 6159 - 0x19c1 ) ] ; for ( int ReplacementFor_recent = ( 0x11e2 + 758 - 0x14d8 ) ; ReplacementFor_recent < ( 0x7c3 + 1416 - 0xd49 ) ; ReplacementFor_recent ++ ) ReplacementFor_pb [ ReplacementFor_recent ] = ReplacementFor_first_percent_b ( ReplacementFor_long_time_format [ ReplacementFor_recent ] ) ; if ( ! ( ReplacementFor_pb [ ( 0xabd + 6408 - 0x23c5 ) ] || ReplacementFor_pb [ ( 0x17d2 + 3089 - 0x23e2 ) ] ) ) return ; char ReplacementFor_abmon [ ( 0x103a + 2236 - 0x18ea ) ] [ ReplacementFor_ABFORMAT_SIZE ] ; if ( ! ReplacementFor_abmon_init ( ReplacementFor_abmon ) ) return ; for ( int ReplacementFor_recent = ( 0x253 + 4805 - 0x1518 ) ; ReplacementFor_recent < ( 0x19a8 + 2296 - 0x229e ) ; ReplacementFor_recent ++ ) { char const * ReplacementFor_fmt = ReplacementFor_long_time_format [ ReplacementFor_recent ] ; for ( int i = ( 0x205f + 908 - 0x23eb ) ; i < ( 0x47b + 6888 - 0x1f57 ) ; i ++ ) { char * ReplacementFor_nfmt = ReplacementFor_abformat [ ReplacementFor_recent ] [ i ] ; int ReplacementFor_nbytes ; if ( ! ReplacementFor_pb [ ReplacementFor_recent ] ) ReplacementFor_nbytes = ReplacementFor_snprintf ( ReplacementFor_nfmt , ReplacementFor_ABFORMAT_SIZE , " \x25 \x73 " , ReplacementFor_fmt ) ; else { if ( ! ( ReplacementFor_pb [ ReplacementFor_recent ] - ReplacementFor_fmt <= ReplacementFor_MIN ( ReplacementFor_ABFORMAT_SIZE , INT_MAX ) ) ) return ; int ReplacementFor_prefix_len = ReplacementFor_pb [ ReplacementFor_recent ] - ReplacementFor_fmt ; ReplacementFor_nbytes = ReplacementFor_snprintf ( ReplacementFor_nfmt , ReplacementFor_ABFORMAT_SIZE , " \x25 \x2e \x2a \x73 \x25 \x73 \x25 \x73 " , ReplacementFor_prefix_len , ReplacementFor_fmt , ReplacementFor_abmon [ i ] , ReplacementFor_pb [ ReplacementFor_recent ] + ( 0x218 + 4003 - 0x11b9 ) ) ; } if ( ! ( ( 0x425 + 7259 - 0x2080 ) <= ReplacementFor_nbytes && ReplacementFor_nbytes < ReplacementFor_ABFORMAT_SIZE ) ) return ; } } ReplacementFor_use_abformat = true ; } static size_t ReplacementFor_dev_ino_hash ( void const * ReplacementFor_x , size_t ReplacementFor_table_size ) < ReplacementFor_missing ( ( char ) ( 0x1b48 +1195 -0x1fb8 ) ) > { struct ReplacementFor_dev_ino const * ReplacementFor_p = ReplacementFor_x ; return ( uintmax_t ) ReplacementFor_p -> st_ino % ReplacementFor_table_size ; } static bool ReplacementFor_dev_ino_compare ( void const * ReplacementFor_x , void const * ReplacementFor_y ) < ReplacementFor_missing ( ( char ) ( 0x7bc +327 -0x8c8 ) ) > { struct ReplacementFor_dev_ino const * ReplacementFor_a = ReplacementFor_x ; struct ReplacementFor_dev_ino const * ReplacementFor_b = ReplacementFor_y ; return ReplacementFor_SAME_INODE ( * ReplacementFor_a , * ReplacementFor_b ) ? true : false ; } static void ReplacementFor_dev_ino_free ( void * ReplacementFor_x ) < ReplacementFor_missing ( ( char ) ( 0x14bd +1066 -0x18ac ) ) > { free ( ReplacementFor_x ) ; } static bool ReplacementFor_visit_dir ( dev_t ReplacementFor_dev , ino_t ReplacementFor_ino ) < ReplacementFor_missing ( ( char ) ( 0xe36 +5842 -0x24cd ) ) > { struct ReplacementFor_dev_ino * ReplacementFor_ent ; struct ReplacementFor_dev_ino * ReplacementFor_ent_from_table ; bool ReplacementFor_found_match ; ReplacementFor_ent = ReplacementFor_xmalloc ( sizeof * ReplacementFor_ent ) ; ReplacementFor_ent -> st_ino = ReplacementFor_ino ; ReplacementFor_ent -> st_dev = ReplacementFor_dev ; ReplacementFor_ent_from_table = ReplacementFor_hash_insert ( ReplacementFor_active_dir_set , ReplacementFor_ent ) ; if ( ReplacementFor_ent_from_table == NULL ) { ReplacementFor_xalloc_die ( ) ; } ReplacementFor_found_match = ( ReplacementFor_ent_from_table != ReplacementFor_ent ) ; if ( ReplacementFor_found_match ) { free ( ReplacementFor_ent ) ; } return ReplacementFor_found_match ; } static void ReplacementFor_free_pending_ent ( struct ReplacementFor_pending * ReplacementFor_p ) < ReplacementFor_missing ( ( char ) ( 0x2d1 +4701 -0x14f3 ) ) > { free ( ReplacementFor_p -> name ) ; free ( ReplacementFor_p -> ReplacementFor_realname ) ; free ( ReplacementFor_p ) ; } static bool ReplacementFor_is_colored ( enum ReplacementFor_indicator_no type ) < ReplacementFor_missing ( ( char ) ( 0x29b +881 -0x5d1 ) ) > { size_t len = ReplacementFor_color_indicator [ type ] . len ; char const * s = ReplacementFor_color_indicator [ type ] . ReplacementFor_string ; return ! ( len == ( 0x12b1 + 3428 - 0x2015 ) || ( len == ( 0xa69 + 6920 - 0x2570 ) && ReplacementFor_STRNCMP_LIT ( s , " \x30 " ) == ( 0xca6 + 6038 - 0x243c ) ) || ( len == ( 0x1408 + 3005 - 0x1fc3 ) && ReplacementFor_STRNCMP_LIT ( s , " \x30 \x30 " ) == ( 0xf59 + 3961 - 0x1ed2 ) ) ) ; } static void ReplacementFor_restore_default_color ( void ) < ReplacementFor_missing ( ( char ) ( 0x5db +5577 -0x1b69 ) ) > { ReplacementFor_put_indicator ( & ReplacementFor_color_indicator [ ReplacementFor_C_LEFT ] ) ; ReplacementFor_put_indicator ( & ReplacementFor_color_indicator [ ReplacementFor_C_RIGHT ] ) ; } static void ReplacementFor_set_normal_color ( void ) < ReplacementFor_missing ( ( char ) ( 0x1686 +2727 -0x20f2 ) ) > { if ( ReplacementFor_print_with_color && ReplacementFor_is_colored ( ReplacementFor_C_NORM ) ) { ReplacementFor_put_indicator ( & ReplacementFor_color_indicator [ ReplacementFor_C_LEFT ] ) ; ReplacementFor_put_indicator ( & ReplacementFor_color_indicator [ ReplacementFor_C_NORM ] ) ; ReplacementFor_put_indicator ( & ReplacementFor_color_indicator [ ReplacementFor_C_RIGHT ] ) ; } } static void ReplacementFor_sighandler ( int ReplacementFor_sig ) < ReplacementFor_missing ( ( char ) ( 0x184d +1287 -0x1d19 ) ) > { if ( ! SA_NOCLDSTOP ) signal ( ReplacementFor_sig , SIG_IGN ) ; if ( ! ReplacementFor_interrupt_signal ) ReplacementFor_interrupt_signal = ReplacementFor_sig ; } static void ReplacementFor_stophandler ( int ReplacementFor_sig ) < ReplacementFor_missing ( ( char ) ( 0x1c9b +1171 -0x20f3 ) ) > { if ( ! SA_NOCLDSTOP ) signal ( ReplacementFor_sig , ReplacementFor_stophandler ) ; if ( ! ReplacementFor_interrupt_signal ) ReplacementFor_stop_signal_count ++ ; } static void ReplacementFor_process_signals ( void ) < ReplacementFor_missing ( ( char ) ( 0x51d +1784 -0xbda ) ) > { while ( ReplacementFor_interrupt_signal || ReplacementFor_stop_signal_count ) { int ReplacementFor_sig ; int ReplacementFor_stops ; sigset_t ReplacementFor_oldset ; if ( ReplacementFor_used_color ) ReplacementFor_restore_default_color ( ) ; fflush ( stdout ) ; sigprocmask ( SIG_BLOCK , & ReplacementFor_caught_signals , & ReplacementFor_oldset ) ; ReplacementFor_sig = ReplacementFor_interrupt_signal ; ReplacementFor_stops = ReplacementFor_stop_signal_count ; if ( ReplacementFor_stops ) { ReplacementFor_stop_signal_count = ReplacementFor_stops - ( 0x8f1 + 4548 - 0x1ab4 ) ; ReplacementFor_sig = SIGSTOP ; } else signal ( ReplacementFor_sig , SIG_DFL ) ; raise ( ReplacementFor_sig ) ; sigprocmask ( SIG_SETMASK , & ReplacementFor_oldset , NULL ) ; } } static void ReplacementFor_signal_setup ( bool ReplacementFor_init ) < ReplacementFor_missing ( ( char ) ( 0x2c2 +2215 -0xb2e ) ) > { static int const ReplacementFor_sig [ ] = { SIGTSTP , SIGALRM , SIGHUP , SIGINT , SIGPIPE , SIGQUIT , SIGTERM , ReplacementFor_def < ReplacementFor_missing ( ( char ) ( 0x472 + 1354 - 0x981 ) ) > SIGPOLL SIGPOLL , ReplacementFor_ndif < ReplacementFor_missing ( ( char ) ( 0x15fd + 3558 - 0x23a8 ) ) > ReplacementFor_def ReplacementFor_SIGPROF ReplacementFor_SIGPROF , ReplacementFor_ndif < ReplacementFor_missing ( ( char ) ( 0x83f + 7236 - 0x2448 ) ) > ReplacementFor_def ReplacementFor_SIGVTALRM ReplacementFor_SIGVTALRM , ReplacementFor_ndif < ReplacementFor_missing ( ( char ) ( 0xe85 + 4471 - 0x1fc1 ) ) > ReplacementFor_def SIGXCPU SIGXCPU , ReplacementFor_ndif < ReplacementFor_missing ( ( char ) ( 0x36f + 413 - 0x4d1 ) ) > ReplacementFor_def SIGXFSZ SIGXFSZ , ReplacementFor_ndif } ; enum { ReplacementFor_nsigs = ReplacementFor_ARRAY_CARDINALITY ( ReplacementFor_sig ) } ; ! SA_NOCLDSTOP < ReplacementFor_missing ( ( char ) ( 0xb48 + 6522 - 0x2487 ) ) > static  bool ReplacementFor_caught_sig [ ReplacementFor_nsigs ] ; ReplacementFor_ndif int ReplacementFor_j ; if ( ReplacementFor_init ) { SA_NOCLDSTOP struct  sigaction ReplacementFor_act ; sigemptyset ( & ReplacementFor_caught_signals ) ; for ( ReplacementFor_j = ( 0x88b + 7742 - 0x26c9 ) ; ReplacementFor_j < ReplacementFor_nsigs ; ReplacementFor_j ++ ) { sigaction ( ReplacementFor_sig [ ReplacementFor_j ] , NULL , & ReplacementFor_act ) ; if ( ReplacementFor_act . sa_handler != SIG_IGN ) sigaddset ( & ReplacementFor_caught_signals , ReplacementFor_sig [ ReplacementFor_j ] ) ; } ReplacementFor_act . sa_mask = ReplacementFor_caught_signals ; ReplacementFor_act . sa_flags = SA_RESTART ; for ( ReplacementFor_j = ( 0x163b + 2883 - 0x217e ) ; ReplacementFor_j < ReplacementFor_nsigs ; ReplacementFor_j ++ ) if ( sigismember ( & ReplacementFor_caught_signals , ReplacementFor_sig [ ReplacementFor_j ] ) ) { ReplacementFor_act . sa_handler = ReplacementFor_sig [ ReplacementFor_j ] == SIGTSTP ? ReplacementFor_stophandler : ReplacementFor_sighandler ; sigaction ( ReplacementFor_sig [ ReplacementFor_j ] , & ReplacementFor_act , NULL ) ; } ReplacementFor_lse for ( ReplacementFor_j  = ( 0x158 + 3487 - 0xef7 ) ; ReplacementFor_j < ReplacementFor_nsigs ; ReplacementFor_j ++ ) { ReplacementFor_caught_sig [ ReplacementFor_j ] = ( signal ( ReplacementFor_sig [ ReplacementFor_j ] , SIG_IGN ) != SIG_IGN ) ; if ( ReplacementFor_caught_sig [ ReplacementFor_j ] ) { signal ( ReplacementFor_sig [ ReplacementFor_j ] , ReplacementFor_sig [ ReplacementFor_j ] == SIGTSTP ? ReplacementFor_stophandler : ReplacementFor_sighandler ) ; ReplacementFor_siginterrupt ( ReplacementFor_sig [ ReplacementFor_j ] , ( 0x17f5 + 125 - 0x1872 ) ) ; } } ReplacementFor_ndif  } else { SA_NOCLDSTOP for ( ReplacementFor_j  = ( 0xde7 + 2053 - 0x15ec ) ; ReplacementFor_j < ReplacementFor_nsigs ; ReplacementFor_j ++ ) if ( sigismember ( & ReplacementFor_caught_signals , ReplacementFor_sig [ ReplacementFor_j ] ) ) signal ( ReplacementFor_sig [ ReplacementFor_j ] , SIG_DFL ) ; ReplacementFor_lse for ( ReplacementFor_j  = ( 0x1550 + 592 - 0x17a0 ) ; ReplacementFor_j < ReplacementFor_nsigs ; ReplacementFor_j ++ ) if ( ReplacementFor_caught_sig [ ReplacementFor_j ] ) signal ( ReplacementFor_sig [ ReplacementFor_j ] , SIG_DFL ) ; ReplacementFor_ndif  } } static void ReplacementFor_signal_init ( void ) < ReplacementFor_missing ( ( char ) ( 0x261 +8600 -0x23be ) ) > { ReplacementFor_signal_setup ( true ) ; } static void ReplacementFor_signal_restore ( void ) < ReplacementFor_missing ( ( char ) ( 0x13d9 +159 -0x143d ) ) > { ReplacementFor_signal_setup ( false ) ; } int main ( int ReplacementFor_argc , char * * ReplacementFor_argv ) < ReplacementFor_missing ( ( char ) ( 0x974 +2848 -0x1459 ) ) > { int i ; struct ReplacementFor_pending * ReplacementFor_thispend ; int ReplacementFor_n_files ; ReplacementFor_initialize_main ( & ReplacementFor_argc , & ReplacementFor_argv ) ; ReplacementFor_set_program_name ( ReplacementFor_argv [ ( 0x12d3 + 5120 - 0x26d3 ) ] ) ; setlocale ( LC_ALL , " " ) ; ReplacementFor_bindtextdomain ( ReplacementFor_PACKAGE , ReplacementFor_LOCALEDIR ) ; ReplacementFor_textdomain ( ReplacementFor_PACKAGE ) ; ReplacementFor_initialize_exit_failure ( ReplacementFor_LS_FAILURE ) ; atexit ( ReplacementFor_close_stdout ) ; ReplacementFor_assert ( ReplacementFor_ARRAY_CARDINALITY ( ReplacementFor_color_indicator ) + ( 0x179f + 1743 - 0x1e6d ) == ReplacementFor_ARRAY_CARDINALITY ( ReplacementFor_indicator_name ) ) ; exit_status = EXIT_SUCCESS ; ReplacementFor_print_dir_name = true ; ReplacementFor_pending_dirs = NULL ; ReplacementFor_current_time . tv_sec = ReplacementFor_TYPE_MINIMUM ( time_t ) ; ReplacementFor_current_time . ReplacementFor_tv_nsec = - ( 0x13b + 8202 - 0x2144 ) ; i = ReplacementFor_decode_switches ( ReplacementFor_argc , ReplacementFor_argv ) ; if ( ReplacementFor_print_with_color ) ReplacementFor_parse_ls_color ( ) ; if ( ReplacementFor_print_with_color ) { ReplacementFor_tabsize = ( 0xa55 + 5735 - 0x20bc ) ; } if ( ReplacementFor_directories_first ) ReplacementFor_check_symlink_mode = true ; else if ( ReplacementFor_print_with_color ) { if ( ReplacementFor_is_colored ( ReplacementFor_C_ORPHAN ) || ( ReplacementFor_is_colored ( ReplacementFor_C_EXEC ) && ReplacementFor_color_symlink_as_referent ) || ( ReplacementFor_is_colored ( ReplacementFor_C_MISSING ) && format == ReplacementFor_long_format ) ) ReplacementFor_check_symlink_mode = true ; } if ( ReplacementFor_dereference == ReplacementFor_DEREF_UNDEFINED ) ReplacementFor_dereference = ( ( ReplacementFor_immediate_dirs || ReplacementFor_indicator_style == ReplacementFor_classify || format == ReplacementFor_long_format ) ? ReplacementFor_DEREF_NEVER : ReplacementFor_DEREF_COMMAND_LINE_SYMLINK_TO_DIR ) ; if ( ReplacementFor_recursive ) { ReplacementFor_active_dir_set = ReplacementFor_hash_initialize ( ReplacementFor_INITIAL_TABLE_SIZE , NULL , ReplacementFor_dev_ino_hash , ReplacementFor_dev_ino_compare , ReplacementFor_dev_ino_free ) ; if ( ReplacementFor_active_dir_set == NULL ) ReplacementFor_xalloc_die ( ) ; ReplacementFor_obstack_init ( & ReplacementFor_dev_ino_obstack ) ; } ReplacementFor_localtz = ReplacementFor_tzalloc ( getenv ( " \x54 \x5a " ) ) ; ReplacementFor_format_needs_stat = ReplacementFor_sort_type == ReplacementFor_sort_time || ReplacementFor_sort_type == ReplacementFor_sort_size || format == ReplacementFor_long_format || ReplacementFor_print_scontext || ReplacementFor_print_block_size ; ReplacementFor_format_needs_type = ( ! ReplacementFor_format_needs_stat && ( ReplacementFor_recursive || ReplacementFor_print_with_color || ReplacementFor_indicator_style != ReplacementFor_none || ReplacementFor_directories_first ) ) ; if ( ReplacementFor_dired ) { ReplacementFor_obstack_init ( & ReplacementFor_dired_obstack ) ; ReplacementFor_obstack_init ( & ReplacementFor_subdired_obstack ) ; } if ( ReplacementFor_print_hyperlink ) { ReplacementFor_file_escape_init ( ) ; ReplacementFor_hostname = ReplacementFor_xgethostname ( ) ; if ( ! ReplacementFor_hostname ) ReplacementFor_hostname = " " ; } ReplacementFor_cwd_n_alloc = ( 0xcc0 + 5869 - 0x2349 ) ; ReplacementFor_cwd_file = ReplacementFor_xnmalloc ( ReplacementFor_cwd_n_alloc , sizeof * ReplacementFor_cwd_file ) ; ReplacementFor_cwd_n_used = ( 0x140d + 2526 - 0x1deb ) ; ReplacementFor_clear_files ( ) ; ReplacementFor_n_files = ReplacementFor_argc - i ; if ( ReplacementFor_n_files <= ( 0xcb4 + 4303 - 0x1d83 ) ) { if ( ReplacementFor_immediate_dirs ) ReplacementFor_gobble_file ( " \x2e " , ReplacementFor_directory , ReplacementFor_NOT_AN_INODE_NUMBER , true , " " ) ; else ReplacementFor_queue_directory ( " \x2e " , NULL , true ) ; } else do ReplacementFor_gobble_file ( ReplacementFor_argv [ i ++ ] , ReplacementFor_unknown , ReplacementFor_NOT_AN_INODE_NUMBER , true , " " ) ; while ( i < ReplacementFor_argc ) ; if ( ReplacementFor_cwd_n_used ) { ReplacementFor_sort_files ( ) ; if ( ! ReplacementFor_immediate_dirs ) ReplacementFor_extract_dirs_from_files ( NULL , true ) ; } if ( ReplacementFor_cwd_n_used ) { ReplacementFor_print_current_files ( ) ; if ( ReplacementFor_pending_dirs ) ReplacementFor_dired_outbyte ( ' \n ' ) ; } else if ( ReplacementFor_n_files <= ( 0x640 + 3646 - 0x147d ) && ReplacementFor_pending_dirs && ReplacementFor_pending_dirs -> next == ( 0x163 + 5909 - 0x1878 ) ) ReplacementFor_print_dir_name = false ; while ( ReplacementFor_pending_dirs ) { ReplacementFor_thispend = ReplacementFor_pending_dirs ; ReplacementFor_pending_dirs = ReplacementFor_pending_dirs -> next ; if ( ReplacementFor_LOOP_DETECT ) { if ( ReplacementFor_thispend -> name == NULL ) { struct ReplacementFor_dev_ino ReplacementFor_di = ReplacementFor_dev_ino_pop ( ) ; struct ReplacementFor_dev_ino * ReplacementFor_found = ReplacementFor_hash_remove ( ReplacementFor_active_dir_set , & ReplacementFor_di ) ; if ( false ) ReplacementFor_assert_matching_dev_ino ( ReplacementFor_thispend -> ReplacementFor_realname , ReplacementFor_di ) ; ReplacementFor_assert ( ReplacementFor_found ) ; ReplacementFor_dev_ino_free ( ReplacementFor_found ) ; ReplacementFor_free_pending_ent ( ReplacementFor_thispend ) ; continue ; } } ReplacementFor_print_dir ( ReplacementFor_thispend -> name , ReplacementFor_thispend -> ReplacementFor_realname , ReplacementFor_thispend -> ReplacementFor_command_line_arg ) ; ReplacementFor_free_pending_ent ( ReplacementFor_thispend ) ; ReplacementFor_print_dir_name = true ; } if ( ReplacementFor_print_with_color && ReplacementFor_used_color ) { int ReplacementFor_j ; if ( ! ( ReplacementFor_color_indicator [ ReplacementFor_C_LEFT ] . len == ( 0x26f + 8779 - 0x24b8 ) && memcmp ( ReplacementFor_color_indicator [ ReplacementFor_C_LEFT ] . ReplacementFor_string , " \033 " , ( 0xf2a + 1554 - 0x153a ) ) == ( 0x1f24 + 286 - 0x2042 ) && ReplacementFor_color_indicator [ ReplacementFor_C_RIGHT ] . len == ( 0x10bb + 3812 - 0x1f9e ) && ReplacementFor_color_indicator [ ReplacementFor_C_RIGHT ] . ReplacementFor_string [ ( 0x918 + 5656 - 0x1f30 ) ] == ( ( char ) ( 0x146f + 2407 - 0x1d69 ) ) ) ) ReplacementFor_restore_default_color ( ) ; fflush ( stdout ) ; ReplacementFor_signal_restore ( ) ; for ( ReplacementFor_j = ReplacementFor_stop_signal_count ; ReplacementFor_j ; ReplacementFor_j -- ) raise ( SIGSTOP ) ; ReplacementFor_j = ReplacementFor_interrupt_signal ; if ( ReplacementFor_j ) raise ( ReplacementFor_j ) ; } if ( ReplacementFor_dired ) { ReplacementFor_dired_dump_obstack ( " \x2f \x2f \x44 \x49 \x52 \x45 \x44 \x2f \x2f " , & ReplacementFor_dired_obstack ) ; ReplacementFor_dired_dump_obstack ( " \x2f \x2f \x53 \x55 \x42 \x44 \x49 \x52 \x45 \x44 \x2f \x2f " , & ReplacementFor_subdired_obstack ) ; printf ( " \x2f \x2f \x44 \x49 \x52 \x45 \x44 \x2d \x4f \x50 \x54 \x49 \x4f \x4e \x53 \x2f \x2f \x20 \x2d \x2d \x71 \x75 \x6f \x74 \x69 \x6e \x67 \x2d \x73 \x74 \x79 \x6c \x65 \x3d \x25 \x73 " " \n " , ReplacementFor_quoting_style_args [ ReplacementFor_get_quoting_style ( ReplacementFor_filename_quoting_options ) ] ) ; } if ( ReplacementFor_LOOP_DETECT ) { ReplacementFor_assert ( ReplacementFor_hash_get_n_entries ( ReplacementFor_active_dir_set ) == ( 0xea3 + 3186 - 0x1b15 ) ) ; ReplacementFor_hash_free ( ReplacementFor_active_dir_set ) ; } return exit_status ; } static ptrdiff_t ReplacementFor_decode_line_length ( char const * ReplacementFor_spec ) < ReplacementFor_missing ( ( char ) ( 0x86c +2327 -0x1148 ) ) > { uintmax_t val ; switch ( ReplacementFor_xstrtoumax ( ReplacementFor_spec , NULL , ( 0x1a7c + 1940 - 0x2210 ) , & val , " " ) ) { case ReplacementFor_LONGINT_OK : return val <= ReplacementFor_MIN ( PTRDIFF_MAX , SIZE_MAX ) ? val : ( 0x32a + 686 - 0x5d8 ) ; case ReplacementFor_LONGINT_OVERFLOW : return ( 0x2d7 + 7125 - 0x1eac ) ; default : return - ( 0x17a + 6435 - 0x1a9c ) ; } } static bool ReplacementFor_stdout_isatty ( void ) < ReplacementFor_missing ( ( char ) ( 0x387 +657 -0x5dd ) ) > { static signed char ReplacementFor_out_tty = - ( 0x1f4 + 6057 - 0x199c ) ; if ( ReplacementFor_out_tty < ( 0x880 + 3353 - 0x1599 ) ) ReplacementFor_out_tty = isatty ( STDOUT_FILENO ) ; ReplacementFor_assume ( ReplacementFor_out_tty == ( 0x48f + 4037 - 0x1454 ) || ReplacementFor_out_tty == ( 0x128 + 2945 - 0xca8 ) ) ; return ReplacementFor_out_tty ; } static int ReplacementFor_decode_switches ( int ReplacementFor_argc , char * * ReplacementFor_argv ) < ReplacementFor_missing ( ( char ) ( 0x612 +4685 -0x1824 ) ) > { char * ReplacementFor_time_style_option = NULL ; bool ReplacementFor_kibibytes_specified = false ; int ReplacementFor_format_opt = - ( 0x12f5 + 4532 - 0x24a8 ) ; int ReplacementFor_hide_control_chars_opt = - ( 0x198a + 62 - 0x19c7 ) ; int ReplacementFor_quoting_style_opt = - ( 0x7aa + 141 - 0x836 ) ; int ReplacementFor_sort_opt = - ( 0x426 + 7121 - 0x1ff6 ) ; ptrdiff_t ReplacementFor_tabsize_opt = - ( 0x186 + 2085 - 0x9aa ) ; ptrdiff_t ReplacementFor_width_opt = - ( 0x21e3 + 269 - 0x22ef ) ; while ( true ) { int ReplacementFor_oi = - ( 0x91d + 7426 - 0x261e ) ; int ReplacementFor_c = ReplacementFor_getopt_long ( ReplacementFor_argc , ReplacementFor_argv , " \x61 \x62 \x63 \x64 \x66 \x67 \x68 \x69 \x6b \x6c \x6d \x6e \x6f \x70 \x71 \x72 \x73 \x74 \x75 \x76 \x77 \x3a \x78 \x41 \x42 \x43 \x44 \x46 \x47 \x48 \x49 \x3a \x4c \x4e \x51 \x52 \x53 \x54 \x3a \x55 \x58 \x5a \x31 " , ReplacementFor_long_options , & ReplacementFor_oi ) ; if ( ReplacementFor_c == - ( 0x13c + 3655 - 0xf82 ) ) break ; switch ( ReplacementFor_c ) { case ( ( char ) ( 0x80b + 1309 - 0xcc7 ) ) : ReplacementFor_ignore_mode = ReplacementFor_IGNORE_MINIMAL ; break ; case ( ( char ) ( 0xad1 + 3463 - 0x17f6 ) ) : ReplacementFor_quoting_style_opt = ReplacementFor_escape_quoting_style ; break ; case ( ( char ) ( 0xd5a + 472 - 0xecf ) ) : ReplacementFor_time_type = ReplacementFor_time_ctime ; break ; case ( ( char ) ( 0x666 + 1069 - 0xa2f ) ) : ReplacementFor_immediate_dirs = true ; break ; case ( ( char ) ( 0x188c + 2932 - 0x239a ) ) : ReplacementFor_ignore_mode = ReplacementFor_IGNORE_MINIMAL ; ReplacementFor_sort_opt = ReplacementFor_sort_none ; if ( ReplacementFor_format_opt == ReplacementFor_long_format ) ReplacementFor_format_opt = - ( 0x471 + 2153 - 0xcd9 ) ; ReplacementFor_print_with_color = false ; ReplacementFor_print_hyperlink = false ; ReplacementFor_print_block_size = false ; break ; case ReplacementFor_FILE_TYPE_INDICATOR_OPTION : ReplacementFor_indicator_style = ReplacementFor_file_type ; break ; case ( ( char ) ( 0x16f0 + 2666 - 0x20f3 ) ) : ReplacementFor_format_opt = ReplacementFor_long_format ; ReplacementFor_print_owner = false ; break ; case ( ( char ) ( 0x873 + 540 - 0xa27 ) ) : ReplacementFor_file_human_output_opts = ReplacementFor_human_output_opts = ReplacementFor_human_autoscale | ReplacementFor_human_SI | ReplacementFor_human_base_1024 ; ReplacementFor_file_output_block_size = ReplacementFor_output_block_size = ( 0x650 + 3388 - 0x138b ) ; break ; case ( ( char ) ( 0xdbf + 4091 - 0x1d51 ) ) : ReplacementFor_print_inode = true ; break ; case ( ( char ) ( 0xc18 + 2657 - 0x160e ) ) : ReplacementFor_kibibytes_specified = true ; break ; case ( ( char ) ( 0x1a1 + 3146 - 0xd7f ) ) : ReplacementFor_format_opt = ReplacementFor_long_format ; break ; case ( ( char ) ( 0x572 + 8249 - 0x253e ) ) : ReplacementFor_format_opt = ReplacementFor_with_commas ; break ; case ( ( char ) ( 0x134f + 756 - 0x15d5 ) ) : ReplacementFor_numeric_ids = true ; ReplacementFor_format_opt = ReplacementFor_long_format ; break ; case ( ( char ) ( 0x1382 + 3172 - 0x1f77 ) ) : ReplacementFor_format_opt = ReplacementFor_long_format ; ReplacementFor_print_group = false ; break ; case ( ( char ) ( 0x1408 + 1993 - 0x1b61 ) ) : ReplacementFor_indicator_style = ReplacementFor_slash ; break ; case ( ( char ) ( 0xcfb + 6159 - 0x2499 ) ) : ReplacementFor_hide_control_chars_opt = true ; break ; case ( ( char ) ( 0x1bd6 + 2030 - 0x2352 ) ) : ReplacementFor_sort_reverse = true ; break ; case ( ( char ) ( 0xf26 + 5463 - 0x240a ) ) : ReplacementFor_print_block_size = true ; break ; case ( ( char ) ( 0x20f4 + 1050 - 0x249a ) ) : ReplacementFor_sort_opt = ReplacementFor_sort_time ; break ; case ( ( char ) ( 0x17d5 + 3305 - 0x2449 ) ) : ReplacementFor_time_type = ReplacementFor_time_atime ; break ; case ( ( char ) ( 0x458 + 7130 - 0x1fbc ) ) : ReplacementFor_sort_opt = ReplacementFor_sort_version ; break ; case ( ( char ) ( 0x5cc + 7578 - 0x22ef ) ) : ReplacementFor_width_opt = ReplacementFor_decode_line_length ( optarg ) ; if ( ReplacementFor_width_opt < ( 0x7bc + 2177 - 0x103d ) ) ReplacementFor_die ( ReplacementFor_LS_FAILURE , ( 0xad8 + 5149 - 0x1ef5 ) , " \x25 \x73 \x3a \x20 \x25 \x73 " , ReplacementFor__ ( " \x69 \x6e \x76 \x61 \x6c \x69 \x64 \x20 \x6c \x69 \x6e \x65 \x20 \x77 \x69 \x64 \x74 \x68 " ) , ReplacementFor_quote ( optarg ) ) ; break ; case ( ( char ) ( 0x808 + 2072 - 0xfa8 ) ) : ReplacementFor_format_opt = ReplacementFor_horizontal ; break ; case ( ( char ) ( 0xc05 + 4605 - 0x1dc1 ) ) : ReplacementFor_ignore_mode = ReplacementFor_IGNORE_DOT_AND_DOTDOT ; break ; case ( ( char ) ( 0x53a + 6005 - 0x1c6d ) ) : ReplacementFor_add_ignore_pattern ( " \x2a \x7e " ) ; ReplacementFor_add_ignore_pattern ( " \x2e \x2a \x7e " ) ; break ; case ( ( char ) ( 0xb13 + 1912 - 0x1248 ) ) : ReplacementFor_format_opt = ReplacementFor_many_per_line ; break ; case ( ( char ) ( 0x150f + 2493 - 0x1e88 ) ) : ReplacementFor_dired = true ; break ; case ( ( char ) ( 0x1b6 + 2562 - 0xb72 ) ) : { int i ; if ( optarg ) i = ReplacementFor_XARGMATCH ( " \x2d \x2d \x63 \x6c \x61 \x73 \x73 \x69 \x66 \x79 " , optarg , ReplacementFor_when_args , ReplacementFor_when_types ) ; else i = ReplacementFor_when_always ; if ( i == ReplacementFor_when_always || ( i == ReplacementFor_when_if_tty && ReplacementFor_stdout_isatty ( ) ) ) ReplacementFor_indicator_style = ReplacementFor_classify ; break ; } case ( ( char ) ( 0x2074 + 196 - 0x20f1 ) ) : ReplacementFor_print_group = false ; break ; case ( ( char ) ( 0x234 + 4488 - 0x1374 ) ) : ReplacementFor_dereference = ReplacementFor_DEREF_COMMAND_LINE_ARGUMENTS ; break ; case ReplacementFor_DEREFERENCE_COMMAND_LINE_SYMLINK_TO_DIR_OPTION : ReplacementFor_dereference = ReplacementFor_DEREF_COMMAND_LINE_SYMLINK_TO_DIR ; break ; case ( ( char ) ( 0x1347 + 2855 - 0x1e25 ) ) : ReplacementFor_add_ignore_pattern ( optarg ) ; break ; case ( ( char ) ( 0xbe8 + 3297 - 0x187d ) ) : ReplacementFor_dereference = ReplacementFor_DEREF_ALWAYS ; break ; case ( ( char ) ( 0x85b + 5292 - 0x1cb9 ) ) : ReplacementFor_quoting_style_opt = ReplacementFor_literal_quoting_style ; break ; case ( ( char ) ( 0x3e5 + 2386 - 0xce6 ) ) : ReplacementFor_quoting_style_opt = ReplacementFor_c_quoting_style ; break ; case ( ( char ) ( 0x15f + 9719 - 0x2704 ) ) : ReplacementFor_recursive = true ; break ; case ( ( char ) ( 0xdf7 + 4426 - 0x1eee ) ) : ReplacementFor_sort_opt = ReplacementFor_sort_size ; break ; case ( ( char ) ( 0x1016 + 1826 - 0x16e4 ) ) : ReplacementFor_tabsize_opt = ReplacementFor_xnumtoumax ( optarg , ( 0x128b + 87 - 0x12e2 ) , ( 0x742 + 5424 - 0x1c72 ) , ReplacementFor_MIN ( PTRDIFF_MAX , SIZE_MAX ) , " " , ReplacementFor__ ( " \x69 \x6e \x76 \x61 \x6c \x69 \x64 \x20 \x74 \x61 \x62 \x20 \x73 \x69 \x7a \x65 " ) , ReplacementFor_LS_FAILURE ) ; break ; case ( ( char ) ( 0x6ec + 7642 - 0x2471 ) ) : ReplacementFor_sort_opt = ReplacementFor_sort_none ; break ; case ( ( char ) ( 0x906 + 6274 - 0x2130 ) ) : ReplacementFor_sort_opt = ReplacementFor_sort_extension ; break ; case ( ( char ) ( 0x13fd + 780 - 0x16d8 ) ) : if ( ReplacementFor_format_opt != ReplacementFor_long_format ) ReplacementFor_format_opt = ReplacementFor_one_per_line ; break ; case ReplacementFor_AUTHOR_OPTION : ReplacementFor_print_author = true ; break ; case ReplacementFor_HIDE_OPTION : { struct ReplacementFor_ignore_pattern * ReplacementFor_hide = ReplacementFor_xmalloc ( sizeof * ReplacementFor_hide ) ; ReplacementFor_hide -> ReplacementFor_pattern = optarg ; ReplacementFor_hide -> next = ReplacementFor_hide_patterns ; ReplacementFor_hide_patterns = ReplacementFor_hide ; } break ; case ReplacementFor_SORT_OPTION : ReplacementFor_sort_opt = ReplacementFor_XARGMATCH ( " \x2d \x2d \x73 \x6f \x72 \x74 " , optarg , ReplacementFor_sort_args , ReplacementFor_sort_types ) ; break ; case ReplacementFor_GROUP_DIRECTORIES_FIRST_OPTION : ReplacementFor_directories_first = true ; break ; case ReplacementFor_TIME_OPTION : ReplacementFor_time_type = ReplacementFor_XARGMATCH ( " \x2d \x2d \x74 \x69 \x6d \x65 " , optarg , ReplacementFor_time_args , ReplacementFor_time_types ) ; break ; case ReplacementFor_FORMAT_OPTION : ReplacementFor_format_opt = ReplacementFor_XARGMATCH ( " \x2d \x2d \x66 \x6f \x72 \x6d \x61 \x74 " , optarg , ReplacementFor_format_args , ReplacementFor_format_types ) ; break ; case ReplacementFor_FULL_TIME_OPTION : ReplacementFor_format_opt = ReplacementFor_long_format ; ReplacementFor_time_style_option = ReplacementFor_bad_cast ( " \x66 \x75 \x6c \x6c \x2d \x69 \x73 \x6f " ) ; break ; case ReplacementFor_COLOR_OPTION : { int i ; if ( optarg ) i = ReplacementFor_XARGMATCH ( " \x2d \x2d \x63 \x6f \x6c \x6f \x72 " , optarg , ReplacementFor_when_args , ReplacementFor_when_types ) ; else i = ReplacementFor_when_always ; ReplacementFor_print_with_color = ( i == ReplacementFor_when_always || ( i == ReplacementFor_when_if_tty && ReplacementFor_stdout_isatty ( ) ) ) ; break ; } case ReplacementFor_HYPERLINK_OPTION : { int i ; if ( optarg ) i = ReplacementFor_XARGMATCH ( " \x2d \x2d \x68 \x79 \x70 \x65 \x72 \x6c \x69 \x6e \x6b " , optarg , ReplacementFor_when_args , ReplacementFor_when_types ) ; else i = ReplacementFor_when_always ; ReplacementFor_print_hyperlink = ( i == ReplacementFor_when_always || ( i == ReplacementFor_when_if_tty && ReplacementFor_stdout_isatty ( ) ) ) ; break ; } case ReplacementFor_INDICATOR_STYLE_OPTION : ReplacementFor_indicator_style = ReplacementFor_XARGMATCH ( " \x2d \x2d \x69 \x6e \x64 \x69 \x63 \x61 \x74 \x6f \x72 \x2d \x73 \x74 \x79 \x6c \x65 " , optarg , ReplacementFor_indicator_style_args , ReplacementFor_indicator_style_types ) ; break ; case ReplacementFor_QUOTING_STYLE_OPTION : ReplacementFor_quoting_style_opt = ReplacementFor_XARGMATCH ( " \x2d \x2d \x71 \x75 \x6f \x74 \x69 \x6e \x67 \x2d \x73 \x74 \x79 \x6c \x65 " , optarg , ReplacementFor_quoting_style_args , ReplacementFor_quoting_style_vals ) ; break ; case ReplacementFor_TIME_STYLE_OPTION : ReplacementFor_time_style_option = optarg ; break ; case ReplacementFor_SHOW_CONTROL_CHARS_OPTION : ReplacementFor_hide_control_chars_opt = false ; break ; case ReplacementFor_BLOCK_SIZE_OPTION : { enum ReplacementFor_strtol_error e = ReplacementFor_human_options ( optarg , & ReplacementFor_human_output_opts , & ReplacementFor_output_block_size ) ; if ( e != ReplacementFor_LONGINT_OK ) ReplacementFor_xstrtol_fatal ( e , ReplacementFor_oi , ( 0xdbb + 2147 - 0x161e ) , ReplacementFor_long_options , optarg ) ; ReplacementFor_file_human_output_opts = ReplacementFor_human_output_opts ; ReplacementFor_file_output_block_size = ReplacementFor_output_block_size ; } break ; case ReplacementFor_SI_OPTION : ReplacementFor_file_human_output_opts = ReplacementFor_human_output_opts = ReplacementFor_human_autoscale | ReplacementFor_human_SI ; ReplacementFor_file_output_block_size = ReplacementFor_output_block_size = ( 0x47 + 4878 - 0x1354 ) ; break ; case ( ( char ) ( 0xf62 + 2745 - 0x19c1 ) ) : ReplacementFor_print_scontext = true ; break ; case ReplacementFor_ZERO_OPTION : ReplacementFor_eolbyte = ( 0xe54 + 2009 - 0x162d ) ; ReplacementFor_hide_control_chars_opt = false ; if ( ReplacementFor_format_opt != ReplacementFor_long_format ) ReplacementFor_format_opt = ReplacementFor_one_per_line ; ReplacementFor_print_with_color = false ; ReplacementFor_quoting_style_opt = ReplacementFor_literal_quoting_style ; break ; ReplacementFor_case_GETOPT_HELP_CHAR ; ReplacementFor_case_GETOPT_VERSION_CHAR ( ReplacementFor_PROGRAM_NAME , ReplacementFor_AUTHORS ) ; default : ReplacementFor_usage ( ReplacementFor_LS_FAILURE ) ; } } if ( ! ReplacementFor_output_block_size ) { char const * ReplacementFor_ls_block_size = getenv ( " \x4c \x53 \x5f \x42 \x4c \x4f \x43 \x4b \x5f \x53 \x49 \x5a \x45 " ) ; ReplacementFor_human_options ( ReplacementFor_ls_block_size , & ReplacementFor_human_output_opts , & ReplacementFor_output_block_size ) ; if ( ReplacementFor_ls_block_size || getenv ( " \x42 \x4c \x4f \x43 \x4b \x5f \x53 \x49 \x5a \x45 " ) ) { ReplacementFor_file_human_output_opts = ReplacementFor_human_output_opts ; ReplacementFor_file_output_block_size = ReplacementFor_output_block_size ; } if ( ReplacementFor_kibibytes_specified ) { ReplacementFor_human_output_opts = ( 0x2d5 + 393 - 0x45e ) ; ReplacementFor_output_block_size = ( 0x1ea1 + 2039 - 0x2298 ) ; } } format = ( ( 0x8c3 + 4659 - 0x1af6 ) <= ReplacementFor_format_opt ? ReplacementFor_format_opt : ReplacementFor_ls_mode == ReplacementFor_LS_LS ? ( ReplacementFor_stdout_isatty ( ) ? ReplacementFor_many_per_line : ReplacementFor_one_per_line ) : ReplacementFor_ls_mode == ReplacementFor_LS_MULTI_COL ? ReplacementFor_many_per_line : ReplacementFor_long_format ) ; ptrdiff_t ReplacementFor_linelen = ReplacementFor_width_opt ; if ( format == ReplacementFor_many_per_line || format == ReplacementFor_horizontal || format == ReplacementFor_with_commas || ReplacementFor_print_with_color ) { ReplacementFor_def TIOCGWINSZ  if ( ReplacementFor_linelen < < ReplacementFor_missing ( ( char ) ( 0xed1 + 3732 - 0x1d2a ) ) > ( 0x6b1 + 883 - 0xa24 ) ) { ( 0xf8 + 8796 - 0x2350 ) < __GNUC__ + ( ( 0x1e53 + 42 - 0x1e77 ) <= __GNUC_MINOR__ ) < ReplacementFor_missing ( ( char ) ( 0x5d0 + 1210 - 0xa4f ) ) > ReplacementFor_ndif  struct winsize ReplacementFor_ws ; if ( ReplacementFor_stdout_isatty ( ) && ( 0x1534 + 1754 - 0x1c0e ) <= ioctl ( STDOUT_FILENO , TIOCGWINSZ , & ReplacementFor_ws ) && ( 0x1260 + 906 - 0x15ea ) < ReplacementFor_ws . ws_col ) ReplacementFor_linelen = ReplacementFor_ws . ws_col <= ReplacementFor_MIN ( PTRDIFF_MAX , SIZE_MAX ) ? ReplacementFor_ws . ws_col : ( 0x6e1 + 2262 - 0xfb7 ) ; ( 0xb4 + 1618 - 0x702 ) < __GNUC__ + ( ( 0x4da + 8232 - 0x24fc ) <= __GNUC_MINOR__ ) < ReplacementFor_missing ( ( char ) ( 0x15c3 + 1956 - 0x1d2c ) ) > ReplacementFor_ndif  } ReplacementFor_ndif if ( ReplacementFor_linelen < ( 0xb11 +1108 -0xf65 ) ) { char const * ReplacementFor_p = getenv ( " \x43 \x4f \x4c \x55 \x4d \x4e \x53 " ) ; if ( ReplacementFor_p && * ReplacementFor_p ) { ReplacementFor_linelen = ReplacementFor_decode_line_length ( ReplacementFor_p ) ; if ( ReplacementFor_linelen < ( 0x4a0 + 6771 - 0x1f13 ) ) error ( ( 0xae9 + 2369 - 0x142a ) , ( 0x1caa + 2476 - 0x2656 ) , ReplacementFor__ ( " \x69 \x67 \x6e \x6f \x72 \x69 \x6e \x67 \x20 \x69 \x6e \x76 \x61 \x6c \x69 \x64 \x20 \x77 \x69 \x64 \x74 \x68 " " \x20 \x69 \x6e \x20 \x65 \x6e \x76 \x69 \x72 \x6f \x6e \x6d \x65 \x6e \x74 \x20 \x76 \x61 \x72 \x69 \x61 \x62 \x6c \x65 \x20 \x43 \x4f \x4c \x55 \x4d \x4e \x53 \x3a \x20 \x25 \x73 " ) , ReplacementFor_quote ( ReplacementFor_p ) ) ; } } } ReplacementFor_line_length = ReplacementFor_linelen < ( 0xbf2 + 6535 - 0x2579 ) ? ( 0xc57 + 448 - 0xdc7 ) : ReplacementFor_linelen ; ReplacementFor_max_idx = ReplacementFor_line_length / ReplacementFor_MIN_COLUMN_WIDTH ; ReplacementFor_max_idx += ReplacementFor_line_length % ReplacementFor_MIN_COLUMN_WIDTH != ( 0x529 + 3597 - 0x1336 ) ; if ( format == ReplacementFor_many_per_line || format == ReplacementFor_horizontal || format == ReplacementFor_with_commas ) { if ( ( 0xb9a + 156 - 0xc36 ) <= ReplacementFor_tabsize_opt ) ReplacementFor_tabsize = ReplacementFor_tabsize_opt ; else { ReplacementFor_tabsize = ( 0x18a + 6261 - 0x19f7 ) ; char const * ReplacementFor_p = getenv ( " \x54 \x41 \x42 \x53 \x49 \x5a \x45 " ) ; if ( ReplacementFor_p ) { uintmax_t ReplacementFor_tmp ; if ( ReplacementFor_xstrtoumax ( ReplacementFor_p , NULL , ( 0xef1 + 2804 - 0x19e5 ) , & ReplacementFor_tmp , " " ) == ReplacementFor_LONGINT_OK && ReplacementFor_tmp <= SIZE_MAX ) ReplacementFor_tabsize = ReplacementFor_tmp ; else error ( ( 0xd95 + 5451 - 0x22e0 ) , ( 0x1708 + 301 - 0x1835 ) , ReplacementFor__ ( " \x69 \x67 \x6e \x6f \x72 \x69 \x6e \x67 \x20 \x69 \x6e \x76 \x61 \x6c \x69 \x64 \x20 \x74 \x61 \x62 \x20 \x73 \x69 \x7a \x65 " " \x20 \x69 \x6e \x20 \x65 \x6e \x76 \x69 \x72 \x6f \x6e \x6d \x65 \x6e \x74 \x20 \x76 \x61 \x72 \x69 \x61 \x62 \x6c \x65 \x20 \x54 \x41 \x42 \x53 \x49 \x5a \x45 \x3a \x20 \x25 \x73 " ) , ReplacementFor_quote ( ReplacementFor_p ) ) ; } } } ReplacementFor_qmark_funny_chars = ( ReplacementFor_hide_control_chars_opt < ( 0x8cf + 468 - 0xaa3 ) ? ReplacementFor_ls_mode == ReplacementFor_LS_LS && ReplacementFor_stdout_isatty ( ) : ReplacementFor_hide_control_chars_opt ) ; int ReplacementFor_qs = ReplacementFor_quoting_style_opt ; if ( ReplacementFor_qs < ( 0x8bf + 344 - 0xa17 ) ) ReplacementFor_qs = ReplacementFor_getenv_quoting_style ( ) ; if ( ReplacementFor_qs < ( 0x18c8 + 431 - 0x1a77 ) ) ReplacementFor_qs = ( ReplacementFor_ls_mode == ReplacementFor_LS_LS ? ( ReplacementFor_stdout_isatty ( ) ? ReplacementFor_shell_escape_quoting_style : - ( 0x19b5 + 1398 - 0x1f2a ) ) : ReplacementFor_escape_quoting_style ) ; if ( ( 0x6c5 + 841 - 0xa0e ) <= ReplacementFor_qs ) ReplacementFor_set_quoting_style ( NULL , ReplacementFor_qs ) ; ReplacementFor_qs = ReplacementFor_get_quoting_style ( NULL ) ; ReplacementFor_align_variable_outer_quotes = ( ( format == ReplacementFor_long_format || ( ( format == ReplacementFor_many_per_line || format == ReplacementFor_horizontal ) && ReplacementFor_line_length ) ) && ( ReplacementFor_qs == ReplacementFor_shell_quoting_style || ReplacementFor_qs == ReplacementFor_shell_escape_quoting_style || ReplacementFor_qs == ReplacementFor_c_maybe_quoting_style ) ) ; ReplacementFor_filename_quoting_options = ReplacementFor_clone_quoting_options ( NULL ) ; if ( ReplacementFor_qs == ReplacementFor_escape_quoting_style ) ReplacementFor_set_char_quoting ( ReplacementFor_filename_quoting_options , ( ( char ) ( 0x167c + 202 - 0x1726 ) ) , ( 0xbd5 + 4668 - 0x1e10 ) ) ; if ( ReplacementFor_file_type <= ReplacementFor_indicator_style ) { char const * ReplacementFor_p ; for ( ReplacementFor_p = & " \x2a \x3d \x3e \x40 \x7c " [ ReplacementFor_indicator_style - ReplacementFor_file_type ] ; * ReplacementFor_p ; ReplacementFor_p ++ ) ReplacementFor_set_char_quoting ( ReplacementFor_filename_quoting_options , * ReplacementFor_p , ( 0x9e0 + 1127 - 0xe46 ) ) ; } ReplacementFor_dirname_quoting_options = ReplacementFor_clone_quoting_options ( NULL ) ; ReplacementFor_set_char_quoting ( ReplacementFor_dirname_quoting_options , ( ( char ) ( 0x1bb2 + 1966 - 0x2326 ) ) , ( 0x2f4 + 5308 - 0x17af ) ) ; ReplacementFor_dired &= ( format == ReplacementFor_long_format ) & ! ReplacementFor_print_hyperlink ; if ( ReplacementFor_eolbyte < ReplacementFor_dired ) ReplacementFor_die ( ReplacementFor_LS_FAILURE , ( 0x11ea + 4399 - 0x2319 ) , ReplacementFor__ ( " \x2d \x2d \x64 \x69 \x72 \x65 \x64 \x20 \x61 \x6e \x64 \x20 \x2d \x2d \x7a \x65 \x72 \x6f \x20 \x61 \x72 \x65 \x20 \x69 \x6e \x63 \x6f \x6d \x70 \x61 \x74 \x69 \x62 \x6c \x65 " ) ) ; ReplacementFor_sort_type = ( ( 0x595 + 6565 - 0x1f3a ) <= ReplacementFor_sort_opt ? ReplacementFor_sort_opt : ( format != ReplacementFor_long_format && ( ReplacementFor_time_type == ReplacementFor_time_ctime || ReplacementFor_time_type == ReplacementFor_time_atime || ReplacementFor_time_type == ReplacementFor_time_btime ) ) ? ReplacementFor_sort_time : ReplacementFor_sort_name ) ; if ( format == ReplacementFor_long_format ) { char * ReplacementFor_style = ReplacementFor_time_style_option ; static char const ReplacementFor_posix_prefix [ ] = " \x70 \x6f \x73 \x69 \x78 \x2d " ; if ( ! ReplacementFor_style ) if ( ! ( ReplacementFor_style = getenv ( " \x54 \x49 \x4d \x45 \x5f \x53 \x54 \x59 \x4c \x45 " ) ) ) ReplacementFor_style = ReplacementFor_bad_cast ( " \x6c \x6f \x63 \x61 \x6c \x65 " ) ; while ( ReplacementFor_STREQ_LEN ( ReplacementFor_style , ReplacementFor_posix_prefix , sizeof ReplacementFor_posix_prefix - ( 0xc98 + 5339 - 0x2172 ) ) ) { if ( ! ReplacementFor_hard_locale ( LC_TIME ) ) return optind ; ReplacementFor_style += sizeof ReplacementFor_posix_prefix - ( 0x1291 + 2150 - 0x1af6 ) ; } if ( * ReplacementFor_style == ( ( char ) ( 0x118b + 2484 - 0x1b14 ) ) ) { char * ReplacementFor_p0 = ReplacementFor_style + ( 0x1b65 + 2678 - 0x25da ) ; char * ReplacementFor_p1 = strchr ( ReplacementFor_p0 , ' \n ' ) ; if ( ! ReplacementFor_p1 ) ReplacementFor_p1 = ReplacementFor_p0 ; else { if ( strchr ( ReplacementFor_p1 + ( 0x16ac + 2161 - 0x1f1c ) , ' \n ' ) ) ReplacementFor_die ( ReplacementFor_LS_FAILURE , ( 0x920 + 5613 - 0x1f0d ) , ReplacementFor__ ( " \x69 \x6e \x76 \x61 \x6c \x69 \x64 \x20 \x74 \x69 \x6d \x65 \x20 \x73 \x74 \x79 \x6c \x65 \x20 \x66 \x6f \x72 \x6d \x61 \x74 \x20 \x25 \x73 " ) , ReplacementFor_quote ( ReplacementFor_p0 ) ) ; * ReplacementFor_p1 ++ = ' \0 ' ; } ReplacementFor_long_time_format [ ( 0x7ca + 4025 - 0x1783 ) ] = ReplacementFor_p0 ; ReplacementFor_long_time_format [ ( 0xa4d + 3792 - 0x191c ) ] = ReplacementFor_p1 ; } else { ptrdiff_t ReplacementFor_res = ReplacementFor_argmatch ( ReplacementFor_style , ReplacementFor_time_style_args , ( char const * ) ReplacementFor_time_style_types , sizeof ( * ReplacementFor_time_style_types ) ) ; if ( ReplacementFor_res < ( 0x2da + 2458 - 0xc74 ) ) { ReplacementFor_argmatch_invalid ( " \x74 \x69 \x6d \x65 \x20 \x73 \x74 \x79 \x6c \x65 " , ReplacementFor_style , ReplacementFor_res ) ; fputs ( ReplacementFor__ ( " \x56 \x61 \x6c \x69 \x64 \x20 \x61 \x72 \x67 \x75 \x6d \x65 \x6e \x74 \x73 \x20 \x61 \x72 \x65 \x3a " " \n " ) , stderr ) ; char const * const * ReplacementFor_p = ReplacementFor_time_style_args ; while ( * ReplacementFor_p ) fprintf ( stderr , " \x20 \x20 \x2d \x20 \x5b \x70 \x6f \x73 \x69 \x78 \x2d \x5d \x25 \x73 " " \n " , * ReplacementFor_p ++ ) ; fputs ( ReplacementFor__ ( " \x20 \x20 \x2d \x20 \x2b \x46 \x4f \x52 \x4d \x41 \x54 \x20 \x28 \x65 \x2e \x67 \x2e \x2c \x20 \x2b \x25 \x48 \x3a \x25 \x4d \x29 \x20 \x66 \x6f \x72 \x20 \x61 \x20 \x27 \x64 \x61 \x74 \x65 \x27 \x2d \x73 \x74 \x79 \x6c \x65 " " \x20 \x66 \x6f \x72 \x6d \x61 \x74 " " \n " ) , stderr ) ; ReplacementFor_usage ( ReplacementFor_LS_FAILURE ) ; } switch ( ReplacementFor_res ) { case ReplacementFor_full_iso_time_style : ReplacementFor_long_time_format [ ( 0x64d + 141 - 0x6da ) ] = ReplacementFor_long_time_format [ ( 0x1a85 + 114 - 0x1af6 ) ] = " \x25 \x59 \x2d \x25 \x6d \x2d \x25 \x64 \x20 \x25 \x48 \x3a \x25 \x4d \x3a \x25 \x53 \x2e \x25 \x4e \x20 \x25 \x7a " ; break ; case ReplacementFor_long_iso_time_style : ReplacementFor_long_time_format [ ( 0x142d + 2320 - 0x1d3d ) ] = ReplacementFor_long_time_format [ ( 0xe2b + 4135 - 0x1e51 ) ] = " \x25 \x59 \x2d \x25 \x6d \x2d \x25 \x64 \x20 \x25 \x48 \x3a \x25 \x4d " ; break ; case ReplacementFor_iso_time_style : ReplacementFor_long_time_format [ ( 0x26f + 2282 - 0xb59 ) ] = " \x25 \x59 \x2d \x25 \x6d \x2d \x25 \x64 \x20 " ; ReplacementFor_long_time_format [ ( 0x1da + 7818 - 0x2063 ) ] = " \x25 \x6d \x2d \x25 \x64 \x20 \x25 \x48 \x3a \x25 \x4d " ; break ; case ReplacementFor_locale_time_style : if ( ReplacementFor_hard_locale ( LC_TIME ) ) { for ( int i = ( 0x35 + 1997 - 0x802 ) ; i < ( 0x7c5 + 7294 - 0x2441 ) ; i ++ ) ReplacementFor_long_time_format [ i ] = ReplacementFor_dcgettext ( NULL , ReplacementFor_long_time_format [ i ] , LC_TIME ) ; } } } ReplacementFor_abformat_init ( ) ; } return optind ; } static bool ReplacementFor_get_funky_string ( char * * ReplacementFor_dest , char const * * ReplacementFor_src , bool ReplacementFor_equals_end , size_t * ReplacementFor_output_count ) < ReplacementFor_missing ( ( char ) ( 0x909 +4380 -0x19ea ) ) > { char ReplacementFor_num ; size_t ReplacementFor_count ; enum { ReplacementFor_ST_GND , ReplacementFor_ST_BACKSLASH , ReplacementFor_ST_OCTAL , ReplacementFor_ST_HEX , ReplacementFor_ST_CARET , ReplacementFor_ST_END , ReplacementFor_ST_ERROR } ReplacementFor_state ; char const * ReplacementFor_p ; char * ReplacementFor_q ; ReplacementFor_p = * ReplacementFor_src ; ReplacementFor_q = * ReplacementFor_dest ; ReplacementFor_count = ( 0x5cd + 3528 - 0x1395 ) ; ReplacementFor_num = ( 0x2b + 9767 - 0x2652 ) ; ReplacementFor_state = ReplacementFor_ST_GND ; while ( ReplacementFor_state < ReplacementFor_ST_END ) { switch ( ReplacementFor_state ) { case ReplacementFor_ST_GND : switch ( * ReplacementFor_p ) { case ( ( char ) ( 0x1cd8 + 1075 - 0x20d1 ) ) : case ' \0 ' : ReplacementFor_state = ReplacementFor_ST_END ; break ; case ' \\ ' : ReplacementFor_state = ReplacementFor_ST_BACKSLASH ; ++ ReplacementFor_p ; break ; case ( ( char ) ( 0xd7b + 4567 - 0x1ef4 ) ) : ReplacementFor_state = ReplacementFor_ST_CARET ; ++ ReplacementFor_p ; break ; case ( ( char ) ( 0x504 + 1237 - 0x99c ) ) : if ( ReplacementFor_equals_end ) { ReplacementFor_state = ReplacementFor_ST_END ; break ; } ReplacementFor_FALLTHROUGH ; default : * ( ReplacementFor_q ++ ) = * ( ReplacementFor_p ++ ) ; ++ ReplacementFor_count ; break ; } break ; case ReplacementFor_ST_BACKSLASH : switch ( * ReplacementFor_p ) { case ( ( char ) ( 0x248 + 7420 - 0x1f14 ) ) : case ( ( char ) ( 0x13b7 + 2571 - 0x1d91 ) ) : case ( ( char ) ( 0xbb8 + 6482 - 0x24d8 ) ) : case ( ( char ) ( 0x875 + 7685 - 0x2647 ) ) : case ( ( char ) ( 0x148b + 3984 - 0x23e7 ) ) : case ( ( char ) ( 0x1ac7 + 808 - 0x1dba ) ) : case ( ( char ) ( 0x236 + 4332 - 0x12ec ) ) : case ( ( char ) ( 0x1108 + 3446 - 0x1e47 ) ) : ReplacementFor_state = ReplacementFor_ST_OCTAL ; ReplacementFor_num = * ReplacementFor_p - ( ( char ) ( 0x6c4 + 2572 - 0x10a0 ) ) ; break ; case ( ( char ) ( 0x1b6 + 535 - 0x355 ) ) : case ( ( char ) ( 0x1cc1 + 1942 - 0x23ff ) ) : ReplacementFor_state = ReplacementFor_ST_HEX ; ReplacementFor_num = ( 0x950 + 4571 - 0x1b2b ) ; break ; case ( ( char ) ( 0xa04 + 4575 - 0x1b82 ) ) : ReplacementFor_num = ' \a ' ; break ; case ( ( char ) ( 0xb4 + 6503 - 0x19b9 ) ) : ReplacementFor_num = ' \b ' ; break ; case ( ( char ) ( 0xff5 + 715 - 0x125b ) ) : ReplacementFor_num = ( 0xbdf + 326 - 0xd0a ) ; break ; case ( ( char ) ( 0x704 + 3183 - 0x130d ) ) : ReplacementFor_num = ' \f ' ; break ; case ( ( char ) ( 0xb65 + 5153 - 0x1f18 ) ) : ReplacementFor_num = ' \n ' ; break ; case ( ( char ) ( 0x633 + 5096 - 0x19a9 ) ) : ReplacementFor_num = ' \r ' ; break ; case ( ( char ) ( 0x1cf4 + 102 - 0x1ce6 ) ) : ReplacementFor_num = ' \t ' ; break ; case ( ( char ) ( 0x5bd + 644 - 0x7cb ) ) : ReplacementFor_num = ' \v ' ; break ; case ( ( char ) ( 0x189 + 6896 - 0x1c3a ) ) : ReplacementFor_num = ( 0x1f2d + 155 - 0x1f49 ) ; break ; case ( ( char ) ( 0x56f + 4097 - 0x1511 ) ) : ReplacementFor_num = ( ( char ) ( 0x12c1 + 748 - 0x158d ) ) ; break ; case ' \0 ' : ReplacementFor_state = ReplacementFor_ST_ERROR ; break ; default : ReplacementFor_num = * ReplacementFor_p ; break ; } if ( ReplacementFor_state == ReplacementFor_ST_BACKSLASH ) { * ( ReplacementFor_q ++ ) = ReplacementFor_num ; ++ ReplacementFor_count ; ReplacementFor_state = ReplacementFor_ST_GND ; } ++ ReplacementFor_p ; break ; case ReplacementFor_ST_OCTAL : if ( * ReplacementFor_p < ( ( char ) ( 0xfb4 + 1817 - 0x169d ) ) || * ReplacementFor_p > ( ( char ) ( 0x1b58 + 309 - 0x1c56 ) ) ) { * ( ReplacementFor_q ++ ) = ReplacementFor_num ; ++ ReplacementFor_count ; ReplacementFor_state = ReplacementFor_ST_GND ; } else ReplacementFor_num = ( ReplacementFor_num << ( 0x1a33 + 2104 - 0x2268 ) ) + ( * ( ReplacementFor_p ++ ) - ( ( char ) ( 0x1424 + 236 - 0x14e0 ) ) ) ; break ; case ReplacementFor_ST_HEX : switch ( * ReplacementFor_p ) { case ( ( char ) ( 0x3e7 + 1527 - 0x9ae ) ) : case ( ( char ) ( 0x616 + 6588 - 0x1fa1 ) ) : case ( ( char ) ( 0x323 + 2920 - 0xe59 ) ) : case ( ( char ) ( 0x228a + 815 - 0x2586 ) ) : case ( ( char ) ( 0xadc + 7245 - 0x26f5 ) ) : case ( ( char ) ( 0x1d98 + 1039 - 0x2172 ) ) : case ( ( char ) ( 0xf27 + 3300 - 0x1bd5 ) ) : case ( ( char ) ( 0x6ed + 3318 - 0x13ac ) ) : case ( ( char ) ( 0xe3f + 2948 - 0x198b ) ) : case ( ( char ) ( 0x572 + 1895 - 0xca0 ) ) : ReplacementFor_num = ( ReplacementFor_num << ( 0x897 + 7464 - 0x25bb ) ) + ( * ( ReplacementFor_p ++ ) - ( ( char ) ( 0x1b18 + 1879 - 0x223f ) ) ) ; break ; case ( ( char ) ( 0x1ae1 + 621 - 0x1ced ) ) : case ( ( char ) ( 0x8db + 1141 - 0xcee ) ) : case ( ( char ) ( 0xcab + 2304 - 0x1548 ) ) : case ( ( char ) ( 0x205c + 848 - 0x2348 ) ) : case ( ( char ) ( 0x1b09 + 628 - 0x1d18 ) ) : case ( ( char ) ( 0x6c5 + 7834 - 0x24f9 ) ) : ReplacementFor_num = ( ReplacementFor_num << ( 0x668 + 2799 - 0x1153 ) ) + ( * ( ReplacementFor_p ++ ) - ( ( char ) ( 0xa62 + 1040 - 0xe11 ) ) ) + ( 0xb31 + 923 - 0xec2 ) ; break ; case ( ( char ) ( 0x1b4d + 1754 - 0x21e6 ) ) : case ( ( char ) ( 0x525 + 1937 - 0xc74 ) ) : case ( ( char ) ( 0xb92 + 5135 - 0x1f5e ) ) : case ( ( char ) ( 0x1305 + 2695 - 0x1d48 ) ) : case ( ( char ) ( 0x929 + 2022 - 0x10ca ) ) : case ( ( char ) ( 0xf1f + 1137 - 0x134a ) ) : ReplacementFor_num = ( ReplacementFor_num << ( 0x1067 + 214 - 0x1139 ) ) + ( * ( ReplacementFor_p ++ ) - ( ( char ) ( 0x7e8 + 1454 - 0xd55 ) ) ) + ( 0x1374 + 3151 - 0x1fb9 ) ; break ; default : * ( ReplacementFor_q ++ ) = ReplacementFor_num ; ++ ReplacementFor_count ; ReplacementFor_state = ReplacementFor_ST_GND ; break ; } break ; case ReplacementFor_ST_CARET : ReplacementFor_state = ReplacementFor_ST_GND ; if ( * ReplacementFor_p >= ( ( char ) ( 0x35d + 125 - 0x39a ) ) && * ReplacementFor_p <= ( ( char ) ( 0xa45 + 7417 - 0x26c0 ) ) ) { * ( ReplacementFor_q ++ ) = * ( ReplacementFor_p ++ ) & ( 0x1a43 + 1045 - 0x1e39 ) ; ++ ReplacementFor_count ; } else if ( * ReplacementFor_p == ( ( char ) ( 0x304 + 534 - 0x4db ) ) ) { * ( ReplacementFor_q ++ ) = ( 0x310 + 6222 - 0x1adf ) ; ++ ReplacementFor_count ; } else ReplacementFor_state = ReplacementFor_ST_ERROR ; break ; default : abort ( ) ; } } * ReplacementFor_dest = ReplacementFor_q ; * ReplacementFor_src = ReplacementFor_p ; * ReplacementFor_output_count = ReplacementFor_count ; return ReplacementFor_state != ReplacementFor_ST_ERROR ; } enum ReplacementFor_parse_state { ReplacementFor_PS_START = ( 0x1213 + 3488 - 0x1fb2 ) , ReplacementFor_PS_2 , ReplacementFor_PS_3 , ReplacementFor_PS_4 , ReplacementFor_PS_DONE , ReplacementFor_PS_FAIL } ; static bool ReplacementFor_known_term_type ( void ) < ReplacementFor_missing ( ( char ) ( 0x44d +3190 -0x1088 ) ) > { char const * ReplacementFor_term = getenv ( " \x54 \x45 \x52 \x4d " ) ; if ( ! ReplacementFor_term || ! * ReplacementFor_term ) return false ; char const * line = ReplacementFor_G_line ; while ( line - ReplacementFor_G_line < sizeof ( ReplacementFor_G_line ) ) { if ( ReplacementFor_STRNCMP_LIT ( line , " \x54 \x45 \x52 \x4d \x20 " ) == ( 0x206b + 31 - 0x208a ) ) { if ( fnmatch ( line + ( 0x2358 + 282 - 0x246d ) , ReplacementFor_term , ( 0x795 + 7739 - 0x25d0 ) ) == ( 0xbec + 5100 - 0x1fd8 ) ) return true ; } line += strlen ( line ) + ( 0xb4 + 3386 - 0xded ) ; } return false ; } static void ReplacementFor_parse_ls_color ( void ) < ReplacementFor_missing ( ( char ) ( 0x1413 +1908 -0x1b4c ) ) > { char const * ReplacementFor_p ; char * buf ; int ReplacementFor_ind_no ; char ReplacementFor_label [ ( 0x3ac + 5232 - 0x1819 ) ] ; struct ReplacementFor_color_ext_type * ReplacementFor_ext ; if ( ( ReplacementFor_p = getenv ( " \x4c \x53 \x5f \x43 \x4f \x4c \x4f \x52 \x53 " ) ) == NULL || * ReplacementFor_p == ' \0 ' ) { char const * ReplacementFor_colorterm = getenv ( " \x43 \x4f \x4c \x4f \x52 \x54 \x45 \x52 \x4d " ) ; if ( ! ( ReplacementFor_colorterm && * ReplacementFor_colorterm ) && ! ReplacementFor_known_term_type ( ) ) ReplacementFor_print_with_color = false ; return ; } ReplacementFor_ext = NULL ; strcpy ( ReplacementFor_label , " \x3f \x3f " ) ; buf = ReplacementFor_color_buf = ReplacementFor_xstrdup ( ReplacementFor_p ) ; enum ReplacementFor_parse_state ReplacementFor_state = ReplacementFor_PS_START ; while ( true ) { switch ( ReplacementFor_state ) { case ReplacementFor_PS_START : switch ( * ReplacementFor_p ) { case ( ( char ) ( 0x581 + 3762 - 0x13f9 ) ) : ++ ReplacementFor_p ; break ; case ( ( char ) ( 0x674 + 5427 - 0x1b7d ) ) : ReplacementFor_ext = ReplacementFor_xmalloc ( sizeof * ReplacementFor_ext ) ; ReplacementFor_ext -> next = ReplacementFor_color_ext_list ; ReplacementFor_color_ext_list = ReplacementFor_ext ; ++ ReplacementFor_p ; ReplacementFor_ext -> ReplacementFor_ext . ReplacementFor_string = buf ; ReplacementFor_state = ( ReplacementFor_get_funky_string ( & buf , & ReplacementFor_p , true , & ReplacementFor_ext -> ReplacementFor_ext . len ) ? ReplacementFor_PS_4 : ReplacementFor_PS_FAIL ) ; break ; case ' \0 ' : ReplacementFor_state = ReplacementFor_PS_DONE ; goto ReplacementFor_done ; default : ReplacementFor_label [ ( 0x20c8 + 280 - 0x21e0 ) ] = * ( ReplacementFor_p ++ ) ; ReplacementFor_state = ReplacementFor_PS_2 ; break ; } break ; case ReplacementFor_PS_2 : if ( * ReplacementFor_p ) { ReplacementFor_label [ ( 0x8a2 + 1675 - 0xf2c ) ] = * ( ReplacementFor_p ++ ) ; ReplacementFor_state = ReplacementFor_PS_3 ; } else ReplacementFor_state = ReplacementFor_PS_FAIL ; break ; case ReplacementFor_PS_3 : ReplacementFor_state = ReplacementFor_PS_FAIL ; if ( * ( ReplacementFor_p ++ ) == ( ( char ) ( 0x1114 + 1393 - 0x1648 ) ) ) { for ( ReplacementFor_ind_no = ( 0x752 + 1895 - 0xeb9 ) ; ReplacementFor_indicator_name [ ReplacementFor_ind_no ] != NULL ; ++ ReplacementFor_ind_no ) { if ( ReplacementFor_STREQ ( ReplacementFor_label , ReplacementFor_indicator_name [ ReplacementFor_ind_no ] ) ) { ReplacementFor_color_indicator [ ReplacementFor_ind_no ] . ReplacementFor_string = buf ; ReplacementFor_state = ( ReplacementFor_get_funky_string ( & buf , & ReplacementFor_p , false , & ReplacementFor_color_indicator [ ReplacementFor_ind_no ] . len ) ? ReplacementFor_PS_START : ReplacementFor_PS_FAIL ) ; break ; } } if ( ReplacementFor_state == ReplacementFor_PS_FAIL ) error ( ( 0xb93 + 4652 - 0x1dbf ) , ( 0x1971 + 1523 - 0x1f64 ) , ReplacementFor__ ( " \x75 \x6e \x72 \x65 \x63 \x6f \x67 \x6e \x69 \x7a \x65 \x64 \x20 \x70 \x72 \x65 \x66 \x69 \x78 \x3a \x20 \x25 \x73 " ) , ReplacementFor_quote ( ReplacementFor_label ) ) ; } break ; case ReplacementFor_PS_4 : if ( * ( ReplacementFor_p ++ ) == ( ( char ) ( 0x629 + 7112 - 0x21b4 ) ) ) { ReplacementFor_ext -> ReplacementFor_seq . ReplacementFor_string = buf ; ReplacementFor_state = ( ReplacementFor_get_funky_string ( & buf , & ReplacementFor_p , false , & ReplacementFor_ext -> ReplacementFor_seq . len ) ? ReplacementFor_PS_START : ReplacementFor_PS_FAIL ) ; } else ReplacementFor_state = ReplacementFor_PS_FAIL ; break ; case ReplacementFor_PS_FAIL : goto ReplacementFor_done ; default : abort ( ) ; } } ReplacementFor_done : if ( ReplacementFor_state == ReplacementFor_PS_FAIL ) { struct ReplacementFor_color_ext_type * e ; struct ReplacementFor_color_ext_type * ReplacementFor_e2 ; error ( ( 0xc87 + 2534 - 0x166d ) , ( 0x5ed + 5002 - 0x1977 ) , ReplacementFor__ ( " \x75 \x6e \x70 \x61 \x72 \x73 \x61 \x62 \x6c \x65 \x20 \x76 \x61 \x6c \x75 \x65 \x20 \x66 \x6f \x72 \x20 \x4c \x53 \x5f \x43 \x4f \x4c \x4f \x52 \x53 \x20 \x65 \x6e \x76 \x69 \x72 \x6f \x6e \x6d \x65 \x6e \x74 \x20 \x76 \x61 \x72 \x69 \x61 \x62 \x6c \x65 " ) ) ; free ( ReplacementFor_color_buf ) ; for ( e = ReplacementFor_color_ext_list ; e != NULL ; ) { ReplacementFor_e2 = e ; e = e -> next ; free ( ReplacementFor_e2 ) ; } ReplacementFor_print_with_color = false ; } if ( ReplacementFor_color_indicator [ ReplacementFor_C_LINK ] . len == ( 0x4a5 + 8001 - 0x23e0 ) && ! ReplacementFor_STRNCMP_LIT ( ReplacementFor_color_indicator [ ReplacementFor_C_LINK ] . ReplacementFor_string , " \x74 \x61 \x72 \x67 \x65 \x74 " ) ) ReplacementFor_color_symlink_as_referent = true ; } static int ReplacementFor_getenv_quoting_style ( void ) < ReplacementFor_missing ( ( char ) ( 0x583 +2874 -0x1082 ) ) > { char const * ReplacementFor_q_style = getenv ( " \x51 \x55 \x4f \x54 \x49 \x4e \x47 \x5f \x53 \x54 \x59 \x4c \x45 " ) ; if ( ! ReplacementFor_q_style ) return - ( 0xcd9 + 1556 - 0x12ec ) ; int i = ReplacementFor_ARGMATCH ( ReplacementFor_q_style , ReplacementFor_quoting_style_args , ReplacementFor_quoting_style_vals ) ; if ( i < ( 0x1d78 + 90 - 0x1dd2 ) ) { error ( ( 0xaa6 + 2227 - 0x1359 ) , ( 0x872 + 1626 - 0xecc ) , ReplacementFor__ ( " \x69 \x67 \x6e \x6f \x72 \x69 \x6e \x67 \x20 \x69 \x6e \x76 \x61 \x6c \x69 \x64 \x20 \x76 \x61 \x6c \x75 \x65 " " \x20 \x6f \x66 \x20 \x65 \x6e \x76 \x69 \x72 \x6f \x6e \x6d \x65 \x6e \x74 \x20 \x76 \x61 \x72 \x69 \x61 \x62 \x6c \x65 \x20 \x51 \x55 \x4f \x54 \x49 \x4e \x47 \x5f \x53 \x54 \x59 \x4c \x45 \x3a \x20 \x25 \x73 " ) , ReplacementFor_quote ( ReplacementFor_q_style ) ) ; return - ( 0x34a + 4467 - 0x14bc ) ; } return ReplacementFor_quoting_style_vals [ i ] ; } static void ReplacementFor_set_exit_status ( bool ReplacementFor_serious ) < ReplacementFor_missing ( ( char ) ( 0xf33 +2247 -0x17bf ) ) > { if ( ReplacementFor_serious ) exit_status = ReplacementFor_LS_FAILURE ; else if ( exit_status == EXIT_SUCCESS ) exit_status = ReplacementFor_LS_MINOR_PROBLEM ; } static void ReplacementFor_file_failure ( bool ReplacementFor_serious , char const * ReplacementFor_message , char const * ReplacementFor_file ) < ReplacementFor_missing ( ( char ) ( 0x94 +1644 -0x6c5 ) ) > { error ( ( 0x2d5 + 1864 - 0xa1d ) , errno , ReplacementFor_message , ReplacementFor_quoteaf ( ReplacementFor_file ) ) ; ReplacementFor_set_exit_status ( ReplacementFor_serious ) ; } static void ReplacementFor_queue_directory ( char const * name , char const * ReplacementFor_realname , bool ReplacementFor_command_line_arg ) < ReplacementFor_missing ( ( char ) ( 0xab1 +4092 -0x1a72 ) ) > { struct ReplacementFor_pending * new = ReplacementFor_xmalloc ( sizeof * new ) ; new -> ReplacementFor_realname = ReplacementFor_realname ? ReplacementFor_xstrdup ( ReplacementFor_realname ) : NULL ; new -> name = name ? ReplacementFor_xstrdup ( name ) : NULL ; new -> ReplacementFor_command_line_arg = ReplacementFor_command_line_arg ; new -> next = ReplacementFor_pending_dirs ; ReplacementFor_pending_dirs = new ; } static void ReplacementFor_print_dir ( char const * name , char const * ReplacementFor_realname , bool ReplacementFor_command_line_arg ) < ReplacementFor_missing ( ( char ) ( 0x229c +752 -0x2551 ) ) > { DIR * ReplacementFor_dirp ; struct dirent * next ; uintmax_t ReplacementFor_total_blocks = ( 0x110a + 2639 - 0x1b59 ) ; static bool ReplacementFor_first = true ; errno = ( 0x2064 + 781 - 0x2371 ) ; ReplacementFor_dirp = opendir ( name ) ; if ( ! ReplacementFor_dirp ) { ReplacementFor_file_failure ( ReplacementFor_command_line_arg , ReplacementFor__ ( " \x63 \x61 \x6e \x6e \x6f \x74 \x20 \x6f \x70 \x65 \x6e \x20 \x64 \x69 \x72 \x65 \x63 \x74 \x6f \x72 \x79 \x20 \x25 \x73 " ) , name ) ; return ; } if ( ReplacementFor_LOOP_DETECT ) { struct stat ReplacementFor_dir_stat ; int fd = ReplacementFor_dirfd ( ReplacementFor_dirp ) ; if ( ( ( 0xdf8 + 605 - 0x1055 ) <= fd ? ReplacementFor_fstat_for_ino ( fd , & ReplacementFor_dir_stat ) : ReplacementFor_stat_for_ino ( name , & ReplacementFor_dir_stat ) ) < ( 0xb84 + 2906 - 0x16de ) ) { ReplacementFor_file_failure ( ReplacementFor_command_line_arg , ReplacementFor__ ( " \x63 \x61 \x6e \x6e \x6f \x74 \x20 \x64 \x65 \x74 \x65 \x72 \x6d \x69 \x6e \x65 \x20 \x64 \x65 \x76 \x69 \x63 \x65 \x20 \x61 \x6e \x64 \x20 \x69 \x6e \x6f \x64 \x65 \x20 \x6f \x66 \x20 \x25 \x73 " ) , name ) ; closedir ( ReplacementFor_dirp ) ; return ; } if ( ReplacementFor_visit_dir ( ReplacementFor_dir_stat . st_dev , ReplacementFor_dir_stat . st_ino ) ) { error ( ( 0x9d0 + 1234 - 0xea2 ) , ( 0x2206 + 1041 - 0x2617 ) , ReplacementFor__ ( " \x25 \x73 \x3a \x20 \x6e \x6f \x74 \x20 \x6c \x69 \x73 \x74 \x69 \x6e \x67 \x20 \x61 \x6c \x72 \x65 \x61 \x64 \x79 \x2d \x6c \x69 \x73 \x74 \x65 \x64 \x20 \x64 \x69 \x72 \x65 \x63 \x74 \x6f \x72 \x79 " ) , ReplacementFor_quotef ( name ) ) ; closedir ( ReplacementFor_dirp ) ; ReplacementFor_set_exit_status ( true ) ; return ; } ReplacementFor_dev_ino_push ( ReplacementFor_dir_stat . st_dev , ReplacementFor_dir_stat . st_ino ) ; } ReplacementFor_clear_files ( ) ; if ( ReplacementFor_recursive || ReplacementFor_print_dir_name ) { if ( ! ReplacementFor_first ) ReplacementFor_dired_outbyte ( ' \n ' ) ; ReplacementFor_first = false ; ReplacementFor_dired_indent ( ) ; char * ReplacementFor_absolute_name = NULL ; if ( ReplacementFor_print_hyperlink ) { ReplacementFor_absolute_name = ReplacementFor_canonicalize_filename_mode ( name , ReplacementFor_CAN_MISSING ) ; if ( ! ReplacementFor_absolute_name ) ReplacementFor_file_failure ( ReplacementFor_command_line_arg , ReplacementFor__ ( " \x65 \x72 \x72 \x6f \x72 \x20 \x63 \x61 \x6e \x6f \x6e \x69 \x63 \x61 \x6c \x69 \x7a \x69 \x6e \x67 \x20 \x25 \x73 " ) , name ) ; } ReplacementFor_quote_name ( ReplacementFor_realname ? ReplacementFor_realname : name , ReplacementFor_dirname_quoting_options , - ( 0x348 + 2675 - 0xdba ) , NULL , true , & ReplacementFor_subdired_obstack , ReplacementFor_absolute_name ) ; free ( ReplacementFor_absolute_name ) ; ReplacementFor_dired_outstring ( " \x3a " " \n " ) ; } while ( true ) { errno = ( 0x44a + 4459 - 0x15b5 ) ; next = readdir ( ReplacementFor_dirp ) ; if ( next ) { if ( ! ReplacementFor_file_ignored ( next -> d_name ) ) { enum ReplacementFor_filetype type = ReplacementFor_unknown ; ReplacementFor_HAVE_STRUCT_DIRENT_D_TYPE switch ( next - > ReplacementFor_d_type ) { case ReplacementFor_DT_BLK : type = ReplacementFor_blockdev ; break ; case ReplacementFor_DT_CHR : type = ReplacementFor_chardev ; break ; case ReplacementFor_DT_DIR : type = ReplacementFor_directory ; break ; case ReplacementFor_DT_FIFO : type = ReplacementFor_fifo ; break ; case ReplacementFor_DT_LNK : type = ReplacementFor_symbolic_link ; break ; case ReplacementFor_DT_REG : type = ReplacementFor_normal ; break ; case ReplacementFor_DT_SOCK : type = ReplacementFor_sock ; break ; ReplacementFor_def ReplacementFor_DT_WHT  case ReplacementFor_DT_WHT : type = ReplacementFor_whiteout ; break ; ReplacementFor_ndif  } ReplacementFor_ndif ReplacementFor_total_blocks + = ReplacementFor_gobble_file < ReplacementFor_missing ( ( char ) ( 0x330 + 3260 - 0xfb1 ) ) > ( next -> d_name , type , ReplacementFor_RELIABLE_D_INO ( next ) , false , name ) ; if ( format == ReplacementFor_one_per_line && ReplacementFor_sort_type == ReplacementFor_sort_none && ! ReplacementFor_print_block_size && ! ReplacementFor_recursive ) { ReplacementFor_sort_files ( ) ; ReplacementFor_print_current_files ( ) ; ReplacementFor_clear_files ( ) ; } } } else if ( errno != ( 0x11a2 + 1871 - 0x18f1 ) ) { ReplacementFor_file_failure ( ReplacementFor_command_line_arg , ReplacementFor__ ( " \x72 \x65 \x61 \x64 \x69 \x6e \x67 \x20 \x64 \x69 \x72 \x65 \x63 \x74 \x6f \x72 \x79 \x20 \x25 \x73 " ) , name ) ; if ( errno != EOVERFLOW ) break ; } else break ; ReplacementFor_process_signals ( ) ; } if ( closedir ( ReplacementFor_dirp ) != ( 0x10b0 + 4969 - 0x2419 ) ) { ReplacementFor_file_failure ( ReplacementFor_command_line_arg , ReplacementFor__ ( " \x63 \x6c \x6f \x73 \x69 \x6e \x67 \x20 \x64 \x69 \x72 \x65 \x63 \x74 \x6f \x72 \x79 \x20 \x25 \x73 " ) , name ) ; } ReplacementFor_sort_files ( ) ; if ( ReplacementFor_recursive ) ReplacementFor_extract_dirs_from_files ( name , false ) ; if ( format == ReplacementFor_long_format || ReplacementFor_print_block_size ) { char buf [ ReplacementFor_LONGEST_HUMAN_READABLE + ( 0x21a + 7133 - 0x1df4 ) ] ; char * ReplacementFor_p = ReplacementFor_human_readable ( ReplacementFor_total_blocks , buf + ( 0x941 + 2222 - 0x11ee ) , ReplacementFor_human_output_opts , ReplacementFor_ST_NBLOCKSIZE , ReplacementFor_output_block_size ) ; char * ReplacementFor_pend = ReplacementFor_p + strlen ( ReplacementFor_p ) ; * -- ReplacementFor_p = ( ( char ) ( 0x1f65 + 1170 - 0x23d7 ) ) ; * ReplacementFor_pend ++ = ReplacementFor_eolbyte ; ReplacementFor_dired_indent ( ) ; ReplacementFor_dired_outstring ( ReplacementFor__ ( " \x74 \x6f \x74 \x61 \x6c " ) ) ; ReplacementFor_dired_outbuf ( ReplacementFor_p , ReplacementFor_pend - ReplacementFor_p ) ; } if ( ReplacementFor_cwd_n_used ) ReplacementFor_print_current_files ( ) ; } static void ReplacementFor_add_ignore_pattern ( char const * ReplacementFor_pattern ) < ReplacementFor_missing ( ( char ) ( 0x1e53 +386 -0x1f9a ) ) > { struct ReplacementFor_ignore_pattern * ReplacementFor_ignore ; ReplacementFor_ignore = ReplacementFor_xmalloc ( sizeof * ReplacementFor_ignore ) ; ReplacementFor_ignore -> ReplacementFor_pattern = ReplacementFor_pattern ; ReplacementFor_ignore -> next = ReplacementFor_ignore_patterns ; ReplacementFor_ignore_patterns = ReplacementFor_ignore ; } static bool ReplacementFor_patterns_match ( struct ReplacementFor_ignore_pattern const * ReplacementFor_patterns , char const * ReplacementFor_file ) < ReplacementFor_missing ( ( char ) ( 0xdea +4670 -0x1fed ) ) > { struct ReplacementFor_ignore_pattern const * ReplacementFor_p ; for ( ReplacementFor_p = ReplacementFor_patterns ; ReplacementFor_p ; ReplacementFor_p = ReplacementFor_p -> next ) if ( fnmatch ( ReplacementFor_p -> ReplacementFor_pattern , ReplacementFor_file , FNM_PERIOD ) == ( 0x513 + 6177 - 0x1d34 ) ) return true ; return false ; } static bool ReplacementFor_file_ignored ( char const * name ) < ReplacementFor_missing ( ( char ) ( 0x1783 +3564 -0x2534 ) ) > { return ( ( ReplacementFor_ignore_mode != ReplacementFor_IGNORE_MINIMAL && name [ ( 0x1b41 + 1903 - 0x22b0 ) ] == ( ( char ) ( 0x2c2 + 7729 - 0x20c5 ) ) && ( ReplacementFor_ignore_mode == ReplacementFor_IGNORE_DEFAULT || ! name [ ( 0x1d4 + 4160 - 0x1213 ) + ( name [ ( 0x8c2 + 3921 - 0x1812 ) ] == ( ( char ) ( 0x1aad + 1357 - 0x1fcc ) ) ) ] ) ) || ( ReplacementFor_ignore_mode == ReplacementFor_IGNORE_DEFAULT && ReplacementFor_patterns_match ( ReplacementFor_hide_patterns , name ) ) || ReplacementFor_patterns_match ( ReplacementFor_ignore_patterns , name ) ) ; } static uintmax_t ReplacementFor_unsigned_file_size ( off_t ReplacementFor_size ) < ReplacementFor_missing ( ( char ) ( 0x5fd +4671 -0x1801 ) ) > { return ReplacementFor_size + ( ReplacementFor_size < ( 0x6f9 + 3081 - 0x1302 ) ) * ( ( uintmax_t ) ReplacementFor_OFF_T_MAX - ReplacementFor_OFF_T_MIN + ( 0x3ba + 7971 - 0x22dc ) ) ; } ReplacementFor_def ReplacementFor_HAVE_CAP  static bool ReplacementFor_has_capability ( char const * name ) < ReplacementFor_missing ( ( char ) ( 0x2db +6334 -0x1b5e ) ) > { char * ReplacementFor_result ; bool ReplacementFor_has_cap ; ReplacementFor_cap_t ReplacementFor_cap_d = ReplacementFor_cap_get_file ( name ) ; if ( ReplacementFor_cap_d == NULL ) return false ; ReplacementFor_result = ReplacementFor_cap_to_text ( ReplacementFor_cap_d , NULL ) ; ReplacementFor_cap_free ( ReplacementFor_cap_d ) ; if ( ! ReplacementFor_result ) return false ; ReplacementFor_has_cap = ! ! * ReplacementFor_result ; ReplacementFor_cap_free ( ReplacementFor_result ) ; return ReplacementFor_has_cap ; } ReplacementFor_lse static bool ReplacementFor_has_capability ( MAYBE_UNUSED char const * name ) < ReplacementFor_missing ( ( char ) ( 0x1750 +2883 -0x2258 ) ) > { errno = ReplacementFor_ENOTSUP ; return false ; } ReplacementFor_ndif static void ReplacementFor_free_ent ( struct ReplacementFor_fileinfo * ReplacementFor_f ) < ReplacementFor_missing ( ( char ) ( 0x1342 +3070 -0x1f05 ) ) > { free ( ReplacementFor_f -> name ) ; free ( ReplacementFor_f -> ReplacementFor_linkname ) ; free ( ReplacementFor_f -> ReplacementFor_absolute_name ) ; if ( ReplacementFor_f -> ReplacementFor_scontext != ReplacementFor_UNKNOWN_SECURITY_CONTEXT ) { if ( ReplacementFor_is_smack_enabled ( ) ) free ( ReplacementFor_f -> ReplacementFor_scontext ) ; else ReplacementFor_freecon ( ReplacementFor_f -> ReplacementFor_scontext ) ; } } static void ReplacementFor_clear_files ( void ) < ReplacementFor_missing ( ( char ) ( 0x2018 +14 -0x1feb ) ) > { for ( size_t i = ( 0xbfa + 3611 - 0x1a15 ) ; i < ReplacementFor_cwd_n_used ; i ++ ) { struct ReplacementFor_fileinfo * ReplacementFor_f = ReplacementFor_sorted_file [ i ] ; ReplacementFor_free_ent ( ReplacementFor_f ) ; } ReplacementFor_cwd_n_used = ( 0x1807 + 2560 - 0x2207 ) ; ReplacementFor_cwd_some_quoted = false ; ReplacementFor_any_has_acl = false ; ReplacementFor_inode_number_width = ( 0xba0 + 4648 - 0x1dc8 ) ; ReplacementFor_block_size_width = ( 0xb0 + 7910 - 0x1f96 ) ; ReplacementFor_nlink_width = ( 0x21b5 + 331 - 0x2300 ) ; ReplacementFor_owner_width = ( 0x7e1 + 4288 - 0x18a1 ) ; ReplacementFor_group_width = ( 0x11ca + 5305 - 0x2683 ) ; ReplacementFor_author_width = ( 0x59a + 1563 - 0xbb5 ) ; ReplacementFor_scontext_width = ( 0xac7 + 3226 - 0x1761 ) ; ReplacementFor_major_device_number_width = ( 0x3d9 + 4655 - 0x1608 ) ; ReplacementFor_minor_device_number_width = ( 0x19b0 + 327 - 0x1af7 ) ; ReplacementFor_file_size_width = ( 0x205 + 2637 - 0xc52 ) ; } static bool ReplacementFor_errno_unsupported ( int ReplacementFor_err ) < ReplacementFor_missing ( ( char ) ( 0xaea +456 -0xc77 ) ) > { return ( ReplacementFor_err == EINVAL || ReplacementFor_err == ENOSYS || ReplacementFor_is_ENOTSUP ( ReplacementFor_err ) ) ; } static int ReplacementFor_getfilecon_cache ( char const * ReplacementFor_file , struct ReplacementFor_fileinfo * ReplacementFor_f , bool ReplacementFor_deref ) < ReplacementFor_missing ( ( char ) ( 0x70f +1301 -0xbe9 ) ) > { static dev_t ReplacementFor_unsupported_device ; if ( ReplacementFor_f -> stat . st_dev == ReplacementFor_unsupported_device ) { errno = ReplacementFor_ENOTSUP ; return - ( 0x9dd + 6300 - 0x2278 ) ; } int ReplacementFor_r = ( 0x1cf8 + 2543 - 0x26e7 ) ; ReplacementFor_def ReplacementFor_HAVE_SMACK  if ( ReplacementFor_is_smack_enabled ( ) ) < ReplacementFor_missing ( ( char ) ( 0xc59 + 5973 - 0x2373 ) ) > ReplacementFor_r = ReplacementFor_smack_new_label_from_path ( ReplacementFor_file , " \x73 \x65 \x63 \x75 \x72 \x69 \x74 \x79 \x2e \x53 \x4d \x41 \x43 \x4b \x36 \x34 " , ReplacementFor_deref , & ReplacementFor_f -> ReplacementFor_scontext ) ; else ReplacementFor_ndif  ReplacementFor_r = ( ReplacementFor_deref ? ReplacementFor_getfilecon ( ReplacementFor_file , & ReplacementFor_f -> ReplacementFor_scontext ) : ReplacementFor_lgetfilecon ( ReplacementFor_file , & ReplacementFor_f -> ReplacementFor_scontext ) ) ; if ( ReplacementFor_r < ( 0x12c4 + 3571 - 0x20b7 ) && ReplacementFor_errno_unsupported ( errno ) ) ReplacementFor_unsupported_device = ReplacementFor_f -> stat . st_dev ; return ReplacementFor_r ; }
>>>Func
METHOD ReplacementFor_isSymmetric
METHOD_RETURN bool
PARAM struct ReplacementFor_TreeNode*\012ReplacementFor_root
RETURN return ReplacementFor_root==NULL||\012ReplacementFor_checkSymmetric(ReplacementFor_root->ReplacementFor_left,\012ReplacementFor_root->ReplacementFor_right); return ReplacementFor_root==NULL||\012ReplacementFor_checkSymmetric(ReplacementFor_root->ReplacementFor_left,\012ReplacementFor_root->ReplacementFor_right);
<operator>.logicalOr ReplacementFor_root==NULL||\012ReplacementFor_checkSymmetric(ReplacementFor_root->ReplacementFor_left,\012ReplacementFor_root->ReplacementFor_right)
<operator>.equals ReplacementFor_root==NULL
ReplacementFor_checkSymmetric ReplacementFor_checkSymmetric(ReplacementFor_root->ReplacementFor_left,\012ReplacementFor_root->ReplacementFor_right)
<operator>.indirectFieldAccess ReplacementFor_root->ReplacementFor_left
<operator>.indirectFieldAccess ReplacementFor_root->ReplacementFor_right
FIELD_IDENTIFIER ReplacementFor_left ReplacementFor_left
FIELD_IDENTIFIER ReplacementFor_right ReplacementFor_right
>>>PDG&11 0->2 0->5 2->5 3->1 4->1 4->1 4->1 4->3 5->1 5->1 5->4 5->4 5->6 5->7 5->8 5->9 5->10 6->1 6->1 6->4 6->4
>>>Token bool ReplacementFor_isSymmetric ( struct ReplacementFor_TreeNode * ReplacementFor_root ) { return ReplacementFor_root == NULL || ReplacementFor_checkSymmetric ( ReplacementFor_root -> ReplacementFor_left , ReplacementFor_root -> ReplacementFor_right ) ; }
>>>Func
METHOD main
METHOD_RETURN int
PARAM int ReplacementFor_argc
PARAM const char*ReplacementFor_argv[]
<operator>.assignment ReplacementFor_num_test_cases=(0x14e3+3560-0x22cb)
<operator>.assignment ReplacementFor_num_combinations=(0x1e93+1402-0x240d)
<operator>.assignment ReplacementFor_num_oppositions=(0xaaa+4926-0x1de8)
<operator>.assignment ReplacementFor_num_magicks=(0xed6+1617-0x1527)
<operator>.assignment i=(0x3a3+1275-0x89e)
<operator>.assignment ReplacementFor_j=(0xdf4+6011-0x256f)
<operator>.assignment ReplacementFor_k=(0x15f9+928-0x1999)
<operator>.assignment l=\012(0x1152+4030-0x2110)
<operator>.assignment ReplacementFor_temp_int=(0x168+3253-0xe1d)
<operator>.assignment ReplacementFor_input[ReplacementFor_MAX_CHARACTERS]={'\0'}
<operator>.assignment ReplacementFor_output[ReplacementFor_MAX_CHARACTERS]={'\0'}
scanf scanf("\x25\x64",&\012ReplacementFor_num_test_cases)
RETURN return\012(0x420+1133-0x88d); return\012(0x420+1133-0x88d);
<operator>.lessThan i<ReplacementFor_NUM_CHARACTERS
<operator>.postIncrement i++
<operator>.lessThan i<\012ReplacementFor_num_test_cases
<operator>.postIncrement i++
<operator>.subtraction 0x420+1133-0x88d
<operator>.subtraction 0x14e3+3560-0x22cb
<operator>.subtraction 0x1e93+1402-0x240d
<operator>.subtraction 0xaaa+4926-0x1de8
<operator>.subtraction 0xed6+1617-0x1527
<operator>.subtraction 0x3a3+1275-0x89e
<operator>.subtraction 0xdf4+6011-0x256f
<operator>.subtraction 0x15f9+928-0x1999
<operator>.subtraction 0x1152+4030-0x2110
<operator>.subtraction 0x168+3253-0xe1d
<operator>.arrayInitializer {'\0'}
<operator>.arrayInitializer {'\0'}
<operator>.assignment i=\012(0xf1d+3182-0x1b8b)
<operator>.assignment i=(0x1792+718-0x1a60)
scanf scanf("\x25\x64",&\012ReplacementFor_num_combinations)
scanf scanf("\x25\x64",&ReplacementFor_num_oppositions)
scanf scanf("\x25\x64",&\012ReplacementFor_num_magicks)
scanf scanf("\x25\x73",ReplacementFor_input)
<operator>.assignment ReplacementFor_k=(0xb7+701-0x374)
printf printf(\012"\x43\x61\x73\x65\x20\x23\x25\x64\x3a\x20\x5b" i+(0x1fba+1022-0x23b7))
printf printf("\x5d" "\n")
<operator>.assignment l=(0xba2+339-0xcf5)
<operator>.addition 0x14e3+3560
<operator>.addition 0x1e93+1402
<operator>.addition 0xaaa+4926
<operator>.addition 0xed6+1617
<operator>.addition 0x3a3+1275
<operator>.addition 0xdf4+6011
<operator>.addition 0x15f9+928
<operator>.addition 0x1152+4030
<operator>.addition 0x168+3253
<operator>.lessThan ReplacementFor_j<ReplacementFor_NUM_CHARACTERS
<operator>.postIncrement ReplacementFor_j++
<operator>.lessThan ReplacementFor_k<ReplacementFor_NUM_CHARACTERS
<operator>.postIncrement ReplacementFor_k++
<operator>.lessThan ReplacementFor_j<ReplacementFor_num_combinations
<operator>.postIncrement ReplacementFor_j++
<operator>.lessThan ReplacementFor_j<\012ReplacementFor_num_oppositions
<operator>.postIncrement ReplacementFor_j++
<operator>.lessThan ReplacementFor_j<ReplacementFor_num_magicks
<operator>.postIncrement ReplacementFor_j++
<operator>.lessThan l<ReplacementFor_k
<operator>.postIncrement l++
<operator>.notEquals ReplacementFor_output[l]!='\0'
<operator>.addition 0x420+1133
<operator>.subtraction 0xf1d+3182-0x1b8b
<operator>.assignment ReplacementFor_j=\012(0x45b+4540-0x1617)
<operator>.assignment ReplacementFor_combinations[i][ReplacementFor_j]='\0'
<operator>.assignment ReplacementFor_oppositions[i][ReplacementFor_j]=false
<operator>.subtraction 0x1792+718-0x1a60
<operator>.assignment ReplacementFor_k=(0x341+3547-0x111c)
<operator>.assignment ReplacementFor_j=(0x13c0+583-0x1607)
scanf scanf(\012"\x25\x73",ReplacementFor_input)
<operator>.assignment ReplacementFor_combinations[(unsigned)\012ReplacementFor_input[(0x45c+100-0x4c0)]][(unsigned)ReplacementFor_input[\012(0x2d6+2379-0xc20)]]=ReplacementFor_input[(0x18aa+3464-0x2630)]
<operator>.assignment ReplacementFor_combinations[(unsigned)ReplacementFor_input[(0x2ed+3406-0x103a)]]\012[(unsigned)ReplacementFor_input[(0xdf7+5442-0x2339)]]=ReplacementFor_input[\012(0x1547+171-0x15f0)]
<operator>.assignment ReplacementFor_j=(0x218+113-0x289)
scanf scanf("\x25\x73",\012ReplacementFor_input)
<operator>.assignment ReplacementFor_oppositions[(unsigned)ReplacementFor_input[\012(0x9eb+2485-0x13a0)]][(unsigned)ReplacementFor_input[(0xc62+1042-0x1073)]]=true
<operator>.assignment ReplacementFor_oppositions[(unsigned)ReplacementFor_input[(0x6b9+6305-0x1f59)]][\012(unsigned)ReplacementFor_input[(0xe57+2226-0x1709)]]=true
<operator>.subtraction 0xb7+701-0x374
<operator>.assignment ReplacementFor_j=(0xe40+896-0x11c0)
<operator>.assignment ReplacementFor_output[ReplacementFor_k]=ReplacementFor_input[ReplacementFor_j]
<operator>.addition i+(0x1fba+1022-0x23b7)
<operator>.assignment l=\012(0x1339+2205-0x1bd6)
printf printf("\x25\x63",\012ReplacementFor_output[l])
<operator>.subtraction 0xba2+339-0xcf5
<operator>.assignment ReplacementFor_output[l++]='\0'
<operator>.addition 0xf1d+3182
<operator>.addition 0x1792+718
<operator>.lessThan ReplacementFor_j<\012ReplacementFor_NUM_CHARACTERS
<operator>.postIncrement ReplacementFor_j++
<operator>.addition 0xb7+701
<operator>.greaterThan (ReplacementFor_temp_int=ReplacementFor_check_end(ReplacementFor_output,\012ReplacementFor_k,ReplacementFor_combinations,ReplacementFor_oppositions))>\012(0x875+6037-0x200a)
<operator>.subtraction 0x1fba+1022-0x23b7
<operator>.notEquals ReplacementFor_output[l+(0x323+8426-0x240c)]!='\0'
<operator>.addition 0xba2+339
<operator>.subtraction 0x45b+4540-0x1617
<operator>.subtraction 0x341+3547-0x111c
<operator>.assignment ReplacementFor_j=(0x1c5+8128-0x2185)
<operator>.assignment ReplacementFor_combinations[\012ReplacementFor_k][ReplacementFor_j]='\0'
<operator>.assignment ReplacementFor_oppositions[\012ReplacementFor_k][ReplacementFor_j]=false
<operator>.subtraction 0x13c0+583-0x1607
<operator>.subtraction 0x218+113-0x289
<operator>.subtraction 0xe40+896-0x11c0
<operator>.assignment ReplacementFor_k=ReplacementFor_k+(0x24d0+145-0x2560)-\012ReplacementFor_temp_int
<operator>.addition 0x1fba+1022
<operator>.subtraction 0x1339+2205-0x1bd6
printf printf("\x2c\x20")
<operator>.addition 0x45b+4540
<operator>.addition 0x341+3547
<operator>.addition 0x13c0+583
<operator>.cast (unsigned)ReplacementFor_input[\012(0x2d6+2379-0xc20)]
<operator>.subtraction 0x18aa+3464-0x2630
<operator>.cast (unsigned)ReplacementFor_input[(0xdf7+5442-0x2339)]
<operator>.subtraction 0x1547+171-0x15f0
<operator>.addition 0x218+113
<operator>.cast (unsigned)ReplacementFor_input[(0xc62+1042-0x1073)]
<operator>.cast (unsigned)ReplacementFor_input[(0xe57+2226-0x1709)]
<operator>.addition 0xe40+896
<operator>.assignment ReplacementFor_temp_int=ReplacementFor_check_end(ReplacementFor_output,\012ReplacementFor_k,ReplacementFor_combinations,ReplacementFor_oppositions)
<operator>.subtraction 0x875+6037-0x200a
<operator>.postIncrement ReplacementFor_k++
<operator>.addition 0x1339+2205
<operator>.postIncrement l++
<operator>.subtraction 0x1c5+8128-0x2185
<operator>.cast (unsigned)\012ReplacementFor_input[(0x45c+100-0x4c0)]
<operator>.addition 0x18aa+3464
<operator>.cast (unsigned)ReplacementFor_input[(0x2ed+3406-0x103a)]
<operator>.addition 0x1547+171
<operator>.cast (unsigned)ReplacementFor_input[\012(0x9eb+2485-0x13a0)]
<operator>.cast (unsigned)ReplacementFor_input[(0x6b9+6305-0x1f59)]
ReplacementFor_check_end ReplacementFor_check_end(ReplacementFor_output,\012ReplacementFor_k,ReplacementFor_combinations,ReplacementFor_oppositions)
<operator>.addition 0x875+6037
<operator>.subtraction ReplacementFor_k+(0x24d0+145-0x2560)-\012ReplacementFor_temp_int
<operator>.addition l+(0x323+8426-0x240c)
<operator>.addition 0x1c5+8128
<operator>.subtraction 0x2d6+2379-0xc20
<operator>.subtraction 0xdf7+5442-0x2339
<operator>.subtraction 0xc62+1042-0x1073
<operator>.subtraction 0xe57+2226-0x1709
<operator>.addition ReplacementFor_k+(0x24d0+145-0x2560)
<operator>.subtraction 0x323+8426-0x240c
<operator>.subtraction 0x45c+100-0x4c0
<operator>.addition 0x2d6+2379
<operator>.subtraction 0x2ed+3406-0x103a
<operator>.addition 0xdf7+5442
<operator>.subtraction 0x9eb+2485-0x13a0
<operator>.addition 0xc62+1042
<operator>.subtraction 0x6b9+6305-0x1f59
<operator>.addition 0xe57+2226
<operator>.subtraction 0x24d0+145-0x2560
<operator>.addition 0x323+8426
<operator>.addition 0x45c+100
<operator>.addition 0x2ed+3406
<operator>.addition 0x9eb+2485
<operator>.addition 0x6b9+6305
<operator>.addition 0x24d0+145
<operator>.addressOf &\012ReplacementFor_num_combinations
<operator>.addressOf &ReplacementFor_num_oppositions
<operator>.addressOf &\012ReplacementFor_num_magicks
<operator>.indirectIndexAccess ReplacementFor_output[l]
<operator>.indirectIndexAccess ReplacementFor_combinations[i][ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_oppositions[i][ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_combinations[(unsigned)\012ReplacementFor_input[(0x45c+100-0x4c0)]][(unsigned)ReplacementFor_input[\012(0x2d6+2379-0xc20)]]
<operator>.indirectIndexAccess ReplacementFor_input[(0x18aa+3464-0x2630)]
<operator>.indirectIndexAccess ReplacementFor_combinations[(unsigned)ReplacementFor_input[(0x2ed+3406-0x103a)]]\012[(unsigned)ReplacementFor_input[(0xdf7+5442-0x2339)]]
<operator>.indirectIndexAccess ReplacementFor_input[\012(0x1547+171-0x15f0)]
<operator>.indirectIndexAccess ReplacementFor_oppositions[(unsigned)ReplacementFor_input[\012(0x9eb+2485-0x13a0)]][(unsigned)ReplacementFor_input[(0xc62+1042-0x1073)]]
<operator>.indirectIndexAccess ReplacementFor_oppositions[(unsigned)ReplacementFor_input[(0x6b9+6305-0x1f59)]][\012(unsigned)ReplacementFor_input[(0xe57+2226-0x1709)]]
<operator>.indirectIndexAccess ReplacementFor_output[ReplacementFor_k]
<operator>.indirectIndexAccess ReplacementFor_input[ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_output[l]
<operator>.indirectIndexAccess ReplacementFor_output[l++]
<operator>.indirectIndexAccess ReplacementFor_combinations[i]
<operator>.indirectIndexAccess ReplacementFor_oppositions[i]
<operator>.indirectIndexAccess ReplacementFor_combinations[(unsigned)\012ReplacementFor_input[(0x45c+100-0x4c0)]]
<operator>.indirectIndexAccess ReplacementFor_combinations[(unsigned)ReplacementFor_input[(0x2ed+3406-0x103a)]]
<operator>.indirectIndexAccess ReplacementFor_oppositions[(unsigned)ReplacementFor_input[\012(0x9eb+2485-0x13a0)]]
<operator>.indirectIndexAccess ReplacementFor_oppositions[(unsigned)ReplacementFor_input[(0x6b9+6305-0x1f59)]]
<operator>.indirectIndexAccess ReplacementFor_output[l+(0x323+8426-0x240c)]
<operator>.indirectIndexAccess ReplacementFor_combinations[\012ReplacementFor_k][ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_oppositions[\012ReplacementFor_k][ReplacementFor_j]
UNKNOWN unsigned unsigned
<operator>.indirectIndexAccess ReplacementFor_input[\012(0x2d6+2379-0xc20)]
UNKNOWN unsigned unsigned
<operator>.indirectIndexAccess ReplacementFor_input[(0xdf7+5442-0x2339)]
UNKNOWN unsigned unsigned
<operator>.indirectIndexAccess ReplacementFor_input[(0xc62+1042-0x1073)]
UNKNOWN unsigned unsigned
<operator>.indirectIndexAccess ReplacementFor_input[(0xe57+2226-0x1709)]
<operator>.indirectIndexAccess ReplacementFor_combinations[\012ReplacementFor_k]
<operator>.indirectIndexAccess ReplacementFor_oppositions[\012ReplacementFor_k]
UNKNOWN unsigned unsigned
<operator>.indirectIndexAccess ReplacementFor_input[(0x45c+100-0x4c0)]
UNKNOWN unsigned unsigned
<operator>.indirectIndexAccess ReplacementFor_input[(0x2ed+3406-0x103a)]
UNKNOWN unsigned unsigned
<operator>.indirectIndexAccess ReplacementFor_input[\012(0x9eb+2485-0x13a0)]
UNKNOWN unsigned unsigned
<operator>.indirectIndexAccess ReplacementFor_input[(0x6b9+6305-0x1f59)]
>>>PDG&201 0->2 0->3 0->15 0->17 0->18 0->19 0->20 0->21 0->22 0->23 0->24 0->25 0->26 0->27 0->28 0->29 0->30 0->31 0->32 0->35 0->36 0->37 0->38 0->40 0->41 0->43 0->44 0->45 0->46 0->47 0->48 0->49 0->50 0->51 0->52 0->53 0->54 0->55 0->56 0->57 0->58 0->59 0->60 0->61 0->62 0->63 0->64 0->65 0->66 0->68 0->69 0->70 0->73 0->77 0->78 0->79 0->80 0->83 0->85 0->86 0->87 0->88 0->89 0->90 0->91 0->92 0->94 0->95 0->96 0->97 0->98 0->100 0->101 0->102 0->103 0->104 0->106 0->107 0->108 0->109 0->110 0->111 0->113 0->115 0->116 0->119 0->121 0->122 0->123 0->124 0->125 0->127 0->129 0->132 0->133 0->134 0->135 0->136 0->137 0->138 0->139 0->140 0->141 0->142 0->143 0->144 0->145 0->146 0->147 0->148 0->149 0->150 0->151 0->152 0->153 0->154 0->155 0->156 0->157 2->1 3->1 4->1 4->1 4->15 4->19 5->1 5->1 5->1 5->35 5->56 6->1 6->1 6->1 6->36 6->58 7->1 7->1 7->1 7->37 7->60 8->1 8->1 9->1 9->1 9->1 10->1 10->1 10->1 11->1 11->1 11->1 12->1 12->1 12->1 13->1 13->1 13->38 13->73 13->77 14->1 14->1 14->1 14->64 14->85 14->95 14->132 15->1 15->19 16->1 17->1 17->1 17->17 17->18 17->18 17->52 17->52 17->54 17->67 17->97 17->109 18->1 18->17 19->1 19->1 19->1 19->19 19->20 19->20 19->35 19->36 19->37 19->38 19->39 19->40 19->40 19->41 19->42 19->54 19->56 19->58 19->60 19->62 19->64 19->71 19->72 19->76 19->80 19->81 19->83 19->83 19->84 19->86 19->92 19->94 19->96 19->98 19->102 19->103 19->104 19->106 19->107 19->110 19->111 19->116 19->119 19->123 19->158 19->159 19->160 19->161 20->1 20->19 21->1 21->1 21->16 22->1 22->4 22->4 23->1 23->5 23->5 24->1 24->6 24->6 25->1 25->7 25->7 26->1 26->8 26->8 27->1 27->9 27->9 28->1 28->10 28->10 29->1 29->11 29->11 30->1 30->12 30->12 31->13 32->14 33->1 33->1 33->17 34->1 34->1 34->19 35->1 35->56 36->1 36->58 37->1 37->60 38->1 38->73 38->77 38->82 39->1 39->1 39->62 39->132 40->1 40->1 41->1 42->1 42->1 42->1 42->124 52->1 52->1 52->17 52->52 52->53 52->53 52->68 52->69 52->162 52->163 52->174 52->175 53->1 53->52 54->1 54->1 54->54 54->55 54->55 54->90 54->90 54->99 54->125 54->136 55->1 55->54 56->1 56->1 56->35 56->56 56->57 56->57 56->73 56->74 56->75 56->112 56->113 56->114 56->115 56->126 56->127 56->128 56->129 56->137 56->138 56->143 56->144 56->145 56->146 56->153 56->154 56->164 56->165 56->166 56->167 56->176 56->177 56->183 56->184 56->185 56->186 56->193 56->194 56->195 56->196 57->1 57->56 58->1 58->1 58->36 58->58 58->59 58->59 58->77 58->78 58->79 58->117 58->118 58->130 58->131 58->139 58->140 58->147 58->148 58->149 58->150 58->155 58->156 58->168 58->169 58->178 58->179 58->187 58->188 58->189 58->190 58->197 58->198 58->199 58->200 59->1 59->58 60->1 60->1 60->1 60->37 60->60 60->61 60->61 60->82 60->93 60->120 60->121 60->132 60->133 60->170 60->171 61->1 61->60 62->1 62->1 62->62 62->63 62->63 62->85 62->95 62->135 62->135 62->142 62->152 62->172 62->180 63->1 63->62 64->1 64->1 64->64 64->85 64->87 64->124 64->132 64->161 64->173 66->1 66->33 66->33 67->1 67->1 67->52 68->1 68->1 69->1 69->1 69->1 70->1 70->34 70->34 71->1 71->1 71->54 72->1 72->1 72->56 73->38 73->74 73->75 73->77 73->112 73->114 73->126 73->128 74->1 74->1 74->1 75->1 75->1 75->1 76->1 76->1 76->58 77->38 77->73 77->117 77->118 77->130 77->131 78->1 78->1 79->1 79->1 79->1 80->1 80->39 80->39 81->1 81->1 81->60 82->1 82->1 82->1 82->132 83->1 84->1 84->1 84->62 85->1 85->64 86->1 86->42 86->42 87->1 87->1 87->132 90->1 90->54 90->90 90->91 90->91 90->100 90->101 90->181 90->182 90->191 90->192 91->1 91->90 93->1 93->1 93->1 93->105 93->122 93->134 93->141 93->151 93->157 94->1 94->40 94->40 94->83 94->83 95->1 95->1 95->108 95->132 97->1 97->67 97->67 98->1 98->71 98->71 99->1 99->1 99->90 100->1 100->1 101->1 101->1 101->1 102->1 102->72 102->72 103->1 103->76 103->76 104->1 104->81 104->81 105->1 105->1 105->62 105->132 107->1 107->84 107->84 108->1 112->1 113->1 114->1 115->1 117->1 118->1 120->1 120->1 120->93 120->134 121->1 121->93 121->93 122->1 122->62 122->132 124->1 125->1 125->99 125->99 126->1 128->1 130->1 131->1 132->1 132->1 132->1 132->64 132->85 132->93 132->93 132->93 132->93 132->95 132->120 132->120 132->120 132->120 132->122 132->134 132->141 134->1 134->1 134->105 134->105 135->1 137->1 138->1 139->1 140->1 141->1 142->1 142->135 142->135 143->1 145->1 147->1 149->1 151->1 151->134 151->134 151->141 151->141
>>>Token int main ( int ReplacementFor_argc , const char * ReplacementFor_argv [ ] ) { int ReplacementFor_num_test_cases = ( 0x14e3 + 3560 - 0x22cb ) ; int ReplacementFor_num_combinations = ( 0x1e93 + 1402 - 0x240d ) ; int ReplacementFor_num_oppositions = ( 0xaaa + 4926 - 0x1de8 ) ; int ReplacementFor_num_magicks = ( 0xed6 + 1617 - 0x1527 ) ; int i = ( 0x3a3 + 1275 - 0x89e ) , ReplacementFor_j = ( 0xdf4 + 6011 - 0x256f ) , ReplacementFor_k = ( 0x15f9 + 928 - 0x1999 ) , l = ( 0x1152 + 4030 - 0x2110 ) ; int ReplacementFor_temp_int = ( 0x168 + 3253 - 0xe1d ) ; char ReplacementFor_combinations [ ReplacementFor_NUM_CHARACTERS ] [ ReplacementFor_NUM_CHARACTERS ] ; bool ReplacementFor_oppositions [ ReplacementFor_NUM_CHARACTERS ] [ ReplacementFor_NUM_CHARACTERS ] ; char ReplacementFor_input [ ReplacementFor_MAX_CHARACTERS ] = { ' \0 ' } ; char ReplacementFor_output [ ReplacementFor_MAX_CHARACTERS ] = { ' \0 ' } ; for ( i = ( 0xf1d + 3182 - 0x1b8b ) ; i < ReplacementFor_NUM_CHARACTERS ; i ++ ) { for ( ReplacementFor_j = ( 0x45b + 4540 - 0x1617 ) ; ReplacementFor_j < ReplacementFor_NUM_CHARACTERS ; ReplacementFor_j ++ ) { ReplacementFor_combinations [ i ] [ ReplacementFor_j ] = ' \0 ' ; ReplacementFor_oppositions [ i ] [ ReplacementFor_j ] = false ; } } scanf ( " \x25 \x64 " , & ReplacementFor_num_test_cases ) ; for ( i = ( 0x1792 + 718 - 0x1a60 ) ; i < ReplacementFor_num_test_cases ; i ++ ) { for ( ReplacementFor_k = ( 0x341 + 3547 - 0x111c ) ; ReplacementFor_k < ReplacementFor_NUM_CHARACTERS ; ReplacementFor_k ++ ) { for ( ReplacementFor_j = ( 0x1c5 + 8128 - 0x2185 ) ; ReplacementFor_j < ReplacementFor_NUM_CHARACTERS ; ReplacementFor_j ++ ) { ReplacementFor_combinations [ ReplacementFor_k ] [ ReplacementFor_j ] = ' \0 ' ; ReplacementFor_oppositions [ ReplacementFor_k ] [ ReplacementFor_j ] = false ; } } scanf ( " \x25 \x64 " , & ReplacementFor_num_combinations ) ; for ( ReplacementFor_j = ( 0x13c0 + 583 - 0x1607 ) ; ReplacementFor_j < ReplacementFor_num_combinations ; ReplacementFor_j ++ ) { scanf ( " \x25 \x73 " , ReplacementFor_input ) ; ReplacementFor_combinations [ ( unsigned ) ReplacementFor_input [ ( 0x45c + 100 - 0x4c0 ) ] ] [ ( unsigned ) ReplacementFor_input [ ( 0x2d6 + 2379 - 0xc20 ) ] ] = ReplacementFor_input [ ( 0x18aa + 3464 - 0x2630 ) ] ; ReplacementFor_combinations [ ( unsigned ) ReplacementFor_input [ ( 0x2ed + 3406 - 0x103a ) ] ] [ ( unsigned ) ReplacementFor_input [ ( 0xdf7 + 5442 - 0x2339 ) ] ] = ReplacementFor_input [ ( 0x1547 + 171 - 0x15f0 ) ] ; } scanf ( " \x25 \x64 " , & ReplacementFor_num_oppositions ) ; for ( ReplacementFor_j = ( 0x218 + 113 - 0x289 ) ; ReplacementFor_j < ReplacementFor_num_oppositions ; ReplacementFor_j ++ ) { scanf ( " \x25 \x73 " , ReplacementFor_input ) ; ReplacementFor_oppositions [ ( unsigned ) ReplacementFor_input [ ( 0x9eb + 2485 - 0x13a0 ) ] ] [ ( unsigned ) ReplacementFor_input [ ( 0xc62 + 1042 - 0x1073 ) ] ] = true ; ReplacementFor_oppositions [ ( unsigned ) ReplacementFor_input [ ( 0x6b9 + 6305 - 0x1f59 ) ] ] [ ( unsigned ) ReplacementFor_input [ ( 0xe57 + 2226 - 0x1709 ) ] ] = true ; } scanf ( " \x25 \x64 " , & ReplacementFor_num_magicks ) ; scanf ( " \x25 \x73 " , ReplacementFor_input ) ; ReplacementFor_k = ( 0xb7 + 701 - 0x374 ) ; for ( ReplacementFor_j = ( 0xe40 + 896 - 0x11c0 ) ; ReplacementFor_j < ReplacementFor_num_magicks ; ReplacementFor_j ++ ) { ReplacementFor_output [ ReplacementFor_k ] = ReplacementFor_input [ ReplacementFor_j ] ; if ( ( ReplacementFor_temp_int = ReplacementFor_check_end ( ReplacementFor_output , ReplacementFor_k , ReplacementFor_combinations , ReplacementFor_oppositions ) ) > ( 0x875 + 6037 - 0x200a ) ) { ReplacementFor_k = ReplacementFor_k + ( 0x24d0 + 145 - 0x2560 ) - ReplacementFor_temp_int ; } else { ReplacementFor_k ++ ; } } printf ( " \x43 \x61 \x73 \x65 \x20 \x23 \x25 \x64 \x3a \x20 \x5b " , i + ( 0x1fba + 1022 - 0x23b7 ) ) ; for ( l = ( 0x1339 + 2205 - 0x1bd6 ) ; l < ReplacementFor_k ; l ++ ) { printf ( " \x25 \x63 " , ReplacementFor_output [ l ] ) ; if ( ReplacementFor_output [ l + ( 0x323 + 8426 - 0x240c ) ] != ' \0 ' ) { printf ( " \x2c \x20 " ) ; } } printf ( " \x5d " " \n " ) ; l = ( 0xba2 + 339 - 0xcf5 ) ; while ( ReplacementFor_output [ l ] != ' \0 ' ) { ReplacementFor_output [ l ++ ] = ' \0 ' ; } } return ( 0x420 + 1133 - 0x88d ) ; }
>>>Func
METHOD ReplacementFor_split_sq
METHOD_RETURN unsigned long
PARAM unsigned long val
PARAM int base
<operator>.preDecrement --i
RETURN return ReplacementFor_ret; return ReplacementFor_ret;
<operator>.greaterThan val>(0x406+7572-0x219a)
<operator>.postIncrement i++
<operator>.greaterEqualsThan i>=(0x5a6+2511-0xf75)
<operator>.postDecrement i--
<operator>.assignmentPlus ReplacementFor_ret+=\012ReplacementFor_cols[i]*ReplacementFor_cols[i]
IDENTIFIER ReplacementFor_ret return ReplacementFor_ret;
<operator>.assignment i=(0x2644+90-0x269e)
<operator>.assignment ReplacementFor_cols[i]=val%base
<operator>.assignmentDivision val/=base
<operator>.assignment ReplacementFor_ret=\012(0x17c5+3374-0x24f3)
<operator>.subtraction 0x406+7572-0x219a
<operator>.subtraction 0x5a6+2511-0xf75
<operator>.multiplication ReplacementFor_cols[i]*ReplacementFor_cols[i]
<operator>.subtraction 0x2644+90-0x269e
<operator>.addition 0x406+7572
<operator>.modulo val%base
<operator>.subtraction 0x17c5+3374-0x24f3
<operator>.addition 0x5a6+2511
<operator>.addition 0x2644+90
<operator>.addition 0x17c5+3374
<operator>.indirectIndexAccess ReplacementFor_cols[i]
<operator>.indirectIndexAccess ReplacementFor_cols[i]
<operator>.indirectIndexAccess ReplacementFor_cols[i]
>>>PDG&29 0->2 0->3 0->4 0->6 0->7 0->8 0->9 0->10 0->11 0->14 0->16 0->17 0->19 0->20 0->21 0->22 0->23 0->24 0->25 2->6 3->1 3->21 4->1 4->8 5->1 6->1 6->1 6->1 6->6 6->7 6->13 6->14 6->16 6->20 6->21 6->21 6->26 7->1 7->4 8->1 8->1 8->1 8->8 8->9 8->9 8->10 8->17 8->18 8->23 8->27 8->28 9->1 9->8 10->1 10->1 10->1 10->11 11->5 12->1 12->1 12->4 12->7 13->1 13->1 13->1 13->18 14->1 14->1 14->6 15->1 15->1 15->1 15->10 15->11 16->1 16->6 16->6 17->1 17->8 17->8 18->1 18->10 19->1 19->12 19->12 21->13 21->13 21->14 21->14 22->1 22->15 22->15
>>>Token unsigned long ReplacementFor_split_sq ( unsigned long val , int base ) { unsigned long ReplacementFor_ret ; int i ; for ( i = ( 0x2644 + 90 - 0x269e ) ; val > ( 0x406 + 7572 - 0x219a ) ; i ++ ) { ReplacementFor_cols [ i ] = val % base ; val /= base ; } -- i ; for ( ReplacementFor_ret = ( 0x17c5 + 3374 - 0x24f3 ) ; i >= ( 0x5a6 + 2511 - 0xf75 ) ; i -- ) ReplacementFor_ret += ReplacementFor_cols [ i ] * ReplacementFor_cols [ i ] ; return ReplacementFor_ret ; }
>>>Func
METHOD main
METHOD_RETURN int
scanf scanf("\x25\x64",&ReplacementFor_k)
RETURN return(0x1492+4022-0x2448); return(0x1492+4022-0x2448);
<operator>.lessThan l<\012ReplacementFor_k
<operator>.preIncrement ++l
<operator>.subtraction 0x1492+4022-0x2448
<operator>.assignment l=(0x1514+1967-0x1cc3)
memset memset(ReplacementFor_wp (0x4f0+8014-0x243e) sizeof(\012ReplacementFor_wp))
memset memset(ReplacementFor_owp (0xa86+3144-0x16ce) sizeof(\012ReplacementFor_owp))
memset memset(ReplacementFor_oowp (0x2fc+8166-0x22e2) sizeof(\012ReplacementFor_oowp))
scanf scanf("\x25\x64",&ReplacementFor_n)
printf printf("\x43\x61\x73\x65\x20\x23\x25\x64\x3a" "\n" l+\012(0x472+6809-0x1f0a))
<operator>.lessThan i<ReplacementFor_n
<operator>.preIncrement ++i
<operator>.lessThan i<ReplacementFor_n
<operator>.preIncrement ++i
<operator>.lessThan i<\012ReplacementFor_n
<operator>.preIncrement ++i
<operator>.lessThan i<ReplacementFor_n
<operator>.preIncrement ++i
<operator>.addition 0x1492+4022
<operator>.subtraction 0x1514+1967-0x1cc3
<operator>.subtraction 0x4f0+8014-0x243e
<operator>.subtraction 0xa86+3144-0x16ce
<operator>.subtraction 0x2fc+8166-0x22e2
<operator>.assignment i=\012(0x7f2+7180-0x23fe)
<operator>.assignment ReplacementFor_owp[i].\012ReplacementFor_b=ReplacementFor_oowp[i].ReplacementFor_b=(0x2b1+8614-0x2456)
<operator>.assignment i=(0xa91+6406-0x2397)
<operator>.assignment i=(0x3d7+3087-0xfe6)
<operator>.assignmentMultiplication ReplacementFor_owp[i].ReplacementFor_b*=ReplacementFor_owp\012[i].ReplacementFor_count
<operator>.addition l+\012(0x472+6809-0x1f0a)
<operator>.assignment i=(0xed7+3559-0x1cbe)
<operator>.assignmentMultiplication ReplacementFor_oowp[i].\012ReplacementFor_b*=ReplacementFor_oowp[i].ReplacementFor_count
printf printf("\x25\x2e\x36\x66" "\n" 0.25*(float)ReplacementFor_wp[i].\012ReplacementFor_a/ReplacementFor_wp[i].ReplacementFor_b+0.5*(float)\012ReplacementFor_owp[i].ReplacementFor_a/ReplacementFor_owp[i].ReplacementFor_b+\0120.25*(float)ReplacementFor_oowp[i].ReplacementFor_a/ReplacementFor_oowp[i].\012ReplacementFor_b)
<operator>.addition 0x1514+1967
<operator>.addition 0x4f0+8014
<operator>.addition 0xa86+3144
<operator>.addition 0x2fc+8166
<operator>.lessThan ReplacementFor_j<ReplacementFor_n
<operator>.preIncrement ++ReplacementFor_j
<operator>.lessThan ReplacementFor_j<ReplacementFor_n
<operator>.preIncrement ++\012ReplacementFor_j
<operator>.subtraction 0x472+6809-0x1f0a
<operator>.lessThan ReplacementFor_j<ReplacementFor_n
<operator>.preIncrement ++\012ReplacementFor_j
<operator>.equals ReplacementFor_wp[i].ReplacementFor_b==(0x544+8202-0x254e)
<operator>.equals ReplacementFor_owp[i].\012ReplacementFor_b==(0xf64+5182-0x23a2)
<operator>.equals ReplacementFor_oowp[i].ReplacementFor_b==\012(0x514+1477-0xad9)
<operator>.subtraction 0x7f2+7180-0x23fe
<operator>.assignment ReplacementFor_oowp[i].ReplacementFor_b=(0x2b1+8614-0x2456)
<operator>.subtraction 0xa91+6406-0x2397
<operator>.assignment ReplacementFor_j=\012(0x138d+2385-0x1cde)
<operator>.assignment ReplacementFor_j=(0x1857+2264-0x212f)
<operator>.subtraction 0x3d7+3087-0xfe6
<operator>.addition 0x472+6809
<operator>.subtraction 0xed7+3559-0x1cbe
<operator>.assignment ReplacementFor_j=(0x201+4231-0x1288)
<operator>.assignment ReplacementFor_wp[i]\012.ReplacementFor_b=(0x13e7+4811-0x26b1)
<operator>.assignment ReplacementFor_owp[i].ReplacementFor_b=\012(0x1b77+2587-0x2591)
<operator>.assignment ReplacementFor_oowp[i].ReplacementFor_b=(0x2c2+7848-0x2169)
<operator>.addition 0.25*(float)ReplacementFor_wp[i].\012ReplacementFor_a/ReplacementFor_wp[i].ReplacementFor_b+0.5*(float)\012ReplacementFor_owp[i].ReplacementFor_a/ReplacementFor_owp[i].ReplacementFor_b+\0120.25*(float)ReplacementFor_oowp[i].ReplacementFor_a/ReplacementFor_oowp[i].\012ReplacementFor_b
<operator>.addition 0x7f2+7180
<operator>.subtraction 0x2b1+8614-0x2456
<operator>.addition 0xa91+6406
<operator>.logicalAnd scanf("\x25\x63",&ReplacementFor_a[i][ReplacementFor_j])==(0x4fd+8571-0x2677)&&\012ReplacementFor_a[i][ReplacementFor_j]!=((char)(0x1211+4020-0x2197))&&\012ReplacementFor_a[i][ReplacementFor_j]!=((char)(0x1417+2717-0x1e83))&&\012ReplacementFor_a[i][ReplacementFor_j]!=((char)(0x301+3147-0xf1c))
<operator>.notEquals ReplacementFor_a[i][ReplacementFor_j]!=((char)(0x2c0+954-0x64c))
<operator>.logicalAnd i!=ReplacementFor_j&&ReplacementFor_a[i][ReplacementFor_j]\012!=((char)(0xb01+2149-0x1338))
<operator>.addition 0x3d7+3087
<operator>.addition 0xed7+3559
<operator>.notEquals ReplacementFor_a[i][ReplacementFor_j]!=\012((char)(0xc1f+1553-0x1202))
<operator>.subtraction 0x544+8202-0x254e
<operator>.subtraction 0xf64+5182-0x23a2
<operator>.subtraction 0x514+1477-0xad9
<operator>.addition 0.25*(float)ReplacementFor_wp[i].\012ReplacementFor_a/ReplacementFor_wp[i].ReplacementFor_b+0.5*(float)\012ReplacementFor_owp[i].ReplacementFor_a/ReplacementFor_owp[i].ReplacementFor_b
<operator>.division 0.25*(float)ReplacementFor_oowp[i].ReplacementFor_a/ReplacementFor_oowp[i].\012ReplacementFor_b
<operator>.addition 0x2b1+8614
<operator>.subtraction 0x138d+2385-0x1cde
<operator>.preIncrement ++\012ReplacementFor_wp[i].ReplacementFor_b
<operator>.subtraction 0x1857+2264-0x212f
<operator>.assignment ReplacementFor_x.ReplacementFor_b=\012ReplacementFor_wp[i].ReplacementFor_b>(0x14bf+4271-0x256d)?ReplacementFor_wp[i].\012ReplacementFor_b-(0xa91+2462-0x142e):(0x99f+4377-0x1ab7)
<operator>.assignment ReplacementFor_x.\012ReplacementFor_a=ReplacementFor_wp[i].ReplacementFor_a-(ReplacementFor_a[i][\012ReplacementFor_j]==((char)(0xe4c+2375-0x1762))?(0x241+8056-0x21b8):\012(0x113b+1705-0x17e4))
ReplacementFor_sum ReplacementFor_sum(&ReplacementFor_owp[ReplacementFor_j],\012ReplacementFor_owp[ReplacementFor_j],ReplacementFor_x)
<operator>.preIncrement ++ReplacementFor_owp[\012ReplacementFor_j].ReplacementFor_count
<operator>.subtraction 0x201+4231-0x1288
ReplacementFor_sum ReplacementFor_sum(&ReplacementFor_oowp[i],\012ReplacementFor_oowp[i],ReplacementFor_owp[ReplacementFor_j])
<operator>.preIncrement ++\012ReplacementFor_oowp[i].ReplacementFor_count
<operator>.addition 0x544+8202
<operator>.subtraction 0x13e7+4811-0x26b1
<operator>.addition 0xf64+5182
<operator>.subtraction 0x1b77+2587-0x2591
<operator>.addition 0x514+1477
<operator>.subtraction 0x2c2+7848-0x2169
<operator>.division 0.25*(float)ReplacementFor_wp[i].\012ReplacementFor_a/ReplacementFor_wp[i].ReplacementFor_b
<operator>.division 0.5*(float)\012ReplacementFor_owp[i].ReplacementFor_a/ReplacementFor_owp[i].ReplacementFor_b
<operator>.multiplication 0.25*(float)ReplacementFor_oowp[i].ReplacementFor_a
<operator>.addition 0x138d+2385
<operator>.logicalAnd scanf("\x25\x63",&ReplacementFor_a[i][ReplacementFor_j])==(0x4fd+8571-0x2677)&&\012ReplacementFor_a[i][ReplacementFor_j]!=((char)(0x1211+4020-0x2197))&&\012ReplacementFor_a[i][ReplacementFor_j]!=((char)(0x1417+2717-0x1e83))
<operator>.notEquals ReplacementFor_a[i][ReplacementFor_j]!=((char)(0x301+3147-0xf1c))
<operator>.cast (char)(0x2c0+954-0x64c)
<operator>.equals ReplacementFor_a[i][ReplacementFor_j]==\012((char)(0xc35+3810-0x1ae6))
<operator>.addition 0x1857+2264
<operator>.notEquals i!=ReplacementFor_j
<operator>.notEquals ReplacementFor_a[i][ReplacementFor_j]\012!=((char)(0xb01+2149-0x1338))
<operator>.addition 0x201+4231
<operator>.cast (char)(0xc1f+1553-0x1202)
<operator>.addition 0x13e7+4811
<operator>.addition 0x1b77+2587
<operator>.addition 0x2c2+7848
<operator>.multiplication 0.25*(float)ReplacementFor_wp[i].\012ReplacementFor_a
<operator>.multiplication 0.5*(float)\012ReplacementFor_owp[i].ReplacementFor_a
<operator>.logicalAnd scanf("\x25\x63",&ReplacementFor_a[i][ReplacementFor_j])==(0x4fd+8571-0x2677)&&\012ReplacementFor_a[i][ReplacementFor_j]!=((char)(0x1211+4020-0x2197))
<operator>.notEquals ReplacementFor_a[i][ReplacementFor_j]!=((char)(0x1417+2717-0x1e83))
<operator>.cast (char)(0x301+3147-0xf1c)
<operator>.subtraction 0x2c0+954-0x64c
<operator>.preIncrement ++ReplacementFor_wp[i].ReplacementFor_a
<operator>.cast (char)(0xb01+2149-0x1338)
<operator>.conditional ReplacementFor_wp[i].ReplacementFor_b>(0x14bf+4271-0x256d)?ReplacementFor_wp[i].\012ReplacementFor_b-(0xa91+2462-0x142e):(0x99f+4377-0x1ab7)
<operator>.subtraction ReplacementFor_wp[i].ReplacementFor_a-(ReplacementFor_a[i][\012ReplacementFor_j]==((char)(0xe4c+2375-0x1762))?(0x241+8056-0x21b8):\012(0x113b+1705-0x17e4))
<operator>.subtraction 0xc1f+1553-0x1202
<operator>.equals scanf("\x25\x63",&ReplacementFor_a[i][ReplacementFor_j])==(0x4fd+8571-0x2677)
<operator>.notEquals ReplacementFor_a[i][ReplacementFor_j]!=((char)(0x1211+4020-0x2197))
<operator>.cast (char)(0x1417+2717-0x1e83)
<operator>.subtraction 0x301+3147-0xf1c
<operator>.addition 0x2c0+954
<operator>.cast (char)(0xc35+3810-0x1ae6)
<operator>.subtraction 0xb01+2149-0x1338
<operator>.greaterThan ReplacementFor_wp[i].ReplacementFor_b>(0x14bf+4271-0x256d)
<operator>.subtraction ReplacementFor_wp[i].\012ReplacementFor_b-(0xa91+2462-0x142e)
<operator>.subtraction 0x99f+4377-0x1ab7
<operator>.conditional ReplacementFor_a[i][\012ReplacementFor_j]==((char)(0xe4c+2375-0x1762))?(0x241+8056-0x21b8):\012(0x113b+1705-0x17e4)
<operator>.addition 0xc1f+1553
scanf scanf("\x25\x63",&ReplacementFor_a[i][ReplacementFor_j])
<operator>.subtraction 0x4fd+8571-0x2677
<operator>.cast (char)(0x1211+4020-0x2197)
<operator>.subtraction 0x1417+2717-0x1e83
<operator>.addition 0x301+3147
<operator>.subtraction 0xc35+3810-0x1ae6
<operator>.addition 0xb01+2149
<operator>.subtraction 0x14bf+4271-0x256d
<operator>.subtraction 0xa91+2462-0x142e
<operator>.addition 0x99f+4377
<operator>.equals ReplacementFor_a[i][\012ReplacementFor_j]==((char)(0xe4c+2375-0x1762))
<operator>.subtraction 0x241+8056-0x21b8
<operator>.subtraction 0x113b+1705-0x17e4
<operator>.addition 0x4fd+8571
<operator>.subtraction 0x1211+4020-0x2197
<operator>.addition 0x1417+2717
<operator>.addition 0xc35+3810
<operator>.addition 0x14bf+4271
<operator>.addition 0xa91+2462
<operator>.cast (char)(0xe4c+2375-0x1762)
<operator>.addition 0x241+8056
<operator>.addition 0x113b+1705
<operator>.addition 0x1211+4020
<operator>.subtraction 0xe4c+2375-0x1762
<operator>.addition 0xe4c+2375
<operator>.sizeOf sizeof(\012ReplacementFor_wp)
<operator>.sizeOf sizeof(\012ReplacementFor_owp)
<operator>.sizeOf sizeof(\012ReplacementFor_oowp)
<operator>.addressOf &ReplacementFor_n
<operator>.fieldAccess ReplacementFor_owp[i].\012ReplacementFor_b
<operator>.fieldAccess ReplacementFor_owp[i].ReplacementFor_b
<operator>.fieldAccess ReplacementFor_owp\012[i].ReplacementFor_count
<operator>.fieldAccess ReplacementFor_oowp[i].\012ReplacementFor_b
<operator>.fieldAccess ReplacementFor_oowp[i].ReplacementFor_count
<operator>.indirectIndexAccess ReplacementFor_owp[i]
FIELD_IDENTIFIER ReplacementFor_b ReplacementFor_b
<operator>.fieldAccess ReplacementFor_oowp[i].ReplacementFor_b
<operator>.indirectIndexAccess ReplacementFor_owp[i]
FIELD_IDENTIFIER ReplacementFor_b ReplacementFor_b
<operator>.indirectIndexAccess ReplacementFor_owp\012[i]
FIELD_IDENTIFIER ReplacementFor_count ReplacementFor_count
<operator>.indirectIndexAccess ReplacementFor_oowp[i]
FIELD_IDENTIFIER ReplacementFor_b ReplacementFor_b
<operator>.indirectIndexAccess ReplacementFor_oowp[i]
FIELD_IDENTIFIER ReplacementFor_count ReplacementFor_count
<operator>.fieldAccess ReplacementFor_wp[i].ReplacementFor_b
<operator>.fieldAccess ReplacementFor_owp[i].\012ReplacementFor_b
<operator>.fieldAccess ReplacementFor_oowp[i].ReplacementFor_b
<operator>.indirectIndexAccess ReplacementFor_oowp[i]
FIELD_IDENTIFIER ReplacementFor_b ReplacementFor_b
<operator>.indirectIndexAccess ReplacementFor_wp[i]
FIELD_IDENTIFIER ReplacementFor_b ReplacementFor_b
<operator>.fieldAccess ReplacementFor_wp[i]\012.ReplacementFor_b
<operator>.indirectIndexAccess ReplacementFor_owp[i]
FIELD_IDENTIFIER ReplacementFor_b ReplacementFor_b
<operator>.fieldAccess ReplacementFor_owp[i].ReplacementFor_b
<operator>.indirectIndexAccess ReplacementFor_oowp[i]
FIELD_IDENTIFIER ReplacementFor_b ReplacementFor_b
<operator>.fieldAccess ReplacementFor_oowp[i].ReplacementFor_b
<operator>.fieldAccess ReplacementFor_oowp[i].\012ReplacementFor_b
<operator>.indirectIndexAccess ReplacementFor_a[i][ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_a[i][ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_wp[i]
FIELD_IDENTIFIER ReplacementFor_b ReplacementFor_b
<operator>.indirectIndexAccess ReplacementFor_owp[i]
FIELD_IDENTIFIER ReplacementFor_b ReplacementFor_b
<operator>.indirectIndexAccess ReplacementFor_oowp[i]
FIELD_IDENTIFIER ReplacementFor_b ReplacementFor_b
<operator>.fieldAccess ReplacementFor_wp[i].ReplacementFor_b
<operator>.fieldAccess ReplacementFor_owp[i].ReplacementFor_b
<operator>.cast (float)ReplacementFor_oowp[i].ReplacementFor_a
<operator>.indirectIndexAccess ReplacementFor_oowp[i]
FIELD_IDENTIFIER ReplacementFor_b ReplacementFor_b
<operator>.indirectIndexAccess ReplacementFor_a[i][ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_a[i]
UNKNOWN char char
<operator>.fieldAccess ReplacementFor_wp[i].ReplacementFor_b
<operator>.indirectIndexAccess ReplacementFor_a[i][ReplacementFor_j]
<operator>.fieldAccess ReplacementFor_x.ReplacementFor_b
<operator>.fieldAccess ReplacementFor_x.\012ReplacementFor_a
<operator>.addressOf &ReplacementFor_owp[ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_owp[ReplacementFor_j]
<operator>.fieldAccess ReplacementFor_owp[\012ReplacementFor_j].ReplacementFor_count
<operator>.indirectIndexAccess ReplacementFor_a[i]
UNKNOWN char char
<operator>.addressOf &ReplacementFor_oowp[i]
<operator>.indirectIndexAccess ReplacementFor_oowp[i]
<operator>.indirectIndexAccess ReplacementFor_owp[ReplacementFor_j]
<operator>.fieldAccess ReplacementFor_oowp[i].ReplacementFor_count
<operator>.cast (float)ReplacementFor_wp[i].\012ReplacementFor_a
<operator>.indirectIndexAccess ReplacementFor_wp[i]
FIELD_IDENTIFIER ReplacementFor_b ReplacementFor_b
<operator>.cast (float)\012ReplacementFor_owp[i].ReplacementFor_a
<operator>.indirectIndexAccess ReplacementFor_owp[i]
FIELD_IDENTIFIER ReplacementFor_b ReplacementFor_b
UNKNOWN float float
<operator>.fieldAccess ReplacementFor_oowp[i].ReplacementFor_a
<operator>.indirectIndexAccess ReplacementFor_a[i][ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_a[i]
UNKNOWN char char
<operator>.indirectIndexAccess ReplacementFor_wp[i]
FIELD_IDENTIFIER ReplacementFor_b ReplacementFor_b
<operator>.indirectIndexAccess ReplacementFor_a[i][ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_a[i]
UNKNOWN char char
FIELD_IDENTIFIER ReplacementFor_b ReplacementFor_b
FIELD_IDENTIFIER ReplacementFor_a ReplacementFor_a
<operator>.fieldAccess ReplacementFor_wp[i].ReplacementFor_a
<operator>.indirectIndexAccess ReplacementFor_owp[ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_owp[\012ReplacementFor_j]
FIELD_IDENTIFIER ReplacementFor_count ReplacementFor_count
<operator>.indirectIndexAccess ReplacementFor_oowp[i]
<operator>.indirectIndexAccess ReplacementFor_oowp[i]
FIELD_IDENTIFIER ReplacementFor_count ReplacementFor_count
UNKNOWN float float
<operator>.fieldAccess ReplacementFor_wp[i].\012ReplacementFor_a
UNKNOWN float float
<operator>.fieldAccess ReplacementFor_owp[i].ReplacementFor_a
<operator>.indirectIndexAccess ReplacementFor_oowp[i]
FIELD_IDENTIFIER ReplacementFor_a ReplacementFor_a
<operator>.indirectIndexAccess ReplacementFor_a[i][ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_a[i]
UNKNOWN char char
<operator>.indirectIndexAccess ReplacementFor_a[i]
UNKNOWN char char
<operator>.fieldAccess ReplacementFor_wp[i].ReplacementFor_a
<operator>.fieldAccess ReplacementFor_wp[i].ReplacementFor_b
<operator>.fieldAccess ReplacementFor_wp[i].\012ReplacementFor_b
<operator>.indirectIndexAccess ReplacementFor_wp[i]
FIELD_IDENTIFIER ReplacementFor_a ReplacementFor_a
<operator>.indirectIndexAccess ReplacementFor_wp[i]
FIELD_IDENTIFIER ReplacementFor_a ReplacementFor_a
<operator>.indirectIndexAccess ReplacementFor_owp[i]
FIELD_IDENTIFIER ReplacementFor_a ReplacementFor_a
<operator>.addressOf &ReplacementFor_a[i][ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_a[i]
UNKNOWN char char
<operator>.indirectIndexAccess ReplacementFor_wp[i]
FIELD_IDENTIFIER ReplacementFor_a ReplacementFor_a
<operator>.indirectIndexAccess ReplacementFor_wp[i]
FIELD_IDENTIFIER ReplacementFor_b ReplacementFor_b
<operator>.indirectIndexAccess ReplacementFor_wp[i]
FIELD_IDENTIFIER ReplacementFor_b ReplacementFor_b
<operator>.indirectIndexAccess ReplacementFor_a[i][\012ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_a[i][ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_a[i]
UNKNOWN char char
<operator>.indirectIndexAccess ReplacementFor_a[i]
>>>PDG&280 0->2 0->4 0->5 0->6 0->8 0->9 0->10 0->11 0->12 0->13 0->14 0->15 0->16 0->17 0->18 0->19 0->20 0->21 0->22 0->23 0->24 0->25 0->31 0->34 0->35 0->36 0->37 0->38 0->39 0->40 0->41 0->42 0->43 0->44 0->45 0->49 0->51 0->54 0->55 0->56 0->62 0->63 0->64 0->68 0->69 0->71 0->72 0->73 0->76 0->77 0->79 0->82 0->84 0->87 0->88 0->89 0->90 0->91 0->92 0->95 0->96 0->101 0->102 0->104 0->106 0->107 0->108 0->109 0->110 0->114 0->119 0->123 0->124 0->126 0->129 0->131 0->133 0->135 0->136 0->137 0->138 0->139 0->140 0->141 0->143 0->144 0->145 0->146 0->147 0->148 0->149 0->150 0->152 0->153 0->154 0->155 0->156 2->1 2->4 3->1 4->1 4->1 4->1 4->4 4->5 4->5 4->8 4->9 4->10 4->11 4->12 4->12 4->13 4->15 4->17 4->19 4->23 4->24 4->25 4->26 4->28 4->29 4->31 4->31 4->32 4->36 4->37 4->38 4->43 4->49 4->51 4->54 4->55 4->56 4->62 4->64 4->68 4->69 4->157 4->158 4->159 4->160 5->1 5->4 6->1 6->1 6->3 7->1 7->1 7->4 8->1 8->1 8->1 9->1 9->1 9->1 9->82 9->85 10->1 10->1 10->1 10->85 11->1 11->13 11->15 11->17 11->19 11->39 11->41 11->44 12->1 12->1 13->13 13->14 13->14 13->15 13->27 13->50 13->63 13->76 13->161 13->166 13->167 13->168 13->180 13->181 14->1 14->13 15->15 15->16 15->16 15->17 15->39 15->39 15->41 15->52 15->53 15->77 15->79 15->96 15->101 15->102 16->1 16->15 17->1 17->17 17->18 17->18 17->19 17->30 17->162 17->163 17->169 17->170 17->171 17->172 18->1 18->17 19->1 19->1 19->1 19->11 19->13 19->19 19->20 19->20 19->33 19->34 19->44 19->44 19->46 19->47 19->48 19->57 19->61 19->71 19->72 19->73 19->74 19->75 19->84 19->87 19->89 19->91 19->93 19->94 19->95 19->104 19->109 19->110 19->164 19->165 19->173 19->174 19->175 19->176 19->177 19->178 19->179 19->182 19->183 19->185 19->186 19->188 19->189 19->191 19->200 19->201 19->202 19->203 19->204 19->221 19->222 19->223 19->224 19->225 19->226 19->227 19->228 19->246 19->247 19->248 19->249 19->250 19->251 19->262 19->263 19->264 19->265 20->1 20->19 22->1 22->7 22->7 23->1 23->8 23->8 24->1 24->9 24->9 25->1 25->10 25->10 26->1 26->1 26->13 27->1 27->1 28->1 28->1 28->15 29->1 29->1 29->17 30->1 31->1 32->1 32->1 32->19 33->1 33->75 34->1 34->1 39->39 39->40 39->40 39->41 39->65 39->66 39->97 39->99 39->111 39->114 39->120 39->124 39->132 39->133 39->145 39->192 39->206 39->207 39->266 39->276 39->279 40->1 40->39 41->1 41->1 41->15 41->41 41->42 41->67 41->102 41->102 42->1 42->41 43->1 43->12 43->12 43->31 43->31 44->1 44->1 44->19 44->44 44->45 44->45 44->70 44->105 44->119 44->131 44->193 44->215 44->216 45->1 45->44 46->1 46->1 46->58 46->88 46->93 46->106 46->184 46->194 46->195 47->1 47->1 47->59 47->90 47->107 47->187 47->196 47->197 48->1 48->1 48->60 48->92 48->108 48->190 48->198 48->199 49->1 49->26 49->26 50->1 50->27 51->1 51->28 51->28 52->1 52->1 52->39 53->1 53->1 53->41 54->1 54->29 54->29 56->1 56->32 56->32 57->1 57->1 57->44 58->1 58->1 59->1 59->1 59->94 60->1 60->1 61->1 61->1 63->1 63->27 63->27 63->50 63->50 65->1 65->1 65->1 66->1 66->1 66->1 66->70 66->78 66->98 66->100 66->100 66->103 66->112 66->121 66->125 66->132 66->137 66->148 66->208 66->232 66->233 66->234 66->255 66->256 67->1 67->1 67->1 67->80 67->81 67->82 67->83 67->117 67->118 67->127 67->130 67->139 67->142 67->149 67->151 67->155 67->156 67->210 67->211 67->212 67->213 67->214 67->237 67->238 67->239 67->240 67->241 67->242 67->258 67->260 67->261 67->271 67->272 67->275 67->277 67->278 70->1 70->1 70->1 70->66 70->85 70->86 70->98 70->103 70->112 70->121 70->132 70->217 70->218 70->219 70->220 70->243 70->244 70->245 71->1 71->46 71->46 72->1 72->47 72->47 73->1 73->48 73->48 74->1 74->1 75->1 75->34 75->34 75->61 75->61 77->1 77->52 77->52 78->1 79->1 79->53 79->53 80->1 80->1 80->82 81->1 81->1 81->82 82->1 82->1 82->1 82->1 82->9 82->85 82->85 83->1 84->1 84->57 84->57 85->1 85->1 85->1 85->1 85->9 85->10 85->82 86->1 86->33 86->85 88->1 88->58 88->58 90->1 90->59 90->59 92->1 92->60 92->60 93->1 93->34 93->34 93->61 93->61 93->74 93->74 94->1 94->34 94->34 94->61 94->61 94->74 94->74 95->1 95->75 95->75 97->1 97->1 97->65 97->65 97->98 97->113 97->123 97->136 97->205 97->230 97->231 98->1 98->65 98->65 98->66 99->1 100->1 100->1 100->1 100->66 100->70 100->98 100->103 100->112 100->115 100->121 100->132 100->257 100->269 100->270 102->16 102->42 102->67 102->67 102->103 102->116 102->126 102->138 102->209 102->235 102->236 103->1 103->1 103->66 103->67 103->67 103->70 103->98 103->112 103->121 103->132 105->1 109->1 109->93 109->93 110->1 110->94 110->94 111->1 111->1 111->97 111->97 111->112 111->122 111->135 111->147 111->229 111->253 111->254 112->1 112->66 112->97 112->97 112->98 113->1 114->1 114->66 114->66 114->99 114->99 115->1 116->1 117->1 117->1 117->1 118->1 118->81 118->81 119->1 119->70 119->70 119->105 119->105 120->1 120->111 120->121 120->134 120->146 120->154 120->252 120->267 120->268 121->1 121->66 121->98 121->111 121->111 121->112 122->1 123->1 123->98 123->98 123->113 123->113 125->1 126->1 126->103 126->103 126->116 126->116 127->1 127->128 127->129 127->140 127->141 127->150 127->259 127->273 127->274 128->1 128->80 128->80 128->117 128->117 129->1 129->80 129->80 129->117 129->117 130->1 130->1 130->1 132->1 132->66 132->70 132->98 132->100 132->103 132->112 132->120 132->121 133->1 133->120 133->120 134->1 135->1 135->112 135->112 135->122 135->122 137->1 137->100 137->100 137->125 137->125 139->1 139->127 139->127 140->1 140->128 140->128 142->1 142->1 142->143 142->144 142->152 142->153 143->1 143->118 143->118 143->130 143->130 144->1 144->118 144->118 144->130 144->130 146->1 146->121 146->121 146->134 146->134 151->1 155->1 155->142 155->142 155->151 155->151
>>>Token int main ( ) { int ReplacementFor_n , i , ReplacementFor_j , ReplacementFor_k , l ; char ReplacementFor_a [ ( 0xe00 + 3901 - 0x1cd9 ) ] [ ( 0x708 + 1769 - 0xd8d ) ] ; struct ReplacementFor_fr ReplacementFor_wp [ ( 0xf0c + 6218 - 0x26f2 ) ] , ReplacementFor_owp [ ( 0x85f + 6270 - 0x2079 ) ] , ReplacementFor_oowp [ ( 0x9d + 9646 - 0x25e7 ) ] , ReplacementFor_x ; scanf ( " \x25 \x64 " , & ReplacementFor_k ) ; for ( l = ( 0x1514 + 1967 - 0x1cc3 ) ; l < ReplacementFor_k ; ++ l ) { memset ( ReplacementFor_wp , ( 0x4f0 + 8014 - 0x243e ) , sizeof ( ReplacementFor_wp ) ) ; memset ( ReplacementFor_owp , ( 0xa86 + 3144 - 0x16ce ) , sizeof ( ReplacementFor_owp ) ) ; memset ( ReplacementFor_oowp , ( 0x2fc + 8166 - 0x22e2 ) , sizeof ( ReplacementFor_oowp ) ) ; scanf ( " \x25 \x64 " , & ReplacementFor_n ) ; for ( i = ( 0x7f2 + 7180 - 0x23fe ) ; i < ReplacementFor_n ; ++ i ) { ReplacementFor_owp [ i ] . ReplacementFor_b = ReplacementFor_oowp [ i ] . ReplacementFor_b = ( 0x2b1 + 8614 - 0x2456 ) ; } for ( i = ( 0xa91 + 6406 - 0x2397 ) ; i < ReplacementFor_n ; ++ i ) { for ( ReplacementFor_j = ( 0x138d + 2385 - 0x1cde ) ; ReplacementFor_j < ReplacementFor_n ; ++ ReplacementFor_j ) { while ( scanf ( " \x25 \x63 " , & ReplacementFor_a [ i ] [ ReplacementFor_j ] ) == ( 0x4fd + 8571 - 0x2677 ) && ReplacementFor_a [ i ] [ ReplacementFor_j ] != ( ( char ) ( 0x1211 + 4020 - 0x2197 ) ) && ReplacementFor_a [ i ] [ ReplacementFor_j ] != ( ( char ) ( 0x1417 + 2717 - 0x1e83 ) ) && ReplacementFor_a [ i ] [ ReplacementFor_j ] != ( ( char ) ( 0x301 + 3147 - 0xf1c ) ) ) ; if ( ReplacementFor_a [ i ] [ ReplacementFor_j ] != ( ( char ) ( 0x2c0 + 954 - 0x64c ) ) ) { ++ ReplacementFor_wp [ i ] . ReplacementFor_b ; if ( ReplacementFor_a [ i ] [ ReplacementFor_j ] == ( ( char ) ( 0xc35 + 3810 - 0x1ae6 ) ) ) { ++ ReplacementFor_wp [ i ] . ReplacementFor_a ; } } } for ( ReplacementFor_j = ( 0x1857 + 2264 - 0x212f ) ; ReplacementFor_j < ReplacementFor_n ; ++ ReplacementFor_j ) { if ( i != ReplacementFor_j && ReplacementFor_a [ i ] [ ReplacementFor_j ] != ( ( char ) ( 0xb01 + 2149 - 0x1338 ) ) ) { ReplacementFor_x . ReplacementFor_b = ReplacementFor_wp [ i ] . ReplacementFor_b > ( 0x14bf + 4271 - 0x256d ) ? ReplacementFor_wp [ i ] . ReplacementFor_b - ( 0xa91 + 2462 - 0x142e ) : ( 0x99f + 4377 - 0x1ab7 ) ; ReplacementFor_x . ReplacementFor_a = ReplacementFor_wp [ i ] . ReplacementFor_a - ( ReplacementFor_a [ i ] [ ReplacementFor_j ] == ( ( char ) ( 0xe4c + 2375 - 0x1762 ) ) ? ( 0x241 + 8056 - 0x21b8 ) : ( 0x113b + 1705 - 0x17e4 ) ) ; ReplacementFor_sum ( & ReplacementFor_owp [ ReplacementFor_j ] , ReplacementFor_owp [ ReplacementFor_j ] , ReplacementFor_x ) ; ++ ReplacementFor_owp [ ReplacementFor_j ] . ReplacementFor_count ; } } } for ( i = ( 0x3d7 + 3087 - 0xfe6 ) ; i < ReplacementFor_n ; ++ i ) { ReplacementFor_owp [ i ] . ReplacementFor_b *= ReplacementFor_owp [ i ] . ReplacementFor_count ; } printf ( " \x43 \x61 \x73 \x65 \x20 \x23 \x25 \x64 \x3a " " \n " , l + ( 0x472 + 6809 - 0x1f0a ) ) ; for ( i = ( 0xed7 + 3559 - 0x1cbe ) ; i < ReplacementFor_n ; ++ i ) { for ( ReplacementFor_j = ( 0x201 + 4231 - 0x1288 ) ; ReplacementFor_j < ReplacementFor_n ; ++ ReplacementFor_j ) { if ( ReplacementFor_a [ i ] [ ReplacementFor_j ] != ( ( char ) ( 0xc1f + 1553 - 0x1202 ) ) ) { ReplacementFor_sum ( & ReplacementFor_oowp [ i ] , ReplacementFor_oowp [ i ] , ReplacementFor_owp [ ReplacementFor_j ] ) ; ++ ReplacementFor_oowp [ i ] . ReplacementFor_count ; } } ReplacementFor_oowp [ i ] . ReplacementFor_b *= ReplacementFor_oowp [ i ] . ReplacementFor_count ; if ( ReplacementFor_wp [ i ] . ReplacementFor_b == ( 0x544 + 8202 - 0x254e ) ) { ReplacementFor_wp [ i ] . ReplacementFor_b = ( 0x13e7 + 4811 - 0x26b1 ) ; } if ( ReplacementFor_owp [ i ] . ReplacementFor_b == ( 0xf64 + 5182 - 0x23a2 ) ) { ReplacementFor_owp [ i ] . ReplacementFor_b = ( 0x1b77 + 2587 - 0x2591 ) ; } if ( ReplacementFor_oowp [ i ] . ReplacementFor_b == ( 0x514 + 1477 - 0xad9 ) ) { ReplacementFor_oowp [ i ] . ReplacementFor_b = ( 0x2c2 + 7848 - 0x2169 ) ; } printf ( " \x25 \x2e \x36 \x66 " " \n " , 0.25 * ( float ) ReplacementFor_wp [ i ] . ReplacementFor_a / ReplacementFor_wp [ i ] . ReplacementFor_b + 0.5 * ( float ) ReplacementFor_owp [ i ] . ReplacementFor_a / ReplacementFor_owp [ i ] . ReplacementFor_b + 0.25 * ( float ) ReplacementFor_oowp [ i ] . ReplacementFor_a / ReplacementFor_oowp [ i ] . ReplacementFor_b ) ; } } return ( 0x1492 + 4022 - 0x2448 ) ; }
>>>Func
METHOD ReplacementFor_addMemInfo
METHOD_RETURN ReplacementFor_mem_info
PARAM ReplacementFor_mem_info*\012ReplacementFor_memoryInfo
PARAM void*ReplacementFor_ptrToReturn
PARAM size_t \012ReplacementFor_bytes
PARAM int line
PARAM const char*ReplacementFor_filename
PARAM const char*\012ReplacementFor_functionName
<operator>.assignment *ReplacementFor_newMemInfo=(\012ReplacementFor_mem_info*)malloc(sizeof(ReplacementFor_mem_info))
<operator>.assignment ReplacementFor_newMemInfo->\012ReplacementFor_ptr=ReplacementFor_ptrToReturn
<operator>.assignment ReplacementFor_newMemInfo->\012ReplacementFor_bytes=ReplacementFor_bytes
<operator>.assignment ReplacementFor_newMemInfo->line=line
<operator>.assignment ReplacementFor_newMemInfo->ReplacementFor_fileName=ReplacementFor_filename
<operator>.assignment ReplacementFor_newMemInfo->ReplacementFor_functionName=\012ReplacementFor_functionName
<operator>.assignment ReplacementFor_newMemInfo->next=\012ReplacementFor_memoryInfo
<operator>.assignment ReplacementFor_newMemInfo->ReplacementFor_previous=\012NULL
RETURN return \012ReplacementFor_newMemInfo; return \012ReplacementFor_newMemInfo;
<operator>.logicalNot !\012ReplacementFor_newMemInfo
IDENTIFIER ReplacementFor_memoryInformation if (ReplacementFor_memoryInformation)
IDENTIFIER ReplacementFor_newMemInfo return \012ReplacementFor_newMemInfo;
<operator>.cast (\012ReplacementFor_mem_info*)malloc(sizeof(ReplacementFor_mem_info))
RETURN return NULL; return NULL;
<operator>.assignment ReplacementFor_memoryInformation->\012ReplacementFor_previous=ReplacementFor_newMemInfo
IDENTIFIER NULL return NULL;
<operator>.sizeOf sizeof(ReplacementFor_mem_info)
<operator>.indirectFieldAccess ReplacementFor_newMemInfo->\012ReplacementFor_ptr
<operator>.indirectFieldAccess ReplacementFor_newMemInfo->\012ReplacementFor_bytes
<operator>.indirectFieldAccess ReplacementFor_newMemInfo->line
<operator>.indirectFieldAccess ReplacementFor_newMemInfo->ReplacementFor_fileName
<operator>.indirectFieldAccess ReplacementFor_newMemInfo->ReplacementFor_functionName
<operator>.indirectFieldAccess ReplacementFor_newMemInfo->next
<operator>.indirectFieldAccess ReplacementFor_newMemInfo->ReplacementFor_previous
FIELD_IDENTIFIER ReplacementFor_ptr ReplacementFor_ptr
FIELD_IDENTIFIER ReplacementFor_bytes ReplacementFor_bytes
FIELD_IDENTIFIER line line
FIELD_IDENTIFIER ReplacementFor_fileName ReplacementFor_fileName
FIELD_IDENTIFIER ReplacementFor_functionName ReplacementFor_functionName
FIELD_IDENTIFIER next next
FIELD_IDENTIFIER ReplacementFor_previous ReplacementFor_previous
<operator>.indirectFieldAccess ReplacementFor_memoryInformation->\012ReplacementFor_previous
FIELD_IDENTIFIER ReplacementFor_previous ReplacementFor_previous
>>>PDG&41 0->2 0->3 0->4 0->5 0->6 0->7 0->9 0->10 0->11 0->12 0->13 0->14 0->15 0->17 0->18 0->19 0->21 0->22 0->23 2->1 2->14 3->1 3->9 4->1 4->10 5->1 5->11 6->1 6->12 7->1 7->13 8->1 8->1 8->17 15->1 16->1 17->1 17->1 17->9 17->10 17->11 17->12 17->13 17->14 17->15 17->16 17->19 17->21 17->22 17->22 17->25 17->26 17->27 17->28 17->29 17->30 17->31 17->32 17->33 17->34 17->35 17->36 17->37 17->38 17->39 17->40 19->16 20->1 21->1 23->21 24->1
>>>Token ReplacementFor_mem_info * ReplacementFor_addMemInfo ( ReplacementFor_mem_info * ReplacementFor_memoryInfo , void * ReplacementFor_ptrToReturn , size_t ReplacementFor_bytes , int line , const char * ReplacementFor_filename , const char * ReplacementFor_functionName ) { ReplacementFor_mem_info * ReplacementFor_newMemInfo = ( ReplacementFor_mem_info * ) malloc ( sizeof ( ReplacementFor_mem_info ) ) ; if ( ! ReplacementFor_newMemInfo ) { return NULL ; } ReplacementFor_newMemInfo -> ReplacementFor_ptr = ReplacementFor_ptrToReturn ; ReplacementFor_newMemInfo -> ReplacementFor_bytes = ReplacementFor_bytes ; ReplacementFor_newMemInfo -> line = line ; ReplacementFor_newMemInfo -> ReplacementFor_fileName = ReplacementFor_filename ; ReplacementFor_newMemInfo -> ReplacementFor_functionName = ReplacementFor_functionName ; ReplacementFor_newMemInfo -> next = ReplacementFor_memoryInfo ; ReplacementFor_newMemInfo -> ReplacementFor_previous = NULL ; if ( ReplacementFor_memoryInformation ) ReplacementFor_memoryInformation -> ReplacementFor_previous = ReplacementFor_newMemInfo ; return ReplacementFor_newMemInfo ; }
>>>Func
METHOD main
METHOD_RETURN int
<operator>.assignment ReplacementFor_ifp=fopen(\012"\x41\x2d\x73\x6d\x61\x6c\x6c\x2d\x61\x74\x74\x65\x6d\x70\x74\x30\x2e\x69\x6e",\012"\x72")
<operator>.assignment ReplacementFor_ofp=fopen("\x6f\x75\x74\x70\x75\x74\x31\x2e\x74\x78\x74",\012"\x77")
fscanf fscanf(ReplacementFor_ifp,\012"\x25\x64",&t)
fclose fclose(ReplacementFor_ofp)
fclose fclose(ReplacementFor_ifp)
<operator>.lessThan i<t
<operator>.postIncrement i++
fopen fopen(\012"\x41\x2d\x73\x6d\x61\x6c\x6c\x2d\x61\x74\x74\x65\x6d\x70\x74\x30\x2e\x69\x6e",\012"\x72")
fopen fopen("\x6f\x75\x74\x70\x75\x74\x31\x2e\x74\x78\x74",\012"\x77")
<operator>.assignment i=(0x8f9+3300-0x15dd)
fscanf fscanf(ReplacementFor_ifp,\012"\x25\x64\x20\x25\x64\x20\x25\x64",&ReplacementFor_n,&ReplacementFor_pd,&\012ReplacementFor_pg)
<operator>.assignment ReplacementFor_j=ReplacementFor_gcd(\012ReplacementFor_pd (0x900+7721-0x26c5))
<operator>.assignment ReplacementFor_d=(0x1b6b+220-0x1be3)/\012ReplacementFor_j
<operator>.logicalOr (ReplacementFor_pg==(0x14e0+2962-0x200e)&&\012ReplacementFor_pd!=(0x1e85+2194-0x26b3))||(ReplacementFor_pg==\012(0x1829+298-0x1953)&&ReplacementFor_pd!=(0x54f+1830-0xc75))
<operator>.logicalAnd ReplacementFor_pg==(0x1c14+982-0x1fea)&&\012ReplacementFor_pd==(0x1061+3591-0x1e68)
<operator>.lessEqualsThan ReplacementFor_d<=ReplacementFor_n
<operator>.subtraction 0x8f9+3300-0x15dd
fprintf fprintf(\012ReplacementFor_ofp \012"\x43\x61\x73\x65\x20\x23\x25\x64\x3a\x20\x42\x72\x6f\x6b\x65\x6e" "\n" i+\012(0x333+5758-0x19b0))
fprintf fprintf(ReplacementFor_ofp \012"\x43\x61\x73\x65\x20\x23\x25\x64\x3a\x20\x50\x6f\x73\x73\x69\x62\x6c\x65" "\n" \012i+(0xba6+6344-0x246d))
ReplacementFor_gcd ReplacementFor_gcd(\012ReplacementFor_pd (0x900+7721-0x26c5))
<operator>.division (0x1b6b+220-0x1be3)/\012ReplacementFor_j
fprintf fprintf(\012ReplacementFor_ofp \012"\x43\x61\x73\x65\x20\x23\x25\x64\x3a\x20\x50\x6f\x73\x73\x69\x62\x6c\x65" "\n" \012i+(0xd13+315-0xe4d))
<operator>.addition 0x8f9+3300
<operator>.logicalAnd ReplacementFor_pg==(0x14e0+2962-0x200e)&&\012ReplacementFor_pd!=(0x1e85+2194-0x26b3)
<operator>.logicalAnd ReplacementFor_pg==\012(0x1829+298-0x1953)&&ReplacementFor_pd!=(0x54f+1830-0xc75)
<operator>.equals ReplacementFor_pg==(0x1c14+982-0x1fea)
<operator>.equals ReplacementFor_pd==(0x1061+3591-0x1e68)
<operator>.subtraction 0x900+7721-0x26c5
<operator>.subtraction 0x1b6b+220-0x1be3
fprintf fprintf(ReplacementFor_ofp \012"\x43\x61\x73\x65\x20\x23\x25\x64\x3a\x20\x42\x72\x6f\x6b\x65\x6e" "\n" i+\012(0x43c+4345-0x1534))
<operator>.equals ReplacementFor_pg==(0x14e0+2962-0x200e)
<operator>.notEquals ReplacementFor_pd!=(0x1e85+2194-0x26b3)
<operator>.equals ReplacementFor_pg==\012(0x1829+298-0x1953)
<operator>.notEquals ReplacementFor_pd!=(0x54f+1830-0xc75)
<operator>.addition i+\012(0x333+5758-0x19b0)
<operator>.subtraction 0x1c14+982-0x1fea
<operator>.subtraction 0x1061+3591-0x1e68
<operator>.addition i+(0xba6+6344-0x246d)
<operator>.addition 0x900+7721
<operator>.addition 0x1b6b+220
<operator>.addition i+(0xd13+315-0xe4d)
<operator>.subtraction 0x14e0+2962-0x200e
<operator>.subtraction 0x1e85+2194-0x26b3
<operator>.subtraction 0x1829+298-0x1953
<operator>.subtraction 0x54f+1830-0xc75
<operator>.subtraction 0x333+5758-0x19b0
<operator>.addition 0x1c14+982
<operator>.addition 0x1061+3591
<operator>.subtraction 0xba6+6344-0x246d
<operator>.subtraction 0xd13+315-0xe4d
<operator>.addition i+\012(0x43c+4345-0x1534)
<operator>.addition 0x14e0+2962
<operator>.addition 0x1e85+2194
<operator>.addition 0x1829+298
<operator>.addition 0x54f+1830
<operator>.addition 0x333+5758
<operator>.addition 0xba6+6344
<operator>.addition 0xd13+315
<operator>.subtraction 0x43c+4345-0x1534
<operator>.addition 0x43c+4345
<operator>.addressOf &ReplacementFor_n
<operator>.addressOf &ReplacementFor_pd
<operator>.addressOf &\012ReplacementFor_pg
>>>PDG&65 0->4 0->5 0->6 0->7 0->8 0->9 0->10 0->12 0->17 0->18 0->19 0->20 0->21 0->22 0->23 0->24 0->27 0->28 0->29 0->30 0->31 0->32 0->33 0->34 0->35 0->36 0->37 0->38 0->39 0->40 0->41 0->42 0->43 0->44 0->45 0->46 0->47 0->48 0->49 0->50 0->51 0->52 0->53 0->54 0->55 0->56 0->57 0->58 0->59 0->60 0->61 2->1 2->1 2->4 3->1 3->1 3->5 3->19 3->20 3->23 3->31 4->1 4->1 4->6 4->7 4->12 5->1 5->1 6->1 6->1 7->1 7->1 7->1 7->7 7->8 7->8 7->12 7->15 7->19 7->20 7->23 7->25 7->31 7->32 7->36 7->39 7->42 7->43 7->52 7->53 7->62 7->63 7->64 8->1 8->7 9->2 9->2 10->3 10->3 11->1 11->1 11->7 12->1 12->1 12->1 12->1 12->6 12->17 12->21 12->27 12->28 12->32 12->33 12->34 12->35 13->1 13->1 13->22 14->1 14->1 14->17 15->1 15->1 15->1 15->16 15->19 15->27 15->36 15->37 15->47 15->48 15->57 16->1 16->1 16->1 16->13 16->14 16->17 16->20 16->21 16->22 16->29 16->30 16->39 16->40 16->41 16->50 16->58 17->1 17->1 17->1 17->12 17->23 17->31 17->42 17->51 17->52 17->59 17->60 17->61 18->1 18->11 18->11 19->1 19->1 19->5 19->20 19->23 19->31 20->1 20->1 20->5 20->19 20->23 20->31 21->1 21->1 21->12 21->13 21->13 21->28 21->33 21->35 22->1 22->1 22->14 22->14 23->1 23->1 23->5 23->19 23->20 23->31 25->1 25->1 25->15 25->15 25->26 25->34 25->45 25->55 26->1 26->1 26->15 26->15 27->1 27->1 27->12 27->16 27->16 27->28 27->32 27->38 27->49 28->1 28->1 28->12 28->16 28->16 28->21 28->33 28->35 29->1 29->21 29->21 30->1 30->22 30->22 31->1 31->1 31->5 31->19 31->20 31->23 32->1 32->1 32->12 32->25 32->25 32->27 32->33 32->34 32->44 32->54 33->1 33->1 33->12 33->21 33->25 33->25 33->28 33->35 34->1 34->1 34->12 34->26 34->26 34->27 34->32 34->35 34->46 34->56 35->1 35->1 35->12 35->21 35->26 35->26 35->28 35->33 36->1 37->1 37->27 37->27 38->1 38->28 38->28 39->1 42->1 43->1 43->32 43->32 44->1 44->33 44->33 45->1 45->34 45->34 46->1 46->35 46->35 47->1 47->19 47->19 47->36 47->36 50->1 50->20 50->20 50->39 50->39 51->1 51->23 51->23 51->42 51->42 52->1 60->1 60->31 60->31 60->52 60->52
>>>Token int main ( ) { FILE * ReplacementFor_ifp , * ReplacementFor_ofp ; ReplacementFor_ifp = fopen ( " \x41 \x2d \x73 \x6d \x61 \x6c \x6c \x2d \x61 \x74 \x74 \x65 \x6d \x70 \x74 \x30 \x2e \x69 \x6e " , " \x72 " ) ; ReplacementFor_ofp = fopen ( " \x6f \x75 \x74 \x70 \x75 \x74 \x31 \x2e \x74 \x78 \x74 " , " \x77 " ) ; int i , ReplacementFor_j , ReplacementFor_k , t , ReplacementFor_n , ReplacementFor_pd , ReplacementFor_pg , ReplacementFor_d ; fscanf ( ReplacementFor_ifp , " \x25 \x64 " , & t ) ; for ( i = ( 0x8f9 + 3300 - 0x15dd ) ; i < t ; i ++ ) { fscanf ( ReplacementFor_ifp , " \x25 \x64 \x20 \x25 \x64 \x20 \x25 \x64 " , & ReplacementFor_n , & ReplacementFor_pd , & ReplacementFor_pg ) ; if ( ( ReplacementFor_pg == ( 0x14e0 + 2962 - 0x200e ) && ReplacementFor_pd != ( 0x1e85 + 2194 - 0x26b3 ) ) || ( ReplacementFor_pg == ( 0x1829 + 298 - 0x1953 ) && ReplacementFor_pd != ( 0x54f + 1830 - 0xc75 ) ) ) { fprintf ( ReplacementFor_ofp , " \x43 \x61 \x73 \x65 \x20 \x23 \x25 \x64 \x3a \x20 \x42 \x72 \x6f \x6b \x65 \x6e " " \n " , i + ( 0x333 + 5758 - 0x19b0 ) ) ; continue ; } if ( ReplacementFor_pg == ( 0x1c14 + 982 - 0x1fea ) && ReplacementFor_pd == ( 0x1061 + 3591 - 0x1e68 ) ) { fprintf ( ReplacementFor_ofp , " \x43 \x61 \x73 \x65 \x20 \x23 \x25 \x64 \x3a \x20 \x50 \x6f \x73 \x73 \x69 \x62 \x6c \x65 " " \n " , i + ( 0xba6 + 6344 - 0x246d ) ) ; continue ; } ReplacementFor_j = ReplacementFor_gcd ( ReplacementFor_pd , ( 0x900 + 7721 - 0x26c5 ) ) ; ReplacementFor_d = ( 0x1b6b + 220 - 0x1be3 ) / ReplacementFor_j ; if ( ReplacementFor_d <= ReplacementFor_n ) fprintf ( ReplacementFor_ofp , " \x43 \x61 \x73 \x65 \x20 \x23 \x25 \x64 \x3a \x20 \x50 \x6f \x73 \x73 \x69 \x62 \x6c \x65 " " \n " , i + ( 0xd13 + 315 - 0xe4d ) ) ; else fprintf ( ReplacementFor_ofp , " \x43 \x61 \x73 \x65 \x20 \x23 \x25 \x64 \x3a \x20 \x42 \x72 \x6f \x6b \x65 \x6e " " \n " , i + ( 0x43c + 4345 - 0x1534 ) ) ; } fclose ( ReplacementFor_ofp ) ; fclose ( ReplacementFor_ifp ) ; }
>>>Func
METHOD main
METHOD_RETURN ANY
<operator>.assignment ReplacementFor_fl=\012(0x749+5905-0x1e5a)
<operator>.assignment ReplacementFor_fpi=fopen("\x69\x6e\x2e\x74\x78\x74","\x72")
<operator>.assignment ReplacementFor_fpo=fopen("\x6f\x75\x74\x2e\x74\x78\x74","\x77")
fscanf fscanf(\012ReplacementFor_fpi,"\x25\x64",&t)
<operator>.lessThan i<t
<operator>.postIncrement i++
<operator>.subtraction 0x749+5905-0x1e5a
fopen fopen("\x69\x6e\x2e\x74\x78\x74","\x72")
fopen fopen("\x6f\x75\x74\x2e\x74\x78\x74","\x77")
<operator>.assignment i=(0x12a+410-0x2c4)
<operator>.assignment ReplacementFor_fl=(0x1cf+2529-0xbb0)
fscanf fscanf(ReplacementFor_fpi,"\x25\x64",&\012ReplacementFor_n)
fscanf fscanf(ReplacementFor_fpi,"\x25\x64",&ReplacementFor_pd)
fscanf fscanf(ReplacementFor_fpi,"\x25\x64",&ReplacementFor_pg)
fprintf fprintf(\012ReplacementFor_fpo "\x43\x61\x73\x65\x20\x23\x25\x64\x3a\x20" i+\012(0x22f+685-0x4db))
<operator>.addition 0x749+5905
<operator>.logicalAnd (!ReplacementFor_fl)&&ReplacementFor_j<=ReplacementFor_n
<operator>.postIncrement ReplacementFor_j++
IDENTIFIER ReplacementFor_fl if (ReplacementFor_fl)
<operator>.subtraction 0x12a+410-0x2c4
<operator>.subtraction 0x1cf+2529-0xbb0
<operator>.assignment ReplacementFor_j=\012(0xbc1+3712-0x1a40)
<operator>.addition i+\012(0x22f+685-0x4db)
fprintf fprintf(ReplacementFor_fpo,\012"\x50\x6f\x73\x73\x69\x62\x6c\x65" "\n")
<operator>.addition 0x12a+410
<operator>.addition 0x1cf+2529
<operator>.logicalNot !ReplacementFor_fl
<operator>.lessEqualsThan ReplacementFor_j<=ReplacementFor_n
<operator>.equals (ReplacementFor_j*ReplacementFor_pd)%(0x65d+697-0x8b2)==\012(0xbb3+515-0xdb6)
<operator>.subtraction 0x22f+685-0x4db
fprintf fprintf(ReplacementFor_fpo,\012"\x42\x72\x6f\x6b\x65\x6e" "\n")
<operator>.subtraction 0xbc1+3712-0x1a40
<operator>.assignment ReplacementFor_d=ReplacementFor_j*ReplacementFor_pd/\012(0x19ab+1864-0x208f)
<operator>.addition 0x22f+685
<operator>.addition 0xbc1+3712
<operator>.modulo (ReplacementFor_j*ReplacementFor_pd)%(0x65d+697-0x8b2)
<operator>.subtraction 0xbb3+515-0xdb6
<operator>.equals ReplacementFor_pg==(0x1651+259-0x1754)
<operator>.multiplication ReplacementFor_j*ReplacementFor_pd
<operator>.subtraction 0x65d+697-0x8b2
<operator>.addition 0xbb3+515
<operator>.division ReplacementFor_j*ReplacementFor_pd/\012(0x19ab+1864-0x208f)
<operator>.addition 0x65d+697
<operator>.multiplication ReplacementFor_j*ReplacementFor_pd
<operator>.subtraction 0x19ab+1864-0x208f
<operator>.subtraction 0x1651+259-0x1754
<operator>.equals ReplacementFor_pd==(0xd99+3781-0x1c5e)
<operator>.addition 0x19ab+1864
<operator>.addition 0x1651+259
<operator>.assignment ReplacementFor_fl=(0x846+4763-0x1ae0)
<operator>.equals ReplacementFor_pg==\012(0x1c2+5107-0x1551)
<operator>.subtraction 0xd99+3781-0x1c5e
<operator>.assignment ReplacementFor_fl=(0x12c4+1515-0x18af)
<operator>.addition 0xd99+3781
<operator>.subtraction 0x846+4763-0x1ae0
<operator>.subtraction 0x1c2+5107-0x1551
<operator>.equals ReplacementFor_pd==(0x7f0+5676-0x1db8)
<operator>.assignment ReplacementFor_fl=(0xf61+5165-0x238d)
<operator>.addition 0x846+4763
<operator>.subtraction 0x12c4+1515-0x18af
<operator>.addition 0x1c2+5107
<operator>.assignment ReplacementFor_fl\012=(0x4d2+7931-0x23cc)
<operator>.addition 0x12c4+1515
<operator>.subtraction 0x7f0+5676-0x1db8
<operator>.subtraction 0xf61+5165-0x238d
<operator>.addition 0x7f0+5676
<operator>.subtraction 0x4d2+7931-0x23cc
<operator>.addition 0xf61+5165
<operator>.addition 0x4d2+7931
<operator>.addressOf &\012ReplacementFor_n
<operator>.addressOf &ReplacementFor_pd
<operator>.addressOf &ReplacementFor_pg
>>>PDG&74 0->5 0->6 0->7 0->8 0->9 0->10 0->13 0->14 0->15 0->16 0->17 0->19 0->20 0->21 0->22 0->24 0->25 0->26 0->27 0->28 0->29 0->31 0->32 0->33 0->35 0->36 0->38 0->39 0->40 0->41 0->42 0->44 0->45 0->46 0->47 0->48 0->49 0->50 0->52 0->53 0->55 0->56 0->57 0->58 0->60 0->61 0->62 0->64 0->65 0->66 0->67 0->68 0->69 0->70 2->1 2->1 2->1 3->1 3->1 3->5 4->1 4->1 4->1 4->16 5->1 5->1 5->1 5->6 5->13 6->1 6->1 6->1 6->6 6->7 6->7 6->12 6->13 6->14 6->15 6->16 6->16 6->18 6->22 6->23 6->24 6->24 6->25 6->27 6->28 6->31 6->32 6->33 6->35 6->36 6->71 6->72 6->73 7->1 7->6 8->1 8->2 8->2 9->3 9->3 10->4 10->4 11->1 11->1 11->6 12->1 12->1 12->28 13->1 13->1 13->14 13->29 14->1 14->1 14->15 14->40 14->45 14->48 14->58 15->1 15->1 15->1 15->13 15->39 15->52 16->1 16->1 16->25 16->32 18->1 18->1 18->1 18->18 18->19 18->28 18->30 18->37 18->38 18->40 18->41 18->42 18->44 19->1 19->1 19->29 19->40 21->1 21->11 21->11 22->1 22->12 22->12 23->1 23->1 23->1 23->29 23->40 24->1 25->1 25->1 25->16 28->1 28->18 28->29 29->1 29->1 29->13 29->18 29->18 29->40 30->1 30->1 30->1 30->34 30->39 30->43 30->45 30->46 30->47 30->49 30->50 31->1 31->16 31->16 31->24 31->24 32->1 32->1 32->16 33->1 33->23 33->23 34->1 34->1 34->1 37->1 37->1 37->30 37->30 38->1 38->30 38->30 39->1 39->1 39->1 39->15 39->48 39->52 39->52 39->53 39->55 39->57 39->62 40->1 40->14 40->19 40->37 40->37 40->45 40->45 41->1 41->37 41->37 43->1 43->1 43->34 43->34 45->1 45->14 45->19 45->40 45->43 45->43 45->48 45->58 46->1 46->43 46->43 47->1 47->39 47->39 48->1 48->1 48->1 48->14 48->40 48->51 48->54 48->56 48->60 48->61 48->64 51->1 51->1 51->28 52->1 52->1 52->1 52->15 52->39 52->58 52->59 52->65 52->66 52->67 52->69 53->1 53->48 53->48 54->1 54->1 54->28 56->1 56->51 56->51 57->1 57->52 57->52 58->1 58->1 58->1 58->14 58->40 58->63 58->68 58->70 59->1 59->1 59->28 61->1 61->54 61->54 63->1 63->1 63->28 65->1 65->58 65->58 66->1 66->59 66->59 68->1 68->63 68->63
>>>Token main ( ) { FILE * ReplacementFor_fpi , * ReplacementFor_fpo ; int t , ReplacementFor_pd , ReplacementFor_pg , ReplacementFor_g , ReplacementFor_d , ReplacementFor_k , l , i , ReplacementFor_j , ReplacementFor_nj , ReplacementFor_n , ReplacementFor_fl = ( 0x749 + 5905 - 0x1e5a ) ; ReplacementFor_fpi = fopen ( " \x69 \x6e \x2e \x74 \x78 \x74 " , " \x72 " ) ; ReplacementFor_fpo = fopen ( " \x6f \x75 \x74 \x2e \x74 \x78 \x74 " , " \x77 " ) ; fscanf ( ReplacementFor_fpi , " \x25 \x64 " , & t ) ; for ( i = ( 0x12a + 410 - 0x2c4 ) ; i < t ; i ++ ) { ReplacementFor_fl = ( 0x1cf + 2529 - 0xbb0 ) ; fscanf ( ReplacementFor_fpi , " \x25 \x64 " , & ReplacementFor_n ) ; fscanf ( ReplacementFor_fpi , " \x25 \x64 " , & ReplacementFor_pd ) ; fscanf ( ReplacementFor_fpi , " \x25 \x64 " , & ReplacementFor_pg ) ; for ( ReplacementFor_j = ( 0xbc1 + 3712 - 0x1a40 ) ; ( ! ReplacementFor_fl ) && ReplacementFor_j <= ReplacementFor_n ; ReplacementFor_j ++ ) { if ( ( ReplacementFor_j * ReplacementFor_pd ) % ( 0x65d + 697 - 0x8b2 ) == ( 0xbb3 + 515 - 0xdb6 ) ) { ReplacementFor_d = ReplacementFor_j * ReplacementFor_pd / ( 0x19ab + 1864 - 0x208f ) ; if ( ReplacementFor_pg == ( 0x1651 + 259 - 0x1754 ) ) { if ( ReplacementFor_pd == ( 0xd99 + 3781 - 0x1c5e ) ) ReplacementFor_fl = ( 0x846 + 4763 - 0x1ae0 ) ; else ReplacementFor_fl = ( 0x12c4 + 1515 - 0x18af ) ; } else { if ( ReplacementFor_pg == ( 0x1c2 + 5107 - 0x1551 ) ) { if ( ReplacementFor_pd == ( 0x7f0 + 5676 - 0x1db8 ) ) ReplacementFor_fl = ( 0x4d2 + 7931 - 0x23cc ) ; } else ReplacementFor_fl = ( 0xf61 + 5165 - 0x238d ) ; } } } fprintf ( ReplacementFor_fpo , " \x43 \x61 \x73 \x65 \x20 \x23 \x25 \x64 \x3a \x20 " , i + ( 0x22f + 685 - 0x4db ) ) ; if ( ReplacementFor_fl ) fprintf ( ReplacementFor_fpo , " \x50 \x6f \x73 \x73 \x69 \x62 \x6c \x65 " " \n " ) ; else fprintf ( ReplacementFor_fpo , " \x42 \x72 \x6f \x6b \x65 \x6e " " \n " ) ; } }
>>>Func
METHOD ReplacementFor_simul
METHOD_RETURN void
<operator>.assignment ReplacementFor_rn=(0x3b5+4386-0x14d7)
<operator>.lessThan i<ReplacementFor_n
<operator>.postIncrement i++
<operator>.subtraction 0x3b5+4386-0x14d7
<operator>.assignment i=\012(0x117c+2226-0x1a2e)
<operator>.assignment ReplacementFor_res[\012ReplacementFor_rn++]=ReplacementFor_invoke[i]
<operator>.addition 0x3b5+4386
<operator>.greaterThan ReplacementFor_rn>\012(0x7c9+4504-0x1960)
<operator>.greaterThan ReplacementFor_rn>\012(0x1f5a+178-0x200b)
<operator>.subtraction 0x117c+2226-0x1a2e
<operator>.assignment ReplacementFor_make=ReplacementFor_combine[(int)\012ReplacementFor_res[ReplacementFor_rn-(0xcc8+4097-0x1cc8)]][(int)\012ReplacementFor_res[ReplacementFor_rn-(0xaaf+2047-0x12ac)]]
<operator>.assignment ReplacementFor_opp=ReplacementFor_res[ReplacementFor_rn-\012(0x408+240-0x4f7)]
<operator>.addition 0x117c+2226
<operator>.postIncrement ReplacementFor_rn++
<operator>.subtraction 0x7c9+4504-0x1960
IDENTIFIER ReplacementFor_make if (ReplacementFor_make)
<operator>.subtraction 0x1f5a+178-0x200b
<operator>.lessThan ReplacementFor_j<\012ReplacementFor_rn-(0xd1f+6636-0x270a)
<operator>.postIncrement ReplacementFor_j++
<operator>.addition 0x7c9+4504
<operator>.assignment ReplacementFor_res[ReplacementFor_rn-(0x1d9a+2031-0x2587)]=\012ReplacementFor_make
<operator>.postDecrement ReplacementFor_rn--
<operator>.addition 0x1f5a+178
<operator>.assignment ReplacementFor_j=(0xbc6+1895-0x132d)
<operator>.cast (int)\012ReplacementFor_res[ReplacementFor_rn-(0xaaf+2047-0x12ac)]
<operator>.subtraction ReplacementFor_rn-\012(0x408+240-0x4f7)
<operator>.subtraction ReplacementFor_rn-(0xd1f+6636-0x270a)
<operator>.assignment ReplacementFor_rn=(0x91a+5105-0x1d0b)
<operator>.cast (int)\012ReplacementFor_res[ReplacementFor_rn-(0xcc8+4097-0x1cc8)]
<operator>.subtraction 0x408+240-0x4f7
<operator>.subtraction 0xbc6+1895-0x132d
<operator>.subtraction 0xd1f+6636-0x270a
<operator>.subtraction ReplacementFor_rn-(0xaaf+2047-0x12ac)
<operator>.subtraction ReplacementFor_rn-(0x1d9a+2031-0x2587)
<operator>.addition 0x408+240
<operator>.addition 0xbc6+1895
<operator>.addition 0xd1f+6636
<operator>.cast (int)ReplacementFor_res[ReplacementFor_j]
<operator>.subtraction 0x91a+5105-0x1d0b
<operator>.subtraction ReplacementFor_rn-(0xcc8+4097-0x1cc8)
<operator>.subtraction 0xaaf+2047-0x12ac
<operator>.subtraction 0x1d9a+2031-0x2587
<operator>.addition 0x91a+5105
<operator>.subtraction 0xcc8+4097-0x1cc8
<operator>.addition 0xaaf+2047
<operator>.addition 0x1d9a+2031
<operator>.addition 0xcc8+4097
<operator>.indirectIndexAccess ReplacementFor_res[\012ReplacementFor_rn++]
<operator>.indirectIndexAccess ReplacementFor_invoke[i]
<operator>.indirectIndexAccess ReplacementFor_combine[(int)\012ReplacementFor_res[ReplacementFor_rn-(0xcc8+4097-0x1cc8)]][(int)\012ReplacementFor_res[ReplacementFor_rn-(0xaaf+2047-0x12ac)]]
<operator>.indirectIndexAccess ReplacementFor_res[ReplacementFor_rn-\012(0x408+240-0x4f7)]
<operator>.indirectIndexAccess ReplacementFor_combine[(int)\012ReplacementFor_res[ReplacementFor_rn-(0xcc8+4097-0x1cc8)]]
<operator>.indirectIndexAccess ReplacementFor_oppose[(int)ReplacementFor_res[ReplacementFor_j]][\012ReplacementFor_opp]
UNKNOWN int int
<operator>.indirectIndexAccess ReplacementFor_res[ReplacementFor_rn-(0xaaf+2047-0x12ac)]
<operator>.indirectIndexAccess ReplacementFor_res[ReplacementFor_rn-(0x1d9a+2031-0x2587)]
<operator>.indirectIndexAccess ReplacementFor_oppose[(int)ReplacementFor_res[ReplacementFor_j]]
UNKNOWN int int
<operator>.indirectIndexAccess ReplacementFor_res[ReplacementFor_rn-(0xcc8+4097-0x1cc8)]
UNKNOWN int int
<operator>.indirectIndexAccess ReplacementFor_res[ReplacementFor_j]
>>>PDG&63 0->3 0->4 0->5 0->8 0->9 0->10 0->11 0->14 0->15 0->16 0->17 0->18 0->19 0->20 0->21 0->22 0->23 0->24 0->27 0->28 0->31 0->32 0->33 0->34 0->35 0->36 0->37 0->38 0->40 0->41 0->42 0->43 0->44 0->45 0->46 0->47 0->48 2->1 2->1 2->1 2->15 3->1 3->1 3->1 3->3 3->4 3->4 3->7 3->9 3->15 3->16 3->21 3->49 3->50 4->1 4->3 5->1 5->2 5->2 6->1 6->1 6->3 7->1 7->1 7->1 9->1 9->1 9->10 9->10 9->12 9->18 9->22 9->23 9->24 9->26 9->30 9->34 9->35 9->41 9->41 9->42 9->43 9->45 9->46 9->47 9->48 9->51 9->53 9->55 9->56 9->57 9->59 9->60 10->1 10->1 10->1 10->13 10->15 10->19 10->25 10->27 10->27 10->28 10->31 10->32 10->33 10->36 10->37 10->38 10->52 11->1 11->6 11->6 12->1 12->1 12->1 12->22 13->1 13->1 13->1 15->9 16->1 16->9 16->9 18->1 18->10 18->10 19->1 19->1 19->1 19->20 19->39 19->54 19->58 19->61 19->62 20->1 20->19 22->1 22->1 22->1 23->1 23->1 23->15 25->1 25->1 25->19 26->1 27->1 27->28 28->1 28->1 28->15 28->19 28->19 29->1 29->1 29->1 29->15 30->1 31->1 31->27 31->27 32->1 32->25 32->25 33->1 33->28 33->28 34->1 34->10 34->35 35->1 35->23 39->1 40->1 40->29 40->29 41->1 41->34 42->1 42->34 42->34 43->1 43->35 43->35 45->1 45->41 45->41 54->19 54->20 54->28 54->29 54->33 54->38 54->40 54->44
>>>Token void ReplacementFor_simul ( ) { int i , ReplacementFor_opp , ReplacementFor_j ; char ReplacementFor_make ; ReplacementFor_rn = ( 0x3b5 + 4386 - 0x14d7 ) ; for ( i = ( 0x117c + 2226 - 0x1a2e ) ; i < ReplacementFor_n ; i ++ ) { ReplacementFor_res [ ReplacementFor_rn ++ ] = ReplacementFor_invoke [ i ] ; if ( ReplacementFor_rn > ( 0x7c9 + 4504 - 0x1960 ) ) { ReplacementFor_make = ReplacementFor_combine [ ( int ) ReplacementFor_res [ ReplacementFor_rn - ( 0xcc8 + 4097 - 0x1cc8 ) ] ] [ ( int ) ReplacementFor_res [ ReplacementFor_rn - ( 0xaaf + 2047 - 0x12ac ) ] ] ; if ( ReplacementFor_make ) { ReplacementFor_res [ ReplacementFor_rn - ( 0x1d9a + 2031 - 0x2587 ) ] = ReplacementFor_make ; ReplacementFor_rn -- ; continue ; } } if ( ReplacementFor_rn > ( 0x1f5a + 178 - 0x200b ) ) { ReplacementFor_opp = ReplacementFor_res [ ReplacementFor_rn - ( 0x408 + 240 - 0x4f7 ) ] ; for ( ReplacementFor_j = ( 0xbc6 + 1895 - 0x132d ) ; ReplacementFor_j < ReplacementFor_rn - ( 0xd1f + 6636 - 0x270a ) ; ReplacementFor_j ++ ) if ( ReplacementFor_oppose [ ( int ) ReplacementFor_res [ ReplacementFor_j ] ] [ ReplacementFor_opp ] ) { ReplacementFor_rn = ( 0x91a + 5105 - 0x1d0b ) ; break ; } } } }
>>>Func
METHOD main
METHOD_RETURN int
<operator>.assignment ReplacementFor_ii=(0x721+1570-0xd43)
<operator>.assignment ReplacementFor_input=\012fopen(\012"\x41\x2d\x73\x6d\x61\x6c\x6c\x2d\x61\x74\x74\x65\x6d\x70\x74\x30\x2e\x69\x6e",\012"\x72")
<operator>.assignment ReplacementFor_output=fopen("\x74\x65\x73\x74\x2e\x6f\x75\x74",\012"\x77\x2b")
fscanf fscanf(ReplacementFor_input,"\x20\x25\x64" "\n",&\012ReplacementFor_cases)
fclose fclose(ReplacementFor_input\012)
fclose fclose(ReplacementFor_output)
RETURN return(0x218c+443-0x2347); return(0x218c+443-0x2347);
<operator>.lessThan ReplacementFor_ii++<ReplacementFor_cases
<operator>.subtraction 0x218c+443-0x2347
<operator>.subtraction 0x721+1570-0xd43
fopen fopen(\012"\x41\x2d\x73\x6d\x61\x6c\x6c\x2d\x61\x74\x74\x65\x6d\x70\x74\x30\x2e\x69\x6e",\012"\x72")
fopen fopen("\x74\x65\x73\x74\x2e\x6f\x75\x74",\012"\x77\x2b")
<operator>.assignment ReplacementFor_schedule[(0x14aa+1969-0x1bf7)][(0xfc1+6035-0x26f0)]={\012(0x642+4214-0x16b8)}
<operator>.assignment ReplacementFor_wp[(0x19a+685-0x3e3)]={\012(0x1793+1768-0x1e7b)}
<operator>.assignment ReplacementFor_owp[(0x618+1257-0xa9d)]={\012(0x1c82+1700-0x2326)}
<operator>.assignment ReplacementFor_oowp[(0x1768+229-0x17e9)]={\012(0x1e57+1129-0x22c0)}
<operator>.assignment ReplacementFor_win[(0x475+3724-0x129d)]={\012(0xd85+2586-0x179f)}
<operator>.assignment ReplacementFor_lose[(0x1f99+1837-0x2662)]={\012(0x3cf+8399-0x249e)}
fscanf fscanf(\012ReplacementFor_input,"\x20\x25\x64",&ReplacementFor_n)
fprintf fprintf(\012ReplacementFor_output,"\x43\x61\x73\x65\x20\x23\x25\x64\x3a" "\n",\012ReplacementFor_ii)
<operator>.addition 0x721+1570
<operator>.postIncrement ReplacementFor_ii++
<operator>.lessThan i<ReplacementFor_n
<operator>.postIncrement i++
<operator>.lessThan i<\012ReplacementFor_n
<operator>.postIncrement i++
<operator>.lessThan i<ReplacementFor_n
<operator>.postIncrement i++
<operator>.lessThan i<ReplacementFor_n
<operator>.postIncrement i++
<operator>.addition 0x218c+443
<operator>.arrayInitializer {\012(0x642+4214-0x16b8)}
<operator>.arrayInitializer {\012(0x1793+1768-0x1e7b)}
<operator>.arrayInitializer {\012(0x1c82+1700-0x2326)}
<operator>.arrayInitializer {\012(0x1e57+1129-0x22c0)}
<operator>.arrayInitializer {\012(0xd85+2586-0x179f)}
<operator>.arrayInitializer {\012(0x3cf+8399-0x249e)}
<operator>.assignment i=(0xcc5+2632-0x170d)
fscanf fscanf(ReplacementFor_input,"\n")
<operator>.assignment ReplacementFor_wp[i]=ReplacementFor_win[i]/(\012ReplacementFor_win[i]+ReplacementFor_lose[i])
<operator>.assignment i=(0x11d5+1540-0x17d9)
<operator>.assignment ReplacementFor_teams=(0x133d+1665-0x19be)
<operator>.assignment ReplacementFor_wpTotal=(0x1832+2841-0x234b)
<operator>.assignment ReplacementFor_owp[i]=ReplacementFor_wpTotal/ReplacementFor_teams
<operator>.assignment i=\012(0x7fc+3266-0x14be)
<operator>.assignment ReplacementFor_teams=\012(0x138a+1883-0x1ae5)
<operator>.assignment ReplacementFor_owpTotal=(0xf66+1721-0x161f)
<operator>.assignment ReplacementFor_oowp[i]=ReplacementFor_owpTotal/ReplacementFor_teams
<operator>.assignment i=(0xc12+2161-0x1483)
fprintf fprintf(\012ReplacementFor_output,"\x25\x66" "\n",0.25*ReplacementFor_wp[i]+0.50*\012ReplacementFor_owp[i]+0.25*ReplacementFor_oowp[i])
<operator>.subtraction 0x642+4214-0x16b8
<operator>.subtraction 0x1793+1768-0x1e7b
<operator>.subtraction 0x1c82+1700-0x2326
<operator>.subtraction 0x1e57+1129-0x22c0
<operator>.subtraction 0xd85+2586-0x179f
<operator>.subtraction 0x3cf+8399-0x249e
<operator>.lessThan ReplacementFor_j<ReplacementFor_n
<operator>.postIncrement ReplacementFor_j++
<operator>.lessThan ReplacementFor_j<ReplacementFor_n
<operator>.postIncrement ReplacementFor_j++
<operator>.lessThan ReplacementFor_j<ReplacementFor_n
<operator>.postIncrement ReplacementFor_j++
<operator>.addition 0x642+4214
<operator>.addition 0x1793+1768
<operator>.addition 0x1c82+1700
<operator>.addition 0x1e57+1129
<operator>.addition 0xd85+2586
<operator>.addition 0x3cf+8399
<operator>.subtraction 0xcc5+2632-0x170d
<operator>.assignment ReplacementFor_j=\012(0x12fb+3828-0x21ef)
fscanf fscanf(ReplacementFor_input,"\x25\x63",&ReplacementFor_schedule[i][\012ReplacementFor_j])
<operator>.division ReplacementFor_win[i]/(\012ReplacementFor_win[i]+ReplacementFor_lose[i])
<operator>.subtraction 0x11d5+1540-0x17d9
<operator>.subtraction 0x133d+1665-0x19be
<operator>.subtraction 0x1832+2841-0x234b
<operator>.assignment ReplacementFor_j=\012(0xe6d+853-0x11c2)
<operator>.postIncrement ReplacementFor_teams++
<operator>.division ReplacementFor_wpTotal/ReplacementFor_teams
<operator>.subtraction 0x7fc+3266-0x14be
<operator>.subtraction 0x138a+1883-0x1ae5
<operator>.subtraction 0xf66+1721-0x161f
<operator>.assignment ReplacementFor_j=(0x1306+1573-0x192b)
<operator>.postIncrement ReplacementFor_teams++
<operator>.assignmentPlus ReplacementFor_owpTotal+=ReplacementFor_owp[ReplacementFor_j]
<operator>.division ReplacementFor_owpTotal/ReplacementFor_teams
<operator>.subtraction 0xc12+2161-0x1483
<operator>.addition 0.25*ReplacementFor_wp[i]+0.50*\012ReplacementFor_owp[i]+0.25*ReplacementFor_oowp[i]
<operator>.addition 0xcc5+2632
<operator>.equals ReplacementFor_schedule[i][ReplacementFor_j]==\012((char)(0x1c3a+1299-0x211c))
<operator>.addition ReplacementFor_win[i]+ReplacementFor_lose[i]
<operator>.addition 0x11d5+1540
<operator>.addition 0x133d+1665
<operator>.addition 0x1832+2841
<operator>.equals ReplacementFor_schedule[i][ReplacementFor_j]==((char)(0xe3+78-0x103))
<operator>.equals ReplacementFor_schedule[i][ReplacementFor_j]==\012((char)(0x234+2297-0xafc))
<operator>.equals ReplacementFor_schedule[i][\012ReplacementFor_j]==((char)(0x8b4+3336-0x158c))
<operator>.addition 0x7fc+3266
<operator>.addition 0x138a+1883
<operator>.addition 0xf66+1721
<operator>.equals ReplacementFor_schedule[i][ReplacementFor_j]==\012((char)(0x7c9+2349-0x10c8))
<operator>.addition 0xc12+2161
<operator>.addition 0.25*ReplacementFor_wp[i]+0.50*\012ReplacementFor_owp[i]
<operator>.multiplication 0.25*ReplacementFor_oowp[i]
<operator>.subtraction 0x12fb+3828-0x21ef
<operator>.postIncrement ReplacementFor_win[i]++
<operator>.subtraction 0xe6d+853-0x11c2
<operator>.assignmentPlus ReplacementFor_wpTotal+=ReplacementFor_win[\012ReplacementFor_j]/(ReplacementFor_win[ReplacementFor_j]+ReplacementFor_lose[\012ReplacementFor_j]-(0x865+7078-0x240a))
<operator>.assignmentPlus ReplacementFor_wpTotal+=(\012ReplacementFor_win[ReplacementFor_j]-(0x10d5+49-0x1105))/(ReplacementFor_win[\012ReplacementFor_j]+ReplacementFor_lose[ReplacementFor_j]-(0x33a+5380-0x183d))
<operator>.subtraction 0x1306+1573-0x192b
<operator>.multiplication 0.25*ReplacementFor_wp[i]
<operator>.multiplication 0.50*\012ReplacementFor_owp[i]
<operator>.addition 0x12fb+3828
<operator>.cast (char)(0x1c3a+1299-0x211c)
<operator>.addition 0xe6d+853
<operator>.cast (char)(0xe3+78-0x103)
<operator>.cast (char)(0x234+2297-0xafc)
<operator>.cast (char)(0x8b4+3336-0x158c)
<operator>.addition 0x1306+1573
<operator>.cast (char)(0x7c9+2349-0x10c8)
<operator>.subtraction 0x1c3a+1299-0x211c
<operator>.equals ReplacementFor_schedule[i][ReplacementFor_j]==((char)(0x16e0+321-0x17f1))
<operator>.subtraction 0xe3+78-0x103
<operator>.subtraction 0x234+2297-0xafc
<operator>.division ReplacementFor_win[\012ReplacementFor_j]/(ReplacementFor_win[ReplacementFor_j]+ReplacementFor_lose[\012ReplacementFor_j]-(0x865+7078-0x240a))
<operator>.subtraction 0x8b4+3336-0x158c
<operator>.division (\012ReplacementFor_win[ReplacementFor_j]-(0x10d5+49-0x1105))/(ReplacementFor_win[\012ReplacementFor_j]+ReplacementFor_lose[ReplacementFor_j]-(0x33a+5380-0x183d))
<operator>.subtraction 0x7c9+2349-0x10c8
<operator>.addition 0x1c3a+1299
<operator>.postIncrement ReplacementFor_lose[i]++
<operator>.addition 0xe3+78
<operator>.addition 0x234+2297
<operator>.subtraction ReplacementFor_win[ReplacementFor_j]+ReplacementFor_lose[\012ReplacementFor_j]-(0x865+7078-0x240a)
<operator>.addition 0x8b4+3336
<operator>.subtraction ReplacementFor_win[ReplacementFor_j]-(0x10d5+49-0x1105)
<operator>.subtraction ReplacementFor_win[\012ReplacementFor_j]+ReplacementFor_lose[ReplacementFor_j]-(0x33a+5380-0x183d)
<operator>.addition 0x7c9+2349
<operator>.cast (char)(0x16e0+321-0x17f1)
<operator>.addition ReplacementFor_win[ReplacementFor_j]+ReplacementFor_lose[\012ReplacementFor_j]
<operator>.subtraction 0x865+7078-0x240a
<operator>.subtraction 0x10d5+49-0x1105
<operator>.addition ReplacementFor_win[\012ReplacementFor_j]+ReplacementFor_lose[ReplacementFor_j]
<operator>.subtraction 0x33a+5380-0x183d
<operator>.subtraction 0x16e0+321-0x17f1
<operator>.addition 0x865+7078
<operator>.addition 0x10d5+49
<operator>.addition 0x33a+5380
<operator>.addition 0x16e0+321
<operator>.addressOf &ReplacementFor_n
<operator>.indirectIndexAccess ReplacementFor_wp[i]
<operator>.indirectIndexAccess ReplacementFor_owp[i]
<operator>.indirectIndexAccess ReplacementFor_oowp[i]
<operator>.indirectIndexAccess ReplacementFor_win[i]
<operator>.addressOf &ReplacementFor_schedule[i][\012ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_win[i]
<operator>.indirectIndexAccess ReplacementFor_lose[i]
<operator>.indirectIndexAccess ReplacementFor_owp[ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_oowp[i]
<operator>.indirectIndexAccess ReplacementFor_schedule[i][\012ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_schedule[i][ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_schedule[i][ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_schedule[i][ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_schedule[i][\012ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_schedule[i][ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_wp[i]
<operator>.indirectIndexAccess ReplacementFor_owp[i]
<operator>.indirectIndexAccess ReplacementFor_schedule[i]
<operator>.indirectIndexAccess ReplacementFor_schedule[i]
UNKNOWN char char
<operator>.indirectIndexAccess ReplacementFor_win[i]
<operator>.indirectIndexAccess ReplacementFor_schedule[i]
UNKNOWN char char
<operator>.indirectIndexAccess ReplacementFor_schedule[i]
UNKNOWN char char
<operator>.indirectIndexAccess ReplacementFor_schedule[i]
UNKNOWN char char
<operator>.indirectIndexAccess ReplacementFor_schedule[i]
UNKNOWN char char
<operator>.indirectIndexAccess ReplacementFor_win[\012ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_schedule[i][ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_win[ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_schedule[i]
UNKNOWN char char
<operator>.indirectIndexAccess ReplacementFor_lose[i]
<operator>.indirectIndexAccess ReplacementFor_win[ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_lose[\012ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_win[\012ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_lose[ReplacementFor_j]
>>>PDG&189 0->5 0->6 0->7 0->9 0->10 0->11 0->12 0->13 0->20 0->21 0->22 0->23 0->24 0->25 0->26 0->27 0->28 0->29 0->30 0->31 0->32 0->40 0->51 0->52 0->53 0->54 0->55 0->56 0->57 0->58 0->59 0->60 0->61 0->62 0->63 0->64 0->65 0->66 0->67 0->68 0->69 0->70 0->72 0->74 0->75 0->76 0->78 0->79 0->80 0->81 0->82 0->84 0->85 0->86 0->87 0->89 0->92 0->93 0->94 0->98 0->99 0->100 0->102 0->104 0->105 0->107 0->108 0->109 0->110 0->111 0->112 0->113 0->115 0->119 0->121 0->123 0->124 0->126 0->128 0->129 0->131 0->132 0->134 0->137 0->140 0->141 0->143 0->144 0->145 0->146 0->147 0->148 2->1 2->1 2->23 3->1 3->1 3->5 4->1 4->1 4->7 4->21 5->1 5->1 5->6 5->9 5->20 6->1 6->1 7->1 7->1 8->1 9->1 9->1 9->1 9->9 9->14 9->15 9->16 9->17 9->18 9->19 9->20 9->21 9->23 9->24 9->26 9->28 9->30 9->33 9->34 9->35 9->36 9->37 9->38 9->39 9->42 9->46 9->50 9->52 9->53 9->54 9->55 9->56 9->57 9->64 9->65 9->66 9->67 9->68 9->69 9->70 9->74 9->80 9->87 9->89 9->92 9->98 9->102 9->149 10->1 10->1 10->8 11->1 11->2 11->2 12->3 12->3 13->4 13->4 14->1 14->1 14->1 15->1 15->1 15->1 15->111 16->1 16->1 16->1 16->85 16->112 17->1 17->1 17->1 17->104 18->1 18->1 18->1 18->73 18->91 18->106 18->125 18->133 18->135 18->136 18->139 18->142 19->1 19->1 19->1 19->73 19->91 19->130 19->133 19->136 19->139 19->142 20->1 20->1 20->6 20->24 20->26 20->28 20->30 20->40 20->58 20->60 20->62 21->1 21->7 21->23 21->51 23->1 23->9 23->21 24->24 24->25 24->25 24->26 24->40 24->41 24->58 24->58 24->71 24->73 24->91 24->105 24->113 24->150 24->153 24->155 24->156 25->1 25->24 26->1 26->26 26->27 26->27 26->28 26->43 26->44 26->45 26->60 26->60 26->75 26->76 26->77 26->79 26->93 26->94 26->107 26->115 26->151 27->1 27->26 28->28 28->29 28->29 28->30 28->47 28->48 28->49 28->62 28->62 28->81 28->82 28->83 28->86 28->99 28->100 28->110 28->119 28->152 29->1 29->28 30->1 30->1 30->1 30->20 30->24 30->30 30->31 30->31 30->51 30->88 30->103 30->104 30->111 30->112 30->158 30->165 30->166 31->1 31->30 33->1 33->14 34->1 34->15 35->1 35->16 36->1 36->17 37->1 37->18 38->1 38->19 39->1 39->1 39->24 40->1 40->6 40->20 40->72 41->1 41->1 41->1 41->111 42->1 42->1 42->26 43->1 43->1 43->78 43->79 44->1 44->1 44->79 44->108 44->109 45->1 45->1 45->1 45->112 46->1 46->1 46->28 47->1 47->1 47->84 47->86 48->1 48->1 48->85 48->86 49->1 49->1 49->1 49->104 50->1 50->1 50->30 51->1 51->1 51->7 51->21 52->1 52->33 52->33 53->1 53->34 53->34 54->1 54->35 54->35 55->1 55->36 55->36 56->1 56->37 56->37 57->1 57->38 57->38 58->1 58->1 58->24 58->58 58->59 58->59 58->72 58->90 58->114 58->121 58->129 58->154 58->159 58->160 58->167 58->168 58->169 59->1 59->58 60->1 60->1 60->26 60->60 60->61 60->61 60->95 60->116 60->123 60->131 60->161 60->171 60->172 61->1 61->60 62->1 62->1 62->28 62->62 62->63 62->63 62->101 62->120 62->128 62->137 62->164 62->177 62->178 63->1 63->62 70->1 70->39 70->39 71->1 71->1 71->58 72->1 72->1 72->6 72->20 72->40 72->97 73->1 73->1 73->41 73->41 73->91 73->106 74->1 74->42 74->42 75->1 75->43 75->43 76->1 76->44 76->44 77->1 77->1 77->60 78->1 78->79 79->1 79->1 79->45 79->45 80->1 80->46 80->46 81->1 81->47 81->47 82->1 82->48 82->48 83->1 83->1 83->62 84->1 84->86 85->1 85->1 85->86 86->1 86->1 86->49 86->49 87->1 87->50 87->50 88->1 88->1 90->1 90->1 90->1 90->95 90->101 90->106 90->122 90->122 90->138 90->144 90->148 90->170 90->180 90->182 90->183 91->1 95->1 95->1 95->1 95->78 95->90 95->96 95->96 95->97 95->101 95->117 95->118 95->124 95->126 95->132 95->134 95->162 95->163 95->173 95->174 95->175 95->176 96->1 96->1 96->1 96->90 96->95 96->101 96->108 96->125 96->133 96->139 96->140 96->145 96->179 96->185 96->186 97->1 97->1 97->1 97->72 97->109 97->127 97->135 97->136 97->141 97->142 97->143 97->146 97->147 97->181 97->187 97->188 101->1 101->1 101->1 101->84 101->85 101->90 101->95 101->157 103->1 103->1 104->1 104->51 104->51 104->88 104->88 105->1 105->71 105->71 106->1 106->73 106->91 107->1 107->77 107->77 108->1 108->1 108->79 108->109 109->1 109->1 109->79 109->108 110->1 110->83 110->83 111->1 111->51 111->51 111->88 111->88 111->103 111->103 112->1 112->51 112->51 112->88 112->88 112->103 112->103 114->1 116->1 117->1 118->1 120->1 121->1 121->90 121->90 121->114 121->114 122->1 122->1 122->1 122->90 122->95 122->101 122->130 122->184 123->1 123->95 123->95 123->116 123->116 124->1 124->96 124->96 124->117 124->117 125->1 125->1 125->108 125->108 125->136 125->142 126->1 126->97 126->97 126->118 126->118 127->1 127->1 127->109 127->109 128->1 128->101 128->101 128->120 128->120 130->1 130->73 130->91 133->1 133->1 133->125 133->125 135->1 135->1 135->127 135->127 135->133 135->139 136->1 136->1 136->127 136->127 138->1 139->1 139->1 140->1 140->133 140->133 141->1 141->135 141->135 142->1 142->1 143->1 143->136 143->136 144->1 144->122 144->122 144->138 144->138
>>>Token int main ( ) { FILE * ReplacementFor_input , * ReplacementFor_output ; int ReplacementFor_cases , ReplacementFor_ii = ( 0x721 + 1570 - 0xd43 ) ; ReplacementFor_input = fopen ( " \x41 \x2d \x73 \x6d \x61 \x6c \x6c \x2d \x61 \x74 \x74 \x65 \x6d \x70 \x74 \x30 \x2e \x69 \x6e " , " \x72 " ) ; ReplacementFor_output = fopen ( " \x74 \x65 \x73 \x74 \x2e \x6f \x75 \x74 " , " \x77 \x2b " ) ; fscanf ( ReplacementFor_input , " \x20 \x25 \x64 " " \n " , & ReplacementFor_cases ) ; while ( ReplacementFor_ii ++ < ReplacementFor_cases ) { char ReplacementFor_schedule [ ( 0x14aa + 1969 - 0x1bf7 ) ] [ ( 0xfc1 + 6035 - 0x26f0 ) ] = { ( 0x642 + 4214 - 0x16b8 ) } ; double ReplacementFor_wp [ ( 0x19a + 685 - 0x3e3 ) ] = { ( 0x1793 + 1768 - 0x1e7b ) } ; double ReplacementFor_owp [ ( 0x618 + 1257 - 0xa9d ) ] = { ( 0x1c82 + 1700 - 0x2326 ) } ; double ReplacementFor_oowp [ ( 0x1768 + 229 - 0x17e9 ) ] = { ( 0x1e57 + 1129 - 0x22c0 ) } ; double ReplacementFor_win [ ( 0x475 + 3724 - 0x129d ) ] = { ( 0xd85 + 2586 - 0x179f ) } ; double ReplacementFor_lose [ ( 0x1f99 + 1837 - 0x2662 ) ] = { ( 0x3cf + 8399 - 0x249e ) } ; int ReplacementFor_n , i , ReplacementFor_j ; fscanf ( ReplacementFor_input , " \x20 \x25 \x64 " , & ReplacementFor_n ) ; for ( i = ( 0xcc5 + 2632 - 0x170d ) ; i < ReplacementFor_n ; i ++ ) { fscanf ( ReplacementFor_input , " \n " ) ; for ( ReplacementFor_j = ( 0x12fb + 3828 - 0x21ef ) ; ReplacementFor_j < ReplacementFor_n ; ReplacementFor_j ++ ) { fscanf ( ReplacementFor_input , " \x25 \x63 " , & ReplacementFor_schedule [ i ] [ ReplacementFor_j ] ) ; if ( ReplacementFor_schedule [ i ] [ ReplacementFor_j ] == ( ( char ) ( 0x1c3a + 1299 - 0x211c ) ) ) { ReplacementFor_win [ i ] ++ ; } else if ( ReplacementFor_schedule [ i ] [ ReplacementFor_j ] == ( ( char ) ( 0x16e0 + 321 - 0x17f1 ) ) ) { ReplacementFor_lose [ i ] ++ ; } } ReplacementFor_wp [ i ] = ReplacementFor_win [ i ] / ( ReplacementFor_win [ i ] + ReplacementFor_lose [ i ] ) ; } for ( i = ( 0x11d5 + 1540 - 0x17d9 ) ; i < ReplacementFor_n ; i ++ ) { double ReplacementFor_teams = ( 0x133d + 1665 - 0x19be ) , ReplacementFor_wpTotal = ( 0x1832 + 2841 - 0x234b ) ; for ( ReplacementFor_j = ( 0xe6d + 853 - 0x11c2 ) ; ReplacementFor_j < ReplacementFor_n ; ReplacementFor_j ++ ) { if ( ReplacementFor_schedule [ i ] [ ReplacementFor_j ] == ( ( char ) ( 0xe3 + 78 - 0x103 ) ) ) { continue ; } ReplacementFor_teams ++ ; if ( ReplacementFor_schedule [ i ] [ ReplacementFor_j ] == ( ( char ) ( 0x234 + 2297 - 0xafc ) ) ) ReplacementFor_wpTotal += ReplacementFor_win [ ReplacementFor_j ] / ( ReplacementFor_win [ ReplacementFor_j ] + ReplacementFor_lose [ ReplacementFor_j ] - ( 0x865 + 7078 - 0x240a ) ) ; if ( ReplacementFor_schedule [ i ] [ ReplacementFor_j ] == ( ( char ) ( 0x8b4 + 3336 - 0x158c ) ) ) ReplacementFor_wpTotal += ( ReplacementFor_win [ ReplacementFor_j ] - ( 0x10d5 + 49 - 0x1105 ) ) / ( ReplacementFor_win [ ReplacementFor_j ] + ReplacementFor_lose [ ReplacementFor_j ] - ( 0x33a + 5380 - 0x183d ) ) ; } ReplacementFor_owp [ i ] = ReplacementFor_wpTotal / ReplacementFor_teams ; } for ( i = ( 0x7fc + 3266 - 0x14be ) ; i < ReplacementFor_n ; i ++ ) { double ReplacementFor_teams = ( 0x138a + 1883 - 0x1ae5 ) , ReplacementFor_owpTotal = ( 0xf66 + 1721 - 0x161f ) ; for ( ReplacementFor_j = ( 0x1306 + 1573 - 0x192b ) ; ReplacementFor_j < ReplacementFor_n ; ReplacementFor_j ++ ) { if ( ReplacementFor_schedule [ i ] [ ReplacementFor_j ] == ( ( char ) ( 0x7c9 + 2349 - 0x10c8 ) ) ) { continue ; } ReplacementFor_teams ++ ; ReplacementFor_owpTotal += ReplacementFor_owp [ ReplacementFor_j ] ; } ReplacementFor_oowp [ i ] = ReplacementFor_owpTotal / ReplacementFor_teams ; } fprintf ( ReplacementFor_output , " \x43 \x61 \x73 \x65 \x20 \x23 \x25 \x64 \x3a " " \n " , ReplacementFor_ii ) ; for ( i = ( 0xc12 + 2161 - 0x1483 ) ; i < ReplacementFor_n ; i ++ ) { fprintf ( ReplacementFor_output , " \x25 \x66 " " \n " , 0.25 * ReplacementFor_wp [ i ] + 0.50 * ReplacementFor_owp [ i ] + 0.25 * ReplacementFor_oowp [ i ] ) ; } } fclose ( ReplacementFor_input ) ; fclose ( ReplacementFor_output ) ; return ( 0x218c + 443 - 0x2347 ) ; }
>>>Func
METHOD ReplacementFor_usage
METHOD_RETURN void
PARAM int status
>>>PDG&3 0->2 2->1
>>>Token " ) , stdout ) ; fputs ( ReplacementFor_HELP_OPTION_DESCRIPTION , stdout ) ; fputs ( ReplacementFor_VERSION_OPTION_DESCRIPTION , stdout ) ; fputs ( ReplacementFor__ ( " \ " ) , stdout ) ; ReplacementFor_emit_ancillary_info ( ReplacementFor_PROGRAM_NAME ) ; } exit ( status ) ; }
>>>Func
METHOD ReplacementFor_resolve
METHOD_RETURN void
PARAM void
fgets fgets(buf,ReplacementFor_BUFSZ,stdin)
<operator>.assignment S=atoi(buf)
ReplacementFor_clear_used ReplacementFor_clear_used(S)
<operator>.assignment ReplacementFor_nr=(0x2153+1294-0x2661)
fgets fgets(buf\012,ReplacementFor_BUFSZ,stdin)
<operator>.assignment ReplacementFor_Q=atoi(buf)
printf printf("\x25\x64" "\n",ReplacementFor_nr)
<operator>.lessThan i<S
<operator>.postIncrement i++
<operator>.lessThan i<ReplacementFor_Q
<operator>.postIncrement i++
atoi atoi(buf)
<operator>.assignment i=(0x1464+632-0x16dc)
fgets fgets(buf,ReplacementFor_BUFSZ,stdin)
<operator>.assignment ReplacementFor_engines[i]=strdup(buf\012)
<operator>.subtraction 0x2153+1294-0x2661
atoi atoi(buf)
<operator>.assignment i=(0x637+1707-0xce2)
fgets fgets(buf,ReplacementFor_BUFSZ,stdin)
<operator>.addition 0x2153+1294
ReplacementFor_check_used ReplacementFor_check_used(S,buf)
<operator>.subtraction 0x1464+632-0x16dc
strdup strdup(buf\012)
<operator>.subtraction 0x637+1707-0xce2
<operator>.preIncrement ++ReplacementFor_nr
ReplacementFor_clear_used ReplacementFor_clear_used(\012S)
ReplacementFor_check_used ReplacementFor_check_used(S,buf)
<operator>.addition 0x1464+632
<operator>.addition 0x637+1707
<operator>.indirectIndexAccess ReplacementFor_engines[i]
>>>PDG&33 0->2 0->3 0->5 0->7 0->9 0->10 0->11 0->12 0->13 0->14 0->16 0->18 0->19 0->21 0->22 0->23 0->24 0->25 0->26 0->27 0->28 0->29 0->30 0->31 2->1 3->1 3->7 3->7 3->14 3->16 3->16 4->1 4->10 5->1 5->1 5->23 6->1 6->1 6->9 6->27 7->1 7->1 7->1 7->19 7->21 7->21 8->1 8->1 8->12 9->1 9->1 10->1 10->5 10->10 10->11 10->11 10->16 10->17 10->25 10->32 11->1 11->10 12->1 12->1 12->1 12->12 12->13 12->13 12->21 12->23 13->1 13->12 14->4 14->7 14->16 15->1 15->1 15->10 16->1 16->7 16->7 16->25 17->1 17->1 17->1 18->1 18->6 18->6 19->1 19->8 19->21 20->1 20->1 20->12 21->1 21->1 21->1 21->23 23->1 23->1 23->1 23->21 23->27 23->28 23->28 23->29 23->29 24->1 24->15 24->15 25->7 25->16 25->17 26->1 26->20 26->20 27->1 27->9 28->1 28->29 29->1 29->1 29->1 29->21 29->23
>>>Token void ReplacementFor_resolve ( void ) { int S , ReplacementFor_Q ; int i , ReplacementFor_nr ; fgets ( buf , ReplacementFor_BUFSZ , stdin ) ; S = atoi ( buf ) ; for ( i = ( 0x1464 + 632 - 0x16dc ) ; i < S ; i ++ ) { fgets ( buf , ReplacementFor_BUFSZ , stdin ) ; ReplacementFor_engines [ i ] = strdup ( buf ) ; } ReplacementFor_clear_used ( S ) ; ReplacementFor_nr = ( 0x2153 + 1294 - 0x2661 ) ; fgets ( buf , ReplacementFor_BUFSZ , stdin ) ; ReplacementFor_Q = atoi ( buf ) ; for ( i = ( 0x637 + 1707 - 0xce2 ) ; i < ReplacementFor_Q ; i ++ ) { fgets ( buf , ReplacementFor_BUFSZ , stdin ) ; if ( ReplacementFor_check_used ( S , buf ) ) { ++ ReplacementFor_nr ; ReplacementFor_clear_used ( S ) ; ReplacementFor_check_used ( S , buf ) ; } } printf ( " \x25 \x64 " " \n " , ReplacementFor_nr ) ; }
>>>Func
METHOD ReplacementFor_imax
METHOD_RETURN int
PARAM int ReplacementFor_x
PARAM int ReplacementFor_y
RETURN return ReplacementFor_x>ReplacementFor_y?ReplacementFor_x:ReplacementFor_y; return ReplacementFor_x>ReplacementFor_y?ReplacementFor_x:ReplacementFor_y;
<operator>.conditional ReplacementFor_x>ReplacementFor_y?ReplacementFor_x:ReplacementFor_y
<operator>.greaterThan ReplacementFor_x>ReplacementFor_y
>>>PDG&7 0->2 0->3 0->5 0->6 2->6 3->6 4->1 5->1 5->1 5->1 5->1 5->4 6->5 6->5
>>>Token inline static int ReplacementFor_imax ( int ReplacementFor_x , int ReplacementFor_y ) { return ReplacementFor_x > ReplacementFor_y ? ReplacementFor_x : ReplacementFor_y ; }
>>>Func
METHOD ReplacementFor_split
METHOD_RETURN int
PARAM char*s
PARAM int m
PARAM char**ReplacementFor_v
PARAM char*\012ReplacementFor_r
<operator>.assignment ReplacementFor_n=(0x1163+1803-0x186e)
RETURN return ReplacementFor_n; return ReplacementFor_n;
IDENTIFIER ReplacementFor_n return ReplacementFor_n;
<operator>.subtraction 0x1163+1803-0x186e
<operator>.assignment ReplacementFor_x=s
ReplacementFor_assert ReplacementFor_assert(ReplacementFor_n<m)
<operator>.assignment ReplacementFor_v[\012ReplacementFor_n++]=ReplacementFor_x
<operator>.assignment *ReplacementFor_x++=(0xde4+1063-0x120b)
<operator>.addition 0x1163+1803
<operator>.logicalAnd *ReplacementFor_x&&strchr(\012ReplacementFor_r,*ReplacementFor_x)
<operator>.postIncrement ReplacementFor_x++
<operator>.logicalNot !*ReplacementFor_x
<operator>.logicalAnd *ReplacementFor_x&&!strchr(\012ReplacementFor_r,*ReplacementFor_x)
<operator>.postIncrement ReplacementFor_x++
<operator>.logicalNot !*ReplacementFor_x
<operator>.lessThan ReplacementFor_n<m
<operator>.subtraction 0xde4+1063-0x120b
strchr strchr(\012ReplacementFor_r,*ReplacementFor_x)
<operator>.postIncrement ReplacementFor_n++
<operator>.logicalNot !strchr(\012ReplacementFor_r,*ReplacementFor_x)
<operator>.postIncrement ReplacementFor_x++
<operator>.addition 0xde4+1063
strchr strchr(\012ReplacementFor_r,*ReplacementFor_x)
<operator>.indirectIndexAccess ReplacementFor_v[\012ReplacementFor_n++]
<operator>.indirection *ReplacementFor_x++
<operator>.indirection *ReplacementFor_x
<operator>.indirection *ReplacementFor_x
<operator>.indirection *ReplacementFor_x
<operator>.indirection *ReplacementFor_x
<operator>.indirection *ReplacementFor_x
<operator>.indirection *ReplacementFor_x
>>>PDG&37 0->2 0->3 0->4 0->5 0->8 0->9 0->10 0->12 0->14 0->16 0->19 0->21 0->22 0->23 0->24 0->26 0->27 0->28 2->10 3->1 3->21 4->1 5->1 5->23 5->28 6->1 6->1 6->1 6->8 6->21 7->1 8->7 9->1 9->6 9->6 10->1 10->1 10->1 10->12 10->16 10->19 10->26 11->1 11->1 12->1 12->1 12->1 13->1 13->1 13->1 15->1 15->1 15->15 15->16 15->16 15->17 15->23 15->31 16->1 16->1 16->12 16->19 16->26 17->1 17->1 17->11 17->12 17->12 17->18 17->18 17->19 17->20 17->21 17->24 17->26 17->28 17->29 17->33 17->34 18->1 18->1 18->18 18->19 18->19 18->20 18->28 18->33 19->1 19->1 19->26 20->1 20->1 20->13 20->15 20->15 20->17 20->22 20->23 20->26 20->26 20->27 20->30 20->31 20->32 21->1 21->11 21->11 21->24 22->1 22->13 22->13 23->1 23->15 23->15 23->28 24->1 24->8 24->21 25->1 25->15 25->18 26->1 26->12 26->16 26->19 28->1 28->18 28->23 28->25 28->25 31->23 31->35 33->25 33->28 33->36
>>>Token static int ReplacementFor_split ( char * s , int m , char * * ReplacementFor_v , char * ReplacementFor_r ) { int ReplacementFor_n = ( 0x1163 + 1803 - 0x186e ) ; char * ReplacementFor_x ; for ( ReplacementFor_x = s ; ; ) { while ( * ReplacementFor_x && strchr ( ReplacementFor_r , * ReplacementFor_x ) ) ReplacementFor_x ++ ; if ( ! * ReplacementFor_x ) break ; ReplacementFor_assert ( ReplacementFor_n < m ) ; ReplacementFor_v [ ReplacementFor_n ++ ] = ReplacementFor_x ; while ( * ReplacementFor_x && ! strchr ( ReplacementFor_r , * ReplacementFor_x ) ) ReplacementFor_x ++ ; if ( ! * ReplacementFor_x ) break ; * ReplacementFor_x ++ = ( 0xde4 + 1063 - 0x120b ) ; } return ReplacementFor_n ; }
>>>Func
METHOD ReplacementFor_try_combine
METHOD_RETURN int
PARAM int ReplacementFor_test_case
PARAM int \012ReplacementFor_formula
PARAM char ReplacementFor_element
RETURN return-(0xc3b+711-0xf01); return-(0xc3b+711-0xf01);
<operator>.lessEqualsThan ReplacementFor_test_case_table[ReplacementFor_test_case].ReplacementFor_output.\012ReplacementFor_element_count<=(0x99d+822-0xcd3)
<operator>.equals ReplacementFor_element==ReplacementFor_test_case_table[ReplacementFor_test_case]\012.ReplacementFor_input.ReplacementFor_combine_list[ReplacementFor_formula].base[\012(0xe7a+6260-0x26ee)]
<operator>.equals ReplacementFor_element==\012ReplacementFor_test_case_table[ReplacementFor_test_case].ReplacementFor_input.\012ReplacementFor_combine_list[ReplacementFor_formula].base[(0x1f59+1235-0x242b)]
<operator>.minus -(0xc3b+711-0xf01)
RETURN return-(0x45d+7404-0x2148); return-(0x45d+7404-0x2148);
<operator>.subtraction 0x99d+822-0xcd3
<operator>.minus -(0x45d+7404-0x2148)
<operator>.equals ReplacementFor_test_case_table[ReplacementFor_test_case\012].ReplacementFor_output.ReplacementFor_element_list[\012ReplacementFor_test_case_table[ReplacementFor_test_case].ReplacementFor_output.\012ReplacementFor_element_count-(0x137b+2672-0x1dea)]==\012ReplacementFor_test_case_table[ReplacementFor_test_case].ReplacementFor_input.\012ReplacementFor_combine_list[ReplacementFor_formula].base[(0xae0+56-0xb17)]
<operator>.equals ReplacementFor_test_case_table[ReplacementFor_test_case].\012ReplacementFor_output.ReplacementFor_element_list[ReplacementFor_test_case_table\012[ReplacementFor_test_case].ReplacementFor_output.ReplacementFor_element_count-\012(0xe89+392-0x1010)]==ReplacementFor_test_case_table[ReplacementFor_test_case].\012ReplacementFor_input.ReplacementFor_combine_list[ReplacementFor_formula].base[\012(0x67c+2080-0xe9c)]
<operator>.subtraction 0xc3b+711-0xf01
<operator>.addition 0x99d+822
<operator>.subtraction 0xe7a+6260-0x26ee
<operator>.assignment ReplacementFor_test_case_table[ReplacementFor_test_case].ReplacementFor_output.\012ReplacementFor_element_list[ReplacementFor_test_case_table[\012ReplacementFor_test_case].ReplacementFor_output.ReplacementFor_element_count-\012(0x20+2807-0xb16)]=ReplacementFor_test_case_table[ReplacementFor_test_case].\012ReplacementFor_input.ReplacementFor_combine_list[ReplacementFor_formula].\012ReplacementFor_result
RETURN return(0xf8f+3891-0x1ec2); return(0xf8f+3891-0x1ec2);
<operator>.subtraction 0x1f59+1235-0x242b
<operator>.assignment ReplacementFor_test_case_table[ReplacementFor_test_case].\012ReplacementFor_output.ReplacementFor_element_list[ReplacementFor_test_case_table\012[ReplacementFor_test_case].ReplacementFor_output.ReplacementFor_element_count-\012(0xe8f+4986-0x2208)]=ReplacementFor_test_case_table[ReplacementFor_test_case].\012ReplacementFor_input.ReplacementFor_combine_list[ReplacementFor_formula].\012ReplacementFor_result
RETURN return(0x10c+1685-0x7a1); return(0x10c+1685-0x7a1);
<operator>.addition 0xc3b+711
<operator>.subtraction 0x45d+7404-0x2148
<operator>.addition 0xe7a+6260
<operator>.subtraction 0xf8f+3891-0x1ec2
<operator>.addition 0x1f59+1235
<operator>.subtraction 0x10c+1685-0x7a1
<operator>.addition 0x45d+7404
<operator>.subtraction ReplacementFor_test_case_table[ReplacementFor_test_case].ReplacementFor_output.\012ReplacementFor_element_count-(0x137b+2672-0x1dea)
<operator>.subtraction 0xae0+56-0xb17
<operator>.subtraction ReplacementFor_test_case_table\012[ReplacementFor_test_case].ReplacementFor_output.ReplacementFor_element_count-\012(0xe89+392-0x1010)
<operator>.subtraction 0x67c+2080-0xe9c
<operator>.subtraction 0x137b+2672-0x1dea
<operator>.addition 0xae0+56
<operator>.subtraction ReplacementFor_test_case_table[\012ReplacementFor_test_case].ReplacementFor_output.ReplacementFor_element_count-\012(0x20+2807-0xb16)
<operator>.addition 0xf8f+3891
<operator>.subtraction 0xe89+392-0x1010
<operator>.addition 0x67c+2080
<operator>.subtraction ReplacementFor_test_case_table\012[ReplacementFor_test_case].ReplacementFor_output.ReplacementFor_element_count-\012(0xe8f+4986-0x2208)
<operator>.addition 0x10c+1685
<operator>.addition 0x137b+2672
<operator>.subtraction 0x20+2807-0xb16
<operator>.addition 0xe89+392
<operator>.subtraction 0xe8f+4986-0x2208
<operator>.addition 0x20+2807
<operator>.addition 0xe8f+4986
<operator>.indirectIndexAccess ReplacementFor_test_case_table[ReplacementFor_test_case]\012.ReplacementFor_input.ReplacementFor_combine_list[ReplacementFor_formula].base[\012(0xe7a+6260-0x26ee)]
<operator>.indirectIndexAccess ReplacementFor_test_case_table[ReplacementFor_test_case].ReplacementFor_input.\012ReplacementFor_combine_list[ReplacementFor_formula].base[(0x1f59+1235-0x242b)]
<operator>.fieldAccess ReplacementFor_test_case_table[ReplacementFor_test_case]\012.ReplacementFor_input.ReplacementFor_combine_list[ReplacementFor_formula].base
<operator>.fieldAccess ReplacementFor_test_case_table[ReplacementFor_test_case].ReplacementFor_input.\012ReplacementFor_combine_list[ReplacementFor_formula].base
<operator>.indirectIndexAccess ReplacementFor_test_case_table[ReplacementFor_test_case]\012.ReplacementFor_input.ReplacementFor_combine_list[ReplacementFor_formula]
FIELD_IDENTIFIER base base
<operator>.indirectIndexAccess ReplacementFor_test_case_table[ReplacementFor_test_case\012].ReplacementFor_output.ReplacementFor_element_list[\012ReplacementFor_test_case_table[ReplacementFor_test_case].ReplacementFor_output.\012ReplacementFor_element_count-(0x137b+2672-0x1dea)]
<operator>.indirectIndexAccess ReplacementFor_test_case_table[ReplacementFor_test_case].ReplacementFor_input.\012ReplacementFor_combine_list[ReplacementFor_formula].base[(0xae0+56-0xb17)]
<operator>.indirectIndexAccess ReplacementFor_test_case_table[ReplacementFor_test_case].ReplacementFor_input.\012ReplacementFor_combine_list[ReplacementFor_formula]
FIELD_IDENTIFIER base base
<operator>.indirectIndexAccess ReplacementFor_test_case_table[ReplacementFor_test_case].\012ReplacementFor_output.ReplacementFor_element_list[ReplacementFor_test_case_table\012[ReplacementFor_test_case].ReplacementFor_output.ReplacementFor_element_count-\012(0xe89+392-0x1010)]
<operator>.indirectIndexAccess ReplacementFor_test_case_table[ReplacementFor_test_case].\012ReplacementFor_input.ReplacementFor_combine_list[ReplacementFor_formula].base[\012(0x67c+2080-0xe9c)]
<operator>.fieldAccess ReplacementFor_test_case_table[ReplacementFor_test_case]\012.ReplacementFor_input.ReplacementFor_combine_list
<operator>.fieldAccess ReplacementFor_test_case_table[ReplacementFor_test_case\012].ReplacementFor_output.ReplacementFor_element_list
<operator>.fieldAccess ReplacementFor_test_case_table[ReplacementFor_test_case].ReplacementFor_input.\012ReplacementFor_combine_list[ReplacementFor_formula].base
<operator>.indirectIndexAccess ReplacementFor_test_case_table[ReplacementFor_test_case].ReplacementFor_output.\012ReplacementFor_element_list[ReplacementFor_test_case_table[\012ReplacementFor_test_case].ReplacementFor_output.ReplacementFor_element_count-\012(0x20+2807-0xb16)]
<operator>.fieldAccess ReplacementFor_test_case_table[ReplacementFor_test_case].\012ReplacementFor_input.ReplacementFor_combine_list[ReplacementFor_formula].\012ReplacementFor_result
<operator>.fieldAccess ReplacementFor_test_case_table[ReplacementFor_test_case].ReplacementFor_input.\012ReplacementFor_combine_list
<operator>.fieldAccess ReplacementFor_test_case_table[ReplacementFor_test_case].\012ReplacementFor_output.ReplacementFor_element_list
<operator>.fieldAccess ReplacementFor_test_case_table[ReplacementFor_test_case].\012ReplacementFor_input.ReplacementFor_combine_list[ReplacementFor_formula].base
<operator>.indirectIndexAccess ReplacementFor_test_case_table[ReplacementFor_test_case].\012ReplacementFor_output.ReplacementFor_element_list[ReplacementFor_test_case_table\012[ReplacementFor_test_case].ReplacementFor_output.ReplacementFor_element_count-\012(0xe8f+4986-0x2208)]
<operator>.fieldAccess ReplacementFor_test_case_table[ReplacementFor_test_case].\012ReplacementFor_input.ReplacementFor_combine_list[ReplacementFor_formula].\012ReplacementFor_result
<operator>.fieldAccess ReplacementFor_test_case_table[ReplacementFor_test_case]\012.ReplacementFor_input
FIELD_IDENTIFIER ReplacementFor_combine_list ReplacementFor_combine_list
<operator>.fieldAccess ReplacementFor_test_case_table[ReplacementFor_test_case\012].ReplacementFor_output
FIELD_IDENTIFIER ReplacementFor_element_list ReplacementFor_element_list
<operator>.fieldAccess ReplacementFor_test_case_table[ReplacementFor_test_case].ReplacementFor_output.\012ReplacementFor_element_count
<operator>.indirectIndexAccess ReplacementFor_test_case_table[ReplacementFor_test_case].ReplacementFor_input.\012ReplacementFor_combine_list[ReplacementFor_formula]
FIELD_IDENTIFIER base base
<operator>.fieldAccess ReplacementFor_test_case_table[ReplacementFor_test_case].ReplacementFor_output.\012ReplacementFor_element_list
<operator>.indirectIndexAccess ReplacementFor_test_case_table[ReplacementFor_test_case].\012ReplacementFor_input.ReplacementFor_combine_list[ReplacementFor_formula]
FIELD_IDENTIFIER ReplacementFor_result ReplacementFor_result
<operator>.fieldAccess ReplacementFor_test_case_table[ReplacementFor_test_case].ReplacementFor_input
FIELD_IDENTIFIER ReplacementFor_combine_list ReplacementFor_combine_list
<operator>.fieldAccess ReplacementFor_test_case_table[ReplacementFor_test_case].\012ReplacementFor_output
FIELD_IDENTIFIER ReplacementFor_element_list ReplacementFor_element_list
<operator>.fieldAccess ReplacementFor_test_case_table\012[ReplacementFor_test_case].ReplacementFor_output.ReplacementFor_element_count
<operator>.indirectIndexAccess ReplacementFor_test_case_table[ReplacementFor_test_case].\012ReplacementFor_input.ReplacementFor_combine_list[ReplacementFor_formula]
FIELD_IDENTIFIER base base
<operator>.fieldAccess ReplacementFor_test_case_table[ReplacementFor_test_case].\012ReplacementFor_output.ReplacementFor_element_list
<operator>.indirectIndexAccess ReplacementFor_test_case_table[ReplacementFor_test_case].\012ReplacementFor_input.ReplacementFor_combine_list[ReplacementFor_formula]
FIELD_IDENTIFIER ReplacementFor_result ReplacementFor_result
<operator>.indirectIndexAccess ReplacementFor_test_case_table[ReplacementFor_test_case]
FIELD_IDENTIFIER ReplacementFor_input ReplacementFor_input
<operator>.indirectIndexAccess ReplacementFor_test_case_table[ReplacementFor_test_case\012]
FIELD_IDENTIFIER ReplacementFor_output ReplacementFor_output
<operator>.fieldAccess ReplacementFor_test_case_table[ReplacementFor_test_case].ReplacementFor_output
FIELD_IDENTIFIER ReplacementFor_element_count ReplacementFor_element_count
<operator>.fieldAccess ReplacementFor_test_case_table[ReplacementFor_test_case].ReplacementFor_input.\012ReplacementFor_combine_list
<operator>.fieldAccess ReplacementFor_test_case_table[ReplacementFor_test_case].ReplacementFor_output
FIELD_IDENTIFIER ReplacementFor_element_list ReplacementFor_element_list
<operator>.fieldAccess ReplacementFor_test_case_table[\012ReplacementFor_test_case].ReplacementFor_output.ReplacementFor_element_count
<operator>.fieldAccess ReplacementFor_test_case_table[ReplacementFor_test_case].\012ReplacementFor_input.ReplacementFor_combine_list
<operator>.indirectIndexAccess ReplacementFor_test_case_table[ReplacementFor_test_case]
FIELD_IDENTIFIER ReplacementFor_input ReplacementFor_input
<operator>.indirectIndexAccess ReplacementFor_test_case_table[ReplacementFor_test_case]
FIELD_IDENTIFIER ReplacementFor_output ReplacementFor_output
<operator>.fieldAccess ReplacementFor_test_case_table\012[ReplacementFor_test_case].ReplacementFor_output
FIELD_IDENTIFIER ReplacementFor_element_count ReplacementFor_element_count
<operator>.fieldAccess ReplacementFor_test_case_table[ReplacementFor_test_case].\012ReplacementFor_input.ReplacementFor_combine_list
<operator>.fieldAccess ReplacementFor_test_case_table[ReplacementFor_test_case].\012ReplacementFor_output
FIELD_IDENTIFIER ReplacementFor_element_list ReplacementFor_element_list
<operator>.fieldAccess ReplacementFor_test_case_table\012[ReplacementFor_test_case].ReplacementFor_output.ReplacementFor_element_count
<operator>.fieldAccess ReplacementFor_test_case_table[ReplacementFor_test_case].\012ReplacementFor_input.ReplacementFor_combine_list
<operator>.indirectIndexAccess ReplacementFor_test_case_table[ReplacementFor_test_case]
FIELD_IDENTIFIER ReplacementFor_output ReplacementFor_output
<operator>.fieldAccess ReplacementFor_test_case_table[ReplacementFor_test_case].ReplacementFor_input
FIELD_IDENTIFIER ReplacementFor_combine_list ReplacementFor_combine_list
<operator>.indirectIndexAccess ReplacementFor_test_case_table[ReplacementFor_test_case]
FIELD_IDENTIFIER ReplacementFor_output ReplacementFor_output
<operator>.fieldAccess ReplacementFor_test_case_table[\012ReplacementFor_test_case].ReplacementFor_output
FIELD_IDENTIFIER ReplacementFor_element_count ReplacementFor_element_count
<operator>.fieldAccess ReplacementFor_test_case_table[ReplacementFor_test_case].\012ReplacementFor_input
FIELD_IDENTIFIER ReplacementFor_combine_list ReplacementFor_combine_list
<operator>.indirectIndexAccess ReplacementFor_test_case_table\012[ReplacementFor_test_case]
FIELD_IDENTIFIER ReplacementFor_output ReplacementFor_output
<operator>.fieldAccess ReplacementFor_test_case_table[ReplacementFor_test_case].\012ReplacementFor_input
FIELD_IDENTIFIER ReplacementFor_combine_list ReplacementFor_combine_list
<operator>.indirectIndexAccess ReplacementFor_test_case_table[ReplacementFor_test_case]
FIELD_IDENTIFIER ReplacementFor_output ReplacementFor_output
<operator>.fieldAccess ReplacementFor_test_case_table\012[ReplacementFor_test_case].ReplacementFor_output
FIELD_IDENTIFIER ReplacementFor_element_count ReplacementFor_element_count
<operator>.fieldAccess ReplacementFor_test_case_table[ReplacementFor_test_case].\012ReplacementFor_input
FIELD_IDENTIFIER ReplacementFor_combine_list ReplacementFor_combine_list
<operator>.indirectIndexAccess ReplacementFor_test_case_table[ReplacementFor_test_case]
FIELD_IDENTIFIER ReplacementFor_input ReplacementFor_input
<operator>.indirectIndexAccess ReplacementFor_test_case_table[\012ReplacementFor_test_case]
FIELD_IDENTIFIER ReplacementFor_output ReplacementFor_output
<operator>.indirectIndexAccess ReplacementFor_test_case_table[ReplacementFor_test_case]
FIELD_IDENTIFIER ReplacementFor_input ReplacementFor_input
<operator>.indirectIndexAccess ReplacementFor_test_case_table[ReplacementFor_test_case]
FIELD_IDENTIFIER ReplacementFor_input ReplacementFor_input
<operator>.indirectIndexAccess ReplacementFor_test_case_table\012[ReplacementFor_test_case]
FIELD_IDENTIFIER ReplacementFor_output ReplacementFor_output
<operator>.indirectIndexAccess ReplacementFor_test_case_table[ReplacementFor_test_case]
FIELD_IDENTIFIER ReplacementFor_input ReplacementFor_input
>>>PDG&144 0->2 0->3 0->4 0->7 0->8 0->11 0->15 0->16 0->17 0->20 0->23 0->24 0->25 0->26 0->27 0->28 0->29 0->31 0->33 0->34 0->35 0->37 0->38 0->39 0->41 0->42 0->43 0->44 0->45 0->46 0->47 2->1 3->1 4->1 4->7 5->1 6->1 6->1 6->1 6->7 6->10 6->12 6->17 6->24 6->25 6->29 6->30 6->48 6->50 6->52 6->53 6->60 6->70 6->71 6->90 6->91 7->8 7->8 7->13 7->20 7->27 7->30 7->31 7->34 7->35 7->42 7->49 7->51 7->54 7->55 7->56 7->57 7->61 7->62 7->65 7->72 7->73 7->74 7->75 7->76 7->80 7->81 7->92 7->93 7->94 7->95 7->96 7->101 7->102 7->112 7->113 7->114 7->115 7->132 7->133 8->5 8->9 8->14 8->15 8->23 8->32 8->33 8->38 8->39 8->44 8->58 8->59 8->66 8->67 8->82 8->83 8->84 8->85 8->86 8->103 8->104 8->105 8->106 8->107 8->122 8->123 8->124 8->125 8->138 8->139 9->5 10->1 11->1 11->6 11->6 12->1 12->1 12->10 13->8 13->18 13->19 13->20 13->26 13->27 13->36 13->37 13->43 13->46 13->49 13->51 13->56 13->57 13->63 13->64 13->65 13->77 13->78 13->79 13->80 13->81 13->97 13->98 13->99 13->100 13->101 13->102 13->116 13->117 13->118 13->119 13->120 13->121 13->134 13->135 13->136 13->137 14->5 14->9 14->15 14->21 14->22 14->23 14->28 14->40 14->41 14->45 14->47 14->68 14->69 14->87 14->88 14->89 14->108 14->109 14->110 14->111 14->126 14->127 14->128 14->129 14->130 14->131 14->140 14->141 14->142 14->143 15->9 15->9 19->1 22->1 24->1 24->12 24->12 26->19 28->22 32->40 34->30 34->30 38->32 38->32 43->36 43->36 45->40 45->40
>>>Token int ReplacementFor_try_combine ( int ReplacementFor_test_case , int ReplacementFor_formula , char ReplacementFor_element ) { if ( ReplacementFor_test_case_table [ ReplacementFor_test_case ] . ReplacementFor_output . ReplacementFor_element_count <= ( 0x99d + 822 - 0xcd3 ) ) { return - ( 0x45d + 7404 - 0x2148 ) ; } if ( ReplacementFor_element == ReplacementFor_test_case_table [ ReplacementFor_test_case ] . ReplacementFor_input . ReplacementFor_combine_list [ ReplacementFor_formula ] . base [ ( 0xe7a + 6260 - 0x26ee ) ] ) { if ( ReplacementFor_test_case_table [ ReplacementFor_test_case ] . ReplacementFor_output . ReplacementFor_element_list [ ReplacementFor_test_case_table [ ReplacementFor_test_case ] . ReplacementFor_output . ReplacementFor_element_count - ( 0x137b + 2672 - 0x1dea ) ] == ReplacementFor_test_case_table [ ReplacementFor_test_case ] . ReplacementFor_input . ReplacementFor_combine_list [ ReplacementFor_formula ] . base [ ( 0xae0 + 56 - 0xb17 ) ] ) { ReplacementFor_test_case_table [ ReplacementFor_test_case ] . ReplacementFor_output . ReplacementFor_element_list [ ReplacementFor_test_case_table [ ReplacementFor_test_case ] . ReplacementFor_output . ReplacementFor_element_count - ( 0x20 + 2807 - 0xb16 ) ] = ReplacementFor_test_case_table [ ReplacementFor_test_case ] . ReplacementFor_input . ReplacementFor_combine_list [ ReplacementFor_formula ] . ReplacementFor_result ; return ( 0xf8f + 3891 - 0x1ec2 ) ; } } if ( ReplacementFor_element == ReplacementFor_test_case_table [ ReplacementFor_test_case ] . ReplacementFor_input . ReplacementFor_combine_list [ ReplacementFor_formula ] . base [ ( 0x1f59 + 1235 - 0x242b ) ] ) { if ( ReplacementFor_test_case_table [ ReplacementFor_test_case ] . ReplacementFor_output . ReplacementFor_element_list [ ReplacementFor_test_case_table [ ReplacementFor_test_case ] . ReplacementFor_output . ReplacementFor_element_count - ( 0xe89 + 392 - 0x1010 ) ] == ReplacementFor_test_case_table [ ReplacementFor_test_case ] . ReplacementFor_input . ReplacementFor_combine_list [ ReplacementFor_formula ] . base [ ( 0x67c + 2080 - 0xe9c ) ] ) { ReplacementFor_test_case_table [ ReplacementFor_test_case ] . ReplacementFor_output . ReplacementFor_element_list [ ReplacementFor_test_case_table [ ReplacementFor_test_case ] . ReplacementFor_output . ReplacementFor_element_count - ( 0xe8f + 4986 - 0x2208 ) ] = ReplacementFor_test_case_table [ ReplacementFor_test_case ] . ReplacementFor_input . ReplacementFor_combine_list [ ReplacementFor_formula ] . ReplacementFor_result ; return ( 0x10c + 1685 - 0x7a1 ) ; } } return - ( 0xc3b + 711 - 0xf01 ) ; }
>>>Func
METHOD ReplacementFor_find_str
METHOD_RETURN ANY
<operator>.assignment ReplacementFor_j=(0x13e0+3065-0x1fd9)
<operator>.assignment ReplacementFor_num=(0x7bf+3556-0x15a3)
<operator>.assignment ReplacementFor_opp[(0x9c6+6686-0x23ca)][(0x5e4+4299-0x164b)]={\012(0x92c+5955-0x206f)}
<operator>.assignment ReplacementFor_comb[(0xb15+6076-0x22b7)][\012(0xd99+1541-0x12d6)]={(0x1451+2209-0x1cf2)}
<operator>.assignment ReplacementFor_count[\012(0x306+7944-0x21f4)][(0x668+2160-0xed6)]={(0x4d5+3896-0x140d)}
fscanf fscanf(fd,\012"\x25\x64\x20",&ReplacementFor_limit)
fscanf fscanf(fd,"\x25\x64\x20",&ReplacementFor_limit)
printf printf("\n")
fscanf fscanf(fd,\012"\x25\x64\x20",&ReplacementFor_limit)
printf printf("\n")
RETURN return ReplacementFor_num; return ReplacementFor_num;
<operator>.lessThan i<\012ReplacementFor_limit
<operator>.postIncrement i++
<operator>.lessThan i<ReplacementFor_limit
<operator>.postIncrement i++
<operator>.lessThan i<(0x16f2+3153-0x2329)
<operator>.postIncrement i++
<operator>.lessThan i<\012ReplacementFor_limit
<operator>.postIncrement i++
IDENTIFIER ReplacementFor_num return ReplacementFor_num;
<operator>.subtraction 0x13e0+3065-0x1fd9
<operator>.subtraction 0x7bf+3556-0x15a3
<operator>.arrayInitializer {\012(0x92c+5955-0x206f)}
<operator>.arrayInitializer {(0x1451+2209-0x1cf2)}
<operator>.arrayInitializer {(0x4d5+3896-0x140d)}
<operator>.assignment i=(0x55d+5201-0x19ae)
fscanf fscanf(fd,"\x25\x63\x25\x63\x25\x63\x20",&\012ReplacementFor_x,&ReplacementFor_y,&ReplacementFor_r)
printf printf(\012"\x20\x25\x63\x25\x63\x25\x63\x20",ReplacementFor_x,ReplacementFor_y,\012ReplacementFor_r)
<operator>.assignment ReplacementFor_comb[ReplacementFor_x-\012((char)(0x1b4a+943-0x1eb8))][ReplacementFor_count[ReplacementFor_x-\012((char)(0x206+976-0x595))][(0x39d+3791-0x126c)]]=ReplacementFor_y
<operator>.postIncrement ReplacementFor_count[ReplacementFor_x-((char)(0x500+1115-0x91a))][\012(0x23bb+248-0x24b3)]++
<operator>.assignment ReplacementFor_comb[ReplacementFor_x-\012((char)(0x92+6063-0x1800))][ReplacementFor_count[ReplacementFor_x-\012((char)(0x1447+1629-0x1a63))][(0xce4+4302-0x1db2)]]=ReplacementFor_r
<operator>.postIncrement ReplacementFor_count[ReplacementFor_x-((char)(0x14c3+1742-0x1b50))][\012(0xc7b+1358-0x11c9)]++
<operator>.assignment ReplacementFor_comb[ReplacementFor_y-\012((char)(0xeef+5248-0x232e))][ReplacementFor_count[ReplacementFor_y-\012((char)(0x7ba+6978-0x22bb))][(0x740+5340-0x1c1c)]]=ReplacementFor_x
<operator>.postIncrement ReplacementFor_count[ReplacementFor_y-((char)(0x794+8068-0x26d7))][\012(0xa1c+3850-0x1926)]++
<operator>.assignment ReplacementFor_comb[ReplacementFor_y-\012((char)(0x16af+1355-0x1bb9))][ReplacementFor_count[ReplacementFor_y-\012((char)(0x19c0+3168-0x25df))][(0x309+3069-0xf06)]]=ReplacementFor_r
<operator>.postIncrement ReplacementFor_count[ReplacementFor_y-((char)(0x5b1+2127-0xdbf))][\012(0x10a3+5128-0x24ab)]++
<operator>.assignment i=\012(0x317+6536-0x1c9f)
fscanf fscanf(fd,"\x25\x63\x25\x63\x20"\012,&ReplacementFor_x,&ReplacementFor_y)
printf printf("\x20\x25\x63\x25\x63\x20",\012ReplacementFor_x,ReplacementFor_y)
<operator>.assignment ReplacementFor_opp[ReplacementFor_x-\012((char)(0xbab+5235-0x1fdd))][ReplacementFor_count[ReplacementFor_x-\012((char)(0xc39+3589-0x19fd))][(0xf94+2147-0x17f6)]]=ReplacementFor_y
<operator>.postIncrement ReplacementFor_count[ReplacementFor_x-((char)(0x1324+4644-0x2507))][\012(0x209f+1236-0x2572)]++
<operator>.assignment ReplacementFor_opp[ReplacementFor_y-\012((char)(0x255+9273-0x264d))][ReplacementFor_count[ReplacementFor_y-\012((char)(0x200+6280-0x1a47))][(0x444+2290-0xd35)]]=ReplacementFor_x
<operator>.postIncrement ReplacementFor_count[ReplacementFor_y-((char)(0x1a92+2196-0x22e5))][\012(0xeb7+5301-0x236b)]++
<operator>.assignment i=(0x16fd+3950-0x266b)
printf printf("\x20\x28\x25\x63\x2c\x25\x64\x2c\x25\x64\x29\x20" \012((char)(0x120+3470-0xe6d))+i ReplacementFor_count[i][(0xfc+9638-0x26a2)] \012ReplacementFor_count[i][(0x18ef+2391-0x2245)])
<operator>.assignment i=(0x7d8+5641-0x1de1)
fscanf fscanf(fd,"\x25\x63",&ReplacementFor_r)
printf printf(\012"\x6e\x65\x77\x20\x25\x63\x20",ReplacementFor_r)
<operator>.assignment ReplacementFor_doit=\012(0x4d+4726-0x12c2)
<operator>.assignment ReplacementFor_result[ReplacementFor_num]=ReplacementFor_r
<operator>.postIncrement ReplacementFor_num++
<operator>.addition 0x13e0+3065
<operator>.addition 0x7bf+3556
<operator>.subtraction 0x92c+5955-0x206f
<operator>.subtraction 0x1451+2209-0x1cf2
<operator>.subtraction 0x4d5+3896-0x140d
<operator>.subtraction 0x16f2+3153-0x2329
<operator>.logicalAnd (\012ReplacementFor_num>(0xac2+5014-0x1e57))&&(ReplacementFor_j<ReplacementFor_count[\012ReplacementFor_result[ReplacementFor_num-(0x12b+3381-0xe5e)]-\012((char)(0x447+3015-0xfcd))][(0x18da+1331-0x1e0d)])
<operator>.assignmentPlus ReplacementFor_j+=\012(0x576+3543-0x134b)
<operator>.logicalAnd ReplacementFor_doit&&(ReplacementFor_num>\012(0xf87+5754-0x2600))&&(ReplacementFor_k<ReplacementFor_num)
<operator>.postIncrement ReplacementFor_k++
<operator>.addition 0x92c+5955
<operator>.addition 0x1451+2209
<operator>.addition 0x4d5+3896
<operator>.subtraction 0x55d+5201-0x19ae
<operator>.subtraction 0x317+6536-0x1c9f
<operator>.subtraction 0x16fd+3950-0x266b
<operator>.addition 0x16f2+3153
<operator>.addition ((char)(0x120+3470-0xe6d))+i
<operator>.subtraction 0x7d8+5641-0x1de1
<operator>.subtraction 0x4d+4726-0x12c2
<operator>.assignment ReplacementFor_j=(0x198+6785-0x1c19)
<operator>.assignment ReplacementFor_k=(0x459+3063-0x1050)
<operator>.addition 0x55d+5201
<operator>.subtraction 0x23bb+248-0x24b3
<operator>.subtraction 0xc7b+1358-0x11c9
<operator>.subtraction 0xa1c+3850-0x1926
<operator>.subtraction 0x10a3+5128-0x24ab
<operator>.addition 0x317+6536
<operator>.subtraction 0x209f+1236-0x2572
<operator>.subtraction 0xeb7+5301-0x236b
<operator>.addition 0x16fd+3950
<operator>.cast (char)(0x120+3470-0xe6d)
<operator>.subtraction 0xfc+9638-0x26a2
<operator>.subtraction 0x18ef+2391-0x2245
<operator>.addition 0x7d8+5641
<operator>.addition 0x4d+4726
<operator>.greaterThan ReplacementFor_num>(0xac2+5014-0x1e57)
<operator>.lessThan ReplacementFor_j<ReplacementFor_count[\012ReplacementFor_result[ReplacementFor_num-(0x12b+3381-0xe5e)]-\012((char)(0x447+3015-0xfcd))][(0x18da+1331-0x1e0d)]
<operator>.subtraction 0x576+3543-0x134b
<operator>.equals ReplacementFor_comb[ReplacementFor_result[\012ReplacementFor_num-(0x1c10+1264-0x20fe)]-((char)(0x15f6+4209-0x2626))][\012ReplacementFor_j]==ReplacementFor_r
<operator>.logicalAnd ReplacementFor_doit&&(ReplacementFor_num>\012(0xf87+5754-0x2600))
<operator>.lessThan ReplacementFor_k<ReplacementFor_num
<operator>.lessThan ReplacementFor_j<ReplacementFor_count\012[ReplacementFor_result[ReplacementFor_k]-((char)(0x1689+3962-0x25c2))][\012(0x1920+1223-0x1de6)]
<operator>.postIncrement ReplacementFor_j++
<operator>.subtraction ReplacementFor_x-\012((char)(0x1b4a+943-0x1eb8))
<operator>.subtraction 0x39d+3791-0x126c
<operator>.subtraction ReplacementFor_x-((char)(0x500+1115-0x91a))
<operator>.addition 0x23bb+248
<operator>.subtraction ReplacementFor_x-\012((char)(0x92+6063-0x1800))
<operator>.subtraction 0xce4+4302-0x1db2
<operator>.subtraction ReplacementFor_x-((char)(0x14c3+1742-0x1b50))
<operator>.addition 0xc7b+1358
<operator>.subtraction ReplacementFor_y-\012((char)(0xeef+5248-0x232e))
<operator>.subtraction 0x740+5340-0x1c1c
<operator>.subtraction ReplacementFor_y-((char)(0x794+8068-0x26d7))
<operator>.addition 0xa1c+3850
<operator>.subtraction ReplacementFor_y-\012((char)(0x16af+1355-0x1bb9))
<operator>.subtraction 0x309+3069-0xf06
<operator>.subtraction ReplacementFor_y-((char)(0x5b1+2127-0xdbf))
<operator>.addition 0x10a3+5128
<operator>.subtraction ReplacementFor_x-\012((char)(0xbab+5235-0x1fdd))
<operator>.subtraction 0xf94+2147-0x17f6
<operator>.subtraction ReplacementFor_x-((char)(0x1324+4644-0x2507))
<operator>.addition 0x209f+1236
<operator>.subtraction ReplacementFor_y-\012((char)(0x255+9273-0x264d))
<operator>.subtraction 0x444+2290-0xd35
<operator>.subtraction ReplacementFor_y-((char)(0x1a92+2196-0x22e5))
<operator>.addition 0xeb7+5301
<operator>.subtraction 0x120+3470-0xe6d
<operator>.addition 0xfc+9638
<operator>.addition 0x18ef+2391
<operator>.subtraction 0x198+6785-0x1c19
<operator>.subtraction 0xac2+5014-0x1e57
<operator>.addition 0x576+3543
<operator>.assignment ReplacementFor_result[ReplacementFor_num-\012(0x7f2+2396-0x114c)]=ReplacementFor_comb[ReplacementFor_result[\012ReplacementFor_num-(0x1a99+1233-0x1f68)]-((char)(0x624+5186-0x1a25))][\012ReplacementFor_j+(0x1610+244-0x1703)]
printf printf(\012"\x28\x63\x6f\x6d\x62\x20\x25\x64\x20\x25\x63\x29" ReplacementFor_j \012ReplacementFor_result[ReplacementFor_num-(0x1f64+1950-0x2700)])
<operator>.postDecrement ReplacementFor_num--
<operator>.assignment ReplacementFor_doit=(0x18e9+3438-0x2657)
<operator>.subtraction 0x459+3063-0x1050
<operator>.greaterThan ReplacementFor_num>\012(0xf87+5754-0x2600)
<operator>.assignment ReplacementFor_j=(0x111d+1920-0x189d)
printf printf(\012"\x28\x6f\x70\x70\x69\x74\x20\x25\x64\x20\x25\x63\x25\x63\x25\x63\x29" \012ReplacementFor_j ReplacementFor_result[ReplacementFor_num-(0x1100+5347-0x25e1)] \012ReplacementFor_r ReplacementFor_opp[ReplacementFor_result[ReplacementFor_num-\012(0x66a+4986-0x19e2)]-((char)(0x145a+4489-0x25a2))][ReplacementFor_j])
<operator>.cast (char)(0x1b4a+943-0x1eb8)
<operator>.subtraction ReplacementFor_x-\012((char)(0x206+976-0x595))
<operator>.addition 0x39d+3791
<operator>.cast (char)(0x500+1115-0x91a)
<operator>.cast (char)(0x92+6063-0x1800)
<operator>.subtraction ReplacementFor_x-\012((char)(0x1447+1629-0x1a63))
<operator>.addition 0xce4+4302
<operator>.cast (char)(0x14c3+1742-0x1b50)
<operator>.cast (char)(0xeef+5248-0x232e)
<operator>.subtraction ReplacementFor_y-\012((char)(0x7ba+6978-0x22bb))
<operator>.addition 0x740+5340
<operator>.cast (char)(0x794+8068-0x26d7)
<operator>.cast (char)(0x16af+1355-0x1bb9)
<operator>.subtraction ReplacementFor_y-\012((char)(0x19c0+3168-0x25df))
<operator>.addition 0x309+3069
<operator>.cast (char)(0x5b1+2127-0xdbf)
<operator>.cast (char)(0xbab+5235-0x1fdd)
<operator>.subtraction ReplacementFor_x-\012((char)(0xc39+3589-0x19fd))
<operator>.addition 0xf94+2147
<operator>.cast (char)(0x1324+4644-0x2507)
<operator>.cast (char)(0x255+9273-0x264d)
<operator>.subtraction ReplacementFor_y-\012((char)(0x200+6280-0x1a47))
<operator>.addition 0x444+2290
<operator>.cast (char)(0x1a92+2196-0x22e5)
<operator>.addition 0x120+3470
<operator>.addition 0x198+6785
<operator>.addition 0xac2+5014
<operator>.subtraction 0x18da+1331-0x1e0d
<operator>.addition 0x459+3063
<operator>.subtraction 0xf87+5754-0x2600
<operator>.equals ReplacementFor_opp[ReplacementFor_result[ReplacementFor_k]-\012((char)(0x756+4000-0x16b5))][ReplacementFor_j]==ReplacementFor_r
<operator>.subtraction 0x1b4a+943-0x1eb8
<operator>.cast (char)(0x206+976-0x595)
<operator>.subtraction 0x500+1115-0x91a
<operator>.subtraction 0x92+6063-0x1800
<operator>.cast (char)(0x1447+1629-0x1a63)
<operator>.subtraction 0x14c3+1742-0x1b50
<operator>.subtraction 0xeef+5248-0x232e
<operator>.cast (char)(0x7ba+6978-0x22bb)
<operator>.subtraction 0x794+8068-0x26d7
<operator>.subtraction 0x16af+1355-0x1bb9
<operator>.cast (char)(0x19c0+3168-0x25df)
<operator>.subtraction 0x5b1+2127-0xdbf
<operator>.subtraction 0xbab+5235-0x1fdd
<operator>.cast (char)(0xc39+3589-0x19fd)
<operator>.subtraction 0x1324+4644-0x2507
<operator>.subtraction 0x255+9273-0x264d
<operator>.cast (char)(0x200+6280-0x1a47)
<operator>.subtraction 0x1a92+2196-0x22e5
<operator>.subtraction ReplacementFor_result[ReplacementFor_num-(0x12b+3381-0xe5e)]-\012((char)(0x447+3015-0xfcd))
<operator>.addition 0x18da+1331
<operator>.subtraction 0x18e9+3438-0x2657
<operator>.addition 0xf87+5754
<operator>.subtraction 0x111d+1920-0x189d
<operator>.subtraction 0x1920+1223-0x1de6
<operator>.assignment ReplacementFor_num=(0x5c6+3458-0x1348)
printf printf(\012"\x28\x6f\x70\x70\x20\x25\x64\x20\x25\x63\x25\x63\x29" ReplacementFor_j \012ReplacementFor_result[ReplacementFor_num-(0x1b87+1462-0x213b)],ReplacementFor_r)
<operator>.addition 0x1b4a+943
<operator>.subtraction 0x206+976-0x595
<operator>.addition 0x500+1115
<operator>.addition 0x92+6063
<operator>.subtraction 0x1447+1629-0x1a63
<operator>.addition 0x14c3+1742
<operator>.addition 0xeef+5248
<operator>.subtraction 0x7ba+6978-0x22bb
<operator>.addition 0x794+8068
<operator>.addition 0x16af+1355
<operator>.subtraction 0x19c0+3168-0x25df
<operator>.addition 0x5b1+2127
<operator>.addition 0xbab+5235
<operator>.subtraction 0xc39+3589-0x19fd
<operator>.addition 0x1324+4644
<operator>.addition 0x255+9273
<operator>.subtraction 0x200+6280-0x1a47
<operator>.addition 0x1a92+2196
<operator>.cast (char)(0x447+3015-0xfcd)
<operator>.subtraction ReplacementFor_result[\012ReplacementFor_num-(0x1c10+1264-0x20fe)]-((char)(0x15f6+4209-0x2626))
<operator>.subtraction ReplacementFor_num-\012(0x7f2+2396-0x114c)
<operator>.addition ReplacementFor_j+(0x1610+244-0x1703)
<operator>.subtraction ReplacementFor_num-(0x1f64+1950-0x2700)
<operator>.addition 0x18e9+3438
<operator>.addition 0x111d+1920
<operator>.subtraction ReplacementFor_result[ReplacementFor_k]-((char)(0x1689+3962-0x25c2))
<operator>.addition 0x1920+1223
<operator>.subtraction ReplacementFor_num-(0x1100+5347-0x25e1)
<operator>.addition 0x206+976
<operator>.addition 0x1447+1629
<operator>.addition 0x7ba+6978
<operator>.addition 0x19c0+3168
<operator>.addition 0xc39+3589
<operator>.addition 0x200+6280
<operator>.subtraction ReplacementFor_num-(0x12b+3381-0xe5e)
<operator>.subtraction 0x447+3015-0xfcd
<operator>.cast (char)(0x15f6+4209-0x2626)
<operator>.subtraction 0x7f2+2396-0x114c
<operator>.subtraction ReplacementFor_result[\012ReplacementFor_num-(0x1a99+1233-0x1f68)]-((char)(0x624+5186-0x1a25))
<operator>.subtraction 0x1610+244-0x1703
<operator>.subtraction 0x1f64+1950-0x2700
<operator>.cast (char)(0x1689+3962-0x25c2)
<operator>.subtraction 0x1100+5347-0x25e1
<operator>.subtraction ReplacementFor_result[ReplacementFor_num-\012(0x66a+4986-0x19e2)]-((char)(0x145a+4489-0x25a2))
<operator>.subtraction 0x5c6+3458-0x1348
<operator>.subtraction 0x12b+3381-0xe5e
<operator>.addition 0x447+3015
<operator>.subtraction ReplacementFor_num-(0x1c10+1264-0x20fe)
<operator>.subtraction 0x15f6+4209-0x2626
<operator>.addition 0x7f2+2396
<operator>.cast (char)(0x624+5186-0x1a25)
<operator>.addition 0x1610+244
<operator>.addition 0x1f64+1950
<operator>.subtraction 0x1689+3962-0x25c2
<operator>.addition 0x1100+5347
<operator>.cast (char)(0x145a+4489-0x25a2)
<operator>.subtraction ReplacementFor_result[ReplacementFor_k]-\012((char)(0x756+4000-0x16b5))
<operator>.addition 0x5c6+3458
<operator>.subtraction ReplacementFor_num-(0x1b87+1462-0x213b)
<operator>.addition 0x12b+3381
<operator>.subtraction 0x1c10+1264-0x20fe
<operator>.addition 0x15f6+4209
<operator>.subtraction ReplacementFor_num-(0x1a99+1233-0x1f68)
<operator>.subtraction 0x624+5186-0x1a25
<operator>.addition 0x1689+3962
<operator>.subtraction ReplacementFor_num-\012(0x66a+4986-0x19e2)
<operator>.subtraction 0x145a+4489-0x25a2
<operator>.cast (char)(0x756+4000-0x16b5)
<operator>.subtraction 0x1b87+1462-0x213b
<operator>.addition 0x1c10+1264
<operator>.subtraction 0x1a99+1233-0x1f68
<operator>.addition 0x624+5186
<operator>.subtraction 0x66a+4986-0x19e2
<operator>.addition 0x145a+4489
<operator>.subtraction 0x756+4000-0x16b5
<operator>.addition 0x1b87+1462
<operator>.addition 0x1a99+1233
<operator>.addition 0x66a+4986
<operator>.addition 0x756+4000
<operator>.addressOf &\012ReplacementFor_x
<operator>.addressOf &ReplacementFor_y
<operator>.addressOf &ReplacementFor_r
<operator>.indirectIndexAccess ReplacementFor_comb[ReplacementFor_x-\012((char)(0x1b4a+943-0x1eb8))][ReplacementFor_count[ReplacementFor_x-\012((char)(0x206+976-0x595))][(0x39d+3791-0x126c)]]
<operator>.indirectIndexAccess ReplacementFor_count[ReplacementFor_x-((char)(0x500+1115-0x91a))][\012(0x23bb+248-0x24b3)]
<operator>.indirectIndexAccess ReplacementFor_comb[ReplacementFor_x-\012((char)(0x92+6063-0x1800))][ReplacementFor_count[ReplacementFor_x-\012((char)(0x1447+1629-0x1a63))][(0xce4+4302-0x1db2)]]
<operator>.indirectIndexAccess ReplacementFor_count[ReplacementFor_x-((char)(0x14c3+1742-0x1b50))][\012(0xc7b+1358-0x11c9)]
<operator>.indirectIndexAccess ReplacementFor_comb[ReplacementFor_y-\012((char)(0xeef+5248-0x232e))][ReplacementFor_count[ReplacementFor_y-\012((char)(0x7ba+6978-0x22bb))][(0x740+5340-0x1c1c)]]
<operator>.indirectIndexAccess ReplacementFor_count[ReplacementFor_y-((char)(0x794+8068-0x26d7))][\012(0xa1c+3850-0x1926)]
<operator>.indirectIndexAccess ReplacementFor_comb[ReplacementFor_y-\012((char)(0x16af+1355-0x1bb9))][ReplacementFor_count[ReplacementFor_y-\012((char)(0x19c0+3168-0x25df))][(0x309+3069-0xf06)]]
<operator>.indirectIndexAccess ReplacementFor_count[ReplacementFor_y-((char)(0x5b1+2127-0xdbf))][\012(0x10a3+5128-0x24ab)]
<operator>.addressOf &ReplacementFor_x
<operator>.addressOf &ReplacementFor_y
<operator>.indirectIndexAccess ReplacementFor_opp[ReplacementFor_x-\012((char)(0xbab+5235-0x1fdd))][ReplacementFor_count[ReplacementFor_x-\012((char)(0xc39+3589-0x19fd))][(0xf94+2147-0x17f6)]]
<operator>.indirectIndexAccess ReplacementFor_count[ReplacementFor_x-((char)(0x1324+4644-0x2507))][\012(0x209f+1236-0x2572)]
<operator>.indirectIndexAccess ReplacementFor_opp[ReplacementFor_y-\012((char)(0x255+9273-0x264d))][ReplacementFor_count[ReplacementFor_y-\012((char)(0x200+6280-0x1a47))][(0x444+2290-0xd35)]]
<operator>.indirectIndexAccess ReplacementFor_count[ReplacementFor_y-((char)(0x1a92+2196-0x22e5))][\012(0xeb7+5301-0x236b)]
<operator>.indirectIndexAccess ReplacementFor_count[i][(0xfc+9638-0x26a2)]
<operator>.indirectIndexAccess ReplacementFor_count[i][(0x18ef+2391-0x2245)]
<operator>.addressOf &ReplacementFor_r
<operator>.indirectIndexAccess ReplacementFor_result[ReplacementFor_num]
<operator>.indirectIndexAccess ReplacementFor_comb[ReplacementFor_x-\012((char)(0x1b4a+943-0x1eb8))]
<operator>.indirectIndexAccess ReplacementFor_count[ReplacementFor_x-\012((char)(0x206+976-0x595))][(0x39d+3791-0x126c)]
<operator>.indirectIndexAccess ReplacementFor_count[ReplacementFor_x-((char)(0x500+1115-0x91a))]
<operator>.indirectIndexAccess ReplacementFor_comb[ReplacementFor_x-\012((char)(0x92+6063-0x1800))]
<operator>.indirectIndexAccess ReplacementFor_count[ReplacementFor_x-\012((char)(0x1447+1629-0x1a63))][(0xce4+4302-0x1db2)]
<operator>.indirectIndexAccess ReplacementFor_count[ReplacementFor_x-((char)(0x14c3+1742-0x1b50))]
<operator>.indirectIndexAccess ReplacementFor_comb[ReplacementFor_y-\012((char)(0xeef+5248-0x232e))]
<operator>.indirectIndexAccess ReplacementFor_count[ReplacementFor_y-\012((char)(0x7ba+6978-0x22bb))][(0x740+5340-0x1c1c)]
<operator>.indirectIndexAccess ReplacementFor_count[ReplacementFor_y-((char)(0x794+8068-0x26d7))]
<operator>.indirectIndexAccess ReplacementFor_comb[ReplacementFor_y-\012((char)(0x16af+1355-0x1bb9))]
<operator>.indirectIndexAccess ReplacementFor_count[ReplacementFor_y-\012((char)(0x19c0+3168-0x25df))][(0x309+3069-0xf06)]
<operator>.indirectIndexAccess ReplacementFor_count[ReplacementFor_y-((char)(0x5b1+2127-0xdbf))]
<operator>.indirectIndexAccess ReplacementFor_opp[ReplacementFor_x-\012((char)(0xbab+5235-0x1fdd))]
<operator>.indirectIndexAccess ReplacementFor_count[ReplacementFor_x-\012((char)(0xc39+3589-0x19fd))][(0xf94+2147-0x17f6)]
<operator>.indirectIndexAccess ReplacementFor_count[ReplacementFor_x-((char)(0x1324+4644-0x2507))]
<operator>.indirectIndexAccess ReplacementFor_opp[ReplacementFor_y-\012((char)(0x255+9273-0x264d))]
<operator>.indirectIndexAccess ReplacementFor_count[ReplacementFor_y-\012((char)(0x200+6280-0x1a47))][(0x444+2290-0xd35)]
<operator>.indirectIndexAccess ReplacementFor_count[ReplacementFor_y-((char)(0x1a92+2196-0x22e5))]
<operator>.indirectIndexAccess ReplacementFor_count[i]
<operator>.indirectIndexAccess ReplacementFor_count[i]
<operator>.indirectIndexAccess ReplacementFor_count[ReplacementFor_x-\012((char)(0x206+976-0x595))]
<operator>.indirectIndexAccess ReplacementFor_count[ReplacementFor_x-\012((char)(0x1447+1629-0x1a63))]
<operator>.indirectIndexAccess ReplacementFor_count[ReplacementFor_y-\012((char)(0x7ba+6978-0x22bb))]
<operator>.indirectIndexAccess ReplacementFor_count[ReplacementFor_y-\012((char)(0x19c0+3168-0x25df))]
<operator>.indirectIndexAccess ReplacementFor_count[ReplacementFor_x-\012((char)(0xc39+3589-0x19fd))]
<operator>.indirectIndexAccess ReplacementFor_count[ReplacementFor_y-\012((char)(0x200+6280-0x1a47))]
UNKNOWN char char
<operator>.indirectIndexAccess ReplacementFor_count[\012ReplacementFor_result[ReplacementFor_num-(0x12b+3381-0xe5e)]-\012((char)(0x447+3015-0xfcd))][(0x18da+1331-0x1e0d)]
<operator>.indirectIndexAccess ReplacementFor_count[\012ReplacementFor_result[ReplacementFor_num-(0x12b+3381-0xe5e)]-\012((char)(0x447+3015-0xfcd))]
<operator>.indirectIndexAccess ReplacementFor_comb[ReplacementFor_result[\012ReplacementFor_num-(0x1c10+1264-0x20fe)]-((char)(0x15f6+4209-0x2626))][\012ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_count\012[ReplacementFor_result[ReplacementFor_k]-((char)(0x1689+3962-0x25c2))][\012(0x1920+1223-0x1de6)]
UNKNOWN char char
UNKNOWN char char
UNKNOWN char char
UNKNOWN char char
UNKNOWN char char
UNKNOWN char char
UNKNOWN char char
UNKNOWN char char
UNKNOWN char char
UNKNOWN char char
UNKNOWN char char
UNKNOWN char char
<operator>.indirectIndexAccess ReplacementFor_comb[ReplacementFor_result[\012ReplacementFor_num-(0x1c10+1264-0x20fe)]-((char)(0x15f6+4209-0x2626))]
<operator>.indirectIndexAccess ReplacementFor_result[ReplacementFor_num-\012(0x7f2+2396-0x114c)]
<operator>.indirectIndexAccess ReplacementFor_comb[ReplacementFor_result[\012ReplacementFor_num-(0x1a99+1233-0x1f68)]-((char)(0x624+5186-0x1a25))][\012ReplacementFor_j+(0x1610+244-0x1703)]
<operator>.indirectIndexAccess ReplacementFor_result[ReplacementFor_num-(0x1f64+1950-0x2700)]
<operator>.indirectIndexAccess ReplacementFor_count\012[ReplacementFor_result[ReplacementFor_k]-((char)(0x1689+3962-0x25c2))]
<operator>.indirectIndexAccess ReplacementFor_result[ReplacementFor_num-(0x1100+5347-0x25e1)]
<operator>.indirectIndexAccess ReplacementFor_opp[ReplacementFor_result[ReplacementFor_num-\012(0x66a+4986-0x19e2)]-((char)(0x145a+4489-0x25a2))][ReplacementFor_j]
UNKNOWN char char
UNKNOWN char char
UNKNOWN char char
UNKNOWN char char
UNKNOWN char char
UNKNOWN char char
<operator>.indirectIndexAccess ReplacementFor_result[ReplacementFor_num-(0x12b+3381-0xe5e)]
<operator>.indirectIndexAccess ReplacementFor_comb[ReplacementFor_result[\012ReplacementFor_num-(0x1a99+1233-0x1f68)]-((char)(0x624+5186-0x1a25))]
<operator>.indirectIndexAccess ReplacementFor_opp[ReplacementFor_result[ReplacementFor_num-\012(0x66a+4986-0x19e2)]-((char)(0x145a+4489-0x25a2))]
<operator>.indirectIndexAccess ReplacementFor_opp[ReplacementFor_result[ReplacementFor_k]-\012((char)(0x756+4000-0x16b5))][ReplacementFor_j]
UNKNOWN char char
<operator>.indirectIndexAccess ReplacementFor_result[\012ReplacementFor_num-(0x1c10+1264-0x20fe)]
<operator>.indirectIndexAccess ReplacementFor_result[ReplacementFor_k]
<operator>.indirectIndexAccess ReplacementFor_opp[ReplacementFor_result[ReplacementFor_k]-\012((char)(0x756+4000-0x16b5))]
<operator>.indirectIndexAccess ReplacementFor_result[ReplacementFor_num-(0x1b87+1462-0x213b)]
UNKNOWN char char
<operator>.indirectIndexAccess ReplacementFor_result[\012ReplacementFor_num-(0x1a99+1233-0x1f68)]
UNKNOWN char char
<operator>.indirectIndexAccess ReplacementFor_result[ReplacementFor_num-\012(0x66a+4986-0x19e2)]
UNKNOWN char char
UNKNOWN char char
<operator>.indirectIndexAccess ReplacementFor_result[ReplacementFor_k]
UNKNOWN char char
>>>PDG&365 0->7 0->8 0->9 0->10 0->11 0->13 0->14 0->15 0->16 0->17 0->18 0->19 0->20 0->21 0->22 0->23 0->28 0->29 0->30 0->32 0->34 0->36 0->39 0->40 0->41 0->43 0->46 0->48 0->49 0->51 0->52 0->53 0->54 0->55 0->56 0->57 0->58 0->60 0->62 0->63 0->64 0->65 0->66 0->67 0->68 0->69 0->70 0->71 0->72 0->75 0->76 0->77 0->78 0->79 0->80 0->81 0->82 0->83 0->85 0->86 0->87 0->88 0->89 0->90 0->91 0->92 0->93 0->94 0->95 0->96 0->97 0->98 0->99 0->100 0->101 0->102 0->103 0->104 0->105 0->106 0->107 0->108 0->109 0->110 0->111 0->112 0->113 0->114 0->115 0->116 0->117 0->118 0->119 0->120 0->121 0->122 0->123 0->124 0->125 0->126 0->128 0->129 0->131 0->132 0->134 0->136 0->137 0->140 0->141 0->144 0->145 0->148 0->149 0->152 0->153 0->156 0->157 0->159 0->160 0->161 0->162 0->163 0->164 0->165 0->166 0->168 0->169 0->171 0->172 0->174 0->175 0->177 0->178 0->180 0->181 0->183 0->185 0->186 0->187 0->188 0->189 0->191 0->192 0->193 0->194 0->195 0->196 0->197 0->198 0->199 0->200 0->201 0->202 0->203 0->204 0->205 0->206 0->207 0->208 0->209 0->212 0->213 0->214 0->215 0->216 0->218 0->219 0->220 0->221 0->222 0->223 0->224 0->225 0->226 0->227 0->229 0->231 0->232 0->234 0->236 0->237 0->238 0->239 0->240 0->241 0->243 0->244 0->245 0->246 0->249 0->250 0->251 0->252 0->253 0->254 0->255 0->256 0->257 0->258 0->260 0->261 0->262 0->263 0->264 0->265 0->266 0->267 0->268 0->269 0->270 2->1 2->1 2->1 3->1 3->1 3->1 3->21 3->52 4->1 4->1 4->1 5->1 5->1 5->1 6->1 6->1 6->1 7->8 7->8 7->13 7->15 7->28 8->1 8->10 8->10 8->15 8->19 8->39 10->1 10->1 10->1 10->19 10->48 11->1 12->1 13->8 13->13 13->14 13->14 13->15 13->28 13->29 13->30 13->31 13->32 13->33 13->34 13->35 13->36 13->37 13->76 13->77 13->78 13->79 13->97 13->98 13->99 13->100 13->101 13->102 13->103 13->104 13->105 13->106 13->107 13->108 13->109 13->110 13->111 13->112 13->135 13->136 13->137 13->138 13->139 13->140 13->141 13->142 13->143 13->144 13->145 13->146 13->147 13->148 13->149 13->150 13->166 13->167 13->168 13->169 13->170 13->171 13->172 13->173 13->174 13->175 13->176 13->177 13->192 13->193 13->194 13->195 13->196 13->197 13->198 13->199 13->200 13->201 13->202 13->203 13->220 13->221 13->222 13->223 13->271 13->272 13->273 13->274 13->275 13->276 13->277 13->278 13->279 13->280 13->281 13->292 13->293 13->294 13->295 13->296 13->297 13->298 13->299 13->300 13->301 13->302 13->303 13->312 13->313 13->314 13->315 13->323 13->324 13->325 13->326 13->327 13->328 13->329 13->330 13->342 13->343 13->344 13->345 14->1 14->13 15->1 15->10 15->15 15->16 15->16 15->19 15->39 15->40 15->41 15->42 15->43 15->44 15->81 15->82 15->113 15->114 15->115 15->116 15->117 15->118 15->119 15->120 15->151 15->152 15->153 15->154 15->155 15->156 15->157 15->158 15->178 15->179 15->180 15->181 15->182 15->183 15->204 15->205 15->206 15->207 15->208 15->209 15->224 15->225 15->282 15->283 15->284 15->285 15->286 15->287 15->304 15->305 15->306 15->307 15->308 15->309 15->316 15->317 15->331 15->332 15->333 15->334 15->346 15->347 16->1 16->15 17->1 17->1 17->17 17->18 17->18 17->46 17->46 17->58 17->69 17->70 17->70 17->84 17->85 17->86 17->121 17->122 17->123 17->159 17->288 17->289 17->310 17->311 17->318 18->1 18->17 19->1 19->1 19->1 19->19 19->20 19->20 19->48 19->49 19->50 19->51 19->52 19->59 19->61 19->72 19->73 19->74 19->88 19->89 19->93 19->124 19->125 19->131 19->132 19->160 19->161 19->163 19->164 19->187 19->290 19->291 20->1 20->19 21->12 22->1 22->2 22->2 23->1 23->3 23->3 24->1 24->4 25->1 25->5 26->1 26->6 27->1 27->1 27->13 28->1 28->1 28->1 28->1 28->8 28->29 28->29 28->29 28->30 28->32 28->34 28->36 28->39 28->39 28->40 28->40 28->43 28->48 28->49 28->97 28->99 28->101 28->103 28->105 28->107 28->109 28->111 28->113 28->115 28->136 28->140 28->144 28->148 28->152 29->1 29->28 29->30 29->32 29->36 29->48 29->49 29->97 29->105 30->1 30->1 31->1 31->1 32->1 32->1 33->1 33->1 34->1 34->1 34->1 35->1 35->1 36->1 36->1 36->1 37->1 37->1 38->1 38->1 38->15 39->1 39->1 39->1 39->10 39->40 39->40 39->41 39->43 39->113 39->115 39->117 39->119 39->152 39->156 40->1 40->41 40->113 40->117 41->1 41->1 42->1 42->1 43->1 43->1 43->1 44->1 44->1 45->1 45->1 45->17 46->1 46->1 46->1 46->1 47->1 47->1 47->19 48->1 48->1 48->1 48->49 48->51 48->92 48->134 48->165 48->191 49->1 49->48 49->51 49->92 49->134 50->1 50->1 50->93 51->1 51->1 51->1 52->1 52->89 55->1 55->24 55->24 56->1 56->25 56->25 57->1 57->26 57->26 58->1 58->17 58->17 59->1 59->1 59->1 59->92 59->211 59->228 59->239 59->240 59->252 59->253 59->261 59->321 59->335 59->353 59->357 60->1 60->1 60->1 60->90 60->128 60->213 61->1 61->1 61->1 61->61 61->62 61->93 61->95 61->132 61->133 61->164 61->187 61->188 61->189 61->216 61->217 61->218 61->233 61->245 61->256 61->322 61->339 61->354 61->359 62->1 62->1 62->94 66->1 66->27 66->27 67->1 67->38 67->38 68->1 68->45 68->45 70->1 71->1 71->47 71->47 72->1 72->50 72->50 73->1 73->1 73->1 73->60 73->90 73->128 73->213 74->1 74->1 74->1 74->62 74->94 76->1 77->1 78->1 79->1 81->1 82->1 84->1 85->1 86->1 89->1 89->1 89->21 89->52 89->59 89->59 89->90 89->94 89->132 89->162 89->184 89->185 89->210 89->219 89->226 89->226 89->227 89->237 89->238 89->239 89->251 89->319 89->320 89->348 89->352 90->1 90->1 90->59 90->59 90->60 90->128 90->213 91->1 91->60 91->60 92->1 92->1 92->1 92->48 92->49 92->59 92->60 92->89 92->91 92->125 92->126 92->127 92->128 92->129 92->130 92->134 92->161 92->186 92->212 92->213 92->214 92->215 92->229 92->230 92->231 92->232 92->241 92->242 92->243 92->244 92->254 92->255 92->262 92->263 92->268 92->336 92->337 92->338 92->349 92->358 92->361 93->1 93->1 93->61 93->61 93->94 94->1 94->1 94->21 94->52 94->61 94->61 94->62 94->132 94->219 95->1 95->1 95->1 95->134 95->134 95->165 95->219 95->234 95->235 95->246 95->247 95->248 95->257 95->258 95->259 95->264 95->265 95->266 95->269 95->270 95->340 95->341 95->350 95->351 95->355 95->360 95->362 95->363 95->364 96->1 96->95 97->1 97->136 98->1 99->1 99->101 101->1 101->140 102->1 103->1 103->28 103->29 103->34 103->39 103->40 105->1 105->144 106->1 107->1 107->109 109->1 109->148 110->1 111->1 111->1 111->28 111->29 111->39 111->40 113->1 113->152 114->1 115->1 115->39 115->40 115->43 117->1 117->156 118->1 119->1 119->1 119->39 119->40 121->1 121->46 121->46 121->70 121->70 121->84 121->84 124->1 124->73 124->73 125->1 125->89 125->89 127->1 127->1 127->1 128->1 128->1 128->1 129->1 129->1 129->21 129->52 129->94 129->132 129->219 130->1 130->1 130->93 131->1 131->74 131->74 132->1 132->1 132->21 132->52 132->93 132->93 132->94 132->219 133->1 133->1 133->95 134->1 134->1 134->1 134->96 134->165 134->191 135->1 136->1 136->99 138->1 139->1 140->1 140->103 142->1 143->1 144->1 144->107 146->1 147->1 148->1 148->111 150->1 151->1 152->1 152->115 154->1 155->1 156->1 156->119 158->1 162->1 164->1 164->132 164->132 165->1 165->1 165->1 165->48 165->49 165->95 165->96 165->134 165->189 165->190 165->191 165->191 165->217 165->218 165->233 165->236 165->245 165->249 165->250 165->256 165->260 165->267 165->322 165->339 165->354 165->356 165->359 166->1 166->97 166->97 166->135 166->135 167->1 168->1 168->99 168->99 168->138 168->138 169->1 169->101 169->101 169->139 169->139 170->1 171->1 171->103 171->103 171->142 171->142 172->1 172->105 172->105 172->143 172->143 173->1 174->1 174->107 174->107 174->146 174->146 175->1 175->109 175->109 175->147 175->147 176->1 177->1 177->111 177->111 177->150 177->150 178->1 178->113 178->113 178->151 178->151 179->1 180->1 180->115 180->115 180->154 180->154 181->1 181->117 181->117 181->155 181->155 182->1 183->1 183->119 183->119 183->158 183->158 184->1 184->1 186->1 186->130 186->130 188->1 188->133 188->133 189->1 190->1 190->1 190->250 191->1 191->1 191->1 191->1 191->48 191->49 191->134 193->1 193->136 193->136 193->167 193->167 196->1 196->140 196->140 196->170 196->170 199->1 199->144 199->144 199->173 199->173 202->1 202->148 202->148 202->176 202->176 205->1 205->152 205->152 205->179 205->179 208->1 208->156 208->156 208->182 208->182 210->1 211->1 211->1 212->1 212->254 213->1 214->1 214->129 217->1 217->1 217->248 219->1 219->257 226->1 226->1 226->21 226->52 226->94 226->132 226->219 226->239 227->1 227->184 227->184 227->210 227->210 228->1 229->1 229->212 229->212 230->1 230->1 231->1 231->213 231->213 232->1 232->214 232->214 233->1 234->1 234->219 234->219 235->1 235->1 236->1 236->190 236->190 237->1 237->226 237->226 239->1 239->89 239->212 240->1 240->211 240->211 240->228 240->228 242->1 245->1 245->217 245->217 245->233 245->233 247->1 248->1 248->1 248->217 250->1 250->1 250->21 250->52 250->94 250->132 250->219 252->1 252->239 252->239 254->1 254->214 255->1 255->230 255->230 255->242 255->242 257->1 257->1 257->21 257->52 257->94 257->132 257->219 258->1 258->235 258->235 258->247 258->247 259->1 260->1 260->250 260->250 262->1 262->254 262->254 264->1 264->257 264->257 266->1 266->248 266->248 266->259 266->259
>>>Token ReplacementFor_find_str ( )  { int i , ReplacementFor_j = ( 0x13e0 + 3065 - 0x1fd9 ) , ReplacementFor_k , ReplacementFor_num = ( 0x7bf + 3556 - 0x15a3 ) , ReplacementFor_limit , ReplacementFor_doit ; char ReplacementFor_x , ReplacementFor_y , ReplacementFor_r ; char ReplacementFor_opp [ ( 0x9c6 + 6686 - 0x23ca ) ] [ ( 0x5e4 + 4299 - 0x164b ) ] = { ( 0x92c + 5955 - 0x206f ) } ; char ReplacementFor_comb [ ( 0xb15 + 6076 - 0x22b7 ) ] [ ( 0xd99 + 1541 - 0x12d6 ) ] = { ( 0x1451 + 2209 - 0x1cf2 ) } ; int ReplacementFor_count [ ( 0x306 + 7944 - 0x21f4 ) ] [ ( 0x668 + 2160 - 0xed6 ) ] = { ( 0x4d5 + 3896 - 0x140d ) } ; fscanf ( fd , " \x25 \x64 \x20 " , & ReplacementFor_limit ) ; for ( i = ( 0x55d + 5201 - 0x19ae ) ; i < ReplacementFor_limit ; i ++ ) { fscanf ( fd , " \x25 \x63 \x25 \x63 \x25 \x63 \x20 " , & ReplacementFor_x , & ReplacementFor_y , & ReplacementFor_r ) ; printf ( " \x20 \x25 \x63 \x25 \x63 \x25 \x63 \x20 " , ReplacementFor_x , ReplacementFor_y , ReplacementFor_r ) ; ReplacementFor_comb [ ReplacementFor_x - ( ( char ) ( 0x1b4a + 943 - 0x1eb8 ) ) ] [ ReplacementFor_count [ ReplacementFor_x - ( ( char ) ( 0x206 + 976 - 0x595 ) ) ] [ ( 0x39d + 3791 - 0x126c ) ] ] = ReplacementFor_y ; ReplacementFor_count [ ReplacementFor_x - ( ( char ) ( 0x500 + 1115 - 0x91a ) ) ] [ ( 0x23bb + 248 - 0x24b3 ) ] ++ ; ReplacementFor_comb [ ReplacementFor_x - ( ( char ) ( 0x92 + 6063 - 0x1800 ) ) ] [ ReplacementFor_count [ ReplacementFor_x - ( ( char ) ( 0x1447 + 1629 - 0x1a63 ) ) ] [ ( 0xce4 + 4302 - 0x1db2 ) ] ] = ReplacementFor_r ; ReplacementFor_count [ ReplacementFor_x - ( ( char ) ( 0x14c3 + 1742 - 0x1b50 ) ) ] [ ( 0xc7b + 1358 - 0x11c9 ) ] ++ ; ReplacementFor_comb [ ReplacementFor_y - ( ( char ) ( 0xeef + 5248 - 0x232e ) ) ] [ ReplacementFor_count [ ReplacementFor_y - ( ( char ) ( 0x7ba + 6978 - 0x22bb ) ) ] [ ( 0x740 + 5340 - 0x1c1c ) ] ] = ReplacementFor_x ; ReplacementFor_count [ ReplacementFor_y - ( ( char ) ( 0x794 + 8068 - 0x26d7 ) ) ] [ ( 0xa1c + 3850 - 0x1926 ) ] ++ ; ReplacementFor_comb [ ReplacementFor_y - ( ( char ) ( 0x16af + 1355 - 0x1bb9 ) ) ] [ ReplacementFor_count [ ReplacementFor_y - ( ( char ) ( 0x19c0 + 3168 - 0x25df ) ) ] [ ( 0x309 + 3069 - 0xf06 ) ] ] = ReplacementFor_r ; ReplacementFor_count [ ReplacementFor_y - ( ( char ) ( 0x5b1 + 2127 - 0xdbf ) ) ] [ ( 0x10a3 + 5128 - 0x24ab ) ] ++ ; } fscanf ( fd , " \x25 \x64 \x20 " , & ReplacementFor_limit ) ; for ( i = ( 0x317 + 6536 - 0x1c9f ) ; i < ReplacementFor_limit ; i ++ ) { fscanf ( fd , " \x25 \x63 \x25 \x63 \x20 " , & ReplacementFor_x , & ReplacementFor_y ) ; printf ( " \x20 \x25 \x63 \x25 \x63 \x20 " , ReplacementFor_x , ReplacementFor_y ) ; ReplacementFor_opp [ ReplacementFor_x - ( ( char ) ( 0xbab + 5235 - 0x1fdd ) ) ] [ ReplacementFor_count [ ReplacementFor_x - ( ( char ) ( 0xc39 + 3589 - 0x19fd ) ) ] [ ( 0xf94 + 2147 - 0x17f6 ) ] ] = ReplacementFor_y ; ReplacementFor_count [ ReplacementFor_x - ( ( char ) ( 0x1324 + 4644 - 0x2507 ) ) ] [ ( 0x209f + 1236 - 0x2572 ) ] ++ ; ReplacementFor_opp [ ReplacementFor_y - ( ( char ) ( 0x255 + 9273 - 0x264d ) ) ] [ ReplacementFor_count [ ReplacementFor_y - ( ( char ) ( 0x200 + 6280 - 0x1a47 ) ) ] [ ( 0x444 + 2290 - 0xd35 ) ] ] = ReplacementFor_x ; ReplacementFor_count [ ReplacementFor_y - ( ( char ) ( 0x1a92 + 2196 - 0x22e5 ) ) ] [ ( 0xeb7 + 5301 - 0x236b ) ] ++ ; } for ( i = ( 0x16fd + 3950 - 0x266b ) ; i < ( 0x16f2 + 3153 - 0x2329 ) ; i ++ ) { printf ( " \x20 \x28 \x25 \x63 \x2c \x25 \x64 \x2c \x25 \x64 \x29 \x20 " , ( ( char ) ( 0x120 + 3470 - 0xe6d ) ) + i , ReplacementFor_count [ i ] [ ( 0xfc + 9638 - 0x26a2 ) ] , ReplacementFor_count [ i ] [ ( 0x18ef + 2391 - 0x2245 ) ] ) ; } printf ( " \n " ) ; fscanf ( fd , " \x25 \x64 \x20 " , & ReplacementFor_limit ) ; for ( i = ( 0x7d8 + 5641 - 0x1de1 ) ; i < ReplacementFor_limit ; i ++ ) { fscanf ( fd , " \x25 \x63 " , & ReplacementFor_r ) ; printf ( " \x6e \x65 \x77 \x20 \x25 \x63 \x20 " , ReplacementFor_r ) ; ReplacementFor_doit = ( 0x4d + 4726 - 0x12c2 ) ; ReplacementFor_result [ ReplacementFor_num ] = ReplacementFor_r ; ReplacementFor_num ++ ; for ( ReplacementFor_j = ( 0x198 + 6785 - 0x1c19 ) ; ( ReplacementFor_num > ( 0xac2 + 5014 - 0x1e57 ) ) && ( ReplacementFor_j < ReplacementFor_count [ ReplacementFor_result [ ReplacementFor_num - ( 0x12b + 3381 - 0xe5e ) ] - ( ( char ) ( 0x447 + 3015 - 0xfcd ) ) ] [ ( 0x18da + 1331 - 0x1e0d ) ] ) ; ReplacementFor_j += ( 0x576 + 3543 - 0x134b ) ) { if ( ReplacementFor_comb [ ReplacementFor_result [ ReplacementFor_num - ( 0x1c10 + 1264 - 0x20fe ) ] - ( ( char ) ( 0x15f6 + 4209 - 0x2626 ) ) ] [ ReplacementFor_j ] == ReplacementFor_r ) { ReplacementFor_result [ ReplacementFor_num - ( 0x7f2 + 2396 - 0x114c ) ] = ReplacementFor_comb [ ReplacementFor_result [ ReplacementFor_num - ( 0x1a99 + 1233 - 0x1f68 ) ] - ( ( char ) ( 0x624 + 5186 - 0x1a25 ) ) ] [ ReplacementFor_j + ( 0x1610 + 244 - 0x1703 ) ] ; printf ( " \x28 \x63 \x6f \x6d \x62 \x20 \x25 \x64 \x20 \x25 \x63 \x29 " , ReplacementFor_j , ReplacementFor_result [ ReplacementFor_num - ( 0x1f64 + 1950 - 0x2700 ) ] ) ; ReplacementFor_num -- ; ReplacementFor_doit = ( 0x18e9 + 3438 - 0x2657 ) ; break ; } } for ( ReplacementFor_k = ( 0x459 + 3063 - 0x1050 ) ; ReplacementFor_doit && ( ReplacementFor_num > ( 0xf87 + 5754 - 0x2600 ) ) && ( ReplacementFor_k < ReplacementFor_num ) ; ReplacementFor_k ++ ) { for ( ReplacementFor_j = ( 0x111d + 1920 - 0x189d ) ; ( ReplacementFor_j < ReplacementFor_count [ ReplacementFor_result [ ReplacementFor_k ] - ( ( char ) ( 0x1689 + 3962 - 0x25c2 ) ) ] [ ( 0x1920 + 1223 - 0x1de6 ) ] ) ; ReplacementFor_j ++ ) { printf ( " \x28 \x6f \x70 \x70 \x69 \x74 \x20 \x25 \x64 \x20 \x25 \x63 \x25 \x63 \x25 \x63 \x29 " , ReplacementFor_j , ReplacementFor_result [ ReplacementFor_num - ( 0x1100 + 5347 - 0x25e1 ) ] , ReplacementFor_r , ReplacementFor_opp [ ReplacementFor_result [ ReplacementFor_num - ( 0x66a + 4986 - 0x19e2 ) ] - ( ( char ) ( 0x145a + 4489 - 0x25a2 ) ) ] [ ReplacementFor_j ] ) ; if ( ReplacementFor_opp [ ReplacementFor_result [ ReplacementFor_k ] - ( ( char ) ( 0x756 + 4000 - 0x16b5 ) ) ] [ ReplacementFor_j ] == ReplacementFor_r ) { ReplacementFor_num = ( 0x5c6 + 3458 - 0x1348 ) ; printf ( " \x28 \x6f \x70 \x70 \x20 \x25 \x64 \x20 \x25 \x63 \x25 \x63 \x29 " , ReplacementFor_j , ReplacementFor_result [ ReplacementFor_num - ( 0x1b87 + 1462 - 0x213b ) ] , ReplacementFor_r ) ; break ; } } } } printf ( " \n " ) ; return ReplacementFor_num ; }
>>>Func
METHOD ReplacementFor_compare
METHOD_RETURN int
PARAM void*ReplacementFor_a
PARAM void*ReplacementFor_b
<operator>.assignment ReplacementFor_elem1=*(int*)ReplacementFor_a
<operator>.assignment ReplacementFor_elem2=*(int*)\012ReplacementFor_b
RETURN return ReplacementFor_elem2-ReplacementFor_elem1; return ReplacementFor_elem2-ReplacementFor_elem1;
<operator>.subtraction ReplacementFor_elem2-ReplacementFor_elem1
<operator>.cast (int*)ReplacementFor_a
<operator>.cast (int*)\012ReplacementFor_b
>>>PDG&10 0->2 0->3 0->7 0->8 0->9 2->8 3->9 4->1 4->1 4->7 5->1 5->1 5->7 6->1 7->1 7->1 7->1 7->6 8->1 9->1
>>>Token int ReplacementFor_compare ( void * ReplacementFor_a , void * ReplacementFor_b ) { int ReplacementFor_elem1 = * ( int * ) ReplacementFor_a ; int ReplacementFor_elem2 = * ( int * ) ReplacementFor_b ; return ReplacementFor_elem2 - ReplacementFor_elem1 ; }
>>>Func
METHOD main
METHOD_RETURN int
PARAM void
<operator>.assignment ReplacementFor_V=(0x817+4830-0x1aeb)
<operator>.assignment ReplacementFor_g=ReplacementFor_newGraph(ReplacementFor_V)
<operator>.assignment e.ReplacementFor_v=(0xa05+4728-0x1c7d)
<operator>.assignment e.ReplacementFor_w=(0x1af8+2671-0x2566)
ReplacementFor_insertEdge ReplacementFor_insertEdge(ReplacementFor_g,e)
<operator>.assignment e.ReplacementFor_v=\012(0x1123+4514-0x22c5)
<operator>.assignment e.ReplacementFor_w=(0xf47+3111-0x1b6c)
ReplacementFor_insertEdge ReplacementFor_insertEdge(ReplacementFor_g,e)
<operator>.assignment e.ReplacementFor_v=\012(0x8b+5283-0x152e)
<operator>.assignment e.ReplacementFor_w=(0x1163+4194-0x21c0)
ReplacementFor_insertEdge ReplacementFor_insertEdge(ReplacementFor_g,e)
<operator>.assignment e.ReplacementFor_v=\012(0x733+7721-0x255b)
<operator>.assignment e.ReplacementFor_w=(0xcfa+2228-0x15a9)
ReplacementFor_insertEdge ReplacementFor_insertEdge(ReplacementFor_g,e)
<operator>.assignment e.ReplacementFor_v=\012(0x1c5b+197-0x1d1e)
<operator>.assignment e.ReplacementFor_w=(0xa4b+4313-0x1b21)
ReplacementFor_insertEdge ReplacementFor_insertEdge(ReplacementFor_g,e)
<operator>.assignment e.ReplacementFor_v=\012(0x1471+2245-0x1d33)
<operator>.assignment e.ReplacementFor_w=(0x329+8498-0x2457)
ReplacementFor_insertEdge ReplacementFor_insertEdge(ReplacementFor_g,e)
<operator>.assignment e.ReplacementFor_v=\012(0x1eb3+604-0x210c)
<operator>.assignment e.ReplacementFor_w=(0x1a69+2567-0x246b)
ReplacementFor_insertEdge ReplacementFor_insertEdge(ReplacementFor_g,e)
<operator>.assignment e.ReplacementFor_v=\012(0xf4f+1375-0x14ab)
<operator>.assignment e.ReplacementFor_w=(0xc05+4380-0x1d19)
ReplacementFor_insertEdge ReplacementFor_insertEdge(ReplacementFor_g,e)
<operator>.assignment e.ReplacementFor_v=\012(0x5dd+2875-0x1114)
<operator>.assignment e.ReplacementFor_w=(0x21a+4839-0x14fc)
ReplacementFor_insertEdge ReplacementFor_insertEdge(ReplacementFor_g,e)
<operator>.assignment e.ReplacementFor_v=\012(0x370+6944-0x1e8c)
<operator>.assignment e.ReplacementFor_w=(0x4bb+8600-0x264c)
ReplacementFor_insertEdge ReplacementFor_insertEdge(ReplacementFor_g,e)
<operator>.assignment e.ReplacementFor_v=\012(0x456+5933-0x1b7f)
<operator>.assignment e.ReplacementFor_w=(0x4ea+2951-0x1069)
ReplacementFor_insertEdge ReplacementFor_insertEdge(ReplacementFor_g,e)
<operator>.assignment e.ReplacementFor_v=\012(0x1988+3156-0x25d7)
<operator>.assignment e.ReplacementFor_w=(0x22b0+1026-0x26ac)
ReplacementFor_insertEdge ReplacementFor_insertEdge(ReplacementFor_g,e)
<operator>.assignment e.ReplacementFor_v=\012(0x21+8917-0x22ef)
<operator>.assignment e.ReplacementFor_w=(0x4c2+7011-0x201d)
ReplacementFor_insertEdge ReplacementFor_insertEdge(ReplacementFor_g,e)
<operator>.assignment e.ReplacementFor_v=\012(0x693+2439-0x1013)
<operator>.assignment e.ReplacementFor_w=(0x1582+3111-0x21a0)
ReplacementFor_insertEdge ReplacementFor_insertEdge(ReplacementFor_g,e)
<operator>.assignment e.ReplacementFor_v=\012(0x925+4343-0x1a14)
<operator>.assignment e.ReplacementFor_w=(0x93f+1621-0xf8b)
ReplacementFor_insertEdge ReplacementFor_insertEdge(ReplacementFor_g,e)
<operator>.assignment ReplacementFor_src=\012(0x1578+3275-0x2243)
<operator>.assignment ReplacementFor_dest=(0xa60+2397-0x13b7)
RETURN return(0xe39+2122-0x1683); return(0xe39+2122-0x1683);
ReplacementFor_findPathBFS ReplacementFor_findPathBFS(ReplacementFor_g,ReplacementFor_V,ReplacementFor_src,\012ReplacementFor_dest)
<operator>.subtraction 0xe39+2122-0x1683
<operator>.subtraction 0x817+4830-0x1aeb
ReplacementFor_newGraph ReplacementFor_newGraph(ReplacementFor_V)
<operator>.subtraction 0xa05+4728-0x1c7d
<operator>.subtraction 0x1af8+2671-0x2566
<operator>.subtraction 0x1123+4514-0x22c5
<operator>.subtraction 0xf47+3111-0x1b6c
<operator>.subtraction 0x8b+5283-0x152e
<operator>.subtraction 0x1163+4194-0x21c0
<operator>.subtraction 0x733+7721-0x255b
<operator>.subtraction 0xcfa+2228-0x15a9
<operator>.subtraction 0x1c5b+197-0x1d1e
<operator>.subtraction 0xa4b+4313-0x1b21
<operator>.subtraction 0x1471+2245-0x1d33
<operator>.subtraction 0x329+8498-0x2457
<operator>.subtraction 0x1eb3+604-0x210c
<operator>.subtraction 0x1a69+2567-0x246b
<operator>.subtraction 0xf4f+1375-0x14ab
<operator>.subtraction 0xc05+4380-0x1d19
<operator>.subtraction 0x5dd+2875-0x1114
<operator>.subtraction 0x21a+4839-0x14fc
<operator>.subtraction 0x370+6944-0x1e8c
<operator>.subtraction 0x4bb+8600-0x264c
<operator>.subtraction 0x456+5933-0x1b7f
<operator>.subtraction 0x4ea+2951-0x1069
<operator>.subtraction 0x1988+3156-0x25d7
<operator>.subtraction 0x22b0+1026-0x26ac
<operator>.subtraction 0x21+8917-0x22ef
<operator>.subtraction 0x4c2+7011-0x201d
<operator>.subtraction 0x693+2439-0x1013
<operator>.subtraction 0x1582+3111-0x21a0
<operator>.subtraction 0x925+4343-0x1a14
<operator>.subtraction 0x93f+1621-0xf8b
<operator>.subtraction 0x1578+3275-0x2243
<operator>.subtraction 0xa60+2397-0x13b7
<operator>.assignment ReplacementFor_v=ReplacementFor_dest
printf printf("\x25\x64" "\n",ReplacementFor_src)
<operator>.addition 0x817+4830
<operator>.addition 0xa05+4728
<operator>.addition 0x1af8+2671
<operator>.addition 0x1123+4514
<operator>.addition 0xf47+3111
<operator>.addition 0x8b+5283
<operator>.addition 0x1163+4194
<operator>.addition 0x733+7721
<operator>.addition 0xcfa+2228
<operator>.addition 0x1c5b+197
<operator>.addition 0xa4b+4313
<operator>.addition 0x1471+2245
<operator>.addition 0x329+8498
<operator>.addition 0x1eb3+604
<operator>.addition 0x1a69+2567
<operator>.addition 0xf4f+1375
<operator>.addition 0xc05+4380
<operator>.addition 0x5dd+2875
<operator>.addition 0x21a+4839
<operator>.addition 0x370+6944
<operator>.addition 0x4bb+8600
<operator>.addition 0x456+5933
<operator>.addition 0x4ea+2951
<operator>.addition 0x1988+3156
<operator>.addition 0x22b0+1026
<operator>.addition 0x21+8917
<operator>.addition 0x4c2+7011
<operator>.addition 0x693+2439
<operator>.addition 0x1582+3111
<operator>.addition 0x925+4343
<operator>.addition 0x93f+1621
<operator>.addition 0x1578+3275
<operator>.addition 0xa60+2397
<operator>.notEquals ReplacementFor_v!=ReplacementFor_src
<operator>.addition 0xe39+2122
printf printf("\x25\x64\x20\x2d\x20",\012ReplacementFor_v)
<operator>.assignment ReplacementFor_v=ReplacementFor_visited[ReplacementFor_v]
<operator>.indirectIndexAccess ReplacementFor_visited[ReplacementFor_v]
>>>PDG&129 0->2 0->7 0->10 0->13 0->16 0->19 0->22 0->25 0->28 0->31 0->34 0->37 0->40 0->43 0->46 0->49 0->53 0->54 0->55 0->56 0->57 0->58 0->59 0->60 0->61 0->62 0->63 0->64 0->65 0->66 0->67 0->68 0->69 0->70 0->71 0->72 0->73 0->74 0->75 0->76 0->77 0->78 0->79 0->80 0->81 0->82 0->83 0->84 0->85 0->86 0->87 0->88 0->89 0->90 0->91 0->92 0->93 0->94 0->95 0->96 0->97 0->98 0->99 0->100 0->101 0->102 0->103 0->104 0->105 0->106 0->107 0->108 0->109 0->110 0->111 0->112 0->113 0->114 0->115 0->116 0->117 0->118 0->119 0->120 0->121 0->122 0->123 0->124 0->125 0->126 2->1 3->1 3->1 3->56 4->1 4->1 4->7 5->1 5->1 5->7 6->1 6->1 6->7 7->10 7->10 8->1 8->1 8->10 9->1 9->1 9->10 10->13 10->13 11->1 11->1 11->13 12->1 12->1 12->13 13->16 13->16 14->1 14->1 14->16 15->1 15->1 15->16 16->19 16->19 17->1 17->1 17->19 18->1 18->1 18->19 19->22 19->22 20->1 20->1 20->22 21->1 21->1 21->22 22->25 22->25 23->1 23->1 23->25 24->1 24->1 24->25 25->28 25->28 26->1 26->1 26->28 27->1 27->1 27->28 28->31 28->31 29->1 29->1 29->31 30->1 30->1 30->31 31->34 31->34 32->1 32->1 32->34 33->1 33->1 33->34 34->37 34->37 35->1 35->1 35->37 36->1 36->1 36->37 37->40 37->40 38->1 38->1 38->40 39->1 39->1 39->40 40->43 40->43 41->1 41->1 41->43 42->1 42->1 42->43 43->46 43->46 44->1 44->1 44->46 45->1 45->1 45->46 46->49 46->49 47->1 47->1 47->49 48->1 48->1 48->49 49->1 49->1 49->53 50->1 50->1 50->53 51->1 51->1 51->53 52->1 53->1 53->1 53->1 53->1 53->1 53->89 53->89 53->90 53->124 53->124 54->1 54->1 54->52 55->1 55->3 55->3 56->4 56->53 57->1 57->5 57->5 58->1 58->6 58->6 59->1 59->8 59->8 60->1 60->9 60->9 61->1 61->11 61->11 62->1 62->12 62->12 63->1 63->14 63->14 64->1 64->15 64->15 65->1 65->17 65->17 66->1 66->18 66->18 67->1 67->20 67->20 68->1 68->21 68->21 69->1 69->23 69->23 70->1 70->24 70->24 71->1 71->26 71->26 72->1 72->27 72->27 73->1 73->29 73->29 74->1 74->30 74->30 75->1 75->32 75->32 76->1 76->33 76->33 77->1 77->35 77->35 78->1 78->36 78->36 79->1 79->38 79->38 80->1 80->39 80->39 81->1 81->41 81->41 82->1 82->42 82->42 83->1 83->44 83->44 84->1 84->45 84->45 85->1 85->47 85->47 86->1 86->48 86->48 87->1 87->50 87->50 88->1 88->51 88->51 89->1 89->1 89->124 90->1 90->1 124->1 124->1 124->90 124->124 124->126 124->126 124->127 124->128 126->1 127->1 127->1 127->124
>>>Token int main ( void ) { int ReplacementFor_V = ( 0x817 + 4830 - 0x1aeb ) ; ReplacementFor_Graph ReplacementFor_g = ReplacementFor_newGraph ( ReplacementFor_V ) ; ReplacementFor_Edge e ; e . ReplacementFor_v = ( 0xa05 + 4728 - 0x1c7d ) ; e . ReplacementFor_w = ( 0x1af8 + 2671 - 0x2566 ) ; ReplacementFor_insertEdge ( ReplacementFor_g , e ) ; e . ReplacementFor_v = ( 0x1123 + 4514 - 0x22c5 ) ; e . ReplacementFor_w = ( 0xf47 + 3111 - 0x1b6c ) ; ReplacementFor_insertEdge ( ReplacementFor_g , e ) ; e . ReplacementFor_v = ( 0x8b + 5283 - 0x152e ) ; e . ReplacementFor_w = ( 0x1163 + 4194 - 0x21c0 ) ; ReplacementFor_insertEdge ( ReplacementFor_g , e ) ; e . ReplacementFor_v = ( 0x733 + 7721 - 0x255b ) ; e . ReplacementFor_w = ( 0xcfa + 2228 - 0x15a9 ) ; ReplacementFor_insertEdge ( ReplacementFor_g , e ) ; e . ReplacementFor_v = ( 0x1c5b + 197 - 0x1d1e ) ; e . ReplacementFor_w = ( 0xa4b + 4313 - 0x1b21 ) ; ReplacementFor_insertEdge ( ReplacementFor_g , e ) ; e . ReplacementFor_v = ( 0x1471 + 2245 - 0x1d33 ) ; e . ReplacementFor_w = ( 0x329 + 8498 - 0x2457 ) ; ReplacementFor_insertEdge ( ReplacementFor_g , e ) ; e . ReplacementFor_v = ( 0x1eb3 + 604 - 0x210c ) ; e . ReplacementFor_w = ( 0x1a69 + 2567 - 0x246b ) ; ReplacementFor_insertEdge ( ReplacementFor_g , e ) ; e . ReplacementFor_v = ( 0xf4f + 1375 - 0x14ab ) ; e . ReplacementFor_w = ( 0xc05 + 4380 - 0x1d19 ) ; ReplacementFor_insertEdge ( ReplacementFor_g , e ) ; e . ReplacementFor_v = ( 0x5dd + 2875 - 0x1114 ) ; e . ReplacementFor_w = ( 0x21a + 4839 - 0x14fc ) ; ReplacementFor_insertEdge ( ReplacementFor_g , e ) ; e . ReplacementFor_v = ( 0x370 + 6944 - 0x1e8c ) ; e . ReplacementFor_w = ( 0x4bb + 8600 - 0x264c ) ; ReplacementFor_insertEdge ( ReplacementFor_g , e ) ; e . ReplacementFor_v = ( 0x456 + 5933 - 0x1b7f ) ; e . ReplacementFor_w = ( 0x4ea + 2951 - 0x1069 ) ; ReplacementFor_insertEdge ( ReplacementFor_g , e ) ; e . ReplacementFor_v = ( 0x1988 + 3156 - 0x25d7 ) ; e . ReplacementFor_w = ( 0x22b0 + 1026 - 0x26ac ) ; ReplacementFor_insertEdge ( ReplacementFor_g , e ) ; e . ReplacementFor_v = ( 0x21 + 8917 - 0x22ef ) ; e . ReplacementFor_w = ( 0x4c2 + 7011 - 0x201d ) ; ReplacementFor_insertEdge ( ReplacementFor_g , e ) ; e . ReplacementFor_v = ( 0x693 + 2439 - 0x1013 ) ; e . ReplacementFor_w = ( 0x1582 + 3111 - 0x21a0 ) ; ReplacementFor_insertEdge ( ReplacementFor_g , e ) ; e . ReplacementFor_v = ( 0x925 + 4343 - 0x1a14 ) ; e . ReplacementFor_w = ( 0x93f + 1621 - 0xf8b ) ; ReplacementFor_insertEdge ( ReplacementFor_g , e ) ; int ReplacementFor_src = ( 0x1578 + 3275 - 0x2243 ) , ReplacementFor_dest = ( 0xa60 + 2397 - 0x13b7 ) ; if ( ReplacementFor_findPathBFS ( ReplacementFor_g , ReplacementFor_V , ReplacementFor_src , ReplacementFor_dest ) ) { ReplacementFor_Vertex ReplacementFor_v = ReplacementFor_dest ; while ( ReplacementFor_v != ReplacementFor_src ) { printf ( " \x25 \x64 \x20 \x2d \x20 " , ReplacementFor_v ) ; ReplacementFor_v = ReplacementFor_visited [ ReplacementFor_v ] ; } printf ( " \x25 \x64 " " \n " , ReplacementFor_src ) ; } return ( 0xe39 + 2122 - 0x1683 ) ; }
>>>Func
METHOD ReplacementFor_cross
METHOD_RETURN T
PARAM T ReplacementFor_x0
PARAM T y0
PARAM T ReplacementFor_x1
PARAM T y1
PARAM T \012ReplacementFor_x2
PARAM T ReplacementFor_y2
RETURN return(ReplacementFor_x1-\012ReplacementFor_x0)*(ReplacementFor_y2-y0)-(ReplacementFor_x2-ReplacementFor_x0)*\012(y1-y0); return(ReplacementFor_x1-\012ReplacementFor_x0)*(ReplacementFor_y2-y0)-(ReplacementFor_x2-ReplacementFor_x0)*\012(y1-y0);
<operator>.subtraction (ReplacementFor_x1-\012ReplacementFor_x0)*(ReplacementFor_y2-y0)-(ReplacementFor_x2-ReplacementFor_x0)*\012(y1-y0)
<operator>.multiplication (ReplacementFor_x1-\012ReplacementFor_x0)*(ReplacementFor_y2-y0)
<operator>.multiplication (ReplacementFor_x2-ReplacementFor_x0)*\012(y1-y0)
<operator>.subtraction ReplacementFor_x1-\012ReplacementFor_x0
<operator>.subtraction ReplacementFor_y2-y0
<operator>.subtraction ReplacementFor_x2-ReplacementFor_x0
<operator>.subtraction y1-y0
>>>PDG&16 0->2 0->3 0->4 0->5 0->6 0->7 0->12 0->13 0->14 0->15 2->12 3->13 4->12 5->15 6->14 7->13 8->1 9->1 9->1 9->1 9->8 10->1 10->1 10->9 10->9 11->1 11->1 11->9 11->9 12->1 12->10 12->10 12->14 13->1 13->10 13->10 13->15 14->1 14->1 14->11 14->11 15->1 15->1 15->11 15->11
>>>Token T ReplacementFor_cross ( T ReplacementFor_x0 , T y0 , T ReplacementFor_x1 , T y1 , T ReplacementFor_x2 , T ReplacementFor_y2 ) { return ( ReplacementFor_x1 - ReplacementFor_x0 ) * ( ReplacementFor_y2 - y0 ) - ( ReplacementFor_x2 - ReplacementFor_x0 ) * ( y1 - y0 ) ; }
>>>Func
METHOD main
METHOD_RETURN int
<operator>.assignment *ReplacementFor_f=fopen("\x74\x65\x73\x74\x2e\x69\x6e","\x72")
fscanf fscanf(ReplacementFor_f,"\x25\x6c\x75",&\012ReplacementFor_cases)
<operator>.lessEqualsThan ReplacementFor_c<=\012ReplacementFor_cases
<operator>.postIncrement ReplacementFor_c++
fopen fopen("\x74\x65\x73\x74\x2e\x69\x6e","\x72")
<operator>.assignment ReplacementFor_c=(0x5c1+2176-0xe40)
printf printf(\012"\x43\x61\x73\x65\x20\x23\x25\x6c\x75\x3a",ReplacementFor_c)
fscanf fscanf(\012ReplacementFor_f,"\x25\x6c\x75",&ReplacementFor_N)
printf printf("\n")
<operator>.lessThan i<ReplacementFor_N
<operator>.postIncrement i++
<operator>.lessThan i<\012ReplacementFor_N
<operator>.postIncrement i++
<operator>.lessThan i<ReplacementFor_N
<operator>.postIncrement i++
<operator>.lessThan i<ReplacementFor_N
<operator>.postIncrement i++
<operator>.lessThan i<ReplacementFor_N
<operator>.postIncrement i++
<operator>.subtraction 0x5c1+2176-0xe40
<operator>.assignment i=(0x1389+787-0x169c)
fscanf fscanf(ReplacementFor_f,"\x25\x63",&\012ReplacementFor_tmp)
<operator>.assignment i=(0x1c2c+1639-0x2293)
<operator>.assignment ReplacementFor_sum=(0x81c+5348-0x1d00)
<operator>.assignment ReplacementFor_cnt=(0x1b15+2219-0x23c0)
<operator>.assignment ReplacementFor_table_wp[i]=(double)ReplacementFor_sum/\012ReplacementFor_cnt
<operator>.assignment i=(0x207+7158-0x1dfd)
<operator>.assignment ReplacementFor_sum=(0xb2b+6784-0x25ab)
<operator>.assignment ReplacementFor_cnt=(0x1261+606-0x14bf)
<operator>.assignment ReplacementFor_table_owp[i]=ReplacementFor_sum/ReplacementFor_cnt
<operator>.assignment i=\012(0xe9+6706-0x1b1b)
<operator>.assignment ReplacementFor_sum=\012(0x11d4+852-0x1528)
<operator>.assignment ReplacementFor_cnt=(0x1152+5536-0x26f2)
<operator>.assignment ReplacementFor_table_oowp[i]=ReplacementFor_sum/\012ReplacementFor_cnt
<operator>.assignment i=(0x3c+7159-0x1c33)
<operator>.assignment ReplacementFor_rdi=0.25*ReplacementFor_table_wp[i]+0.5*ReplacementFor_table_owp[\012i]+0.25*ReplacementFor_table_oowp[i]
printf printf("\n" "\x25\x66",ReplacementFor_rdi)
<operator>.addition 0x5c1+2176
<operator>.lessThan ReplacementFor_j<\012ReplacementFor_N
<operator>.postIncrement ReplacementFor_j++
<operator>.lessThan ReplacementFor_j<ReplacementFor_N
<operator>.postIncrement ReplacementFor_j++
<operator>.lessThan ReplacementFor_j<ReplacementFor_N
<operator>.postIncrement ReplacementFor_j++
<operator>.lessThan ReplacementFor_j<ReplacementFor_N
<operator>.postIncrement ReplacementFor_j++
<operator>.subtraction 0x1389+787-0x169c
<operator>.assignment ReplacementFor_j=(0xe07+4476-0x1f83)
fscanf fscanf(ReplacementFor_f,"\x25\x63",&\012ReplacementFor_table[i][ReplacementFor_j])
<operator>.subtraction 0x1c2c+1639-0x2293
<operator>.subtraction 0x81c+5348-0x1d00
<operator>.subtraction 0x1b15+2219-0x23c0
<operator>.assignment ReplacementFor_j=(0xaf+5979-0x180a)
<operator>.division (double)ReplacementFor_sum/\012ReplacementFor_cnt
<operator>.subtraction 0x207+7158-0x1dfd
<operator>.subtraction 0xb2b+6784-0x25ab
<operator>.subtraction 0x1261+606-0x14bf
<operator>.assignment ReplacementFor_j=(0x14c4+1507-0x1aa7)
<operator>.division ReplacementFor_sum/ReplacementFor_cnt
<operator>.subtraction 0xe9+6706-0x1b1b
<operator>.subtraction 0x11d4+852-0x1528
<operator>.subtraction 0x1152+5536-0x26f2
<operator>.assignment ReplacementFor_j\012=(0x1e5d+1568-0x247d)
<operator>.division ReplacementFor_sum/\012ReplacementFor_cnt
<operator>.subtraction 0x3c+7159-0x1c33
<operator>.addition 0.25*ReplacementFor_table_wp[i]+0.5*ReplacementFor_table_owp[\012i]+0.25*ReplacementFor_table_oowp[i]
<operator>.addition 0x1389+787
<operator>.addition 0x1c2c+1639
<operator>.addition 0x81c+5348
<operator>.addition 0x1b15+2219
<operator>.notEquals ReplacementFor_table[i]\012[ReplacementFor_j]!=((char)(0x1cc2+1632-0x22f4))
<operator>.cast (double)ReplacementFor_sum
<operator>.addition 0x207+7158
<operator>.addition 0xb2b+6784
<operator>.addition 0x1261+606
<operator>.notEquals ReplacementFor_table[i][ReplacementFor_j]!=\012((char)(0xac3+4941-0x1de2))
<operator>.addition 0xe9+6706
<operator>.addition 0x11d4+852
<operator>.addition 0x1152+5536
<operator>.notEquals ReplacementFor_table[i][ReplacementFor_j]!=((char)(0x202f+916-0x2395))
<operator>.addition 0x3c+7159
<operator>.addition 0.25*ReplacementFor_table_wp[i]+0.5*ReplacementFor_table_owp[\012i]
<operator>.multiplication 0.25*ReplacementFor_table_oowp[i]
<operator>.subtraction 0xe07+4476-0x1f83
<operator>.subtraction 0xaf+5979-0x180a
<operator>.postIncrement ReplacementFor_cnt++
<operator>.subtraction 0x14c4+1507-0x1aa7
<operator>.assignment ReplacementFor_cnt_op=(0xa3f+109-0xaac)
<operator>.assignmentPlus ReplacementFor_sum+=(\012ReplacementFor_cnt_op*ReplacementFor_table_wp[ReplacementFor_j]-\012ReplacementFor_table[ReplacementFor_j][i]+((char)(0xb29+5536-0x2099)))/(\012ReplacementFor_cnt_op-(0x7e5+3479-0x157b))
<operator>.postIncrement ReplacementFor_cnt++
<operator>.subtraction 0x1e5d+1568-0x247d
<operator>.assignmentPlus ReplacementFor_sum+=ReplacementFor_table_owp[ReplacementFor_j]
<operator>.postIncrement ReplacementFor_cnt++
<operator>.multiplication 0.25*ReplacementFor_table_wp[i]
<operator>.multiplication 0.5*ReplacementFor_table_owp[\012i]
<operator>.addition 0xe07+4476
<operator>.addition 0xaf+5979
<operator>.cast (char)(0x1cc2+1632-0x22f4)
<operator>.equals ReplacementFor_table[i][\012ReplacementFor_j]==((char)(0xa0f+4881-0x1cef))
<operator>.addition 0x14c4+1507
<operator>.cast (char)(0xac3+4941-0x1de2)
<operator>.lessThan ReplacementFor_k<ReplacementFor_N
<operator>.postIncrement ReplacementFor_k++
<operator>.addition 0x1e5d+1568
<operator>.cast (char)(0x202f+916-0x2395)
<operator>.subtraction 0x1cc2+1632-0x22f4
<operator>.postIncrement ReplacementFor_sum++
<operator>.subtraction 0xac3+4941-0x1de2
<operator>.subtraction 0xa3f+109-0xaac
<operator>.assignment ReplacementFor_k=(0x721+6953-0x224a)
<operator>.division (\012ReplacementFor_cnt_op*ReplacementFor_table_wp[ReplacementFor_j]-\012ReplacementFor_table[ReplacementFor_j][i]+((char)(0xb29+5536-0x2099)))/(\012ReplacementFor_cnt_op-(0x7e5+3479-0x157b))
<operator>.subtraction 0x202f+916-0x2395
<operator>.addition 0x1cc2+1632
<operator>.cast (char)(0xa0f+4881-0x1cef)
<operator>.addition 0xac3+4941
<operator>.addition 0xa3f+109
<operator>.notEquals ReplacementFor_table[ReplacementFor_j][ReplacementFor_k]\012!=((char)(0x82+6717-0x1a91))
<operator>.addition ReplacementFor_cnt_op*ReplacementFor_table_wp[ReplacementFor_j]-\012ReplacementFor_table[ReplacementFor_j][i]+((char)(0xb29+5536-0x2099))
<operator>.subtraction ReplacementFor_cnt_op-(0x7e5+3479-0x157b)
<operator>.addition 0x202f+916
<operator>.subtraction 0xa0f+4881-0x1cef
<operator>.subtraction 0x721+6953-0x224a
<operator>.postIncrement ReplacementFor_cnt_op++
<operator>.subtraction ReplacementFor_cnt_op*ReplacementFor_table_wp[ReplacementFor_j]-\012ReplacementFor_table[ReplacementFor_j][i]
<operator>.cast (char)(0xb29+5536-0x2099)
<operator>.subtraction 0x7e5+3479-0x157b
<operator>.addition 0xa0f+4881
<operator>.addition 0x721+6953
<operator>.cast (char)(0x82+6717-0x1a91)
<operator>.multiplication ReplacementFor_cnt_op*ReplacementFor_table_wp[ReplacementFor_j]
<operator>.subtraction 0xb29+5536-0x2099
<operator>.addition 0x7e5+3479
<operator>.subtraction 0x82+6717-0x1a91
<operator>.addition 0xb29+5536
<operator>.addition 0x82+6717
<operator>.addressOf &ReplacementFor_N
<operator>.addressOf &\012ReplacementFor_tmp
<operator>.indirectIndexAccess ReplacementFor_table_wp[i]
<operator>.indirectIndexAccess ReplacementFor_table_owp[i]
<operator>.indirectIndexAccess ReplacementFor_table_oowp[i]
<operator>.addressOf &\012ReplacementFor_table[i][ReplacementFor_j]
UNKNOWN double double
<operator>.indirectIndexAccess ReplacementFor_table_oowp[i]
<operator>.indirectIndexAccess ReplacementFor_table[i][ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_table[i]\012[ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_table[i][ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_table[i][ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_table_wp[i]
<operator>.indirectIndexAccess ReplacementFor_table_owp[\012i]
<operator>.indirectIndexAccess ReplacementFor_table[i]
<operator>.indirectIndexAccess ReplacementFor_table[i]
UNKNOWN char char
<operator>.indirectIndexAccess ReplacementFor_table[i]
UNKNOWN char char
<operator>.indirectIndexAccess ReplacementFor_table[i]
UNKNOWN char char
<operator>.indirectIndexAccess ReplacementFor_table_owp[ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_table[i][\012ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_table[i]
UNKNOWN char char
<operator>.indirectIndexAccess ReplacementFor_table[ReplacementFor_j][ReplacementFor_k]
<operator>.indirectIndexAccess ReplacementFor_table[ReplacementFor_j][i]
UNKNOWN char char
<operator>.indirectIndexAccess ReplacementFor_table[ReplacementFor_j]
UNKNOWN char char
<operator>.indirectIndexAccess ReplacementFor_table_wp[ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_table[ReplacementFor_j]
>>>PDG&169 0->3 0->4 0->5 0->6 0->8 0->9 0->10 0->11 0->12 0->13 0->14 0->15 0->16 0->17 0->18 0->19 0->20 0->21 0->23 0->38 0->39 0->40 0->41 0->42 0->43 0->44 0->45 0->46 0->47 0->48 0->50 0->51 0->52 0->53 0->55 0->56 0->57 0->58 0->60 0->61 0->62 0->63 0->65 0->66 0->68 0->69 0->70 0->71 0->73 0->74 0->75 0->76 0->78 0->79 0->80 0->82 0->84 0->85 0->86 0->87 0->88 0->90 0->91 0->92 0->93 0->94 0->95 0->96 0->97 0->98 0->101 0->103 0->104 0->105 0->107 0->108 0->109 0->110 0->113 0->114 0->116 0->117 0->120 0->121 0->122 0->123 0->124 0->127 0->128 0->129 0->131 0->132 0->133 0->134 0->135 0->136 2->1 2->1 2->3 3->1 3->1 3->1 3->4 3->9 4->1 4->1 4->1 4->4 4->5 4->8 4->8 4->9 4->10 4->11 4->13 4->15 4->17 4->19 4->22 4->24 4->28 4->32 4->36 4->48 4->51 4->56 4->61 4->66 4->68 4->69 4->74 4->78 4->82 4->137 5->1 5->4 6->2 6->2 7->1 7->1 7->4 8->1 8->5 9->1 9->1 9->1 9->11 9->13 9->15 9->17 9->19 9->23 9->40 9->42 9->44 9->46 9->103 10->1 11->11 11->12 11->12 11->13 11->23 11->40 11->40 11->49 11->85 11->97 11->138 12->1 12->11 13->1 13->13 13->14 13->14 13->15 13->25 13->26 13->27 13->42 13->42 13->52 13->53 13->54 13->55 13->70 13->71 13->73 13->86 13->98 13->139 13->143 14->1 14->13 15->15 15->16 15->16 15->17 15->29 15->30 15->31 15->44 15->44 15->57 15->58 15->59 15->60 15->75 15->76 15->88 15->101 15->140 16->1 16->15 17->17 17->18 17->18 17->19 17->33 17->34 17->35 17->46 17->46 17->62 17->63 17->64 17->65 17->79 17->80 17->92 17->105 17->141 18->1 18->17 19->1 19->1 19->1 19->9 19->11 19->19 19->20 19->20 19->37 19->38 19->67 19->83 19->84 19->95 19->96 19->144 19->149 19->150 20->1 20->19 21->1 21->7 21->7 22->1 22->1 22->11 23->1 23->1 23->1 23->9 23->50 24->1 24->1 24->13 25->1 25->1 25->55 25->73 25->108 26->1 26->1 26->55 26->87 27->1 27->1 27->1 27->95 28->1 28->1 28->15 29->1 29->1 29->60 29->90 30->1 30->1 30->60 30->91 31->1 31->1 31->1 32->1 32->1 32->17 33->1 33->1 33->65 33->93 34->1 34->1 34->65 34->94 35->1 35->1 35->1 35->84 36->1 36->1 36->19 37->1 37->1 37->38 38->1 38->1 40->1 40->1 40->11 40->40 40->41 40->41 40->50 40->142 40->145 40->151 41->1 41->40 42->1 42->1 42->13 42->42 42->43 42->43 42->72 42->99 42->107 42->114 42->146 42->152 42->153 43->1 43->42 44->1 44->1 44->15 44->44 44->45 44->45 44->77 44->102 44->103 44->109 44->116 44->147 44->154 44->155 45->1 45->44 46->1 46->1 46->17 46->46 46->47 46->47 46->81 46->106 46->113 46->121 46->148 46->156 46->157 47->1 47->46 48->1 48->22 48->22 49->1 49->1 49->40 50->1 50->1 50->1 50->9 50->23 50->77 50->81 51->1 51->24 51->24 52->1 52->25 52->25 53->1 53->26 53->26 54->1 54->1 54->42 55->1 55->1 55->27 55->27 56->1 56->28 56->28 57->1 57->29 57->29 58->1 58->30 58->30 59->1 59->1 59->44 60->1 60->1 60->31 60->31 61->1 61->32 61->32 62->1 62->33 62->33 63->1 63->34 63->34 64->1 64->1 64->46 65->1 65->1 65->35 65->35 66->1 66->36 66->36 67->1 67->1 72->1 72->1 72->1 72->87 72->100 72->115 72->122 72->128 72->159 72->160 72->161 73->1 77->1 77->1 77->1 77->50 77->81 77->89 77->90 77->91 77->103 77->110 77->111 77->112 77->117 77->119 77->120 77->123 77->125 77->126 77->127 77->129 77->131 77->132 77->133 77->135 77->163 77->164 77->167 77->168 81->1 81->1 81->1 81->50 81->77 81->93 81->94 81->158 83->1 83->1 84->1 84->37 84->37 84->67 84->67 85->1 85->49 85->49 86->1 86->54 86->54 87->1 87->55 88->1 88->59 88->59 89->1 89->1 89->124 89->131 90->1 90->1 90->60 91->1 91->60 92->1 92->64 92->64 93->1 93->1 93->65 94->1 94->65 95->1 95->37 95->37 95->67 95->67 95->83 95->83 96->1 96->37 96->37 96->67 96->67 96->83 96->83 99->1 100->1 100->1 100->1 100->108 102->1 103->1 103->1 103->44 103->103 103->104 103->104 103->118 103->130 103->134 103->136 103->162 103->165 103->166 104->1 104->103 106->1 107->1 107->72 107->72 107->99 107->99 108->1 108->55 108->73 109->1 109->77 109->77 109->102 109->102 110->1 110->89 110->89 111->1 111->1 111->103 112->1 112->1 112->90 112->90 113->1 113->81 113->81 113->106 113->106 115->1 118->1 118->1 118->1 118->124 119->1 119->1 120->1 120->1 120->112 120->112 122->1 122->100 122->100 122->115 122->115 123->1 123->111 123->111 124->1 124->131 125->1 125->1 125->112 125->112 125->119 125->119 126->1 127->1 127->120 127->120 130->1 131->1 131->120 131->125 131->125 132->1 132->112 132->112 132->119 132->119 132->126 132->126 134->1 134->118 134->118 134->130 134->130
>>>Token int main ( ) { FILE * ReplacementFor_f = fopen ( " \x74 \x65 \x73 \x74 \x2e \x69 \x6e " , " \x72 " ) ; unsigned long ReplacementFor_cases , ReplacementFor_c , ReplacementFor_N , M , i , ReplacementFor_j , ReplacementFor_k , l ; fscanf ( ReplacementFor_f , " \x25 \x6c \x75 " , & ReplacementFor_cases ) ; for ( ReplacementFor_c = ( 0x5c1 + 2176 - 0xe40 ) ; ReplacementFor_c <= ReplacementFor_cases ; ReplacementFor_c ++ ) { printf ( " \x43 \x61 \x73 \x65 \x20 \x23 \x25 \x6c \x75 \x3a " , ReplacementFor_c ) ; fscanf ( ReplacementFor_f , " \x25 \x6c \x75 " , & ReplacementFor_N ) ; char ReplacementFor_table [ ReplacementFor_N ] [ ReplacementFor_N ] ; for ( i = ( 0x1389 + 787 - 0x169c ) ; i < ReplacementFor_N ; i ++ ) { char ReplacementFor_tmp ; fscanf ( ReplacementFor_f , " \x25 \x63 " , & ReplacementFor_tmp ) ; for ( ReplacementFor_j = ( 0xe07 + 4476 - 0x1f83 ) ; ReplacementFor_j < ReplacementFor_N ; ReplacementFor_j ++ ) { fscanf ( ReplacementFor_f , " \x25 \x63 " , & ReplacementFor_table [ i ] [ ReplacementFor_j ] ) ; } } double ReplacementFor_table_wp [ ReplacementFor_N ] ; double ReplacementFor_table_owp [ ReplacementFor_N ] ; double ReplacementFor_table_oowp [ ReplacementFor_N ] ; for ( i = ( 0x1c2c + 1639 - 0x2293 ) ; i < ReplacementFor_N ; i ++ ) { unsigned int ReplacementFor_sum = ( 0x81c + 5348 - 0x1d00 ) , ReplacementFor_cnt = ( 0x1b15 + 2219 - 0x23c0 ) ; for ( ReplacementFor_j = ( 0xaf + 5979 - 0x180a ) ; ReplacementFor_j < ReplacementFor_N ; ReplacementFor_j ++ ) { if ( ReplacementFor_table [ i ] [ ReplacementFor_j ] != ( ( char ) ( 0x1cc2 + 1632 - 0x22f4 ) ) ) { if ( ReplacementFor_table [ i ] [ ReplacementFor_j ] == ( ( char ) ( 0xa0f + 4881 - 0x1cef ) ) ) { ReplacementFor_sum ++ ; } ReplacementFor_cnt ++ ; } } ReplacementFor_table_wp [ i ] = ( double ) ReplacementFor_sum / ReplacementFor_cnt ; } for ( i = ( 0x207 + 7158 - 0x1dfd ) ; i < ReplacementFor_N ; i ++ ) { double ReplacementFor_sum = ( 0xb2b + 6784 - 0x25ab ) , ReplacementFor_cnt = ( 0x1261 + 606 - 0x14bf ) ; for ( ReplacementFor_j = ( 0x14c4 + 1507 - 0x1aa7 ) ; ReplacementFor_j < ReplacementFor_N ; ReplacementFor_j ++ ) { if ( ReplacementFor_table [ i ] [ ReplacementFor_j ] != ( ( char ) ( 0xac3 + 4941 - 0x1de2 ) ) ) { int ReplacementFor_cnt_op = ( 0xa3f + 109 - 0xaac ) ; for ( ReplacementFor_k = ( 0x721 + 6953 - 0x224a ) ; ReplacementFor_k < ReplacementFor_N ; ReplacementFor_k ++ ) { if ( ReplacementFor_table [ ReplacementFor_j ] [ ReplacementFor_k ] != ( ( char ) ( 0x82 + 6717 - 0x1a91 ) ) ) { ReplacementFor_cnt_op ++ ; } } ReplacementFor_sum += ( ReplacementFor_cnt_op * ReplacementFor_table_wp [ ReplacementFor_j ] - ReplacementFor_table [ ReplacementFor_j ] [ i ] + ( ( char ) ( 0xb29 + 5536 - 0x2099 ) ) ) / ( ReplacementFor_cnt_op - ( 0x7e5 + 3479 - 0x157b ) ) ; ReplacementFor_cnt ++ ; } } ReplacementFor_table_owp [ i ] = ReplacementFor_sum / ReplacementFor_cnt ; } for ( i = ( 0xe9 + 6706 - 0x1b1b ) ; i < ReplacementFor_N ; i ++ ) { double ReplacementFor_sum = ( 0x11d4 + 852 - 0x1528 ) , ReplacementFor_cnt = ( 0x1152 + 5536 - 0x26f2 ) ; for ( ReplacementFor_j = ( 0x1e5d + 1568 - 0x247d ) ; ReplacementFor_j < ReplacementFor_N ; ReplacementFor_j ++ ) { if ( ReplacementFor_table [ i ] [ ReplacementFor_j ] != ( ( char ) ( 0x202f + 916 - 0x2395 ) ) ) { ReplacementFor_sum += ReplacementFor_table_owp [ ReplacementFor_j ] ; ReplacementFor_cnt ++ ; } } ReplacementFor_table_oowp [ i ] = ReplacementFor_sum / ReplacementFor_cnt ; } for ( i = ( 0x3c + 7159 - 0x1c33 ) ; i < ReplacementFor_N ; i ++ ) { double ReplacementFor_rdi = 0.25 * ReplacementFor_table_wp [ i ] + 0.5 * ReplacementFor_table_owp [ i ] + 0.25 * ReplacementFor_table_oowp [ i ] ; printf ( " \n " " \x25 \x66 " , ReplacementFor_rdi ) ; } printf ( " \n " ) ; } }
>>>Func
METHOD main
METHOD_RETURN int
<operator>.assignment *ReplacementFor_fin=fopen("\x42\x2e\x69\x6e","\x72")
<operator>.assignment *\012ReplacementFor_fout=fopen("\x42\x2e\x6f\x75\x74","\x77")
fscanf fscanf(ReplacementFor_fin,"\x25\x64",&t)
RETURN return(0x1a13+2876-0x254f); return(0x1a13+2876-0x254f);
<operator>.lessEqualsThan ReplacementFor_tc<=t
<operator>.postIncrement ReplacementFor_tc++
<operator>.subtraction 0x1a13+2876-0x254f
fopen fopen("\x42\x2e\x69\x6e","\x72")
fopen fopen("\x42\x2e\x6f\x75\x74","\x77")
<operator>.assignment ReplacementFor_tc=\012(0x6aa+3765-0x155e)
<operator>.assignment ReplacementFor_comb[\012ReplacementFor_SIZE][ReplacementFor_SIZE]={(0x7e1+1267-0xcd4)}
<operator>.assignment ReplacementFor_oppo[ReplacementFor_SIZE][ReplacementFor_SIZE]={\012(0x751+5324-0x1c1d)}
<operator>.assignment ReplacementFor_lp=\012(0xb87+2592-0x15a7)
fscanf fscanf(ReplacementFor_fin,"\x25\x64",&ReplacementFor_c)
fscanf fscanf(\012ReplacementFor_fin,"\x25\x64",&ReplacementFor_d)
fscanf fscanf(\012ReplacementFor_fin,"\x25\x64",&ReplacementFor_n)
fgetc fgetc(ReplacementFor_fin)
fprintf fprintf(\012ReplacementFor_fout,"\x43\x61\x73\x65\x20\x23\x25\x64\x3a\x20",ReplacementFor_tc\012)
fprintf fprintf(ReplacementFor_fout,"\x5b")
fprintf fprintf(\012ReplacementFor_fout,"\x5d" "\n")
<operator>.postDecrement ReplacementFor_c--
<operator>.postDecrement ReplacementFor_d--
<operator>.postDecrement ReplacementFor_n--
<operator>.lessThan i<\012ReplacementFor_lp
<operator>.postIncrement i++
<operator>.addition 0x1a13+2876
<operator>.subtraction 0x6aa+3765-0x155e
<operator>.arrayInitializer {(0x7e1+1267-0xcd4)}
<operator>.arrayInitializer {\012(0x751+5324-0x1c1d)}
<operator>.subtraction 0xb87+2592-0x15a7
fscanf fscanf(ReplacementFor_fin,\012"\x20\x25\x63\x25\x63\x25\x63",&ReplacementFor_bea,&ReplacementFor_beb,&\012ReplacementFor_nbe)
<operator>.assignment ReplacementFor_comb[ReplacementFor_bea-\012((char)(0xa41+899-0xd83))][ReplacementFor_beb-((char)(0x12fc+2914-0x1e1d))]=\012ReplacementFor_comb[ReplacementFor_beb-((char)(0x90b+3855-0x17d9))][\012ReplacementFor_bea-((char)(0x1a77+2809-0x252f))]=ReplacementFor_nbe
fscanf fscanf(ReplacementFor_fin,"\x20\x25\x63\x25\x63",&ReplacementFor_bea,&\012ReplacementFor_beb)
<operator>.assignment ReplacementFor_oppo[ReplacementFor_bea-\012((char)(0xb81+2112-0x1380))][ReplacementFor_beb-((char)(0xe50+1156-0x1293))]=\012ReplacementFor_oppo[ReplacementFor_beb-((char)(0x12e0+3548-0x207b))][\012ReplacementFor_bea-((char)(0x217+2574-0xbe4))]=(0x1595+2499-0x1f57)
<operator>.assignment ReplacementFor_ch=fgetc(ReplacementFor_fin)
<operator>.assignment i=(0x254+7067-0x1def)
fprintf fprintf(\012ReplacementFor_fout,"\x25\x63",ReplacementFor_list[i])
<operator>.addition 0x6aa+3765
<operator>.subtraction 0x7e1+1267-0xcd4
<operator>.subtraction 0x751+5324-0x1c1d
<operator>.addition 0xb87+2592
<operator>.logicalAnd ReplacementFor_lp>(0x726+4033-0x16e7)&&ReplacementFor_comb[ReplacementFor_list[\012ReplacementFor_lp-(0x472+872-0x7d9)]-((char)(0x3fa+2188-0xc45))][\012ReplacementFor_ch-((char)(0x7e0+7590-0x2545))]
IDENTIFIER i if (i)
<operator>.addition 0x7e1+1267
<operator>.addition 0x751+5324
<operator>.assignment ReplacementFor_comb[ReplacementFor_beb-((char)(0x90b+3855-0x17d9))][\012ReplacementFor_bea-((char)(0x1a77+2809-0x252f))]=ReplacementFor_nbe
<operator>.assignment ReplacementFor_oppo[ReplacementFor_beb-((char)(0x12e0+3548-0x207b))][\012ReplacementFor_bea-((char)(0x217+2574-0xbe4))]=(0x1595+2499-0x1f57)
fgetc fgetc(ReplacementFor_fin)
<operator>.assignment ReplacementFor_list[\012ReplacementFor_lp-(0x474+6323-0x1d26)]=ReplacementFor_comb[ReplacementFor_list[\012ReplacementFor_lp-(0xd19+1472-0x12d8)]-((char)(0x19df+420-0x1b42))][\012ReplacementFor_ch-((char)(0x9df+3021-0x156b))]
<operator>.subtraction 0x254+7067-0x1def
fprintf fprintf(ReplacementFor_fout,"\x2c\x20")
<operator>.subtraction ReplacementFor_beb-((char)(0x12fc+2914-0x1e1d))
<operator>.subtraction ReplacementFor_beb-((char)(0xe50+1156-0x1293))
<operator>.subtraction 0x1595+2499-0x1f57
<operator>.greaterThan ReplacementFor_lp>(0x726+4033-0x16e7)
<operator>.addition 0x254+7067
<operator>.subtraction ReplacementFor_bea-\012((char)(0xa41+899-0xd83))
<operator>.cast (char)(0x12fc+2914-0x1e1d)
<operator>.subtraction ReplacementFor_bea-((char)(0x1a77+2809-0x252f))
<operator>.subtraction ReplacementFor_bea-\012((char)(0xb81+2112-0x1380))
<operator>.cast (char)(0xe50+1156-0x1293)
<operator>.subtraction ReplacementFor_bea-((char)(0x217+2574-0xbe4))
<operator>.addition 0x1595+2499
<operator>.subtraction 0x726+4033-0x16e7
<operator>.subtraction ReplacementFor_ch-((char)(0x7e0+7590-0x2545))
<operator>.lessThan i\012<ReplacementFor_lp
<operator>.postIncrement i++
<operator>.equals i==ReplacementFor_lp
<operator>.cast (char)(0xa41+899-0xd83)
<operator>.subtraction 0x12fc+2914-0x1e1d
<operator>.subtraction ReplacementFor_beb-((char)(0x90b+3855-0x17d9))
<operator>.cast (char)(0x1a77+2809-0x252f)
<operator>.cast (char)(0xb81+2112-0x1380)
<operator>.subtraction 0xe50+1156-0x1293
<operator>.subtraction ReplacementFor_beb-((char)(0x12e0+3548-0x207b))
<operator>.cast (char)(0x217+2574-0xbe4)
<operator>.addition 0x726+4033
<operator>.subtraction ReplacementFor_list[\012ReplacementFor_lp-(0x472+872-0x7d9)]-((char)(0x3fa+2188-0xc45))
<operator>.cast (char)(0x7e0+7590-0x2545)
<operator>.subtraction ReplacementFor_lp-(0x474+6323-0x1d26)
<operator>.subtraction ReplacementFor_ch-((char)(0x9df+3021-0x156b))
<operator>.assignment i=(0x14f2+1813-0x1c07)
<operator>.assignment ReplacementFor_list[ReplacementFor_lp++]=\012ReplacementFor_ch
<operator>.subtraction 0xa41+899-0xd83
<operator>.addition 0x12fc+2914
<operator>.cast (char)(0x90b+3855-0x17d9)
<operator>.subtraction 0x1a77+2809-0x252f
<operator>.subtraction 0xb81+2112-0x1380
<operator>.addition 0xe50+1156
<operator>.cast (char)(0x12e0+3548-0x207b)
<operator>.subtraction 0x217+2574-0xbe4
<operator>.cast (char)(0x3fa+2188-0xc45)
<operator>.subtraction 0x7e0+7590-0x2545
<operator>.subtraction 0x474+6323-0x1d26
<operator>.subtraction ReplacementFor_list[\012ReplacementFor_lp-(0xd19+1472-0x12d8)]-((char)(0x19df+420-0x1b42))
<operator>.cast (char)(0x9df+3021-0x156b)
<operator>.assignment ReplacementFor_lp=(0x741+478-0x91f)
<operator>.addition 0xa41+899
<operator>.subtraction 0x90b+3855-0x17d9
<operator>.addition 0x1a77+2809
<operator>.addition 0xb81+2112
<operator>.subtraction 0x12e0+3548-0x207b
<operator>.addition 0x217+2574
<operator>.subtraction ReplacementFor_lp-(0x472+872-0x7d9)
<operator>.subtraction 0x3fa+2188-0xc45
<operator>.addition 0x7e0+7590
<operator>.addition 0x474+6323
<operator>.cast (char)(0x19df+420-0x1b42)
<operator>.subtraction 0x9df+3021-0x156b
<operator>.subtraction 0x14f2+1813-0x1c07
<operator>.subtraction ReplacementFor_ch-((char)(0x1695+3362-0x2376))
<operator>.addition 0x90b+3855
<operator>.addition 0x12e0+3548
<operator>.subtraction 0x472+872-0x7d9
<operator>.addition 0x3fa+2188
<operator>.subtraction ReplacementFor_lp-(0xd19+1472-0x12d8)
<operator>.subtraction 0x19df+420-0x1b42
<operator>.addition 0x9df+3021
<operator>.addition 0x14f2+1813
<operator>.subtraction ReplacementFor_list[i]-\012((char)(0x6d2+1078-0xac7))
<operator>.cast (char)(0x1695+3362-0x2376)
<operator>.postIncrement ReplacementFor_lp++
<operator>.subtraction 0x741+478-0x91f
<operator>.addition 0x472+872
<operator>.subtraction 0xd19+1472-0x12d8
<operator>.addition 0x19df+420
<operator>.cast (char)(0x6d2+1078-0xac7)
<operator>.subtraction 0x1695+3362-0x2376
<operator>.addition 0x741+478
<operator>.addition 0xd19+1472
<operator>.subtraction 0x6d2+1078-0xac7
<operator>.addition 0x1695+3362
<operator>.addition 0x6d2+1078
<operator>.addressOf &ReplacementFor_c
<operator>.addressOf &ReplacementFor_d
<operator>.addressOf &ReplacementFor_n
<operator>.addressOf &ReplacementFor_bea
<operator>.addressOf &ReplacementFor_beb
<operator>.addressOf &\012ReplacementFor_nbe
<operator>.indirectIndexAccess ReplacementFor_comb[ReplacementFor_bea-\012((char)(0xa41+899-0xd83))][ReplacementFor_beb-((char)(0x12fc+2914-0x1e1d))]
<operator>.addressOf &ReplacementFor_bea
<operator>.addressOf &\012ReplacementFor_beb
<operator>.indirectIndexAccess ReplacementFor_oppo[ReplacementFor_bea-\012((char)(0xb81+2112-0x1380))][ReplacementFor_beb-((char)(0xe50+1156-0x1293))]
<operator>.indirectIndexAccess ReplacementFor_list[i]
<operator>.indirectIndexAccess ReplacementFor_comb[ReplacementFor_bea-\012((char)(0xa41+899-0xd83))]
<operator>.indirectIndexAccess ReplacementFor_comb[ReplacementFor_beb-((char)(0x90b+3855-0x17d9))][\012ReplacementFor_bea-((char)(0x1a77+2809-0x252f))]
<operator>.indirectIndexAccess ReplacementFor_oppo[ReplacementFor_bea-\012((char)(0xb81+2112-0x1380))]
<operator>.indirectIndexAccess ReplacementFor_oppo[ReplacementFor_beb-((char)(0x12e0+3548-0x207b))][\012ReplacementFor_bea-((char)(0x217+2574-0xbe4))]
<operator>.indirectIndexAccess ReplacementFor_comb[ReplacementFor_list[\012ReplacementFor_lp-(0x472+872-0x7d9)]-((char)(0x3fa+2188-0xc45))][\012ReplacementFor_ch-((char)(0x7e0+7590-0x2545))]
<operator>.indirectIndexAccess ReplacementFor_comb[ReplacementFor_beb-((char)(0x90b+3855-0x17d9))]
<operator>.indirectIndexAccess ReplacementFor_oppo[ReplacementFor_beb-((char)(0x12e0+3548-0x207b))]
<operator>.indirectIndexAccess ReplacementFor_comb[ReplacementFor_list[\012ReplacementFor_lp-(0x472+872-0x7d9)]-((char)(0x3fa+2188-0xc45))]
<operator>.indirectIndexAccess ReplacementFor_list[\012ReplacementFor_lp-(0x474+6323-0x1d26)]
<operator>.indirectIndexAccess ReplacementFor_comb[ReplacementFor_list[\012ReplacementFor_lp-(0xd19+1472-0x12d8)]-((char)(0x19df+420-0x1b42))][\012ReplacementFor_ch-((char)(0x9df+3021-0x156b))]
UNKNOWN char char
UNKNOWN char char
<operator>.indirectIndexAccess ReplacementFor_comb[ReplacementFor_list[\012ReplacementFor_lp-(0xd19+1472-0x12d8)]-((char)(0x19df+420-0x1b42))]
UNKNOWN char char
UNKNOWN char char
UNKNOWN char char
UNKNOWN char char
<operator>.indirectIndexAccess ReplacementFor_list[\012ReplacementFor_lp-(0x472+872-0x7d9)]
UNKNOWN char char
<operator>.indirectIndexAccess ReplacementFor_oppo[ReplacementFor_list[i]-\012((char)(0x6d2+1078-0xac7))][ReplacementFor_ch-((char)(0x1695+3362-0x2376))]
UNKNOWN char char
UNKNOWN char char
UNKNOWN char char
<operator>.indirectIndexAccess ReplacementFor_list[\012ReplacementFor_lp-(0xd19+1472-0x12d8)]
UNKNOWN char char
<operator>.indirectIndexAccess ReplacementFor_oppo[ReplacementFor_list[i]-\012((char)(0x6d2+1078-0xac7))]
<operator>.indirectIndexAccess ReplacementFor_list[ReplacementFor_lp++]
UNKNOWN char char
<operator>.indirectIndexAccess ReplacementFor_list[i]
UNKNOWN char char
UNKNOWN char char
>>>PDG&177 0->4 0->6 0->7 0->8 0->9 0->10 0->15 0->16 0->17 0->18 0->19 0->20 0->21 0->22 0->23 0->24 0->25 0->26 0->27 0->28 0->31 0->32 0->33 0->34 0->38 0->39 0->40 0->41 0->42 0->44 0->45 0->46 0->47 0->49 0->51 0->52 0->53 0->54 0->55 0->56 0->57 0->58 0->60 0->61 0->63 0->64 0->65 0->66 0->67 0->68 0->69 0->71 0->72 0->75 0->76 0->78 0->81 0->82 0->84 0->85 0->86 0->88 0->89 0->90 0->92 0->94 0->95 0->99 0->100 0->101 0->102 0->103 0->104 0->105 0->106 0->107 0->108 0->110 0->111 0->112 0->113 0->114 0->115 0->116 0->117 0->118 0->119 0->120 0->123 0->124 0->125 0->126 0->127 0->129 0->130 0->131 0->132 0->133 0->134 2->1 2->1 2->4 3->1 3->1 3->1 3->19 4->1 4->1 4->1 4->6 4->15 5->1 6->1 6->1 6->1 6->6 6->7 6->12 6->13 6->14 6->15 6->16 6->17 6->18 6->19 6->19 6->20 6->21 6->22 6->23 6->24 6->25 6->29 6->30 6->31 6->37 6->40 6->41 6->42 6->45 6->46 6->51 6->57 6->135 6->136 6->137 7->1 7->6 8->1 8->1 8->5 9->2 9->2 10->3 10->3 11->1 11->1 11->6 12->1 12->1 12->1 13->1 13->1 13->1 14->1 14->1 14->25 14->56 15->1 15->1 15->16 15->22 15->32 16->1 16->1 16->17 16->23 16->34 17->1 17->1 17->18 17->24 18->1 18->1 18->15 18->49 19->1 19->7 19->20 20->1 20->21 20->38 20->52 21->1 21->1 21->19 22->1 22->1 22->15 22->22 22->32 22->33 22->47 22->53 22->58 22->59 22->60 22->70 22->71 22->72 22->73 22->85 22->86 22->87 22->88 22->99 22->100 22->101 22->113 22->138 22->139 22->140 22->141 22->146 22->147 22->151 22->156 22->159 22->160 22->166 23->1 23->1 23->16 23->23 23->34 23->35 23->48 23->54 23->55 23->61 23->62 23->63 23->64 23->74 23->75 23->76 23->77 23->89 23->90 23->91 23->92 23->102 23->103 23->104 23->114 23->142 23->143 23->144 23->148 23->149 23->152 23->157 23->161 23->162 23->167 24->1 24->1 24->17 24->24 24->36 24->43 24->49 24->56 24->65 24->78 25->1 25->1 25->1 25->25 25->26 25->26 25->38 25->52 25->145 26->1 26->25 28->1 28->11 28->11 29->1 29->12 30->1 30->13 31->1 31->14 31->14 32->1 32->1 32->1 32->1 32->16 32->33 32->34 32->34 32->47 32->53 32->54 32->58 32->60 32->61 32->72 32->76 33->1 33->1 33->1 34->1 34->1 34->1 34->17 34->32 34->32 34->53 34->54 34->58 34->61 34->63 34->72 34->76 35->1 35->1 35->1 36->1 36->1 36->1 36->66 36->82 36->84 36->112 37->1 37->1 37->25 38->1 38->1 38->21 38->52 38->121 40->1 40->29 40->29 41->1 41->30 41->30 43->1 43->1 43->1 43->50 43->67 43->69 43->81 43->82 43->83 43->95 43->96 43->97 43->108 43->109 43->110 43->111 43->117 43->118 43->119 43->120 43->126 43->127 43->131 43->154 43->155 43->158 43->169 43->170 43->173 47->1 47->1 47->33 48->1 48->1 48->35 49->1 49->15 49->36 50->1 50->1 50->1 51->1 51->37 51->37 52->1 52->38 53->1 53->72 54->1 54->76 55->1 55->35 55->35 55->48 55->48 56->1 56->43 56->43 56->66 56->67 56->79 56->80 56->81 56->93 56->94 56->105 56->105 56->106 56->107 56->115 56->116 56->125 56->150 56->153 56->163 56->164 56->168 58->1 58->60 59->1 60->1 60->1 60->32 60->34 60->58 60->61 61->1 61->63 62->1 63->1 63->1 63->32 63->34 63->58 63->61 65->1 65->56 65->56 66->1 66->1 66->82 66->84 66->112 67->1 67->68 67->69 67->69 67->112 67->121 67->122 67->128 67->129 67->132 67->133 67->134 67->165 67->171 67->174 67->175 67->176 68->1 68->67 69->1 69->84 69->98 69->123 69->123 69->124 69->130 69->172 70->1 71->1 71->53 71->53 71->59 71->59 72->1 72->1 72->32 72->34 72->53 72->54 73->1 74->1 75->1 75->54 75->54 75->62 75->62 76->1 76->1 76->32 76->34 76->53 76->54 77->1 79->1 79->1 80->1 81->1 81->117 82->1 82->1 83->1 83->1 83->67 84->1 84->1 84->1 85->1 85->58 85->58 85->70 85->70 87->1 88->1 88->60 88->60 88->73 88->73 89->1 89->61 89->61 89->74 89->74 91->1 92->1 92->63 92->63 92->77 92->77 93->1 94->1 94->66 94->66 94->80 94->80 95->1 95->81 95->81 96->1 96->1 97->1 98->1 98->1 98->25 98->56 100->1 100->72 100->72 100->87 100->87 103->1 103->76 103->76 103->91 103->91 105->1 105->67 105->81 106->1 106->79 106->79 106->93 106->93 109->1 110->1 110->82 110->82 110->97 110->97 111->1 111->83 111->83 112->1 112->1 112->84 115->1 115->105 115->105 117->1 117->25 117->56 118->1 118->96 118->96 118->109 118->109 121->1 121->1 121->38 122->1 123->25 123->56 124->1 124->98 124->98 126->1 126->117 126->117 128->1 129->1 129->112 129->112 129->122 129->122 132->1 132->121 132->121 132->128 132->128 165->67 165->68
>>>Token int main ( ) { int i ; FILE * ReplacementFor_fin = fopen ( " \x42 \x2e \x69 \x6e " , " \x72 " ) ; FILE * ReplacementFor_fout = fopen ( " \x42 \x2e \x6f \x75 \x74 " , " \x77 " ) ; int t , ReplacementFor_tc ; fscanf ( ReplacementFor_fin , " \x25 \x64 " , & t ) ; for ( ReplacementFor_tc = ( 0x6aa + 3765 - 0x155e ) ; ReplacementFor_tc <= t ; ReplacementFor_tc ++ ) { char ReplacementFor_bea , ReplacementFor_beb , ReplacementFor_nbe , ReplacementFor_ch ; int ReplacementFor_c , ReplacementFor_d , ReplacementFor_n ; char ReplacementFor_comb [ ReplacementFor_SIZE ] [ ReplacementFor_SIZE ] = { ( 0x7e1 + 1267 - 0xcd4 ) } ; int ReplacementFor_oppo [ ReplacementFor_SIZE ] [ ReplacementFor_SIZE ] = { ( 0x751 + 5324 - 0x1c1d ) } ; char ReplacementFor_list [ MAXLEN ] ; int ReplacementFor_lp = ( 0xb87 + 2592 - 0x15a7 ) ; fscanf ( ReplacementFor_fin , " \x25 \x64 " , & ReplacementFor_c ) ; while ( ReplacementFor_c -- ) { fscanf ( ReplacementFor_fin , " \x20 \x25 \x63 \x25 \x63 \x25 \x63 " , & ReplacementFor_bea , & ReplacementFor_beb , & ReplacementFor_nbe ) ; ReplacementFor_comb [ ReplacementFor_bea - ( ( char ) ( 0xa41 + 899 - 0xd83 ) ) ] [ ReplacementFor_beb - ( ( char ) ( 0x12fc + 2914 - 0x1e1d ) ) ] = ReplacementFor_comb [ ReplacementFor_beb - ( ( char ) ( 0x90b + 3855 - 0x17d9 ) ) ] [ ReplacementFor_bea - ( ( char ) ( 0x1a77 + 2809 - 0x252f ) ) ] = ReplacementFor_nbe ; } fscanf ( ReplacementFor_fin , " \x25 \x64 " , & ReplacementFor_d ) ; while ( ReplacementFor_d -- ) { fscanf ( ReplacementFor_fin , " \x20 \x25 \x63 \x25 \x63 " , & ReplacementFor_bea , & ReplacementFor_beb ) ; ReplacementFor_oppo [ ReplacementFor_bea - ( ( char ) ( 0xb81 + 2112 - 0x1380 ) ) ] [ ReplacementFor_beb - ( ( char ) ( 0xe50 + 1156 - 0x1293 ) ) ] = ReplacementFor_oppo [ ReplacementFor_beb - ( ( char ) ( 0x12e0 + 3548 - 0x207b ) ) ] [ ReplacementFor_bea - ( ( char ) ( 0x217 + 2574 - 0xbe4 ) ) ] = ( 0x1595 + 2499 - 0x1f57 ) ; } fscanf ( ReplacementFor_fin , " \x25 \x64 " , & ReplacementFor_n ) ; fgetc ( ReplacementFor_fin ) ; while ( ReplacementFor_n -- ) { ReplacementFor_ch = fgetc ( ReplacementFor_fin ) ; if ( ReplacementFor_lp > ( 0x726 + 4033 - 0x16e7 ) && ReplacementFor_comb [ ReplacementFor_list [ ReplacementFor_lp - ( 0x472 + 872 - 0x7d9 ) ] - ( ( char ) ( 0x3fa + 2188 - 0xc45 ) ) ] [ ReplacementFor_ch - ( ( char ) ( 0x7e0 + 7590 - 0x2545 ) ) ] ) ReplacementFor_list [ ReplacementFor_lp - ( 0x474 + 6323 - 0x1d26 ) ] = ReplacementFor_comb [ ReplacementFor_list [ ReplacementFor_lp - ( 0xd19 + 1472 - 0x12d8 ) ] - ( ( char ) ( 0x19df + 420 - 0x1b42 ) ) ] [ ReplacementFor_ch - ( ( char ) ( 0x9df + 3021 - 0x156b ) ) ] ; else { for ( i = ( 0x14f2 + 1813 - 0x1c07 ) ; i < ReplacementFor_lp ; i ++ ) if ( ReplacementFor_oppo [ ReplacementFor_list [ i ] - ( ( char ) ( 0x6d2 + 1078 - 0xac7 ) ) ] [ ReplacementFor_ch - ( ( char ) ( 0x1695 + 3362 - 0x2376 ) ) ] ) break ; if ( i == ReplacementFor_lp ) ReplacementFor_list [ ReplacementFor_lp ++ ] = ReplacementFor_ch ; else ReplacementFor_lp = ( 0x741 + 478 - 0x91f ) ; } } fprintf ( ReplacementFor_fout , " \x43 \x61 \x73 \x65 \x20 \x23 \x25 \x64 \x3a \x20 " , ReplacementFor_tc ) ; fprintf ( ReplacementFor_fout , " \x5b " ) ; for ( i = ( 0x254 + 7067 - 0x1def ) ; i < ReplacementFor_lp ; i ++ ) { if ( i ) fprintf ( ReplacementFor_fout , " \x2c \x20 " ) ; fprintf ( ReplacementFor_fout , " \x25 \x63 " , ReplacementFor_list [ i ] ) ; } fprintf ( ReplacementFor_fout , " \x5d " " \n " ) ; } return ( 0x1a13 + 2876 - 0x254f ) ; }
>>>Func
METHOD ReplacementFor_searchBST
METHOD_RETURN struct ReplacementFor_TreeNode
PARAM struct \012ReplacementFor_TreeNode*ReplacementFor_root
PARAM int val
<operator>.logicalNot !ReplacementFor_root
<operator>.equals ReplacementFor_root->val==val
RETURN return NULL; return NULL;
RETURN return ReplacementFor_root; return ReplacementFor_root;
IDENTIFIER NULL return NULL;
IDENTIFIER ReplacementFor_root return ReplacementFor_root;
<operator>.greaterThan ReplacementFor_root->val>val
RETURN return ReplacementFor_searchBST(\012ReplacementFor_root->ReplacementFor_left,val); return ReplacementFor_searchBST(\012ReplacementFor_root->ReplacementFor_left,val);
ReplacementFor_searchBST ReplacementFor_searchBST(\012ReplacementFor_root->ReplacementFor_left,val)
RETURN return \012ReplacementFor_searchBST(ReplacementFor_root->ReplacementFor_right,val); return \012ReplacementFor_searchBST(ReplacementFor_root->ReplacementFor_right,val);
ReplacementFor_searchBST ReplacementFor_searchBST(ReplacementFor_root->ReplacementFor_right,val)
<operator>.indirectFieldAccess ReplacementFor_root->val
FIELD_IDENTIFIER val val
<operator>.indirectFieldAccess ReplacementFor_root->val
FIELD_IDENTIFIER val val
<operator>.indirectFieldAccess ReplacementFor_root->ReplacementFor_left
FIELD_IDENTIFIER ReplacementFor_left ReplacementFor_left
<operator>.indirectFieldAccess ReplacementFor_root->ReplacementFor_right
FIELD_IDENTIFIER ReplacementFor_right ReplacementFor_right
>>>PDG&23 0->2 0->3 0->4 0->5 0->6 0->8 0->9 0->10 0->12 0->14 2->4 3->1 3->5 4->1 4->1 4->5 4->6 4->9 4->15 4->16 5->7 5->10 5->10 5->10 5->17 5->18 6->1 7->1 8->6 9->7 10->11 10->12 10->12 10->13 10->14 10->14 10->19 10->20 10->21 10->22 11->1 12->11 13->1 14->13
>>>Token struct ReplacementFor_TreeNode * ReplacementFor_searchBST ( struct ReplacementFor_TreeNode * ReplacementFor_root , int val ) { if ( ! ReplacementFor_root ) return NULL ; if ( ReplacementFor_root -> val == val ) { return ReplacementFor_root ; } else if ( ReplacementFor_root -> val > val ) { return ReplacementFor_searchBST ( ReplacementFor_root -> ReplacementFor_left , val ) ; } else { return ReplacementFor_searchBST ( ReplacementFor_root -> ReplacementFor_right , val ) ; } }
>>>Func
METHOD main
METHOD_RETURN int
PARAM int ReplacementFor_argc
PARAM char**ReplacementFor_argv
scanf scanf("\x25\x64",&t)
RETURN return(0x19f+7518-0x1efd); return(0x19f+7518-0x1efd);
<operator>.lessEqualsThan i<=t
<operator>.postIncrement i++
<operator>.subtraction 0x19f+7518-0x1efd
<operator>.assignment i=(0xfd9+1825-0x16f9)
scanf scanf("\x25\x64",&ReplacementFor_c)
scanf scanf("\x25\x64",&ReplacementFor_d)
scanf scanf("\x25\x64",&ReplacementFor_n)
scanf scanf("\x25\x73",s)
<operator>.assignment ReplacementFor_a=(0x1626+1666-0x1ca8)
<operator>.assignment s[++ReplacementFor_a]=s[ReplacementFor_j]
printf printf("\x43\x61\x73\x65\x20\x23\x25\x64\x3a\x20\x5b",i)
printf printf("\x5d" "\n")
<operator>.lessThan ReplacementFor_j<(0x768+6933-0x217d)
<operator>.postIncrement ReplacementFor_j++
<operator>.lessThan ReplacementFor_j<ReplacementFor_c
<operator>.postIncrement ReplacementFor_j++
<operator>.lessThan ReplacementFor_j<ReplacementFor_d
<operator>.postIncrement ReplacementFor_j++
<operator>.lessThan ReplacementFor_j<ReplacementFor_n
<operator>.postIncrement ReplacementFor_j++
strlen strlen(s)
<operator>.lessThan ReplacementFor_j<strlen(s)
<operator>.postIncrement ReplacementFor_j++
printf printf("\x2c\x20\x25\x63",s[\012ReplacementFor_j])
<operator>.addition 0x19f+7518
<operator>.subtraction 0xfd9+1825-0x16f9
<operator>.assignment ReplacementFor_j=(0xdb7+3623-0x1bde)
<operator>.lessThan ReplacementFor_k<\012(0x900+911-0xb8f)
<operator>.postIncrement ReplacementFor_k++
<operator>.assignment ReplacementFor_j=(0x167c+1867-0x1dc7)
scanf scanf("\x25\x73",base)
<operator>.assignment ReplacementFor_bases[base[\012(0x807+6583-0x21be)]][base[(0xe5b+5248-0x22da)]]=base[(0xa05+6016-0x2183)]
<operator>.assignment ReplacementFor_bases[base[(0xaaf+1483-0x1079)]][base[(0x630+466-0x802)]]=base[\012(0x4a1+5235-0x1912)]
<operator>.assignment ReplacementFor_j=\012(0x9db+2735-0x148a)
scanf scanf(\012"\x25\x73",ReplacementFor_oppose)
<operator>.assignment ReplacementFor_opposes[ReplacementFor_oppose[\012(0x898+4241-0x1929)]][ReplacementFor_oppose[(0x1888+1784-0x1f7f)]]=\012(0xe23+1660-0x149e)
<operator>.assignment ReplacementFor_opposes[ReplacementFor_oppose[\012(0x15e0+1216-0x1a9f)]][ReplacementFor_oppose[(0xed8+2742-0x198e)]]=\012(0x1597+1205-0x1a4b)
<operator>.subtraction 0x1626+1666-0x1ca8
<operator>.assignment ReplacementFor_j=(0x52c+6207-0x1d6a)
<operator>.assignment e=(0x5f8+5413-0x1b1d)
printf printf(\012"\x25\x63" s[(0xb99+2306-0x149b)])
<operator>.assignment ReplacementFor_j=(0xf5b+5360-0x244a)
<operator>.addition 0xfd9+1825
<operator>.subtraction 0x768+6933-0x217d
<operator>.assignment ReplacementFor_k=(0x51b+5448-0x1a63)
<operator>.assignment ReplacementFor_bases[ReplacementFor_j][\012ReplacementFor_k]=(0x595+4598-0x178b)
<operator>.assignment ReplacementFor_opposes[ReplacementFor_j][\012ReplacementFor_k]=(0xf45+2841-0x1a5e)
<operator>.addition 0x1626+1666
<operator>.logicalNot !e
<operator>.preIncrement ++ReplacementFor_a
strlen strlen(s)
<operator>.subtraction 0xdb7+3623-0x1bde
<operator>.addition 0x768+6933
<operator>.subtraction 0x900+911-0xb8f
<operator>.subtraction 0x167c+1867-0x1dc7
<operator>.subtraction 0x9db+2735-0x148a
<operator>.subtraction 0xe23+1660-0x149e
<operator>.subtraction 0x1597+1205-0x1a4b
<operator>.subtraction 0x52c+6207-0x1d6a
<operator>.subtraction 0x5f8+5413-0x1b1d
<operator>.assignment s[\012ReplacementFor_a]=ReplacementFor_bases[s[ReplacementFor_j]][s[ReplacementFor_a]]
<operator>.assignment e=(0x72c+4079-0x171a)
<operator>.assignment s[++\012ReplacementFor_a]=s[ReplacementFor_j]
<operator>.subtraction 0xf5b+5360-0x244a
<operator>.addition 0xdb7+3623
<operator>.subtraction 0x51b+5448-0x1a63
<operator>.addition 0x900+911
<operator>.subtraction 0x595+4598-0x178b
<operator>.subtraction 0xf45+2841-0x1a5e
<operator>.addition 0x167c+1867
<operator>.subtraction 0xa05+6016-0x2183
<operator>.subtraction 0x4a1+5235-0x1912
<operator>.addition 0x9db+2735
<operator>.addition 0xe23+1660
<operator>.addition 0x1597+1205
<operator>.addition 0x52c+6207
<operator>.addition 0x5f8+5413
<operator>.subtraction 0xb99+2306-0x149b
<operator>.addition 0xf5b+5360
<operator>.addition 0x51b+5448
<operator>.addition 0x595+4598
<operator>.addition 0xf45+2841
<operator>.subtraction 0xe5b+5248-0x22da
<operator>.addition 0xa05+6016
<operator>.subtraction 0x630+466-0x802
<operator>.addition 0x4a1+5235
<operator>.subtraction 0x1888+1784-0x1f7f
<operator>.subtraction 0xed8+2742-0x198e
<operator>.subtraction 0x72c+4079-0x171a
<operator>.greaterEqualsThan ReplacementFor_k>=(0xf32+4068-0x1f16)
<operator>.postDecrement ReplacementFor_k--
<operator>.addition 0xb99+2306
<operator>.subtraction 0x807+6583-0x21be
<operator>.addition 0xe5b+5248
<operator>.subtraction 0xaaf+1483-0x1079
<operator>.addition 0x630+466
<operator>.subtraction 0x898+4241-0x1929
<operator>.addition 0x1888+1784
<operator>.subtraction 0x15e0+1216-0x1a9f
<operator>.addition 0xed8+2742
<operator>.addition 0x72c+4079
<operator>.assignment ReplacementFor_k=ReplacementFor_a
<operator>.preIncrement ++\012ReplacementFor_a
<operator>.addition 0x807+6583
<operator>.addition 0xaaf+1483
<operator>.addition 0x898+4241
<operator>.addition 0x15e0+1216
<operator>.subtraction 0xf32+4068-0x1f16
<operator>.logicalNot !s[ReplacementFor_k\012]
<operator>.addition 0xf32+4068
<operator>.assignment ReplacementFor_a=-(0x6e2+1741-0xdae)
<operator>.assignment e=(0xf2c+4337-0x201c)
<operator>.minus -(0x6e2+1741-0xdae)
<operator>.subtraction 0xf2c+4337-0x201c
<operator>.subtraction 0x6e2+1741-0xdae
<operator>.addition 0xf2c+4337
<operator>.addition 0x6e2+1741
<operator>.addressOf &ReplacementFor_c
<operator>.addressOf &ReplacementFor_d
<operator>.addressOf &ReplacementFor_n
<operator>.indirectIndexAccess s[++ReplacementFor_a]
<operator>.indirectIndexAccess s[ReplacementFor_j]
<operator>.indirectIndexAccess s[\012ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_bases[base[\012(0x807+6583-0x21be)]][base[(0xe5b+5248-0x22da)]]
<operator>.indirectIndexAccess base[(0xa05+6016-0x2183)]
<operator>.indirectIndexAccess ReplacementFor_bases[base[(0xaaf+1483-0x1079)]][base[(0x630+466-0x802)]]
<operator>.indirectIndexAccess base[\012(0x4a1+5235-0x1912)]
<operator>.indirectIndexAccess ReplacementFor_opposes[ReplacementFor_oppose[\012(0x898+4241-0x1929)]][ReplacementFor_oppose[(0x1888+1784-0x1f7f)]]
<operator>.indirectIndexAccess ReplacementFor_opposes[ReplacementFor_oppose[\012(0x15e0+1216-0x1a9f)]][ReplacementFor_oppose[(0xed8+2742-0x198e)]]
<operator>.indirectIndexAccess ReplacementFor_bases[s[ReplacementFor_j]][s[ReplacementFor_a]]
<operator>.indirectIndexAccess s[(0xb99+2306-0x149b)]
<operator>.indirectIndexAccess ReplacementFor_bases[ReplacementFor_j][\012ReplacementFor_k]
<operator>.indirectIndexAccess ReplacementFor_opposes[ReplacementFor_j][\012ReplacementFor_k]
<operator>.indirectIndexAccess ReplacementFor_bases[base[\012(0x807+6583-0x21be)]]
<operator>.indirectIndexAccess base[(0xe5b+5248-0x22da)]
<operator>.indirectIndexAccess ReplacementFor_bases[base[(0xaaf+1483-0x1079)]]
<operator>.indirectIndexAccess base[(0x630+466-0x802)]
<operator>.indirectIndexAccess ReplacementFor_opposes[ReplacementFor_oppose[\012(0x898+4241-0x1929)]]
<operator>.indirectIndexAccess ReplacementFor_oppose[(0x1888+1784-0x1f7f)]
<operator>.indirectIndexAccess ReplacementFor_opposes[ReplacementFor_oppose[\012(0x15e0+1216-0x1a9f)]]
<operator>.indirectIndexAccess ReplacementFor_oppose[(0xed8+2742-0x198e)]
<operator>.indirectIndexAccess ReplacementFor_bases[s[ReplacementFor_j]]
<operator>.indirectIndexAccess s[ReplacementFor_a]
<operator>.indirectIndexAccess ReplacementFor_bases[ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_opposes[ReplacementFor_j]
<operator>.indirectIndexAccess base[\012(0x807+6583-0x21be)]
<operator>.indirectIndexAccess base[(0xaaf+1483-0x1079)]
<operator>.indirectIndexAccess ReplacementFor_oppose[\012(0x898+4241-0x1929)]
<operator>.indirectIndexAccess ReplacementFor_oppose[\012(0x15e0+1216-0x1a9f)]
<operator>.indirectIndexAccess s[ReplacementFor_j]
<operator>.indirectIndexAccess s[\012ReplacementFor_a]
<operator>.indirectIndexAccess ReplacementFor_bases[s[ReplacementFor_j]][s[ReplacementFor_a]]
<operator>.indirectIndexAccess s[++\012ReplacementFor_a]
<operator>.indirectIndexAccess s[ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_bases[s[ReplacementFor_j]]
<operator>.indirectIndexAccess s[ReplacementFor_a]
<operator>.indirectIndexAccess s[ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_opposes[s[ReplacementFor_j]][s[ReplacementFor_k]]
<operator>.indirectIndexAccess s[ReplacementFor_k\012]
<operator>.indirectIndexAccess ReplacementFor_opposes[s[ReplacementFor_j]]
<operator>.indirectIndexAccess s[ReplacementFor_k]
<operator>.indirectIndexAccess s[ReplacementFor_j]
>>>PDG&168 0->2 0->3 0->4 0->6 0->7 0->8 0->10 0->11 0->12 0->13 0->16 0->17 0->18 0->19 0->20 0->21 0->22 0->23 0->24 0->25 0->26 0->27 0->28 0->29 0->30 0->31 0->33 0->34 0->36 0->40 0->43 0->46 0->48 0->49 0->53 0->54 0->55 0->56 0->57 0->58 0->59 0->60 0->61 0->62 0->63 0->64 0->65 0->69 0->70 0->71 0->72 0->73 0->74 0->75 0->76 0->77 0->78 0->79 0->80 0->81 0->82 0->83 0->84 0->85 0->86 0->87 0->88 0->89 0->90 0->91 0->92 0->93 0->94 0->95 0->96 0->97 0->98 0->99 0->100 0->101 0->102 0->103 0->104 0->105 0->106 0->107 0->108 0->109 0->110 0->111 0->112 0->113 0->115 0->119 0->120 0->121 0->122 2->1 3->1 4->1 4->6 5->1 6->1 6->1 6->1 6->6 6->7 6->10 6->11 6->12 6->13 6->14 6->15 6->16 6->16 6->17 6->18 6->20 6->22 6->24 6->26 6->27 6->32 6->35 6->39 6->43 6->44 6->47 6->49 6->53 6->55 6->56 6->57 6->58 6->60 6->61 6->64 6->69 6->70 6->75 6->78 6->81 6->84 6->123 6->124 6->125 6->126 6->127 7->1 7->6 8->1 8->1 8->5 9->1 9->1 9->6 10->1 10->20 11->1 11->22 12->1 12->24 13->15 13->26 13->56 13->68 13->114 14->1 14->1 14->55 14->107 14->108 15->1 15->1 15->1 15->13 15->26 15->56 16->1 16->7 17->1 18->1 18->1 18->18 18->19 18->19 18->33 18->49 18->50 18->58 18->59 18->71 18->72 18->85 19->1 19->18 20->1 20->1 20->10 20->20 20->21 20->21 20->36 20->37 20->38 20->76 20->77 20->88 20->89 20->90 20->91 20->98 20->99 20->100 20->101 20->109 20->110 20->129 20->130 20->131 20->132 20->139 20->140 20->141 20->142 20->151 20->152 21->1 21->20 22->1 22->1 22->11 22->22 22->23 22->23 22->40 22->41 22->42 22->62 22->63 22->79 22->80 22->92 22->93 22->102 22->103 22->104 22->105 22->111 22->112 22->133 22->134 22->143 22->144 22->145 22->146 22->153 22->154 23->1 23->22 24->1 24->1 24->12 24->24 24->25 24->25 24->45 24->54 24->65 24->82 24->135 24->147 24->148 24->155 25->1 25->24 26->46 26->46 26->56 26->83 26->97 26->136 27->1 27->1 27->1 27->27 27->28 27->28 27->29 27->56 27->128 28->1 28->27 29->1 29->1 29->13 29->26 29->56 31->1 31->9 31->9 32->1 32->1 32->18 33->1 33->1 33->1 33->33 33->34 33->34 33->51 33->52 33->59 33->72 33->73 33->74 33->86 33->87 33->137 33->138 33->149 33->150 34->1 34->33 35->1 35->1 35->20 36->1 36->37 36->38 37->1 37->1 37->1 38->1 38->1 38->1 39->1 39->1 39->22 40->1 41->1 41->1 41->1 42->1 42->1 42->1 43->1 43->14 43->14 44->1 44->1 44->24 45->1 45->1 45->54 46->1 46->1 46->13 46->26 46->56 47->1 47->1 47->27 49->1 49->18 49->18 50->1 50->1 50->33 51->1 51->1 51->1 52->1 52->1 52->1 54->1 54->1 54->68 54->108 54->158 54->159 55->1 56->1 56->13 56->27 56->29 57->1 57->32 57->32 59->1 59->33 59->33 60->1 60->35 60->35 61->1 61->39 61->39 62->1 62->41 62->41 63->1 63->42 63->42 64->1 64->44 64->44 65->1 65->45 65->45 66->1 66->1 66->1 66->13 66->26 66->56 67->1 67->1 67->54 68->1 68->1 68->13 68->26 68->56 69->1 69->47 69->47 71->1 71->50 71->50 73->1 73->51 73->51 74->1 74->52 74->52 76->1 77->1 83->1 88->1 90->1 92->1 93->1 94->1 94->67 94->67 95->1 95->1 95->1 95->96 95->114 95->164 96->1 96->95 98->1 100->1 102->1 104->1 107->1 107->95 108->55 108->107 113->1 113->95 113->95 114->1 114->1 114->13 114->26 114->56 114->95 114->96 114->113 114->115 114->163 114->165 114->166 114->167 116->1 116->1 116->55 116->107 116->108 117->1 117->1 117->54 118->1 118->116 119->1 119->117 119->117 120->1 120->118 120->118 135->66 135->67 135->94 135->95 135->106 135->107 135->113 135->115 135->156 135->157 135->160 135->161 135->162 163->95 163->96 163->113 163->115 163->116 163->117 163->118 163->119 163->120 163->121 163->122
>>>Token int main ( int ReplacementFor_argc , char * * ReplacementFor_argv ) { int t , i ; int ReplacementFor_c , ReplacementFor_d , ReplacementFor_n , ReplacementFor_j , ReplacementFor_k , ReplacementFor_a , e ; char ReplacementFor_b ; char base [ ( 0x75f + 6582 - 0x2111 ) ] ; char ReplacementFor_bases [ ( 0x88f + 251 - 0x88a ) ] [ ( 0x2356 + 40 - 0x227e ) ] ; char ReplacementFor_oppose [ ( 0x6b9 + 5538 - 0x1c58 ) ] ; char ReplacementFor_opposes [ ( 0x108a + 2634 - 0x19d4 ) ] [ ( 0x1368 + 4218 - 0x22e2 ) ] ; char s [ ( 0x5dd + 7881 - 0x2441 ) ] ; scanf ( " \x25 \x64 " , & t ) ; for ( i = ( 0xfd9 + 1825 - 0x16f9 ) ; i <= t ; i ++ ) { for ( ReplacementFor_j = ( 0xdb7 + 3623 - 0x1bde ) ; ReplacementFor_j < ( 0x768 + 6933 - 0x217d ) ; ReplacementFor_j ++ ) for ( ReplacementFor_k = ( 0x51b + 5448 - 0x1a63 ) ; ReplacementFor_k < ( 0x900 + 911 - 0xb8f ) ; ReplacementFor_k ++ ) { ReplacementFor_bases [ ReplacementFor_j ] [ ReplacementFor_k ] = ( 0x595 + 4598 - 0x178b ) ; ReplacementFor_opposes [ ReplacementFor_j ] [ ReplacementFor_k ] = ( 0xf45 + 2841 - 0x1a5e ) ; } scanf ( " \x25 \x64 " , & ReplacementFor_c ) ; for ( ReplacementFor_j = ( 0x167c + 1867 - 0x1dc7 ) ; ReplacementFor_j < ReplacementFor_c ; ReplacementFor_j ++ ) { scanf ( " \x25 \x73 " , base ) ; ReplacementFor_bases [ base [ ( 0x807 + 6583 - 0x21be ) ] ] [ base [ ( 0xe5b + 5248 - 0x22da ) ] ] = base [ ( 0xa05 + 6016 - 0x2183 ) ] ; ReplacementFor_bases [ base [ ( 0xaaf + 1483 - 0x1079 ) ] ] [ base [ ( 0x630 + 466 - 0x802 ) ] ] = base [ ( 0x4a1 + 5235 - 0x1912 ) ] ; } scanf ( " \x25 \x64 " , & ReplacementFor_d ) ; for ( ReplacementFor_j = ( 0x9db + 2735 - 0x148a ) ; ReplacementFor_j < ReplacementFor_d ; ReplacementFor_j ++ ) { scanf ( " \x25 \x73 " , ReplacementFor_oppose ) ; ReplacementFor_opposes [ ReplacementFor_oppose [ ( 0x898 + 4241 - 0x1929 ) ] ] [ ReplacementFor_oppose [ ( 0x1888 + 1784 - 0x1f7f ) ] ] = ( 0xe23 + 1660 - 0x149e ) ; ReplacementFor_opposes [ ReplacementFor_oppose [ ( 0x15e0 + 1216 - 0x1a9f ) ] ] [ ReplacementFor_oppose [ ( 0xed8 + 2742 - 0x198e ) ] ] = ( 0x1597 + 1205 - 0x1a4b ) ; } scanf ( " \x25 \x64 " , & ReplacementFor_n ) ; scanf ( " \x25 \x73 " , s ) ; ReplacementFor_a = ( 0x1626 + 1666 - 0x1ca8 ) ; for ( ReplacementFor_j = ( 0x52c + 6207 - 0x1d6a ) ; ReplacementFor_j < ReplacementFor_n ; ReplacementFor_j ++ ) { e = ( 0x5f8 + 5413 - 0x1b1d ) ; if ( ReplacementFor_bases [ s [ ReplacementFor_j ] ] [ s [ ReplacementFor_a ] ] ) { s [ ReplacementFor_a ] = ReplacementFor_bases [ s [ ReplacementFor_j ] ] [ s [ ReplacementFor_a ] ] ; e = ( 0x72c + 4079 - 0x171a ) ; } else { for ( ReplacementFor_k = ReplacementFor_a ; ReplacementFor_k >= ( 0xf32 + 4068 - 0x1f16 ) ; ReplacementFor_k -- ) { if ( ! s [ ReplacementFor_k ] ) continue ; if ( ReplacementFor_opposes [ s [ ReplacementFor_j ] ] [ s [ ReplacementFor_k ] ] ) { ReplacementFor_a = - ( 0x6e2 + 1741 - 0xdae ) ; e = ( 0xf2c + 4337 - 0x201c ) ; break ; } } } if ( ! e ) s [ ++ ReplacementFor_a ] = s [ ReplacementFor_j ] ; } s [ ++ ReplacementFor_a ] = s [ ReplacementFor_j ] ; printf ( " \x43 \x61 \x73 \x65 \x20 \x23 \x25 \x64 \x3a \x20 \x5b " , i ) ; if ( strlen ( s ) ) printf ( " \x25 \x63 " , s [ ( 0xb99 + 2306 - 0x149b ) ] ) ; for ( ReplacementFor_j = ( 0xf5b + 5360 - 0x244a ) ; ReplacementFor_j < strlen ( s ) ; ReplacementFor_j ++ ) printf ( " \x2c \x20 \x25 \x63 " , s [ ReplacementFor_j ] ) ; printf ( " \x5d " " \n " ) ; } return ( 0x19f + 7518 - 0x1efd ) ; }
>>>Func
METHOD main
METHOD_RETURN int
<operator>.assignment ReplacementFor_p=fopen("\x69\x6e\x69\x6e\x2e\x69\x6e","\x72")
<operator>.assignment ReplacementFor_q=\012fopen("\x6f\x75\x74\x2e\x74\x78\x74","\x77")
fscanf fscanf(ReplacementFor_p,"\x25\x64",\012&T)
fclose fclose(ReplacementFor_p)
fclose fclose(ReplacementFor_q)
RETURN return\012(0x15e1+689-0x1892); return\012(0x15e1+689-0x1892);
<operator>.lessEqualsThan ReplacementFor_countT<=T
<operator>.postIncrement ReplacementFor_countT++
<operator>.subtraction 0x15e1+689-0x1892
fopen fopen("\x69\x6e\x69\x6e\x2e\x69\x6e","\x72")
fopen fopen("\x6f\x75\x74\x2e\x74\x78\x74","\x77")
<operator>.assignment ReplacementFor_countT=(0xb5d+5640-0x2164)
fscanf fscanf(ReplacementFor_p,"\x25\x64",&ReplacementFor_N)
fscanf fscanf(ReplacementFor_p,"\x25\x64",&ReplacementFor_Pd)
fscanf fscanf(ReplacementFor_p,\012"\x25\x64",&ReplacementFor_Pg)
<operator>.logicalOr (ReplacementFor_Pg==(0xcef+3233-0x192c)&&\012ReplacementFor_Pd!=(0xf11+2252-0x1779))||(ReplacementFor_Pg==(0x4c2+4750-0x1750)\012&&ReplacementFor_Pd!=(0x790+4766-0x1a2e))
<operator>.notEquals ReplacementFor_Pd!=(0x1441+4019-0x23f4)
<operator>.lessEqualsThan ReplacementFor_D<=ReplacementFor_N
<operator>.addition 0x15e1+689
<operator>.subtraction 0xb5d+5640-0x2164
fprintf fprintf(ReplacementFor_q,\012"\x43\x61\x73\x65\x20\x23\x25\x64\x3a\x20\x42\x72\x6f\x6b\x65\x6e" "\n",\012ReplacementFor_countT)
<operator>.assignment ReplacementFor_D=(0xb63+3274-0x17c9)/ReplacementFor_gcd((0x9b1+4730-0x1bc7),\012ReplacementFor_Pd)
fprintf fprintf(\012ReplacementFor_q,\012"\x43\x61\x73\x65\x20\x23\x25\x64\x3a\x20\x50\x6f\x73\x73\x69\x62\x6c\x65" "\n",\012ReplacementFor_countT)
<operator>.addition 0xb5d+5640
<operator>.logicalAnd ReplacementFor_Pg==(0xcef+3233-0x192c)&&\012ReplacementFor_Pd!=(0xf11+2252-0x1779)
<operator>.logicalAnd ReplacementFor_Pg==(0x4c2+4750-0x1750)\012&&ReplacementFor_Pd!=(0x790+4766-0x1a2e)
<operator>.subtraction 0x1441+4019-0x23f4
fprintf fprintf(ReplacementFor_q,\012"\x43\x61\x73\x65\x20\x23\x25\x64\x3a\x20\x50\x6f\x73\x73\x69\x62\x6c\x65" "\n",\012ReplacementFor_countT)
fprintf fprintf(ReplacementFor_q,\012"\x43\x61\x73\x65\x20\x23\x25\x64\x3a\x20\x42\x72\x6f\x6b\x65\x6e" "\n",\012ReplacementFor_countT)
<operator>.equals ReplacementFor_Pg==(0xcef+3233-0x192c)
<operator>.notEquals ReplacementFor_Pd!=(0xf11+2252-0x1779)
<operator>.equals ReplacementFor_Pg==(0x4c2+4750-0x1750)
<operator>.notEquals ReplacementFor_Pd!=(0x790+4766-0x1a2e)
<operator>.addition 0x1441+4019
<operator>.division (0xb63+3274-0x17c9)/ReplacementFor_gcd((0x9b1+4730-0x1bc7),\012ReplacementFor_Pd)
<operator>.subtraction 0xcef+3233-0x192c
<operator>.subtraction 0xf11+2252-0x1779
<operator>.subtraction 0x4c2+4750-0x1750
<operator>.subtraction 0x790+4766-0x1a2e
<operator>.subtraction 0xb63+3274-0x17c9
ReplacementFor_gcd ReplacementFor_gcd((0x9b1+4730-0x1bc7),\012ReplacementFor_Pd)
<operator>.addition 0xcef+3233
<operator>.addition 0xf11+2252
<operator>.addition 0x4c2+4750
<operator>.addition 0x790+4766
<operator>.addition 0xb63+3274
<operator>.subtraction 0x9b1+4730-0x1bc7
<operator>.addition 0x9b1+4730
<operator>.addressOf &ReplacementFor_N
<operator>.addressOf &ReplacementFor_Pd
<operator>.addressOf &ReplacementFor_Pg
>>>PDG&53 0->4 0->5 0->6 0->8 0->9 0->10 0->11 0->12 0->14 0->15 0->16 0->18 0->19 0->20 0->21 0->22 0->24 0->25 0->28 0->29 0->30 0->31 0->32 0->33 0->34 0->35 0->37 0->38 0->39 0->40 0->41 0->42 0->43 0->44 0->45 0->46 0->47 0->48 0->49 2->1 2->1 2->4 3->1 3->1 3->6 3->22 3->24 3->29 3->30 4->1 4->1 4->5 4->8 4->14 5->1 5->1 6->1 6->1 7->1 8->1 8->1 8->1 8->8 8->9 8->14 8->15 8->16 8->17 8->22 8->24 8->26 8->29 8->30 8->31 8->37 8->43 8->50 8->51 8->52 9->1 9->8 10->1 10->1 10->7 11->2 11->2 12->3 12->3 13->1 13->1 13->8 14->1 14->1 14->15 14->19 15->1 15->1 15->16 15->18 15->32 15->34 15->42 16->1 16->1 16->5 16->14 16->31 16->33 17->1 17->1 17->1 17->18 17->22 17->28 17->35 18->1 18->1 18->1 18->15 18->19 18->23 18->29 18->32 18->34 18->36 18->41 18->42 18->42 18->47 18->48 18->49 19->1 19->1 19->1 19->14 19->24 19->30 21->1 21->13 21->13 22->1 22->6 22->9 22->24 22->29 22->30 23->1 23->1 23->19 24->1 24->6 24->9 24->22 24->29 24->30 26->1 26->1 26->17 26->17 26->27 26->33 26->39 26->45 27->1 27->1 27->17 27->17 28->1 28->18 28->18 29->1 29->6 29->9 29->22 29->24 29->30 30->1 30->6 30->9 30->22 30->24 30->29 31->1 31->1 31->16 31->26 31->26 31->32 31->33 31->38 31->44 32->1 32->1 32->15 32->18 32->26 32->26 32->34 33->1 33->1 33->16 33->27 33->27 33->31 33->34 33->40 33->46 34->1 34->1 34->15 34->18 34->27 34->27 34->32 36->1 36->1 36->23 36->23 37->1 37->31 37->31 38->1 38->32 38->32 39->1 39->33 39->33 40->1 40->34 40->34 41->1 41->36 41->36 42->1 42->1 42->15 42->18 42->32 42->34 42->36 42->36 48->1 48->42 48->42
>>>Token int main ( ) { int T ; int ReplacementFor_countT ; int ReplacementFor_D , ReplacementFor_N , ReplacementFor_Pd , ReplacementFor_Pg ; FILE * ReplacementFor_p ; FILE * ReplacementFor_q ; ReplacementFor_p = fopen ( " \x69 \x6e \x69 \x6e \x2e \x69 \x6e " , " \x72 " ) ; ReplacementFor_q = fopen ( " \x6f \x75 \x74 \x2e \x74 \x78 \x74 " , " \x77 " ) ; fscanf ( ReplacementFor_p , " \x25 \x64 " , & T ) ; for ( ReplacementFor_countT = ( 0xb5d + 5640 - 0x2164 ) ; ReplacementFor_countT <= T ; ReplacementFor_countT ++ ) { fscanf ( ReplacementFor_p , " \x25 \x64 " , & ReplacementFor_N ) ; fscanf ( ReplacementFor_p , " \x25 \x64 " , & ReplacementFor_Pd ) ; fscanf ( ReplacementFor_p , " \x25 \x64 " , & ReplacementFor_Pg ) ; if ( ( ReplacementFor_Pg == ( 0xcef + 3233 - 0x192c ) && ReplacementFor_Pd != ( 0xf11 + 2252 - 0x1779 ) ) || ( ReplacementFor_Pg == ( 0x4c2 + 4750 - 0x1750 ) && ReplacementFor_Pd != ( 0x790 + 4766 - 0x1a2e ) ) ) { fprintf ( ReplacementFor_q , " \x43 \x61 \x73 \x65 \x20 \x23 \x25 \x64 \x3a \x20 \x42 \x72 \x6f \x6b \x65 \x6e " " \n " , ReplacementFor_countT ) ; continue ; } if ( ReplacementFor_Pd != ( 0x1441 + 4019 - 0x23f4 ) ) { ReplacementFor_D = ( 0xb63 + 3274 - 0x17c9 ) / ReplacementFor_gcd ( ( 0x9b1 + 4730 - 0x1bc7 ) , ReplacementFor_Pd ) ; } else { fprintf ( ReplacementFor_q , " \x43 \x61 \x73 \x65 \x20 \x23 \x25 \x64 \x3a \x20 \x50 \x6f \x73 \x73 \x69 \x62 \x6c \x65 " " \n " , ReplacementFor_countT ) ; continue ; } if ( ReplacementFor_D <= ReplacementFor_N ) fprintf ( ReplacementFor_q , " \x43 \x61 \x73 \x65 \x20 \x23 \x25 \x64 \x3a \x20 \x50 \x6f \x73 \x73 \x69 \x62 \x6c \x65 " " \n " , ReplacementFor_countT ) ; else fprintf ( ReplacementFor_q , " \x43 \x61 \x73 \x65 \x20 \x23 \x25 \x64 \x3a \x20 \x42 \x72 \x6f \x6b \x65 \x6e " " \n " , ReplacementFor_countT ) ; } fclose ( ReplacementFor_p ) ; fclose ( ReplacementFor_q ) ; return ( 0x15e1 + 689 - 0x1892 ) ; }
>>>Func
METHOD ReplacementFor_cksum_pclmul
METHOD_RETURN bool
PARAM FILE*ReplacementFor_fp
PARAM uint_fast32_t*\012ReplacementFor_crc_out
PARAM uintmax_t*ReplacementFor_length_out
<operator>.assignment ReplacementFor_crc=(0xf11+5115-0x230c)
<operator>.assignment ReplacementFor_length=(0x6f5+3298-0x13d7)
<operator>.assignment ReplacementFor_single_mult_constant=\012ReplacementFor__mm_set_epi64x(3317288268,3903084037)
<operator>.assignment ReplacementFor_four_mult_constant=ReplacementFor__mm_set_epi64x(2285074764,\0123861023505)
<operator>.assignment ReplacementFor_shuffle_constant=ReplacementFor__mm_set_epi8(\012(0x179d+3068-0x2399) (0xfe0+5887-0x26de) (0x1203+3973-0x2186) \012(0xec0+1044-0x12d1) (0xee3+2976-0x1a7f) (0x201+3991-0x1193) (0x1cbc+1683-0x2349)\012 (0x46d+2834-0xf78) (0x1a00+2394-0x2352) (0x121f+3666-0x2068) \012(0x1173+3571-0x1f5c) (0x9fd+213-0xac7) (0xbba+3044-0x1792) (0x2052+1598-0x2683) \012(0x1745+2138-0x1f91) (0x10b5+246-0x119c))
<operator>.assignment *ReplacementFor_crc_out=\012ReplacementFor_crc
<operator>.assignment *ReplacementFor_length_out=ReplacementFor_length
RETURN return true; return true;
<operator>.logicalOr !ReplacementFor_fp||!ReplacementFor_crc_out||\012!ReplacementFor_length_out
<operator>.greaterThan (ReplacementFor_bytes_read=fread\012(buf (0x936+569-0xb6e),ReplacementFor_BUFLEN,ReplacementFor_fp))>\012(0x1e4d+1155-0x22d0)
IDENTIFIER true return true;
<operator>.subtraction 0xf11+5115-0x230c
<operator>.subtraction 0x6f5+3298-0x13d7
RETURN return false; return false;
ReplacementFor__mm_set_epi64x ReplacementFor__mm_set_epi64x(3317288268,3903084037)
ReplacementFor__mm_set_epi64x ReplacementFor__mm_set_epi64x(2285074764,\0123861023505)
ReplacementFor__mm_set_epi8 ReplacementFor__mm_set_epi8(\012(0x179d+3068-0x2399) (0xfe0+5887-0x26de) (0x1203+3973-0x2186) \012(0xec0+1044-0x12d1) (0xee3+2976-0x1a7f) (0x201+3991-0x1193) (0x1cbc+1683-0x2349)\012 (0x46d+2834-0xf78) (0x1a00+2394-0x2352) (0x121f+3666-0x2068) \012(0x1173+3571-0x1f5c) (0x9fd+213-0xac7) (0xbba+3044-0x1792) (0x2052+1598-0x2683) \012(0x1745+2138-0x1f91) (0x10b5+246-0x119c))
<operator>.assignmentPlus ReplacementFor_length+=\012ReplacementFor_bytes_read
<operator>.assignment ReplacementFor_datap=(\012ReplacementFor___m128i*)buf
<operator>.assignment *\012ReplacementFor_cp=(unsigned char*)ReplacementFor_datap
<operator>.addition 0xf11+5115
<operator>.addition 0x6f5+3298
<operator>.logicalOr !ReplacementFor_fp||!ReplacementFor_crc_out
<operator>.logicalNot !ReplacementFor_length_out
IDENTIFIER false return false;
<operator>.subtraction 0x179d+3068-0x2399
<operator>.subtraction 0xfe0+5887-0x26de
<operator>.subtraction 0x1203+3973-0x2186
<operator>.subtraction 0xec0+1044-0x12d1
<operator>.subtraction 0xee3+2976-0x1a7f
<operator>.subtraction 0x201+3991-0x1193
<operator>.subtraction 0x1cbc+1683-0x2349
<operator>.subtraction 0x46d+2834-0xf78
<operator>.subtraction 0x1a00+2394-0x2352
<operator>.subtraction 0x121f+3666-0x2068
<operator>.subtraction 0x1173+3571-0x1f5c
<operator>.subtraction 0x9fd+213-0xac7
<operator>.subtraction 0xbba+3044-0x1792
<operator>.subtraction 0x2052+1598-0x2683
<operator>.subtraction 0x1745+2138-0x1f91
<operator>.subtraction 0x10b5+246-0x119c
<operator>.assignment ReplacementFor_bytes_read=fread\012(buf (0x936+569-0xb6e),ReplacementFor_BUFLEN,ReplacementFor_fp)
<operator>.subtraction 0x1e4d+1155-0x22d0
<operator>.lessThan ReplacementFor_length+ReplacementFor_bytes_read<\012ReplacementFor_length
<operator>.equals ReplacementFor_bytes_read==(0x12e7+528-0x14f7)
<operator>.greaterEqualsThan ReplacementFor_bytes_read>=(0x1a48+2515-0x240b)*\012(0x1551+617-0x17b2)
<operator>.greaterEqualsThan ReplacementFor_bytes_read>=(0xa94+4436-0x1bc8)
<operator>.postDecrement ReplacementFor_bytes_read--
<operator>.assignment ReplacementFor_crc=(ReplacementFor_crc<<\012(0x839+4092-0x182d))^ReplacementFor_crctab[(0x424+8337-0x24b5)][((\012ReplacementFor_crc>>(0xcb6+2436-0x1622))^*ReplacementFor_cp++)&\012(0x16bc+1559-0x1bd4)]
feof feof(ReplacementFor_fp)
<operator>.logicalNot !ReplacementFor_fp
<operator>.logicalNot !ReplacementFor_crc_out
<operator>.addition 0x179d+3068
<operator>.addition 0xfe0+5887
<operator>.addition 0x1203+3973
<operator>.addition 0xec0+1044
<operator>.addition 0xee3+2976
<operator>.addition 0x201+3991
<operator>.addition 0x1cbc+1683
<operator>.addition 0x46d+2834
<operator>.addition 0x1a00+2394
<operator>.addition 0x121f+3666
<operator>.addition 0x1173+3571
<operator>.addition 0x9fd+213
<operator>.addition 0xbba+3044
<operator>.addition 0x2052+1598
<operator>.addition 0x1745+2138
<operator>.addition 0x10b5+246
fread fread\012(buf (0x936+569-0xb6e),ReplacementFor_BUFLEN,ReplacementFor_fp)
<operator>.addition 0x1e4d+1155
<operator>.assignment errno=EOVERFLOW
RETURN return false; return false;
<operator>.cast (\012ReplacementFor___m128i*)buf
<operator>.assignment data=ReplacementFor__mm_loadu_si128(ReplacementFor_datap)
<operator>.assignment data=ReplacementFor__mm_shuffle_epi8(data,ReplacementFor_shuffle_constant)
<operator>.assignment ReplacementFor_xor_crc=ReplacementFor__mm_set_epi32(ReplacementFor_crc \012(0xbfc+2131-0x144f) (0x4cc+4613-0x16d1) (0x2621+71-0x2668))
<operator>.assignment ReplacementFor_crc=\012(0x118d+5067-0x2558)
<operator>.assignment data=ReplacementFor__mm_xor_si128(data,\012ReplacementFor_xor_crc)
<operator>.assignment ReplacementFor_data3=ReplacementFor__mm_loadu_si128(\012ReplacementFor_datap+(0x9f9+1755-0x10d3))
<operator>.assignment ReplacementFor_data3=\012ReplacementFor__mm_shuffle_epi8(ReplacementFor_data3,\012ReplacementFor_shuffle_constant)
<operator>.assignment ReplacementFor_data5=\012ReplacementFor__mm_loadu_si128(ReplacementFor_datap+(0xe1a+2540-0x1804))
<operator>.assignment ReplacementFor_data5=ReplacementFor__mm_shuffle_epi8(ReplacementFor_data5,\012ReplacementFor_shuffle_constant)
<operator>.assignment ReplacementFor_data7=\012ReplacementFor__mm_loadu_si128(ReplacementFor_datap+(0x554+538-0x76b))
<operator>.assignment ReplacementFor_data7=ReplacementFor__mm_shuffle_epi8(ReplacementFor_data7,\012ReplacementFor_shuffle_constant)
<operator>.assignment data=\012ReplacementFor__mm_shuffle_epi8(data,ReplacementFor_shuffle_constant)
ReplacementFor__mm_storeu_si128 ReplacementFor__mm_storeu_si128(ReplacementFor_datap,data)
<operator>.assignment ReplacementFor_data3=\012ReplacementFor__mm_shuffle_epi8(ReplacementFor_data3,\012ReplacementFor_shuffle_constant)
ReplacementFor__mm_storeu_si128 ReplacementFor__mm_storeu_si128(\012ReplacementFor_datap+(0x11a+4830-0x13f7),ReplacementFor_data3)
<operator>.assignment ReplacementFor_data5=ReplacementFor__mm_shuffle_epi8(ReplacementFor_data5,\012ReplacementFor_shuffle_constant)
ReplacementFor__mm_storeu_si128 ReplacementFor__mm_storeu_si128(\012ReplacementFor_datap+(0x4ba+2849-0xfd9),ReplacementFor_data5)
<operator>.assignment ReplacementFor_data7=ReplacementFor__mm_shuffle_epi8(ReplacementFor_data7,\012ReplacementFor_shuffle_constant)
ReplacementFor__mm_storeu_si128 ReplacementFor__mm_storeu_si128(\012ReplacementFor_datap+(0x2d8+6824-0x1d7d),ReplacementFor_data7)
<operator>.assignment data=\012ReplacementFor__mm_loadu_si128(ReplacementFor_datap)
<operator>.assignment data=\012ReplacementFor__mm_shuffle_epi8(data,ReplacementFor_shuffle_constant)
<operator>.assignment ReplacementFor_xor_crc=ReplacementFor__mm_set_epi32(ReplacementFor_crc \012(0xb6+7759-0x1f05) (0x12+7570-0x1da4) (0xcc1+6724-0x2705))
<operator>.assignment ReplacementFor_crc=\012(0x4f7+6013-0x1c74)
<operator>.assignment data=ReplacementFor__mm_xor_si128(data,\012ReplacementFor_xor_crc)
<operator>.assignment data=\012ReplacementFor__mm_shuffle_epi8(data,ReplacementFor_shuffle_constant)
ReplacementFor__mm_storeu_si128 ReplacementFor__mm_storeu_si128(ReplacementFor_datap,data)
<operator>.cast (unsigned char*)ReplacementFor_datap
<operator>.subtraction 0x936+569-0xb6e
<operator>.addition ReplacementFor_length+ReplacementFor_bytes_read
IDENTIFIER false return false;
<operator>.subtraction 0x12e7+528-0x14f7
ferror ferror(ReplacementFor_fp)
<operator>.multiplication (0x1a48+2515-0x240b)*\012(0x1551+617-0x17b2)
<operator>.greaterEqualsThan ReplacementFor_bytes_read>=\012(0x16a2+547-0x18b5)*(0x1a9+6750-0x1bff)
<operator>.subtraction 0xa94+4436-0x1bc8
<operator>.greaterEqualsThan ReplacementFor_bytes_read>=(0x75b+1409-0xcbc)
<operator>.xor (ReplacementFor_crc<<\012(0x839+4092-0x182d))^ReplacementFor_crctab[(0x424+8337-0x24b5)][((\012ReplacementFor_crc>>(0xcb6+2436-0x1622))^*ReplacementFor_cp++)&\012(0x16bc+1559-0x1bd4)]
<operator>.addition 0x936+569
<operator>.addition 0x12e7+528
RETURN return false; return false;
<operator>.subtraction 0x1a48+2515-0x240b
<operator>.subtraction 0x1551+617-0x17b2
ReplacementFor__mm_loadu_si128 ReplacementFor__mm_loadu_si128(ReplacementFor_datap)
ReplacementFor__mm_shuffle_epi8 ReplacementFor__mm_shuffle_epi8(data,ReplacementFor_shuffle_constant)
ReplacementFor__mm_set_epi32 ReplacementFor__mm_set_epi32(ReplacementFor_crc \012(0xbfc+2131-0x144f) (0x4cc+4613-0x16d1) (0x2621+71-0x2668))
<operator>.subtraction 0x118d+5067-0x2558
ReplacementFor__mm_xor_si128 ReplacementFor__mm_xor_si128(data,\012ReplacementFor_xor_crc)
ReplacementFor__mm_loadu_si128 ReplacementFor__mm_loadu_si128(\012ReplacementFor_datap+(0x9f9+1755-0x10d3))
ReplacementFor__mm_shuffle_epi8 ReplacementFor__mm_shuffle_epi8(ReplacementFor_data3,\012ReplacementFor_shuffle_constant)
ReplacementFor__mm_loadu_si128 ReplacementFor__mm_loadu_si128(ReplacementFor_datap+(0xe1a+2540-0x1804))
ReplacementFor__mm_shuffle_epi8 ReplacementFor__mm_shuffle_epi8(ReplacementFor_data5,\012ReplacementFor_shuffle_constant)
ReplacementFor__mm_loadu_si128 ReplacementFor__mm_loadu_si128(ReplacementFor_datap+(0x554+538-0x76b))
ReplacementFor__mm_shuffle_epi8 ReplacementFor__mm_shuffle_epi8(ReplacementFor_data7,\012ReplacementFor_shuffle_constant)
<operator>.assignmentPlus ReplacementFor_datap+=\012(0x1168+3002-0x1d1e)
<operator>.assignment ReplacementFor_data2=ReplacementFor__mm_clmulepi64_si128(\012data ReplacementFor_four_mult_constant (0x157a+2555-0x1f75))
<operator>.assignment data=\012ReplacementFor__mm_clmulepi64_si128(data ReplacementFor_four_mult_constant \012(0xc5+5340-0x1590))
<operator>.assignment ReplacementFor_data4=ReplacementFor__mm_clmulepi64_si128(\012ReplacementFor_data3 ReplacementFor_four_mult_constant (0x1cef+524-0x1efb))
<operator>.assignment ReplacementFor_data3=ReplacementFor__mm_clmulepi64_si128(ReplacementFor_data3 \012ReplacementFor_four_mult_constant (0xebd+4494-0x203a))
<operator>.assignment ReplacementFor_data6=\012ReplacementFor__mm_clmulepi64_si128(ReplacementFor_data5 \012ReplacementFor_four_mult_constant (0xf57+269-0x1064))
<operator>.assignment ReplacementFor_data5=\012ReplacementFor__mm_clmulepi64_si128(ReplacementFor_data5 \012ReplacementFor_four_mult_constant (0x10c2+3627-0x1edc))
<operator>.assignment ReplacementFor_data8=\012ReplacementFor__mm_clmulepi64_si128(ReplacementFor_data7 \012ReplacementFor_four_mult_constant (0x13ca+75-0x1415))
<operator>.assignment ReplacementFor_data7=\012ReplacementFor__mm_clmulepi64_si128(ReplacementFor_data7 \012ReplacementFor_four_mult_constant (0x14b2+1012-0x1895))
<operator>.assignment data=\012ReplacementFor__mm_xor_si128(data,ReplacementFor_data2)
<operator>.assignment ReplacementFor_data2=\012ReplacementFor__mm_loadu_si128(ReplacementFor_datap)
<operator>.assignment ReplacementFor_data2=\012ReplacementFor__mm_shuffle_epi8(ReplacementFor_data2,\012ReplacementFor_shuffle_constant)
<operator>.assignment data=ReplacementFor__mm_xor_si128(data,\012ReplacementFor_data2)
<operator>.assignment ReplacementFor_data3=ReplacementFor__mm_xor_si128(\012ReplacementFor_data3,ReplacementFor_data4)
<operator>.assignment ReplacementFor_data4=\012ReplacementFor__mm_loadu_si128(ReplacementFor_datap+(0x15f8+1889-0x1d58))
<operator>.assignment ReplacementFor_data4=ReplacementFor__mm_shuffle_epi8(ReplacementFor_data4,\012ReplacementFor_shuffle_constant)
<operator>.assignment ReplacementFor_data3=\012ReplacementFor__mm_xor_si128(ReplacementFor_data3,ReplacementFor_data4)
<operator>.assignment ReplacementFor_data5=ReplacementFor__mm_xor_si128(ReplacementFor_data5,\012ReplacementFor_data6)
<operator>.assignment ReplacementFor_data6=ReplacementFor__mm_loadu_si128(\012ReplacementFor_datap+(0x10b3+5378-0x25b3))
<operator>.assignment ReplacementFor_data6=\012ReplacementFor__mm_shuffle_epi8(ReplacementFor_data6,\012ReplacementFor_shuffle_constant)
<operator>.assignment ReplacementFor_data5=\012ReplacementFor__mm_xor_si128(ReplacementFor_data5,ReplacementFor_data6)
<operator>.assignment ReplacementFor_data7=ReplacementFor__mm_xor_si128(ReplacementFor_data7,\012ReplacementFor_data8)
<operator>.assignment ReplacementFor_data8=ReplacementFor__mm_loadu_si128(\012ReplacementFor_datap+(0x20d2+277-0x21e4))
<operator>.assignment ReplacementFor_data8=\012ReplacementFor__mm_shuffle_epi8(ReplacementFor_data8,\012ReplacementFor_shuffle_constant)
<operator>.assignment ReplacementFor_data7=\012ReplacementFor__mm_xor_si128(ReplacementFor_data7,ReplacementFor_data8)
<operator>.assignmentMinus ReplacementFor_bytes_read-=((0x28a+1865-0x9c3)*(0x1c05+2777-0x26da))
ReplacementFor__mm_shuffle_epi8 ReplacementFor__mm_shuffle_epi8(data,ReplacementFor_shuffle_constant)
ReplacementFor__mm_shuffle_epi8 ReplacementFor__mm_shuffle_epi8(ReplacementFor_data3,\012ReplacementFor_shuffle_constant)
<operator>.addition ReplacementFor_datap+(0x11a+4830-0x13f7)
ReplacementFor__mm_shuffle_epi8 ReplacementFor__mm_shuffle_epi8(ReplacementFor_data5,\012ReplacementFor_shuffle_constant)
<operator>.addition ReplacementFor_datap+(0x4ba+2849-0xfd9)
ReplacementFor__mm_shuffle_epi8 ReplacementFor__mm_shuffle_epi8(ReplacementFor_data7,\012ReplacementFor_shuffle_constant)
<operator>.addition ReplacementFor_datap+(0x2d8+6824-0x1d7d)
<operator>.addition 0xa94+4436
ReplacementFor__mm_loadu_si128 ReplacementFor__mm_loadu_si128(ReplacementFor_datap)
ReplacementFor__mm_shuffle_epi8 ReplacementFor__mm_shuffle_epi8(data,ReplacementFor_shuffle_constant)
ReplacementFor__mm_set_epi32 ReplacementFor__mm_set_epi32(ReplacementFor_crc \012(0xb6+7759-0x1f05) (0x12+7570-0x1da4) (0xcc1+6724-0x2705))
<operator>.subtraction 0x4f7+6013-0x1c74
ReplacementFor__mm_xor_si128 ReplacementFor__mm_xor_si128(data,\012ReplacementFor_xor_crc)
<operator>.postIncrement ReplacementFor_datap++
<operator>.assignment ReplacementFor_data2=ReplacementFor__mm_clmulepi64_si128(\012data ReplacementFor_single_mult_constant (0xe81+246-0xf77))
<operator>.assignment data=\012ReplacementFor__mm_clmulepi64_si128(data ReplacementFor_single_mult_constant \012(0x1029+1893-0x177d))
<operator>.assignment ReplacementFor_fold_data=ReplacementFor__mm_loadu_si128(\012ReplacementFor_datap)
<operator>.assignment ReplacementFor_fold_data=ReplacementFor__mm_shuffle_epi8(\012ReplacementFor_fold_data,ReplacementFor_shuffle_constant)
<operator>.assignment data=\012ReplacementFor__mm_xor_si128(data,ReplacementFor_data2)
<operator>.assignment data=\012ReplacementFor__mm_xor_si128(data,ReplacementFor_fold_data)
<operator>.assignmentMinus ReplacementFor_bytes_read-=(0xecf+2641-0x1910)
ReplacementFor__mm_shuffle_epi8 ReplacementFor__mm_shuffle_epi8(data,ReplacementFor_shuffle_constant)
<operator>.shiftLeft ReplacementFor_crc<<\012(0x839+4092-0x182d)
IDENTIFIER false return false;
<operator>.addition 0x1a48+2515
<operator>.addition 0x1551+617
<operator>.subtraction 0xbfc+2131-0x144f
<operator>.subtraction 0x4cc+4613-0x16d1
<operator>.subtraction 0x2621+71-0x2668
<operator>.addition 0x118d+5067
<operator>.addition ReplacementFor_datap+(0x9f9+1755-0x10d3)
<operator>.addition ReplacementFor_datap+(0xe1a+2540-0x1804)
<operator>.addition ReplacementFor_datap+(0x554+538-0x76b)
<operator>.multiplication (0x16a2+547-0x18b5)*(0x1a9+6750-0x1bff)
<operator>.subtraction 0x11a+4830-0x13f7
<operator>.subtraction 0x4ba+2849-0xfd9
<operator>.subtraction 0x2d8+6824-0x1d7d
<operator>.subtraction 0xb6+7759-0x1f05
<operator>.subtraction 0x12+7570-0x1da4
<operator>.subtraction 0xcc1+6724-0x2705
<operator>.addition 0x4f7+6013
<operator>.subtraction 0x75b+1409-0xcbc
<operator>.subtraction 0x839+4092-0x182d
<operator>.and ((\012ReplacementFor_crc>>(0xcb6+2436-0x1622))^*ReplacementFor_cp++)&\012(0x16bc+1559-0x1bd4)
<operator>.addition 0xbfc+2131
<operator>.addition 0x4cc+4613
<operator>.addition 0x2621+71
<operator>.subtraction 0x9f9+1755-0x10d3
<operator>.subtraction 0xe1a+2540-0x1804
<operator>.subtraction 0x554+538-0x76b
<operator>.subtraction 0x16a2+547-0x18b5
<operator>.subtraction 0x1a9+6750-0x1bff
<operator>.subtraction 0x1168+3002-0x1d1e
ReplacementFor__mm_clmulepi64_si128 ReplacementFor__mm_clmulepi64_si128(\012data ReplacementFor_four_mult_constant (0x157a+2555-0x1f75))
ReplacementFor__mm_clmulepi64_si128 ReplacementFor__mm_clmulepi64_si128(data ReplacementFor_four_mult_constant \012(0xc5+5340-0x1590))
ReplacementFor__mm_clmulepi64_si128 ReplacementFor__mm_clmulepi64_si128(\012ReplacementFor_data3 ReplacementFor_four_mult_constant (0x1cef+524-0x1efb))
ReplacementFor__mm_clmulepi64_si128 ReplacementFor__mm_clmulepi64_si128(ReplacementFor_data3 \012ReplacementFor_four_mult_constant (0xebd+4494-0x203a))
ReplacementFor__mm_clmulepi64_si128 ReplacementFor__mm_clmulepi64_si128(ReplacementFor_data5 \012ReplacementFor_four_mult_constant (0xf57+269-0x1064))
ReplacementFor__mm_clmulepi64_si128 ReplacementFor__mm_clmulepi64_si128(ReplacementFor_data5 \012ReplacementFor_four_mult_constant (0x10c2+3627-0x1edc))
ReplacementFor__mm_clmulepi64_si128 ReplacementFor__mm_clmulepi64_si128(ReplacementFor_data7 \012ReplacementFor_four_mult_constant (0x13ca+75-0x1415))
ReplacementFor__mm_clmulepi64_si128 ReplacementFor__mm_clmulepi64_si128(ReplacementFor_data7 \012ReplacementFor_four_mult_constant (0x14b2+1012-0x1895))
ReplacementFor__mm_xor_si128 ReplacementFor__mm_xor_si128(data,ReplacementFor_data2)
ReplacementFor__mm_loadu_si128 ReplacementFor__mm_loadu_si128(ReplacementFor_datap)
ReplacementFor__mm_shuffle_epi8 ReplacementFor__mm_shuffle_epi8(ReplacementFor_data2,\012ReplacementFor_shuffle_constant)
ReplacementFor__mm_xor_si128 ReplacementFor__mm_xor_si128(data,\012ReplacementFor_data2)
ReplacementFor__mm_xor_si128 ReplacementFor__mm_xor_si128(\012ReplacementFor_data3,ReplacementFor_data4)
ReplacementFor__mm_loadu_si128 ReplacementFor__mm_loadu_si128(ReplacementFor_datap+(0x15f8+1889-0x1d58))
ReplacementFor__mm_shuffle_epi8 ReplacementFor__mm_shuffle_epi8(ReplacementFor_data4,\012ReplacementFor_shuffle_constant)
ReplacementFor__mm_xor_si128 ReplacementFor__mm_xor_si128(ReplacementFor_data3,ReplacementFor_data4)
ReplacementFor__mm_xor_si128 ReplacementFor__mm_xor_si128(ReplacementFor_data5,\012ReplacementFor_data6)
ReplacementFor__mm_loadu_si128 ReplacementFor__mm_loadu_si128(\012ReplacementFor_datap+(0x10b3+5378-0x25b3))
ReplacementFor__mm_shuffle_epi8 ReplacementFor__mm_shuffle_epi8(ReplacementFor_data6,\012ReplacementFor_shuffle_constant)
ReplacementFor__mm_xor_si128 ReplacementFor__mm_xor_si128(ReplacementFor_data5,ReplacementFor_data6)
ReplacementFor__mm_xor_si128 ReplacementFor__mm_xor_si128(ReplacementFor_data7,\012ReplacementFor_data8)
ReplacementFor__mm_loadu_si128 ReplacementFor__mm_loadu_si128(\012ReplacementFor_datap+(0x20d2+277-0x21e4))
ReplacementFor__mm_shuffle_epi8 ReplacementFor__mm_shuffle_epi8(ReplacementFor_data8,\012ReplacementFor_shuffle_constant)
ReplacementFor__mm_xor_si128 ReplacementFor__mm_xor_si128(ReplacementFor_data7,ReplacementFor_data8)
<operator>.multiplication (0x28a+1865-0x9c3)*(0x1c05+2777-0x26da)
<operator>.addition 0x11a+4830
<operator>.addition 0x4ba+2849
<operator>.addition 0x2d8+6824
<operator>.addition 0xb6+7759
<operator>.addition 0x12+7570
<operator>.addition 0xcc1+6724
<operator>.addition 0x75b+1409
ReplacementFor__mm_clmulepi64_si128 ReplacementFor__mm_clmulepi64_si128(\012data ReplacementFor_single_mult_constant (0xe81+246-0xf77))
ReplacementFor__mm_clmulepi64_si128 ReplacementFor__mm_clmulepi64_si128(data ReplacementFor_single_mult_constant \012(0x1029+1893-0x177d))
ReplacementFor__mm_loadu_si128 ReplacementFor__mm_loadu_si128(\012ReplacementFor_datap)
ReplacementFor__mm_shuffle_epi8 ReplacementFor__mm_shuffle_epi8(\012ReplacementFor_fold_data,ReplacementFor_shuffle_constant)
ReplacementFor__mm_xor_si128 ReplacementFor__mm_xor_si128(data,ReplacementFor_data2)
ReplacementFor__mm_xor_si128 ReplacementFor__mm_xor_si128(data,ReplacementFor_fold_data)
<operator>.subtraction 0xecf+2641-0x1910
<operator>.addition 0x839+4092
<operator>.subtraction 0x424+8337-0x24b5
<operator>.xor (\012ReplacementFor_crc>>(0xcb6+2436-0x1622))^*ReplacementFor_cp++
<operator>.subtraction 0x16bc+1559-0x1bd4
<operator>.addition 0x9f9+1755
<operator>.addition 0xe1a+2540
<operator>.addition 0x554+538
<operator>.addition 0x16a2+547
<operator>.addition 0x1a9+6750
<operator>.addition 0x1168+3002
<operator>.subtraction 0x157a+2555-0x1f75
<operator>.subtraction 0xc5+5340-0x1590
<operator>.subtraction 0x1cef+524-0x1efb
<operator>.subtraction 0xebd+4494-0x203a
<operator>.subtraction 0xf57+269-0x1064
<operator>.subtraction 0x10c2+3627-0x1edc
<operator>.subtraction 0x13ca+75-0x1415
<operator>.subtraction 0x14b2+1012-0x1895
<operator>.addition ReplacementFor_datap+(0x15f8+1889-0x1d58)
<operator>.addition ReplacementFor_datap+(0x10b3+5378-0x25b3)
<operator>.addition ReplacementFor_datap+(0x20d2+277-0x21e4)
<operator>.subtraction 0x28a+1865-0x9c3
<operator>.subtraction 0x1c05+2777-0x26da
<operator>.subtraction 0xe81+246-0xf77
<operator>.subtraction 0x1029+1893-0x177d
<operator>.addition 0xecf+2641
<operator>.addition 0x424+8337
<operator>.arithmeticShiftRight ReplacementFor_crc>>(0xcb6+2436-0x1622)
<operator>.addition 0x16bc+1559
<operator>.addition 0x157a+2555
<operator>.addition 0xc5+5340
<operator>.addition 0x1cef+524
<operator>.addition 0xebd+4494
<operator>.addition 0xf57+269
<operator>.addition 0x10c2+3627
<operator>.addition 0x13ca+75
<operator>.addition 0x14b2+1012
<operator>.subtraction 0x15f8+1889-0x1d58
<operator>.subtraction 0x10b3+5378-0x25b3
<operator>.subtraction 0x20d2+277-0x21e4
<operator>.addition 0x28a+1865
<operator>.addition 0x1c05+2777
<operator>.addition 0xe81+246
<operator>.addition 0x1029+1893
<operator>.subtraction 0xcb6+2436-0x1622
<operator>.postIncrement ReplacementFor_cp++
<operator>.addition 0x15f8+1889
<operator>.addition 0x10b3+5378
<operator>.addition 0x20d2+277
<operator>.addition 0xcb6+2436
<operator>.indirection *ReplacementFor_crc_out
<operator>.indirection *ReplacementFor_length_out
UNKNOWN ReplacementFor___m128i* ReplacementFor___m128i*
UNKNOWN unsigned char* unsigned char*
<operator>.indirectIndexAccess ReplacementFor_crctab[(0x424+8337-0x24b5)][((\012ReplacementFor_crc>>(0xcb6+2436-0x1622))^*ReplacementFor_cp++)&\012(0x16bc+1559-0x1bd4)]
<operator>.indirectIndexAccess ReplacementFor_crctab[(0x424+8337-0x24b5)]
<operator>.indirection *ReplacementFor_cp++
>>>PDG&306 0->2 0->3 0->4 0->10 0->11 0->12 0->15 0->16 0->17 0->18 0->19 0->20 0->22 0->23 0->24 0->25 0->26 0->28 0->29 0->30 0->31 0->32 0->33 0->34 0->35 0->36 0->37 0->38 0->39 0->40 0->41 0->42 0->43 0->44 0->45 0->47 0->48 0->49 0->50 0->51 0->52 0->54 0->55 0->56 0->57 0->58 0->59 0->60 0->61 0->62 0->63 0->64 0->65 0->66 0->67 0->68 0->69 0->70 0->71 0->72 0->73 0->74 0->75 0->76 0->77 0->90 0->92 0->94 0->96 0->103 0->104 0->105 0->106 0->107 0->108 0->109 0->111 0->112 0->113 0->115 0->116 0->117 0->118 0->119 0->120 0->121 0->122 0->123 0->124 0->125 0->126 0->127 0->128 0->129 0->130 0->131 0->156 0->157 0->158 0->159 0->160 0->161 0->162 0->163 0->164 0->165 0->166 0->167 0->168 0->169 0->170 0->177 0->178 0->179 0->180 0->181 0->182 0->183 0->184 0->185 0->186 0->187 0->188 0->189 0->191 0->192 0->193 0->194 0->195 0->196 0->197 0->198 0->199 0->201 0->202 0->203 0->204 0->205 0->206 0->207 0->208 0->209 0->210 0->211 0->212 0->213 0->214 0->215 0->216 0->217 0->218 0->219 0->220 0->221 0->222 0->223 0->224 0->225 0->226 0->227 0->228 0->229 0->230 0->231 0->232 0->233 0->235 0->236 0->237 0->238 0->239 0->240 0->241 0->242 0->243 0->244 0->245 0->246 0->247 0->248 0->249 0->250 0->252 0->253 0->254 0->255 0->256 0->257 0->258 0->259 0->260 0->261 0->262 0->263 0->264 0->265 0->266 0->267 0->268 0->269 0->270 0->271 0->272 0->273 0->274 0->275 0->276 0->277 0->278 0->279 0->280 0->281 0->282 0->283 0->284 0->285 0->286 0->287 0->288 0->289 0->290 0->291 0->292 0->293 0->294 0->295 0->296 0->297 0->298 2->55 3->1 3->56 4->1 4->28 5->1 5->1 5->1 5->10 5->122 5->167 5->179 6->1 6->1 6->1 6->11 6->48 6->106 7->242 8->210 9->121 9->166 12->1 13->1 13->1 13->1 13->7 13->8 13->9 13->14 13->18 13->19 13->20 13->21 13->30 13->31 13->32 13->33 13->34 13->35 13->36 13->37 13->38 13->39 13->40 13->41 13->42 13->43 13->44 13->45 13->46 13->47 13->57 13->58 13->59 13->60 13->61 13->62 13->63 13->64 13->65 13->66 13->67 13->68 13->69 13->70 13->71 13->72 13->73 13->74 13->105 13->115 14->10 14->11 14->12 14->48 14->106 14->299 14->300 15->12 16->1 16->5 16->5 17->1 17->6 17->6 18->1 19->7 19->7 20->8 20->8 21->9 21->9 21->9 21->9 21->9 21->9 21->9 21->9 21->9 21->9 21->9 21->9 21->9 21->9 21->9 21->9 22->11 22->48 22->106 23->24 23->104 23->120 23->165 24->294 27->1 27->1 27->13 27->13 27->28 28->1 28->13 29->18 30->21 30->21 31->21 31->21 32->21 32->21 33->21 33->21 34->21 34->21 35->21 35->21 36->21 36->21 37->21 37->21 38->21 38->21 39->21 39->21 40->21 40->21 41->21 41->21 42->21 42->21 43->21 43->21 44->21 44->21 45->21 45->21 46->14 46->22 46->48 46->49 46->106 47->14 47->14 48->22 48->22 48->49 48->75 48->76 48->108 48->116 49->23 49->24 49->50 49->50 49->51 49->52 49->54 49->77 49->104 49->109 49->110 49->112 49->118 49->119 49->164 49->181 49->182 49->301 49->302 50->51 50->78 50->79 50->80 50->81 50->82 50->83 50->84 50->85 50->86 50->87 50->88 50->89 50->90 50->91 50->92 50->93 50->94 50->95 50->96 50->111 50->111 50->120 50->121 50->122 50->123 50->124 50->125 50->126 50->127 50->128 50->129 50->130 50->157 50->158 50->159 50->160 50->161 50->162 50->163 50->183 50->184 50->185 50->186 50->187 50->188 50->189 50->190 50->191 50->192 50->193 50->201 50->202 50->203 50->204 50->205 50->206 50->207 50->208 50->235 50->236 50->237 50->253 50->254 50->255 50->256 50->257 51->52 51->97 51->98 51->99 51->100 51->101 51->102 51->103 51->113 51->113 51->165 51->166 51->167 51->168 51->169 51->178 51->194 51->195 51->196 51->197 51->198 51->238 51->239 51->240 51->241 52->52 52->53 52->114 52->179 52->199 52->200 52->249 52->250 52->251 52->252 52->275 52->276 52->277 52->293 52->294 52->298 52->303 52->304 52->305 53->10 53->122 53->167 53->179 54->10 54->11 54->12 54->14 54->46 54->47 54->73 54->73 54->74 54->105 54->115 54->299 54->300 55->1 55->27 55->56 55->73 56->1 56->27 73->1 73->14 73->14 73->14 73->14 73->23 73->46 73->46 73->46 73->46 73->54 73->77 73->109 75->1 76->1 78->121 79->124 80->124 81->10 81->122 81->167 81->179 82->157 82->210 83->126 84->158 84->212 85->128 86->160 86->214 87->130 88->162 88->216 89->90 90->24 90->92 90->94 90->96 90->104 90->159 90->161 90->163 90->165 91->92 93->94 95->96 97->166 98->169 99->169 100->10 100->122 100->167 100->179 101->178 101->242 102->103 103->24 103->104 105->73 105->73 107->76 108->49 108->49 109->23 109->24 109->50 109->51 109->52 109->54 109->54 109->77 109->104 109->110 109->112 109->117 109->118 109->119 109->164 109->181 109->182 109->301 109->302 110->50 110->50 111->51 111->111 111->131 111->132 111->133 111->134 111->135 111->136 111->137 111->138 111->139 111->140 111->141 111->142 111->143 111->144 111->145 111->146 111->147 111->148 111->149 111->150 111->151 111->152 111->153 111->154 111->155 111->156 111->156 111->190 111->207 111->208 111->209 111->210 111->211 111->212 111->213 111->214 111->215 111->216 111->217 111->218 111->219 111->220 111->221 111->222 111->223 111->224 111->225 111->226 111->227 111->228 111->229 111->230 111->231 111->232 111->233 111->234 111->256 111->257 111->258 111->259 111->260 111->261 111->262 111->263 111->264 111->265 111->266 111->267 111->268 111->269 111->270 111->271 111->278 111->279 111->280 111->281 111->282 111->283 111->284 111->285 111->286 111->287 111->288 111->289 111->290 111->295 111->296 111->297 112->51 112->51 113->52 113->113 113->170 113->171 113->172 113->173 113->174 113->175 113->176 113->177 113->177 113->198 113->241 113->242 113->243 113->244 113->245 113->246 113->247 113->248 113->272 113->273 113->274 113->291 113->292 114->53 114->53 117->1 118->110 118->110 119->110 119->110 120->78 120->90 120->125 120->127 120->129 120->131 120->187 120->188 120->189 121->79 121->79 121->126 122->80 122->80 122->80 122->80 123->81 123->81 124->82 124->82 125->83 126->84 126->84 126->128 127->85 128->86 128->86 128->130 129->87 130->88 130->88 130->157 130->220 131->219 132->218 133->218 134->222 135->222 136->226 137->226 138->230 139->230 140->221 141->220 142->221 143->157 143->210 144->225 145->224 146->225 147->158 147->212 148->229 149->228 150->229 151->160 151->214 152->233 153->232 154->233 155->162 155->216 156->111 157->89 157->89 157->158 158->91 158->91 158->160 160->93 160->93 160->162 162->95 162->95 162->121 162->166 165->97 165->103 165->170 166->98 166->98 166->178 166->245 167->99 167->99 167->99 167->99 168->100 168->100 169->101 169->101 170->244 171->246 172->246 173->245 174->247 175->247 176->178 176->242 177->113 178->102 178->102 178->121 178->166 179->114 179->114 179->276 180->117 183->122 183->122 184->122 184->122 185->122 185->122 190->111 190->111 191->92 191->92 191->159 191->159 192->94 192->94 192->161 192->161 193->96 193->96 193->163 193->163 194->167 194->167 195->167 195->167 196->167 196->167 198->113 198->113 199->179 199->179 204->125 204->125 204->187 204->187 205->127 205->127 205->188 205->188 206->129 206->129 206->189 206->189 207->190 207->190 208->190 208->190 209->131 209->131 210->132 210->132 210->132 210->211 210->211 211->133 211->133 211->133 211->212 212->134 212->134 212->134 212->213 212->213 213->135 213->135 213->135 213->214 214->136 214->136 214->136 214->215 214->215 215->137 215->137 215->137 215->216 216->138 216->138 216->138 216->217 216->217 217->139 217->139 217->139 217->210 218->140 218->140 219->90 219->131 219->141 219->223 219->227 219->231 219->267 219->268 219->269 220->142 220->142 220->224 221->143 221->143 222->144 222->144 223->145 224->146 224->146 224->228 225->147 225->147 226->148 226->148 227->149 228->150 228->150 228->232 229->151 229->151 230->152 230->152 231->153 232->154 232->154 232->157 232->220 233->155 233->155 234->156 234->156 242->171 242->171 242->171 242->243 242->243 243->172 243->172 243->172 243->242 244->103 244->170 244->173 245->174 245->174 245->178 246->175 246->175 247->176 247->176 248->177 248->177 251->200 251->200 252->200 252->200 259->210 259->210 260->211 260->211 261->212 261->212 262->213 262->213 263->214 263->214 264->215 264->215 265->216 265->216 266->217 266->217 270->234 270->234 271->234 271->234 272->242 272->242 273->243 273->243 276->251 276->251 286->223 286->223 286->267 286->267 287->227 287->227 287->268 287->268 288->231 288->231 288->269 288->269 293->276 293->276
>>>Token bool ReplacementFor_cksum_pclmul ( FILE * ReplacementFor_fp , uint_fast32_t * ReplacementFor_crc_out , uintmax_t * ReplacementFor_length_out ) { ReplacementFor___m128i buf [ ReplacementFor_BUFLEN / sizeof ( ReplacementFor___m128i ) ] ; uint_fast32_t ReplacementFor_crc = ( 0xf11 + 5115 - 0x230c ) ; uintmax_t ReplacementFor_length = ( 0x6f5 + 3298 - 0x13d7 ) ; size_t ReplacementFor_bytes_read ; ReplacementFor___m128i ReplacementFor_single_mult_constant ; ReplacementFor___m128i ReplacementFor_four_mult_constant ; ReplacementFor___m128i ReplacementFor_shuffle_constant ; if ( ! ReplacementFor_fp || ! ReplacementFor_crc_out || ! ReplacementFor_length_out ) return false ; ReplacementFor_single_mult_constant = ReplacementFor__mm_set_epi64x ( 3317288268 , 3903084037 ) ; ReplacementFor_four_mult_constant = ReplacementFor__mm_set_epi64x ( 2285074764 , 3861023505 ) ; ReplacementFor_shuffle_constant = ReplacementFor__mm_set_epi8 ( ( 0x179d + 3068 - 0x2399 ) , ( 0xfe0 + 5887 - 0x26de ) , ( 0x1203 + 3973 - 0x2186 ) , ( 0xec0 + 1044 - 0x12d1 ) , ( 0xee3 + 2976 - 0x1a7f ) , ( 0x201 + 3991 - 0x1193 ) , ( 0x1cbc + 1683 - 0x2349 ) , ( 0x46d + 2834 - 0xf78 ) , ( 0x1a00 + 2394 - 0x2352 ) , ( 0x121f + 3666 - 0x2068 ) , ( 0x1173 + 3571 - 0x1f5c ) , ( 0x9fd + 213 - 0xac7 ) , ( 0xbba + 3044 - 0x1792 ) , ( 0x2052 + 1598 - 0x2683 ) , ( 0x1745 + 2138 - 0x1f91 ) , ( 0x10b5 + 246 - 0x119c ) ) ; while ( ( ReplacementFor_bytes_read = fread ( buf , ( 0x936 + 569 - 0xb6e ) , ReplacementFor_BUFLEN , ReplacementFor_fp ) ) > ( 0x1e4d + 1155 - 0x22d0 ) ) { ReplacementFor___m128i * ReplacementFor_datap ; ReplacementFor___m128i data ; ReplacementFor___m128i ReplacementFor_data2 ; ReplacementFor___m128i ReplacementFor_data3 ; ReplacementFor___m128i ReplacementFor_data4 ; ReplacementFor___m128i ReplacementFor_data5 ; ReplacementFor___m128i ReplacementFor_data6 ; ReplacementFor___m128i ReplacementFor_data7 ; ReplacementFor___m128i ReplacementFor_data8 ; ReplacementFor___m128i ReplacementFor_fold_data ; ReplacementFor___m128i ReplacementFor_xor_crc ; if ( ReplacementFor_length + ReplacementFor_bytes_read < ReplacementFor_length ) { errno = EOVERFLOW ; return false ; } ReplacementFor_length += ReplacementFor_bytes_read ; if ( ReplacementFor_bytes_read == ( 0x12e7 + 528 - 0x14f7 ) ) { if ( ferror ( ReplacementFor_fp ) ) return false ; } ReplacementFor_datap = ( ReplacementFor___m128i * ) buf ; if ( ReplacementFor_bytes_read >= ( 0x1a48 + 2515 - 0x240b ) * ( 0x1551 + 617 - 0x17b2 ) ) { data = ReplacementFor__mm_loadu_si128 ( ReplacementFor_datap ) ; data = ReplacementFor__mm_shuffle_epi8 ( data , ReplacementFor_shuffle_constant ) ; ReplacementFor_xor_crc = ReplacementFor__mm_set_epi32 ( ReplacementFor_crc , ( 0xbfc + 2131 - 0x144f ) , ( 0x4cc + 4613 - 0x16d1 ) , ( 0x2621 + 71 - 0x2668 ) ) ; ReplacementFor_crc = ( 0x118d + 5067 - 0x2558 ) ; data = ReplacementFor__mm_xor_si128 ( data , ReplacementFor_xor_crc ) ; ReplacementFor_data3 = ReplacementFor__mm_loadu_si128 ( ReplacementFor_datap + ( 0x9f9 + 1755 - 0x10d3 ) ) ; ReplacementFor_data3 = ReplacementFor__mm_shuffle_epi8 ( ReplacementFor_data3 , ReplacementFor_shuffle_constant ) ; ReplacementFor_data5 = ReplacementFor__mm_loadu_si128 ( ReplacementFor_datap + ( 0xe1a + 2540 - 0x1804 ) ) ; ReplacementFor_data5 = ReplacementFor__mm_shuffle_epi8 ( ReplacementFor_data5 , ReplacementFor_shuffle_constant ) ; ReplacementFor_data7 = ReplacementFor__mm_loadu_si128 ( ReplacementFor_datap + ( 0x554 + 538 - 0x76b ) ) ; ReplacementFor_data7 = ReplacementFor__mm_shuffle_epi8 ( ReplacementFor_data7 , ReplacementFor_shuffle_constant ) ; while ( ReplacementFor_bytes_read >= ( 0x16a2 + 547 - 0x18b5 ) * ( 0x1a9 + 6750 - 0x1bff ) ) { ReplacementFor_datap += ( 0x1168 + 3002 - 0x1d1e ) ; ReplacementFor_data2 = ReplacementFor__mm_clmulepi64_si128 ( data , ReplacementFor_four_mult_constant , ( 0x157a + 2555 - 0x1f75 ) ) ; data = ReplacementFor__mm_clmulepi64_si128 ( data , ReplacementFor_four_mult_constant , ( 0xc5 + 5340 - 0x1590 ) ) ; ReplacementFor_data4 = ReplacementFor__mm_clmulepi64_si128 ( ReplacementFor_data3 , ReplacementFor_four_mult_constant , ( 0x1cef + 524 - 0x1efb ) ) ; ReplacementFor_data3 = ReplacementFor__mm_clmulepi64_si128 ( ReplacementFor_data3 , ReplacementFor_four_mult_constant , ( 0xebd + 4494 - 0x203a ) ) ; ReplacementFor_data6 = ReplacementFor__mm_clmulepi64_si128 ( ReplacementFor_data5 , ReplacementFor_four_mult_constant , ( 0xf57 + 269 - 0x1064 ) ) ; ReplacementFor_data5 = ReplacementFor__mm_clmulepi64_si128 ( ReplacementFor_data5 , ReplacementFor_four_mult_constant , ( 0x10c2 + 3627 - 0x1edc ) ) ; ReplacementFor_data8 = ReplacementFor__mm_clmulepi64_si128 ( ReplacementFor_data7 , ReplacementFor_four_mult_constant , ( 0x13ca + 75 - 0x1415 ) ) ; ReplacementFor_data7 = ReplacementFor__mm_clmulepi64_si128 ( ReplacementFor_data7 , ReplacementFor_four_mult_constant , ( 0x14b2 + 1012 - 0x1895 ) ) ; data = ReplacementFor__mm_xor_si128 ( data , ReplacementFor_data2 ) ; ReplacementFor_data2 = ReplacementFor__mm_loadu_si128 ( ReplacementFor_datap ) ; ReplacementFor_data2 = ReplacementFor__mm_shuffle_epi8 ( ReplacementFor_data2 , ReplacementFor_shuffle_constant ) ; data = ReplacementFor__mm_xor_si128 ( data , ReplacementFor_data2 ) ; ReplacementFor_data3 = ReplacementFor__mm_xor_si128 ( ReplacementFor_data3 , ReplacementFor_data4 ) ; ReplacementFor_data4 = ReplacementFor__mm_loadu_si128 ( ReplacementFor_datap + ( 0x15f8 + 1889 - 0x1d58 ) ) ; ReplacementFor_data4 = ReplacementFor__mm_shuffle_epi8 ( ReplacementFor_data4 , ReplacementFor_shuffle_constant ) ; ReplacementFor_data3 = ReplacementFor__mm_xor_si128 ( ReplacementFor_data3 , ReplacementFor_data4 ) ; ReplacementFor_data5 = ReplacementFor__mm_xor_si128 ( ReplacementFor_data5 , ReplacementFor_data6 ) ; ReplacementFor_data6 = ReplacementFor__mm_loadu_si128 ( ReplacementFor_datap + ( 0x10b3 + 5378 - 0x25b3 ) ) ; ReplacementFor_data6 = ReplacementFor__mm_shuffle_epi8 ( ReplacementFor_data6 , ReplacementFor_shuffle_constant ) ; ReplacementFor_data5 = ReplacementFor__mm_xor_si128 ( ReplacementFor_data5 , ReplacementFor_data6 ) ; ReplacementFor_data7 = ReplacementFor__mm_xor_si128 ( ReplacementFor_data7 , ReplacementFor_data8 ) ; ReplacementFor_data8 = ReplacementFor__mm_loadu_si128 ( ReplacementFor_datap + ( 0x20d2 + 277 - 0x21e4 ) ) ; ReplacementFor_data8 = ReplacementFor__mm_shuffle_epi8 ( ReplacementFor_data8 , ReplacementFor_shuffle_constant ) ; ReplacementFor_data7 = ReplacementFor__mm_xor_si128 ( ReplacementFor_data7 , ReplacementFor_data8 ) ; ReplacementFor_bytes_read -= ( ( 0x28a + 1865 - 0x9c3 ) * ( 0x1c05 + 2777 - 0x26da ) ) ; } data = ReplacementFor__mm_shuffle_epi8 ( data , ReplacementFor_shuffle_constant ) ; ReplacementFor__mm_storeu_si128 ( ReplacementFor_datap , data ) ; ReplacementFor_data3 = ReplacementFor__mm_shuffle_epi8 ( ReplacementFor_data3 , ReplacementFor_shuffle_constant ) ; ReplacementFor__mm_storeu_si128 ( ReplacementFor_datap + ( 0x11a + 4830 - 0x13f7 ) , ReplacementFor_data3 ) ; ReplacementFor_data5 = ReplacementFor__mm_shuffle_epi8 ( ReplacementFor_data5 , ReplacementFor_shuffle_constant ) ; ReplacementFor__mm_storeu_si128 ( ReplacementFor_datap + ( 0x4ba + 2849 - 0xfd9 ) , ReplacementFor_data5 ) ; ReplacementFor_data7 = ReplacementFor__mm_shuffle_epi8 ( ReplacementFor_data7 , ReplacementFor_shuffle_constant ) ; ReplacementFor__mm_storeu_si128 ( ReplacementFor_datap + ( 0x2d8 + 6824 - 0x1d7d ) , ReplacementFor_data7 ) ; } if ( ReplacementFor_bytes_read >= ( 0xa94 + 4436 - 0x1bc8 ) ) { data = ReplacementFor__mm_loadu_si128 ( ReplacementFor_datap ) ; data = ReplacementFor__mm_shuffle_epi8 ( data , ReplacementFor_shuffle_constant ) ; ReplacementFor_xor_crc = ReplacementFor__mm_set_epi32 ( ReplacementFor_crc , ( 0xb6 + 7759 - 0x1f05 ) , ( 0x12 + 7570 - 0x1da4 ) , ( 0xcc1 + 6724 - 0x2705 ) ) ; ReplacementFor_crc = ( 0x4f7 + 6013 - 0x1c74 ) ; data = ReplacementFor__mm_xor_si128 ( data , ReplacementFor_xor_crc ) ; while ( ReplacementFor_bytes_read >= ( 0x75b + 1409 - 0xcbc ) ) { ReplacementFor_datap ++ ; ReplacementFor_data2 = ReplacementFor__mm_clmulepi64_si128 ( data , ReplacementFor_single_mult_constant , ( 0xe81 + 246 - 0xf77 ) ) ; data = ReplacementFor__mm_clmulepi64_si128 ( data , ReplacementFor_single_mult_constant , ( 0x1029 + 1893 - 0x177d ) ) ; ReplacementFor_fold_data = ReplacementFor__mm_loadu_si128 ( ReplacementFor_datap ) ; ReplacementFor_fold_data = ReplacementFor__mm_shuffle_epi8 ( ReplacementFor_fold_data , ReplacementFor_shuffle_constant ) ; data = ReplacementFor__mm_xor_si128 ( data , ReplacementFor_data2 ) ; data = ReplacementFor__mm_xor_si128 ( data , ReplacementFor_fold_data ) ; ReplacementFor_bytes_read -= ( 0xecf + 2641 - 0x1910 ) ; } data = ReplacementFor__mm_shuffle_epi8 ( data , ReplacementFor_shuffle_constant ) ; ReplacementFor__mm_storeu_si128 ( ReplacementFor_datap , data ) ; } unsigned char * ReplacementFor_cp = ( unsigned char * ) ReplacementFor_datap ; while ( ReplacementFor_bytes_read -- ) ReplacementFor_crc = ( ReplacementFor_crc << ( 0x839 + 4092 - 0x182d ) ) ^ ReplacementFor_crctab [ ( 0x424 + 8337 - 0x24b5 ) ] [ ( ( ReplacementFor_crc >> ( 0xcb6 + 2436 - 0x1622 ) ) ^ * ReplacementFor_cp ++ ) & ( 0x16bc + 1559 - 0x1bd4 ) ] ; if ( feof ( ReplacementFor_fp ) ) break ; } * ReplacementFor_crc_out = ReplacementFor_crc ; * ReplacementFor_length_out = ReplacementFor_length ; return true ; }
>>>Func
METHOD ReplacementFor_readfile
METHOD_RETURN void
PARAM char*ReplacementFor_filename
<operator>.assignment ReplacementFor_Cases=(0x59d+6549-0x1f32)
<operator>.assignment ReplacementFor_count=\012(0x1039+380-0x11b5)
<operator>.assignment *\012ReplacementFor_fp=NULL
<operator>.assignment ReplacementFor_fp=fopen(ReplacementFor_filename,"\x72")
fgets fgets(buf,ReplacementFor_SIZE,ReplacementFor_fp)
sscanf sscanf(buf,"\x25\x64",&\012ReplacementFor_Cases)
<operator>.notEquals fgets(buf,ReplacementFor_SIZE,ReplacementFor_fp)!=\012NULL
<operator>.subtraction 0x59d+6549-0x1f32
<operator>.subtraction 0x1039+380-0x11b5
fopen fopen(ReplacementFor_filename,"\x72")
sscanf sscanf(buf,"\x25\x73\x25\x73",ReplacementFor_A,ReplacementFor_B)
ReplacementFor_strrev ReplacementFor_strrev(ReplacementFor_A)
ReplacementFor_strrev ReplacementFor_strrev(ReplacementFor_B)
<operator>.assignment i=process(ReplacementFor_A,ReplacementFor_B)
<operator>.postIncrement ReplacementFor_count++
printf printf(\012"\x43\x61\x73\x65\x20\x23\x25\x64\x3a\x20\x25\x64" "\n",ReplacementFor_count,i)
<operator>.assignment i=(0x1377+4406-0x24ad)
<operator>.addition 0x59d+6549
<operator>.addition 0x1039+380
fgets fgets(buf,ReplacementFor_SIZE,ReplacementFor_fp)
process process(ReplacementFor_A,ReplacementFor_B)
<operator>.subtraction 0x1377+4406-0x24ad
<operator>.addition 0x1377+4406
>>>PDG&26 0->2 0->5 0->7 0->8 0->9 0->10 0->11 0->12 0->13 0->14 0->15 0->17 0->18 0->20 0->21 0->22 0->23 0->24 0->25 2->12 3->1 3->1 3->1 3->8 4->1 4->1 4->1 4->17 5->1 6->1 6->1 6->7 7->8 7->22 7->22 8->1 8->1 8->22 9->1 9->1 9->1 9->9 9->13 9->14 9->15 9->16 9->17 9->18 9->19 9->22 9->23 9->24 9->25 10->1 10->3 10->3 11->1 11->4 11->4 12->1 12->6 12->6 13->14 13->15 13->22 14->23 15->23 16->18 17->18 18->17 19->1 19->1 19->1 22->1 22->1 22->1 22->9 22->9 22->9 22->13 23->13 23->13 23->16 23->16 24->19 24->19
>>>Token void ReplacementFor_readfile ( char * ReplacementFor_filename ) { int ReplacementFor_Cases = ( 0x59d + 6549 - 0x1f32 ) , i , ReplacementFor_count = ( 0x1039 + 380 - 0x11b5 ) ; ; char ReplacementFor_A [ ( 0x164c + 1190 - 0x1ade ) ] , ReplacementFor_B [ ( 0x4e1 + 737 - 0x7ae ) ] , ReplacementFor_a [ ( 0x1ad0 + 1366 - 0x2012 ) ] , ReplacementFor_b [ ( 0x799 + 4990 - 0x1b03 ) ] ; char buf [ ReplacementFor_SIZE ] ; FILE * ReplacementFor_fp = NULL ; ReplacementFor_fp = fopen ( ReplacementFor_filename , " \x72 " ) ; fgets ( buf , ReplacementFor_SIZE , ReplacementFor_fp ) ; sscanf ( buf , " \x25 \x64 " , & ReplacementFor_Cases ) ; while ( fgets ( buf , ReplacementFor_SIZE , ReplacementFor_fp ) != NULL ) { sscanf ( buf , " \x25 \x73 \x25 \x73 " , ReplacementFor_A , ReplacementFor_B ) ; ReplacementFor_strrev ( ReplacementFor_A ) ; ReplacementFor_strrev ( ReplacementFor_B ) ; i = process ( ReplacementFor_A , ReplacementFor_B ) ; ReplacementFor_count ++ ; printf ( " \x43 \x61 \x73 \x65 \x20 \x23 \x25 \x64 \x3a \x20 \x25 \x64 " " \n " , ReplacementFor_count , i ) ; i = ( 0x1377 + 4406 - 0x24ad ) ; } }
>>>Func
METHOD ReplacementFor_clean_D
METHOD_RETURN void
PARAM ReplacementFor_D_node_t ReplacementFor_node
ReplacementFor_clean_D ReplacementFor_clean_D(ReplacementFor_node->\012ReplacementFor_left)
ReplacementFor_clean_D ReplacementFor_clean_D(ReplacementFor_node->\012ReplacementFor_right)
free free(ReplacementFor_node)
<operator>.assignment ReplacementFor_node=NULL
RETURN return; return;
<operator>.equals ReplacementFor_node==NULL
RETURN return; return;
<operator>.indirectFieldAccess ReplacementFor_node->\012ReplacementFor_left
<operator>.indirectFieldAccess ReplacementFor_node->\012ReplacementFor_right
FIELD_IDENTIFIER ReplacementFor_left ReplacementFor_left
FIELD_IDENTIFIER ReplacementFor_right ReplacementFor_right
>>>PDG&14 0->2 0->5 0->6 0->7 0->8 0->9 2->8 7->1 8->1 8->1 8->1 8->3 8->4 8->5 8->5 8->6 8->6 8->7 8->9 8->10 8->11 8->12 8->13 9->1
>>>Token void ReplacementFor_clean_D ( ReplacementFor_D_node_t ReplacementFor_node ) { if ( ReplacementFor_node == NULL ) return ; ReplacementFor_clean_D ( ReplacementFor_node -> ReplacementFor_left ) ; ReplacementFor_clean_D ( ReplacementFor_node -> ReplacementFor_right ) ; free ( ReplacementFor_node ) ; ReplacementFor_node = NULL ; return ; }
>>>Func
METHOD ReplacementFor_insertValueCArray
METHOD_RETURN int
PARAM ReplacementFor_CArray*array
PARAM int \012ReplacementFor_position
PARAM int value
RETURN return ReplacementFor_INVALID_POSITION; return ReplacementFor_INVALID_POSITION;
<operator>.logicalAnd ReplacementFor_position>=\012(0xf12+2871-0x1a49)&&ReplacementFor_position<array->ReplacementFor_size
IDENTIFIER ReplacementFor_INVALID_POSITION return ReplacementFor_INVALID_POSITION;
<operator>.greaterEqualsThan ReplacementFor_position>=\012(0xf12+2871-0x1a49)
<operator>.lessThan ReplacementFor_position<array->ReplacementFor_size
<operator>.equals array->array[ReplacementFor_position]==(0xeb4+3714-0x1d36)
<operator>.subtraction 0xf12+2871-0x1a49
<operator>.assignment array->array[\012ReplacementFor_position]=value
RETURN return ReplacementFor_SUCCESS; return ReplacementFor_SUCCESS;
<operator>.addition 0xf12+2871
<operator>.subtraction 0xeb4+3714-0x1d36
IDENTIFIER ReplacementFor_SUCCESS return ReplacementFor_SUCCESS;
RETURN return \012ReplacementFor_POSITION_INIT; return \012ReplacementFor_POSITION_INIT;
<operator>.addition 0xeb4+3714
IDENTIFIER ReplacementFor_POSITION_INIT return \012ReplacementFor_POSITION_INIT;
<operator>.indirectFieldAccess array->ReplacementFor_size
FIELD_IDENTIFIER ReplacementFor_size ReplacementFor_size
<operator>.indirectIndexAccess array->array[ReplacementFor_position]
<operator>.indirectFieldAccess array->array
<operator>.indirectIndexAccess array->array[\012ReplacementFor_position]
FIELD_IDENTIFIER array array
<operator>.indirectFieldAccess array->array
FIELD_IDENTIFIER array array
>>>PDG&28 0->2 0->3 0->4 0->5 0->7 0->8 0->9 0->11 0->12 0->13 0->14 0->15 0->16 0->17 0->18 0->19 2->1 3->8 4->12 5->1 6->1 6->1 6->1 6->5 6->10 6->15 6->18 6->22 6->23 6->25 7->5 8->1 8->1 8->6 8->6 8->9 8->9 8->20 8->21 9->1 9->1 9->6 9->6 10->1 10->1 10->1 10->12 10->13 10->17 10->24 10->26 10->27 11->1 11->8 11->8 12->1 12->1 12->1 13->1 15->1 15->10 15->10 16->13 17->1 19->17
>>>Token int ReplacementFor_insertValueCArray ( ReplacementFor_CArray * array , int ReplacementFor_position , int value ) { if ( ReplacementFor_position >= ( 0xf12 + 2871 - 0x1a49 ) && ReplacementFor_position < array -> ReplacementFor_size ) { if ( array -> array [ ReplacementFor_position ] == ( 0xeb4 + 3714 - 0x1d36 ) ) { array -> array [ ReplacementFor_position ] = value ; return ReplacementFor_SUCCESS ; } else return ReplacementFor_POSITION_INIT ; } return ReplacementFor_INVALID_POSITION ; }
>>>Func
METHOD ReplacementFor_validate_tab_stops
METHOD_RETURN void
PARAM uintmax_t const*\012ReplacementFor_tabs
PARAM size_t ReplacementFor_entries
<operator>.assignment ReplacementFor_prev_tab=(0x99+394-0x223)
<operator>.lessThan i<\012ReplacementFor_entries
<operator>.postIncrement i++
<operator>.logicalAnd ReplacementFor_increment_size&&ReplacementFor_extend_size
<operator>.subtraction 0x99+394-0x223
<operator>.assignment i=(0x4cc+1340-0xa08)
<operator>.assignment ReplacementFor_prev_tab=ReplacementFor_tabs[i]
ReplacementFor_die ReplacementFor_die(\012EXIT_FAILURE (0x82f+7754-0x2679) ReplacementFor__(\012"\x27\x2f\x27\x20\x73\x70\x65\x63\x69\x66\x69\x65\x72\x20\x69\x73\x20\x6d\x75\x74\x75\x61\x6c\x6c\x79\x20\x65\x78\x63\x6c\x75\x73\x69\x76\x65\x20\x77\x69\x74\x68\x20\x27\x2b\x27"\012))
<operator>.addition 0x99+394
<operator>.equals ReplacementFor_tabs[i]==(0x35b+6186-0x1b85)
<operator>.lessEqualsThan ReplacementFor_tabs[i]<=ReplacementFor_prev_tab
<operator>.subtraction 0x4cc+1340-0xa08
ReplacementFor_die ReplacementFor_die(EXIT_FAILURE (0x55b+3520-0x131b) ReplacementFor__(\012"\x74\x61\x62\x20\x73\x69\x7a\x65\x20\x63\x61\x6e\x6e\x6f\x74\x20\x62\x65\x20\x30"\012))
ReplacementFor_die ReplacementFor_die(\012EXIT_FAILURE (0x189d+697-0x1b56) ReplacementFor__(\012"\x74\x61\x62\x20\x73\x69\x7a\x65\x73\x20\x6d\x75\x73\x74\x20\x62\x65\x20\x61\x73\x63\x65\x6e\x64\x69\x6e\x67"\012))
<operator>.subtraction 0x82f+7754-0x2679
ReplacementFor__ ReplacementFor__(\012"\x27\x2f\x27\x20\x73\x70\x65\x63\x69\x66\x69\x65\x72\x20\x69\x73\x20\x6d\x75\x74\x75\x61\x6c\x6c\x79\x20\x65\x78\x63\x6c\x75\x73\x69\x76\x65\x20\x77\x69\x74\x68\x20\x27\x2b\x27"\012)
<operator>.addition 0x4cc+1340
<operator>.subtraction 0x35b+6186-0x1b85
<operator>.addition 0x82f+7754
<operator>.addition 0x35b+6186
<operator>.subtraction 0x55b+3520-0x131b
ReplacementFor__ ReplacementFor__(\012"\x74\x61\x62\x20\x73\x69\x7a\x65\x20\x63\x61\x6e\x6e\x6f\x74\x20\x62\x65\x20\x30"\012)
<operator>.subtraction 0x189d+697-0x1b56
ReplacementFor__ ReplacementFor__(\012"\x74\x61\x62\x20\x73\x69\x7a\x65\x73\x20\x6d\x75\x73\x74\x20\x62\x65\x20\x61\x73\x63\x65\x6e\x64\x69\x6e\x67"\012)
<operator>.addition 0x55b+3520
<operator>.addition 0x189d+697
<operator>.indirectIndexAccess ReplacementFor_tabs[i]
<operator>.indirectIndexAccess ReplacementFor_tabs[i]
<operator>.indirectIndexAccess ReplacementFor_tabs[i]
>>>PDG&33 0->2 0->3 0->5 0->6 0->7 0->8 0->11 0->12 0->14 0->15 0->16 0->17 0->18 0->19 0->20 0->21 0->22 0->23 0->24 0->25 0->26 0->27 0->28 0->29 2->1 2->10 2->13 2->14 3->5 4->1 4->1 4->1 4->14 5->1 5->1 5->1 5->5 5->6 5->6 5->10 5->13 5->14 5->21 5->23 5->30 5->31 5->32 6->1 6->5 7->1 7->1 7->1 7->11 7->18 7->19 7->22 8->1 8->4 8->4 9->1 9->1 9->5 10->1 10->1 10->1 10->14 11->1 11->1 11->1 11->1 13->1 13->1 13->14 13->16 13->24 13->25 13->28 14->1 14->10 14->13 14->17 14->26 14->27 14->29 15->1 15->9 15->9 16->1 16->1 16->1 16->11 16->17 17->1 17->1 17->1 17->11 17->16 18->1 18->11 18->11 19->11 21->1 21->13 21->13 24->1 24->16 24->16 25->16 26->1 26->17 26->17 27->17
>>>Token static void ReplacementFor_validate_tab_stops ( uintmax_t const * ReplacementFor_tabs , size_t ReplacementFor_entries ) { uintmax_t ReplacementFor_prev_tab = ( 0x99 + 394 - 0x223 ) ; for ( size_t i = ( 0x4cc + 1340 - 0xa08 ) ; i < ReplacementFor_entries ; i ++ ) { if ( ReplacementFor_tabs [ i ] == ( 0x35b + 6186 - 0x1b85 ) ) ReplacementFor_die ( EXIT_FAILURE , ( 0x55b + 3520 - 0x131b ) , ReplacementFor__ ( " \x74 \x61 \x62 \x20 \x73 \x69 \x7a \x65 \x20 \x63 \x61 \x6e \x6e \x6f \x74 \x20 \x62 \x65 \x20 \x30 " ) ) ; if ( ReplacementFor_tabs [ i ] <= ReplacementFor_prev_tab ) ReplacementFor_die ( EXIT_FAILURE , ( 0x189d + 697 - 0x1b56 ) , ReplacementFor__ ( " \x74 \x61 \x62 \x20 \x73 \x69 \x7a \x65 \x73 \x20 \x6d \x75 \x73 \x74 \x20 \x62 \x65 \x20 \x61 \x73 \x63 \x65 \x6e \x64 \x69 \x6e \x67 " ) ) ; ReplacementFor_prev_tab = ReplacementFor_tabs [ i ] ; } if ( ReplacementFor_increment_size && ReplacementFor_extend_size ) ReplacementFor_die ( EXIT_FAILURE , ( 0x82f + 7754 - 0x2679 ) , ReplacementFor__ ( " \x27 \x2f \x27 \x20 \x73 \x70 \x65 \x63 \x69 \x66 \x69 \x65 \x72 \x20 \x69 \x73 \x20 \x6d \x75 \x74 \x75 \x61 \x6c \x6c \x79 \x20 \x65 \x78 \x63 \x6c \x75 \x73 \x69 \x76 \x65 \x20 \x77 \x69 \x74 \x68 \x20 \x27 \x2b \x27 " ) ) ; }
>>>Func
METHOD read
METHOD_RETURN void
scanf scanf("\x25\x64",&ReplacementFor_aux)
scanf scanf("\x25\x64",&\012ReplacementFor_aux)
scanf scanf("\x25\x64\x20\x25\x73",&\012ReplacementFor_n,sequence)
<operator>.lessThan i<ReplacementFor_MAX_ASCII
<operator>.postIncrement i++
<operator>.lessThan i<ReplacementFor_aux
<operator>.postIncrement i++
<operator>.lessThan i<ReplacementFor_aux
<operator>.postIncrement i++
<operator>.assignment i=(0x916+2960-0x14a6)
<operator>.lessThan ReplacementFor_j<\012ReplacementFor_MAX_ASCII
<operator>.postIncrement ReplacementFor_j++
<operator>.assignment ReplacementFor_combine[i][\012ReplacementFor_j]=ReplacementFor_opposed[i][ReplacementFor_j]=\012(0x196b+2215-0x2212)
<operator>.assignment i=\012(0x158d+3548-0x2369)
scanf scanf("\x25\x73",buf)
<operator>.assignment ReplacementFor_combine[(int)buf[(0x1342+3972-0x22c6)]][(int)buf[\012(0x1dc8+1826-0x24e9)]]=ReplacementFor_combine[(int)buf[(0xadc+1422-0x1069)]][(\012int)buf[(0xd89+3524-0x1b4d)]]=buf[(0x1ce3+2282-0x25cb)]
<operator>.assignment i=(0x222+1124-0x686)
scanf scanf(\012"\x25\x73",buf)
<operator>.assignment ReplacementFor_opposed[(int)buf[(0xa8+385-0x229)]][(int)buf[\012(0x19f+5157-0x15c3)]]=ReplacementFor_opposed[(int)buf[(0x2d4+4808-0x159b)]][(int\012)buf[(0x1943+3199-0x25c2)]]=(0xcc3+5389-0x21cf)
<operator>.assignment ReplacementFor_j=(0x1aa6+2516-0x247a)
<operator>.subtraction 0x916+2960-0x14a6
<operator>.assignment ReplacementFor_opposed[i][ReplacementFor_j]=\012(0x196b+2215-0x2212)
<operator>.subtraction 0x158d+3548-0x2369
<operator>.assignment ReplacementFor_combine[(int)buf[(0xadc+1422-0x1069)]][(\012int)buf[(0xd89+3524-0x1b4d)]]=buf[(0x1ce3+2282-0x25cb)]
<operator>.subtraction 0x222+1124-0x686
<operator>.assignment ReplacementFor_opposed[(int)buf[(0x2d4+4808-0x159b)]][(int\012)buf[(0x1943+3199-0x25c2)]]=(0xcc3+5389-0x21cf)
<operator>.addition 0x916+2960
<operator>.subtraction 0x1aa6+2516-0x247a
<operator>.subtraction 0x196b+2215-0x2212
<operator>.addition 0x158d+3548
<operator>.cast (int)buf[\012(0x1dc8+1826-0x24e9)]
<operator>.addition 0x222+1124
<operator>.cast (int)buf[\012(0x19f+5157-0x15c3)]
<operator>.subtraction 0xcc3+5389-0x21cf
<operator>.addition 0x1aa6+2516
<operator>.addition 0x196b+2215
<operator>.cast (int)buf[(0x1342+3972-0x22c6)]
<operator>.cast (\012int)buf[(0xd89+3524-0x1b4d)]
<operator>.subtraction 0x1ce3+2282-0x25cb
<operator>.cast (int)buf[(0xa8+385-0x229)]
<operator>.cast (int\012)buf[(0x1943+3199-0x25c2)]
<operator>.addition 0xcc3+5389
<operator>.subtraction 0x1dc8+1826-0x24e9
<operator>.cast (int)buf[(0xadc+1422-0x1069)]
<operator>.addition 0x1ce3+2282
<operator>.subtraction 0x19f+5157-0x15c3
<operator>.cast (int)buf[(0x2d4+4808-0x159b)]
<operator>.subtraction 0x1342+3972-0x22c6
<operator>.addition 0x1dc8+1826
<operator>.subtraction 0xd89+3524-0x1b4d
<operator>.subtraction 0xa8+385-0x229
<operator>.addition 0x19f+5157
<operator>.subtraction 0x1943+3199-0x25c2
<operator>.addition 0x1342+3972
<operator>.subtraction 0xadc+1422-0x1069
<operator>.addition 0xd89+3524
<operator>.addition 0xa8+385
<operator>.subtraction 0x2d4+4808-0x159b
<operator>.addition 0x1943+3199
<operator>.addition 0xadc+1422
<operator>.addition 0x2d4+4808
<operator>.indirectIndexAccess ReplacementFor_combine[i][\012ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_combine[(int)buf[(0x1342+3972-0x22c6)]][(int)buf[\012(0x1dc8+1826-0x24e9)]]
<operator>.indirectIndexAccess ReplacementFor_opposed[(int)buf[(0xa8+385-0x229)]][(int)buf[\012(0x19f+5157-0x15c3)]]
<operator>.indirectIndexAccess ReplacementFor_combine[i]
<operator>.indirectIndexAccess ReplacementFor_opposed[i][ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_combine[(int)buf[(0x1342+3972-0x22c6)]]
<operator>.indirectIndexAccess ReplacementFor_combine[(int)buf[(0xadc+1422-0x1069)]][(\012int)buf[(0xd89+3524-0x1b4d)]]
<operator>.indirectIndexAccess buf[(0x1ce3+2282-0x25cb)]
<operator>.indirectIndexAccess ReplacementFor_opposed[(int)buf[(0xa8+385-0x229)]]
<operator>.indirectIndexAccess ReplacementFor_opposed[(int)buf[(0x2d4+4808-0x159b)]][(int\012)buf[(0x1943+3199-0x25c2)]]
<operator>.indirectIndexAccess ReplacementFor_opposed[i]
UNKNOWN int int
<operator>.indirectIndexAccess buf[\012(0x1dc8+1826-0x24e9)]
<operator>.indirectIndexAccess ReplacementFor_combine[(int)buf[(0xadc+1422-0x1069)]]
UNKNOWN int int
<operator>.indirectIndexAccess buf[\012(0x19f+5157-0x15c3)]
<operator>.indirectIndexAccess ReplacementFor_opposed[(int)buf[(0x2d4+4808-0x159b)]]
UNKNOWN int int
<operator>.indirectIndexAccess buf[(0x1342+3972-0x22c6)]
UNKNOWN int int
<operator>.indirectIndexAccess buf[(0xd89+3524-0x1b4d)]
UNKNOWN int int
<operator>.indirectIndexAccess buf[(0xa8+385-0x229)]
UNKNOWN int int
<operator>.indirectIndexAccess buf[(0x1943+3199-0x25c2)]
UNKNOWN int int
<operator>.indirectIndexAccess buf[(0xadc+1422-0x1069)]
UNKNOWN int int
<operator>.indirectIndexAccess buf[(0x2d4+4808-0x159b)]
>>>PDG&92 0->2 0->3 0->4 0->5 0->6 0->7 0->8 0->9 0->10 0->12 0->13 0->16 0->19 0->22 0->24 0->26 0->28 0->29 0->30 0->31 0->33 0->35 0->36 0->37 0->40 0->43 0->44 0->46 0->47 0->49 0->50 0->51 0->52 0->53 0->54 0->55 0->56 0->57 0->58 0->59 0->60 0->61 0->62 2->1 2->3 2->7 2->9 3->1 3->9 4->1 4->1 5->1 5->1 5->5 5->6 5->6 5->12 5->12 5->21 5->29 5->36 6->1 6->5 7->3 7->7 7->8 7->8 7->9 7->16 7->17 7->25 7->32 7->38 7->39 7->40 7->44 7->45 7->46 7->49 7->50 7->51 7->55 7->56 7->57 7->61 7->64 7->68 7->69 7->70 7->74 7->75 7->76 7->80 7->81 7->82 7->83 7->88 7->89 8->1 8->7 9->1 9->1 9->1 9->9 9->10 9->10 9->19 9->20 9->27 9->34 9->35 9->41 9->42 9->43 9->47 9->48 9->52 9->53 9->54 9->58 9->59 9->60 9->62 9->65 9->71 9->72 9->77 9->78 9->79 9->84 9->85 9->86 9->87 9->90 9->91 10->1 10->9 11->1 11->1 11->5 12->1 12->1 12->5 12->12 12->13 12->13 12->14 12->23 12->30 12->37 12->63 12->66 12->67 12->73 13->1 13->12 14->1 14->1 14->1 15->1 15->1 15->7 16->1 16->17 16->19 16->25 16->32 16->38 16->39 16->45 17->1 17->1 17->1 18->1 18->1 18->9 19->1 19->34 19->41 19->42 19->48 20->1 20->1 20->1 21->1 21->1 21->12 22->1 22->11 22->11 23->1 23->1 23->14 24->1 24->15 24->15 25->1 25->1 25->17 26->1 26->18 26->18 27->1 27->1 27->20 29->1 29->21 29->21 30->1 30->14 30->14 30->23 30->23 32->1 34->1 35->1 35->20 35->20 35->27 35->27 38->1 39->1 40->1 41->1 42->1 44->1 45->1 47->1 48->1 49->1 51->1 52->1 54->1 56->1 59->1
>>>Token void read ( ) { int ReplacementFor_aux , i , ReplacementFor_j ; char buf [ ReplacementFor_MAX_BUF ] ; for ( i = ( 0x916 + 2960 - 0x14a6 ) ; i < ReplacementFor_MAX_ASCII ; i ++ ) for ( ReplacementFor_j = ( 0x1aa6 + 2516 - 0x247a ) ; ReplacementFor_j < ReplacementFor_MAX_ASCII ; ReplacementFor_j ++ ) ReplacementFor_combine [ i ] [ ReplacementFor_j ] = ReplacementFor_opposed [ i ] [ ReplacementFor_j ] = ( 0x196b + 2215 - 0x2212 ) ; scanf ( " \x25 \x64 " , & ReplacementFor_aux ) ; for ( i = ( 0x158d + 3548 - 0x2369 ) ; i < ReplacementFor_aux ; i ++ ) { scanf ( " \x25 \x73 " , buf ) ; ReplacementFor_combine [ ( int ) buf [ ( 0x1342 + 3972 - 0x22c6 ) ] ] [ ( int ) buf [ ( 0x1dc8 + 1826 - 0x24e9 ) ] ] = ReplacementFor_combine [ ( int ) buf [ ( 0xadc + 1422 - 0x1069 ) ] ] [ ( int ) buf [ ( 0xd89 + 3524 - 0x1b4d ) ] ] = buf [ ( 0x1ce3 + 2282 - 0x25cb ) ] ; } scanf ( " \x25 \x64 " , & ReplacementFor_aux ) ; for ( i = ( 0x222 + 1124 - 0x686 ) ; i < ReplacementFor_aux ; i ++ ) { scanf ( " \x25 \x73 " , buf ) ; ReplacementFor_opposed [ ( int ) buf [ ( 0xa8 + 385 - 0x229 ) ] ] [ ( int ) buf [ ( 0x19f + 5157 - 0x15c3 ) ] ] = ReplacementFor_opposed [ ( int ) buf [ ( 0x2d4 + 4808 - 0x159b ) ] ] [ ( int ) buf [ ( 0x1943 + 3199 - 0x25c2 ) ] ] = ( 0xcc3 + 5389 - 0x21cf ) ; } scanf ( " \x25 \x64 \x20 \x25 \x73 " , & ReplacementFor_n , sequence ) ; }
>>>Func
METHOD ReplacementFor_get_paragraph
METHOD_RETURN bool
PARAM FILE*ReplacementFor_f
<operator>.assignment ReplacementFor_last_line_length=(0xd16+1476-0x12da)
<operator>.assignment ReplacementFor_c=ReplacementFor_next_char
<operator>.assignment ReplacementFor_prefix_indent=ReplacementFor_next_prefix_indent
<operator>.assignment ReplacementFor_first_indent=ReplacementFor_in_column
<operator>.assignment ReplacementFor_wptr=\012ReplacementFor_parabuf
<operator>.assignment ReplacementFor_word_limit=ReplacementFor_word
<operator>.assignment ReplacementFor_c=ReplacementFor_get_line(ReplacementFor_f,ReplacementFor_c)
ReplacementFor_set_other_indent ReplacementFor_set_other_indent(ReplacementFor_same_para(ReplacementFor_c))
ReplacementFor_assert ReplacementFor_assert(ReplacementFor_word<ReplacementFor_word_limit)
<operator>.assignment (\012ReplacementFor_word_limit-(0x11db+249-0x12d3))->ReplacementFor_period=(\012ReplacementFor_word_limit-(0x1a7f+1803-0x2189))->final=true
<operator>.assignment ReplacementFor_next_char=ReplacementFor_c
RETURN return true; return true;
<operator>.logicalOr ReplacementFor_c=='\n'||\012ReplacementFor_c==EOF||ReplacementFor_next_prefix_indent<\012ReplacementFor_prefix_lead_space||ReplacementFor_in_column<\012ReplacementFor_next_prefix_indent+ReplacementFor_prefix_full_length
IDENTIFIER ReplacementFor_split if (ReplacementFor_split)
IDENTIFIER true return true;
<operator>.subtraction 0xd16+1476-0x12da
<operator>.assignment ReplacementFor_c=ReplacementFor_copy_rest(ReplacementFor_f,ReplacementFor_c)
putchar putchar('\n')
<operator>.assignment ReplacementFor_c=ReplacementFor_get_prefix(ReplacementFor_f)
ReplacementFor_get_line ReplacementFor_get_line(ReplacementFor_f,ReplacementFor_c)
ReplacementFor_same_para ReplacementFor_same_para(ReplacementFor_c)
<operator>.lessThan ReplacementFor_word<ReplacementFor_word_limit
<operator>.assignment (\012ReplacementFor_word_limit-(0x1a7f+1803-0x2189))->final=true
<operator>.addition 0xd16+1476
<operator>.logicalOr ReplacementFor_c=='\n'||\012ReplacementFor_c==EOF||ReplacementFor_next_prefix_indent<\012ReplacementFor_prefix_lead_space
<operator>.lessThan ReplacementFor_in_column<\012ReplacementFor_next_prefix_indent+ReplacementFor_prefix_full_length
<operator>.equals ReplacementFor_c==EOF
<operator>.subtraction ReplacementFor_word_limit-(0x11db+249-0x12d3)
<operator>.logicalOr ReplacementFor_c=='\n'||\012ReplacementFor_c==EOF
<operator>.lessThan ReplacementFor_next_prefix_indent<\012ReplacementFor_prefix_lead_space
<operator>.addition ReplacementFor_next_prefix_indent+ReplacementFor_prefix_full_length
ReplacementFor_copy_rest ReplacementFor_copy_rest(ReplacementFor_f,ReplacementFor_c)
<operator>.assignment ReplacementFor_next_char=EOF
RETURN return false; return false;
ReplacementFor_get_prefix ReplacementFor_get_prefix(ReplacementFor_f)
IDENTIFIER ReplacementFor_crown if (ReplacementFor_crown)
<operator>.subtraction 0x11db+249-0x12d3
<operator>.subtraction ReplacementFor_word_limit-(0x1a7f+1803-0x2189)
<operator>.equals ReplacementFor_c=='\n'
<operator>.equals ReplacementFor_c==EOF
IDENTIFIER false return false;
<operator>.addition 0x11db+249
<operator>.subtraction 0x1a7f+1803-0x2189
ReplacementFor_same_para ReplacementFor_same_para\012(ReplacementFor_c)
<operator>.addition 0x1a7f+1803
IDENTIFIER ReplacementFor_tagged if (ReplacementFor_tagged)
<operator>.logicalAnd ReplacementFor_same_para(ReplacementFor_c)&&\012ReplacementFor_in_column==ReplacementFor_other_indent
<operator>.assignment ReplacementFor_c=ReplacementFor_get_line(ReplacementFor_f\012,ReplacementFor_c)
<operator>.logicalAnd ReplacementFor_same_para(ReplacementFor_c)&&\012ReplacementFor_in_column!=ReplacementFor_first_indent
ReplacementFor_same_para ReplacementFor_same_para(ReplacementFor_c)
<operator>.equals ReplacementFor_in_column==ReplacementFor_other_indent
<operator>.logicalAnd ReplacementFor_same_para(\012ReplacementFor_c)&&ReplacementFor_in_column==ReplacementFor_other_indent
<operator>.assignment ReplacementFor_c=ReplacementFor_get_line(ReplacementFor_f,ReplacementFor_c)
ReplacementFor_get_line ReplacementFor_get_line(ReplacementFor_f\012,ReplacementFor_c)
ReplacementFor_same_para ReplacementFor_same_para(ReplacementFor_c)
<operator>.notEquals ReplacementFor_in_column!=ReplacementFor_first_indent
<operator>.logicalAnd ReplacementFor_same_para(ReplacementFor_c)&&ReplacementFor_in_column==\012ReplacementFor_other_indent
<operator>.assignment ReplacementFor_c=\012ReplacementFor_get_line(ReplacementFor_f,ReplacementFor_c)
ReplacementFor_same_para ReplacementFor_same_para(\012ReplacementFor_c)
<operator>.equals ReplacementFor_in_column==ReplacementFor_other_indent
ReplacementFor_get_line ReplacementFor_get_line(ReplacementFor_f,ReplacementFor_c)
ReplacementFor_same_para ReplacementFor_same_para(ReplacementFor_c)
<operator>.equals ReplacementFor_in_column==\012ReplacementFor_other_indent
ReplacementFor_get_line ReplacementFor_get_line(ReplacementFor_f,ReplacementFor_c)
<operator>.indirectFieldAccess (\012ReplacementFor_word_limit-(0x11db+249-0x12d3))->ReplacementFor_period
FIELD_IDENTIFIER ReplacementFor_period ReplacementFor_period
<operator>.indirectFieldAccess (\012ReplacementFor_word_limit-(0x1a7f+1803-0x2189))->final
FIELD_IDENTIFIER final final
>>>PDG&71 0->2 0->4 0->5 0->6 0->7 0->8 0->12 0->13 0->14 0->16 0->17 0->18 0->20 0->22 0->23 0->24 0->25 0->26 0->28 0->29 0->30 0->32 0->33 0->34 0->35 0->36 0->37 0->38 0->39 0->40 0->41 0->42 0->43 0->44 0->45 0->46 0->47 0->48 0->52 0->53 0->56 0->57 0->58 0->61 0->62 0->63 0->64 0->65 0->66 2->22 2->34 3->1 3->1 3->1 4->1 4->41 5->1 6->58 7->1 8->24 9->23 14->1 15->1 15->1 15->1 15->5 15->6 15->7 15->8 15->9 15->10 15->11 15->12 15->13 15->14 15->19 15->22 15->23 15->24 15->25 15->29 15->30 15->34 15->39 15->40 15->44 15->45 15->46 15->47 15->51 15->54 15->57 15->61 15->67 15->68 15->69 15->70 17->14 18->1 18->3 18->3 19->1 19->1 19->29 20->1 21->1 21->1 21->41 22->9 22->9 22->56 22->63 22->66 23->10 23->46 23->57 23->61 24->11 24->11 24->30 25->1 25->12 27->1 27->1 27->15 27->15 27->28 27->33 28->1 28->1 28->6 28->15 28->15 28->53 28->58 28->62 28->65 29->1 29->1 29->15 29->20 29->21 29->27 29->31 29->31 29->35 29->35 29->36 29->37 29->41 29->42 30->40 31->1 31->27 31->27 31->32 32->1 32->1 32->5 32->27 32->27 32->28 32->33 33->1 33->1 34->1 34->19 34->19 34->37 35->1 35->1 35->1 36->1 37->21 37->22 37->34 39->30 39->30 41->22 41->31 41->31 41->34 41->42 41->42 42->22 42->29 42->31 42->31 42->34 43->36 45->40 45->40 46->13 46->49 46->50 46->52 46->56 46->56 49->49 49->50 49->52 49->56 50->52 51->59 51->60 51->64 51->66 52->13 52->49 52->53 52->56 53->49 53->49 54->54 54->55 54->61 54->63 55->61 56->50 56->50 57->13 57->51 57->58 57->66 58->51 58->51 58->65 59->59 59->60 59->64 59->66 60->64 61->13 61->54 61->62 61->63 62->54 62->54 63->55 63->55 64->13 64->59 64->65 64->66 65->59 65->59 66->60 66->60
>>>Token static bool ReplacementFor_get_paragraph ( FILE * ReplacementFor_f ) { int ReplacementFor_c ; ReplacementFor_last_line_length = ( 0xd16 + 1476 - 0x12da ) ; ReplacementFor_c = ReplacementFor_next_char ; while ( ReplacementFor_c == ' \n ' || ReplacementFor_c == EOF || ReplacementFor_next_prefix_indent < ReplacementFor_prefix_lead_space || ReplacementFor_in_column < ReplacementFor_next_prefix_indent + ReplacementFor_prefix_full_length ) { ReplacementFor_c = ReplacementFor_copy_rest ( ReplacementFor_f , ReplacementFor_c ) ; if ( ReplacementFor_c == EOF ) { ReplacementFor_next_char = EOF ; return false ; } putchar ( ' \n ' ) ; ReplacementFor_c = ReplacementFor_get_prefix ( ReplacementFor_f ) ; } ReplacementFor_prefix_indent = ReplacementFor_next_prefix_indent ; ReplacementFor_first_indent = ReplacementFor_in_column ; ReplacementFor_wptr = ReplacementFor_parabuf ; ReplacementFor_word_limit = ReplacementFor_word ; ReplacementFor_c = ReplacementFor_get_line ( ReplacementFor_f , ReplacementFor_c ) ; ReplacementFor_set_other_indent ( ReplacementFor_same_para ( ReplacementFor_c ) ) ; if ( ReplacementFor_split ) { } else if ( ReplacementFor_crown ) { if ( ReplacementFor_same_para ( ReplacementFor_c ) ) { do { ReplacementFor_c = ReplacementFor_get_line ( ReplacementFor_f , ReplacementFor_c ) ; } while ( ReplacementFor_same_para ( ReplacementFor_c ) && ReplacementFor_in_column == ReplacementFor_other_indent ) ; } } else if ( ReplacementFor_tagged ) { if ( ReplacementFor_same_para ( ReplacementFor_c ) && ReplacementFor_in_column != ReplacementFor_first_indent ) { do { ReplacementFor_c = ReplacementFor_get_line ( ReplacementFor_f , ReplacementFor_c ) ; } while ( ReplacementFor_same_para ( ReplacementFor_c ) && ReplacementFor_in_column == ReplacementFor_other_indent ) ; } } else { while ( ReplacementFor_same_para ( ReplacementFor_c ) && ReplacementFor_in_column == ReplacementFor_other_indent ) ReplacementFor_c = ReplacementFor_get_line ( ReplacementFor_f , ReplacementFor_c ) ; } ReplacementFor_assert ( ReplacementFor_word < ReplacementFor_word_limit ) ; ( ReplacementFor_word_limit - ( 0x11db + 249 - 0x12d3 ) ) -> ReplacementFor_period = ( ReplacementFor_word_limit - ( 0x1a7f + 1803 - 0x2189 ) ) -> final = true ; ReplacementFor_next_char = ReplacementFor_c ; return true ; }
>>>Func
METHOD main
METHOD_RETURN int
scanf scanf("\x25\x64",&T)
RETURN return(0xbd7+988-0xfb3); return(0xbd7+988-0xfb3);
<operator>.lessThan ReplacementFor_k<T
<operator>.postIncrement ReplacementFor_k++
<operator>.subtraction 0xbd7+988-0xfb3
<operator>.assignment ReplacementFor_k=(0x186+3084-0xd92)
scanf scanf("\x25\x64\x20",&i)
scanf scanf("\x25\x64\x20",&i)
scanf scanf("\x25\x64\x20",&i)
<operator>.assignment l=(0x1f17+1784-0x260f)
<operator>.assignment ReplacementFor_res[l\012]=(0x1319+2536-0x1d01)
printf printf("\x43\x61\x73\x65\x20\x23\x25\x64\x3a\x20\x5b" \012ReplacementFor_k+(0x12f6+4810-0x25bf))
printf printf("\x5d" "\n")
<operator>.lessThan i<\012(0xc88+3265-0x192f)
<operator>.postIncrement i++
<operator>.postDecrement i--
<operator>.postDecrement i--
<operator>.postDecrement i--
<operator>.lessThan i<l
<operator>.postIncrement i++
<operator>.addition 0xbd7+988
<operator>.subtraction 0x186+3084-0xd92
<operator>.assignment i=(0x10ef+617-0x1358)
<operator>.lessThan ReplacementFor_j<(0x5d5+3350-0x12d1)
<operator>.postIncrement ReplacementFor_j++
<operator>.assignment ReplacementFor_o[i][\012ReplacementFor_j]=ReplacementFor_c[i][ReplacementFor_j]=ReplacementFor_p[i]=\012(0x325+6798-0x1db3)
scanf scanf(\012"\x25\x63\x25\x63\x25\x63\x20",&ReplacementFor_c1,&ReplacementFor_c2,&\012ReplacementFor_c3)
<operator>.assignment ReplacementFor_i1=(int)ReplacementFor_c1-\012((char)(0x7bf+5070-0x1b4c))
<operator>.assignment ReplacementFor_i2=(int)ReplacementFor_c2-\012((char)(0x115f+5570-0x26e0))
<operator>.assignment ReplacementFor_o[ReplacementFor_i1][\012ReplacementFor_i2]=ReplacementFor_o[ReplacementFor_i2][ReplacementFor_i1]=\012ReplacementFor_c3
scanf scanf(\012"\x25\x63\x25\x63\x20",&ReplacementFor_c1,&ReplacementFor_c2)
<operator>.assignment ReplacementFor_i1=\012(int)ReplacementFor_c1-((char)(0x48+7208-0x1c2f))
<operator>.assignment ReplacementFor_i2=(int)\012ReplacementFor_c2-((char)(0x33d+7398-0x1fe2))
<operator>.assignment ReplacementFor_c[ReplacementFor_i1\012][ReplacementFor_i2]=ReplacementFor_c[ReplacementFor_i2][ReplacementFor_i1]=\012(0x20eb+1215-0x25a9)
<operator>.subtraction 0x1f17+1784-0x260f
scanf scanf("\x25\x63",&ReplacementFor_c1)
<operator>.assignment ReplacementFor_res[l]=ReplacementFor_c1
<operator>.postIncrement l\012++
<operator>.subtraction 0x1319+2536-0x1d01
<operator>.addition ReplacementFor_k+(0x12f6+4810-0x25bf)
<operator>.assignment i=(0x1a97+857-0x1df0)
printf printf\012("\x25\x63",ReplacementFor_res[i])
<operator>.addition 0x186+3084
<operator>.subtraction 0xc88+3265-0x192f
<operator>.assignment ReplacementFor_j=(0x1c74+626-0x1ee6)
<operator>.addition 0x1f17+1784
<operator>.greaterThan l>(0x2103+415-0x22a1)
<operator>.addition 0x1319+2536
<operator>.subtraction 0x12f6+4810-0x25bf
<operator>.lessThan i<l-(0x45d+7295-0x20db)
<operator>.subtraction 0x10ef+617-0x1358
<operator>.addition 0xc88+3265
<operator>.subtraction 0x5d5+3350-0x12d1
<operator>.assignment ReplacementFor_c[i][ReplacementFor_j]=ReplacementFor_p[i]=\012(0x325+6798-0x1db3)
<operator>.subtraction (int)ReplacementFor_c1-\012((char)(0x7bf+5070-0x1b4c))
<operator>.subtraction (int)ReplacementFor_c2-\012((char)(0x115f+5570-0x26e0))
<operator>.assignment ReplacementFor_o[ReplacementFor_i2][ReplacementFor_i1]=\012ReplacementFor_c3
<operator>.subtraction (int)ReplacementFor_c1-((char)(0x48+7208-0x1c2f))
<operator>.subtraction (int)\012ReplacementFor_c2-((char)(0x33d+7398-0x1fe2))
<operator>.assignment ReplacementFor_c[ReplacementFor_i2][ReplacementFor_i1]=\012(0x20eb+1215-0x25a9)
ReplacementFor_parseString ReplacementFor_parseString()
<operator>.addition 0x12f6+4810
<operator>.subtraction 0x1a97+857-0x1df0
printf printf("\x2c\x20")
<operator>.addition 0x10ef+617
<operator>.subtraction 0x1c74+626-0x1ee6
<operator>.addition 0x5d5+3350
<operator>.assignment ReplacementFor_p[i]=\012(0x325+6798-0x1db3)
<operator>.cast (int)ReplacementFor_c1
<operator>.cast (char)(0x7bf+5070-0x1b4c)
<operator>.cast (int)ReplacementFor_c2
<operator>.cast (char)(0x115f+5570-0x26e0)
<operator>.cast (int)ReplacementFor_c1
<operator>.cast (char)(0x48+7208-0x1c2f)
<operator>.cast (int)\012ReplacementFor_c2
<operator>.cast (char)(0x33d+7398-0x1fe2)
<operator>.subtraction 0x20eb+1215-0x25a9
<operator>.subtraction 0x2103+415-0x22a1
<operator>.addition 0x1a97+857
<operator>.subtraction l-(0x45d+7295-0x20db)
<operator>.addition 0x1c74+626
<operator>.subtraction 0x325+6798-0x1db3
<operator>.subtraction 0x7bf+5070-0x1b4c
<operator>.subtraction 0x115f+5570-0x26e0
<operator>.subtraction 0x48+7208-0x1c2f
<operator>.subtraction 0x33d+7398-0x1fe2
<operator>.addition 0x20eb+1215
<operator>.addition 0x2103+415
<operator>.subtraction 0x45d+7295-0x20db
<operator>.addition 0x325+6798
<operator>.addition 0x7bf+5070
<operator>.addition 0x115f+5570
<operator>.addition 0x48+7208
<operator>.addition 0x33d+7398
<operator>.addition 0x45d+7295
<operator>.addressOf &i
<operator>.addressOf &i
<operator>.addressOf &i
<operator>.indirectIndexAccess ReplacementFor_res[l\012]
<operator>.indirectIndexAccess ReplacementFor_o[i][\012ReplacementFor_j]
<operator>.addressOf &ReplacementFor_c1
<operator>.addressOf &ReplacementFor_c2
<operator>.addressOf &\012ReplacementFor_c3
<operator>.indirectIndexAccess ReplacementFor_o[ReplacementFor_i1][\012ReplacementFor_i2]
<operator>.addressOf &ReplacementFor_c1
<operator>.addressOf &ReplacementFor_c2
<operator>.indirectIndexAccess ReplacementFor_c[ReplacementFor_i1\012][ReplacementFor_i2]
<operator>.addressOf &ReplacementFor_c1
<operator>.indirectIndexAccess ReplacementFor_res[l]
<operator>.indirectIndexAccess ReplacementFor_res[i]
<operator>.indirectIndexAccess ReplacementFor_o[i]
<operator>.indirectIndexAccess ReplacementFor_c[i][ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_o[ReplacementFor_i1]
<operator>.indirectIndexAccess ReplacementFor_o[ReplacementFor_i2][ReplacementFor_i1]
<operator>.indirectIndexAccess ReplacementFor_c[ReplacementFor_i1\012]
<operator>.indirectIndexAccess ReplacementFor_c[ReplacementFor_i2][ReplacementFor_i1]
<operator>.indirectIndexAccess ReplacementFor_c[i]
<operator>.indirectIndexAccess ReplacementFor_p[i]
UNKNOWN int int
UNKNOWN char char
UNKNOWN int int
UNKNOWN char char
<operator>.indirectIndexAccess ReplacementFor_o[ReplacementFor_i2]
UNKNOWN int int
UNKNOWN char char
UNKNOWN int int
UNKNOWN char char
<operator>.indirectIndexAccess ReplacementFor_c[ReplacementFor_i2]
>>>PDG&130 0->2 0->4 0->5 0->6 0->8 0->9 0->10 0->13 0->14 0->15 0->16 0->17 0->18 0->19 0->20 0->21 0->22 0->23 0->25 0->26 0->28 0->31 0->32 0->36 0->37 0->38 0->39 0->40 0->41 0->43 0->44 0->45 0->47 0->48 0->49 0->50 0->51 0->52 0->53 0->54 0->56 0->57 0->58 0->59 0->60 0->62 0->63 0->64 0->65 0->66 0->67 0->68 0->70 0->72 0->74 0->76 0->78 0->79 0->80 0->81 0->82 0->83 0->84 0->85 0->86 0->87 0->88 0->89 0->90 0->91 0->92 0->93 0->94 0->95 0->96 2->1 2->4 3->1 4->1 4->1 4->1 4->4 4->5 4->5 4->8 4->9 4->10 4->11 4->12 4->13 4->13 4->14 4->15 4->17 4->18 4->19 4->20 4->24 4->36 4->40 4->41 4->41 4->42 4->45 4->47 4->49 4->50 4->52 4->53 4->63 4->64 4->66 4->80 4->97 4->98 4->99 4->100 5->1 5->4 6->1 6->1 6->3 7->1 7->1 7->4 8->9 8->17 8->18 9->10 9->18 9->19 10->1 10->8 10->15 10->16 10->17 10->19 10->20 10->21 10->51 11->1 11->1 11->20 11->39 12->1 12->1 12->1 13->1 13->1 14->1 15->1 15->1 15->8 15->15 15->16 15->16 15->17 15->25 15->45 15->46 15->53 15->54 15->67 15->68 15->82 16->1 16->15 17->9 17->17 17->18 17->28 17->29 17->30 17->31 17->56 17->57 17->58 17->70 17->71 17->72 17->73 17->84 17->85 17->92 17->93 17->102 17->103 17->104 17->105 17->114 17->115 17->120 17->121 17->122 17->123 17->124 18->10 18->18 18->19 18->32 18->33 18->34 18->35 18->59 18->60 18->61 18->74 18->75 18->76 18->77 18->78 18->86 18->87 18->88 18->94 18->95 18->106 18->107 18->108 18->116 18->117 18->125 18->126 18->127 18->128 18->129 19->1 19->19 19->37 19->38 19->39 19->48 19->79 19->89 19->109 19->110 20->1 20->1 20->1 20->20 20->21 20->43 20->51 20->51 20->81 20->81 20->90 20->96 20->111 21->1 21->20 23->1 23->7 23->7 24->1 24->1 24->15 25->1 25->1 25->1 25->25 25->26 25->26 25->27 25->54 25->55 25->68 25->69 25->83 25->91 25->101 25->112 25->113 25->118 25->119 26->1 26->25 27->1 27->1 27->1 28->1 28->1 28->1 28->32 28->37 28->38 28->56 28->59 28->70 28->74 29->1 29->1 29->1 30->1 30->1 30->1 31->1 31->1 31->1 32->1 32->1 32->28 32->37 32->38 32->56 32->59 32->70 32->74 33->1 33->1 33->1 34->1 34->1 34->1 35->1 35->1 35->1 36->1 36->11 36->11 37->1 37->28 37->32 37->38 37->56 37->59 37->70 37->74 38->1 38->1 38->1 39->1 39->48 40->1 40->12 40->12 41->1 42->1 42->1 42->20 43->1 43->1 45->1 45->15 45->15 46->1 46->1 46->25 48->1 48->1 48->20 48->39 48->62 50->1 50->13 50->13 50->41 50->41 51->1 51->1 51->21 51->65 52->1 52->24 52->24 54->1 54->25 54->25 55->1 55->1 55->27 56->1 56->1 56->29 56->29 57->1 57->1 57->30 57->30 58->1 58->1 58->31 59->1 59->1 59->33 59->33 60->1 60->1 60->34 60->34 61->1 61->1 61->35 62->1 64->1 64->42 64->42 65->1 67->1 67->46 67->46 69->1 69->1 69->27 69->55 70->1 71->1 72->1 73->1 74->1 75->1 76->1 77->1 78->1 78->35 78->35 78->61 78->61 79->1 79->48 79->48 81->1 81->20 81->51 81->51 83->1 83->27 83->27 83->55 83->55 83->69 83->69 84->1 84->56 84->56 84->71 84->71 85->1 85->57 85->57 85->73 85->73 86->1 86->59 86->59 86->75 86->75 87->1 87->60 87->60 87->77 87->77 90->1 90->81 90->81
>>>Token int main ( ) { int T ; int i , ReplacementFor_j , ReplacementFor_k ; unsigned char ReplacementFor_c1 , ReplacementFor_c2 , ReplacementFor_c3 ; int ReplacementFor_i1 , ReplacementFor_i2 ; scanf ( " \x25 \x64 " , & T ) ; for ( ReplacementFor_k = ( 0x186 + 3084 - 0xd92 ) ; ReplacementFor_k < T ; ReplacementFor_k ++ ) { for ( i = ( 0x10ef + 617 - 0x1358 ) ; i < ( 0xc88 + 3265 - 0x192f ) ; i ++ ) for ( ReplacementFor_j = ( 0x1c74 + 626 - 0x1ee6 ) ; ReplacementFor_j < ( 0x5d5 + 3350 - 0x12d1 ) ; ReplacementFor_j ++ ) ReplacementFor_o [ i ] [ ReplacementFor_j ] = ReplacementFor_c [ i ] [ ReplacementFor_j ] = ReplacementFor_p [ i ] = ( 0x325 + 6798 - 0x1db3 ) ; scanf ( " \x25 \x64 \x20 " , & i ) ; while ( i -- ) { scanf ( " \x25 \x63 \x25 \x63 \x25 \x63 \x20 " , & ReplacementFor_c1 , & ReplacementFor_c2 , & ReplacementFor_c3 ) ; ReplacementFor_i1 = ( int ) ReplacementFor_c1 - ( ( char ) ( 0x7bf + 5070 - 0x1b4c ) ) ; ReplacementFor_i2 = ( int ) ReplacementFor_c2 - ( ( char ) ( 0x115f + 5570 - 0x26e0 ) ) ; ReplacementFor_o [ ReplacementFor_i1 ] [ ReplacementFor_i2 ] = ReplacementFor_o [ ReplacementFor_i2 ] [ ReplacementFor_i1 ] = ReplacementFor_c3 ; } scanf ( " \x25 \x64 \x20 " , & i ) ; while ( i -- ) { scanf ( " \x25 \x63 \x25 \x63 \x20 " , & ReplacementFor_c1 , & ReplacementFor_c2 ) ; ReplacementFor_i1 = ( int ) ReplacementFor_c1 - ( ( char ) ( 0x48 + 7208 - 0x1c2f ) ) ; ReplacementFor_i2 = ( int ) ReplacementFor_c2 - ( ( char ) ( 0x33d + 7398 - 0x1fe2 ) ) ; ReplacementFor_c [ ReplacementFor_i1 ] [ ReplacementFor_i2 ] = ReplacementFor_c [ ReplacementFor_i2 ] [ ReplacementFor_i1 ] = ( 0x20eb + 1215 - 0x25a9 ) ; } scanf ( " \x25 \x64 \x20 " , & i ) ; l = ( 0x1f17 + 1784 - 0x260f ) ; while ( i -- ) { scanf ( " \x25 \x63 " , & ReplacementFor_c1 ) ; ReplacementFor_res [ l ] = ReplacementFor_c1 ; l ++ ; if ( l > ( 0x2103 + 415 - 0x22a1 ) ) { ReplacementFor_parseString ( ) ; } } ReplacementFor_res [ l ] = ( 0x1319 + 2536 - 0x1d01 ) ; printf ( " \x43 \x61 \x73 \x65 \x20 \x23 \x25 \x64 \x3a \x20 \x5b " , ReplacementFor_k + ( 0x12f6 + 4810 - 0x25bf ) ) ; for ( i = ( 0x1a97 + 857 - 0x1df0 ) ; i < l ; i ++ ) { printf ( " \x25 \x63 " , ReplacementFor_res [ i ] ) ; if ( i < l - ( 0x45d + 7295 - 0x20db ) ) printf ( " \x2c \x20 " ) ; } printf ( " \x5d " " \n " ) ; } return ( 0xbd7 + 988 - 0xfb3 ) ; }
>>>Func
METHOD main
METHOD_RETURN int
PARAM int ReplacementFor_argc
PARAM char*ReplacementFor_argv[]
<operator>.assignment ReplacementFor_sum=(0xa01+4316-0x1add)
printf printf(\012"\x53\x75\x6d\x20\x69\x73\x3a\x20\x25\x64" "\n",ReplacementFor_sum)
RETURN return\012(0x182f+409-0x19c8); return\012(0x182f+409-0x19c8);
<operator>.lessThan ReplacementFor_argc<\012(0x1912+1285-0x1e15)
<operator>.lessThan i<ReplacementFor_argv[\012(0x1da1+2-0x1da2)][(0x592+3036-0x116e)]
<operator>.postIncrement i++
<operator>.assignmentPlus ReplacementFor_sum+=i
<operator>.subtraction 0x182f+409-0x19c8
<operator>.subtraction 0xa01+4316-0x1add
printf printf(\012"\x55\x73\x61\x67\x65\x3a\x20\x70\x72\x6f\x67\x72\x61\x6d\x2d\x6e\x61\x6d\x65\x20\x63\x68\x61\x72" "\n"\012)
RETURN return(0x87+9040-0x23d6); return(0x87+9040-0x23d6);
<operator>.assignment i=(0x4bf+799-0x7de)
<operator>.addition 0xa01+4316
<operator>.subtraction 0x1912+1285-0x1e15
<operator>.subtraction 0x87+9040-0x23d6
<operator>.addition 0x182f+409
<operator>.addition 0x1912+1285
<operator>.subtraction 0x4bf+799-0x7de
<operator>.subtraction 0x592+3036-0x116e
<operator>.addition 0x87+9040
<operator>.addition 0x4bf+799
<operator>.subtraction 0x1da1+2-0x1da2
<operator>.addition 0x592+3036
<operator>.addition 0x1da1+2
<operator>.indirectIndexAccess ReplacementFor_argv[\012(0x1da1+2-0x1da2)][(0x592+3036-0x116e)]
<operator>.indirectIndexAccess ReplacementFor_argv[\012(0x1da1+2-0x1da2)]
>>>PDG&30 0->2 0->3 0->5 0->7 0->8 0->9 0->10 0->11 0->12 0->13 0->16 0->17 0->18 0->19 0->20 0->21 0->22 0->23 0->24 0->25 0->26 0->27 2->7 3->1 4->1 4->1 4->1 4->5 4->10 6->1 7->1 7->1 7->1 7->5 7->6 7->8 7->11 7->13 7->14 7->15 7->18 7->19 7->21 7->22 7->23 7->24 7->25 7->26 7->27 7->28 7->29 8->8 8->9 8->9 8->10 8->10 8->22 8->25 8->26 8->27 8->28 8->29 9->8 10->5 11->6 12->1 12->4 12->4 13->1 14->1 15->8 17->1 17->7 17->7 18->1 18->1 18->14 21->15 21->15
>>>Token int main ( int ReplacementFor_argc , char * ReplacementFor_argv [ ] ) { int i ; int ReplacementFor_sum = ( 0xa01 + 4316 - 0x1add ) ; if ( ReplacementFor_argc < ( 0x1912 + 1285 - 0x1e15 ) ) { printf ( " \x55 \x73 \x61 \x67 \x65 \x3a \x20 \x70 \x72 \x6f \x67 \x72 \x61 \x6d \x2d \x6e \x61 \x6d \x65 \x20 \x63 \x68 \x61 \x72 " " \n " ) ; return ( 0x87 + 9040 - 0x23d6 ) ; } for ( i = ( 0x4bf + 799 - 0x7de ) ; i < ReplacementFor_argv [ ( 0x1da1 + 2 - 0x1da2 ) ] [ ( 0x592 + 3036 - 0x116e ) ] ; i ++ ) ReplacementFor_sum += i ; printf ( " \x53 \x75 \x6d \x20 \x69 \x73 \x3a \x20 \x25 \x64 " " \n " , ReplacementFor_sum ) ; return ( 0x182f + 409 - 0x19c8 ) ; }
>>>Func
METHOD main
METHOD_RETURN void
<operator>.assignment ReplacementFor_in=fopen(\012"\x6d\x61\x67\x73\x6d\x61\x6c\x6c\x2e\x69\x6e","\x72")
fscanf fscanf(ReplacementFor_in,\012"\x25\x64",&T)
<operator>.lessThan i<T
<operator>.postIncrement i++
fopen fopen(\012"\x6d\x61\x67\x73\x6d\x61\x6c\x6c\x2e\x69\x6e","\x72")
<operator>.assignment i=(0x1c67+2047-0x2466)
fscanf fscanf(ReplacementFor_in,\012"\x25\x64",&ReplacementFor_C)
fgetc fgetc(ReplacementFor_in)
fscanf fscanf\012(ReplacementFor_in,"\x25\x64",&ReplacementFor_D)
fgetc fgetc(ReplacementFor_in)
fscanf fscanf(ReplacementFor_in,"\x25\x64",&\012ReplacementFor_N)
fgetc fgetc(ReplacementFor_in)
fscanf fscanf(ReplacementFor_in,"\x25\x73",\012instr)
printf printf("\x43\x61\x73\x65\x20\x23\x25\x64\x3a\x20" i+(0x3dc+118-0x451))
memset memset(ReplacementFor_outstr (0x13c8+3668-0x221c) (0xae3+1724-0x1131))
ReplacementFor_solve ReplacementFor_solve()
printf printf("\n")
<operator>.lessThan ReplacementFor_j<ReplacementFor_C
<operator>.postIncrement ReplacementFor_j++
<operator>.lessThan ReplacementFor_j<ReplacementFor_D
<operator>.postIncrement ReplacementFor_j++
<operator>.subtraction 0x1c67+2047-0x2466
<operator>.assignment ReplacementFor_j=\012(0x1158+4458-0x22c2)
fscanf fscanf(ReplacementFor_in,"\x25\x63\x25\x63\x25\x63\x20",&ReplacementFor_com[\012ReplacementFor_j].ReplacementFor_a,&ReplacementFor_com[ReplacementFor_j].\012ReplacementFor_b,&ReplacementFor_com[ReplacementFor_j].ReplacementFor_c)
<operator>.assignment ReplacementFor_j=(0xff1+595-0x1244)
fscanf fscanf(ReplacementFor_in,"\x25\x63\x25\x63\x20",&\012ReplacementFor_dec[ReplacementFor_j].ReplacementFor_a,&ReplacementFor_dec[\012ReplacementFor_j].ReplacementFor_b)
<operator>.addition i+(0x3dc+118-0x451)
<operator>.subtraction 0x13c8+3668-0x221c
<operator>.subtraction 0xae3+1724-0x1131
<operator>.addition 0x1c67+2047
<operator>.subtraction 0x3dc+118-0x451
<operator>.addition 0x13c8+3668
<operator>.addition 0xae3+1724
<operator>.subtraction 0x1158+4458-0x22c2
<operator>.subtraction 0xff1+595-0x1244
<operator>.addition 0x3dc+118
<operator>.addition 0x1158+4458
<operator>.addition 0xff1+595
<operator>.addressOf &ReplacementFor_C
<operator>.addressOf &ReplacementFor_D
<operator>.addressOf &\012ReplacementFor_N
<operator>.addressOf &ReplacementFor_com[\012ReplacementFor_j].ReplacementFor_a
<operator>.addressOf &ReplacementFor_com[ReplacementFor_j].\012ReplacementFor_b
<operator>.addressOf &ReplacementFor_com[ReplacementFor_j].ReplacementFor_c
<operator>.addressOf &\012ReplacementFor_dec[ReplacementFor_j].ReplacementFor_a
<operator>.addressOf &ReplacementFor_dec[\012ReplacementFor_j].ReplacementFor_b
<operator>.fieldAccess ReplacementFor_com[\012ReplacementFor_j].ReplacementFor_a
<operator>.fieldAccess ReplacementFor_com[ReplacementFor_j].\012ReplacementFor_b
<operator>.fieldAccess ReplacementFor_com[ReplacementFor_j].ReplacementFor_c
<operator>.fieldAccess ReplacementFor_dec[ReplacementFor_j].ReplacementFor_a
<operator>.fieldAccess ReplacementFor_dec[\012ReplacementFor_j].ReplacementFor_b
<operator>.indirectIndexAccess ReplacementFor_com[\012ReplacementFor_j]
FIELD_IDENTIFIER ReplacementFor_a ReplacementFor_a
<operator>.indirectIndexAccess ReplacementFor_com[ReplacementFor_j]
FIELD_IDENTIFIER ReplacementFor_b ReplacementFor_b
<operator>.indirectIndexAccess ReplacementFor_com[ReplacementFor_j]
FIELD_IDENTIFIER ReplacementFor_c ReplacementFor_c
<operator>.indirectIndexAccess ReplacementFor_dec[ReplacementFor_j]
FIELD_IDENTIFIER ReplacementFor_a ReplacementFor_a
<operator>.indirectIndexAccess ReplacementFor_dec[\012ReplacementFor_j]
FIELD_IDENTIFIER ReplacementFor_b ReplacementFor_b
>>>PDG&63 0->3 0->4 0->5 0->6 0->8 0->9 0->10 0->11 0->12 0->13 0->14 0->15 0->16 0->17 0->18 0->19 0->20 0->21 0->22 0->23 0->25 0->27 0->28 0->29 0->30 0->31 0->32 0->33 0->34 0->35 0->36 0->37 0->38 0->39 2->1 2->1 2->3 3->1 3->1 3->1 3->4 3->8 4->1 4->1 4->1 4->4 4->5 4->5 4->8 4->9 4->10 4->11 4->12 4->13 4->14 4->15 4->15 4->16 4->17 4->18 4->19 4->21 4->24 4->26 4->28 4->28 4->29 4->30 4->32 4->33 4->34 4->35 4->36 4->37 4->38 4->39 4->40 4->41 4->42 5->1 5->4 6->2 6->2 7->1 7->1 7->4 8->1 8->1 8->9 8->19 9->10 9->25 10->1 10->1 10->11 10->21 11->12 11->27 12->1 12->1 12->13 13->1 13->14 14->1 14->1 14->1 14->8 15->1 15->1 16->1 16->1 16->1 16->1 17->1 18->1 19->1 19->1 19->8 19->19 19->20 19->20 19->25 19->43 19->44 19->45 19->48 19->49 19->50 19->53 19->54 19->55 19->56 19->57 19->58 20->1 20->19 21->1 21->1 21->1 21->10 21->21 21->22 21->22 21->27 21->46 21->47 21->51 21->52 21->59 21->60 21->61 21->62 22->1 22->21 23->1 23->7 23->7 24->1 24->1 24->19 25->1 25->1 25->1 25->1 25->10 26->1 26->1 26->21 27->1 27->1 27->1 27->12 28->1 29->1 29->16 29->16 30->1 30->16 30->16 32->1 32->15 32->15 32->28 32->28 35->1 35->24 35->24 36->1 36->26 36->26
>>>Token void main ( ) { int i , ReplacementFor_j ; ReplacementFor_in = fopen ( " \x6d \x61 \x67 \x73 \x6d \x61 \x6c \x6c \x2e \x69 \x6e " , " \x72 " ) ; fscanf ( ReplacementFor_in , " \x25 \x64 " , & T ) ; for ( i = ( 0x1c67 + 2047 - 0x2466 ) ; i < T ; i ++ ) { fscanf ( ReplacementFor_in , " \x25 \x64 " , & ReplacementFor_C ) ; fgetc ( ReplacementFor_in ) ; for ( ReplacementFor_j = ( 0x1158 + 4458 - 0x22c2 ) ; ReplacementFor_j < ReplacementFor_C ; ReplacementFor_j ++ ) { fscanf ( ReplacementFor_in , " \x25 \x63 \x25 \x63 \x25 \x63 \x20 " , & ReplacementFor_com [ ReplacementFor_j ] . ReplacementFor_a , & ReplacementFor_com [ ReplacementFor_j ] . ReplacementFor_b , & ReplacementFor_com [ ReplacementFor_j ] . ReplacementFor_c ) ; } fscanf ( ReplacementFor_in , " \x25 \x64 " , & ReplacementFor_D ) ; fgetc ( ReplacementFor_in ) ; for ( ReplacementFor_j = ( 0xff1 + 595 - 0x1244 ) ; ReplacementFor_j < ReplacementFor_D ; ReplacementFor_j ++ ) { fscanf ( ReplacementFor_in , " \x25 \x63 \x25 \x63 \x20 " , & ReplacementFor_dec [ ReplacementFor_j ] . ReplacementFor_a , & ReplacementFor_dec [ ReplacementFor_j ] . ReplacementFor_b ) ; } fscanf ( ReplacementFor_in , " \x25 \x64 " , & ReplacementFor_N ) ; fgetc ( ReplacementFor_in ) ; fscanf ( ReplacementFor_in , " \x25 \x73 " , instr ) ; printf ( " \x43 \x61 \x73 \x65 \x20 \x23 \x25 \x64 \x3a \x20 " , i + ( 0x3dc + 118 - 0x451 ) ) ; memset ( ReplacementFor_outstr , ( 0x13c8 + 3668 - 0x221c ) , ( 0xae3 + 1724 - 0x1131 ) ) ; ReplacementFor_solve ( ) ; printf ( " \n " ) ; } }
>>>Func
METHOD ReplacementFor_is_in_combined_list
METHOD_RETURN char
PARAM char ReplacementFor_c
PARAM char \012ReplacementFor_tmp
PARAM int ReplacementFor_C
RETURN return ReplacementFor_c; return ReplacementFor_c;
<operator>.lessThan i<\012ReplacementFor_C
<operator>.postIncrement i++
IDENTIFIER ReplacementFor_c return ReplacementFor_c;
<operator>.assignment i=(0x12e0+3713-0x2161)
<operator>.logicalOr ((ReplacementFor_c==ReplacementFor_combined[i][\012(0x83c+50-0x86e)])&&(ReplacementFor_tmp==ReplacementFor_combined[i][\012(0x1000+1347-0x1542)]))||((ReplacementFor_c==ReplacementFor_combined[i][\012(0x75d+4324-0x1840)])&&(ReplacementFor_tmp==ReplacementFor_combined[i][\012(0x1257+4927-0x2596)]))
<operator>.subtraction 0x12e0+3713-0x2161
<operator>.assignment ReplacementFor_c=ReplacementFor_combined[i][\012(0xeca+770-0x11ca)]
RETURN return ReplacementFor_c; return ReplacementFor_c;
<operator>.addition 0x12e0+3713
<operator>.logicalAnd (ReplacementFor_c==ReplacementFor_combined[i][\012(0x83c+50-0x86e)])&&(ReplacementFor_tmp==ReplacementFor_combined[i][\012(0x1000+1347-0x1542)])
<operator>.logicalAnd (ReplacementFor_c==ReplacementFor_combined[i][\012(0x75d+4324-0x1840)])&&(ReplacementFor_tmp==ReplacementFor_combined[i][\012(0x1257+4927-0x2596)])
IDENTIFIER ReplacementFor_c return ReplacementFor_c;
<operator>.equals ReplacementFor_c==ReplacementFor_combined[i][\012(0x83c+50-0x86e)]
<operator>.equals ReplacementFor_tmp==ReplacementFor_combined[i][\012(0x1000+1347-0x1542)]
<operator>.equals ReplacementFor_c==ReplacementFor_combined[i][\012(0x75d+4324-0x1840)]
<operator>.equals ReplacementFor_tmp==ReplacementFor_combined[i][\012(0x1257+4927-0x2596)]
<operator>.subtraction 0xeca+770-0x11ca
<operator>.subtraction 0x83c+50-0x86e
<operator>.subtraction 0x1000+1347-0x1542
<operator>.subtraction 0x75d+4324-0x1840
<operator>.subtraction 0x1257+4927-0x2596
<operator>.addition 0xeca+770
<operator>.addition 0x83c+50
<operator>.addition 0x1000+1347
<operator>.addition 0x75d+4324
<operator>.addition 0x1257+4927
<operator>.indirectIndexAccess ReplacementFor_combined[i][\012(0xeca+770-0x11ca)]
<operator>.indirectIndexAccess ReplacementFor_combined[i][\012(0x83c+50-0x86e)]
<operator>.indirectIndexAccess ReplacementFor_combined[i][\012(0x1000+1347-0x1542)]
<operator>.indirectIndexAccess ReplacementFor_combined[i][\012(0x75d+4324-0x1840)]
<operator>.indirectIndexAccess ReplacementFor_combined[i][\012(0x1257+4927-0x2596)]
<operator>.indirectIndexAccess ReplacementFor_combined[i]
<operator>.indirectIndexAccess ReplacementFor_combined[i]
<operator>.indirectIndexAccess ReplacementFor_combined[i]
<operator>.indirectIndexAccess ReplacementFor_combined[i]
<operator>.indirectIndexAccess ReplacementFor_combined[i]
>>>PDG&42 0->2 0->3 0->4 0->6 0->7 0->8 0->11 0->14 0->17 0->18 0->19 0->20 0->21 0->22 0->23 0->24 0->25 0->26 0->27 0->28 0->29 0->30 0->31 2->8 2->18 3->1 3->19 3->21 4->6 5->1 6->1 6->1 6->1 6->5 6->7 6->10 6->15 6->18 6->23 6->28 6->33 6->38 7->1 7->6 8->5 9->1 9->1 9->6 10->1 10->1 10->1 10->6 10->7 10->12 10->13 10->22 10->27 10->32 10->37 11->1 11->9 11->9 12->1 12->1 12->1 12->17 13->1 15->1 15->1 15->10 15->10 15->16 15->20 15->25 15->30 15->35 15->40 16->1 16->1 16->10 16->10 17->13 18->1 18->8 18->15 18->15 18->19 18->20 18->24 18->29 18->34 18->39 19->1 19->1 19->15 19->15 19->21 20->1 20->8 20->16 20->16 20->18 20->21 20->26 20->31 20->36 20->41 21->1 21->1 21->16 21->16 21->19 22->1 23->1 24->1 25->1 26->1
>>>Token char ReplacementFor_is_in_combined_list ( char ReplacementFor_c , char ReplacementFor_tmp , int ReplacementFor_C ) { int i ; for ( i = ( 0x12e0 + 3713 - 0x2161 ) ; i < ReplacementFor_C ; i ++ ) { if ( ( ( ReplacementFor_c == ReplacementFor_combined [ i ] [ ( 0x83c + 50 - 0x86e ) ] ) && ( ReplacementFor_tmp == ReplacementFor_combined [ i ] [ ( 0x1000 + 1347 - 0x1542 ) ] ) ) || ( ( ReplacementFor_c == ReplacementFor_combined [ i ] [ ( 0x75d + 4324 - 0x1840 ) ] ) && ( ReplacementFor_tmp == ReplacementFor_combined [ i ] [ ( 0x1257 + 4927 - 0x2596 ) ] ) ) ) { ReplacementFor_c = ReplacementFor_combined [ i ] [ ( 0xeca + 770 - 0x11ca ) ] ; return ReplacementFor_c ; } } return ReplacementFor_c ; }
>>>Func
METHOD ReplacementFor_free_binder
METHOD_RETURN void
<operator>.assignment *\012ReplacementFor_t_binder=&ReplacementFor_first_binder
<operator>.assignment ReplacementFor_t_binder=ReplacementFor_t_binder->next
RETURN return; return;
<operator>.equals ReplacementFor_t_binder->next==\012NULL
IDENTIFIER ReplacementFor_t_binder if (ReplacementFor_t_binder)
RETURN return; return;
<operator>.assignment ReplacementFor_temp=ReplacementFor_t_binder
<operator>.assignment ReplacementFor_t_binder=ReplacementFor_t_binder->next
free free(\012ReplacementFor_t_binder)
IDENTIFIER ReplacementFor_temp if (ReplacementFor_temp)
free free(ReplacementFor_temp)
<operator>.indirectFieldAccess ReplacementFor_t_binder->next
<operator>.indirectFieldAccess ReplacementFor_t_binder->next
FIELD_IDENTIFIER next next
FIELD_IDENTIFIER next next
<operator>.indirectFieldAccess ReplacementFor_t_binder->next
FIELD_IDENTIFIER next next
>>>PDG&19 0->2 0->4 0->5 0->6 0->7 0->8 0->10 0->11 0->12 2->1 2->1 2->1 3->8 3->10 4->1 5->1 5->1 5->1 5->3 5->3 5->4 5->7 5->9 5->10 5->13 5->14 5->15 5->16 7->1 8->12 9->8 9->10 14->8 14->9 14->12 14->14 14->16 14->17 14->18
>>>Token void ReplacementFor_free_binder ( ) { struct ReplacementFor_s_binder * ReplacementFor_t_binder = & ReplacementFor_first_binder ; struct ReplacementFor_s_binder * ReplacementFor_temp ; if ( ReplacementFor_t_binder -> next == NULL ) return ; ReplacementFor_t_binder = ReplacementFor_t_binder -> next ; while ( ReplacementFor_t_binder -> next ) { ReplacementFor_temp = ReplacementFor_t_binder ; ReplacementFor_t_binder = ReplacementFor_t_binder -> next ; if ( ReplacementFor_temp ) free ( ReplacementFor_temp ) ; } if ( ReplacementFor_t_binder ) free ( ReplacementFor_t_binder ) ; return ; }
>>>Func
METHOD main
METHOD_RETURN int
PARAM int ReplacementFor_argc
PARAM char*ReplacementFor_argv[]
<operator>.assignment ReplacementFor_sum=(0x1399+1234-0x186b)
printf printf(\012"\x53\x75\x6d\x20\x69\x73\x3a\x20\x25\x64" "\n",ReplacementFor_sum)
RETURN return\012(0xbc6+2107-0x1401); return\012(0xbc6+2107-0x1401);
<operator>.lessThan i<ReplacementFor_argc
<operator>.postIncrement i++
<operator>.subtraction 0xbc6+2107-0x1401
<operator>.subtraction 0x1399+1234-0x186b
<operator>.assignment i=\012(0x1863+1164-0x1cef)
<operator>.addition 0x1399+1234
<operator>.lessEqualsThan ReplacementFor_j<=ReplacementFor_argc
<operator>.postIncrement ReplacementFor_j++
<operator>.addition 0xbc6+2107
<operator>.subtraction 0x1863+1164-0x1cef
<operator>.assignment ReplacementFor_j=\012(0xd04+5483-0x226e)
<operator>.assignmentPlus ReplacementFor_sum+=ReplacementFor_j
<operator>.addition 0x1863+1164
<operator>.subtraction 0xd04+5483-0x226e
<operator>.addition 0xd04+5483
>>>PDG&22 0->2 0->3 0->5 0->7 0->8 0->9 0->10 0->12 0->13 0->14 0->15 0->16 0->18 0->19 0->20 0->21 2->7 3->1 4->1 4->1 4->5 4->18 5->1 5->1 6->1 7->1 7->1 7->1 7->7 7->8 7->8 7->13 7->13 7->17 7->20 7->21 8->1 8->7 9->1 9->1 9->6 10->1 10->4 10->4 11->1 11->1 11->7 13->1 13->1 13->7 13->13 13->14 13->14 13->18 13->18 14->1 14->13 16->1 16->11 16->11 17->1 17->1 17->13 18->1 18->5 20->1 20->17 20->17
>>>Token int main ( int ReplacementFor_argc , char * ReplacementFor_argv [ ] ) { int i , ReplacementFor_j ; int ReplacementFor_sum = ( 0x1399 + 1234 - 0x186b ) ; for ( i = ( 0x1863 + 1164 - 0x1cef ) ; i < ReplacementFor_argc ; i ++ ) { for ( ReplacementFor_j = ( 0xd04 + 5483 - 0x226e ) ; ReplacementFor_j <= ReplacementFor_argc ; ReplacementFor_j ++ ) { ReplacementFor_sum += ReplacementFor_j ; } } printf ( " \x53 \x75 \x6d \x20 \x69 \x73 \x3a \x20 \x25 \x64 " " \n " , ReplacementFor_sum ) ; return ( 0xbc6 + 2107 - 0x1401 ) ; }
>>>Func
>>>PDG&0
>>>Token int main ( ) { int ReplacementFor_nn , ReplacementFor_n , ReplacementFor_ii , ReplacementFor_flag , m , i , ReplacementFor_j , ReplacementFor_k , ReplacementFor_sum ; int ReplacementFor_A , ReplacementFor_B ; char buf [ ( 0x251f + 300 - 0x263c ) ] , ReplacementFor_temp [ ( 0xdf9 + 2175 - 0x1669 ) ] ; ReplacementFor_scandev ( ReplacementFor_nn ) < ReplacementFor_missing ( ( char ) ( 0x1599 + 2936 - 0x20d6 ) ) > int * ReplacementFor_COMB [ ( 0x1d22 + 674 - 0x1fa0 ) ] ; int * ReplacementFor_OPP [ ( 0x2a + 2583 - 0xa1d ) ] ; ReplacementFor_forrssss ( i , ( 0x2419 + 15 - 0x2404 ) ) < ReplacementFor_missing ( ( char ) ( 0x1e63 + 2201 - 0x26c1 ) ) > { ReplacementFor_COMB [ i ] = ( int * ) malloc ( sizeof ( int ) * ( 0xa2f + 2823 - 0x1512 ) ) ; ReplacementFor_OPP [ i ] = ( int * ) malloc ( sizeof ( int ) * ( 0x788 + 6968 - 0x229c ) ) ; } ReplacementFor_forrssss ( ReplacementFor_ii , ReplacementFor_nn ) < ReplacementFor_missing ( ( char ) ( 0xca8 + 3082 - 0x1877 ) ) > { ReplacementFor_k = ( 0x957 + 3744 - 0x17f7 ) ; ReplacementFor_scandev ( ReplacementFor_A ) ReplacementFor_init ( ReplacementFor_COMB , ReplacementFor_OPP , ReplacementFor_A , buf ) ; ReplacementFor_scandev ( ReplacementFor_n ) scanf ( " \x25 \x73 " , buf ) ; ReplacementFor_temp [ ( 0x12fd + 4223 - 0x237c ) ] = buf [ ( 0x656 + 2514 - 0x1028 ) ] ; for ( i = ( 0x1607 + 1827 - 0x1d29 ) ; i < ReplacementFor_n ; i ++ ) { if ( ReplacementFor_k == - ( 0x9d3 + 4073 - 0x19bb ) ) { ReplacementFor_temp [ ( 0x1445 + 1620 - 0x1a99 ) ] = buf [ i ] ; ReplacementFor_k = ( 0xcb7 + 6294 - 0x254d ) ; continue ; } else if ( ( ReplacementFor_COMB [ buf [ i ] - ( 0x37f + 183 - 0x3f5 ) ] [ ReplacementFor_temp [ ReplacementFor_k ] - ( 0x1304 + 4037 - 0x2288 ) ] >= ( 0x153d + 2698 - 0x1fc7 ) ) || ( ReplacementFor_COMB [ ReplacementFor_temp [ ReplacementFor_k ] - ( 0x1db + 4927 - 0x14d9 ) ] [ buf [ i ] - ( 0x1533 + 4615 - 0x26f9 ) ] >= ( 0xdf1 + 4286 - 0x1eaf ) ) ) { ReplacementFor_temp [ ReplacementFor_k ] = ReplacementFor_COMB [ buf [ i ] - ( 0xa85 + 4420 - 0x1b88 ) ] [ ReplacementFor_temp [ ReplacementFor_k ] - ( 0x3ba + 2467 - 0xd1c ) ] + ( 0x7ec + 4058 - 0x1785 ) ; continue ; } ReplacementFor_j = ReplacementFor_k ; ReplacementFor_flag = ( 0xb2d + 5733 - 0x2192 ) ; for ( ReplacementFor_j = ReplacementFor_k ; ReplacementFor_j >= ( 0x48f + 8751 - 0x26be ) ; ReplacementFor_j -- ) { if ( ReplacementFor_OPP [ buf [ i ] - ( 0xcec + 2414 - 0x1619 ) ] [ ReplacementFor_temp [ ReplacementFor_j ] - ( 0x1523 + 1177 - 0x197b ) ] ) { ReplacementFor_flag = ( 0x191b + 250 - 0x1a14 ) ; ReplacementFor_k = - ( 0x198f + 679 - 0x1c35 ) ; break ; } } if ( ReplacementFor_flag == ( 0xe30 + 736 - 0x1110 ) ) { ReplacementFor_temp [ ReplacementFor_k + ( 0xb89 + 1144 - 0x1000 ) ] = buf [ i ] ; ReplacementFor_k ++ ; } } printf ( " \x43 \x61 \x73 \x65 \x20 \x23 \x25 \x64 \x3a \x20 \x5b " , ReplacementFor_ii + ( 0x1143 + 1593 - 0x177b ) ) ; ReplacementFor_forrssss ( i , ReplacementFor_k + ( 0x1919 + 28 - 0x1934 ) ) < ReplacementFor_missing ( ( char ) ( 0xa4a + 4382 - 0x1b2d ) ) > { ReplacementFor_cout << ReplacementFor_temp [ i ] ; if ( i != ReplacementFor_k ) printf ( " \x2c \x20 " ) ; } printf ( " \x5d " " \n " ) ; } }
>>>Func
METHOD ReplacementFor_sdbm
METHOD_RETURN uint64_t
PARAM const char*s
<operator>.assignment ReplacementFor_hash=\012(0x453+4506-0x15ed)
<operator>.assignment i=(0xbf1+620-0xe5d)
RETURN return \012ReplacementFor_hash; return \012ReplacementFor_hash;
<operator>.notEquals s[i]!='\0'
IDENTIFIER ReplacementFor_hash return \012ReplacementFor_hash;
<operator>.subtraction 0x453+4506-0x15ed
<operator>.subtraction 0xbf1+620-0xe5d
<operator>.assignment ReplacementFor_hash=s[i]+(ReplacementFor_hash<<(0x6fd+6769-0x2168))+(\012ReplacementFor_hash<<(0x7da+3488-0x156a))-ReplacementFor_hash
<operator>.postIncrement i++
<operator>.addition 0x453+4506
<operator>.addition 0xbf1+620
<operator>.subtraction s[i]+(ReplacementFor_hash<<(0x6fd+6769-0x2168))+(\012ReplacementFor_hash<<(0x7da+3488-0x156a))-ReplacementFor_hash
<operator>.addition s[i]+(ReplacementFor_hash<<(0x6fd+6769-0x2168))+(\012ReplacementFor_hash<<(0x7da+3488-0x156a))
<operator>.addition s[i]+(ReplacementFor_hash<<(0x6fd+6769-0x2168))
<operator>.shiftLeft ReplacementFor_hash<<(0x7da+3488-0x156a)
<operator>.shiftLeft ReplacementFor_hash<<(0x6fd+6769-0x2168)
<operator>.subtraction 0x7da+3488-0x156a
<operator>.subtraction 0x6fd+6769-0x2168
<operator>.addition 0x7da+3488
<operator>.addition 0x6fd+6769
<operator>.indirectIndexAccess s[i]
<operator>.indirectIndexAccess s[i]
>>>PDG&25 0->2 0->6 0->7 0->8 0->9 0->11 0->12 0->13 0->14 0->17 0->18 0->19 0->20 0->21 0->22 2->1 2->6 2->14 2->15 2->16 3->1 3->1 3->1 3->7 3->18 4->1 4->1 4->1 4->11 5->1 6->1 6->1 6->6 6->10 6->11 6->14 6->14 6->15 6->15 6->16 6->16 6->17 6->18 6->19 6->20 6->21 6->22 6->23 6->24 7->5 8->1 8->3 8->3 9->1 9->4 9->4 10->1 10->1 10->1 10->7 10->18 11->1 11->1 14->1 14->10 14->10 15->1 15->1 16->1 17->1 17->14 17->14 17->15 17->15 18->1 18->14 18->14 18->15 18->15 18->16 18->16 18->17 19->1 19->17 19->17 20->1 20->18 20->18
>>>Token uint64_t ReplacementFor_sdbm ( const char * s ) { uint64_t ReplacementFor_hash = ( 0x453 + 4506 - 0x15ed ) ; size_t i = ( 0xbf1 + 620 - 0xe5d ) ; while ( s [ i ] != ' \0 ' ) { ReplacementFor_hash = s [ i ] + ( ReplacementFor_hash << ( 0x6fd + 6769 - 0x2168 ) ) + ( ReplacementFor_hash << ( 0x7da + 3488 - 0x156a ) ) - ReplacementFor_hash ; i ++ ; } return ReplacementFor_hash ; }
>>>Func
METHOD ReplacementFor_search
METHOD_RETURN int
PARAM char ReplacementFor_ans[]
PARAM char key
RETURN return(0x6d2+7617-0x2493); return(0x6d2+7617-0x2493);
<operator>.lessThan i<ReplacementFor_q
<operator>.postIncrement i++
<operator>.subtraction 0x6d2+7617-0x2493
<operator>.assignment i=\012(0x1144+2664-0x1bac)
<operator>.equals key==ReplacementFor_ans[i]
RETURN return\012(0x6aa+7830-0x253f); return\012(0x6aa+7830-0x253f);
<operator>.addition 0x6d2+7617
<operator>.subtraction 0x1144+2664-0x1bac
<operator>.subtraction 0x6aa+7830-0x253f
<operator>.addition 0x1144+2664
<operator>.addition 0x6aa+7830
<operator>.indirectIndexAccess ReplacementFor_ans[i]
>>>PDG&17 0->2 0->3 0->5 0->6 0->7 0->9 0->11 0->12 0->13 0->14 0->15 2->1 2->9 3->9 4->1 5->1 5->1 5->1 5->4 5->6 5->7 5->9 5->11 5->16 6->1 6->5 7->4 8->1 8->1 8->5 9->1 9->1 9->1 9->5 9->6 9->10 9->13 9->15 10->1 12->1 12->8 12->8 13->1 13->1 13->10
>>>Token int ReplacementFor_search ( char ReplacementFor_ans [ ] , char key ) { int i ; for ( i = ( 0x1144 + 2664 - 0x1bac ) ; i < ReplacementFor_q ; i ++ ) if ( key == ReplacementFor_ans [ i ] ) return ( 0x6aa + 7830 - 0x253f ) ; return ( 0x6d2 + 7617 - 0x2493 ) ; }
>>>Func
METHOD ReplacementFor_heap_remove_top
METHOD_RETURN void*
PARAM struct ReplacementFor_heap*\012ReplacementFor_heap
<operator>.assignment ReplacementFor_top=\012ReplacementFor_heap->array[(0xb4c+4184-0x1ba3)]
<operator>.assignment ReplacementFor_heap->array[\012(0xbf4+4219-0x1c6e)]=ReplacementFor_heap->array[ReplacementFor_heap->\012ReplacementFor_count--]
ReplacementFor_heapify_down ReplacementFor_heapify_down(ReplacementFor_heap->array \012ReplacementFor_heap->ReplacementFor_count (0x194f+2856-0x2476),\012ReplacementFor_heap->ReplacementFor_compare)
RETURN return ReplacementFor_top; return ReplacementFor_top;
<operator>.equals ReplacementFor_heap->\012ReplacementFor_count==(0xf06+3923-0x1e59)
IDENTIFIER ReplacementFor_top return ReplacementFor_top;
RETURN return NULL; return NULL;
<operator>.subtraction 0x194f+2856-0x2476
<operator>.subtraction 0xf06+3923-0x1e59
IDENTIFIER NULL return NULL;
<operator>.subtraction 0xb4c+4184-0x1ba3
<operator>.subtraction 0xbf4+4219-0x1c6e
<operator>.postDecrement ReplacementFor_heap->\012ReplacementFor_count--
<operator>.addition 0x194f+2856
<operator>.addition 0xf06+3923
<operator>.addition 0xb4c+4184
<operator>.addition 0xbf4+4219
<operator>.indirectIndexAccess ReplacementFor_heap->array[(0xb4c+4184-0x1ba3)]
<operator>.indirectIndexAccess ReplacementFor_heap->array[\012(0xbf4+4219-0x1c6e)]
<operator>.indirectIndexAccess ReplacementFor_heap->array[ReplacementFor_heap->\012ReplacementFor_count--]
<operator>.indirectFieldAccess ReplacementFor_heap->array
<operator>.indirectFieldAccess ReplacementFor_heap->ReplacementFor_count
<operator>.indirectFieldAccess ReplacementFor_heap->ReplacementFor_compare
<operator>.indirectFieldAccess ReplacementFor_heap->array
<operator>.indirectFieldAccess ReplacementFor_heap->array
<operator>.indirectFieldAccess ReplacementFor_heap->array
FIELD_IDENTIFIER array array
FIELD_IDENTIFIER ReplacementFor_count ReplacementFor_count
FIELD_IDENTIFIER ReplacementFor_compare ReplacementFor_compare
FIELD_IDENTIFIER array array
FIELD_IDENTIFIER array array
FIELD_IDENTIFIER array array
<operator>.indirectFieldAccess ReplacementFor_heap->\012ReplacementFor_count
FIELD_IDENTIFIER ReplacementFor_count ReplacementFor_count
>>>PDG&37 0->2 0->8 0->9 0->10 0->11 0->12 0->13 0->14 0->16 0->17 0->18 0->19 2->1 3->8 4->5 6->1 7->1 7->1 7->1 7->3 7->4 7->5 7->6 7->9 7->10 7->13 7->14 7->15 7->15 7->16 7->18 7->19 7->20 7->21 7->22 7->23 7->24 7->25 7->26 7->27 7->28 7->29 7->30 7->31 7->32 7->33 7->34 7->35 7->36 8->6 9->1 10->5 10->5 11->1 11->7 11->7 12->9 15->5
>>>Token void * ReplacementFor_heap_remove_top ( struct ReplacementFor_heap * ReplacementFor_heap ) { void * ReplacementFor_top ; if ( ReplacementFor_heap -> ReplacementFor_count == ( 0xf06 + 3923 - 0x1e59 ) ) return NULL ; ReplacementFor_top = ReplacementFor_heap -> array [ ( 0xb4c + 4184 - 0x1ba3 ) ] ; ReplacementFor_heap -> array [ ( 0xbf4 + 4219 - 0x1c6e ) ] = ReplacementFor_heap -> array [ ReplacementFor_heap -> ReplacementFor_count -- ] ; ReplacementFor_heapify_down ( ReplacementFor_heap -> array , ReplacementFor_heap -> ReplacementFor_count , ( 0x194f + 2856 - 0x2476 ) , ReplacementFor_heap -> ReplacementFor_compare ) ; return ReplacementFor_top ; }
>>>Func
METHOD main
METHOD_RETURN int
PARAM void
scanf scanf("\x25\x64",&ReplacementFor_n)
RETURN return(0x128f+3142-0x1ed5); return(0x128f+3142-0x1ed5);
<operator>.lessThan i<ReplacementFor_n
<operator>.postIncrement i++
ReplacementFor_solve ReplacementFor_solve(i+\012(0x145+7381-0x1e19))
<operator>.subtraction 0x128f+3142-0x1ed5
<operator>.assignment i=\012(0x2042+1433-0x25db)
<operator>.addition i+\012(0x145+7381-0x1e19)
<operator>.addition 0x128f+3142
<operator>.subtraction 0x2042+1433-0x25db
<operator>.subtraction 0x145+7381-0x1e19
<operator>.addition 0x2042+1433
<operator>.addition 0x145+7381
>>>PDG&16 0->2 0->3 0->5 0->6 0->7 0->8 0->10 0->11 0->12 0->13 0->14 0->15 2->1 3->1 3->5 4->1 5->1 5->1 5->1 5->5 5->6 5->6 5->7 5->7 5->10 5->10 5->13 5->15 6->1 6->5 7->1 7->1 8->1 8->1 8->4 9->1 9->1 9->5 10->1 12->1 12->9 12->9 13->1 13->7 13->7 13->10 13->10
>>>Token int main ( void ) { int i , ReplacementFor_n ; scanf ( " \x25 \x64 " , & ReplacementFor_n ) ; for ( i = ( 0x2042 + 1433 - 0x25db ) ; i < ReplacementFor_n ; i ++ ) ReplacementFor_solve ( i + ( 0x145 + 7381 - 0x1e19 ) ) ; return ( 0x128f + 3142 - 0x1ed5 ) ; }
>>>Func
METHOD main
METHOD_RETURN int
<operator>.greaterThan printf<ReplacementFor_missing\012((char)(0xd72+1795-0x143a))>(\012"\n" "\x20\x65\x6e\x74\x65\x72\x20\x6e\x75\x6d\x62\x65\x72\x20\x6f\x66\x20\x74\x65\x73\x74\x20\x63\x61\x73\x65\x73\x20"\012)
RETURN return(0x4cb+4916-0x17ff); return(0x4cb+4916-0x17ff);
<operator>.lessThan ReplacementFor_k<ReplacementFor_n_of_test_cases
<operator>.postIncrement ReplacementFor_k++
<operator>.subtraction 0x4cb+4916-0x17ff
<operator>.lessThan printf<ReplacementFor_missing\012((char)(0xd72+1795-0x143a))
<operator>.assignment ReplacementFor_k=\012(0xcaa+1114-0x1104)
memset memset(ReplacementFor_convert_array (0x1463+3708-0x22df) \012(0x15f2+3585-0x23d9)*(0x1b63+1887-0x22a8)*sizeof(int))
memset memset(\012ReplacementFor_destroy_array (0xca+1464-0x682) (0x19c5+3148-0x25f7)*\012(0x321+2955-0xe92)*sizeof(int))
memset memset(ReplacementFor_is_present \012(0x17b+4992-0x14fb) (0x116+7798-0x1f72)*sizeof(int))
<operator>.greaterThan printf<ReplacementFor_missing\012((char)(0x617+8251-0x2617))>(\012"\n" "\x20\x45\x6e\x74\x65\x72\x20\x74\x68\x65\x20\x6e\x75\x6d\x62\x65\x72\x20\x6f\x66\x20\x63\x6f\x6d\x62\x69\x6e\x67\x20\x73\x74\x72\x69\x6e\x67\x73\x20\x66\x6f\x6c\x6c\x6f\x77\x65\x64\x20\x62\x79\x20\x73\x74\x72\x69\x6e\x67\x73"\012)
<operator>.greaterThan printf<ReplacementFor_missing\012((char)(0x1728+283-0x1808))>(\012"\n" "\x20\x65\x6e\x74\x65\x72\x20\x74\x68\x65\x20\x6e\x75\x6d\x62\x65\x72\x20\x6f\x66\x20\x64\x65\x73\x74\x72\x6f\x79\x69\x6e\x67\x20\x73\x74\x72\x69\x6e\x67\x73\x20"\012)
<operator>.greaterThan printf<ReplacementFor_missing\012((char)(0x1b18+648-0x1d65))>(\012"\n" "\x20\x45\x6e\x74\x65\x72\x20\x74\x68\x65\x20\x73\x74\x72\x69\x6e\x67\x20\x6c\x65\x6e\x67\x74\x68\x20\x66\x6f\x6c\x6c\x6f\x77\x65\x64\x20\x62\x79\x20\x73\x74\x72\x69\x6e\x67\x20"\012)
scanf scanf("\x20\x25\x73",ReplacementFor_string_call)
<operator>.assignment ReplacementFor_is_present[ReplacementFor_string_call[(0x9aa+269-0xab7)]-\012((char)(0x5ff+7706-0x23d8))]=(0x12a+6713-0x1b62)
<operator>.assignment ReplacementFor_final_string[\012(0x1ff4+884-0x2368)]=ReplacementFor_string_call[(0x1a49+2619-0x2484)]
<operator>.assignment ReplacementFor_final_string_index=(0xcd+3458-0xe4f)
<operator>.assignment ReplacementFor_final_string[++ReplacementFor_final_string_index]='\0'
<operator>.greaterThan printf<ReplacementFor_missing\012((char)(0x500+6179-0x1ce8))>(\012"\n" "\x20\x74\x68\x65\x20\x66\x69\x6e\x61\x6c\x20\x73\x74\x72\x69\x6e\x67\x20\x69\x73\x20\x25\x73\x20"\012,ReplacementFor_final_string)
printf printf("\x5d" "\n")
IDENTIFIER ReplacementFor_ndif <empty>
ReplacementFor_missing ReplacementFor_missing\012((char)(0xd72+1795-0x143a))
<operator>.lessThan i<ReplacementFor_C
<operator>.postIncrement i++
<operator>.lessThan i<ReplacementFor_D
<operator>.postIncrement i++
<operator>.lessThan i<\012ReplacementFor_N
<operator>.postIncrement i++
<operator>.lessThan l<\012ReplacementFor_final_string_index
<operator>.postIncrement l++
<operator>.addition 0x4cb+4916
<operator>.cast (char)(0xd72+1795-0x143a)
<operator>.subtraction 0xcaa+1114-0x1104
<operator>.subtraction 0x1463+3708-0x22df
<operator>.multiplication (0x15f2+3585-0x23d9)*(0x1b63+1887-0x22a8)*sizeof(int)
<operator>.subtraction 0xca+1464-0x682
<operator>.multiplication (0x19c5+3148-0x25f7)*\012(0x321+2955-0xe92)*sizeof(int)
<operator>.subtraction 0x17b+4992-0x14fb
<operator>.multiplication (0x116+7798-0x1f72)*sizeof(int)
<operator>.lessThan printf<ReplacementFor_missing\012((char)(0x617+8251-0x2617))
<operator>.assignment i=(0x9ab+4002-0x194d)
scanf scanf("\x20\x25\x73",ReplacementFor_temp_string)
<operator>.assignment ReplacementFor_convert_array[\012ReplacementFor_temp_string[(0x9e2+6797-0x246f)]-((char)(0x1086+3819-0x1f30))][\012ReplacementFor_temp_string[(0x1a2d+2715-0x24c7)]-((char)(0xe78+5120-0x2237))]=\012ReplacementFor_convert_array[ReplacementFor_temp_string[(0xf82+550-0x11a7)]-\012((char)(0x210a+248-0x21c1))][ReplacementFor_temp_string[(0xd92+719-0x1061)]-\012((char)(0x158d+2019-0x1d2f))]=ReplacementFor_temp_string[(0x13e8+3795-0x22b9)]
<operator>.lessThan printf<ReplacementFor_missing\012((char)(0x1728+283-0x1808))
<operator>.assignment i=(0x14ba+3662-0x2308)
scanf scanf("\x20\x25\x73",ReplacementFor_temp_string)
<operator>.assignment ReplacementFor_destroy_array[\012ReplacementFor_temp_string[(0x60+8218-0x207a)]-((char)(0x185f+2008-0x1ff6))][\012ReplacementFor_temp_string[(0x861+1764-0xf44)]-((char)(0x1da6+795-0x2080))]=\012ReplacementFor_destroy_array[ReplacementFor_temp_string[(0x1062+3408-0x1db1)]-\012((char)(0x11fc+2799-0x1caa))][ReplacementFor_temp_string[(0x7af+6204-0x1feb)]-\012((char)(0x1555+2218-0x1dbe))]=(0x2a6+503-0x49c)
<operator>.lessThan printf<ReplacementFor_missing\012((char)(0x1b18+648-0x1d65))
<operator>.subtraction 0x12a+6713-0x1b62
<operator>.subtraction 0xcd+3458-0xe4f
<operator>.assignment i=(0x142b+260-0x152e)
<operator>.assignment ReplacementFor_flag=(0x89c+540-0xab8)
<operator>.assignment ReplacementFor_ch=\012ReplacementFor_string_call[i]
<operator>.lessThan printf<ReplacementFor_missing\012((char)(0x500+6179-0x1ce8))
<operator>.bracketedPrimary (\012"\n" "\x20\x74\x68\x65\x20\x66\x69\x6e\x61\x6c\x20\x73\x74\x72\x69\x6e\x67\x20\x69\x73\x20\x25\x73\x20"\012,ReplacementFor_final_string)
<operator>.assignment l=(0x1c93+418-0x1e35)
<operator>.subtraction 0xd72+1795-0x143a
<operator>.addition 0xcaa+1114
<operator>.addition 0x1463+3708
<operator>.multiplication (0x15f2+3585-0x23d9)*(0x1b63+1887-0x22a8)
<operator>.addition 0xca+1464
<operator>.multiplication (0x19c5+3148-0x25f7)*\012(0x321+2955-0xe92)
<operator>.addition 0x17b+4992
<operator>.subtraction 0x116+7798-0x1f72
<operator>.sizeOf sizeof(int)
ReplacementFor_missing ReplacementFor_missing\012((char)(0x617+8251-0x2617))
ReplacementFor_missing ReplacementFor_missing\012((char)(0x1728+283-0x1808))
ReplacementFor_missing ReplacementFor_missing\012((char)(0x1b18+648-0x1d65))
<operator>.subtraction ReplacementFor_string_call[(0x9aa+269-0xab7)]-\012((char)(0x5ff+7706-0x23d8))
<operator>.addition 0x12a+6713
<operator>.subtraction 0x1ff4+884-0x2368
<operator>.subtraction 0x1a49+2619-0x2484
<operator>.addition 0xcd+3458
<operator>.notEquals ReplacementFor_final_string_index!=-\012(0x1005+4674-0x2246)
<operator>.preIncrement ++ReplacementFor_final_string_index
ReplacementFor_missing ReplacementFor_missing\012((char)(0x500+6179-0x1ce8))
<operator>.expressionList "\n" "\x20\x74\x68\x65\x20\x66\x69\x6e\x61\x6c\x20\x73\x74\x72\x69\x6e\x67\x20\x69\x73\x20\x25\x73\x20"\012 ReplacementFor_final_string
<operator>.notEquals l!=ReplacementFor_final_string_index-\012(0x5e2+5494-0x1b57)
<operator>.addition 0xd72+1795
<operator>.subtraction 0x15f2+3585-0x23d9
<operator>.subtraction 0x1b63+1887-0x22a8
<operator>.subtraction 0x19c5+3148-0x25f7
<operator>.subtraction 0x321+2955-0xe92
<operator>.addition 0x116+7798
<operator>.cast (char)(0x617+8251-0x2617)
<operator>.subtraction 0x9ab+4002-0x194d
<operator>.assignment ReplacementFor_convert_array[ReplacementFor_temp_string[(0xf82+550-0x11a7)]-\012((char)(0x210a+248-0x21c1))][ReplacementFor_temp_string[(0xd92+719-0x1061)]-\012((char)(0x158d+2019-0x1d2f))]=ReplacementFor_temp_string[(0x13e8+3795-0x22b9)]
<operator>.cast (char)(0x1728+283-0x1808)
<operator>.subtraction 0x14ba+3662-0x2308
<operator>.assignment ReplacementFor_destroy_array[ReplacementFor_temp_string[(0x1062+3408-0x1db1)]-\012((char)(0x11fc+2799-0x1caa))][ReplacementFor_temp_string[(0x7af+6204-0x1feb)]-\012((char)(0x1555+2218-0x1dbe))]=(0x2a6+503-0x49c)
<operator>.cast (char)(0x1b18+648-0x1d65)
<operator>.cast (char)(0x5ff+7706-0x23d8)
<operator>.addition 0x1ff4+884
<operator>.addition 0x1a49+2619
<operator>.subtraction 0x142b+260-0x152e
<operator>.subtraction 0x89c+540-0xab8
<operator>.cast (char)(0x500+6179-0x1ce8)
<operator>.subtraction 0x1c93+418-0x1e35
printf printf("\x25\x63\x2c\x20",ReplacementFor_final_string[l])
<operator>.addition 0x15f2+3585
<operator>.addition 0x1b63+1887
<operator>.addition 0x19c5+3148
<operator>.addition 0x321+2955
<operator>.subtraction 0x617+8251-0x2617
<operator>.addition 0x9ab+4002
<operator>.subtraction ReplacementFor_temp_string[(0x1a2d+2715-0x24c7)]-((char)(0xe78+5120-0x2237))
<operator>.subtraction 0x1728+283-0x1808
<operator>.addition 0x14ba+3662
<operator>.subtraction ReplacementFor_temp_string[(0x861+1764-0xf44)]-((char)(0x1da6+795-0x2080))
<operator>.subtraction 0x2a6+503-0x49c
<operator>.subtraction 0x1b18+648-0x1d65
<operator>.subtraction 0x9aa+269-0xab7
<operator>.subtraction 0x5ff+7706-0x23d8
<operator>.addition 0x142b+260
<operator>.addition 0x89c+540
<operator>.minus -\012(0x1005+4674-0x2246)
<operator>.notEquals (ReplacementFor_temp_ch=ReplacementFor_convert_array[\012ReplacementFor_ch-((char)(0x938+4377-0x1a10))][ReplacementFor_final_string[\012ReplacementFor_final_string_index]-((char)(0x16f1+2466-0x2052))])!=\012(0x507+6828-0x1fb3)
<operator>.logicalNot !ReplacementFor_flag
<operator>.assignment ReplacementFor_final_string[++ReplacementFor_final_string_index]=\012ReplacementFor_ch
<operator>.postIncrement ReplacementFor_is_present[ReplacementFor_final_string[\012ReplacementFor_final_string_index]-((char)(0x1fd0+396-0x211b))]++
<operator>.subtraction 0x500+6179-0x1ce8
<operator>.addition 0x1c93+418
<operator>.subtraction ReplacementFor_final_string_index-\012(0x5e2+5494-0x1b57)
printf printf("\x25\x63",ReplacementFor_final_string[l])
<operator>.addition 0x617+8251
<operator>.subtraction ReplacementFor_temp_string[(0x9e2+6797-0x246f)]-((char)(0x1086+3819-0x1f30))
<operator>.cast (char)(0xe78+5120-0x2237)
<operator>.subtraction ReplacementFor_temp_string[(0xd92+719-0x1061)]-\012((char)(0x158d+2019-0x1d2f))
<operator>.subtraction 0x13e8+3795-0x22b9
<operator>.addition 0x1728+283
<operator>.subtraction ReplacementFor_temp_string[(0x60+8218-0x207a)]-((char)(0x185f+2008-0x1ff6))
<operator>.cast (char)(0x1da6+795-0x2080)
<operator>.subtraction ReplacementFor_temp_string[(0x7af+6204-0x1feb)]-\012((char)(0x1555+2218-0x1dbe))
<operator>.addition 0x2a6+503
<operator>.addition 0x1b18+648
<operator>.addition 0x9aa+269
<operator>.addition 0x5ff+7706
<operator>.subtraction 0x1005+4674-0x2246
<operator>.postDecrement ReplacementFor_is_present[ReplacementFor_final_string[\012ReplacementFor_final_string_index]-((char)(0xb1b+5124-0x1ede))]--
<operator>.assignment ReplacementFor_final_string[ReplacementFor_final_string_index]=\012ReplacementFor_temp_ch
<operator>.postIncrement ReplacementFor_is_present[ReplacementFor_final_string[\012ReplacementFor_final_string_index]-((char)(0x7cd+6832-0x223c))]++
<operator>.assignment ReplacementFor_flag=(0x12c+8221-0x2148)
<operator>.assignment ReplacementFor_final_string[++ReplacementFor_final_string_index]=\012ReplacementFor_ch
<operator>.postIncrement ReplacementFor_is_present[ReplacementFor_final_string[\012ReplacementFor_final_string_index]-((char)(0x1f8+5145-0x15d0))]++
<operator>.addition 0x500+6179
<operator>.subtraction 0x5e2+5494-0x1b57
<operator>.cast (char)(0x1086+3819-0x1f30)
<operator>.subtraction 0x1a2d+2715-0x24c7
<operator>.subtraction 0xe78+5120-0x2237
<operator>.subtraction ReplacementFor_temp_string[(0xf82+550-0x11a7)]-\012((char)(0x210a+248-0x21c1))
<operator>.cast (char)(0x158d+2019-0x1d2f)
<operator>.addition 0x13e8+3795
<operator>.cast (char)(0x185f+2008-0x1ff6)
<operator>.subtraction 0x861+1764-0xf44
<operator>.subtraction 0x1da6+795-0x2080
<operator>.subtraction ReplacementFor_temp_string[(0x1062+3408-0x1db1)]-\012((char)(0x11fc+2799-0x1caa))
<operator>.cast (char)(0x1555+2218-0x1dbe)
<operator>.addition 0x1005+4674
<operator>.assignment ReplacementFor_temp_ch=ReplacementFor_convert_array[\012ReplacementFor_ch-((char)(0x938+4377-0x1a10))][ReplacementFor_final_string[\012ReplacementFor_final_string_index]-((char)(0x16f1+2466-0x2052))]
<operator>.subtraction 0x507+6828-0x1fb3
<operator>.addition 0x5e2+5494
<operator>.subtraction 0x9e2+6797-0x246f
<operator>.subtraction 0x1086+3819-0x1f30
<operator>.addition 0x1a2d+2715
<operator>.addition 0xe78+5120
<operator>.cast (char)(0x210a+248-0x21c1)
<operator>.subtraction 0xd92+719-0x1061
<operator>.subtraction 0x158d+2019-0x1d2f
<operator>.subtraction 0x60+8218-0x207a
<operator>.subtraction 0x185f+2008-0x1ff6
<operator>.addition 0x861+1764
<operator>.addition 0x1da6+795
<operator>.cast (char)(0x11fc+2799-0x1caa)
<operator>.subtraction 0x7af+6204-0x1feb
<operator>.subtraction 0x1555+2218-0x1dbe
<operator>.addition 0x507+6828
<operator>.subtraction 0x12c+8221-0x2148
<operator>.lessThan ReplacementFor_j<(0x96+6752-0x1adc)
<operator>.postIncrement ReplacementFor_j++
<operator>.preIncrement ++ReplacementFor_final_string_index
<operator>.subtraction ReplacementFor_final_string[\012ReplacementFor_final_string_index]-((char)(0x1fd0+396-0x211b))
<operator>.addition 0x9e2+6797
<operator>.addition 0x1086+3819
<operator>.subtraction 0xf82+550-0x11a7
<operator>.subtraction 0x210a+248-0x21c1
<operator>.addition 0xd92+719
<operator>.addition 0x158d+2019
<operator>.addition 0x60+8218
<operator>.addition 0x185f+2008
<operator>.subtraction 0x1062+3408-0x1db1
<operator>.subtraction 0x11fc+2799-0x1caa
<operator>.addition 0x7af+6204
<operator>.addition 0x1555+2218
<operator>.subtraction ReplacementFor_final_string[\012ReplacementFor_final_string_index]-((char)(0x16f1+2466-0x2052))
<operator>.subtraction ReplacementFor_final_string[\012ReplacementFor_final_string_index]-((char)(0xb1b+5124-0x1ede))
<operator>.subtraction ReplacementFor_final_string[\012ReplacementFor_final_string_index]-((char)(0x7cd+6832-0x223c))
<operator>.addition 0x12c+8221
<operator>.assignment ReplacementFor_j=\012(0x1021+4863-0x2320)
<operator>.preIncrement ++ReplacementFor_final_string_index
<operator>.subtraction ReplacementFor_final_string[\012ReplacementFor_final_string_index]-((char)(0x1f8+5145-0x15d0))
<operator>.cast (char)(0x1fd0+396-0x211b)
<operator>.addition 0xf82+550
<operator>.addition 0x210a+248
<operator>.addition 0x1062+3408
<operator>.addition 0x11fc+2799
<operator>.subtraction ReplacementFor_ch-((char)(0x938+4377-0x1a10))
<operator>.cast (char)(0x16f1+2466-0x2052)
<operator>.cast (char)(0xb1b+5124-0x1ede)
<operator>.cast (char)(0x7cd+6832-0x223c)
<operator>.subtraction 0x96+6752-0x1adc
<operator>.logicalAnd ReplacementFor_is_present[ReplacementFor_j]&&ReplacementFor_destroy_array[\012ReplacementFor_ch-((char)(0x1188+1219-0x160a))][ReplacementFor_j]
<operator>.cast (char)(0x1f8+5145-0x15d0)
<operator>.subtraction 0x1fd0+396-0x211b
<operator>.cast (char)(0x938+4377-0x1a10)
<operator>.subtraction 0x16f1+2466-0x2052
<operator>.subtraction 0xb1b+5124-0x1ede
<operator>.subtraction 0x7cd+6832-0x223c
<operator>.subtraction 0x1021+4863-0x2320
<operator>.addition 0x96+6752
<operator>.assignment ReplacementFor_final_string_index=-(0x706+6423-0x201c)
memset memset(\012ReplacementFor_is_present (0x5fc+7744-0x243c) (0x1662+2389-0x1f9d)*sizeof(int))
<operator>.assignment ReplacementFor_flag=(0x1727+3209-0x23af)
<operator>.subtraction 0x1f8+5145-0x15d0
<operator>.addition 0x1fd0+396
<operator>.subtraction 0x938+4377-0x1a10
<operator>.addition 0x16f1+2466
<operator>.addition 0xb1b+5124
<operator>.addition 0x7cd+6832
<operator>.addition 0x1021+4863
<operator>.addition 0x1f8+5145
<operator>.addition 0x938+4377
<operator>.minus -(0x706+6423-0x201c)
<operator>.subtraction 0x5fc+7744-0x243c
<operator>.multiplication (0x1662+2389-0x1f9d)*sizeof(int)
<operator>.subtraction 0x1727+3209-0x23af
<operator>.subtraction ReplacementFor_ch-((char)(0x1188+1219-0x160a))
<operator>.subtraction 0x706+6423-0x201c
<operator>.addition 0x5fc+7744
<operator>.subtraction 0x1662+2389-0x1f9d
<operator>.sizeOf sizeof(int)
<operator>.addition 0x1727+3209
<operator>.cast (char)(0x1188+1219-0x160a)
<operator>.addition 0x706+6423
<operator>.addition 0x1662+2389
<operator>.subtraction 0x1188+1219-0x160a
<operator>.addition 0x1188+1219
UNKNOWN _ _
UNKNOWN f f
UNKNOWN <ReplacementFor_missing((char)(0x2195+687-0x2409))>(\012"\x25\x64",&ReplacementFor_C); <ReplacementFor_missing((char)(0x2195+687-0x2409))>(\012"\x25\x64",&ReplacementFor_C);
UNKNOWN _ _
UNKNOWN f f
UNKNOWN <ReplacementFor_missing((char)(0x1684+2179-0x1ecc))>(\012"\x25\x64",&ReplacementFor_D); <ReplacementFor_missing((char)(0x1684+2179-0x1ecc))>(\012"\x25\x64",&ReplacementFor_D);
UNKNOWN _ _
UNKNOWN f f
UNKNOWN <ReplacementFor_missing((char)(0x153c+2013-0x1cde))>(\012"\x25\x64",&ReplacementFor_N); <ReplacementFor_missing((char)(0x153c+2013-0x1cde))>(\012"\x25\x64",&ReplacementFor_N);
UNKNOWN _ _
UNKNOWN f f
UNKNOWN <ReplacementFor_missing\012((char)(0xbf8+1335-0x10f4))>("\x43\x61\x73\x65\x20\x23\x25\x64\x3a\x20\x5b" \012ReplacementFor_k+(0x5bf+564-0x7f2)); <ReplacementFor_missing\012((char)(0xbf8+1335-0x10f4))>("\x43\x61\x73\x65\x20\x23\x25\x64\x3a\x20\x5b" \012ReplacementFor_k+(0x5bf+564-0x7f2));
UNKNOWN f f
<operator>.indirectIndexAccess ReplacementFor_is_present[ReplacementFor_string_call[(0x9aa+269-0xab7)]-\012((char)(0x5ff+7706-0x23d8))]
<operator>.indirectIndexAccess ReplacementFor_final_string[\012(0x1ff4+884-0x2368)]
<operator>.indirectIndexAccess ReplacementFor_string_call[(0x1a49+2619-0x2484)]
<operator>.indirectIndexAccess ReplacementFor_final_string[++ReplacementFor_final_string_index]
<operator>.sizeOf sizeof(int)
<operator>.sizeOf sizeof(int)
<operator>.indirectIndexAccess ReplacementFor_convert_array[\012ReplacementFor_temp_string[(0x9e2+6797-0x246f)]-((char)(0x1086+3819-0x1f30))][\012ReplacementFor_temp_string[(0x1a2d+2715-0x24c7)]-((char)(0xe78+5120-0x2237))]
<operator>.indirectIndexAccess ReplacementFor_destroy_array[\012ReplacementFor_temp_string[(0x60+8218-0x207a)]-((char)(0x185f+2008-0x1ff6))][\012ReplacementFor_temp_string[(0x861+1764-0xf44)]-((char)(0x1da6+795-0x2080))]
<operator>.indirectIndexAccess ReplacementFor_string_call[(0x9aa+269-0xab7)]
<operator>.indirectIndexAccess ReplacementFor_string_call[i]
UNKNOWN char char
<operator>.indirectIndexAccess ReplacementFor_convert_array[\012ReplacementFor_temp_string[(0x9e2+6797-0x246f)]-((char)(0x1086+3819-0x1f30))]
<operator>.indirectIndexAccess ReplacementFor_convert_array[ReplacementFor_temp_string[(0xf82+550-0x11a7)]-\012((char)(0x210a+248-0x21c1))][ReplacementFor_temp_string[(0xd92+719-0x1061)]-\012((char)(0x158d+2019-0x1d2f))]
<operator>.indirectIndexAccess ReplacementFor_temp_string[(0x13e8+3795-0x22b9)]
UNKNOWN char char
<operator>.indirectIndexAccess ReplacementFor_destroy_array[\012ReplacementFor_temp_string[(0x60+8218-0x207a)]-((char)(0x185f+2008-0x1ff6))]
<operator>.indirectIndexAccess ReplacementFor_destroy_array[ReplacementFor_temp_string[(0x1062+3408-0x1db1)]-\012((char)(0x11fc+2799-0x1caa))][ReplacementFor_temp_string[(0x7af+6204-0x1feb)]-\012((char)(0x1555+2218-0x1dbe))]
UNKNOWN char char
UNKNOWN char char
UNKNOWN char char
<operator>.indirectIndexAccess ReplacementFor_temp_string[(0x1a2d+2715-0x24c7)]
<operator>.indirectIndexAccess ReplacementFor_convert_array[ReplacementFor_temp_string[(0xf82+550-0x11a7)]-\012((char)(0x210a+248-0x21c1))]
<operator>.indirectIndexAccess ReplacementFor_temp_string[(0x861+1764-0xf44)]
<operator>.indirectIndexAccess ReplacementFor_destroy_array[ReplacementFor_temp_string[(0x1062+3408-0x1db1)]-\012((char)(0x11fc+2799-0x1caa))]
<operator>.indirectIndexAccess ReplacementFor_final_string[l]
<operator>.indirectIndexAccess ReplacementFor_temp_string[(0x9e2+6797-0x246f)]
UNKNOWN char char
<operator>.indirectIndexAccess ReplacementFor_temp_string[(0xd92+719-0x1061)]
<operator>.indirectIndexAccess ReplacementFor_temp_string[(0x60+8218-0x207a)]
UNKNOWN char char
<operator>.indirectIndexAccess ReplacementFor_temp_string[(0x7af+6204-0x1feb)]
<operator>.indirectIndexAccess ReplacementFor_final_string[++ReplacementFor_final_string_index]
<operator>.indirectIndexAccess ReplacementFor_is_present[ReplacementFor_final_string[\012ReplacementFor_final_string_index]-((char)(0x1fd0+396-0x211b))]
<operator>.indirectIndexAccess ReplacementFor_final_string[l]
UNKNOWN char char
<operator>.indirectIndexAccess ReplacementFor_temp_string[(0xf82+550-0x11a7)]
UNKNOWN char char
UNKNOWN char char
<operator>.indirectIndexAccess ReplacementFor_temp_string[(0x1062+3408-0x1db1)]
UNKNOWN char char
<operator>.indirectIndexAccess ReplacementFor_convert_array[\012ReplacementFor_ch-((char)(0x938+4377-0x1a10))][ReplacementFor_final_string[\012ReplacementFor_final_string_index]-((char)(0x16f1+2466-0x2052))]
<operator>.indirectIndexAccess ReplacementFor_is_present[ReplacementFor_final_string[\012ReplacementFor_final_string_index]-((char)(0xb1b+5124-0x1ede))]
<operator>.indirectIndexAccess ReplacementFor_final_string[ReplacementFor_final_string_index]
<operator>.indirectIndexAccess ReplacementFor_is_present[ReplacementFor_final_string[\012ReplacementFor_final_string_index]-((char)(0x7cd+6832-0x223c))]
<operator>.indirectIndexAccess ReplacementFor_final_string[++ReplacementFor_final_string_index]
<operator>.indirectIndexAccess ReplacementFor_is_present[ReplacementFor_final_string[\012ReplacementFor_final_string_index]-((char)(0x1f8+5145-0x15d0))]
UNKNOWN char char
UNKNOWN char char
<operator>.indirectIndexAccess ReplacementFor_convert_array[\012ReplacementFor_ch-((char)(0x938+4377-0x1a10))]
<operator>.indirectIndexAccess ReplacementFor_final_string[\012ReplacementFor_final_string_index]
<operator>.indirectIndexAccess ReplacementFor_final_string[\012ReplacementFor_final_string_index]
<operator>.indirectIndexAccess ReplacementFor_final_string[\012ReplacementFor_final_string_index]
<operator>.indirectIndexAccess ReplacementFor_final_string[\012ReplacementFor_final_string_index]
<operator>.indirectIndexAccess ReplacementFor_final_string[\012ReplacementFor_final_string_index]
UNKNOWN char char
UNKNOWN char char
UNKNOWN char char
UNKNOWN char char
UNKNOWN char char
UNKNOWN char char
<operator>.indirectIndexAccess ReplacementFor_is_present[ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_destroy_array[\012ReplacementFor_ch-((char)(0x1188+1219-0x160a))][ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_destroy_array[\012ReplacementFor_ch-((char)(0x1188+1219-0x160a))]
UNKNOWN char char
>>>PDG&325 0->2 0->4 0->5 0->6 0->7 0->9 0->10 0->11 0->12 0->13 0->14 0->15 0->19 0->21 0->22 0->24 0->25 0->26 0->27 0->28 0->29 0->30 0->31 0->32 0->34 0->35 0->37 0->39 0->41 0->43 0->45 0->47 0->49 0->50 0->51 0->55 0->58 0->59 0->60 0->62 0->64 0->65 0->71 0->72 0->73 0->74 0->75 0->76 0->78 0->79 0->80 0->81 0->82 0->83 0->84 0->85 0->87 0->90 0->94 0->95 0->96 0->97 0->99 0->100 0->101 0->102 0->103 0->104 0->105 0->106 0->108 0->109 0->111 0->112 0->113 0->114 0->115 0->116 0->119 0->120 0->122 0->123 0->124 0->125 0->126 0->130 0->131 0->135 0->136 0->137 0->138 0->139 0->141 0->144 0->146 0->147 0->149 0->150 0->153 0->155 0->156 0->159 0->161 0->162 0->163 0->164 0->165 0->166 0->168 0->169 0->170 0->171 0->172 0->173 0->175 0->176 0->177 0->178 0->179 0->180 0->181 0->183 0->184 0->185 0->186 0->187 0->188 0->189 0->190 0->191 0->192 0->193 0->194 0->198 0->200 0->203 0->204 0->205 0->206 0->207 0->211 0->214 0->216 0->217 0->218 0->219 0->220 0->222 0->224 0->225 0->226 0->227 0->228 0->229 0->230 0->231 0->232 0->234 0->236 0->237 0->238 0->239 0->240 0->242 0->244 0->245 0->246 0->247 2->1 2->1 3->1 4->1 4->1 4->1 4->4 4->5 4->5 4->9 4->10 4->11 4->12 4->13 4->14 4->15 4->16 4->17 4->18 4->19 4->20 4->21 4->24 4->26 4->28 4->30 4->35 4->36 4->37 4->38 4->39 4->40 4->41 4->42 4->45 4->46 4->49 4->50 4->51 4->52 4->55 4->56 4->57 4->60 4->61 4->62 4->63 4->64 4->65 4->66 4->67 4->68 4->69 4->70 4->71 4->72 4->73 4->74 4->76 4->77 4->78 4->81 4->82 4->83 4->84 4->85 4->86 4->87 4->89 4->90 4->92 4->93 4->94 4->95 4->96 4->98 4->99 4->101 4->102 4->103 4->104 4->105 4->106 4->108 4->109 4->112 4->113 4->114 4->115 4->122 4->123 4->126 4->131 4->136 4->137 4->138 4->146 4->248 4->249 4->250 4->251 4->252 4->253 4->254 4->255 4->256 4->257 4->258 4->259 4->260 4->261 4->262 4->263 4->264 4->265 4->266 4->269 4->271 4->275 4->278 4->279 4->280 5->1 5->4 6->1 6->1 6->3 7->1 7->1 7->2 7->2 7->41 8->1 8->1 8->4 9->1 9->1 9->1 9->1 10->1 10->1 10->1 10->1 11->1 11->1 11->1 11->1 11->121 11->140 11->142 11->145 11->212 11->222 12->1 12->1 13->1 13->1 14->1 14->1 15->1 15->17 15->54 15->70 16->1 16->1 16->1 16->11 16->222 17->1 17->1 17->1 17->78 18->1 18->1 18->75 18->76 19->1 19->1 19->78 20->1 20->1 20->1 21->1 23->1 23->7 24->1 24->1 24->24 24->25 24->25 24->43 24->44 24->88 24->107 24->127 24->128 24->129 24->130 24->148 24->149 24->150 24->151 24->152 24->153 24->163 24->164 24->165 24->166 24->167 24->168 24->169 24->183 24->184 24->185 24->186 24->187 24->188 24->203 24->204 24->267 24->272 24->273 24->274 24->281 24->282 24->286 24->287 24->288 24->295 24->296 24->297 24->307 25->1 25->24 26->1 26->1 26->26 26->27 26->27 26->47 26->48 26->91 26->110 26->111 26->132 26->133 26->134 26->135 26->154 26->155 26->156 26->157 26->158 26->170 26->171 26->172 26->173 26->174 26->175 26->176 26->189 26->190 26->191 26->192 26->193 26->194 26->205 26->206 26->268 26->276 26->277 26->283 26->284 26->289 26->290 26->291 26->298 26->299 26->300 26->308 27->1 27->26 28->1 28->1 28->1 28->28 28->29 28->29 28->53 28->54 28->75 28->97 28->116 28->117 28->139 28->159 28->270 29->1 29->28 30->1 30->1 30->1 30->30 30->31 30->79 30->79 30->124 30->124 30->147 30->162 31->1 31->30 33->1 34->1 34->8 34->8 35->1 35->9 35->9 36->1 36->9 37->1 37->10 37->10 38->1 38->10 39->1 39->11 39->11 40->1 40->11 41->1 41->12 41->12 41->45 42->1 42->1 42->24 43->1 43->44 43->47 43->88 43->107 43->127 43->129 43->151 44->1 44->1 44->1 45->1 45->13 45->13 45->49 46->1 46->1 46->26 47->1 47->43 47->110 47->132 47->134 47->157 48->1 48->1 48->1 49->1 49->14 49->14 49->55 50->1 50->16 50->16 51->1 51->18 51->18 52->1 52->1 52->28 53->1 53->1 53->1 53->119 54->1 54->1 54->120 54->207 55->1 55->1 55->20 55->20 55->41 56->1 56->20 57->1 57->1 57->30 58->1 58->23 58->23 58->33 58->33 61->1 61->1 61->36 61->36 63->1 63->1 63->38 63->38 65->1 65->40 65->40 66->1 67->1 67->41 68->1 68->45 69->1 69->49 70->1 70->1 70->15 72->1 73->1 75->1 75->1 75->76 75->118 75->119 75->120 75->121 75->160 75->161 75->177 75->181 75->181 75->182 75->195 75->200 75->202 75->207 75->208 75->214 75->215 75->216 75->225 75->226 75->227 75->232 75->292 75->293 75->301 75->309 75->310 75->311 75->315 75->316 75->320 76->30 77->1 77->55 78->1 78->56 78->56 78->100 78->125 78->182 78->195 78->196 78->197 78->201 79->1 79->1 79->31 79->100 79->125 79->285 79->294 81->1 81->61 81->61 82->1 82->61 82->61 83->1 83->63 83->63 84->1 84->63 84->63 86->1 87->1 87->42 87->42 88->1 88->1 88->44 89->1 90->1 90->46 90->46 91->1 91->1 91->48 92->1 93->1 96->1 96->52 96->52 97->1 97->53 97->53 98->1 99->1 99->57 99->57 100->1 100->1 100->78 100->125 105->1 105->67 105->67 105->86 105->86 107->1 107->1 107->43 107->47 108->1 108->68 108->68 108->89 108->89 110->1 110->1 110->43 110->47 111->1 111->48 111->48 111->91 111->91 112->1 112->69 112->69 112->92 112->92 113->1 114->1 114->70 114->70 114->93 114->93 117->1 117->75 118->1 118->1 118->1 118->140 118->141 118->142 118->143 118->178 118->179 118->196 118->197 118->198 118->199 118->209 118->210 118->211 118->217 118->218 118->219 118->220 118->228 118->229 118->230 118->302 118->303 118->304 118->312 118->313 118->317 118->318 119->1 119->1 119->144 119->145 119->200 119->201 119->213 119->224 119->231 119->305 119->306 119->314 119->319 120->1 120->1 121->1 121->1 121->11 121->222 122->1 122->77 122->77 122->98 122->98 124->1 124->30 124->79 124->79 125->1 125->1 125->78 125->100 127->1 127->1 127->43 127->47 128->1 129->1 129->1 129->43 129->47 130->1 132->1 132->1 132->43 132->47 133->1 134->1 134->1 134->43 134->47 139->1 139->117 139->117 140->1 140->1 140->11 140->222 141->1 141->1 141->1 141->78 142->1 142->1 142->11 142->222 143->1 143->1 143->119 144->1 144->1 145->1 145->1 145->11 145->222 147->1 147->124 147->124 148->1 149->1 150->1 150->107 150->107 150->128 150->128 151->1 151->1 151->43 151->47 152->1 154->1 155->1 156->1 156->110 156->110 156->133 156->133 157->1 157->1 157->43 157->47 158->1 160->1 160->1 160->118 160->141 161->1 161->118 161->118 163->1 164->1 164->127 164->127 164->148 164->148 167->1 168->1 169->1 169->129 169->129 169->152 169->152 170->1 171->1 171->132 171->132 171->154 171->154 174->1 175->1 176->1 176->134 176->134 176->158 176->158 178->1 178->143 178->143 179->1 179->1 179->1 179->180 179->212 179->321 180->1 180->179 181->75 181->76 182->1 182->1 182->78 182->195 185->1 186->1 186->151 186->151 186->167 186->167 191->1 192->1 192->157 192->157 192->174 192->174 195->1 195->1 195->78 195->182 195->196 195->201 196->1 196->197 197->1 197->1 197->78 197->182 197->195 197->201 199->1 199->1 199->179 200->75 200->76 201->1 201->1 201->78 201->182 201->195 202->1 207->1 207->1 207->144 207->237 208->1 209->1 210->1 211->1 211->179 211->179 212->1 212->1 212->1 212->11 212->179 212->180 212->211 212->220 212->221 212->222 212->222 212->223 212->233 212->234 212->235 212->236 212->238 212->239 212->240 212->241 212->242 212->244 212->245 213->1 214->1 214->182 214->182 214->202 214->202 215->1 216->1 216->195 216->195 216->208 216->208 217->1 217->196 217->196 217->209 217->209 218->1 218->197 218->197 218->210 218->210 219->1 219->199 219->199 221->1 221->1 221->75 221->76 221->200 222->1 222->1 222->1 222->1 222->11 222->121 222->140 222->142 222->145 222->212 223->1 223->1 223->119 224->1 224->201 224->201 224->213 224->213 226->1 226->207 226->207 226->215 226->215 233->1 233->221 234->1 234->222 234->222 235->1 235->222 236->1 236->223 236->223 237->1 237->1 237->144 238->1 238->233 238->233 240->1 240->235 240->235 241->1 243->1 246->1 246->237 246->237 246->243 246->243 321->237 321->243 321->246 321->247 321->322 321->323 321->324
>>>Token int main ( ) { int ReplacementFor_n_of_test_cases ; int ReplacementFor_C , ReplacementFor_D ; int ReplacementFor_N ; int ReplacementFor_convert_array [ ( 0x623 + 7369 - 0x22d2 ) ] [ ( 0x60b + 8070 - 0x2577 ) ] ; int ReplacementFor_destroy_array [ ( 0x1e5 + 8712 - 0x23d3 ) ] [ ( 0x329 + 3360 - 0x102f ) ] ; int i , ReplacementFor_j , ReplacementFor_k , l ; char ReplacementFor_string_call [ ( 0xea + 1477 - 0x64a ) ] ; char ReplacementFor_final_string [ ( 0xc27 + 176 - 0xc72 ) ] ; int ReplacementFor_final_string_index ; char ReplacementFor_temp_string [ ( 0xbe8 + 3909 - 0x1b29 ) ] ; int ReplacementFor_is_present [ ( 0x20a3 + 1501 - 0x2666 ) ] ; ReplacementFor_def ReplacementFor___debug__  printf < ReplacementFor_missing ( ( char ) ( 0xd72 + 1795 - 0x143a ) ) > ( " \n " " \x20 \x65 \x6e \x74 \x65 \x72 \x20 \x6e \x75 \x6d \x62 \x65 \x72 \x20 \x6f \x66 \x20 \x74 \x65 \x73 \x74 \x20 \x63 \x61 \x73 \x65 \x73 \x20 " ) ; ReplacementFor_ndif scanf < ReplacementFor_missing ( ( char ) ( 0x13bf +1756 -0x1a60 ) ) > ( " \x25 \x64 " , & ReplacementFor_n_of_test_cases ) ; for ( ReplacementFor_k = ( 0xcaa + 1114 - 0x1104 ) ; ReplacementFor_k < ReplacementFor_n_of_test_cases ; ReplacementFor_k ++ ) { memset ( ReplacementFor_convert_array , ( 0x1463 + 3708 - 0x22df ) , ( 0x15f2 + 3585 - 0x23d9 ) * ( 0x1b63 + 1887 - 0x22a8 ) * sizeof ( int ) ) ; memset ( ReplacementFor_destroy_array , ( 0xca + 1464 - 0x682 ) , ( 0x19c5 + 3148 - 0x25f7 ) * ( 0x321 + 2955 - 0xe92 ) * sizeof ( int ) ) ; memset ( ReplacementFor_is_present , ( 0x17b + 4992 - 0x14fb ) , ( 0x116 + 7798 - 0x1f72 ) * sizeof ( int ) ) ; ReplacementFor_def ReplacementFor___debug__  printf < ReplacementFor_missing ( ( char ) ( 0x617 + 8251 - 0x2617 ) ) > ( " \n " " \x20 \x45 \x6e \x74 \x65 \x72 \x20 \x74 \x68 \x65 \x20 \x6e \x75 \x6d \x62 \x65 \x72 \x20 \x6f \x66 \x20 \x63 \x6f \x6d \x62 \x69 \x6e \x67 \x20 \x73 \x74 \x72 \x69 \x6e \x67 \x73 \x20 \x66 \x6f \x6c \x6c \x6f \x77 \x65 \x64 \x20 \x62 \x79 \x20 \x73 \x74 \x72 \x69 \x6e \x67 \x73 " ) ; ReplacementFor_ndif scanf < ReplacementFor_missing ( ( char ) ( 0x2195 +687 -0x2409 ) ) > ( " \x25 \x64 " , & ReplacementFor_C ) ; for ( i = ( 0x9ab + 4002 - 0x194d ) ; i < ReplacementFor_C ; i ++ ) { scanf ( " \x20 \x25 \x73 " , ReplacementFor_temp_string ) ; ReplacementFor_convert_array [ ReplacementFor_temp_string [ ( 0x9e2 + 6797 - 0x246f ) ] - ( ( char ) ( 0x1086 + 3819 - 0x1f30 ) ) ] [ ReplacementFor_temp_string [ ( 0x1a2d + 2715 - 0x24c7 ) ] - ( ( char ) ( 0xe78 + 5120 - 0x2237 ) ) ] = ReplacementFor_convert_array [ ReplacementFor_temp_string [ ( 0xf82 + 550 - 0x11a7 ) ] - ( ( char ) ( 0x210a + 248 - 0x21c1 ) ) ] [ ReplacementFor_temp_string [ ( 0xd92 + 719 - 0x1061 ) ] - ( ( char ) ( 0x158d + 2019 - 0x1d2f ) ) ] = ReplacementFor_temp_string [ ( 0x13e8 + 3795 - 0x22b9 ) ] ; } ReplacementFor_def ReplacementFor___debug__  printf < ReplacementFor_missing ( ( char ) ( 0x1728 + 283 - 0x1808 ) ) > ( " \n " " \x20 \x65 \x6e \x74 \x65 \x72 \x20 \x74 \x68 \x65 \x20 \x6e \x75 \x6d \x62 \x65 \x72 \x20 \x6f \x66 \x20 \x64 \x65 \x73 \x74 \x72 \x6f \x79 \x69 \x6e \x67 \x20 \x73 \x74 \x72 \x69 \x6e \x67 \x73 \x20 " ) ; ReplacementFor_ndif scanf < ReplacementFor_missing ( ( char ) ( 0x1684 +2179 -0x1ecc ) ) > ( " \x25 \x64 " , & ReplacementFor_D ) ; for ( i = ( 0x14ba + 3662 - 0x2308 ) ; i < ReplacementFor_D ; i ++ ) { scanf ( " \x20 \x25 \x73 " , ReplacementFor_temp_string ) ; ReplacementFor_destroy_array [ ReplacementFor_temp_string [ ( 0x60 + 8218 - 0x207a ) ] - ( ( char ) ( 0x185f + 2008 - 0x1ff6 ) ) ] [ ReplacementFor_temp_string [ ( 0x861 + 1764 - 0xf44 ) ] - ( ( char ) ( 0x1da6 + 795 - 0x2080 ) ) ] = ReplacementFor_destroy_array [ ReplacementFor_temp_string [ ( 0x1062 + 3408 - 0x1db1 ) ] - ( ( char ) ( 0x11fc + 2799 - 0x1caa ) ) ] [ ReplacementFor_temp_string [ ( 0x7af + 6204 - 0x1feb ) ] - ( ( char ) ( 0x1555 + 2218 - 0x1dbe ) ) ] = ( 0x2a6 + 503 - 0x49c ) ; } ReplacementFor_def ReplacementFor___debug__  printf < ReplacementFor_missing ( ( char ) ( 0x1b18 + 648 - 0x1d65 ) ) > ( " \n " " \x20 \x45 \x6e \x74 \x65 \x72 \x20 \x74 \x68 \x65 \x20 \x73 \x74 \x72 \x69 \x6e \x67 \x20 \x6c \x65 \x6e \x67 \x74 \x68 \x20 \x66 \x6f \x6c \x6c \x6f \x77 \x65 \x64 \x20 \x62 \x79 \x20 \x73 \x74 \x72 \x69 \x6e \x67 \x20 " ) ; ReplacementFor_ndif scanf < ReplacementFor_missing ( ( char ) ( 0x153c +2013 -0x1cde ) ) > ( " \x25 \x64 " , & ReplacementFor_N ) ; scanf ( " \x20 \x25 \x73 " , ReplacementFor_string_call ) ; ReplacementFor_is_present [ ReplacementFor_string_call [ ( 0x9aa + 269 - 0xab7 ) ] - ( ( char ) ( 0x5ff + 7706 - 0x23d8 ) ) ] = ( 0x12a + 6713 - 0x1b62 ) ; ReplacementFor_final_string [ ( 0x1ff4 + 884 - 0x2368 ) ] = ReplacementFor_string_call [ ( 0x1a49 + 2619 - 0x2484 ) ] ; ReplacementFor_final_string_index = ( 0xcd + 3458 - 0xe4f ) ; for ( i = ( 0x142b + 260 - 0x152e ) ; i < ReplacementFor_N ; i ++ ) { char ReplacementFor_ch ; char ReplacementFor_temp_ch ; int ReplacementFor_flag = ( 0x89c + 540 - 0xab8 ) ; ReplacementFor_ch = ReplacementFor_string_call [ i ] ; if ( ReplacementFor_final_string_index != - ( 0x1005 + 4674 - 0x2246 ) ) { if ( ( ReplacementFor_temp_ch = ReplacementFor_convert_array [ ReplacementFor_ch - ( ( char ) ( 0x938 + 4377 - 0x1a10 ) ) ] [ ReplacementFor_final_string [ ReplacementFor_final_string_index ] - ( ( char ) ( 0x16f1 + 2466 - 0x2052 ) ) ] ) != ( 0x507 + 6828 - 0x1fb3 ) ) { ReplacementFor_is_present [ ReplacementFor_final_string [ ReplacementFor_final_string_index ] - ( ( char ) ( 0xb1b + 5124 - 0x1ede ) ) ] -- ; ReplacementFor_final_string [ ReplacementFor_final_string_index ] = ReplacementFor_temp_ch ; ReplacementFor_is_present [ ReplacementFor_final_string [ ReplacementFor_final_string_index ] - ( ( char ) ( 0x7cd + 6832 - 0x223c ) ) ] ++ ; ReplacementFor_flag = ( 0x12c + 8221 - 0x2148 ) ; } else { for ( ReplacementFor_j = ( 0x1021 + 4863 - 0x2320 ) ; ReplacementFor_j < ( 0x96 + 6752 - 0x1adc ) ; ReplacementFor_j ++ ) { if ( ReplacementFor_is_present [ ReplacementFor_j ] && ReplacementFor_destroy_array [ ReplacementFor_ch - ( ( char ) ( 0x1188 + 1219 - 0x160a ) ) ] [ ReplacementFor_j ] ) { ReplacementFor_final_string_index = - ( 0x706 + 6423 - 0x201c ) ; memset ( ReplacementFor_is_present , ( 0x5fc + 7744 - 0x243c ) , ( 0x1662 + 2389 - 0x1f9d ) * sizeof ( int ) ) ; ReplacementFor_flag = ( 0x1727 + 3209 - 0x23af ) ; break ; } } } if ( ! ReplacementFor_flag ) { ReplacementFor_final_string [ ++ ReplacementFor_final_string_index ] = ReplacementFor_ch ; ReplacementFor_is_present [ ReplacementFor_final_string [ ReplacementFor_final_string_index ] - ( ( char ) ( 0x1f8 + 5145 - 0x15d0 ) ) ] ++ ; } } else { ReplacementFor_final_string [ ++ ReplacementFor_final_string_index ] = ReplacementFor_ch ; ReplacementFor_is_present [ ReplacementFor_final_string [ ReplacementFor_final_string_index ] - ( ( char ) ( 0x1fd0 + 396 - 0x211b ) ) ] ++ ; } } ReplacementFor_final_string [ ++ ReplacementFor_final_string_index ] = ' \0 ' ; ReplacementFor_def ReplacementFor___debug__  printf < ReplacementFor_missing ( ( char ) ( 0x500 + 6179 - 0x1ce8 ) ) > ( " \n " " \x20 \x74 \x68 \x65 \x20 \x66 \x69 \x6e \x61 \x6c \x20 \x73 \x74 \x72 \x69 \x6e \x67 \x20 \x69 \x73 \x20 \x25 \x73 \x20 " , ReplacementFor_final_string ) ; ReplacementFor_lse printf < ReplacementFor_missing ( ( char ) ( 0xbf8 +1335 -0x10f4 ) ) > ( " \x43 \x61 \x73 \x65 \x20 \x23 \x25 \x64 \x3a \x20 \x5b " , ReplacementFor_k + ( 0x5bf + 564 - 0x7f2 ) ) ; for ( l = ( 0x1c93 + 418 - 0x1e35 ) ; l < ReplacementFor_final_string_index ; l ++ ) { if ( l != ReplacementFor_final_string_index - ( 0x5e2 + 5494 - 0x1b57 ) ) printf ( " \x25 \x63 \x2c \x20 " , ReplacementFor_final_string [ l ] ) ; else printf ( " \x25 \x63 " , ReplacementFor_final_string [ l ] ) ; } printf ( " \x5d " " \n " ) ; ReplacementFor_ndif  } return ( 0x4cb + 4916 - 0x17ff ) ; }
>>>Func
METHOD ReplacementFor_BKDRHash
METHOD_RETURN unsigned int
PARAM char*ReplacementFor_str
PARAM unsigned int len
<operator>.assignment ReplacementFor_seed=(0xc68+4063-0x1bc4)
<operator>.assignment ReplacementFor_hash=(0x392+3641-0x11cb)
<operator>.assignment i=(0x8ef+694-0xba5)
RETURN return \012ReplacementFor_hash; return \012ReplacementFor_hash;
<operator>.lessThan i<len
<operator>.expressionList ReplacementFor_str++ i++
IDENTIFIER ReplacementFor_hash return \012ReplacementFor_hash;
<operator>.subtraction 0xc68+4063-0x1bc4
<operator>.subtraction 0x392+3641-0x11cb
<operator>.subtraction 0x8ef+694-0xba5
<operator>.assignment i=\012(0xe71+1300-0x1385)
<operator>.assignment ReplacementFor_hash=(\012ReplacementFor_hash*ReplacementFor_seed)+(*ReplacementFor_str)
<operator>.addition 0xc68+4063
<operator>.addition 0x392+3641
<operator>.addition 0x8ef+694
<operator>.postIncrement ReplacementFor_str++
<operator>.postIncrement i++
<operator>.subtraction 0xe71+1300-0x1385
<operator>.addition (\012ReplacementFor_hash*ReplacementFor_seed)+(*ReplacementFor_str)
<operator>.addition 0xe71+1300
<operator>.multiplication ReplacementFor_hash*ReplacementFor_seed
<operator>.indirection *ReplacementFor_str
>>>PDG&26 0->2 0->3 0->8 0->10 0->11 0->12 0->13 0->16 0->17 0->18 0->19 0->20 0->21 0->23 0->24 2->1 2->19 3->8 4->1 4->1 4->1 4->24 5->1 5->1 5->1 5->10 5->24 6->1 6->1 7->1 8->1 8->1 8->1 8->8 8->9 8->15 8->19 8->20 8->20 8->22 8->24 8->25 9->1 9->1 9->1 10->7 11->1 11->4 11->4 12->1 12->5 12->5 13->1 13->6 13->6 14->1 14->1 14->8 15->1 15->1 15->1 15->10 15->24 19->1 19->9 20->8 20->9 21->1 21->14 21->14 22->1 22->1 24->1 24->15 24->15 24->22 24->22
>>>Token unsigned int ReplacementFor_BKDRHash ( char * ReplacementFor_str , unsigned int len ) { unsigned int ReplacementFor_seed = ( 0xc68 + 4063 - 0x1bc4 ) ; unsigned int ReplacementFor_hash = ( 0x392 + 3641 - 0x11cb ) ; unsigned int i = ( 0x8ef + 694 - 0xba5 ) ; for ( i = ( 0xe71 + 1300 - 0x1385 ) ; i < len ; ReplacementFor_str ++ , i ++ ) { ReplacementFor_hash = ( ReplacementFor_hash * ReplacementFor_seed ) + ( * ReplacementFor_str ) ; } return ReplacementFor_hash ; }
>>>Func
METHOD ReplacementFor_docase
METHOD_RETURN void
<operator>.assignment ReplacementFor_barev=ReplacementFor_MAXX
scanf scanf("\x20\x25\x64\x20\x25\x64",&\012ReplacementFor_n,&m)
bzero bzero(ReplacementFor_deg sizeof(int)*(ReplacementFor_n+\012(0x1d8+8718-0x23e1)))
<operator>.assignment ReplacementFor_color[(0x1837+1183-0x1cd5)]=(0x64a+1252-0xb2d)
<operator>.assignment ReplacementFor_color[(0xc7c+5913-0x2393)]=(0x19c8+1241-0x1e9f)
ReplacementFor_rekuCount ReplacementFor_rekuCount((0x33c+2344-0xc63) (0x16f9+2062-0x1f05))
ReplacementFor_rekuCol ReplacementFor_rekuCol((0x5d5+7859-0x2487) (0x952+7187-0x2563))
ReplacementFor_dump ReplacementFor_dump()
<operator>.lessThan i<m
<operator>.postIncrement i++
<operator>.lessThan i<m
<operator>.postIncrement i++
<operator>.lessThan i<m
<operator>.postIncrement i++
<operator>.lessEqualsThan i<=ReplacementFor_n
<operator>.postIncrement i++
<operator>.assignment i=(0x1789+717-0x1a56)
scanf scanf("\x20\x25\x64",\012ReplacementFor_from+i)
<operator>.assignment i=(0xb58+4994-0x1eda)
scanf scanf("\x20\x25\x64",\012ReplacementFor_to+i)
<operator>.multiplication sizeof(int)*(ReplacementFor_n+\012(0x1d8+8718-0x23e1))
<operator>.assignment i=(0x7ad+720-0xa7d)
<operator>.assignment ReplacementFor_sousedi[\012ReplacementFor_from[i]][ReplacementFor_deg[ReplacementFor_from[i]]]=\012ReplacementFor_to[i]
<operator>.postIncrement ReplacementFor_deg[ReplacementFor_from[i]]++
<operator>.assignment ReplacementFor_sousedi[ReplacementFor_to[i]][ReplacementFor_deg[\012ReplacementFor_to[i]]]=ReplacementFor_from[i]
<operator>.postIncrement ReplacementFor_deg[\012ReplacementFor_to[i]]++
<operator>.assignment i=(0x2b7+4731-0x1531)
<operator>.assignment ReplacementFor_sousedi[i][ReplacementFor_deg[i]]=(i>(0x284+8433-0x2374))?i-\012(0x12c8+3759-0x2176):ReplacementFor_n
<operator>.assignment ReplacementFor_sousedi[i][\012ReplacementFor_deg[i]+(0x6ca+5487-0x1c38)]=(i<ReplacementFor_n)?i+\012(0xf73+49-0xfa3):(0x603+6459-0x1f3d)
<operator>.assignmentPlus ReplacementFor_deg[i]+=(0x12f7+4302-0x23c3)
qsort qsort(&(ReplacementFor_sousedi[i][(0xde9+2354-0x171b)]) ReplacementFor_deg[i] \012sizeof(int),ReplacementFor_intcomp)
<operator>.subtraction 0x64a+1252-0xb2d
<operator>.subtraction 0x19c8+1241-0x1e9f
<operator>.subtraction 0x33c+2344-0xc63
<operator>.subtraction 0x16f9+2062-0x1f05
<operator>.subtraction 0x5d5+7859-0x2487
<operator>.subtraction 0x952+7187-0x2563
<operator>.sizeOf sizeof(int)
<operator>.addition ReplacementFor_n+\012(0x1d8+8718-0x23e1)
<operator>.lessThan ReplacementFor_j<ReplacementFor_deg[i]
<operator>.postIncrement ReplacementFor_j++
<operator>.subtraction 0x1837+1183-0x1cd5
<operator>.addition 0x64a+1252
<operator>.subtraction 0xc7c+5913-0x2393
<operator>.addition 0x19c8+1241
<operator>.addition 0x33c+2344
<operator>.addition 0x16f9+2062
<operator>.addition 0x5d5+7859
<operator>.addition 0x952+7187
<operator>.subtraction 0x1789+717-0x1a56
<operator>.addition ReplacementFor_from+i
<operator>.subtraction 0xb58+4994-0x1eda
<operator>.addition ReplacementFor_to+i
<operator>.subtraction 0x1d8+8718-0x23e1
<operator>.subtraction 0x7ad+720-0xa7d
<operator>.subtraction 0x2b7+4731-0x1531
<operator>.conditional (i>(0x284+8433-0x2374))?i-\012(0x12c8+3759-0x2176):ReplacementFor_n
<operator>.conditional (i<ReplacementFor_n)?i+\012(0xf73+49-0xfa3):(0x603+6459-0x1f3d)
<operator>.subtraction 0x12f7+4302-0x23c3
<operator>.sizeOf sizeof(int)
<operator>.assignment ReplacementFor_j=(0xf72+4853-0x2267)
<operator>.addition 0x1837+1183
<operator>.addition 0xc7c+5913
<operator>.addition 0x1789+717
<operator>.addition 0xb58+4994
<operator>.addition 0x1d8+8718
<operator>.addition 0x7ad+720
<operator>.addition 0x2b7+4731
<operator>.greaterThan i>(0x284+8433-0x2374)
<operator>.subtraction i-\012(0x12c8+3759-0x2176)
<operator>.addition ReplacementFor_deg[i]+(0x6ca+5487-0x1c38)
<operator>.lessThan i<ReplacementFor_n
<operator>.addition i+\012(0xf73+49-0xfa3)
<operator>.subtraction 0x603+6459-0x1f3d
<operator>.addition 0x12f7+4302
<operator>.subtraction 0x284+8433-0x2374
<operator>.subtraction 0x12c8+3759-0x2176
<operator>.subtraction 0x6ca+5487-0x1c38
<operator>.subtraction 0xf73+49-0xfa3
<operator>.addition 0x603+6459
<operator>.subtraction 0xde9+2354-0x171b
<operator>.subtraction 0xf72+4853-0x2267
<operator>.addition 0x284+8433
<operator>.addition 0x12c8+3759
<operator>.addition 0x6ca+5487
<operator>.addition 0xf73+49
<operator>.addition 0xde9+2354
<operator>.addition 0xf72+4853
<operator>.indirectIndexAccess ReplacementFor_sousedi[\012ReplacementFor_from[i]][ReplacementFor_deg[ReplacementFor_from[i]]]
<operator>.indirectIndexAccess ReplacementFor_to[i]
<operator>.indirectIndexAccess ReplacementFor_deg[ReplacementFor_from[i]]
<operator>.indirectIndexAccess ReplacementFor_sousedi[ReplacementFor_to[i]][ReplacementFor_deg[\012ReplacementFor_to[i]]]
<operator>.indirectIndexAccess ReplacementFor_from[i]
<operator>.indirectIndexAccess ReplacementFor_deg[\012ReplacementFor_to[i]]
<operator>.indirectIndexAccess ReplacementFor_sousedi[i][ReplacementFor_deg[i]]
<operator>.indirectIndexAccess ReplacementFor_sousedi[i][\012ReplacementFor_deg[i]+(0x6ca+5487-0x1c38)]
<operator>.indirectIndexAccess ReplacementFor_deg[i]
<operator>.addressOf &(ReplacementFor_sousedi[i][(0xde9+2354-0x171b)])
<operator>.indirectIndexAccess ReplacementFor_deg[i]
<operator>.indirectIndexAccess ReplacementFor_sousedi[\012ReplacementFor_from[i]]
<operator>.indirectIndexAccess ReplacementFor_deg[ReplacementFor_from[i]]
<operator>.indirectIndexAccess ReplacementFor_from[i]
<operator>.indirectIndexAccess ReplacementFor_sousedi[ReplacementFor_to[i]]
<operator>.indirectIndexAccess ReplacementFor_deg[\012ReplacementFor_to[i]]
<operator>.indirectIndexAccess ReplacementFor_to[i]
<operator>.indirectIndexAccess ReplacementFor_sousedi[i]
<operator>.indirectIndexAccess ReplacementFor_deg[i]
<operator>.indirectIndexAccess ReplacementFor_sousedi[i]
<operator>.indirectIndexAccess ReplacementFor_sousedi[i][(0xde9+2354-0x171b)]
<operator>.indirectIndexAccess ReplacementFor_deg[i]
<operator>.indirectIndexAccess ReplacementFor_from[i]
<operator>.indirectIndexAccess ReplacementFor_from[i]
<operator>.indirectIndexAccess ReplacementFor_to[i]
<operator>.indirectIndexAccess ReplacementFor_to[i]
<operator>.indirectIndexAccess ReplacementFor_deg[i]
<operator>.indirectIndexAccess ReplacementFor_sousedi[i]
>>>PDG&118 0->2 0->3 0->4 0->9 0->10 0->11 0->12 0->13 0->14 0->15 0->16 0->17 0->19 0->21 0->22 0->24 0->26 0->29 0->30 0->32 0->33 0->34 0->35 0->36 0->37 0->38 0->40 0->41 0->42 0->43 0->44 0->45 0->46 0->47 0->48 0->49 0->50 0->51 0->52 0->53 0->54 0->55 0->56 0->57 0->58 0->59 0->60 0->63 0->64 0->65 0->66 0->67 0->68 0->69 0->70 0->71 0->73 0->74 0->75 0->76 0->77 0->78 0->79 0->80 0->81 0->82 0->83 0->84 0->85 0->86 0->87 0->88 0->89 2->1 2->1 2->1 3->1 3->1 3->16 3->22 3->29 3->40 3->58 3->73 4->1 4->1 4->1 4->25 4->27 4->31 4->32 4->41 4->72 5->1 5->1 5->1 6->1 6->1 6->1 7->1 7->1 7->1 8->1 8->1 8->1 9->1 10->10 10->11 10->11 10->12 10->19 10->19 10->52 10->52 11->1 11->10 12->12 12->13 12->13 12->14 12->21 12->21 12->54 12->54 13->1 13->12 14->1 14->1 14->14 14->15 14->15 14->24 14->25 14->26 14->27 14->90 14->91 14->92 14->93 14->94 14->95 14->101 14->102 14->103 14->104 14->105 14->106 14->112 14->113 14->114 14->115 15->1 15->14 16->1 16->1 16->1 16->16 16->17 16->29 16->29 16->30 16->31 16->32 16->41 16->58 16->58 16->59 16->60 16->61 16->62 16->70 16->70 16->72 16->73 16->73 16->76 16->77 16->79 16->82 16->83 16->84 16->86 16->88 16->89 16->96 16->97 16->98 16->99 16->100 16->107 16->108 16->109 16->110 16->111 16->116 16->117 17->1 17->16 18->1 18->1 18->10 19->1 20->1 20->1 20->12 21->1 22->1 22->4 23->1 23->1 23->14 24->1 24->1 24->1 25->1 25->1 26->1 26->1 26->1 27->1 27->1 28->1 28->1 28->16 29->1 29->1 29->1 30->1 30->1 30->1 31->1 31->1 31->32 32->1 32->1 32->1 32->41 33->1 33->5 33->5 34->1 34->6 34->6 35->1 35->7 35->7 36->1 36->7 36->7 37->1 37->8 37->8 38->1 38->8 38->8 39->1 40->1 41->1 41->1 41->1 41->31 41->41 41->42 41->42 41->72 41->111 42->1 42->41 43->1 45->1 51->1 51->18 51->18 52->1 53->1 53->20 53->20 54->1 55->1 55->22 55->22 55->40 55->40 56->1 56->23 56->23 57->1 57->28 57->28 58->1 58->1 59->1 59->1 59->1 60->1 60->31 60->31 61->1 62->1 62->1 62->41 70->1 70->71 70->71 70->73 70->78 70->85 71->1 71->29 71->29 71->58 71->58 71->73 72->1 73->16 73->17 73->30 73->59 73->74 73->74 73->75 73->80 73->81 73->87 74->1 75->1 75->30 75->30 75->59 75->59 77->1 77->70 77->70 78->1 78->71 78->71 79->1 79->72 79->72 80->1 80->30 80->30 80->59 80->59 80->74 80->74 82->1 83->1 83->62 83->62
>>>Token void ReplacementFor_docase ( ) { int ReplacementFor_from [ ReplacementFor_MAXX ] , ReplacementFor_to [ ReplacementFor_MAXX ] ; int i , ReplacementFor_j ; ReplacementFor_barev = ReplacementFor_MAXX ; scanf ( " \x20 \x25 \x64 \x20 \x25 \x64 " , & ReplacementFor_n , & m ) ; for ( i = ( 0x1789 + 717 - 0x1a56 ) ; i < m ; i ++ ) { scanf ( " \x20 \x25 \x64 " , ReplacementFor_from + i ) ; } for ( i = ( 0xb58 + 4994 - 0x1eda ) ; i < m ; i ++ ) { scanf ( " \x20 \x25 \x64 " , ReplacementFor_to + i ) ; } bzero ( ReplacementFor_deg , sizeof ( int ) * ( ReplacementFor_n + ( 0x1d8 + 8718 - 0x23e1 ) ) ) ; for ( i = ( 0x7ad + 720 - 0xa7d ) ; i < m ; i ++ ) { ReplacementFor_sousedi [ ReplacementFor_from [ i ] ] [ ReplacementFor_deg [ ReplacementFor_from [ i ] ] ] = ReplacementFor_to [ i ] ; ReplacementFor_deg [ ReplacementFor_from [ i ] ] ++ ; ReplacementFor_sousedi [ ReplacementFor_to [ i ] ] [ ReplacementFor_deg [ ReplacementFor_to [ i ] ] ] = ReplacementFor_from [ i ] ; ReplacementFor_deg [ ReplacementFor_to [ i ] ] ++ ; } for ( i = ( 0x2b7 + 4731 - 0x1531 ) ; i <= ReplacementFor_n ; i ++ ) { ReplacementFor_sousedi [ i ] [ ReplacementFor_deg [ i ] ] = ( i > ( 0x284 + 8433 - 0x2374 ) ) ? i - ( 0x12c8 + 3759 - 0x2176 ) : ReplacementFor_n ; ReplacementFor_sousedi [ i ] [ ReplacementFor_deg [ i ] + ( 0x6ca + 5487 - 0x1c38 ) ] = ( i < ReplacementFor_n ) ? i + ( 0xf73 + 49 - 0xfa3 ) : ( 0x603 + 6459 - 0x1f3d ) ; ReplacementFor_deg [ i ] += ( 0x12f7 + 4302 - 0x23c3 ) ; qsort ( & ( ReplacementFor_sousedi [ i ] [ ( 0xde9 + 2354 - 0x171b ) ] ) , ReplacementFor_deg [ i ] , sizeof ( int ) , ReplacementFor_intcomp ) ; for ( ReplacementFor_j = ( 0xf72 + 4853 - 0x2267 ) ; ReplacementFor_j < ReplacementFor_deg [ i ] ; ReplacementFor_j ++ ) { } } ReplacementFor_color [ ( 0x1837 + 1183 - 0x1cd5 ) ] = ( 0x64a + 1252 - 0xb2d ) ; ReplacementFor_color [ ( 0xc7c + 5913 - 0x2393 ) ] = ( 0x19c8 + 1241 - 0x1e9f ) ; ReplacementFor_rekuCount ( ( 0x33c + 2344 - 0xc63 ) , ( 0x16f9 + 2062 - 0x1f05 ) ) ; ReplacementFor_rekuCol ( ( 0x5d5 + 7859 - 0x2487 ) , ( 0x952 + 7187 - 0x2563 ) ) ; ReplacementFor_dump ( ) ; }
>>>Func
METHOD main
METHOD_RETURN int
printf printf(\012"\x45\x6e\x74\x65\x72\x20\x73\x69\x7a\x65\x20\x6f\x66\x20\x61\x72\x72\x61\x79\x3a" "\n"\012)
scanf scanf("\x25\x64",&ReplacementFor_n)
printf printf(\012"\x45\x6e\x74\x65\x72\x20\x74\x68\x65\x20\x65\x6c\x65\x6d\x65\x6e\x74\x73\x20\x6f\x66\x20\x74\x68\x65\x20\x61\x72\x72\x61\x79" "\n"\012)
<operator>.assignment *ReplacementFor_arr=(int*)malloc(ReplacementFor_n*sizeof(int))
printf printf("\x4f\x72\x69\x67\x69\x6e\x61\x6c\x20\x61\x72\x72\x61\x79\x3a\x20")
ReplacementFor_display ReplacementFor_display(ReplacementFor_arr,ReplacementFor_n)
ReplacementFor_cycleSort ReplacementFor_cycleSort(ReplacementFor_arr,ReplacementFor_n)
printf printf(\012"\x53\x6f\x72\x74\x65\x64\x20\x61\x72\x72\x61\x79\x3a\x20")
ReplacementFor_display ReplacementFor_display(ReplacementFor_arr,ReplacementFor_n)
free free(\012ReplacementFor_arr)
RETURN return(0x246+5492-0x17ba); return(0x246+5492-0x17ba);
<operator>.lessThan i<ReplacementFor_n
<operator>.postIncrement i++
<operator>.subtraction 0x246+5492-0x17ba
<operator>.cast (int*)malloc(ReplacementFor_n*sizeof(int))
<operator>.assignment i=\012(0x7c2+4311-0x1899)
scanf scanf("\x25\x64",&ReplacementFor_arr\012[i])
malloc malloc(ReplacementFor_n*sizeof(int))
<operator>.addition 0x246+5492
<operator>.multiplication ReplacementFor_n*sizeof(int)
<operator>.subtraction 0x7c2+4311-0x1899
<operator>.sizeOf sizeof(int)
<operator>.addition 0x7c2+4311
<operator>.addressOf &ReplacementFor_arr\012[i]
<operator>.indirectIndexAccess ReplacementFor_arr\012[i]
>>>PDG&27 0->2 0->3 0->4 0->6 0->7 0->8 0->9 0->10 0->11 0->13 0->14 0->15 0->20 0->21 0->22 0->24 2->1 3->1 3->7 3->8 3->10 3->13 3->21 4->1 5->1 5->1 5->7 5->8 5->10 5->11 5->18 6->1 7->8 7->8 8->1 8->10 8->10 9->1 10->1 10->1 10->11 11->1 12->1 13->1 13->1 13->7 13->13 13->14 13->14 13->18 13->25 13->26 14->1 14->13 15->1 15->1 15->12 16->1 17->1 17->1 17->13 18->1 18->7 18->8 18->10 18->11 19->1 19->5 19->16 21->13 21->19 22->1 22->17 22->17 23->1
>>>Token int main ( ) { int ReplacementFor_n ; printf ( " \x45 \x6e \x74 \x65 \x72 \x20 \x73 \x69 \x7a \x65 \x20 \x6f \x66 \x20 \x61 \x72 \x72 \x61 \x79 \x3a " " \n " ) ; scanf ( " \x25 \x64 " , & ReplacementFor_n ) ; printf ( " \x45 \x6e \x74 \x65 \x72 \x20 \x74 \x68 \x65 \x20 \x65 \x6c \x65 \x6d \x65 \x6e \x74 \x73 \x20 \x6f \x66 \x20 \x74 \x68 \x65 \x20 \x61 \x72 \x72 \x61 \x79 " " \n " ) ; int i ; int * ReplacementFor_arr = ( int * ) malloc ( ReplacementFor_n * sizeof ( int ) ) ; for ( i = ( 0x7c2 + 4311 - 0x1899 ) ; i < ReplacementFor_n ; i ++ ) { scanf ( " \x25 \x64 " , & ReplacementFor_arr [ i ] ) ; } printf ( " \x4f \x72 \x69 \x67 \x69 \x6e \x61 \x6c \x20 \x61 \x72 \x72 \x61 \x79 \x3a \x20 " ) ; ReplacementFor_display ( ReplacementFor_arr , ReplacementFor_n ) ; ReplacementFor_cycleSort ( ReplacementFor_arr , ReplacementFor_n ) ; printf ( " \x53 \x6f \x72 \x74 \x65 \x64 \x20 \x61 \x72 \x72 \x61 \x79 \x3a \x20 " ) ; ReplacementFor_display ( ReplacementFor_arr , ReplacementFor_n ) ; free ( ReplacementFor_arr ) ; return ( 0x246 + 5492 - 0x17ba ) ; }
>>>Func
METHOD main
METHOD_RETURN int
scanf scanf("\x25\x64",&T)
RETURN return\012(0x1d59+2135-0x25b0); return\012(0x1d59+2135-0x25b0);
<operator>.lessEqualsThan ReplacementFor_tcase<=T
<operator>.postIncrement ReplacementFor_tcase++
<operator>.subtraction 0x1d59+2135-0x25b0
<operator>.assignment ReplacementFor_tcase=(0xb87+6494-0x24e4)
scanf scanf("\x25\x64",&ReplacementFor_N)
printf printf(\012"\x43\x61\x73\x65\x20\x23\x25\x64\x3a" "\n",ReplacementFor_tcase)
<operator>.lessThan i<ReplacementFor_N
<operator>.postIncrement i++
<operator>.lessThan i<ReplacementFor_N
<operator>.postIncrement i++
<operator>.lessThan i<ReplacementFor_N
<operator>.postIncrement i++
<operator>.addition 0x1d59+2135
<operator>.subtraction 0xb87+6494-0x24e4
<operator>.assignment i=\012(0x787+120-0x7ff)
<operator>.assignment ReplacementFor_total[i]=\012ReplacementFor_totwin[i]=(0x312+2529-0xcf3)
getchar getchar()
<operator>.assignment i=(0x9a+5510-0x1620)
<operator>.assignment ReplacementFor_owp[i]=(0x854+911-0xbe3)
<operator>.assignmentDivision ReplacementFor_owp[i]/=ReplacementFor_total[i]
<operator>.assignment i=\012(0xc20+721-0xef1)
<operator>.assignment ReplacementFor_oowp[i]=\012(0xab3+7112-0x267b)
<operator>.assignmentDivision ReplacementFor_oowp[i]/=ReplacementFor_total[i]
printf printf(\012"\x25\x2e\x31\x32\x66" "\n" (0.25*ReplacementFor_totwin[i])/ReplacementFor_total\012[i]+0.5*ReplacementFor_owp[i]+0.25*ReplacementFor_oowp[i])
<operator>.addition 0xb87+6494
<operator>.lessThan ReplacementFor_j<ReplacementFor_N
<operator>.postIncrement ReplacementFor_j++
<operator>.lessThan ReplacementFor_j<ReplacementFor_N
<operator>.postIncrement ReplacementFor_j++
<operator>.lessThan ReplacementFor_j<\012ReplacementFor_N
<operator>.postIncrement ReplacementFor_j++
<operator>.subtraction 0x787+120-0x7ff
<operator>.assignment ReplacementFor_totwin[i]=(0x312+2529-0xcf3)
<operator>.assignment ReplacementFor_j=\012(0x14ad+1913-0x1c26)
<operator>.assignment ReplacementFor_win[i][ReplacementFor_j]=getchar()
<operator>.subtraction 0x9a+5510-0x1620
<operator>.subtraction 0x854+911-0xbe3
<operator>.assignment ReplacementFor_j=(0xb07+6723-0x254a)
<operator>.subtraction 0xc20+721-0xef1
<operator>.subtraction 0xab3+7112-0x267b
<operator>.assignment ReplacementFor_j=(0xae3+4400-0x1c13)
<operator>.addition (0.25*ReplacementFor_totwin[i])/ReplacementFor_total\012[i]+0.5*ReplacementFor_owp[i]+0.25*ReplacementFor_oowp[i]
<operator>.addition 0x787+120
<operator>.subtraction 0x312+2529-0xcf3
<operator>.notEquals ReplacementFor_win[i][\012ReplacementFor_j]!=((char)(0xaef+945-0xe72))
<operator>.addition 0x9a+5510
<operator>.addition 0x854+911
<operator>.notEquals ReplacementFor_win[i][\012ReplacementFor_j]!=((char)(0xe88+6324-0x270e))
<operator>.addition 0xc20+721
<operator>.addition 0xab3+7112
<operator>.notEquals ReplacementFor_win[i][ReplacementFor_j]\012!=((char)(0x9c+9823-0x26cd))
<operator>.addition (0.25*ReplacementFor_totwin[i])/ReplacementFor_total\012[i]+0.5*ReplacementFor_owp[i]
<operator>.multiplication 0.25*ReplacementFor_oowp[i]
<operator>.addition 0x312+2529
<operator>.subtraction 0x14ad+1913-0x1c26
<operator>.postIncrement ReplacementFor_total[i]++
<operator>.subtraction 0xb07+6723-0x254a
<operator>.subtraction 0xae3+4400-0x1c13
<operator>.assignmentPlus ReplacementFor_oowp[i]+=ReplacementFor_owp[\012ReplacementFor_j]
<operator>.division (0.25*ReplacementFor_totwin[i])/ReplacementFor_total\012[i]
<operator>.multiplication 0.5*ReplacementFor_owp[i]
<operator>.addition 0x14ad+1913
<operator>.cast (char)(0xaef+945-0xe72)
<operator>.equals ReplacementFor_win[i][ReplacementFor_j]==((char)(0x740+3145-0x1358))
<operator>.addition 0xb07+6723
<operator>.cast (char)(0xe88+6324-0x270e)
<operator>.equals ReplacementFor_win[i][\012ReplacementFor_j]==((char)(0x355+7472-0x2055))
<operator>.addition 0xae3+4400
<operator>.cast (char)(0x9c+9823-0x26cd)
<operator>.multiplication 0.25*ReplacementFor_totwin[i]
<operator>.subtraction 0xaef+945-0xe72
<operator>.postIncrement ReplacementFor_totwin[i]++
<operator>.subtraction 0xe88+6324-0x270e
<operator>.assignmentPlus ReplacementFor_owp[i]+=(\012ReplacementFor_totwin[ReplacementFor_j]-(0x63c+4993-0x19bc))/(\012ReplacementFor_total[ReplacementFor_j]-1.0)
<operator>.subtraction 0x9c+9823-0x26cd
<operator>.addition 0xaef+945
<operator>.cast (char)(0x740+3145-0x1358)
<operator>.addition 0xe88+6324
<operator>.cast (char)(0x355+7472-0x2055)
<operator>.addition 0x9c+9823
<operator>.subtraction 0x740+3145-0x1358
<operator>.subtraction 0x355+7472-0x2055
<operator>.division (\012ReplacementFor_totwin[ReplacementFor_j]-(0x63c+4993-0x19bc))/(\012ReplacementFor_total[ReplacementFor_j]-1.0)
<operator>.equals ReplacementFor_win[i][\012ReplacementFor_j]==((char)(0x100a+4802-0x229b))
<operator>.addition 0x740+3145
<operator>.addition 0x355+7472
<operator>.subtraction ReplacementFor_totwin[ReplacementFor_j]-(0x63c+4993-0x19bc)
<operator>.subtraction ReplacementFor_total[ReplacementFor_j]-1.0
<operator>.assignmentPlus ReplacementFor_owp[i]+=\012ReplacementFor_totwin[ReplacementFor_j]/(ReplacementFor_total[ReplacementFor_j]-\0121.0)
<operator>.subtraction 0x63c+4993-0x19bc
<operator>.cast (char)(0x100a+4802-0x229b)
fprintf fprintf(stderr,\012"\x57\x72\x6f\x6e\x67\x20\x69\x6e\x70\x75\x74\x20\x72\x65\x61\x64\x69\x6e\x67\x21" "\n"\012)
<operator>.addition 0x63c+4993
<operator>.subtraction 0x100a+4802-0x229b
<operator>.division ReplacementFor_totwin[ReplacementFor_j]/(ReplacementFor_total[ReplacementFor_j]-\0121.0)
<operator>.addition 0x100a+4802
<operator>.subtraction ReplacementFor_total[ReplacementFor_j]-\0121.0
<operator>.addressOf &ReplacementFor_N
<operator>.indirectIndexAccess ReplacementFor_total[i]
<operator>.indirectIndexAccess ReplacementFor_owp[i]
<operator>.indirectIndexAccess ReplacementFor_owp[i]
<operator>.indirectIndexAccess ReplacementFor_total[i]
<operator>.indirectIndexAccess ReplacementFor_oowp[i]
<operator>.indirectIndexAccess ReplacementFor_oowp[i]
<operator>.indirectIndexAccess ReplacementFor_total[i]
<operator>.indirectIndexAccess ReplacementFor_totwin[i]
<operator>.indirectIndexAccess ReplacementFor_win[i][ReplacementFor_j]
getchar getchar()
<operator>.indirectIndexAccess ReplacementFor_oowp[i]
<operator>.indirectIndexAccess ReplacementFor_win[i]
<operator>.indirectIndexAccess ReplacementFor_win[i][\012ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_win[i][\012ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_win[i][ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_total\012[i]
<operator>.indirectIndexAccess ReplacementFor_owp[i]
<operator>.indirectIndexAccess ReplacementFor_win[i]
UNKNOWN char char
<operator>.indirectIndexAccess ReplacementFor_total[i]
<operator>.indirectIndexAccess ReplacementFor_win[i]
UNKNOWN char char
<operator>.indirectIndexAccess ReplacementFor_win[i]
UNKNOWN char char
<operator>.indirectIndexAccess ReplacementFor_oowp[i]
<operator>.indirectIndexAccess ReplacementFor_owp[\012ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_totwin[i]
<operator>.indirectIndexAccess ReplacementFor_win[i][ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_win[i][\012ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_win[i]
UNKNOWN char char
<operator>.indirectIndexAccess ReplacementFor_totwin[i]
<operator>.indirectIndexAccess ReplacementFor_win[i]
UNKNOWN char char
<operator>.indirectIndexAccess ReplacementFor_owp[i]
<operator>.indirectIndexAccess ReplacementFor_totwin[ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_total[ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_win[i][\012ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_win[i]
UNKNOWN char char
<operator>.indirectIndexAccess ReplacementFor_owp[i]
<operator>.indirectIndexAccess ReplacementFor_totwin[ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_total[ReplacementFor_j]
>>>PDG&145 0->2 0->4 0->5 0->6 0->8 0->9 0->10 0->11 0->12 0->13 0->14 0->15 0->16 0->17 0->20 0->27 0->28 0->29 0->30 0->31 0->32 0->33 0->34 0->35 0->38 0->39 0->40 0->42 0->43 0->46 0->47 0->49 0->50 0->52 0->53 0->56 0->57 0->58 0->60 0->61 0->64 0->65 0->68 0->71 0->73 0->74 0->76 0->78 0->79 0->81 0->83 0->84 0->85 0->88 0->89 0->91 0->93 0->95 0->96 0->97 0->99 0->100 2->1 2->4 3->1 4->1 4->1 4->1 4->4 4->5 4->8 4->9 4->9 4->10 4->12 4->14 4->18 4->21 4->24 4->35 4->39 4->42 4->46 4->49 4->52 4->101 5->1 5->4 6->1 6->1 6->3 7->1 7->1 7->4 8->1 8->10 8->12 8->14 8->29 8->31 8->33 9->1 9->5 10->10 10->11 10->11 10->12 10->19 10->20 10->29 10->29 10->36 10->37 10->47 10->57 10->58 10->65 10->102 10->109 11->1 11->10 12->12 12->13 12->13 12->14 12->22 12->23 12->31 12->31 12->40 12->41 12->50 12->60 12->68 12->103 12->104 12->105 13->1 13->12 14->1 14->1 14->1 14->8 14->10 14->14 14->15 14->15 14->25 14->26 14->27 14->33 14->33 14->43 14->44 14->45 14->53 14->55 14->56 14->61 14->63 14->64 14->71 14->73 14->106 14->107 14->108 14->112 14->117 14->118 14->128 15->1 15->14 17->1 17->7 17->7 18->1 18->1 18->10 19->1 19->1 19->1 19->23 19->26 19->59 20->1 21->1 21->1 21->12 22->1 22->1 22->23 22->77 22->92 23->1 23->1 23->1 23->64 24->1 24->1 24->14 25->1 25->1 25->26 25->62 26->1 26->1 26->56 27->1 27->1 29->1 29->1 29->10 29->29 29->30 29->30 29->38 29->48 29->66 29->74 29->79 29->110 29->111 29->113 29->114 29->119 29->120 30->1 30->29 31->1 31->1 31->12 31->31 31->32 31->32 31->51 31->69 31->76 31->81 31->115 31->122 31->123 32->1 32->31 33->1 33->1 33->14 33->33 33->34 33->34 33->54 33->72 33->78 33->83 33->116 33->124 33->125 34->1 34->33 35->1 35->18 35->18 36->1 36->1 36->19 36->73 36->75 37->1 37->1 37->29 38->1 38->1 38->1 38->54 38->67 39->1 39->21 39->21 40->1 40->22 40->22 41->1 41->1 41->31 42->1 42->24 42->24 43->1 43->25 43->25 44->1 44->1 44->33 45->1 45->1 47->1 47->19 47->19 47->36 47->36 48->1 48->1 48->1 48->51 48->59 48->67 48->80 48->84 48->88 48->121 48->129 48->131 48->132 51->1 51->1 51->1 51->48 51->70 51->70 51->82 51->85 51->89 51->130 51->134 51->135 54->1 54->1 54->1 54->62 54->126 54->127 55->1 55->1 56->1 56->27 56->27 56->45 56->45 58->1 58->37 58->37 59->1 59->1 59->23 59->26 60->1 60->41 60->41 61->1 61->44 61->44 62->1 62->1 62->26 63->1 63->1 63->27 63->27 63->45 63->45 63->55 63->55 64->1 64->27 64->27 64->45 64->45 64->55 64->55 66->1 67->1 67->1 67->1 67->54 67->75 67->133 69->1 70->1 70->1 70->1 70->48 70->51 70->77 70->86 70->87 70->87 70->90 70->91 70->93 70->94 70->96 70->97 70->99 70->136 70->137 70->138 70->139 70->140 70->141 72->1 73->1 73->63 73->63 74->1 74->48 74->48 74->66 74->66 75->1 75->1 75->73 76->1 76->51 76->51 76->69 76->69 77->1 77->1 77->23 77->92 78->1 78->54 78->54 78->72 78->72 80->1 82->1 84->1 84->67 84->67 84->80 84->80 85->1 85->70 85->70 85->82 85->82 86->1 86->1 86->77 86->77 87->1 87->1 87->1 87->48 87->51 87->92 87->95 87->98 87->100 87->142 87->143 87->144 90->1 90->1 90->86 90->86 90->98 91->1 91->86 91->86 91->100 92->1 92->1 92->23 92->77 93->1 93->90 93->90 94->1 95->1 95->1 97->1 97->87 97->87 97->94 97->94 98->1 98->1 98->90 98->92 98->92 100->1 100->91 100->98 100->98
>>>Token int main ( ) { int i , ReplacementFor_j , ReplacementFor_tcase , T , ReplacementFor_N , ReplacementFor_total [ ReplacementFor_MAXN ] , ReplacementFor_totwin [ ReplacementFor_MAXN ] ; char ReplacementFor_win [ ReplacementFor_MAXN ] [ ReplacementFor_MAXN ] ; double ReplacementFor_owp [ ReplacementFor_MAXN ] , ReplacementFor_oowp [ ReplacementFor_MAXN ] ; scanf ( " \x25 \x64 " , & T ) ; for ( ReplacementFor_tcase = ( 0xb87 + 6494 - 0x24e4 ) ; ReplacementFor_tcase <= T ; ReplacementFor_tcase ++ ) { scanf ( " \x25 \x64 " , & ReplacementFor_N ) ; for ( i = ( 0x787 + 120 - 0x7ff ) ; i < ReplacementFor_N ; i ++ ) { ReplacementFor_total [ i ] = ReplacementFor_totwin [ i ] = ( 0x312 + 2529 - 0xcf3 ) ; getchar ( ) ; for ( ReplacementFor_j = ( 0x14ad + 1913 - 0x1c26 ) ; ReplacementFor_j < ReplacementFor_N ; ReplacementFor_j ++ ) { ReplacementFor_win [ i ] [ ReplacementFor_j ] = getchar ( ) ; if ( ReplacementFor_win [ i ] [ ReplacementFor_j ] != ( ( char ) ( 0xaef + 945 - 0xe72 ) ) ) { ReplacementFor_total [ i ] ++ ; if ( ReplacementFor_win [ i ] [ ReplacementFor_j ] == ( ( char ) ( 0x740 + 3145 - 0x1358 ) ) ) ReplacementFor_totwin [ i ] ++ ; } } } for ( i = ( 0x9a + 5510 - 0x1620 ) ; i < ReplacementFor_N ; i ++ ) { ReplacementFor_owp [ i ] = ( 0x854 + 911 - 0xbe3 ) ; for ( ReplacementFor_j = ( 0xb07 + 6723 - 0x254a ) ; ReplacementFor_j < ReplacementFor_N ; ReplacementFor_j ++ ) { if ( ReplacementFor_win [ i ] [ ReplacementFor_j ] != ( ( char ) ( 0xe88 + 6324 - 0x270e ) ) ) { if ( ReplacementFor_win [ i ] [ ReplacementFor_j ] == ( ( char ) ( 0x355 + 7472 - 0x2055 ) ) ) ReplacementFor_owp [ i ] += ( ReplacementFor_totwin [ ReplacementFor_j ] - ( 0x63c + 4993 - 0x19bc ) ) / ( ReplacementFor_total [ ReplacementFor_j ] - 1.0 ) ; else if ( ReplacementFor_win [ i ] [ ReplacementFor_j ] == ( ( char ) ( 0x100a + 4802 - 0x229b ) ) ) ReplacementFor_owp [ i ] += ReplacementFor_totwin [ ReplacementFor_j ] / ( ReplacementFor_total [ ReplacementFor_j ] - 1.0 ) ; else fprintf ( stderr , " \x57 \x72 \x6f \x6e \x67 \x20 \x69 \x6e \x70 \x75 \x74 \x20 \x72 \x65 \x61 \x64 \x69 \x6e \x67 \x21 " " \n " ) ; } } ReplacementFor_owp [ i ] /= ReplacementFor_total [ i ] ; } printf ( " \x43 \x61 \x73 \x65 \x20 \x23 \x25 \x64 \x3a " " \n " , ReplacementFor_tcase ) ; for ( i = ( 0xc20 + 721 - 0xef1 ) ; i < ReplacementFor_N ; i ++ ) { ReplacementFor_oowp [ i ] = ( 0xab3 + 7112 - 0x267b ) ; for ( ReplacementFor_j = ( 0xae3 + 4400 - 0x1c13 ) ; ReplacementFor_j < ReplacementFor_N ; ReplacementFor_j ++ ) { if ( ReplacementFor_win [ i ] [ ReplacementFor_j ] != ( ( char ) ( 0x9c + 9823 - 0x26cd ) ) ) ReplacementFor_oowp [ i ] += ReplacementFor_owp [ ReplacementFor_j ] ; } ReplacementFor_oowp [ i ] /= ReplacementFor_total [ i ] ; printf ( " \x25 \x2e \x31 \x32 \x66 " " \n " , ( 0.25 * ReplacementFor_totwin [ i ] ) / ReplacementFor_total [ i ] + 0.5 * ReplacementFor_owp [ i ] + 0.25 * ReplacementFor_oowp [ i ] ) ; } } return ( 0x1d59 + 2135 - 0x25b0 ) ; }
>>>Func
METHOD ReplacementFor_contains_hash
METHOD_RETURN int
PARAM ReplacementFor_hash_set_t*ReplacementFor_set
PARAM long long ReplacementFor_hash
RETURN return ReplacementFor_set->ReplacementFor_keys[\012ReplacementFor_retrieve_index_from_hash(ReplacementFor_hash,ReplacementFor_set->\012ReplacementFor_capacity)]?(0x4f4+7225-0x212c):(0x15c1+724-0x1895); return ReplacementFor_set->ReplacementFor_keys[\012ReplacementFor_retrieve_index_from_hash(ReplacementFor_hash,ReplacementFor_set->\012ReplacementFor_capacity)]?(0x4f4+7225-0x212c):(0x15c1+724-0x1895);
<operator>.conditional ReplacementFor_set->ReplacementFor_keys[\012ReplacementFor_retrieve_index_from_hash(ReplacementFor_hash,ReplacementFor_set->\012ReplacementFor_capacity)]?(0x4f4+7225-0x212c):(0x15c1+724-0x1895)
<operator>.subtraction 0x4f4+7225-0x212c
<operator>.subtraction 0x15c1+724-0x1895
ReplacementFor_retrieve_index_from_hash ReplacementFor_retrieve_index_from_hash(ReplacementFor_hash,ReplacementFor_set->\012ReplacementFor_capacity)
<operator>.addition 0x4f4+7225
<operator>.addition 0x15c1+724
<operator>.indirectIndexAccess ReplacementFor_set->ReplacementFor_keys[\012ReplacementFor_retrieve_index_from_hash(ReplacementFor_hash,ReplacementFor_set->\012ReplacementFor_capacity)]
>>>PDG&12 0->2 0->3 0->6 0->7 0->8 0->9 0->10 2->1 3->8 4->1 5->1 5->1 5->1 5->1 5->4 6->1 6->5 6->5 7->1 7->5 7->5 8->1 8->1 11->6 11->7 11->9 11->10
>>>Token int ReplacementFor_contains_hash ( ReplacementFor_hash_set_t * ReplacementFor_set , long long ReplacementFor_hash ) { return ReplacementFor_set -> ReplacementFor_keys [ ReplacementFor_retrieve_index_from_hash ( ReplacementFor_hash , ReplacementFor_set -> ReplacementFor_capacity ) ] ? ( 0x4f4 + 7225 - 0x212c ) : ( 0x15c1 + 724 - 0x1895 ) ; }
>>>Func
METHOD ReplacementFor_sort
METHOD_RETURN void
PARAM double ReplacementFor_x[]
PARAM int len
RETURN return; return;
<operator>.lessEqualsThan ReplacementFor_k<=len-(0x6df+5852-0x1db9)
<operator>.postIncrement ReplacementFor_k++
<operator>.assignment ReplacementFor_k=\012(0xeb4+185-0xf6d)
<operator>.assignment m=ReplacementFor_k
<operator>.assignment ReplacementFor_hold=\012ReplacementFor_x[m]
<operator>.assignment ReplacementFor_x[m]=ReplacementFor_x[ReplacementFor_k]
<operator>.assignment ReplacementFor_x[ReplacementFor_k]=ReplacementFor_hold
<operator>.subtraction len-(0x6df+5852-0x1db9)
<operator>.lessEqualsThan ReplacementFor_j<=len-(0xa27+2276-0x130a)
<operator>.postIncrement ReplacementFor_j++
<operator>.subtraction 0xeb4+185-0xf6d
<operator>.subtraction 0x6df+5852-0x1db9
<operator>.assignment ReplacementFor_j=ReplacementFor_k+(0x17a2+1182-0x1c3f)
<operator>.greaterThan ReplacementFor_x\012[ReplacementFor_j]>ReplacementFor_x[m]
<operator>.addition 0xeb4+185
<operator>.addition 0x6df+5852
<operator>.subtraction len-(0xa27+2276-0x130a)
<operator>.assignment m=ReplacementFor_j
<operator>.addition ReplacementFor_k+(0x17a2+1182-0x1c3f)
<operator>.subtraction 0xa27+2276-0x130a
<operator>.subtraction 0x17a2+1182-0x1c3f
<operator>.addition 0xa27+2276
<operator>.addition 0x17a2+1182
<operator>.indirectIndexAccess ReplacementFor_x[m]
<operator>.indirectIndexAccess ReplacementFor_x[m]
<operator>.indirectIndexAccess ReplacementFor_x[ReplacementFor_k]
<operator>.indirectIndexAccess ReplacementFor_x[ReplacementFor_k]
<operator>.indirectIndexAccess ReplacementFor_x\012[ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_x[m]
>>>PDG&34 0->2 0->3 0->4 0->5 0->6 0->8 0->11 0->12 0->13 0->14 0->15 0->16 0->17 0->19 0->20 0->21 0->22 0->23 0->24 0->25 0->26 0->27 2->1 2->9 2->10 2->18 3->12 4->1 5->1 5->1 5->1 5->5 5->6 5->6 5->8 5->8 5->9 5->10 5->11 5->12 5->13 5->16 5->17 5->17 5->20 5->21 5->23 5->23 5->24 5->25 5->26 5->27 5->28 5->29 5->30 5->31 6->1 6->5 7->1 7->1 7->5 8->1 8->1 9->1 9->11 10->1 10->1 10->9 10->18 11->1 11->1 11->1 11->10 12->1 12->1 12->5 12->5 12->21 13->1 13->1 13->1 13->13 13->14 13->14 13->18 13->21 13->22 13->24 13->26 13->32 13->33 14->1 14->13 15->1 15->7 15->7 16->1 16->12 16->12 17->1 17->1 17->13 18->1 18->1 18->9 18->22 21->1 21->12 21->13 21->13 22->1 22->1 23->1 24->1 24->21 24->21 25->1 25->17 25->17 25->23 25->23
>>>Token void ReplacementFor_sort ( double ReplacementFor_x [ ] , int len ) { int ReplacementFor_k , ReplacementFor_j , m ; double ReplacementFor_hold ; for ( ReplacementFor_k = ( 0xeb4 + 185 - 0xf6d ) ; ReplacementFor_k <= len - ( 0x6df + 5852 - 0x1db9 ) ; ReplacementFor_k ++ ) { m = ReplacementFor_k ; for ( ReplacementFor_j = ReplacementFor_k + ( 0x17a2 + 1182 - 0x1c3f ) ; ReplacementFor_j <= len - ( 0xa27 + 2276 - 0x130a ) ; ReplacementFor_j ++ ) if ( ReplacementFor_x [ ReplacementFor_j ] > ReplacementFor_x [ m ] ) m = ReplacementFor_j ; ReplacementFor_hold = ReplacementFor_x [ m ] ; ReplacementFor_x [ m ] = ReplacementFor_x [ ReplacementFor_k ] ; ReplacementFor_x [ ReplacementFor_k ] = ReplacementFor_hold ; } return ; }
>>>Func
METHOD main
METHOD_RETURN int
PARAM int ReplacementFor_argc
PARAM char**ReplacementFor_argv
process process(\012ReplacementFor_argv[(0x6a4+5933-0x1dd0)] ReplacementFor_argv[(0xa+4813-0x12d5)])
RETURN return EXIT_SUCCESS; return EXIT_SUCCESS;
<operator>.notEquals ReplacementFor_argc!=(0xbf7+1954-0x1396)
IDENTIFIER EXIT_SUCCESS return EXIT_SUCCESS;
fprintf fprintf(stderr,\012"\x70\x72\x6f\x75\x74" "\n")
exit exit((0x547+7974-0x246c))
<operator>.subtraction 0xbf7+1954-0x1396
<operator>.subtraction 0x6a4+5933-0x1dd0
<operator>.subtraction 0xa+4813-0x12d5
<operator>.addition 0xbf7+1954
<operator>.subtraction 0x547+7974-0x246c
<operator>.addition 0x6a4+5933
<operator>.addition 0xa+4813
<operator>.addition 0x547+7974
>>>PDG&18 0->2 0->3 0->5 0->6 0->7 0->8 0->10 0->11 0->12 0->13 0->14 0->15 0->16 0->17 2->6 3->1 3->4 4->1 4->1 4->1 5->1 6->1 6->1 6->1 6->8 6->9 6->14 6->17 7->5 8->1 8->1 9->1 10->1 10->6 10->6 11->1 12->1 14->1 14->9 14->9
>>>Token int main ( int ReplacementFor_argc , char * * ReplacementFor_argv ) { if ( ReplacementFor_argc != ( 0xbf7 + 1954 - 0x1396 ) ) { fprintf ( stderr , " \x70 \x72 \x6f \x75 \x74 " " \n " ) ; exit ( ( 0x547 + 7974 - 0x246c ) ) ; } process ( ReplacementFor_argv [ ( 0x6a4 + 5933 - 0x1dd0 ) ] , ReplacementFor_argv [ ( 0xa + 4813 - 0x12d5 ) ] ) ; return EXIT_SUCCESS ; }
>>>Func
METHOD ReplacementFor_contain
METHOD_RETURN int
PARAM char*ReplacementFor_word
PARAM int len
PARAM char \012ReplacementFor_c
<operator>.assignment i=(0x1c83+480-0x1e63)
RETURN return\012(0x3e1+3529-0x11aa); return\012(0x3e1+3529-0x11aa);
<operator>.lessThan i<len
<operator>.postIncrement i++
<operator>.subtraction 0x3e1+3529-0x11aa
<operator>.subtraction 0x1c83+480-0x1e63
<operator>.assignment i=(0x14dc+4086-0x24d2)
<operator>.equals ReplacementFor_word[i]==ReplacementFor_c
<operator>.addition 0x1c83+480
RETURN return(0x1e3d+891-0x21b7); return(0x1e3d+891-0x21b7);
<operator>.addition 0x3e1+3529
<operator>.subtraction 0x14dc+4086-0x24d2
<operator>.subtraction 0x1e3d+891-0x21b7
<operator>.addition 0x14dc+4086
<operator>.addition 0x1e3d+891
<operator>.indirectIndexAccess ReplacementFor_word[i]
>>>PDG&21 0->2 0->3 0->4 0->7 0->8 0->9 0->10 0->12 0->13 0->15 0->16 0->17 0->18 0->19 2->1 2->12 3->7 4->12 5->1 5->1 6->1 7->1 7->1 7->1 7->6 7->8 7->9 7->12 7->15 7->20 8->1 8->7 9->6 10->1 10->5 10->5 11->1 11->1 11->7 12->1 12->1 12->1 12->7 12->8 12->14 12->17 12->19 14->1 16->1 16->11 16->11 17->1 17->1 17->14
>>>Token int ReplacementFor_contain ( char * ReplacementFor_word , int len , char ReplacementFor_c ) { int i = ( 0x1c83 + 480 - 0x1e63 ) ; for ( i = ( 0x14dc + 4086 - 0x24d2 ) ; i < len ; i ++ ) if ( ReplacementFor_word [ i ] == ReplacementFor_c ) return ( 0x1e3d + 891 - 0x21b7 ) ; return ( 0x3e1 + 3529 - 0x11aa ) ; }
>>>Func
METHOD ReplacementFor_LCM
METHOD_RETURN int
PARAM int ReplacementFor_a
PARAM int ReplacementFor_b
RETURN return \012ReplacementFor_LCM(ReplacementFor_b,ReplacementFor_a%ReplacementFor_b); return \012ReplacementFor_LCM(ReplacementFor_b,ReplacementFor_a%ReplacementFor_b);
<operator>.equals ReplacementFor_b==(0x425+5233-0x1896)
ReplacementFor_LCM ReplacementFor_LCM(ReplacementFor_b,ReplacementFor_a%ReplacementFor_b)
RETURN return ReplacementFor_a; return ReplacementFor_a;
<operator>.subtraction 0x425+5233-0x1896
IDENTIFIER ReplacementFor_a return ReplacementFor_a;
<operator>.modulo ReplacementFor_a%ReplacementFor_b
<operator>.addition 0x425+5233
>>>PDG&12 0->2 0->3 0->5 0->6 0->8 0->9 0->10 0->11 2->1 2->9 2->10 3->5 4->1 5->1 5->1 5->1 5->4 5->6 5->7 5->10 5->10 6->4 7->1 8->1 8->5 8->5 9->7 10->6 10->6
>>>Token int ReplacementFor_LCM ( int ReplacementFor_a , int ReplacementFor_b ) { if ( ReplacementFor_b == ( 0x425 + 5233 - 0x1896 ) ) return ReplacementFor_a ; return ReplacementFor_LCM ( ReplacementFor_b , ReplacementFor_a % ReplacementFor_b ) ; }
>>>Func
METHOD main
METHOD_RETURN int
scanf scanf("\x25\x64",&T)
RETURN return(0x5a6+7334-0x224c); return(0x5a6+7334-0x224c);
<operator>.lessThan i<T
<operator>.postIncrement i++
<operator>.subtraction 0x5a6+7334-0x224c
<operator>.assignment i=(0x1202+737-0x14e3)
scanf scanf("\x25\x64",&ReplacementFor_C)
scanf scanf("\x25\x64",&ReplacementFor_D)
scanf scanf("\x25\x64",&ReplacementFor_N)
scanf scanf(\012"\x25\x73",ReplacementFor_str)
<operator>.assignment ReplacementFor_top=-(0x105+6997-0x1c59)
<operator>.assignment ReplacementFor_fopp1=-(0x3f0+7211-0x201a)
<operator>.assignment ReplacementFor_fopp2=-\012(0x1894+1270-0x1d89)
printf printf("\x43\x61\x73\x65\x20\x23\x25\x64\x3a\x20\x5b" i+\012(0x296+6691-0x1cb8))
<operator>.equals ReplacementFor_C==(0x1ae6+1730-0x21a7)
<operator>.equals ReplacementFor_D==(0x1201+3135-0x1e3f)
<operator>.equals ReplacementFor_C==(0x1662+894-0x19e0)
<operator>.equals ReplacementFor_D==(0x212+1869-0x95f)
<operator>.lessThan ReplacementFor_cur<ReplacementFor_N
<operator>.postIncrement ReplacementFor_cur++
<operator>.lessThan ReplacementFor_pr\012<ReplacementFor_top
<operator>.postIncrement ReplacementFor_pr++
<operator>.notEquals ReplacementFor_top!=-\012(0x1828+3233-0x24c8)
<operator>.addition 0x5a6+7334
<operator>.subtraction 0x1202+737-0x14e3
scanf scanf("\x25\x73",ReplacementFor_comb)
scanf scanf("\x25\x73",ReplacementFor_opp)
<operator>.minus -(0x105+6997-0x1c59)
<operator>.minus -(0x3f0+7211-0x201a)
<operator>.minus -\012(0x1894+1270-0x1d89)
<operator>.assignment ReplacementFor_comb[(0x1d31+1460-0x22e5)]=((char)(0x3a3+3618-0x1195))
<operator>.equals ReplacementFor_opp[(0x18f7+2582-0x230d)]==\012((char)(0x827+2317-0x1103))
<operator>.assignment ReplacementFor_cur=(0x20ea+444-0x22a6)
<operator>.assignment ReplacementFor_ch=\012ReplacementFor_str[ReplacementFor_cur]
<operator>.assignment ReplacementFor_stack[++ReplacementFor_top\012]=ReplacementFor_ch
<operator>.addition i+\012(0x296+6691-0x1cb8)
<operator>.assignment ReplacementFor_pr=(0x982+2591-0x13a1)
printf printf("\x25\x63\x2c\x20",\012ReplacementFor_stack[ReplacementFor_pr])
printf printf("\x25\x63\x5d" "\n",ReplacementFor_stack[\012ReplacementFor_top])
<operator>.addition 0x1202+737
<operator>.subtraction 0x1ae6+1730-0x21a7
<operator>.subtraction 0x1201+3135-0x1e3f
<operator>.subtraction 0x105+6997-0x1c59
<operator>.subtraction 0x3f0+7211-0x201a
<operator>.subtraction 0x1894+1270-0x1d89
<operator>.subtraction 0x1662+894-0x19e0
<operator>.subtraction 0x212+1869-0x95f
<operator>.logicalOr (ReplacementFor_stack[ReplacementFor_top]==\012ReplacementFor_comb[(0x1762+604-0x19be)]&&ReplacementFor_stack[\012ReplacementFor_top-(0x178f+1750-0x1e64)]==ReplacementFor_comb[\012(0x1229+2699-0x1cb3)]&&ReplacementFor_top!=(0x1986+2604-0x23b2))||(\012ReplacementFor_stack[ReplacementFor_top]==ReplacementFor_comb[\012(0x8a2+2152-0x1109)]&&ReplacementFor_stack[ReplacementFor_top-\012(0x22a7+409-0x243f)]==ReplacementFor_comb[(0x1e58+1214-0x2316)]&&\012ReplacementFor_top!=(0x13e6+2320-0x1cf6))
<operator>.logicalAnd ReplacementFor_stack[\012ReplacementFor_top]==ReplacementFor_opp[(0x52a+2231-0xde1)]&&\012ReplacementFor_fopp1==-(0x126c+2702-0x1cf9)
<operator>.logicalAnd ReplacementFor_stack[ReplacementFor_top]==\012ReplacementFor_opp[(0x11f0+4644-0x2413)]&&ReplacementFor_fopp2==-\012(0x1447+3652-0x228a)
<operator>.logicalAnd ReplacementFor_fopp1!=-(0x1312+4908-0x263d)&&ReplacementFor_fopp2!=-\012(0x1339+4306-0x240a)
<operator>.subtraction 0x296+6691-0x1cb8
<operator>.minus -\012(0x1828+3233-0x24c8)
printf printf("\x5d" "\n")
<operator>.addition 0x1ae6+1730
<operator>.addition 0x1201+3135
<operator>.addition 0x105+6997
<operator>.addition 0x3f0+7211
<operator>.addition 0x1894+1270
<operator>.addition 0x1662+894
<operator>.cast (char)(0x3a3+3618-0x1195)
<operator>.addition 0x212+1869
<operator>.cast (char)(0x827+2317-0x1103)
<operator>.subtraction 0x20ea+444-0x22a6
<operator>.assignment ReplacementFor_stack[\012ReplacementFor_top]=(0x8b8+1733-0xf7d)
<operator>.postDecrement ReplacementFor_top--
<operator>.assignment ReplacementFor_stack\012[ReplacementFor_top]=ReplacementFor_comb[(0x19e8+2187-0x2271)]
<operator>.assignment ReplacementFor_fopp1=\012ReplacementFor_top
<operator>.assignment ReplacementFor_fopp2=ReplacementFor_top
<operator>.assignment ReplacementFor_top=-(0x64b+3442-0x13bc)
<operator>.assignment ReplacementFor_fopp1=-(0x1269+4235-0x22f3)
<operator>.assignment ReplacementFor_fopp2=-\012(0x74f+7383-0x2425)
<operator>.addition 0x296+6691
<operator>.subtraction 0x982+2591-0x13a1
<operator>.subtraction 0x1828+3233-0x24c8
<operator>.subtraction 0x1d31+1460-0x22e5
<operator>.subtraction 0x3a3+3618-0x1195
<operator>.subtraction 0x18f7+2582-0x230d
<operator>.subtraction 0x827+2317-0x1103
<operator>.addition 0x20ea+444
<operator>.preIncrement ++ReplacementFor_top
<operator>.logicalAnd ReplacementFor_stack[ReplacementFor_top]==\012ReplacementFor_comb[(0x1762+604-0x19be)]&&ReplacementFor_stack[\012ReplacementFor_top-(0x178f+1750-0x1e64)]==ReplacementFor_comb[\012(0x1229+2699-0x1cb3)]&&ReplacementFor_top!=(0x1986+2604-0x23b2)
<operator>.logicalAnd ReplacementFor_stack[ReplacementFor_top]==ReplacementFor_comb[\012(0x8a2+2152-0x1109)]&&ReplacementFor_stack[ReplacementFor_top-\012(0x22a7+409-0x243f)]==ReplacementFor_comb[(0x1e58+1214-0x2316)]&&\012ReplacementFor_top!=(0x13e6+2320-0x1cf6)
<operator>.equals ReplacementFor_fopp1==ReplacementFor_top
<operator>.equals ReplacementFor_fopp2==ReplacementFor_top
<operator>.equals ReplacementFor_stack[\012ReplacementFor_top]==ReplacementFor_opp[(0x52a+2231-0xde1)]
<operator>.equals ReplacementFor_fopp1==-(0x126c+2702-0x1cf9)
<operator>.equals ReplacementFor_stack[ReplacementFor_top]==\012ReplacementFor_opp[(0x11f0+4644-0x2413)]
<operator>.equals ReplacementFor_fopp2==-\012(0x1447+3652-0x228a)
<operator>.notEquals ReplacementFor_fopp1!=-(0x1312+4908-0x263d)
<operator>.notEquals ReplacementFor_fopp2!=-\012(0x1339+4306-0x240a)
<operator>.addition 0x982+2591
<operator>.addition 0x1828+3233
<operator>.addition 0x1d31+1460
<operator>.addition 0x3a3+3618
<operator>.addition 0x18f7+2582
<operator>.addition 0x827+2317
<operator>.logicalAnd ReplacementFor_stack[ReplacementFor_top]==\012ReplacementFor_comb[(0x1762+604-0x19be)]&&ReplacementFor_stack[\012ReplacementFor_top-(0x178f+1750-0x1e64)]==ReplacementFor_comb[\012(0x1229+2699-0x1cb3)]
<operator>.notEquals ReplacementFor_top!=(0x1986+2604-0x23b2)
<operator>.logicalAnd ReplacementFor_stack[ReplacementFor_top]==ReplacementFor_comb[\012(0x8a2+2152-0x1109)]&&ReplacementFor_stack[ReplacementFor_top-\012(0x22a7+409-0x243f)]==ReplacementFor_comb[(0x1e58+1214-0x2316)]
<operator>.notEquals ReplacementFor_top!=(0x13e6+2320-0x1cf6)
<operator>.subtraction 0x8b8+1733-0xf7d
<operator>.assignment ReplacementFor_fopp1=-\012(0xb05+1297-0x1015)
<operator>.assignment ReplacementFor_fopp2=-(0x2116+1210-0x25cf)
<operator>.minus -(0x126c+2702-0x1cf9)
<operator>.minus -\012(0x1447+3652-0x228a)
<operator>.minus -(0x1312+4908-0x263d)
<operator>.minus -\012(0x1339+4306-0x240a)
<operator>.minus -(0x64b+3442-0x13bc)
<operator>.minus -(0x1269+4235-0x22f3)
<operator>.minus -\012(0x74f+7383-0x2425)
<operator>.equals ReplacementFor_stack[ReplacementFor_top]==\012ReplacementFor_comb[(0x1762+604-0x19be)]
<operator>.equals ReplacementFor_stack[\012ReplacementFor_top-(0x178f+1750-0x1e64)]==ReplacementFor_comb[\012(0x1229+2699-0x1cb3)]
<operator>.subtraction 0x1986+2604-0x23b2
<operator>.equals ReplacementFor_stack[ReplacementFor_top]==ReplacementFor_comb[\012(0x8a2+2152-0x1109)]
<operator>.equals ReplacementFor_stack[ReplacementFor_top-\012(0x22a7+409-0x243f)]==ReplacementFor_comb[(0x1e58+1214-0x2316)]
<operator>.subtraction 0x13e6+2320-0x1cf6
<operator>.addition 0x8b8+1733
<operator>.subtraction 0x19e8+2187-0x2271
<operator>.subtraction 0x52a+2231-0xde1
<operator>.subtraction 0x126c+2702-0x1cf9
<operator>.subtraction 0x11f0+4644-0x2413
<operator>.subtraction 0x1447+3652-0x228a
<operator>.subtraction 0x1312+4908-0x263d
<operator>.subtraction 0x1339+4306-0x240a
<operator>.subtraction 0x64b+3442-0x13bc
<operator>.subtraction 0x1269+4235-0x22f3
<operator>.subtraction 0x74f+7383-0x2425
<operator>.addition 0x1986+2604
<operator>.addition 0x13e6+2320
<operator>.addition 0x19e8+2187
<operator>.minus -\012(0xb05+1297-0x1015)
<operator>.minus -(0x2116+1210-0x25cf)
<operator>.addition 0x52a+2231
<operator>.addition 0x126c+2702
<operator>.addition 0x11f0+4644
<operator>.addition 0x1447+3652
<operator>.addition 0x1312+4908
<operator>.addition 0x1339+4306
<operator>.addition 0x64b+3442
<operator>.addition 0x1269+4235
<operator>.addition 0x74f+7383
<operator>.subtraction 0x1762+604-0x19be
<operator>.subtraction ReplacementFor_top-(0x178f+1750-0x1e64)
<operator>.subtraction 0x1229+2699-0x1cb3
<operator>.subtraction 0x8a2+2152-0x1109
<operator>.subtraction ReplacementFor_top-\012(0x22a7+409-0x243f)
<operator>.subtraction 0x1e58+1214-0x2316
<operator>.subtraction 0xb05+1297-0x1015
<operator>.subtraction 0x2116+1210-0x25cf
<operator>.addition 0x1762+604
<operator>.subtraction 0x178f+1750-0x1e64
<operator>.addition 0x1229+2699
<operator>.addition 0x8a2+2152
<operator>.subtraction 0x22a7+409-0x243f
<operator>.addition 0x1e58+1214
<operator>.addition 0xb05+1297
<operator>.addition 0x2116+1210
<operator>.addition 0x178f+1750
<operator>.addition 0x22a7+409
<operator>.addressOf &ReplacementFor_C
<operator>.addressOf &ReplacementFor_D
<operator>.addressOf &ReplacementFor_N
<operator>.indirectIndexAccess ReplacementFor_comb[(0x1d31+1460-0x22e5)]
<operator>.indirectIndexAccess ReplacementFor_opp[(0x18f7+2582-0x230d)]
<operator>.indirectIndexAccess ReplacementFor_str[ReplacementFor_cur]
<operator>.indirectIndexAccess ReplacementFor_stack[++ReplacementFor_top\012]
<operator>.indirectIndexAccess ReplacementFor_stack[ReplacementFor_pr]
<operator>.indirectIndexAccess ReplacementFor_stack[\012ReplacementFor_top]
UNKNOWN char char
UNKNOWN char char
<operator>.indirectIndexAccess ReplacementFor_stack[\012ReplacementFor_top]
<operator>.indirectIndexAccess ReplacementFor_stack\012[ReplacementFor_top]
<operator>.indirectIndexAccess ReplacementFor_comb[(0x19e8+2187-0x2271)]
<operator>.indirectIndexAccess ReplacementFor_stack[\012ReplacementFor_top]
<operator>.indirectIndexAccess ReplacementFor_opp[(0x52a+2231-0xde1)]
<operator>.indirectIndexAccess ReplacementFor_stack[ReplacementFor_top]
<operator>.indirectIndexAccess ReplacementFor_opp[(0x11f0+4644-0x2413)]
<operator>.indirectIndexAccess ReplacementFor_stack[ReplacementFor_top]
<operator>.indirectIndexAccess ReplacementFor_comb[(0x1762+604-0x19be)]
<operator>.indirectIndexAccess ReplacementFor_stack[\012ReplacementFor_top-(0x178f+1750-0x1e64)]
<operator>.indirectIndexAccess ReplacementFor_comb[\012(0x1229+2699-0x1cb3)]
<operator>.indirectIndexAccess ReplacementFor_stack[ReplacementFor_top]
<operator>.indirectIndexAccess ReplacementFor_comb[\012(0x8a2+2152-0x1109)]
<operator>.indirectIndexAccess ReplacementFor_stack[ReplacementFor_top-\012(0x22a7+409-0x243f)]
<operator>.indirectIndexAccess ReplacementFor_comb[(0x1e58+1214-0x2316)]
>>>PDG&188 0->2 0->4 0->5 0->6 0->8 0->9 0->10 0->11 0->15 0->16 0->17 0->18 0->19 0->20 0->21 0->22 0->23 0->24 0->25 0->26 0->27 0->28 0->36 0->37 0->39 0->40 0->41 0->42 0->43 0->44 0->45 0->46 0->47 0->48 0->53 0->55 0->56 0->57 0->58 0->59 0->60 0->61 0->63 0->65 0->67 0->69 0->70 0->74 0->75 0->76 0->77 0->78 0->79 0->80 0->81 0->82 0->85 0->86 0->88 0->90 0->91 0->92 0->93 0->94 0->95 0->96 0->97 0->98 0->100 0->102 0->103 0->115 0->118 0->119 0->120 0->121 0->122 0->123 0->124 0->125 0->126 0->127 0->128 0->129 0->130 0->131 0->132 0->135 0->136 0->137 0->138 0->139 0->140 0->141 0->142 0->143 0->144 0->145 0->146 0->147 0->148 0->149 0->150 0->151 0->152 0->153 0->154 0->155 0->156 0->157 0->158 0->159 0->160 0->161 2->1 2->4 3->1 4->1 4->1 4->1 4->4 4->5 4->5 4->8 4->9 4->10 4->11 4->12 4->13 4->14 4->15 4->15 4->16 4->17 4->18 4->19 4->20 4->22 4->24 4->29 4->30 4->31 4->34 4->37 4->37 4->38 4->42 4->43 4->44 4->45 4->46 4->47 4->48 4->53 4->54 4->56 4->57 4->58 4->59 4->60 4->61 4->63 4->65 4->74 4->75 4->76 4->81 4->93 4->94 4->162 4->163 4->164 5->1 5->4 6->1 6->1 6->3 7->1 7->1 7->4 8->1 8->16 8->18 9->1 9->17 9->19 10->1 10->20 11->1 11->35 12->1 12->1 12->22 12->82 13->1 13->1 13->1 13->85 13->88 13->91 14->1 14->1 14->1 14->86 14->90 14->92 15->1 15->1 16->1 16->1 16->18 16->27 17->1 17->1 17->19 17->28 18->1 18->1 18->1 18->8 18->16 18->32 18->62 18->77 18->78 18->95 18->96 18->165 18->171 19->1 19->1 19->1 19->9 19->17 19->33 19->64 19->79 19->80 19->97 19->98 19->166 19->172 20->1 20->1 20->1 20->10 20->20 20->21 20->21 20->35 20->36 20->49 20->50 20->51 20->52 20->82 20->83 20->87 20->89 20->91 20->99 20->108 20->113 20->121 20->123 20->125 20->135 20->137 20->139 20->144 20->152 20->167 20->168 20->176 20->177 20->178 20->179 20->180 20->181 21->1 21->20 22->1 22->1 22->22 22->23 22->23 22->24 22->39 22->169 23->1 23->22 24->1 24->1 24->1 24->40 24->55 24->170 26->1 26->7 26->7 27->1 27->68 27->113 27->114 27->116 27->117 28->1 28->33 28->87 28->89 29->1 29->12 30->1 30->13 31->1 31->14 32->1 32->1 32->1 32->27 33->1 33->1 33->1 33->28 34->1 34->1 34->20 35->1 35->1 35->36 36->1 36->1 36->1 37->1 38->1 38->1 38->22 39->1 39->1 40->1 40->1 40->87 42->1 42->16 42->16 43->1 43->17 43->17 44->1 44->29 44->29 45->1 45->30 45->30 46->1 46->31 46->31 47->1 47->18 47->18 48->1 48->19 48->19 49->1 49->1 49->1 49->66 49->67 49->68 49->85 49->86 49->103 49->119 49->120 49->132 49->173 49->174 49->175 50->1 50->1 50->1 50->69 51->1 51->1 51->1 51->70 52->1 52->1 52->1 52->71 52->72 52->73 52->110 52->111 52->112 52->127 52->128 52->129 52->141 52->142 52->143 53->1 53->15 53->15 53->37 53->37 54->1 54->24 55->1 62->1 64->1 65->1 65->34 65->34 66->1 66->1 66->87 67->1 67->85 68->1 68->1 68->1 69->1 69->91 70->1 70->1 70->86 70->90 70->92 71->1 71->1 71->22 71->82 72->1 72->1 72->1 72->85 72->88 72->91 73->1 73->1 73->1 73->86 73->90 73->92 75->1 75->38 75->38 76->1 76->54 76->54 77->1 78->1 78->32 78->32 78->62 78->62 79->1 80->1 80->33 80->33 80->64 80->64 82->22 82->67 82->69 82->70 82->100 82->102 82->145 82->148 83->1 83->1 83->49 83->49 83->84 83->101 83->116 83->147 83->155 83->184 83->185 84->1 84->1 84->49 84->49 85->1 85->86 85->88 85->91 85->104 85->133 85->150 85->158 86->1 86->1 86->22 86->69 86->70 86->82 86->90 86->92 86->105 86->134 86->151 86->159 87->1 87->1 87->28 87->40 87->50 87->50 87->88 87->106 87->122 87->136 88->1 88->50 88->50 88->91 89->1 89->1 89->28 89->51 89->51 89->90 89->107 89->113 89->124 89->138 90->1 90->1 90->51 90->51 90->86 90->92 91->1 91->1 91->52 91->52 91->85 91->88 91->92 91->109 91->126 91->140 92->1 92->1 92->52 92->52 92->86 92->90 99->1 99->1 99->83 99->83 99->100 99->115 99->130 100->1 100->22 100->67 100->69 100->70 100->82 100->83 100->83 100->102 100->148 101->1 101->1 101->84 101->84 101->102 101->118 101->131 102->1 102->22 102->67 102->69 102->70 102->82 102->84 102->84 103->1 103->66 103->66 104->1 104->1 104->88 104->91 105->1 105->1 105->1 105->86 105->90 105->92 106->1 106->88 107->1 107->90 108->1 108->91 109->1 109->92 110->1 110->71 111->1 111->72 112->1 112->73 113->1 113->27 113->89 113->99 113->99 113->114 113->116 113->145 113->146 113->153 113->154 113->160 113->182 113->183 114->1 114->1 114->27 114->99 114->99 115->1 115->100 115->100 116->1 116->27 116->89 116->101 116->101 116->117 116->148 116->149 116->156 116->157 116->161 116->186 116->187 117->1 117->1 117->27 117->101 117->101 118->1 118->102 118->102 120->1 121->1 122->1 122->106 122->106 123->1 124->1 124->107 124->107 125->1 125->108 125->108 126->1 126->109 126->109 127->1 127->110 127->110 128->1 128->111 128->111 129->1 129->112 129->112 133->1 133->104 134->1 134->105 144->1 145->1 145->22 145->67 145->69 145->70 145->82 145->100 145->102 145->148 146->1 147->1 148->1 148->22 148->67 148->69 148->70 148->82 148->102 149->1 150->1 150->133 150->133 151->1 151->134 151->134 153->1 153->145 153->145 156->1 156->148 156->148
>>>Token int main ( ) { char ReplacementFor_str [ ( 0xafd + 2629 - 0x152e ) ] , ReplacementFor_stack [ ( 0x15c + 1452 - 0x6f4 ) ] , ReplacementFor_ch , ReplacementFor_comb [ ( 0x914 + 2236 - 0x11cd ) ] , ReplacementFor_opp [ ( 0x5eb + 935 - 0x990 ) ] ; int ReplacementFor_fopp1 , ReplacementFor_fopp2 , ReplacementFor_top , ReplacementFor_N , ReplacementFor_C , T , ReplacementFor_D ; int i , ReplacementFor_cur , ReplacementFor_pr ; scanf ( " \x25 \x64 " , & T ) ; for ( i = ( 0x1202 + 737 - 0x14e3 ) ; i < T ; i ++ ) { scanf ( " \x25 \x64 " , & ReplacementFor_C ) ; if ( ReplacementFor_C == ( 0x1ae6 + 1730 - 0x21a7 ) ) { scanf ( " \x25 \x73 " , ReplacementFor_comb ) ; } scanf ( " \x25 \x64 " , & ReplacementFor_D ) ; if ( ReplacementFor_D == ( 0x1201 + 3135 - 0x1e3f ) ) { scanf ( " \x25 \x73 " , ReplacementFor_opp ) ; } scanf ( " \x25 \x64 " , & ReplacementFor_N ) ; scanf ( " \x25 \x73 " , ReplacementFor_str ) ; ReplacementFor_top = - ( 0x105 + 6997 - 0x1c59 ) ; ReplacementFor_fopp1 = - ( 0x3f0 + 7211 - 0x201a ) ; ReplacementFor_fopp2 = - ( 0x1894 + 1270 - 0x1d89 ) ; if ( ReplacementFor_C == ( 0x1662 + 894 - 0x19e0 ) ) { ReplacementFor_comb [ ( 0x1d31 + 1460 - 0x22e5 ) ] = ( ( char ) ( 0x3a3 + 3618 - 0x1195 ) ) ; } if ( ReplacementFor_D == ( 0x212 + 1869 - 0x95f ) ) { ReplacementFor_opp [ ( 0x18f7 + 2582 - 0x230d ) ] == ( ( char ) ( 0x827 + 2317 - 0x1103 ) ) ; } for ( ReplacementFor_cur = ( 0x20ea + 444 - 0x22a6 ) ; ReplacementFor_cur < ReplacementFor_N ; ReplacementFor_cur ++ ) { ReplacementFor_ch = ReplacementFor_str [ ReplacementFor_cur ] ; ReplacementFor_stack [ ++ ReplacementFor_top ] = ReplacementFor_ch ; if ( ( ReplacementFor_stack [ ReplacementFor_top ] == ReplacementFor_comb [ ( 0x1762 + 604 - 0x19be ) ] && ReplacementFor_stack [ ReplacementFor_top - ( 0x178f + 1750 - 0x1e64 ) ] == ReplacementFor_comb [ ( 0x1229 + 2699 - 0x1cb3 ) ] && ReplacementFor_top != ( 0x1986 + 2604 - 0x23b2 ) ) || ( ReplacementFor_stack [ ReplacementFor_top ] == ReplacementFor_comb [ ( 0x8a2 + 2152 - 0x1109 ) ] && ReplacementFor_stack [ ReplacementFor_top - ( 0x22a7 + 409 - 0x243f ) ] == ReplacementFor_comb [ ( 0x1e58 + 1214 - 0x2316 ) ] && ReplacementFor_top != ( 0x13e6 + 2320 - 0x1cf6 ) ) ) { ReplacementFor_stack [ ReplacementFor_top ] = ( 0x8b8 + 1733 - 0xf7d ) ; ReplacementFor_top -- ; ReplacementFor_stack [ ReplacementFor_top ] = ReplacementFor_comb [ ( 0x19e8 + 2187 - 0x2271 ) ] ; if ( ReplacementFor_fopp1 == ReplacementFor_top ) { ReplacementFor_fopp1 = - ( 0xb05 + 1297 - 0x1015 ) ; } if ( ReplacementFor_fopp2 == ReplacementFor_top ) { ReplacementFor_fopp2 = - ( 0x2116 + 1210 - 0x25cf ) ; } } if ( ReplacementFor_stack [ ReplacementFor_top ] == ReplacementFor_opp [ ( 0x52a + 2231 - 0xde1 ) ] && ReplacementFor_fopp1 == - ( 0x126c + 2702 - 0x1cf9 ) ) { ReplacementFor_fopp1 = ReplacementFor_top ; } if ( ReplacementFor_stack [ ReplacementFor_top ] == ReplacementFor_opp [ ( 0x11f0 + 4644 - 0x2413 ) ] && ReplacementFor_fopp2 == - ( 0x1447 + 3652 - 0x228a ) ) { ReplacementFor_fopp2 = ReplacementFor_top ; } if ( ReplacementFor_fopp1 != - ( 0x1312 + 4908 - 0x263d ) && ReplacementFor_fopp2 != - ( 0x1339 + 4306 - 0x240a ) ) { ReplacementFor_top = - ( 0x64b + 3442 - 0x13bc ) ; ReplacementFor_fopp1 = - ( 0x1269 + 4235 - 0x22f3 ) ; ReplacementFor_fopp2 = - ( 0x74f + 7383 - 0x2425 ) ; } } printf ( " \x43 \x61 \x73 \x65 \x20 \x23 \x25 \x64 \x3a \x20 \x5b " , i + ( 0x296 + 6691 - 0x1cb8 ) ) ; for ( ReplacementFor_pr = ( 0x982 + 2591 - 0x13a1 ) ; ReplacementFor_pr < ReplacementFor_top ; ReplacementFor_pr ++ ) { printf ( " \x25 \x63 \x2c \x20 " , ReplacementFor_stack [ ReplacementFor_pr ] ) ; } if ( ReplacementFor_top != - ( 0x1828 + 3233 - 0x24c8 ) ) printf ( " \x25 \x63 \x5d " " \n " , ReplacementFor_stack [ ReplacementFor_top ] ) ; else printf ( " \x5d " " \n " ) ; } return ( 0x5a6 + 7334 - 0x224c ) ; }
>>>Func
METHOD main
METHOD_RETURN int
<operator>.assignment ReplacementFor_test_cases=(0xeb3+747-0x119e)
scanf scanf("\x25\x64",&\012ReplacementFor_test_cases)
<operator>.lessThan i<ReplacementFor_test_cases
<operator>.postIncrement i\012++
<operator>.subtraction 0xeb3+747-0x119e
<operator>.assignment i=(0x417+160-0x4b7)
scanf scanf("\x25\x64",&ReplacementFor_num_teams)
<operator>.assignment ReplacementFor_schedule_matrix=(int**)malloc(sizeof(int*)*\012ReplacementFor_num_teams)
printf printf(\012"\x43\x61\x73\x65\x20\x23\x25\x64\x3a" "\n" i+(0x1a55+1902-0x21c2))
<operator>.addition 0xeb3+747
<operator>.lessThan j1<ReplacementFor_num_teams
<operator>.postIncrement j1++
<operator>.lessThan j1<\012ReplacementFor_num_teams
<operator>.postIncrement j1++
<operator>.lessThan j1<ReplacementFor_num_teams
<operator>.postIncrement j1++
<operator>.lessThan j1<ReplacementFor_num_teams
<operator>.postIncrement j1++
<operator>.subtraction 0x417+160-0x4b7
<operator>.cast (int**)malloc(sizeof(int*)*\012ReplacementFor_num_teams)
<operator>.assignment j1=(0x96c+2113-0x11ad)
<operator>.assignment ReplacementFor_schedule_matrix[j1]=(int*)malloc(sizeof(int)*\012ReplacementFor_num_teams)
scanf scanf("\x25\x73",ReplacementFor_char_chumma)
<operator>.assignment ReplacementFor_WP[j1]=0.0
<operator>.assignment ReplacementFor_OWP[j1]=0.0
<operator>.assignment ReplacementFor_OOWP[j1]=0.0
<operator>.assignment ReplacementFor_num_played[j1]=(0x57b+6925-0x2088)
<operator>.assignment ReplacementFor_num_won[j1]=\012(0x1aeb+1700-0x218f)
<operator>.assignment j1=(0xa6c+3852-0x1978)
<operator>.assignment j1=\012(0x16db+3545-0x24b4)
<operator>.assignment ReplacementFor_running_sum=0.0
<operator>.assignment ReplacementFor_num_opponents=(0xb38+2949-0x16bd)
<operator>.addition i+(0x1a55+1902-0x21c2)
<operator>.assignment j1=\012(0xe44+3314-0x1b36)
<operator>.assignment ReplacementFor_RPI=0.0
<operator>.assignment ReplacementFor_running_sum=0.0
<operator>.assignment ReplacementFor_num_opponents=(0x141f+407-0x15b6)
<operator>.assignmentPlus ReplacementFor_RPI+=(0.25)*ReplacementFor_WP[j1]
<operator>.assignmentPlus ReplacementFor_RPI+=0.50*ReplacementFor_OWP[j1]
<operator>.assignmentPlus ReplacementFor_RPI+=0.25*\012ReplacementFor_OOWP[j1]
printf printf("\x25\x6c\x66" "\n",ReplacementFor_RPI)
<operator>.addition 0x417+160
malloc malloc(sizeof(int*)*\012ReplacementFor_num_teams)
<operator>.lessThan ReplacementFor_j2<ReplacementFor_num_teams
<operator>.postIncrement ReplacementFor_j2++
<operator>.lessThan ReplacementFor_j2<ReplacementFor_num_teams
<operator>.postIncrement ReplacementFor_j2++
<operator>.notEquals ReplacementFor_num_played[j1]!=(0x2ac+2336-0xbcc)
<operator>.lessThan ReplacementFor_j2<\012ReplacementFor_num_teams
<operator>.postIncrement ReplacementFor_j2++
<operator>.greaterThan ReplacementFor_num_opponents>(0x1188+1113-0x15e1)
<operator>.subtraction 0x1a55+1902-0x21c2
<operator>.lessThan ReplacementFor_j2<ReplacementFor_num_teams
<operator>.postIncrement ReplacementFor_j2++
<operator>.greaterThan ReplacementFor_num_opponents>\012(0x241+8671-0x2420)
<operator>.multiplication sizeof(int*)*\012ReplacementFor_num_teams
<operator>.subtraction 0x96c+2113-0x11ad
<operator>.cast (int*)malloc(sizeof(int)*\012ReplacementFor_num_teams)
<operator>.subtraction 0x57b+6925-0x2088
<operator>.subtraction 0x1aeb+1700-0x218f
<operator>.assignment ReplacementFor_j2=(0x1d00+1630-0x235e)
<operator>.subtraction 0xa6c+3852-0x1978
<operator>.assignment ReplacementFor_j2=(0x1762+3506-0x2514)
<operator>.assignment ReplacementFor_WP[j1]=(double\012)(ReplacementFor_num_won[j1])/(double)(ReplacementFor_num_played[j1])
<operator>.subtraction 0x16db+3545-0x24b4
<operator>.subtraction 0xb38+2949-0x16bd
<operator>.assignment ReplacementFor_j2=(0x13c4+2269-0x1ca1)
<operator>.postIncrement ReplacementFor_num_opponents++
<operator>.assignment ReplacementFor_OWP[j1]=\012ReplacementFor_running_sum/((double)ReplacementFor_num_opponents)
<operator>.addition 0x1a55+1902
<operator>.subtraction 0xe44+3314-0x1b36
<operator>.subtraction 0x141f+407-0x15b6
<operator>.assignment ReplacementFor_j2=\012(0x7ea+81-0x83b)
<operator>.assignmentPlus ReplacementFor_running_sum+=ReplacementFor_OWP[ReplacementFor_j2]
<operator>.postIncrement ReplacementFor_num_opponents++
<operator>.assignment ReplacementFor_OOWP[j1]=ReplacementFor_running_sum/((double\012)ReplacementFor_num_opponents)
<operator>.multiplication (0.25)*ReplacementFor_WP[j1]
<operator>.multiplication 0.50*ReplacementFor_OWP[j1]
<operator>.multiplication 0.25*\012ReplacementFor_OOWP[j1]
<operator>.sizeOf sizeof(int*)
<operator>.addition 0x96c+2113
malloc malloc(sizeof(int)*\012ReplacementFor_num_teams)
<operator>.addition 0x57b+6925
<operator>.addition 0x1aeb+1700
<operator>.equals ReplacementFor_char_chumma[ReplacementFor_j2]==((char)(0x1123+1304-0x160d))
<operator>.addition 0xa6c+3852
<operator>.notEquals ReplacementFor_schedule_matrix[j1][ReplacementFor_j2]!=-(0x12+2562-0xa13)
<operator>.equals ReplacementFor_schedule_matrix[j1][\012ReplacementFor_j2]==(0x6d4+7230-0x2311)
<operator>.subtraction 0x2ac+2336-0xbcc
<operator>.addition 0x16db+3545
<operator>.addition 0xb38+2949
<operator>.equals ReplacementFor_schedule_matrix[\012j1][ReplacementFor_j2]==-(0x2f2+2888-0xe39)
<operator>.equals ReplacementFor_schedule_matrix[j1][ReplacementFor_j2]==(0x20ed+882-0x245f)
<operator>.equals ReplacementFor_schedule_matrix[j1][ReplacementFor_j2]\012==(0xf7f+543-0x119d)
<operator>.subtraction 0x1188+1113-0x15e1
<operator>.addition 0xe44+3314
<operator>.addition 0x141f+407
<operator>.equals ReplacementFor_schedule_matrix[j1][ReplacementFor_j2]==-(0x1329+1567-0x1947)
<operator>.subtraction 0x241+8671-0x2420
<operator>.multiplication sizeof(int)*\012ReplacementFor_num_teams
<operator>.subtraction 0x1d00+1630-0x235e
<operator>.assignment ReplacementFor_schedule_matrix[j1][ReplacementFor_j2]=-(0x18ea+1412-0x1e6d)
<operator>.subtraction 0x1762+3506-0x2514
<operator>.postIncrement ReplacementFor_num_played[j1]++
<operator>.postIncrement ReplacementFor_num_won[j1]++
<operator>.addition 0x2ac+2336
<operator>.division (double\012)(ReplacementFor_num_won[j1])/(double)(ReplacementFor_num_played[j1])
<operator>.subtraction 0x13c4+2269-0x1ca1
<operator>.addition 0x1188+1113
<operator>.division ReplacementFor_running_sum/((double)ReplacementFor_num_opponents)
<operator>.subtraction 0x7ea+81-0x83b
<operator>.addition 0x241+8671
<operator>.division ReplacementFor_running_sum/((double\012)ReplacementFor_num_opponents)
<operator>.sizeOf sizeof(int)
<operator>.addition 0x1d00+1630
<operator>.cast (char)(0x1123+1304-0x160d)
<operator>.addition 0x1762+3506
<operator>.minus -(0x12+2562-0xa13)
<operator>.subtraction 0x6d4+7230-0x2311
<operator>.cast (double\012)(ReplacementFor_num_won[j1])
<operator>.cast (double)(ReplacementFor_num_played[j1])
<operator>.addition 0x13c4+2269
<operator>.minus -(0x2f2+2888-0xe39)
<operator>.subtraction 0x20ed+882-0x245f
<operator>.greaterThan ReplacementFor_num_played[ReplacementFor_j2]>(0x8c+1073-0x4bc)
<operator>.subtraction 0xf7f+543-0x119d
<operator>.greaterThan ReplacementFor_num_played[ReplacementFor_j2]>\012(0x1064+5781-0x26f8)
<operator>.cast (double)ReplacementFor_num_opponents
<operator>.addition 0x7ea+81
<operator>.minus -(0x1329+1567-0x1947)
<operator>.cast (double\012)ReplacementFor_num_opponents
<operator>.subtraction 0x1123+1304-0x160d
<operator>.minus -(0x18ea+1412-0x1e6d)
<operator>.equals ReplacementFor_char_chumma[ReplacementFor_j2]==\012((char)(0x12f5+3266-0x1f86))
<operator>.subtraction 0x12+2562-0xa13
<operator>.addition 0x6d4+7230
<operator>.subtraction 0x2f2+2888-0xe39
<operator>.addition 0x20ed+882
<operator>.assignmentPlus ReplacementFor_running_sum+=(double)(ReplacementFor_num_won[ReplacementFor_j2]-\012(0x1174+1766-0x1859))/(double)(ReplacementFor_num_played[ReplacementFor_j2]-\012(0xd6a+5787-0x2404))
<operator>.addition 0xf7f+543
<operator>.assignmentPlus ReplacementFor_running_sum+=(double)(\012ReplacementFor_num_won[ReplacementFor_j2])/(double)(ReplacementFor_num_played[\012ReplacementFor_j2]-(0x714+4307-0x17e6))
<operator>.subtraction 0x1329+1567-0x1947
<operator>.addition 0x1123+1304
<operator>.subtraction 0x18ea+1412-0x1e6d
<operator>.assignment ReplacementFor_schedule_matrix[j1][\012ReplacementFor_j2]=(0x16b+7766-0x1fc0)
<operator>.addition 0x12+2562
<operator>.addition 0x2f2+2888
<operator>.subtraction 0x8c+1073-0x4bc
<operator>.subtraction 0x1064+5781-0x26f8
<operator>.addition 0x1329+1567
<operator>.addition 0x18ea+1412
<operator>.cast (char)(0x12f5+3266-0x1f86)
<operator>.addition 0x8c+1073
<operator>.division (double)(ReplacementFor_num_won[ReplacementFor_j2]-\012(0x1174+1766-0x1859))/(double)(ReplacementFor_num_played[ReplacementFor_j2]-\012(0xd6a+5787-0x2404))
<operator>.addition 0x1064+5781
<operator>.division (double)(\012ReplacementFor_num_won[ReplacementFor_j2])/(double)(ReplacementFor_num_played[\012ReplacementFor_j2]-(0x714+4307-0x17e6))
<operator>.subtraction 0x12f5+3266-0x1f86
<operator>.subtraction 0x16b+7766-0x1fc0
<operator>.equals ReplacementFor_char_chumma[\012ReplacementFor_j2]==((char)(0x234+7420-0x1f00))
<operator>.cast (double)(ReplacementFor_num_won[ReplacementFor_j2]-\012(0x1174+1766-0x1859))
<operator>.cast (double)(ReplacementFor_num_played[ReplacementFor_j2]-\012(0xd6a+5787-0x2404))
<operator>.cast (double)(\012ReplacementFor_num_won[ReplacementFor_j2])
<operator>.cast (double)(ReplacementFor_num_played[\012ReplacementFor_j2]-(0x714+4307-0x17e6))
<operator>.addition 0x12f5+3266
<operator>.addition 0x16b+7766
<operator>.assignment ReplacementFor_schedule_matrix[\012j1][ReplacementFor_j2]=(0x4a7+6932-0x1fbb)
<operator>.subtraction ReplacementFor_num_won[ReplacementFor_j2]-\012(0x1174+1766-0x1859)
<operator>.subtraction ReplacementFor_num_played[ReplacementFor_j2]-\012(0xd6a+5787-0x2404)
<operator>.subtraction ReplacementFor_num_played[\012ReplacementFor_j2]-(0x714+4307-0x17e6)
<operator>.cast (char)(0x234+7420-0x1f00)
<operator>.subtraction 0x1174+1766-0x1859
<operator>.subtraction 0xd6a+5787-0x2404
<operator>.subtraction 0x714+4307-0x17e6
<operator>.subtraction 0x234+7420-0x1f00
<operator>.subtraction 0x4a7+6932-0x1fbb
<operator>.addition 0x1174+1766
<operator>.addition 0xd6a+5787
<operator>.addition 0x714+4307
<operator>.addition 0x234+7420
<operator>.addition 0x4a7+6932
<operator>.addressOf &ReplacementFor_num_teams
UNKNOWN int** int**
<operator>.indirectIndexAccess ReplacementFor_schedule_matrix[j1]
<operator>.indirectIndexAccess ReplacementFor_WP[j1]
<operator>.indirectIndexAccess ReplacementFor_OWP[j1]
<operator>.indirectIndexAccess ReplacementFor_OOWP[j1]
<operator>.indirectIndexAccess ReplacementFor_num_played[j1]
<operator>.indirectIndexAccess ReplacementFor_num_won[j1]
UNKNOWN int* int*
<operator>.indirectIndexAccess ReplacementFor_num_played[j1]
<operator>.indirectIndexAccess ReplacementFor_WP[j1]
<operator>.indirectIndexAccess ReplacementFor_OWP[j1]
<operator>.indirectIndexAccess ReplacementFor_OOWP[j1]
<operator>.indirectIndexAccess ReplacementFor_WP[j1]
<operator>.indirectIndexAccess ReplacementFor_OWP[j1]
<operator>.indirectIndexAccess ReplacementFor_OWP[ReplacementFor_j2]
<operator>.indirectIndexAccess ReplacementFor_OOWP[j1]
<operator>.indirectIndexAccess ReplacementFor_char_chumma[ReplacementFor_j2]
<operator>.indirectIndexAccess ReplacementFor_schedule_matrix[j1][ReplacementFor_j2]
<operator>.indirectIndexAccess ReplacementFor_schedule_matrix[j1][\012ReplacementFor_j2]
<operator>.indirectIndexAccess ReplacementFor_schedule_matrix[\012j1][ReplacementFor_j2]
<operator>.indirectIndexAccess ReplacementFor_schedule_matrix[j1][ReplacementFor_j2]
<operator>.indirectIndexAccess ReplacementFor_schedule_matrix[j1][ReplacementFor_j2]
<operator>.indirectIndexAccess ReplacementFor_schedule_matrix[j1][ReplacementFor_j2]
UNKNOWN char char
<operator>.indirectIndexAccess ReplacementFor_schedule_matrix[j1][ReplacementFor_j2]
<operator>.indirectIndexAccess ReplacementFor_schedule_matrix[j1]
<operator>.indirectIndexAccess ReplacementFor_num_played[j1]
<operator>.indirectIndexAccess ReplacementFor_schedule_matrix[j1]
<operator>.indirectIndexAccess ReplacementFor_num_won[j1]
UNKNOWN double double
<operator>.indirectIndexAccess ReplacementFor_num_won[j1]
UNKNOWN double double
<operator>.indirectIndexAccess ReplacementFor_num_played[j1]
<operator>.indirectIndexAccess ReplacementFor_schedule_matrix[\012j1]
<operator>.indirectIndexAccess ReplacementFor_schedule_matrix[j1]
<operator>.indirectIndexAccess ReplacementFor_schedule_matrix[j1]
UNKNOWN double double
<operator>.indirectIndexAccess ReplacementFor_schedule_matrix[j1]
UNKNOWN double double
<operator>.indirectIndexAccess ReplacementFor_schedule_matrix[j1]
<operator>.indirectIndexAccess ReplacementFor_num_played[ReplacementFor_j2]
<operator>.indirectIndexAccess ReplacementFor_num_played[ReplacementFor_j2]
<operator>.indirectIndexAccess ReplacementFor_char_chumma[ReplacementFor_j2]
UNKNOWN char char
<operator>.indirectIndexAccess ReplacementFor_schedule_matrix[j1][\012ReplacementFor_j2]
<operator>.indirectIndexAccess ReplacementFor_schedule_matrix[j1]
UNKNOWN double double
UNKNOWN double double
UNKNOWN double double
<operator>.indirectIndexAccess ReplacementFor_num_won[ReplacementFor_j2]
UNKNOWN double double
<operator>.indirectIndexAccess ReplacementFor_char_chumma[\012ReplacementFor_j2]
<operator>.indirectIndexAccess ReplacementFor_num_won[ReplacementFor_j2]
<operator>.indirectIndexAccess ReplacementFor_num_played[ReplacementFor_j2]
<operator>.indirectIndexAccess ReplacementFor_num_played[\012ReplacementFor_j2]
UNKNOWN char char
<operator>.indirectIndexAccess ReplacementFor_schedule_matrix[\012j1][ReplacementFor_j2]
<operator>.indirectIndexAccess ReplacementFor_schedule_matrix[\012j1]
>>>PDG&241 0->3 0->4 0->5 0->6 0->8 0->10 0->11 0->12 0->13 0->14 0->15 0->16 0->17 0->18 0->19 0->20 0->24 0->25 0->26 0->27 0->32 0->34 0->36 0->37 0->39 0->40 0->41 0->42 0->43 0->45 0->46 0->47 0->48 0->50 0->51 0->52 0->53 0->54 0->55 0->56 0->57 0->58 0->60 0->61 0->63 0->66 0->67 0->69 0->71 0->72 0->73 0->75 0->76 0->78 0->79 0->80 0->82 0->84 0->85 0->87 0->90 0->91 0->92 0->96 0->97 0->98 0->100 0->101 0->102 0->104 0->107 0->109 0->110 0->111 0->112 0->113 0->114 0->116 0->118 0->120 0->123 0->125 0->127 0->129 0->130 0->132 0->133 0->136 0->137 0->138 0->139 0->140 0->141 0->142 0->143 0->144 0->145 0->147 0->148 0->149 0->150 0->151 0->152 0->154 0->156 0->158 0->159 0->165 0->166 0->172 0->173 0->174 0->175 0->176 0->177 0->178 0->179 0->180 0->181 2->1 2->1 2->3 2->4 3->1 3->4 4->1 4->1 4->1 4->4 4->5 4->5 4->8 4->9 4->10 4->10 4->12 4->14 4->16 4->18 4->21 4->22 4->30 4->31 4->34 4->34 4->35 4->44 4->53 4->57 4->58 4->63 4->66 4->71 4->72 4->81 4->82 4->87 4->91 4->97 4->182 4->183 5->1 5->4 6->1 6->2 6->2 7->1 7->1 7->4 8->1 8->12 8->14 8->16 8->18 8->45 8->47 8->50 8->54 8->57 8->101 9->1 9->1 9->1 10->1 10->1 12->12 12->13 12->13 12->14 12->23 12->24 12->25 12->26 12->27 12->28 12->29 12->45 12->59 12->60 12->61 12->62 12->83 12->84 12->85 12->101 12->101 12->102 12->115 12->116 12->184 12->185 12->186 12->187 12->188 12->189 12->190 13->1 13->12 14->1 14->14 14->15 14->15 14->16 14->47 14->47 14->49 14->64 14->90 14->104 14->107 14->118 14->191 15->1 15->14 16->16 16->17 16->17 16->18 16->32 16->33 16->50 16->50 16->52 16->67 16->68 16->92 16->96 16->109 16->110 16->123 17->1 17->16 18->1 18->1 18->1 18->8 18->18 18->19 18->19 18->36 18->37 18->38 18->39 18->40 18->41 18->42 18->54 18->54 18->56 18->57 18->73 18->74 18->78 18->79 18->80 18->98 18->100 18->112 18->113 18->130 18->192 18->193 18->194 19->1 19->18 20->1 20->7 20->7 21->1 22->1 22->1 22->12 23->1 23->1 23->1 24->1 24->86 24->135 24->160 25->1 25->1 25->78 26->1 26->1 26->79 27->1 27->1 27->80 28->1 28->1 28->1 28->49 28->105 29->1 29->1 29->1 29->106 29->108 29->121 30->1 30->1 30->14 31->1 31->1 31->16 32->1 32->1 32->111 32->140 32->142 33->1 33->1 33->52 33->69 34->1 35->1 35->1 35->18 36->1 36->39 37->1 37->1 37->75 37->114 38->1 38->1 38->56 38->76 39->1 39->1 39->40 40->1 40->1 40->41 41->1 41->1 41->42 42->1 42->1 44->1 44->9 44->21 45->1 45->1 45->12 45->45 45->46 45->46 45->86 45->117 45->133 45->144 45->199 45->206 46->1 46->45 47->1 47->1 47->14 47->47 47->48 47->48 47->88 47->89 47->119 47->120 47->136 47->137 47->147 47->200 47->201 47->208 47->210 48->1 48->47 49->1 49->1 49->1 49->65 49->105 49->108 49->108 49->121 49->122 49->122 49->195 49->212 49->213 49->214 49->215 50->1 50->1 50->16 50->50 50->51 50->51 50->93 50->124 50->138 50->148 50->202 50->216 51->1 51->50 52->1 52->1 52->1 52->70 52->111 52->111 52->129 52->129 52->196 52->219 53->1 53->10 53->10 53->34 53->34 54->1 54->1 54->18 54->54 54->55 54->55 54->99 54->131 54->143 54->151 54->205 54->220 55->1 55->54 56->1 56->1 56->1 56->77 56->114 56->114 56->132 56->132 56->198 56->221 57->12 57->44 58->1 58->22 58->22 59->1 60->1 60->28 60->28 61->1 61->29 61->29 62->1 62->1 62->45 63->1 63->30 63->30 64->1 64->1 64->47 65->1 65->1 65->1 65->78 66->1 66->31 66->31 67->1 67->33 67->33 68->1 68->1 68->50 69->1 69->52 70->1 70->1 70->1 70->79 72->1 72->35 72->35 73->1 73->38 73->38 74->1 74->1 74->54 75->1 75->1 75->1 75->114 76->1 76->56 77->1 77->1 77->80 78->1 78->39 78->39 79->1 79->40 79->40 80->1 80->41 80->41 81->1 83->1 83->23 83->59 86->1 86->1 86->1 86->24 86->103 86->134 86->135 86->135 86->145 86->152 86->153 86->158 86->165 86->207 86->222 86->225 86->226 88->1 88->1 88->1 88->94 88->99 88->105 88->209 89->1 89->1 89->1 89->106 89->211 90->1 90->49 90->49 93->1 93->1 93->1 93->69 93->94 93->95 93->125 93->127 93->139 93->141 93->203 93->204 93->217 93->218 94->1 94->1 94->95 94->126 94->149 94->154 94->223 95->1 95->1 95->1 95->88 95->94 95->99 95->128 95->150 95->156 95->224 96->1 96->52 96->52 99->1 99->1 99->1 99->75 99->76 99->88 99->94 99->197 100->1 100->56 100->56 101->45 101->83 102->1 102->62 102->62 103->1 103->1 103->1 103->88 103->94 103->99 104->1 104->64 104->64 105->1 105->49 106->1 106->1 106->108 106->121 108->1 108->1 108->65 108->65 109->1 109->68 109->68 111->1 111->1 111->70 111->70 112->1 112->74 112->74 114->1 114->1 114->77 114->77 115->1 117->1 119->1 119->88 120->1 120->89 120->89 121->1 122->1 124->1 124->93 125->1 125->94 125->94 126->1 126->1 126->1 126->128 126->140 126->155 126->161 126->162 126->168 126->169 126->169 126->172 126->173 126->177 126->178 126->229 126->230 126->235 126->236 127->1 127->95 127->95 128->1 128->1 128->1 128->126 128->142 128->157 128->163 128->164 128->170 128->174 128->179 128->231 128->232 128->233 128->237 129->1 131->1 131->99 132->1 133->1 133->86 133->86 133->117 133->117 134->1 134->103 135->1 135->1 135->1 135->24 135->86 135->146 135->159 135->160 135->166 135->171 135->175 135->180 135->227 135->228 135->234 135->238 136->1 136->119 136->119 138->1 138->124 138->124 140->1 140->1 140->1 140->111 140->142 142->1 142->1 142->1 142->111 142->140 143->1 143->131 143->131 145->1 145->134 145->134 146->1 146->1 146->1 146->89 149->1 149->126 149->126 150->1 150->128 150->128 153->1 155->1 155->1 155->140 155->140 157->1 157->1 157->142 157->142 158->1 158->135 158->135 158->153 158->153 159->1 159->146 159->146 160->1 160->1 160->1 160->24 160->167 160->176 160->181 160->239 160->240 161->1 162->1 163->1 164->1 167->1 167->1 167->1 167->93 168->1 168->1 168->155 168->155 168->157 168->161 168->161 168->163 169->1 169->1 169->126 169->128 169->155 169->155 169->162 169->162 170->1 170->1 170->157 170->157 170->164 170->164 171->1 172->1 172->168 172->168 173->1 173->169 173->169 174->1 174->170 174->170 175->1 175->160 175->160 175->171 175->171 176->1 176->167 176->167
>>>Token int main ( ) { int ReplacementFor_test_cases = ( 0xeb3 + 747 - 0x119e ) ; char * ReplacementFor_inputline ; int * len ; int i , ReplacementFor_j ; scanf ( " \x25 \x64 " , & ReplacementFor_test_cases ) ; for ( i = ( 0x417 + 160 - 0x4b7 ) ; i < ReplacementFor_test_cases ; i ++ ) { int ReplacementFor_num_teams ; int * * ReplacementFor_schedule_matrix ; int j1 , ReplacementFor_j2 ; char ReplacementFor_char_chumma [ ( 0x7e4 + 8271 - 0x244b ) ] ; double ReplacementFor_WP [ ( 0x1ba5 + 13 - 0x17ca ) ] ; double ReplacementFor_OWP [ ( 0x9a0 + 2119 - 0xdff ) ] ; double ReplacementFor_OOWP [ ( 0xc9a + 458 - 0xa7c ) ] ; int ReplacementFor_num_played [ ( 0x45b + 3749 - 0xf18 ) ] ; int ReplacementFor_num_won [ ( 0x80c + 7761 - 0x2275 ) ] ; scanf ( " \x25 \x64 " , & ReplacementFor_num_teams ) ; ReplacementFor_schedule_matrix = ( int * * ) malloc ( sizeof ( int * ) * ReplacementFor_num_teams ) ; for ( j1 = ( 0x96c + 2113 - 0x11ad ) ; j1 < ReplacementFor_num_teams ; j1 ++ ) { ReplacementFor_schedule_matrix [ j1 ] = ( int * ) malloc ( sizeof ( int ) * ReplacementFor_num_teams ) ; scanf ( " \x25 \x73 " , ReplacementFor_char_chumma ) ; ReplacementFor_WP [ j1 ] = 0.0 ; ReplacementFor_OWP [ j1 ] = 0.0 ; ReplacementFor_OOWP [ j1 ] = 0.0 ; ReplacementFor_num_played [ j1 ] = ( 0x57b + 6925 - 0x2088 ) ; ReplacementFor_num_won [ j1 ] = ( 0x1aeb + 1700 - 0x218f ) ; for ( ReplacementFor_j2 = ( 0x1d00 + 1630 - 0x235e ) ; ReplacementFor_j2 < ReplacementFor_num_teams ; ReplacementFor_j2 ++ ) { if ( ReplacementFor_char_chumma [ ReplacementFor_j2 ] == ( ( char ) ( 0x1123 + 1304 - 0x160d ) ) ) { ReplacementFor_schedule_matrix [ j1 ] [ ReplacementFor_j2 ] = - ( 0x18ea + 1412 - 0x1e6d ) ; } else if ( ReplacementFor_char_chumma [ ReplacementFor_j2 ] == ( ( char ) ( 0x12f5 + 3266 - 0x1f86 ) ) ) { ReplacementFor_schedule_matrix [ j1 ] [ ReplacementFor_j2 ] = ( 0x16b + 7766 - 0x1fc0 ) ; } else if ( ReplacementFor_char_chumma [ ReplacementFor_j2 ] == ( ( char ) ( 0x234 + 7420 - 0x1f00 ) ) ) { ReplacementFor_schedule_matrix [ j1 ] [ ReplacementFor_j2 ] = ( 0x4a7 + 6932 - 0x1fbb ) ; } } } for ( j1 = ( 0xa6c + 3852 - 0x1978 ) ; j1 < ReplacementFor_num_teams ; j1 ++ ) { for ( ReplacementFor_j2 = ( 0x1762 + 3506 - 0x2514 ) ; ReplacementFor_j2 < ReplacementFor_num_teams ; ReplacementFor_j2 ++ ) { if ( ReplacementFor_schedule_matrix [ j1 ] [ ReplacementFor_j2 ] != - ( 0x12 + 2562 - 0xa13 ) ) { ReplacementFor_num_played [ j1 ] ++ ; } if ( ReplacementFor_schedule_matrix [ j1 ] [ ReplacementFor_j2 ] == ( 0x6d4 + 7230 - 0x2311 ) ) { ReplacementFor_num_won [ j1 ] ++ ; } } if ( ReplacementFor_num_played [ j1 ] != ( 0x2ac + 2336 - 0xbcc ) ) { ReplacementFor_WP [ j1 ] = ( double ) ( ReplacementFor_num_won [ j1 ] ) / ( double ) ( ReplacementFor_num_played [ j1 ] ) ; } } for ( j1 = ( 0x16db + 3545 - 0x24b4 ) ; j1 < ReplacementFor_num_teams ; j1 ++ ) { int ReplacementFor_num_opponents ; double ReplacementFor_running_sum ; ReplacementFor_running_sum = 0.0 ; ReplacementFor_num_opponents = ( 0xb38 + 2949 - 0x16bd ) ; for ( ReplacementFor_j2 = ( 0x13c4 + 2269 - 0x1ca1 ) ; ReplacementFor_j2 < ReplacementFor_num_teams ; ReplacementFor_j2 ++ ) { if ( ReplacementFor_schedule_matrix [ j1 ] [ ReplacementFor_j2 ] == - ( 0x2f2 + 2888 - 0xe39 ) ) { continue ; } if ( ReplacementFor_schedule_matrix [ j1 ] [ ReplacementFor_j2 ] == ( 0x20ed + 882 - 0x245f ) ) { if ( ReplacementFor_num_played [ ReplacementFor_j2 ] > ( 0x8c + 1073 - 0x4bc ) ) { ReplacementFor_running_sum += ( double ) ( ReplacementFor_num_won [ ReplacementFor_j2 ] - ( 0x1174 + 1766 - 0x1859 ) ) / ( double ) ( ReplacementFor_num_played [ ReplacementFor_j2 ] - ( 0xd6a + 5787 - 0x2404 ) ) ; } } if ( ReplacementFor_schedule_matrix [ j1 ] [ ReplacementFor_j2 ] == ( 0xf7f + 543 - 0x119d ) ) { if ( ReplacementFor_num_played [ ReplacementFor_j2 ] > ( 0x1064 + 5781 - 0x26f8 ) ) { ReplacementFor_running_sum += ( double ) ( ReplacementFor_num_won [ ReplacementFor_j2 ] ) / ( double ) ( ReplacementFor_num_played [ ReplacementFor_j2 ] - ( 0x714 + 4307 - 0x17e6 ) ) ; } } ReplacementFor_num_opponents ++ ; } if ( ReplacementFor_num_opponents > ( 0x1188 + 1113 - 0x15e1 ) ) { ReplacementFor_OWP [ j1 ] = ReplacementFor_running_sum / ( ( double ) ReplacementFor_num_opponents ) ; } } printf ( " \x43 \x61 \x73 \x65 \x20 \x23 \x25 \x64 \x3a " " \n " , i + ( 0x1a55 + 1902 - 0x21c2 ) ) ; for ( j1 = ( 0xe44 + 3314 - 0x1b36 ) ; j1 < ReplacementFor_num_teams ; j1 ++ ) { int ReplacementFor_num_opponents ; double ReplacementFor_running_sum ; double ReplacementFor_RPI ; ReplacementFor_RPI = 0.0 ; ReplacementFor_running_sum = 0.0 ; ReplacementFor_num_opponents = ( 0x141f + 407 - 0x15b6 ) ; for ( ReplacementFor_j2 = ( 0x7ea + 81 - 0x83b ) ; ReplacementFor_j2 < ReplacementFor_num_teams ; ReplacementFor_j2 ++ ) { if ( ReplacementFor_schedule_matrix [ j1 ] [ ReplacementFor_j2 ] == - ( 0x1329 + 1567 - 0x1947 ) ) { continue ; } ReplacementFor_running_sum += ReplacementFor_OWP [ ReplacementFor_j2 ] ; ReplacementFor_num_opponents ++ ; } if ( ReplacementFor_num_opponents > ( 0x241 + 8671 - 0x2420 ) ) { ReplacementFor_OOWP [ j1 ] = ReplacementFor_running_sum / ( ( double ) ReplacementFor_num_opponents ) ; } ReplacementFor_RPI += ( 0.25 ) * ReplacementFor_WP [ j1 ] ; ReplacementFor_RPI += 0.50 * ReplacementFor_OWP [ j1 ] ; ReplacementFor_RPI += 0.25 * ReplacementFor_OOWP [ j1 ] ; printf ( " \x25 \x6c \x66 " " \n " , ReplacementFor_RPI ) ; } } }
>>>Func
METHOD clear
METHOD_RETURN void
memset memset(ReplacementFor_count (0x45b+3784-0x1323) sizeof(\012ReplacementFor_count))
strcpy strcpy(ReplacementFor_vastus,"")
<operator>.assignment ReplacementFor_vlength=\012(0x1c0a+269-0x1d17)
<operator>.subtraction 0x45b+3784-0x1323
<operator>.subtraction 0x1c0a+269-0x1d17
<operator>.addition 0x45b+3784
<operator>.addition 0x1c0a+269
>>>PDG&9 0->2 0->3 0->5 0->6 0->7 0->8 2->1 2->1 2->1 3->1 3->1 4->1 4->1 4->1 5->1 5->2 5->2 6->1 6->4 6->4
>>>Token void clear ( ) { memset ( ReplacementFor_count , ( 0x45b + 3784 - 0x1323 ) , sizeof ( ReplacementFor_count ) ) ; strcpy ( ReplacementFor_vastus , " " ) ; ReplacementFor_vlength = ( 0x1c0a + 269 - 0x1d17 ) ; }
>>>Func
METHOD ReplacementFor_rangeSumBST
METHOD_RETURN int
PARAM struct ReplacementFor_TreeNode*\012ReplacementFor_root
PARAM int L
PARAM int ReplacementFor_R
<operator>.equals ReplacementFor_root==NULL
RETURN return(0x769+7300-0x23ed); return(0x769+7300-0x23ed);
<operator>.subtraction 0x769+7300-0x23ed
<operator>.logicalAnd ReplacementFor_root->val>=L&&\012ReplacementFor_root->val<=ReplacementFor_R
<operator>.addition 0x769+7300
RETURN return ReplacementFor_root->val+\012ReplacementFor_rangeSumBST(ReplacementFor_root->ReplacementFor_left,L,\012ReplacementFor_R)+ReplacementFor_rangeSumBST(ReplacementFor_root->\012ReplacementFor_right,L,ReplacementFor_R); return ReplacementFor_root->val+\012ReplacementFor_rangeSumBST(ReplacementFor_root->ReplacementFor_left,L,\012ReplacementFor_R)+ReplacementFor_rangeSumBST(ReplacementFor_root->\012ReplacementFor_right,L,ReplacementFor_R);
<operator>.greaterEqualsThan ReplacementFor_root->val>=L
<operator>.lessEqualsThan ReplacementFor_root->val<=ReplacementFor_R
<operator>.addition ReplacementFor_root->val+\012ReplacementFor_rangeSumBST(ReplacementFor_root->ReplacementFor_left,L,\012ReplacementFor_R)+ReplacementFor_rangeSumBST(ReplacementFor_root->\012ReplacementFor_right,L,ReplacementFor_R)
RETURN return ReplacementFor_rangeSumBST\012(ReplacementFor_root->ReplacementFor_left,L,ReplacementFor_R)+\012ReplacementFor_rangeSumBST(ReplacementFor_root->ReplacementFor_right,L,\012ReplacementFor_R); return ReplacementFor_rangeSumBST\012(ReplacementFor_root->ReplacementFor_left,L,ReplacementFor_R)+\012ReplacementFor_rangeSumBST(ReplacementFor_root->ReplacementFor_right,L,\012ReplacementFor_R);
<operator>.addition ReplacementFor_rangeSumBST\012(ReplacementFor_root->ReplacementFor_left,L,ReplacementFor_R)+\012ReplacementFor_rangeSumBST(ReplacementFor_root->ReplacementFor_right,L,\012ReplacementFor_R)
<operator>.addition ReplacementFor_root->val+\012ReplacementFor_rangeSumBST(ReplacementFor_root->ReplacementFor_left,L,\012ReplacementFor_R)
ReplacementFor_rangeSumBST ReplacementFor_rangeSumBST(ReplacementFor_root->\012ReplacementFor_right,L,ReplacementFor_R)
ReplacementFor_rangeSumBST ReplacementFor_rangeSumBST(ReplacementFor_root->ReplacementFor_left,L,\012ReplacementFor_R)
ReplacementFor_rangeSumBST ReplacementFor_rangeSumBST\012(ReplacementFor_root->ReplacementFor_left,L,ReplacementFor_R)
ReplacementFor_rangeSumBST ReplacementFor_rangeSumBST(ReplacementFor_root->ReplacementFor_right,L,\012ReplacementFor_R)
<operator>.indirectFieldAccess ReplacementFor_root->val
<operator>.indirectFieldAccess ReplacementFor_root->val
FIELD_IDENTIFIER val val
FIELD_IDENTIFIER val val
<operator>.indirectFieldAccess ReplacementFor_root->val
<operator>.indirectFieldAccess ReplacementFor_root->\012ReplacementFor_right
FIELD_IDENTIFIER val val
<operator>.indirectFieldAccess ReplacementFor_root->ReplacementFor_left
FIELD_IDENTIFIER ReplacementFor_right ReplacementFor_right
<operator>.indirectFieldAccess ReplacementFor_root->ReplacementFor_left
<operator>.indirectFieldAccess ReplacementFor_root->ReplacementFor_right
FIELD_IDENTIFIER ReplacementFor_left ReplacementFor_left
FIELD_IDENTIFIER ReplacementFor_left ReplacementFor_left
FIELD_IDENTIFIER ReplacementFor_right ReplacementFor_right
>>>PDG&35 0->2 0->3 0->4 0->5 0->7 0->9 0->11 0->12 0->17 0->18 0->19 0->20 2->5 3->1 3->11 4->1 4->12 4->18 4->19 5->1 5->1 5->1 5->6 5->7 5->8 5->9 5->11 5->21 5->23 6->1 7->1 7->1 7->6 8->10 8->13 8->14 8->15 8->16 8->17 8->18 8->19 8->20 8->25 8->26 8->27 8->28 8->29 8->30 8->31 8->32 8->33 8->34 10->1 11->8 11->8 11->12 11->12 11->13 11->16 11->18 11->19 11->22 11->24 12->8 12->8 12->13 12->16 12->18 12->19 13->10 14->1 15->14 17->13 17->13 17->13 18->13 18->13 18->13 18->16 18->16 18->16 18->17 18->17 19->15 19->15 19->15 19->20 19->20 20->15 20->15 20->15
>>>Token int ReplacementFor_rangeSumBST ( struct ReplacementFor_TreeNode * ReplacementFor_root , int L , int ReplacementFor_R ) { if ( ReplacementFor_root == NULL ) { return ( 0x769 + 7300 - 0x23ed ) ; } else if ( ReplacementFor_root -> val >= L && ReplacementFor_root -> val <= ReplacementFor_R ) { return ReplacementFor_root -> val + ReplacementFor_rangeSumBST ( ReplacementFor_root -> ReplacementFor_left , L , ReplacementFor_R ) + ReplacementFor_rangeSumBST ( ReplacementFor_root -> ReplacementFor_right , L , ReplacementFor_R ) ; } else { return ReplacementFor_rangeSumBST ( ReplacementFor_root -> ReplacementFor_left , L , ReplacementFor_R ) + ReplacementFor_rangeSumBST ( ReplacementFor_root -> ReplacementFor_right , L , ReplacementFor_R ) ; } }
>>>Func
METHOD main
METHOD_RETURN int
PARAM int ReplacementFor_argc
PARAM char*ReplacementFor_argv[]
<operator>.assignment *\012ReplacementFor_fp=fopen("\x69\x6e\x70\x75\x74","\x72")
fscanf fscanf(ReplacementFor_fp,"\x25\x64",&ReplacementFor_noc)
fclose fclose(ReplacementFor_fp)
RETURN return(0x3eb+8355-0x248e); return(0x3eb+8355-0x248e);
<operator>.lessThan i<ReplacementFor_noc
<operator>.postIncrement i++
<operator>.subtraction 0x3eb+8355-0x248e
fopen fopen("\x69\x6e\x70\x75\x74","\x72")
<operator>.assignment i=\012(0xcf+9383-0x2576)
<operator>.assignment ReplacementFor_ec=ReplacementFor_oc=ReplacementFor_ic=\012(0x6e4+1751-0xdbb)
fscanf fscanf(ReplacementFor_fp,"\x25\x64",&\012ReplacementFor_ni)
fgetc fgetc(ReplacementFor_fp)
fscanf fscanf(\012ReplacementFor_fp,"\x25\x64",&ReplacementFor_no)
fgetc fgetc(ReplacementFor_fp)
fscanf fscanf(ReplacementFor_fp,"\x25\x64",&ReplacementFor_ne)
fgetc fgetc(ReplacementFor_fp)
printf printf("\x43\x61\x73\x65\x20\x23\x25\x64\x3a\x20\x5b" i+(0xa7+7121-0x1c77))
printf printf("\x5d\x20" "\n")
<operator>.lessThan ReplacementFor_j<ReplacementFor_ni
<operator>.postIncrement ReplacementFor_j++
<operator>.lessThan ReplacementFor_j<ReplacementFor_no
<operator>.postIncrement ReplacementFor_j++
<operator>.lessThan ReplacementFor_j<ReplacementFor_ne
<operator>.postIncrement ReplacementFor_j++
<operator>.lessThan ReplacementFor_j<ReplacementFor_ec
<operator>.postIncrement ReplacementFor_j++
<operator>.addition 0x3eb+8355
<operator>.subtraction 0xcf+9383-0x2576
<operator>.assignment ReplacementFor_oc=ReplacementFor_ic=\012(0x6e4+1751-0xdbb)
<operator>.assignment ReplacementFor_j=\012(0x1ad+4230-0x1233)
<operator>.assignment ReplacementFor_iv[ReplacementFor_ic].ReplacementFor_a=fgetc(ReplacementFor_fp)
<operator>.assignment ReplacementFor_iv[ReplacementFor_ic].ReplacementFor_b=fgetc(ReplacementFor_fp)
<operator>.assignment ReplacementFor_iv[ReplacementFor_ic++].i=fgetc(ReplacementFor_fp)
<operator>.assignment ReplacementFor_j=(0x707+3474-0x1499)
<operator>.assignment ReplacementFor_op[ReplacementFor_oc].ReplacementFor_a=fgetc(\012ReplacementFor_fp)
<operator>.assignment ReplacementFor_op[ReplacementFor_oc++].ReplacementFor_b=fgetc\012(ReplacementFor_fp)
<operator>.assignment ReplacementFor_j=(0x31f+1010-0x711)
<operator>.assignment ReplacementFor_el[\012ReplacementFor_ec++]=fgetc(ReplacementFor_fp)
<operator>.addition i+(0xa7+7121-0x1c77)
<operator>.assignment ReplacementFor_j=(0x12c7+3938-0x2229)
printf printf("\x25\x63",ReplacementFor_el[ReplacementFor_j])
<operator>.addition 0xcf+9383
<operator>.assignment ReplacementFor_ic=\012(0x6e4+1751-0xdbb)
<operator>.greaterThan ReplacementFor_ec>\012(0x1f61+1787-0x265b)
<operator>.subtraction 0xa7+7121-0x1c77
<operator>.notEquals ReplacementFor_j!=(0x5d2+6962-0x2104)
<operator>.subtraction 0x6e4+1751-0xdbb
<operator>.subtraction 0x1ad+4230-0x1233
fgetc fgetc(ReplacementFor_fp)
fgetc fgetc(ReplacementFor_fp)
fgetc fgetc(ReplacementFor_fp)
<operator>.subtraction 0x707+3474-0x1499
fgetc fgetc(\012ReplacementFor_fp)
fgetc fgetc\012(ReplacementFor_fp)
<operator>.subtraction 0x31f+1010-0x711
fgetc fgetc(ReplacementFor_fp)
ReplacementFor_oppose ReplacementFor_oppose()
<operator>.addition 0xa7+7121
<operator>.subtraction 0x12c7+3938-0x2229
printf printf("\x2c\x20")
<operator>.addition 0x6e4+1751
<operator>.addition 0x1ad+4230
<operator>.addition 0x707+3474
<operator>.addition 0x31f+1010
<operator>.postIncrement ReplacementFor_ec++
<operator>.subtraction 0x1f61+1787-0x265b
ReplacementFor_invoke ReplacementFor_invoke()
<operator>.addition 0x12c7+3938
<operator>.subtraction 0x5d2+6962-0x2104
<operator>.postIncrement ReplacementFor_ic++
<operator>.postIncrement ReplacementFor_oc++
<operator>.addition 0x1f61+1787
<operator>.addition 0x5d2+6962
<operator>.addressOf &\012ReplacementFor_ni
<operator>.addressOf &ReplacementFor_no
<operator>.addressOf &ReplacementFor_ne
<operator>.fieldAccess ReplacementFor_iv[ReplacementFor_ic].ReplacementFor_a
<operator>.fieldAccess ReplacementFor_iv[ReplacementFor_ic].ReplacementFor_b
<operator>.fieldAccess ReplacementFor_iv[ReplacementFor_ic++].i
<operator>.fieldAccess ReplacementFor_op[ReplacementFor_oc].ReplacementFor_a
<operator>.fieldAccess ReplacementFor_op[ReplacementFor_oc++].ReplacementFor_b
<operator>.indirectIndexAccess ReplacementFor_el[\012ReplacementFor_ec++]
<operator>.indirectIndexAccess ReplacementFor_el[ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_iv[ReplacementFor_ic]
FIELD_IDENTIFIER ReplacementFor_a ReplacementFor_a
<operator>.indirectIndexAccess ReplacementFor_iv[ReplacementFor_ic]
FIELD_IDENTIFIER ReplacementFor_b ReplacementFor_b
<operator>.indirectIndexAccess ReplacementFor_iv[ReplacementFor_ic++]
FIELD_IDENTIFIER i i
<operator>.indirectIndexAccess ReplacementFor_op[ReplacementFor_oc]
FIELD_IDENTIFIER ReplacementFor_a ReplacementFor_a
<operator>.indirectIndexAccess ReplacementFor_op[ReplacementFor_oc++]
FIELD_IDENTIFIER ReplacementFor_b ReplacementFor_b
>>>PDG&97 0->2 0->3 0->5 0->6 0->8 0->9 0->10 0->11 0->14 0->15 0->16 0->17 0->18 0->19 0->20 0->21 0->22 0->23 0->24 0->25 0->26 0->27 0->28 0->29 0->30 0->31 0->42 0->44 0->45 0->47 0->48 0->49 0->50 0->51 0->52 0->53 0->54 0->55 0->56 0->57 0->58 0->59 0->60 0->61 0->62 0->63 0->64 0->65 0->66 0->67 0->68 0->69 0->70 0->71 0->72 0->73 0->74 0->75 0->76 2->1 3->1 4->1 4->1 4->5 5->1 5->1 5->6 5->8 5->14 6->1 6->1 7->1 8->1 8->1 8->1 8->8 8->9 8->9 8->13 8->14 8->15 8->16 8->17 8->18 8->19 8->20 8->20 8->21 8->22 8->24 8->26 8->28 8->32 8->33 8->37 8->40 8->42 8->42 8->43 8->46 8->48 8->50 8->51 8->55 8->58 8->61 8->62 8->64 8->65 8->66 8->67 8->71 8->77 8->78 8->79 9->1 9->8 10->1 10->1 10->7 11->4 11->4 12->1 12->1 12->8 13->1 13->1 13->28 13->68 14->1 14->1 14->15 14->22 15->16 15->52 16->1 16->1 16->17 16->24 17->18 17->56 18->1 18->1 18->19 18->26 19->1 19->6 19->14 19->59 20->1 20->1 21->1 22->1 22->1 22->14 22->22 22->23 22->23 22->34 22->35 22->36 22->52 22->53 22->54 22->73 22->80 22->81 22->82 22->87 22->88 22->89 22->90 22->91 22->92 23->1 23->22 24->1 24->1 24->16 24->24 24->25 24->25 24->38 24->39 24->56 24->57 24->74 24->83 24->84 24->93 24->94 24->95 24->96 25->1 25->24 26->1 26->1 26->18 26->26 26->27 26->27 26->41 26->47 26->59 26->68 26->69 26->75 26->85 27->1 27->26 28->1 28->1 28->1 28->28 28->29 28->44 28->49 28->49 28->72 28->76 28->86 29->1 29->28 31->1 31->12 31->12 32->1 32->1 32->13 32->74 33->1 33->1 33->22 34->1 35->1 36->1 36->1 37->1 37->1 37->24 38->1 38->1 39->1 39->1 39->1 40->1 40->1 40->26 41->1 41->1 41->1 42->1 43->1 43->1 43->28 44->1 44->1 46->1 46->1 46->13 46->32 46->73 47->1 47->1 47->28 47->60 47->68 47->70 48->1 48->20 48->20 48->42 48->42 49->1 49->1 49->29 49->63 50->1 50->13 50->13 50->32 50->32 50->46 50->46 51->1 51->33 51->33 52->34 52->53 53->35 53->54 54->16 54->36 54->52 55->1 55->37 55->37 56->38 56->57 57->18 57->39 57->56 58->1 58->40 58->40 59->6 59->14 59->41 60->1 62->1 62->43 62->43 63->1 68->47 69->1 69->47 69->47 70->1 72->1 72->49 72->49 73->1 74->1
>>>Token int main ( int ReplacementFor_argc , char * ReplacementFor_argv [ ] ) { FILE * ReplacementFor_fp = fopen ( " \x69 \x6e \x70 \x75 \x74 " , " \x72 " ) ; int ReplacementFor_noc ; fscanf ( ReplacementFor_fp , " \x25 \x64 " , & ReplacementFor_noc ) ; for ( int i = ( 0xcf + 9383 - 0x2576 ) ; i < ReplacementFor_noc ; i ++ ) { int ReplacementFor_ni ; int ReplacementFor_no ; ReplacementFor_ec = ReplacementFor_oc = ReplacementFor_ic = ( 0x6e4 + 1751 - 0xdbb ) ; int ReplacementFor_ne ; fscanf ( ReplacementFor_fp , " \x25 \x64 " , & ReplacementFor_ni ) ; fgetc ( ReplacementFor_fp ) ; for ( int ReplacementFor_j = ( 0x1ad + 4230 - 0x1233 ) ; ReplacementFor_j < ReplacementFor_ni ; ReplacementFor_j ++ ) { ReplacementFor_iv [ ReplacementFor_ic ] . ReplacementFor_a = fgetc ( ReplacementFor_fp ) ; ReplacementFor_iv [ ReplacementFor_ic ] . ReplacementFor_b = fgetc ( ReplacementFor_fp ) ; ReplacementFor_iv [ ReplacementFor_ic ++ ] . i = fgetc ( ReplacementFor_fp ) ; } fscanf ( ReplacementFor_fp , " \x25 \x64 " , & ReplacementFor_no ) ; fgetc ( ReplacementFor_fp ) ; for ( int ReplacementFor_j = ( 0x707 + 3474 - 0x1499 ) ; ReplacementFor_j < ReplacementFor_no ; ReplacementFor_j ++ ) { ReplacementFor_op [ ReplacementFor_oc ] . ReplacementFor_a = fgetc ( ReplacementFor_fp ) ; ReplacementFor_op [ ReplacementFor_oc ++ ] . ReplacementFor_b = fgetc ( ReplacementFor_fp ) ; } fscanf ( ReplacementFor_fp , " \x25 \x64 " , & ReplacementFor_ne ) ; fgetc ( ReplacementFor_fp ) ; for ( int ReplacementFor_j = ( 0x31f + 1010 - 0x711 ) ; ReplacementFor_j < ReplacementFor_ne ; ReplacementFor_j ++ ) { ReplacementFor_el [ ReplacementFor_ec ++ ] = fgetc ( ReplacementFor_fp ) ; if ( ReplacementFor_ec > ( 0x1f61 + 1787 - 0x265b ) ) { while ( ReplacementFor_invoke ( ) ) { } ReplacementFor_oppose ( ) ; } } printf ( " \x43 \x61 \x73 \x65 \x20 \x23 \x25 \x64 \x3a \x20 \x5b " , i + ( 0xa7 + 7121 - 0x1c77 ) ) ; for ( int ReplacementFor_j = ( 0x12c7 + 3938 - 0x2229 ) ; ReplacementFor_j < ReplacementFor_ec ; ReplacementFor_j ++ ) { if ( ReplacementFor_j != ( 0x5d2 + 6962 - 0x2104 ) ) printf ( " \x2c \x20 " ) ; printf ( " \x25 \x63 " , ReplacementFor_el [ ReplacementFor_j ] ) ; } printf ( " \x5d \x20 " " \n " ) ; } fclose ( ReplacementFor_fp ) ; return ( 0x3eb + 8355 - 0x248e ) ; }
>>>Func
METHOD ReplacementFor_gcd
METHOD_RETURN ReplacementFor_LD
PARAM ReplacementFor_LD ReplacementFor_a
PARAM ReplacementFor_LD ReplacementFor_b
RETURN return ReplacementFor_a; return ReplacementFor_a;
<operator>.notEquals ReplacementFor_b!=(0x411+847-0x760)
IDENTIFIER ReplacementFor_a return ReplacementFor_a;
<operator>.assignment t=ReplacementFor_b
<operator>.assignment ReplacementFor_b=ReplacementFor_a%\012ReplacementFor_b
<operator>.assignment ReplacementFor_a=t
<operator>.subtraction 0x411+847-0x760
<operator>.addition 0x411+847
<operator>.modulo ReplacementFor_a%\012ReplacementFor_b
>>>PDG&13 0->2 0->3 0->5 0->6 0->7 0->9 0->10 0->11 0->12 2->1 2->6 2->12 3->5 4->1 5->1 5->1 5->1 5->5 5->7 5->7 5->8 5->9 5->10 5->11 5->12 5->12 6->4 7->9 10->1 10->5 10->5 12->8 12->8
>>>Token ReplacementFor_LD ReplacementFor_gcd ( ReplacementFor_LD ReplacementFor_a , ReplacementFor_LD ReplacementFor_b ) { while ( ReplacementFor_b != ( 0x411 + 847 - 0x760 ) ) { ReplacementFor_LD t = ReplacementFor_b ; ReplacementFor_b = ReplacementFor_a % ReplacementFor_b ; ReplacementFor_a = t ; } return ReplacementFor_a ; }
>>>Func
METHOD ReplacementFor_isopp
METHOD_RETURN char
PARAM char ReplacementFor_opp[(0xe60+2366-0x1781)][\012(0xc76+4945-0x1fc5)]
PARAM int ReplacementFor_D
PARAM char ReplacementFor_outlist[\012(0xd82+1048-0x1135)]
PARAM int ReplacementFor_k
PARAM char ReplacementFor_op1
<operator>.assignment ReplacementFor_op2=((char)(0x503+5630-0x1ad1))
RETURN return(0xe23+1345-0x1364); return(0xe23+1345-0x1364);
<operator>.lessThan i<\012ReplacementFor_D
<operator>.postIncrement i++
<operator>.equals ReplacementFor_op2==((char)(0xb1f+6195-0x2322))
<operator>.lessThan i<ReplacementFor_k
<operator>.postIncrement i++
<operator>.subtraction 0xe23+1345-0x1364
<operator>.cast (char)(0x503+5630-0x1ad1)
<operator>.assignment i=(0x1eb3+1522-0x24a5)
<operator>.equals ReplacementFor_opp[i][(0x3f1+2916-0xf55)]==\012ReplacementFor_op1
RETURN return(0x1203+4564-0x23d7); return(0x1203+4564-0x23d7);
<operator>.assignment i\012=(0x245+2040-0xa3d)
<operator>.equals ReplacementFor_outlist[i]==\012ReplacementFor_op2
<operator>.subtraction 0x503+5630-0x1ad1
<operator>.assignment ReplacementFor_op2=ReplacementFor_opp[i][(0x783+1693-0xe1f)]
<operator>.cast (char)(0xb1f+6195-0x2322)
<operator>.subtraction 0x1203+4564-0x23d7
RETURN return(0xf1+272-0x200); return(0xf1+272-0x200);
<operator>.addition 0xe23+1345
<operator>.addition 0x503+5630
<operator>.subtraction 0x1eb3+1522-0x24a5
<operator>.subtraction 0xb1f+6195-0x2322
<operator>.subtraction 0x245+2040-0xa3d
<operator>.subtraction 0xf1+272-0x200
<operator>.addition 0x1eb3+1522
<operator>.subtraction 0x3f1+2916-0xf55
<operator>.equals ReplacementFor_opp[i][(0x14db+1649-0x1b4b)]==ReplacementFor_op1
<operator>.addition 0xb1f+6195
<operator>.addition 0x1203+4564
<operator>.addition 0x245+2040
<operator>.addition 0x3f1+2916
<operator>.subtraction 0x783+1693-0xe1f
<operator>.assignment ReplacementFor_op2=ReplacementFor_opp[i][(0xdd7+416-0xf77)]
<operator>.addition 0xf1+272
<operator>.addition 0x783+1693
<operator>.subtraction 0x14db+1649-0x1b4b
<operator>.addition 0x14db+1649
<operator>.subtraction 0xdd7+416-0xf77
<operator>.addition 0xdd7+416
<operator>.indirectIndexAccess ReplacementFor_opp[i][(0x3f1+2916-0xf55)]
<operator>.indirectIndexAccess ReplacementFor_outlist[i]
<operator>.indirectIndexAccess ReplacementFor_opp[i]
<operator>.indirectIndexAccess ReplacementFor_opp[i][(0x783+1693-0xe1f)]
<operator>.indirectIndexAccess ReplacementFor_opp[i]
<operator>.indirectIndexAccess ReplacementFor_opp[i][(0x14db+1649-0x1b4b)]
<operator>.indirectIndexAccess ReplacementFor_opp[i]
<operator>.indirectIndexAccess ReplacementFor_opp[i][(0xdd7+416-0xf77)]
<operator>.indirectIndexAccess ReplacementFor_opp[i]
>>>PDG&56 0->2 0->3 0->4 0->5 0->6 0->9 0->10 0->11 0->12 0->13 0->14 0->17 0->20 0->21 0->24 0->26 0->27 0->28 0->29 0->30 0->31 0->32 0->33 0->34 0->35 0->36 0->37 0->38 0->39 0->41 0->42 0->43 0->44 0->45 0->46 2->1 3->9 4->1 4->20 5->1 5->12 6->1 6->17 7->1 7->1 7->11 8->1 9->1 9->1 9->1 9->9 9->10 9->10 9->17 9->33 9->38 9->47 9->49 10->1 10->9 11->1 11->1 11->1 11->12 11->18 11->19 11->20 11->24 11->30 11->36 11->37 12->8 12->13 12->14 12->20 12->26 12->48 13->12 14->8 15->1 16->1 16->1 16->9 17->1 17->1 17->1 17->22 17->34 17->34 17->39 17->42 17->43 17->44 17->50 17->51 17->52 17->53 18->1 19->12 20->12 20->13 20->25 20->31 20->41 21->1 21->7 21->7 21->15 21->15 22->1 22->1 22->11 23->1 24->1 24->1 24->18 25->1 28->1 28->16 28->16 29->1 29->11 29->11 29->23 29->23 30->19 30->19 31->25 33->1 34->1 34->1 34->1 34->17 34->40 34->45 34->46 34->54 34->55 39->1 40->1 40->1 40->11 43->1 45->1
>>>Token char ReplacementFor_isopp ( char ReplacementFor_opp [ ( 0xe60 + 2366 - 0x1781 ) ] [ ( 0xc76 + 4945 - 0x1fc5 ) ] , int ReplacementFor_D , char ReplacementFor_outlist [ ( 0xd82 + 1048 - 0x1135 ) ] , int ReplacementFor_k , char ReplacementFor_op1 ) { int i ; char ReplacementFor_op2 = ( ( char ) ( 0x503 + 5630 - 0x1ad1 ) ) ; for ( i = ( 0x1eb3 + 1522 - 0x24a5 ) ; i < ReplacementFor_D ; i ++ ) if ( ReplacementFor_opp [ i ] [ ( 0x3f1 + 2916 - 0xf55 ) ] == ReplacementFor_op1 ) ReplacementFor_op2 = ReplacementFor_opp [ i ] [ ( 0x783 + 1693 - 0xe1f ) ] ; else if ( ReplacementFor_opp [ i ] [ ( 0x14db + 1649 - 0x1b4b ) ] == ReplacementFor_op1 ) ReplacementFor_op2 = ReplacementFor_opp [ i ] [ ( 0xdd7 + 416 - 0xf77 ) ] ; if ( ReplacementFor_op2 == ( ( char ) ( 0xb1f + 6195 - 0x2322 ) ) ) return ( 0x1203 + 4564 - 0x23d7 ) ; for ( i = ( 0x245 + 2040 - 0xa3d ) ; i < ReplacementFor_k ; i ++ ) if ( ReplacementFor_outlist [ i ] == ReplacementFor_op2 ) return ( 0xf1 + 272 - 0x200 ) ; return ( 0xe23 + 1345 - 0x1364 ) ; }
>>>Func
METHOD ReplacementFor_alloc_test_overwrite
METHOD_RETURN void
PARAM void*ReplacementFor_ptr
PARAM size_t \012ReplacementFor_length
PARAM unsigned int ReplacementFor_pattern
<operator>.assignment ReplacementFor_byte_ptr=ReplacementFor_ptr
<operator>.lessThan i<ReplacementFor_length
<operator>.preIncrement ++i
<operator>.assignment i=\012(0x1cd4+664-0x1f6c)
<operator>.assignment ReplacementFor_pattern_seq=(int\012)(i&(0x68d+1460-0xc3e))
<operator>.assignment ReplacementFor_b=(unsigned char)((ReplacementFor_pattern\012>>((0x636+1099-0xa79)*ReplacementFor_pattern_seq))&(0x10d4+4649-0x21fe))
<operator>.assignment ReplacementFor_byte_ptr[i]=ReplacementFor_b
<operator>.subtraction 0x1cd4+664-0x1f6c
<operator>.cast (int\012)(i&(0x68d+1460-0xc3e))
<operator>.cast (unsigned char)((ReplacementFor_pattern\012>>((0x636+1099-0xa79)*ReplacementFor_pattern_seq))&(0x10d4+4649-0x21fe))
<operator>.addition 0x1cd4+664
<operator>.and i&(0x68d+1460-0xc3e)
<operator>.and (ReplacementFor_pattern\012>>((0x636+1099-0xa79)*ReplacementFor_pattern_seq))&(0x10d4+4649-0x21fe)
<operator>.subtraction 0x68d+1460-0xc3e
<operator>.arithmeticShiftRight ReplacementFor_pattern\012>>((0x636+1099-0xa79)*ReplacementFor_pattern_seq)
<operator>.subtraction 0x10d4+4649-0x21fe
<operator>.addition 0x68d+1460
<operator>.multiplication (0x636+1099-0xa79)*ReplacementFor_pattern_seq
<operator>.addition 0x10d4+4649
<operator>.subtraction 0x636+1099-0xa79
<operator>.addition 0x636+1099
<operator>.indirectIndexAccess ReplacementFor_byte_ptr[i]
UNKNOWN int int
UNKNOWN unsigned char unsigned char
>>>PDG&29 0->2 0->3 0->4 0->5 0->6 0->7 0->11 0->12 0->15 0->16 0->18 0->19 0->20 0->21 0->22 0->23 0->24 0->25 2->5 3->6 4->1 4->19 5->1 5->1 5->1 6->1 6->1 6->1 6->6 6->7 6->9 6->10 6->11 6->13 6->14 6->16 6->16 6->17 6->18 6->19 6->20 6->21 6->22 6->23 6->24 6->25 6->26 6->27 6->28 7->1 7->6 8->1 8->1 8->6 9->22 10->11 12->1 12->8 12->8 16->7 16->9 16->9 16->13 16->13 17->10 17->10 17->14 17->14 18->16 18->16 19->17 19->17 20->17 20->17 22->19 22->19 24->22 24->22
>>>Token static void ReplacementFor_alloc_test_overwrite ( void * ReplacementFor_ptr , size_t ReplacementFor_length , unsigned int ReplacementFor_pattern ) { unsigned char * ReplacementFor_byte_ptr ; int ReplacementFor_pattern_seq ; unsigned char ReplacementFor_b ; size_t i ; ReplacementFor_byte_ptr = ReplacementFor_ptr ; for ( i = ( 0x1cd4 + 664 - 0x1f6c ) ; i < ReplacementFor_length ; ++ i ) { ReplacementFor_pattern_seq = ( int ) ( i & ( 0x68d + 1460 - 0xc3e ) ) ; ReplacementFor_b = ( unsigned char ) ( ( ReplacementFor_pattern >> ( ( 0x636 + 1099 - 0xa79 ) * ReplacementFor_pattern_seq ) ) & ( 0x10d4 + 4649 - 0x21fe ) ) ; ReplacementFor_byte_ptr [ i ] = ReplacementFor_b ; } }
>>>Func
METHOD ReplacementFor_CombinesWith
METHOD_RETURN char
PARAM char ReplacementFor_first
PARAM char \012ReplacementFor_second
PARAM int ReplacementFor_nCombination
PARAM char*\012ReplacementFor_combinations[]
<operator>.assignment ReplacementFor_curCombo=(0x560+2881-0x10a1)
RETURN return'\0'; return'\0';
<operator>.lessThan ReplacementFor_curCombo<\012ReplacementFor_nCombination
<operator>.postIncrement ReplacementFor_curCombo++
LITERAL '\0' return'\0';
<operator>.subtraction 0x560+2881-0x10a1
<operator>.assignment ReplacementFor_curCombo=(0xf7f+1990-0x1745)
<operator>.assignment *ReplacementFor_combo\012=ReplacementFor_combinations[ReplacementFor_curCombo]
<operator>.addition 0x560+2881
<operator>.logicalOr (ReplacementFor_first==\012ReplacementFor_combo[(0x618+6032-0x1da8)]&&ReplacementFor_second==\012ReplacementFor_combo[(0x948+3446-0x16bd)])||(ReplacementFor_first==\012ReplacementFor_combo[(0xb42+2961-0x16d2)]&&ReplacementFor_second==\012ReplacementFor_combo[(0x7fc+4761-0x1a95)])
<operator>.subtraction 0xf7f+1990-0x1745
RETURN return ReplacementFor_combo[\012(0x1237+2462-0x1bd3)]; return ReplacementFor_combo[\012(0x1237+2462-0x1bd3)];
<operator>.addition 0xf7f+1990
<operator>.logicalAnd ReplacementFor_first==\012ReplacementFor_combo[(0x618+6032-0x1da8)]&&ReplacementFor_second==\012ReplacementFor_combo[(0x948+3446-0x16bd)]
<operator>.logicalAnd ReplacementFor_first==\012ReplacementFor_combo[(0xb42+2961-0x16d2)]&&ReplacementFor_second==\012ReplacementFor_combo[(0x7fc+4761-0x1a95)]
<operator>.equals ReplacementFor_first==\012ReplacementFor_combo[(0x618+6032-0x1da8)]
<operator>.equals ReplacementFor_second==\012ReplacementFor_combo[(0x948+3446-0x16bd)]
<operator>.equals ReplacementFor_first==\012ReplacementFor_combo[(0xb42+2961-0x16d2)]
<operator>.equals ReplacementFor_second==\012ReplacementFor_combo[(0x7fc+4761-0x1a95)]
<operator>.subtraction 0x1237+2462-0x1bd3
<operator>.subtraction 0x618+6032-0x1da8
<operator>.subtraction 0x948+3446-0x16bd
<operator>.subtraction 0xb42+2961-0x16d2
<operator>.subtraction 0x7fc+4761-0x1a95
<operator>.addition 0x1237+2462
<operator>.addition 0x618+6032
<operator>.addition 0x948+3446
<operator>.addition 0xb42+2961
<operator>.addition 0x7fc+4761
<operator>.indirectIndexAccess ReplacementFor_combinations[ReplacementFor_curCombo]
<operator>.indirectIndexAccess ReplacementFor_combo[\012(0x1237+2462-0x1bd3)]
<operator>.indirectIndexAccess ReplacementFor_combo[(0x618+6032-0x1da8)]
<operator>.indirectIndexAccess ReplacementFor_combo[(0x948+3446-0x16bd)]
<operator>.indirectIndexAccess ReplacementFor_combo[(0xb42+2961-0x16d2)]
<operator>.indirectIndexAccess ReplacementFor_combo[(0x7fc+4761-0x1a95)]
>>>PDG&41 0->2 0->3 0->4 0->5 0->7 0->8 0->9 0->10 0->11 0->14 0->16 0->18 0->21 0->22 0->23 0->24 0->25 0->26 0->27 0->28 0->29 0->30 0->31 0->32 0->33 0->34 2->21 3->1 3->22 3->24 4->8 5->1 5->13 6->1 6->1 7->1 8->1 8->1 8->1 8->7 8->9 8->13 8->15 8->19 8->21 8->26 8->31 8->35 8->37 9->1 9->8 10->7 11->1 11->6 11->6 12->1 12->1 12->8 13->1 13->1 13->1 13->21 13->22 13->23 13->24 15->1 15->1 15->1 15->8 15->9 15->17 15->25 15->30 15->36 16->1 16->12 16->12 17->1 19->1 19->1 19->15 19->15 19->20 19->23 19->28 19->33 19->39 20->1 20->1 20->15 20->15 21->1 21->1 21->19 21->19 21->22 21->23 21->27 21->32 21->38 22->1 22->1 22->19 22->19 22->24 23->1 23->1 23->20 23->20 23->21 23->24 23->29 23->34 23->40 24->1 24->1 24->20 24->20 24->22 25->1 26->1 27->1 28->1 29->1
>>>Token char ReplacementFor_CombinesWith ( char ReplacementFor_first , char ReplacementFor_second , int ReplacementFor_nCombination , char * ReplacementFor_combinations [ ] ) { int ReplacementFor_curCombo = ( 0x560 + 2881 - 0x10a1 ) ; for ( ReplacementFor_curCombo = ( 0xf7f + 1990 - 0x1745 ) ; ReplacementFor_curCombo < ReplacementFor_nCombination ; ReplacementFor_curCombo ++ ) { char * ReplacementFor_combo = ReplacementFor_combinations [ ReplacementFor_curCombo ] ; if ( ( ReplacementFor_first == ReplacementFor_combo [ ( 0x618 + 6032 - 0x1da8 ) ] && ReplacementFor_second == ReplacementFor_combo [ ( 0x948 + 3446 - 0x16bd ) ] ) || ( ReplacementFor_first == ReplacementFor_combo [ ( 0xb42 + 2961 - 0x16d2 ) ] && ReplacementFor_second == ReplacementFor_combo [ ( 0x7fc + 4761 - 0x1a95 ) ] ) ) { return ReplacementFor_combo [ ( 0x1237 + 2462 - 0x1bd3 ) ] ; } } return ' \0 ' ; }
>>>Func
METHOD ReplacementFor_simple_round
METHOD_RETURN long double
PARAM long double val
PARAM enum ReplacementFor_round_type t
<operator>.assignment ReplacementFor_intmax_mul=val/INTMAX_MAX
<operator>.assignmentMinus val-=(long double)INTMAX_MAX*ReplacementFor_intmax_mul
RETURN return(long double)INTMAX_MAX*\012ReplacementFor_intmax_mul+ReplacementFor_rval; return(long double)INTMAX_MAX*\012ReplacementFor_intmax_mul+ReplacementFor_rval;
IDENTIFIER t switch(t)
<operator>.addition (long double)INTMAX_MAX*\012ReplacementFor_intmax_mul+ReplacementFor_rval
<operator>.division val/INTMAX_MAX
<operator>.multiplication (long double)INTMAX_MAX*ReplacementFor_intmax_mul
IDENTIFIER ReplacementFor_round_ceiling <empty>
<operator>.assignment ReplacementFor_rval=\012ReplacementFor_simple_round_ceiling(val)
IDENTIFIER ReplacementFor_round_floor <empty>
<operator>.assignment ReplacementFor_rval=ReplacementFor_simple_round_floor(val)
IDENTIFIER ReplacementFor_round_from_zero <empty>
<operator>.assignment ReplacementFor_rval=\012ReplacementFor_simple_round_from_zero(val)
IDENTIFIER ReplacementFor_round_to_zero <empty>
<operator>.assignment ReplacementFor_rval=\012ReplacementFor_simple_round_to_zero(val)
IDENTIFIER ReplacementFor_round_nearest <empty>
<operator>.assignment ReplacementFor_rval=ReplacementFor_simple_round_nearest(val)
RETURN return(0x1895+1358-0x1de3); return(0x1895+1358-0x1de3);
<operator>.cast (long double)INTMAX_MAX
<operator>.subtraction 0x1895+1358-0x1de3
<operator>.multiplication (long double)INTMAX_MAX*\012ReplacementFor_intmax_mul
ReplacementFor_simple_round_ceiling ReplacementFor_simple_round_ceiling(val)
ReplacementFor_simple_round_floor ReplacementFor_simple_round_floor(val)
ReplacementFor_simple_round_from_zero ReplacementFor_simple_round_from_zero(val)
ReplacementFor_simple_round_to_zero ReplacementFor_simple_round_to_zero(val)
ReplacementFor_simple_round_nearest ReplacementFor_simple_round_nearest(val)
<operator>.cast (long double)INTMAX_MAX
<operator>.addition 0x1895+1358
>>>PDG&32 0->2 0->3 0->5 0->7 0->8 0->9 0->10 0->11 0->13 0->15 0->17 0->19 0->22 0->23 0->24 0->25 0->26 0->27 0->28 0->29 0->30 0->31 2->9 3->1 4->1 4->1 4->10 5->1 5->1 5->1 5->25 5->26 5->27 5->28 5->29 6->1 8->6 9->4 9->4 9->5 9->10 9->22 9->24 9->30 10->1 10->1 10->5 10->5 10->24 12->8 14->8 16->8 18->8 20->8 21->1 22->1 23->1 23->1 23->21 24->8 24->8 25->12 26->14 27->16 28->18 29->20
>>>Token ReplacementFor_ATTRIBUTE_CONST static inline long  double ReplacementFor_simple_round ( long double val , enum ReplacementFor_round_type t ) { intmax_t ReplacementFor_rval ; intmax_t ReplacementFor_intmax_mul = val / INTMAX_MAX ; val -= ( long double ) INTMAX_MAX * ReplacementFor_intmax_mul ; switch ( t ) { case ReplacementFor_round_ceiling : ReplacementFor_rval = ReplacementFor_simple_round_ceiling ( val ) ; break ; case ReplacementFor_round_floor : ReplacementFor_rval = ReplacementFor_simple_round_floor ( val ) ; break ; case ReplacementFor_round_from_zero : ReplacementFor_rval = ReplacementFor_simple_round_from_zero ( val ) ; break ; case ReplacementFor_round_to_zero : ReplacementFor_rval = ReplacementFor_simple_round_to_zero ( val ) ; break ; case ReplacementFor_round_nearest : ReplacementFor_rval = ReplacementFor_simple_round_nearest ( val ) ; break ; default : return ( 0x1895 + 1358 - 0x1de3 ) ; } return ( long double ) INTMAX_MAX * ReplacementFor_intmax_mul + ReplacementFor_rval ; }
>>>Func
METHOD ReplacementFor_convertBST
METHOD_RETURN struct ReplacementFor_TreeNode
PARAM int*ReplacementFor_nums
PARAM int ReplacementFor_left
PARAM int ReplacementFor_right
<operator>.greaterThan ReplacementFor_left>\012ReplacementFor_right
RETURN return NULL; return NULL;
IDENTIFIER NULL return NULL;
<operator>.assignment ReplacementFor_mid=(\012ReplacementFor_right+ReplacementFor_left)/(0x1f40+1553-0x254f)
<operator>.assignment *ReplacementFor_new_val=malloc(sizeof(struct \012ReplacementFor_TreeNode))
<operator>.assignment ReplacementFor_new_val->val=ReplacementFor_nums[\012ReplacementFor_mid]
<operator>.assignment ReplacementFor_new_val->ReplacementFor_left=\012ReplacementFor_convertBST(ReplacementFor_nums ReplacementFor_left \012ReplacementFor_mid-(0x4f4+2675-0xf66))
<operator>.assignment ReplacementFor_new_val->\012ReplacementFor_right=ReplacementFor_convertBST(ReplacementFor_nums \012ReplacementFor_mid+(0x2401+92-0x245c),ReplacementFor_right)
RETURN return \012ReplacementFor_new_val; return \012ReplacementFor_new_val;
IDENTIFIER ReplacementFor_new_val return \012ReplacementFor_new_val;
<operator>.division (\012ReplacementFor_right+ReplacementFor_left)/(0x1f40+1553-0x254f)
ReplacementFor_convertBST ReplacementFor_convertBST(ReplacementFor_nums ReplacementFor_left \012ReplacementFor_mid-(0x4f4+2675-0xf66))
ReplacementFor_convertBST ReplacementFor_convertBST(ReplacementFor_nums \012ReplacementFor_mid+(0x2401+92-0x245c),ReplacementFor_right)
<operator>.addition ReplacementFor_right+ReplacementFor_left
<operator>.subtraction 0x1f40+1553-0x254f
<operator>.sizeOf sizeof(struct \012ReplacementFor_TreeNode)
<operator>.subtraction ReplacementFor_mid-(0x4f4+2675-0xf66)
<operator>.addition ReplacementFor_mid+(0x2401+92-0x245c)
<operator>.addition 0x1f40+1553
<operator>.subtraction 0x4f4+2675-0xf66
<operator>.subtraction 0x2401+92-0x245c
<operator>.addition 0x4f4+2675
<operator>.addition 0x2401+92
malloc malloc(sizeof(struct \012ReplacementFor_TreeNode))
<operator>.indirectFieldAccess ReplacementFor_new_val->val
<operator>.indirectIndexAccess ReplacementFor_nums[\012ReplacementFor_mid]
<operator>.indirectFieldAccess ReplacementFor_new_val->ReplacementFor_left
<operator>.indirectFieldAccess ReplacementFor_new_val->\012ReplacementFor_right
FIELD_IDENTIFIER val val
FIELD_IDENTIFIER ReplacementFor_left ReplacementFor_left
FIELD_IDENTIFIER ReplacementFor_right ReplacementFor_right
>>>PDG&36 0->2 0->3 0->4 0->5 0->6 0->7 0->14 0->15 0->16 0->17 0->18 0->19 0->21 0->22 0->23 0->24 0->25 0->26 0->27 2->1 2->10 2->16 2->17 3->5 4->5 5->1 5->1 5->1 5->6 5->8 5->9 5->10 5->11 5->12 5->13 5->15 5->15 5->15 5->16 5->16 5->17 5->17 5->18 5->18 5->18 5->19 5->20 5->21 5->22 5->23 5->24 5->25 5->26 5->27 5->28 5->29 5->30 5->31 5->32 5->33 5->34 5->35 6->1 7->6 8->21 9->14 13->1 14->13 15->8 15->8 16->11 16->11 16->11 16->17 17->12 17->12 17->12 19->15 19->15 20->1 21->16 21->16 21->17 21->22 24->21 24->21 25->17 25->17 25->22 25->22
>>>Token struct ReplacementFor_TreeNode * ReplacementFor_convertBST ( int * ReplacementFor_nums , int ReplacementFor_left , int ReplacementFor_right ) { if ( ReplacementFor_left > ReplacementFor_right ) return NULL ; else { int ReplacementFor_mid = ( ReplacementFor_right + ReplacementFor_left ) / ( 0x1f40 + 1553 - 0x254f ) ; struct ReplacementFor_TreeNode * ReplacementFor_new_val = malloc ( sizeof ( struct ReplacementFor_TreeNode ) ) ; ReplacementFor_new_val -> val = ReplacementFor_nums [ ReplacementFor_mid ] ; ReplacementFor_new_val -> ReplacementFor_left = ReplacementFor_convertBST ( ReplacementFor_nums , ReplacementFor_left , ReplacementFor_mid - ( 0x4f4 + 2675 - 0xf66 ) ) ; ReplacementFor_new_val -> ReplacementFor_right = ReplacementFor_convertBST ( ReplacementFor_nums , ReplacementFor_mid + ( 0x2401 + 92 - 0x245c ) , ReplacementFor_right ) ; return ReplacementFor_new_val ; } }
>>>Func
METHOD ReplacementFor_heap_default_compare
METHOD_RETURN int
PARAM void const*ReplacementFor_a
PARAM void \012const*ReplacementFor_b
RETURN return(0x11e8+2418-0x1b5a); return(0x11e8+2418-0x1b5a);
<operator>.subtraction 0x11e8+2418-0x1b5a
<operator>.addition 0x11e8+2418
>>>PDG&7 0->2 0->3 0->5 0->6 2->1 3->1 4->1 5->1 5->1 5->4
>>>Token static int ReplacementFor_heap_default_compare ( void const * ReplacementFor_a , void const * ReplacementFor_b ) { return ( 0x11e8 + 2418 - 0x1b5a ) ; }
>>>Func
METHOD ReplacementFor_usage
METHOD_RETURN void
PARAM int status
exit exit(status)
<operator>.notEquals status!=EXIT_SUCCESS
ReplacementFor_emit_try_help ReplacementFor_emit_try_help()
printf printf(ReplacementFor__(\012"\x55\x73\x61\x67\x65\x3a\x20\x25\x73\x20\x5b\x4f\x50\x54\x49\x4f\x4e\x5d\x20\x5b\x43\x4f\x4d\x4d\x41\x4e\x44\x20\x5b\x41\x52\x47\x5d\x2e\x2e\x2e\x5d" "\n"\012),ReplacementFor_program_name)
printf printf(ReplacementFor__("\\012Run COMMAND with an adjusted niceness  which affects process scheduling.\n\\012With no COMMAND  print the current niceness.  Niceness values range from\n\\012%d (most favorable to the process) to %d (least favorable to the process).\n\\012") -NZERO NZERO-(0x18e0+1717-0x1f94))
ReplacementFor_emit_mandatory_arg_note ReplacementFor_emit_mandatory_arg_note()
fputs fputs(ReplacementFor__("\\012  -n  --adjustment=N   add integer N to the niceness (default 10)\n\\012"),stdout)
fputs fputs(ReplacementFor_HELP_OPTION_DESCRIPTION,stdout)
fputs fputs(\012ReplacementFor_VERSION_OPTION_DESCRIPTION,stdout)
printf printf(\012ReplacementFor_USAGE_BUILTIN_WARNING,ReplacementFor_PROGRAM_NAME)
ReplacementFor_emit_ancillary_info ReplacementFor_emit_ancillary_info(ReplacementFor_PROGRAM_NAME)
ReplacementFor__ ReplacementFor__(\012"\x55\x73\x61\x67\x65\x3a\x20\x25\x73\x20\x5b\x4f\x50\x54\x49\x4f\x4e\x5d\x20\x5b\x43\x4f\x4d\x4d\x41\x4e\x44\x20\x5b\x41\x52\x47\x5d\x2e\x2e\x2e\x5d" "\n"\012)
ReplacementFor__ ReplacementFor__("\\012Run COMMAND with an adjusted niceness  which affects process scheduling.\n\\012With no COMMAND  print the current niceness.  Niceness values range from\n\\012%d (most favorable to the process) to %d (least favorable to the process).\n\\012")
<operator>.minus -NZERO
<operator>.subtraction NZERO-(0x18e0+1717-0x1f94)
ReplacementFor__ ReplacementFor__("\\012  -n  --adjustment=N   add integer N to the niceness (default 10)\n\\012")
<operator>.subtraction 0x18e0+1717-0x1f94
<operator>.addition 0x18e0+1717
>>>PDG&21 0->2 0->3 0->4 0->5 0->6 0->8 0->9 0->10 0->11 0->12 0->13 0->14 0->15 0->16 0->17 0->18 0->19 0->20 2->4 3->1 4->1 4->1 4->3 4->5 4->6 4->7 4->8 4->9 4->10 4->11 4->12 4->13 4->14 4->15 4->16 4->17 4->18 4->19 4->20 5->1 6->1 6->1 6->1 7->1 7->1 7->1 7->1 8->1 9->1 9->1 9->10 10->1 10->1 10->11 11->1 11->1 11->1 12->1 12->1 12->13 13->1 13->1 14->6 15->7 16->7 16->17 17->1 17->1 17->7 17->7 18->9 19->1 19->17 19->17
>>>Token " ) , - NZERO , NZERO - ( 0x18e0 + 1717 - 0x1f94 ) ) ; ReplacementFor_emit_mandatory_arg_note ( ) ; fputs ( ReplacementFor__ ( " \ " ) , stdout ) ; fputs ( ReplacementFor_HELP_OPTION_DESCRIPTION , stdout ) ; fputs ( ReplacementFor_VERSION_OPTION_DESCRIPTION , stdout ) ; printf ( ReplacementFor_USAGE_BUILTIN_WARNING , ReplacementFor_PROGRAM_NAME ) ; ReplacementFor_emit_ancillary_info ( ReplacementFor_PROGRAM_NAME ) ; } exit ( status ) ; }
>>>Func
METHOD ReplacementFor_checkOpposed
METHOD_RETURN bool
PARAM char ReplacementFor_elem
RETURN return false; return false;
<operator>.equals ReplacementFor_sizeList==(0x1302+3250-0x1fb4)
<operator>.lessThan i<ReplacementFor_top[(int)ReplacementFor_elem]
<operator>.postIncrement i++
IDENTIFIER false return false;
RETURN return false; return false;
<operator>.assignment i=(0x13dc+1748-0x1ab0)
<operator>.greaterThan ReplacementFor_occursList[(int)ReplacementFor_opposed[(int)ReplacementFor_elem]\012[i]]>(0x19e8+1510-0x1fce)
<operator>.subtraction 0x1302+3250-0x1fb4
IDENTIFIER false return false;
<operator>.assignment ReplacementFor_sizeList=(0xe66+1428-0x13fa)
RETURN return true; return true;
<operator>.addition 0x1302+3250
<operator>.subtraction 0x13dc+1748-0x1ab0
<operator>.cast (int)ReplacementFor_elem
<operator>.subtraction 0x19e8+1510-0x1fce
<operator>.lessEqualsThan ReplacementFor_k<=(int)\012((char)(0x946+3509-0x16a1))
<operator>.postIncrement ReplacementFor_k++
<operator>.assignment ReplacementFor_occursList[\012ReplacementFor_k]=(0x5c3+4653-0x17f0)
IDENTIFIER true return true;
<operator>.addition 0x13dc+1748
<operator>.addition 0x19e8+1510
<operator>.subtraction 0xe66+1428-0x13fa
<operator>.assignment ReplacementFor_k=(int)((char)(0xde3+273-0xeb3))
<operator>.addition 0xe66+1428
<operator>.cast (int)\012((char)(0x946+3509-0x16a1))
<operator>.subtraction 0x5c3+4653-0x17f0
<operator>.cast (int)((char)(0xde3+273-0xeb3))
<operator>.cast (char)(0x946+3509-0x16a1)
<operator>.addition 0x5c3+4653
<operator>.cast (int)ReplacementFor_elem
<operator>.cast (char)(0xde3+273-0xeb3)
<operator>.subtraction 0x946+3509-0x16a1
<operator>.subtraction 0xde3+273-0xeb3
<operator>.addition 0x946+3509
<operator>.addition 0xde3+273
<operator>.indirectIndexAccess ReplacementFor_top[(int)ReplacementFor_elem]
<operator>.indirectIndexAccess ReplacementFor_occursList[(int)ReplacementFor_opposed[(int)ReplacementFor_elem]\012[i]]
UNKNOWN int int
<operator>.cast (int)ReplacementFor_opposed[(int)ReplacementFor_elem]\012[i]
UNKNOWN int int
<operator>.indirectIndexAccess ReplacementFor_opposed[(int)ReplacementFor_elem]\012[i]
<operator>.indirectIndexAccess ReplacementFor_occursList[\012ReplacementFor_k]
<operator>.indirectIndexAccess ReplacementFor_opposed[(int)ReplacementFor_elem]
UNKNOWN int int
UNKNOWN int int
UNKNOWN char char
UNKNOWN int int
UNKNOWN char char
>>>PDG&52 0->2 0->3 0->4 0->5 0->6 0->7 0->8 0->11 0->12 0->14 0->15 0->16 0->17 0->18 0->19 0->20 0->22 0->23 0->24 0->25 0->27 0->29 0->32 0->33 0->35 0->36 0->37 0->38 2->1 2->17 3->1 4->1 4->1 4->1 4->5 4->8 4->9 4->16 4->17 4->23 4->39 4->41 5->3 5->6 5->10 5->18 5->24 5->33 5->40 5->42 5->43 5->44 5->46 5->50 6->5 7->3 8->1 9->5 10->5 10->6 10->13 10->14 10->17 10->19 10->25 10->26 10->27 10->28 10->30 10->31 10->34 10->35 10->36 10->37 10->38 10->39 10->41 10->47 10->48 10->49 10->51 11->1 11->4 11->4 12->8 14->1 16->9 16->9 18->10 18->10 19->19 19->20 19->20 19->21 19->28 19->29 19->31 19->32 19->35 19->37 19->45 19->47 19->49 20->19 22->14 25->13 25->13 26->19 29->21 29->21 35->19 35->19 35->28 35->28 35->31 35->31 36->26 36->26 36->30 36->30 36->34 36->34
>>>Token bool ReplacementFor_checkOpposed ( char ReplacementFor_elem ) { int i , ReplacementFor_k ; if ( ReplacementFor_sizeList == ( 0x1302 + 3250 - 0x1fb4 ) ) return false ; for ( i = ( 0x13dc + 1748 - 0x1ab0 ) ; i < ReplacementFor_top [ ( int ) ReplacementFor_elem ] ; i ++ ) if ( ReplacementFor_occursList [ ( int ) ReplacementFor_opposed [ ( int ) ReplacementFor_elem ] [ i ] ] > ( 0x19e8 + 1510 - 0x1fce ) ) { ReplacementFor_sizeList = ( 0xe66 + 1428 - 0x13fa ) ; for ( ReplacementFor_k = ( int ) ( ( char ) ( 0xde3 + 273 - 0xeb3 ) ) ; ReplacementFor_k <= ( int ) ( ( char ) ( 0x946 + 3509 - 0x16a1 ) ) ; ReplacementFor_k ++ ) ReplacementFor_occursList [ ReplacementFor_k ] = ( 0x5c3 + 4653 - 0x17f0 ) ; return true ; } return false ; }
>>>Func
METHOD ReplacementFor_createGraph
METHOD_RETURN void
PARAM struct ReplacementFor_Graph*ReplacementFor_G
PARAM int\012 ReplacementFor_V
<operator>.assignment ReplacementFor_G->ReplacementFor_vertexNum=ReplacementFor_V
<operator>.assignment ReplacementFor_G->ReplacementFor_edges=(int**)malloc(ReplacementFor_V*sizeof(int\012*))
<operator>.lessThan i<ReplacementFor_V
<operator>.postIncrement i++
<operator>.cast (int**)malloc(ReplacementFor_V*sizeof(int\012*))
<operator>.assignment i=(0x981+6448-0x22b1)
<operator>.assignment ReplacementFor_G->\012ReplacementFor_edges[i]=(int*)malloc(ReplacementFor_V*sizeof(int))
<operator>.assignment ReplacementFor_G->ReplacementFor_edges[i][i]=(0x759+4877-0x1a66)
malloc malloc(ReplacementFor_V*sizeof(int\012*))
<operator>.lessThan ReplacementFor_j<ReplacementFor_V
<operator>.postIncrement ReplacementFor_j++
<operator>.assignment ReplacementFor_G->ReplacementFor_edges[i][ReplacementFor_j]=\012INT_MAX
<operator>.multiplication ReplacementFor_V*sizeof(int\012*)
<operator>.subtraction 0x981+6448-0x22b1
<operator>.cast (int*)malloc(ReplacementFor_V*sizeof(int))
<operator>.assignment ReplacementFor_j=(0xbc8+3890-0x1afa)
<operator>.subtraction 0x759+4877-0x1a66
<operator>.sizeOf sizeof(int\012*)
<operator>.addition 0x981+6448
malloc malloc(ReplacementFor_V*sizeof(int))
<operator>.addition 0x759+4877
<operator>.multiplication ReplacementFor_V*sizeof(int)
<operator>.subtraction 0xbc8+3890-0x1afa
<operator>.addition 0xbc8+3890
<operator>.indirectIndexAccess ReplacementFor_G->\012ReplacementFor_edges[i]
<operator>.indirectIndexAccess ReplacementFor_G->ReplacementFor_edges[i][i]
<operator>.indirectFieldAccess ReplacementFor_G->\012ReplacementFor_edges
UNKNOWN int* int*
<operator>.indirectIndexAccess ReplacementFor_G->ReplacementFor_edges[i][ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_G->ReplacementFor_edges[i]
FIELD_IDENTIFIER ReplacementFor_edges ReplacementFor_edges
<operator>.indirectIndexAccess ReplacementFor_G->ReplacementFor_edges[i]
<operator>.indirectFieldAccess ReplacementFor_G->ReplacementFor_edges
<operator>.sizeOf sizeof(int)
<operator>.indirectFieldAccess ReplacementFor_G->ReplacementFor_edges
FIELD_IDENTIFIER ReplacementFor_edges ReplacementFor_edges
FIELD_IDENTIFIER ReplacementFor_edges ReplacementFor_edges
>>>PDG&41 0->2 0->3 0->4 0->6 0->7 0->13 0->14 0->15 0->16 0->17 0->20 0->22 0->24 0->25 0->26 0->27 2->1 3->4 3->16 4->1 4->1 5->1 5->1 5->1 6->1 6->1 6->1 6->6 6->7 6->7 6->10 6->11 6->13 6->18 6->19 6->20 6->23 6->24 6->25 6->25 6->26 6->27 6->28 6->29 6->30 6->31 6->33 6->34 6->36 6->37 6->39 7->1 7->6 8->1 9->1 9->1 9->6 12->1 12->5 12->8 13->6 13->13 13->14 13->14 13->15 13->32 13->35 13->38 13->40 14->13 15->1 16->6 16->12 17->1 17->9 17->9 19->13 20->11 20->11 21->1 23->10 23->18 25->13 25->23 26->19 26->19
>>>Token void ReplacementFor_createGraph ( struct ReplacementFor_Graph * ReplacementFor_G , int ReplacementFor_V ) { ReplacementFor_G -> ReplacementFor_vertexNum = ReplacementFor_V ; ReplacementFor_G -> ReplacementFor_edges = ( int * * ) malloc ( ReplacementFor_V * sizeof ( int * ) ) ; for ( int i = ( 0x981 + 6448 - 0x22b1 ) ; i < ReplacementFor_V ; i ++ ) { ReplacementFor_G -> ReplacementFor_edges [ i ] = ( int * ) malloc ( ReplacementFor_V * sizeof ( int ) ) ; for ( int ReplacementFor_j = ( 0xbc8 + 3890 - 0x1afa ) ; ReplacementFor_j < ReplacementFor_V ; ReplacementFor_j ++ ) ReplacementFor_G -> ReplacementFor_edges [ i ] [ ReplacementFor_j ] = INT_MAX ; ReplacementFor_G -> ReplacementFor_edges [ i ] [ i ] = ( 0x759 + 4877 - 0x1a66 ) ; } }
>>>Func
METHOD ReplacementFor_usage
METHOD_RETURN void
PARAM int status
exit exit(status)
<operator>.notEquals status!=EXIT_SUCCESS
ReplacementFor_emit_try_help ReplacementFor_emit_try_help()
printf printf(ReplacementFor__("\\012Usage: %s FILE1 FILE2\n\\012  or:  %s OPTION\n"),ReplacementFor_program_name,ReplacementFor_program_name)
fputs fputs(\012ReplacementFor__("Call the link function to create a link named FILE2\\012 to an existing FILE1.\n\n"),stdout)
fputs fputs(ReplacementFor_HELP_OPTION_DESCRIPTION,stdout)
fputs fputs(\012ReplacementFor_VERSION_OPTION_DESCRIPTION,stdout)
ReplacementFor_emit_ancillary_info ReplacementFor_emit_ancillary_info(ReplacementFor_PROGRAM_NAME)
ReplacementFor__ ReplacementFor__("\\012Usage: %s FILE1 FILE2\n\\012  or:  %s OPTION\n")
ReplacementFor__ ReplacementFor__("Call the link function to create a link named FILE2\\012 to an existing FILE1.\n\n")
>>>PDG&13 0->2 0->3 0->4 0->5 0->6 0->7 0->8 0->9 0->10 0->11 0->12 2->4 3->1 4->1 4->1 4->3 4->5 4->6 4->7 4->8 4->9 4->10 4->11 4->12 5->1 6->1 6->1 6->1 7->1 7->1 7->8 8->1 8->1 8->9 9->1 9->1 9->1 10->1 10->1 11->6 12->7
>>>Token void ReplacementFor_usage ( int status ) { if ( status != EXIT_SUCCESS ) ReplacementFor_emit_try_help ( ) ; else { printf ( ReplacementFor__ ( " \
>>>Func
METHOD ReplacementFor_find_combine
METHOD_RETURN void
<operator>.assignment ReplacementFor_found=(0x744+3620-0x1568)
<operator>.assignment ReplacementFor_f_0=\012(0x58c+5566-0x1b4a)
<operator>.assignment ReplacementFor_f_1=(0xfba+2859-0x1ae5)
<operator>.lessThan i<ReplacementFor_combine
<operator>.preIncrement ++i
<operator>.subtraction 0x744+3620-0x1568
<operator>.subtraction 0x58c+5566-0x1b4a
<operator>.subtraction 0xfba+2859-0x1ae5
<operator>.assignment i=\012(0x11d4+4-0x11d8)
<operator>.assignment ReplacementFor_found=\012(0x7d2+3901-0x170f)
<operator>.assignment ReplacementFor_f_0=(0x2282+255-0x2381)
<operator>.assignment ReplacementFor_f_1=\012(0x7c2+4174-0x1810)
<operator>.addition 0x744+3620
<operator>.addition 0x58c+5566
<operator>.addition 0xfba+2859
<operator>.lessEqualsThan ReplacementFor_j<=\012(0x3c1+63-0x3fe)
<operator>.preIncrement ++ReplacementFor_j
<operator>.equals ReplacementFor_found==(0xe2c+2021-0x160e)
<operator>.subtraction 0x11d4+4-0x11d8
<operator>.subtraction 0x7d2+3901-0x170f
<operator>.subtraction 0x2282+255-0x2381
<operator>.subtraction 0x7c2+4174-0x1810
<operator>.assignment ReplacementFor_j=(0x59d+465-0x76d)
<operator>.addition 0x11d4+4
<operator>.addition 0x7d2+3901
<operator>.addition 0x2282+255
<operator>.addition 0x7c2+4174
<operator>.subtraction 0x3c1+63-0x3fe
<operator>.logicalAnd (ReplacementFor_f_0==(0xd1+4276-0x1185))\012&&(ReplacementFor_ANS[ReplacementFor_answer_length-ReplacementFor_j]==\012ReplacementFor_C[i][(0x5bd+6013-0x1d3a)])
<operator>.equals ReplacementFor_found==(0xa2f+600-0xc85)
<operator>.subtraction 0xe2c+2021-0x160e
<operator>.subtraction 0x59d+465-0x76d
<operator>.addition 0x3c1+63
<operator>.postIncrement ReplacementFor_found++
<operator>.assignment ReplacementFor_f_0=(0x618+3093-0x122c)
<operator>.postDecrement ReplacementFor_answer_length--
<operator>.assignment ReplacementFor_found=(0x13b9+1-0x13b7)
<operator>.assignment ReplacementFor_ANS[\012ReplacementFor_answer_length-(0x1340+4960-0x269f)]=ReplacementFor_C[i][\012(0x12b9+28-0x12d3)]
<operator>.addition 0xe2c+2021
<operator>.addition 0x59d+465
<operator>.equals ReplacementFor_f_0==(0xd1+4276-0x1185)
<operator>.equals ReplacementFor_ANS[ReplacementFor_answer_length-ReplacementFor_j]==\012ReplacementFor_C[i][(0x5bd+6013-0x1d3a)]
<operator>.subtraction 0xa2f+600-0xc85
<operator>.subtraction 0xd1+4276-0x1185
<operator>.subtraction 0x618+3093-0x122c
<operator>.logicalAnd (ReplacementFor_f_1==\012(0x13c6+1226-0x1890))&&(ReplacementFor_ANS[ReplacementFor_answer_length-\012ReplacementFor_j]==ReplacementFor_C[i][(0xd12+2639-0x1760)])
<operator>.addition 0xa2f+600
<operator>.subtraction 0x13b9+1-0x13b7
<operator>.addition 0xd1+4276
<operator>.subtraction ReplacementFor_answer_length-ReplacementFor_j
<operator>.subtraction 0x5bd+6013-0x1d3a
<operator>.addition 0x618+3093
<operator>.postIncrement ReplacementFor_found++
<operator>.assignment ReplacementFor_f_1=(0x14f3+2861-0x201f)
<operator>.addition 0x13b9+1
<operator>.subtraction ReplacementFor_answer_length-(0x1340+4960-0x269f)
<operator>.subtraction 0x12b9+28-0x12d3
<operator>.addition 0x5bd+6013
<operator>.equals ReplacementFor_f_1==\012(0x13c6+1226-0x1890)
<operator>.equals ReplacementFor_ANS[ReplacementFor_answer_length-\012ReplacementFor_j]==ReplacementFor_C[i][(0xd12+2639-0x1760)]
<operator>.subtraction 0x1340+4960-0x269f
<operator>.addition 0x12b9+28
<operator>.subtraction 0x13c6+1226-0x1890
<operator>.subtraction 0x14f3+2861-0x201f
<operator>.addition 0x1340+4960
<operator>.addition 0x13c6+1226
<operator>.subtraction ReplacementFor_answer_length-\012ReplacementFor_j
<operator>.subtraction 0xd12+2639-0x1760
<operator>.addition 0x14f3+2861
<operator>.addition 0xd12+2639
<operator>.indirectIndexAccess ReplacementFor_ANS[ReplacementFor_answer_length-ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_C[i][(0x5bd+6013-0x1d3a)]
<operator>.indirectIndexAccess ReplacementFor_ANS[\012ReplacementFor_answer_length-(0x1340+4960-0x269f)]
<operator>.indirectIndexAccess ReplacementFor_C[i][\012(0x12b9+28-0x12d3)]
<operator>.indirectIndexAccess ReplacementFor_C[i]
<operator>.indirectIndexAccess ReplacementFor_C[i]
<operator>.indirectIndexAccess ReplacementFor_ANS[ReplacementFor_answer_length-\012ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_C[i][(0xd12+2639-0x1760)]
<operator>.indirectIndexAccess ReplacementFor_C[i]
>>>PDG&81 0->5 0->6 0->7 0->8 0->9 0->14 0->15 0->16 0->17 0->18 0->19 0->20 0->21 0->22 0->23 0->25 0->26 0->27 0->28 0->29 0->31 0->32 0->33 0->34 0->35 0->37 0->40 0->41 0->42 0->44 0->45 0->46 0->48 0->49 0->50 0->51 0->52 0->53 0->54 0->56 0->57 0->58 0->59 0->60 0->62 0->63 0->64 0->65 0->66 0->67 0->68 0->69 0->70 0->71 2->1 2->1 2->1 3->1 3->1 3->1 4->1 4->1 4->1 5->1 5->1 5->1 5->6 5->11 5->12 5->13 5->17 5->19 5->21 5->22 5->23 5->24 5->26 5->27 5->28 5->29 5->32 5->33 5->34 5->40 5->41 6->1 6->5 7->1 7->2 7->2 8->1 8->3 8->3 9->1 9->4 9->4 10->1 10->1 10->5 11->1 11->1 11->19 11->31 11->35 11->54 12->1 12->1 12->1 12->42 13->1 13->1 13->1 13->60 17->1 17->1 17->1 17->18 17->30 17->31 17->42 17->44 17->45 17->48 17->50 17->51 17->68 18->1 18->17 19->1 19->1 19->1 19->5 19->6 20->1 20->10 20->10 21->1 21->11 21->11 22->1 22->12 22->12 23->1 23->13 23->13 24->1 24->1 24->17 29->1 29->17 29->17 30->1 30->1 30->1 30->35 30->36 30->46 30->47 30->53 30->60 30->64 30->67 31->1 31->1 31->17 31->18 31->19 31->29 31->34 31->35 31->37 31->38 31->39 31->49 31->54 31->56 31->57 31->58 31->62 31->63 31->66 31->74 31->75 31->77 32->1 32->19 32->19 33->1 33->24 33->24 35->1 35->31 36->1 36->1 36->1 36->42 37->1 37->57 38->1 38->1 38->19 39->1 39->1 39->1 42->1 42->1 42->30 42->30 42->43 42->51 42->52 42->59 42->72 42->73 42->76 43->1 43->1 43->30 43->30 44->1 44->31 44->31 45->1 45->42 45->42 46->1 46->36 46->36 47->1 47->1 47->1 47->54 47->55 47->65 47->70 49->1 49->38 49->38 51->1 51->1 51->18 51->37 51->68 51->68 52->1 54->1 54->31 55->1 55->1 55->1 55->60 57->1 57->1 57->37 57->51 57->68 58->1 60->1 60->1 60->47 60->47 60->61 60->68 60->69 60->71 60->78 60->79 60->80 61->1 61->1 61->47 61->47 62->1 62->57 62->57 64->1 64->60 64->60 65->1 65->55 65->55 68->1 68->1 68->18 68->37 68->51 69->1
>>>Token void ReplacementFor_find_combine ( ) { int i , ReplacementFor_j ; int ReplacementFor_found = ( 0x744 + 3620 - 0x1568 ) ; int ReplacementFor_f_0 = ( 0x58c + 5566 - 0x1b4a ) , ReplacementFor_f_1 = ( 0xfba + 2859 - 0x1ae5 ) ; for ( i = ( 0x11d4 + 4 - 0x11d8 ) ; i < ReplacementFor_combine ; ++ i ) { ReplacementFor_found = ( 0x7d2 + 3901 - 0x170f ) ; ReplacementFor_f_0 = ( 0x2282 + 255 - 0x2381 ) ; ReplacementFor_f_1 = ( 0x7c2 + 4174 - 0x1810 ) ; for ( ReplacementFor_j = ( 0x59d + 465 - 0x76d ) ; ReplacementFor_j <= ( 0x3c1 + 63 - 0x3fe ) ; ++ ReplacementFor_j ) { if ( ( ReplacementFor_f_0 == ( 0xd1 + 4276 - 0x1185 ) ) && ( ReplacementFor_ANS [ ReplacementFor_answer_length - ReplacementFor_j ] == ReplacementFor_C [ i ] [ ( 0x5bd + 6013 - 0x1d3a ) ] ) ) { ReplacementFor_found ++ ; ReplacementFor_f_0 = ( 0x618 + 3093 - 0x122c ) ; } else if ( ( ReplacementFor_f_1 == ( 0x13c6 + 1226 - 0x1890 ) ) && ( ReplacementFor_ANS [ ReplacementFor_answer_length - ReplacementFor_j ] == ReplacementFor_C [ i ] [ ( 0xd12 + 2639 - 0x1760 ) ] ) ) { ReplacementFor_found ++ ; ReplacementFor_f_1 = ( 0x14f3 + 2861 - 0x201f ) ; } else { } if ( ReplacementFor_found == ( 0xa2f + 600 - 0xc85 ) ) { ReplacementFor_answer_length -- ; ReplacementFor_found = ( 0x13b9 + 1 - 0x13b7 ) ; ReplacementFor_ANS [ ReplacementFor_answer_length - ( 0x1340 + 4960 - 0x269f ) ] = ReplacementFor_C [ i ] [ ( 0x12b9 + 28 - 0x12d3 ) ] ; break ; } } if ( ReplacementFor_found == ( 0xe2c + 2021 - 0x160e ) ) break ; } }
>>>Func
METHOD main
METHOD_RETURN int
scanf scanf("\x25\x64",&T)
RETURN return(0xd69+304-0xe99); return(0xd69+304-0xe99);
<operator>.lessThan t<T
<operator>.postIncrement t++
<operator>.subtraction 0xd69+304-0xe99
<operator>.assignment t=(0x24f+8986-0x2569)
scanf scanf("\x25\x64",&ReplacementFor_C)
<operator>.assignment ReplacementFor_lastChar=\012(0x1529+4315-0x2604)
scanf scanf(\012"\x20\x25\x64",&ReplacementFor_D)
scanf scanf("\x20\x25\x64",&ReplacementFor_N)
<operator>.assignment ReplacementFor_flag=\012(0xb03+3590-0x1909)
<operator>.assignment ReplacementFor_r=(0x1a4d+2044-0x2249)
<operator>.assignment ReplacementFor_F=\012(0xe16+1684-0x14aa)
printf printf("\x43\x61\x73\x65\x20\x23\x25\x64\x3a\x20\x5b" t+\012(0x36f+5721-0x19c7))
printf printf("\x5d" "\n")
<operator>.lessThan ReplacementFor_c<\012ReplacementFor_C
<operator>.postIncrement ReplacementFor_c++
<operator>.lessThan ReplacementFor_d<ReplacementFor_D
<operator>.postIncrement ReplacementFor_d++
<operator>.lessThan ReplacementFor_n<ReplacementFor_N
<operator>.postIncrement ReplacementFor_n++
<operator>.lessThan ReplacementFor_n<\012ReplacementFor_N
<operator>.postIncrement ReplacementFor_n++
<operator>.lessThan ReplacementFor_n<\012ReplacementFor_r
<operator>.postIncrement ReplacementFor_n++
<operator>.addition 0xd69+304
<operator>.subtraction 0x24f+8986-0x2569
<operator>.subtraction 0x1529+4315-0x2604
<operator>.assignment ReplacementFor_c=(0xbb6+1570-0x11d8)
scanf scanf("\x20\x25\x63\x25\x63\x25\x63" &\012ReplacementFor_combine[ReplacementFor_c][(0x149b+2367-0x1dda)] &\012ReplacementFor_combine[ReplacementFor_c][(0x1dc+1855-0x91a)] &\012ReplacementFor_combine[ReplacementFor_c][(0x1220+275-0x1331)])
<operator>.assignment ReplacementFor_d=(0x1326+2253-0x1bf3)
scanf scanf(\012"\x20\x25\x63\x25\x63" &ReplacementFor_opposed[ReplacementFor_d][\012(0x2047+1062-0x246d)] &ReplacementFor_opposed[ReplacementFor_d][\012(0x1775+1532-0x1d70)])
<operator>.assignment ReplacementFor_n=(0x774+7493-0x24b9)
<operator>.subtraction 0xb03+3590-0x1909
<operator>.subtraction 0x1a4d+2044-0x2249
<operator>.subtraction 0xe16+1684-0x14aa
<operator>.assignment ReplacementFor_n=(0xa43+1004-0xe2f)
<operator>.assignment ReplacementFor_flag=ReplacementFor_NOTHING
<operator>.assignment ReplacementFor_lastChar=ReplacementFor_invoke[\012ReplacementFor_n]
<operator>.assignment ReplacementFor_result[ReplacementFor_r++]=\012ReplacementFor_lastChar
<operator>.assignment ReplacementFor_result[ReplacementFor_r]=\012(0x14d6+1767-0x1bbd)
<operator>.assignment ReplacementFor_forbidden[ReplacementFor_F]=\012(0x779+6869-0x224e)
<operator>.addition t+\012(0x36f+5721-0x19c7)
<operator>.assignment ReplacementFor_n=(0xfec+2468-0x1990)
printf printf("\x25\x63",ReplacementFor_result[ReplacementFor_n])
<operator>.addition 0x24f+8986
<operator>.addition 0x1529+4315
<operator>.equals ReplacementFor_n==(0xc9d+6715-0x26d8)
<operator>.addition 0xb03+3590
<operator>.addition 0x1a4d+2044
<operator>.addition 0xe16+1684
<operator>.notEquals ReplacementFor_lastChar!=(0x434+8824-0x26ac)
<operator>.lessThan ReplacementFor_f<ReplacementFor_F
<operator>.postIncrement ReplacementFor_f++
<operator>.equals ReplacementFor_flag==\012ReplacementFor_FORBID
<operator>.lessThan ReplacementFor_d<ReplacementFor_D
<operator>.postIncrement ReplacementFor_d++
<operator>.subtraction 0x36f+5721-0x19c7
<operator>.notEquals ReplacementFor_n!=(0x8b2+2120-0x10fa)
<operator>.subtraction 0xbb6+1570-0x11d8
<operator>.subtraction 0x1326+2253-0x1bf3
<operator>.subtraction 0x774+7493-0x24b9
scanf scanf(\012"\x20\x25\x63",&ReplacementFor_invoke[ReplacementFor_n])
<operator>.subtraction 0xa43+1004-0xe2f
<operator>.assignment ReplacementFor_f=\012(0x191+3364-0xeb5)
<operator>.assignment ReplacementFor_d=(0x72d+6172-0x1f49)
<operator>.subtraction 0x14d6+1767-0x1bbd
<operator>.subtraction 0x779+6869-0x224e
<operator>.addition 0x36f+5721
<operator>.subtraction 0xfec+2468-0x1990
printf printf("\x2c\x20")
<operator>.addition 0xbb6+1570
<operator>.addition 0x1326+2253
<operator>.addition 0x774+7493
<operator>.subtraction 0xc9d+6715-0x26d8
scanf scanf("\x25\x63",&\012ReplacementFor_invoke[ReplacementFor_n])
<operator>.addition 0xa43+1004
<operator>.subtraction 0x434+8824-0x26ac
<operator>.lessThan ReplacementFor_c<ReplacementFor_C
<operator>.postIncrement ReplacementFor_c++
<operator>.equals ReplacementFor_flag==ReplacementFor_COMBINED
<operator>.equals ReplacementFor_invoke[ReplacementFor_n]==ReplacementFor_forbidden[\012ReplacementFor_f]
<operator>.equals ReplacementFor_invoke[\012ReplacementFor_n]==ReplacementFor_opposed[ReplacementFor_d][(0x978+2060-0x1184)]
<operator>.postIncrement ReplacementFor_r++
<operator>.addition 0x14d6+1767
<operator>.addition 0x779+6869
<operator>.addition 0xfec+2468
<operator>.subtraction 0x8b2+2120-0x10fa
<operator>.subtraction 0x149b+2367-0x1dda
<operator>.subtraction 0x1dc+1855-0x91a
<operator>.subtraction 0x1220+275-0x1331
<operator>.subtraction 0x2047+1062-0x246d
<operator>.subtraction 0x1775+1532-0x1d70
<operator>.addition 0xc9d+6715
<operator>.addition 0x434+8824
<operator>.assignment ReplacementFor_c=\012(0x1b2c+2936-0x26a4)
<operator>.subtraction 0x191+3364-0xeb5
<operator>.assignment ReplacementFor_r=(0x1234+2752-0x1cf4)
<operator>.assignment ReplacementFor_flag=\012ReplacementFor_FORBID
<operator>.assignment ReplacementFor_F=(0xf6+8026-0x2050)
<operator>.assignment ReplacementFor_lastChar=(0x649+3751-0x14f0)
<operator>.subtraction 0x72d+6172-0x1f49
<operator>.assignment ReplacementFor_forbidden[ReplacementFor_F]=ReplacementFor_opposed[\012ReplacementFor_d][(0x1bf5+695-0x1eab)]
<operator>.postIncrement ReplacementFor_F++
<operator>.assignment ReplacementFor_lastForbid=ReplacementFor_invoke[ReplacementFor_n]
<operator>.addition 0x8b2+2120
<operator>.addition 0x149b+2367
<operator>.addition 0x1dc+1855
<operator>.addition 0x1220+275
<operator>.addition 0x2047+1062
<operator>.addition 0x1775+1532
<operator>.logicalOr (\012ReplacementFor_lastChar==ReplacementFor_combine[ReplacementFor_c][\012(0xf29+3202-0x1bab)]&&ReplacementFor_invoke[ReplacementFor_n]==\012ReplacementFor_combine[ReplacementFor_c][(0x1916+2337-0x2236)])||(\012ReplacementFor_lastChar==ReplacementFor_combine[ReplacementFor_c][\012(0xf5f+4841-0x2247)]&&ReplacementFor_invoke[ReplacementFor_n]==\012ReplacementFor_combine[ReplacementFor_c][(0x514+2808-0x100c)])
<operator>.addition 0x191+3364
<operator>.addition 0x72d+6172
<operator>.subtraction 0x1b2c+2936-0x26a4
<operator>.assignment ReplacementFor_result[ReplacementFor_r-(0x1533+4014-0x24e0)]=\012ReplacementFor_combine[ReplacementFor_c][(0x833+1056-0xc51)]
<operator>.assignment ReplacementFor_flag\012=ReplacementFor_COMBINED
<operator>.assignment ReplacementFor_lastChar=(0x1d0+8768-0x2410)
<operator>.subtraction 0x1234+2752-0x1cf4
<operator>.subtraction 0xf6+8026-0x2050
<operator>.subtraction 0x649+3751-0x14f0
<operator>.subtraction 0x978+2060-0x1184
<operator>.equals ReplacementFor_invoke[ReplacementFor_n]==ReplacementFor_opposed[\012ReplacementFor_d][(0xf87+2601-0x19af)]
<operator>.addition 0x1b2c+2936
<operator>.logicalAnd ReplacementFor_lastChar==ReplacementFor_combine[ReplacementFor_c][\012(0xf29+3202-0x1bab)]&&ReplacementFor_invoke[ReplacementFor_n]==\012ReplacementFor_combine[ReplacementFor_c][(0x1916+2337-0x2236)]
<operator>.logicalAnd ReplacementFor_lastChar==ReplacementFor_combine[ReplacementFor_c][\012(0xf5f+4841-0x2247)]&&ReplacementFor_invoke[ReplacementFor_n]==\012ReplacementFor_combine[ReplacementFor_c][(0x514+2808-0x100c)]
<operator>.equals ReplacementFor_lastChar==ReplacementFor_lastForbid
<operator>.addition 0x1234+2752
<operator>.addition 0xf6+8026
<operator>.addition 0x649+3751
<operator>.addition 0x978+2060
<operator>.subtraction 0x1bf5+695-0x1eab
<operator>.assignment ReplacementFor_forbidden[\012ReplacementFor_F]=ReplacementFor_opposed[ReplacementFor_d][(0xde2+1474-0x13a4)]
<operator>.postIncrement ReplacementFor_F++
<operator>.assignment ReplacementFor_lastForbid=ReplacementFor_invoke[\012ReplacementFor_n]
<operator>.equals ReplacementFor_lastChar==ReplacementFor_combine[ReplacementFor_c][\012(0xf29+3202-0x1bab)]
<operator>.equals ReplacementFor_invoke[ReplacementFor_n]==\012ReplacementFor_combine[ReplacementFor_c][(0x1916+2337-0x2236)]
<operator>.equals ReplacementFor_lastChar==ReplacementFor_combine[ReplacementFor_c][\012(0xf5f+4841-0x2247)]
<operator>.equals ReplacementFor_invoke[ReplacementFor_n]==\012ReplacementFor_combine[ReplacementFor_c][(0x514+2808-0x100c)]
<operator>.postDecrement ReplacementFor_F--
<operator>.subtraction 0x1d0+8768-0x2410
<operator>.addition 0x1bf5+695
<operator>.subtraction ReplacementFor_r-(0x1533+4014-0x24e0)
<operator>.subtraction 0x833+1056-0xc51
<operator>.addition 0x1d0+8768
<operator>.subtraction 0xf87+2601-0x19af
<operator>.subtraction 0xf29+3202-0x1bab
<operator>.subtraction 0x1916+2337-0x2236
<operator>.subtraction 0xf5f+4841-0x2247
<operator>.subtraction 0x514+2808-0x100c
<operator>.subtraction 0x1533+4014-0x24e0
<operator>.addition 0x833+1056
<operator>.addition 0xf87+2601
<operator>.subtraction 0xde2+1474-0x13a4
<operator>.addition 0xf29+3202
<operator>.addition 0x1916+2337
<operator>.addition 0xf5f+4841
<operator>.addition 0x514+2808
<operator>.addition 0x1533+4014
<operator>.addition 0xde2+1474
<operator>.addressOf &ReplacementFor_C
<operator>.addressOf &ReplacementFor_D
<operator>.addressOf &ReplacementFor_N
<operator>.addressOf &\012ReplacementFor_combine[ReplacementFor_c][(0x149b+2367-0x1dda)]
<operator>.addressOf &\012ReplacementFor_combine[ReplacementFor_c][(0x1dc+1855-0x91a)]
<operator>.addressOf &\012ReplacementFor_combine[ReplacementFor_c][(0x1220+275-0x1331)]
<operator>.addressOf &ReplacementFor_opposed[ReplacementFor_d][\012(0x2047+1062-0x246d)]
<operator>.addressOf &ReplacementFor_opposed[ReplacementFor_d][\012(0x1775+1532-0x1d70)]
<operator>.indirectIndexAccess ReplacementFor_invoke[\012ReplacementFor_n]
<operator>.indirectIndexAccess ReplacementFor_result[ReplacementFor_r++]
<operator>.indirectIndexAccess ReplacementFor_result[ReplacementFor_r]
<operator>.indirectIndexAccess ReplacementFor_forbidden[ReplacementFor_F]
<operator>.indirectIndexAccess ReplacementFor_result[ReplacementFor_n]
<operator>.indirectIndexAccess ReplacementFor_combine[ReplacementFor_c][(0x149b+2367-0x1dda)]
<operator>.indirectIndexAccess ReplacementFor_combine[ReplacementFor_c][(0x1dc+1855-0x91a)]
<operator>.indirectIndexAccess ReplacementFor_combine[ReplacementFor_c][(0x1220+275-0x1331)]
<operator>.indirectIndexAccess ReplacementFor_opposed[ReplacementFor_d][\012(0x2047+1062-0x246d)]
<operator>.indirectIndexAccess ReplacementFor_opposed[ReplacementFor_d][\012(0x1775+1532-0x1d70)]
<operator>.indirectIndexAccess ReplacementFor_combine[ReplacementFor_c]
<operator>.indirectIndexAccess ReplacementFor_combine[ReplacementFor_c]
<operator>.indirectIndexAccess ReplacementFor_combine[ReplacementFor_c]
<operator>.indirectIndexAccess ReplacementFor_opposed[ReplacementFor_d]
<operator>.indirectIndexAccess ReplacementFor_opposed[ReplacementFor_d]
<operator>.addressOf &ReplacementFor_invoke[ReplacementFor_n]
<operator>.indirectIndexAccess ReplacementFor_invoke[ReplacementFor_n]
<operator>.addressOf &\012ReplacementFor_invoke[ReplacementFor_n]
<operator>.indirectIndexAccess ReplacementFor_invoke[ReplacementFor_n]
<operator>.indirectIndexAccess ReplacementFor_forbidden[\012ReplacementFor_f]
<operator>.indirectIndexAccess ReplacementFor_invoke[\012ReplacementFor_n]
<operator>.indirectIndexAccess ReplacementFor_opposed[ReplacementFor_d][(0x978+2060-0x1184)]
<operator>.indirectIndexAccess ReplacementFor_invoke[ReplacementFor_n]
<operator>.indirectIndexAccess ReplacementFor_opposed[ReplacementFor_d]
<operator>.indirectIndexAccess ReplacementFor_forbidden[ReplacementFor_F]
<operator>.indirectIndexAccess ReplacementFor_opposed[\012ReplacementFor_d][(0x1bf5+695-0x1eab)]
<operator>.indirectIndexAccess ReplacementFor_invoke[ReplacementFor_n]
<operator>.indirectIndexAccess ReplacementFor_opposed[\012ReplacementFor_d]
<operator>.indirectIndexAccess ReplacementFor_result[ReplacementFor_r-(0x1533+4014-0x24e0)]
<operator>.indirectIndexAccess ReplacementFor_combine[ReplacementFor_c][(0x833+1056-0xc51)]
<operator>.indirectIndexAccess ReplacementFor_invoke[ReplacementFor_n]
<operator>.indirectIndexAccess ReplacementFor_opposed[\012ReplacementFor_d][(0xf87+2601-0x19af)]
<operator>.indirectIndexAccess ReplacementFor_combine[ReplacementFor_c][\012(0xf29+3202-0x1bab)]
<operator>.indirectIndexAccess ReplacementFor_invoke[ReplacementFor_n]
<operator>.indirectIndexAccess ReplacementFor_combine[ReplacementFor_c][(0x1916+2337-0x2236)]
<operator>.indirectIndexAccess ReplacementFor_combine[ReplacementFor_c][\012(0xf5f+4841-0x2247)]
<operator>.indirectIndexAccess ReplacementFor_invoke[ReplacementFor_n]
<operator>.indirectIndexAccess ReplacementFor_combine[ReplacementFor_c][(0x514+2808-0x100c)]
<operator>.indirectIndexAccess ReplacementFor_combine[ReplacementFor_c]
<operator>.indirectIndexAccess ReplacementFor_opposed[\012ReplacementFor_d]
<operator>.indirectIndexAccess ReplacementFor_forbidden[\012ReplacementFor_F]
<operator>.indirectIndexAccess ReplacementFor_opposed[ReplacementFor_d][(0xde2+1474-0x13a4)]
<operator>.indirectIndexAccess ReplacementFor_invoke[\012ReplacementFor_n]
<operator>.indirectIndexAccess ReplacementFor_combine[ReplacementFor_c]
<operator>.indirectIndexAccess ReplacementFor_combine[ReplacementFor_c]
<operator>.indirectIndexAccess ReplacementFor_combine[ReplacementFor_c]
<operator>.indirectIndexAccess ReplacementFor_combine[ReplacementFor_c]
<operator>.indirectIndexAccess ReplacementFor_opposed[ReplacementFor_d]
>>>PDG&218 0->2 0->4 0->5 0->6 0->8 0->10 0->11 0->15 0->16 0->17 0->18 0->19 0->20 0->21 0->22 0->23 0->24 0->25 0->26 0->27 0->28 0->29 0->35 0->36 0->37 0->39 0->41 0->44 0->46 0->47 0->48 0->49 0->50 0->51 0->52 0->53 0->54 0->55 0->56 0->57 0->58 0->59 0->60 0->61 0->62 0->63 0->65 0->68 0->69 0->70 0->71 0->72 0->73 0->74 0->75 0->76 0->78 0->79 0->80 0->81 0->82 0->85 0->86 0->87 0->88 0->89 0->90 0->91 0->92 0->93 0->94 0->95 0->96 0->98 0->100 0->103 0->105 0->107 0->108 0->109 0->110 0->111 0->112 0->114 0->115 0->116 0->118 0->120 0->121 0->122 0->123 0->125 0->128 0->129 0->130 0->131 0->132 0->133 0->135 0->137 0->139 0->141 0->142 0->143 0->144 0->145 0->146 0->147 0->148 0->149 0->150 0->151 0->152 0->153 0->154 0->155 0->156 0->157 0->158 0->159 0->160 0->161 2->1 2->4 3->1 4->1 4->1 4->1 4->4 4->5 4->5 4->8 4->9 4->10 4->11 4->12 4->13 4->14 4->15 4->15 4->16 4->17 4->19 4->21 4->23 4->25 4->29 4->30 4->32 4->34 4->35 4->36 4->37 4->38 4->44 4->44 4->45 4->48 4->50 4->51 4->52 4->59 4->61 4->62 4->63 4->65 4->70 4->71 4->73 4->74 4->75 4->78 4->88 4->162 4->163 4->164 5->1 5->4 6->1 6->1 6->3 7->1 7->1 7->4 8->1 8->17 8->80 9->1 9->1 9->1 9->53 10->1 10->19 10->57 11->1 11->21 11->23 12->1 12->1 12->1 13->1 13->1 13->25 13->85 13->144 14->1 14->1 14->1 14->54 14->141 15->1 15->1 16->1 17->1 17->1 17->1 17->8 17->17 17->18 17->18 17->31 17->80 17->90 17->91 17->92 17->108 17->109 17->110 17->165 17->166 17->167 17->175 17->176 17->177 17->180 17->181 17->182 18->1 18->17 19->1 19->1 19->1 19->10 19->19 19->20 19->20 19->33 19->57 19->93 19->94 19->111 19->112 19->168 19->169 19->178 19->179 19->183 19->184 20->1 20->19 21->1 21->21 21->22 21->23 21->49 21->49 21->76 21->95 22->1 22->21 23->1 23->1 23->11 23->21 23->23 23->24 23->24 23->39 23->53 23->79 23->96 24->1 24->23 25->1 25->1 25->1 25->25 25->26 25->46 25->60 25->60 25->89 25->107 25->174 26->1 26->25 28->1 28->7 28->7 29->1 29->9 29->9 30->1 30->1 30->17 31->1 31->1 31->1 32->1 32->1 32->19 33->1 33->1 34->1 34->1 34->21 35->1 35->12 35->12 36->1 36->13 36->13 37->1 37->14 37->14 38->1 38->1 38->23 39->1 39->1 39->56 39->82 40->1 40->1 40->41 40->53 41->1 41->1 41->1 42->1 42->1 42->1 43->1 43->1 43->1 44->1 45->1 45->1 45->25 46->1 46->1 49->1 49->1 49->22 49->64 49->77 49->185 49->186 49->187 49->192 53->1 53->1 53->1 53->54 53->56 53->66 53->80 53->82 53->97 53->98 53->114 53->116 53->125 53->137 54->1 54->1 54->1 54->55 54->83 54->105 54->135 54->141 54->188 54->189 55->1 55->54 56->1 56->1 56->1 56->40 56->41 56->42 56->43 56->57 56->67 56->68 56->69 56->85 56->86 56->87 56->100 56->103 56->115 56->170 56->171 56->172 56->173 57->1 57->1 57->1 57->10 57->19 57->58 57->84 57->123 57->132 57->190 57->191 57->193 58->1 58->57 59->1 59->15 59->15 59->44 59->44 60->1 60->1 60->26 60->72 61->1 61->30 61->30 62->1 62->32 62->32 63->1 63->34 63->34 64->1 64->77 64->83 64->106 64->124 64->138 64->140 65->1 65->38 65->38 66->1 66->1 66->54 67->1 67->1 67->57 68->1 68->42 68->42 69->1 69->43 69->43 71->1 71->45 71->45 72->1 76->1 76->49 76->49 77->1 77->64 77->83 77->106 77->124 77->138 77->140 79->1 79->53 79->53 80->1 80->1 80->1 80->8 80->17 80->81 80->113 80->126 80->137 80->148 80->156 80->202 80->213 81->1 81->80 82->1 82->1 82->1 82->54 82->56 82->56 82->66 82->98 82->114 82->118 83->1 83->1 83->1 83->54 83->55 83->64 83->77 83->99 83->100 83->101 83->102 83->106 83->120 83->121 83->122 83->124 83->129 83->130 83->131 83->138 83->140 84->1 84->1 84->40 84->104 84->105 84->106 84->124 84->133 84->136 84->143 84->147 84->154 84->194 84->195 84->196 84->197 84->200 84->201 84->209 85->25 85->144 89->1 89->60 89->60 90->1 91->1 92->1 93->1 94->1 97->1 97->1 97->80 98->1 98->66 98->66 99->1 99->1 99->25 99->85 99->144 100->1 100->56 101->1 101->1 101->1 101->54 101->105 101->135 101->141 102->1 102->1 102->1 102->53 103->1 103->67 103->67 104->1 104->1 105->1 105->1 105->54 105->141 106->1 106->1 106->1 106->128 113->1 113->1 113->1 113->80 113->81 113->117 113->118 113->119 113->128 113->142 113->144 113->145 113->146 113->152 113->153 113->160 113->198 113->199 113->208 116->1 116->97 116->97 117->1 117->1 117->1 118->1 118->82 119->1 119->1 119->1 119->53 120->1 120->99 120->99 121->1 121->101 121->101 122->1 122->102 122->102 123->1 124->1 124->1 124->1 124->57 124->58 124->64 124->77 124->83 124->106 124->134 124->135 124->136 124->138 124->140 124->155 124->161 124->210 124->211 124->212 124->217 126->1 126->1 126->113 126->113 126->127 126->139 126->150 126->158 126->205 126->215 127->1 127->1 127->113 127->113 128->1 128->1 128->141 133->1 134->1 134->1 134->1 135->1 135->1 135->54 135->141 136->1 136->1 136->128 137->1 137->1 137->53 137->126 137->126 137->128 137->138 137->139 137->149 137->157 137->203 137->204 137->214 138->1 138->1 138->64 138->77 138->83 138->106 138->124 138->126 138->126 138->140 139->1 139->1 139->53 139->127 139->127 139->128 139->137 139->140 139->151 139->159 139->206 139->207 139->216 140->1 140->1 140->64 140->77 140->83 140->106 140->124 140->127 140->127 140->138 141->1 141->1 141->54 142->1 142->119 142->119 144->1 144->25 144->85 145->1 147->1 148->1 149->1 150->1 151->1 152->1 152->144 152->144 155->1
>>>Token int main ( ) { int T , ReplacementFor_C , ReplacementFor_D , ReplacementFor_N , t , ReplacementFor_c , ReplacementFor_d , ReplacementFor_n , ReplacementFor_f , ReplacementFor_r , ReplacementFor_F ; char ReplacementFor_invoke [ ( 0x1530 + 555 - 0x16f7 ) ] , ReplacementFor_combine [ ( 0x740 + 5506 - 0x1c9e ) ] [ ( 0x1169 + 4311 - 0x223d ) ] , ReplacementFor_opposed [ ( 0x1972 + 2438 - 0x22dc ) ] [ ( 0x81c + 3154 - 0x146c ) ] , ReplacementFor_result [ ( 0x10e7 + 697 - 0x133c ) ] , ReplacementFor_forbidden [ ( 0xfc8 + 5784 - 0x25fc ) ] ; char ReplacementFor_lastChar , ReplacementFor_flag , ReplacementFor_lastForbid ; scanf ( " \x25 \x64 " , & T ) ; for ( t = ( 0x24f + 8986 - 0x2569 ) ; t < T ; t ++ ) { scanf ( " \x25 \x64 " , & ReplacementFor_C ) ; ReplacementFor_lastChar = ( 0x1529 + 4315 - 0x2604 ) ; for ( ReplacementFor_c = ( 0xbb6 + 1570 - 0x11d8 ) ; ReplacementFor_c < ReplacementFor_C ; ReplacementFor_c ++ ) { scanf ( " \x20 \x25 \x63 \x25 \x63 \x25 \x63 " , & ReplacementFor_combine [ ReplacementFor_c ] [ ( 0x149b + 2367 - 0x1dda ) ] , & ReplacementFor_combine [ ReplacementFor_c ] [ ( 0x1dc + 1855 - 0x91a ) ] , & ReplacementFor_combine [ ReplacementFor_c ] [ ( 0x1220 + 275 - 0x1331 ) ] ) ; } scanf ( " \x20 \x25 \x64 " , & ReplacementFor_D ) ; for ( ReplacementFor_d = ( 0x1326 + 2253 - 0x1bf3 ) ; ReplacementFor_d < ReplacementFor_D ; ReplacementFor_d ++ ) { scanf ( " \x20 \x25 \x63 \x25 \x63 " , & ReplacementFor_opposed [ ReplacementFor_d ] [ ( 0x2047 + 1062 - 0x246d ) ] , & ReplacementFor_opposed [ ReplacementFor_d ] [ ( 0x1775 + 1532 - 0x1d70 ) ] ) ; } scanf ( " \x20 \x25 \x64 " , & ReplacementFor_N ) ; for ( ReplacementFor_n = ( 0x774 + 7493 - 0x24b9 ) ; ReplacementFor_n < ReplacementFor_N ; ReplacementFor_n ++ ) { if ( ReplacementFor_n == ( 0xc9d + 6715 - 0x26d8 ) ) scanf ( " \x20 \x25 \x63 " , & ReplacementFor_invoke [ ReplacementFor_n ] ) ; else scanf ( " \x25 \x63 " , & ReplacementFor_invoke [ ReplacementFor_n ] ) ; } ReplacementFor_flag = ( 0xb03 + 3590 - 0x1909 ) ; ReplacementFor_r = ( 0x1a4d + 2044 - 0x2249 ) ; ReplacementFor_F = ( 0xe16 + 1684 - 0x14aa ) ; for ( ReplacementFor_n = ( 0xa43 + 1004 - 0xe2f ) ; ReplacementFor_n < ReplacementFor_N ; ReplacementFor_n ++ ) { ReplacementFor_flag = ReplacementFor_NOTHING ; if ( ReplacementFor_lastChar != ( 0x434 + 8824 - 0x26ac ) ) { for ( ReplacementFor_c = ( 0x1b2c + 2936 - 0x26a4 ) ; ReplacementFor_c < ReplacementFor_C ; ReplacementFor_c ++ ) { if ( ( ReplacementFor_lastChar == ReplacementFor_combine [ ReplacementFor_c ] [ ( 0xf29 + 3202 - 0x1bab ) ] && ReplacementFor_invoke [ ReplacementFor_n ] == ReplacementFor_combine [ ReplacementFor_c ] [ ( 0x1916 + 2337 - 0x2236 ) ] ) || ( ReplacementFor_lastChar == ReplacementFor_combine [ ReplacementFor_c ] [ ( 0xf5f + 4841 - 0x2247 ) ] && ReplacementFor_invoke [ ReplacementFor_n ] == ReplacementFor_combine [ ReplacementFor_c ] [ ( 0x514 + 2808 - 0x100c ) ] ) ) { ReplacementFor_result [ ReplacementFor_r - ( 0x1533 + 4014 - 0x24e0 ) ] = ReplacementFor_combine [ ReplacementFor_c ] [ ( 0x833 + 1056 - 0xc51 ) ] ; ReplacementFor_flag = ReplacementFor_COMBINED ; if ( ReplacementFor_lastChar == ReplacementFor_lastForbid ) { ReplacementFor_F -- ; } ReplacementFor_lastChar = ( 0x1d0 + 8768 - 0x2410 ) ; break ; } } if ( ReplacementFor_flag == ReplacementFor_COMBINED ) { continue ; } } for ( ReplacementFor_f = ( 0x191 + 3364 - 0xeb5 ) ; ReplacementFor_f < ReplacementFor_F ; ReplacementFor_f ++ ) { if ( ReplacementFor_invoke [ ReplacementFor_n ] == ReplacementFor_forbidden [ ReplacementFor_f ] ) { ReplacementFor_r = ( 0x1234 + 2752 - 0x1cf4 ) ; ReplacementFor_flag = ReplacementFor_FORBID ; ReplacementFor_F = ( 0xf6 + 8026 - 0x2050 ) ; ReplacementFor_lastChar = ( 0x649 + 3751 - 0x14f0 ) ; break ; } } if ( ReplacementFor_flag == ReplacementFor_FORBID ) { continue ; } for ( ReplacementFor_d = ( 0x72d + 6172 - 0x1f49 ) ; ReplacementFor_d < ReplacementFor_D ; ReplacementFor_d ++ ) { if ( ReplacementFor_invoke [ ReplacementFor_n ] == ReplacementFor_opposed [ ReplacementFor_d ] [ ( 0x978 + 2060 - 0x1184 ) ] ) { ReplacementFor_forbidden [ ReplacementFor_F ] = ReplacementFor_opposed [ ReplacementFor_d ] [ ( 0x1bf5 + 695 - 0x1eab ) ] ; ReplacementFor_F ++ ; ReplacementFor_lastForbid = ReplacementFor_invoke [ ReplacementFor_n ] ; break ; } else if ( ReplacementFor_invoke [ ReplacementFor_n ] == ReplacementFor_opposed [ ReplacementFor_d ] [ ( 0xf87 + 2601 - 0x19af ) ] ) { ReplacementFor_forbidden [ ReplacementFor_F ] = ReplacementFor_opposed [ ReplacementFor_d ] [ ( 0xde2 + 1474 - 0x13a4 ) ] ; ReplacementFor_F ++ ; ReplacementFor_lastForbid = ReplacementFor_invoke [ ReplacementFor_n ] ; break ; } } ReplacementFor_lastChar = ReplacementFor_invoke [ ReplacementFor_n ] ; ReplacementFor_result [ ReplacementFor_r ++ ] = ReplacementFor_lastChar ; ReplacementFor_result [ ReplacementFor_r ] = ( 0x14d6 + 1767 - 0x1bbd ) ; ReplacementFor_forbidden [ ReplacementFor_F ] = ( 0x779 + 6869 - 0x224e ) ; } printf ( " \x43 \x61 \x73 \x65 \x20 \x23 \x25 \x64 \x3a \x20 \x5b " , t + ( 0x36f + 5721 - 0x19c7 ) ) ; for ( ReplacementFor_n = ( 0xfec + 2468 - 0x1990 ) ; ReplacementFor_n < ReplacementFor_r ; ReplacementFor_n ++ ) { if ( ReplacementFor_n != ( 0x8b2 + 2120 - 0x10fa ) ) printf ( " \x2c \x20 " ) ; printf ( " \x25 \x63 " , ReplacementFor_result [ ReplacementFor_n ] ) ; } printf ( " \x5d " " \n " ) ; } return ( 0xd69 + 304 - 0xe99 ) ; }
>>>Func
METHOD ReplacementFor_absld
METHOD_RETURN long double
PARAM long double val
RETURN return val<\012(0xc1a+352-0xd7a)?-val:val; return val<\012(0xc1a+352-0xd7a)?-val:val;
<operator>.conditional val<\012(0xc1a+352-0xd7a)?-val:val
<operator>.lessThan val<\012(0xc1a+352-0xd7a)
<operator>.minus -val
<operator>.subtraction 0xc1a+352-0xd7a
<operator>.addition 0xc1a+352
>>>PDG&9 0->2 0->4 0->5 0->6 0->7 0->8 2->5 3->1 4->1 4->1 4->1 4->1 4->3 5->1 5->4 5->6 5->6 6->4 7->1 7->5 7->5
>>>Token static inline long double ReplacementFor_absld ( long double val ) { return val < ( 0xc1a + 352 - 0xd7a ) ? - val : val ; }
>>>Func
METHOD ReplacementFor_readint
METHOD_RETURN int
PARAM char*ReplacementFor_c
<operator>.assignment ReplacementFor_r=(0x172d+3778-0x25ef)
RETURN return ReplacementFor_r*s; return ReplacementFor_r*s;
<operator>.equals *ReplacementFor_c==\012((char)(0x1297+5092-0x264e))
<operator>.logicalAnd *ReplacementFor_c>=\012((char)(0x196d+3032-0x2515))&&*ReplacementFor_c<=((char)(0x477+2310-0xd44))
<operator>.assignment *\012ReplacementFor_c=(char)fgetc(stdin)
<operator>.multiplication ReplacementFor_r*s
<operator>.subtraction 0x172d+3778-0x25ef
<operator>.assignment *ReplacementFor_c=(char)fgetc(stdin)
<operator>.assignment s=-\012(0x1421+1634-0x1a82)
<operator>.assignment ReplacementFor_r=ReplacementFor_r>\012(0x1d82+1444-0x2326)?(0xb61+1112-0xfaf)*ReplacementFor_r+(*ReplacementFor_c-\012((char)(0x233+8571-0x237e))):*ReplacementFor_c-((char)(0xdec+1747-0x148f))
<operator>.addition 0x172d+3778
<operator>.cast (char)(0x1297+5092-0x264e)
<operator>.assignment s=(0x606+6651-0x2000)
<operator>.greaterEqualsThan *ReplacementFor_c>=\012((char)(0x196d+3032-0x2515))
<operator>.lessEqualsThan *ReplacementFor_c<=((char)(0x477+2310-0xd44))
<operator>.cast (char)fgetc(stdin)
<operator>.subtraction 0x1297+5092-0x264e
<operator>.cast (char)fgetc(stdin)
<operator>.minus -\012(0x1421+1634-0x1a82)
<operator>.cast (char)(0x196d+3032-0x2515)
<operator>.cast (char)(0x477+2310-0xd44)
fgetc fgetc(stdin)
<operator>.conditional ReplacementFor_r>\012(0x1d82+1444-0x2326)?(0xb61+1112-0xfaf)*ReplacementFor_r+(*ReplacementFor_c-\012((char)(0x233+8571-0x237e))):*ReplacementFor_c-((char)(0xdec+1747-0x148f))
<operator>.addition 0x1297+5092
fgetc fgetc(stdin)
<operator>.subtraction 0x1421+1634-0x1a82
<operator>.subtraction 0x606+6651-0x2000
<operator>.subtraction 0x196d+3032-0x2515
<operator>.subtraction 0x477+2310-0xd44
<operator>.greaterThan ReplacementFor_r>\012(0x1d82+1444-0x2326)
<operator>.addition (0xb61+1112-0xfaf)*ReplacementFor_r+(*ReplacementFor_c-\012((char)(0x233+8571-0x237e)))
<operator>.subtraction *ReplacementFor_c-((char)(0xdec+1747-0x148f))
<operator>.addition 0x1421+1634
<operator>.addition 0x606+6651
<operator>.addition 0x196d+3032
<operator>.addition 0x477+2310
<operator>.subtraction 0x1d82+1444-0x2326
<operator>.multiplication (0xb61+1112-0xfaf)*ReplacementFor_r
<operator>.subtraction *ReplacementFor_c-\012((char)(0x233+8571-0x237e))
<operator>.cast (char)(0xdec+1747-0x148f)
<operator>.addition 0x1d82+1444
<operator>.subtraction 0xb61+1112-0xfaf
<operator>.cast (char)(0x233+8571-0x237e)
<operator>.subtraction 0xdec+1747-0x148f
<operator>.addition 0xb61+1112
<operator>.subtraction 0x233+8571-0x237e
<operator>.addition 0xdec+1747
<operator>.addition 0x233+8571
<operator>.indirection *\012ReplacementFor_c
<operator>.indirection *ReplacementFor_c
<operator>.indirection *ReplacementFor_c
<operator>.indirection *ReplacementFor_c
UNKNOWN char char
UNKNOWN char char
UNKNOWN char char
UNKNOWN char char
<operator>.indirection *ReplacementFor_c
<operator>.indirection *ReplacementFor_c
UNKNOWN char char
UNKNOWN char char
>>>PDG&63 0->2 0->8 0->9 0->13 0->19 0->24 0->26 0->27 0->28 0->29 0->30 0->31 0->32 0->35 0->36 0->37 0->38 0->39 0->40 0->43 0->44 0->46 0->47 0->48 0->49 0->50 2->1 3->1 3->1 3->8 3->32 4->1 5->1 5->1 5->10 5->11 5->15 5->16 5->20 5->21 5->27 5->28 5->29 5->35 5->36 5->52 5->56 6->1 6->1 6->1 6->6 6->7 6->12 6->16 6->18 6->22 6->24 6->25 6->30 6->32 6->37 6->39 6->43 6->51 6->53 6->55 6->57 7->1 7->1 7->1 7->16 7->17 7->34 7->41 8->1 8->1 8->1 8->4 9->1 9->3 9->3 10->1 10->1 10->16 11->1 11->1 11->8 12->1 12->1 12->8 12->32 14->1 15->1 15->1 15->8 16->1 16->1 16->6 16->6 16->17 16->17 16->23 16->31 16->34 16->38 16->41 16->54 16->58 17->1 17->1 17->6 17->6 17->34 17->41 18->1 19->1 19->5 19->5 19->14 19->14 20->1 21->1 21->11 22->1 23->1 24->1 24->7 24->18 25->1 25->1 25->1 27->1 27->10 27->20 27->24 28->1 28->21 28->21 29->1 29->15 29->15 30->1 30->16 30->16 30->22 30->22 31->1 31->17 31->17 31->23 31->23 32->1 32->33 32->34 32->40 32->40 32->41 32->42 32->44 32->45 32->46 32->47 32->48 32->49 32->50 32->59 32->60 32->61 32->62 33->1 33->1 34->1 34->12 34->12 34->16 34->25 34->25 39->1 39->32 39->32 40->1 40->12 40->12 40->25 40->25 40->33 40->33 41->1 41->12 41->12 41->16 41->25 41->25 41->33 41->33 42->1 44->1 44->40 44->40 45->1 46->1 46->34 46->34 46->42 46->42 48->1 48->41 48->41 48->45 48->45
>>>Token int ReplacementFor_readint ( char * ReplacementFor_c ) { int ReplacementFor_r , s ; ReplacementFor_r = ( 0x172d + 3778 - 0x25ef ) ; if ( * ReplacementFor_c == ( ( char ) ( 0x1297 + 5092 - 0x264e ) ) ) { * ReplacementFor_c = ( char ) fgetc ( stdin ) ; s = - ( 0x1421 + 1634 - 0x1a82 ) ; } else { s = ( 0x606 + 6651 - 0x2000 ) ; } for ( ; * ReplacementFor_c >= ( ( char ) ( 0x196d + 3032 - 0x2515 ) ) && * ReplacementFor_c <= ( ( char ) ( 0x477 + 2310 - 0xd44 ) ) ; * ReplacementFor_c = ( char ) fgetc ( stdin ) ) { ReplacementFor_r = ReplacementFor_r > ( 0x1d82 + 1444 - 0x2326 ) ? ( 0xb61 + 1112 - 0xfaf ) * ReplacementFor_r + ( * ReplacementFor_c - ( ( char ) ( 0x233 + 8571 - 0x237e ) ) ) : * ReplacementFor_c - ( ( char ) ( 0xdec + 1747 - 0x148f ) ) ; } return ReplacementFor_r * s ; }
>>>Func
METHOD ReplacementFor_check_opposites
METHOD_RETURN int
PARAM struct ReplacementFor_node_D*ReplacementFor_h
PARAM char ReplacementFor_D[]
PARAM int i
RETURN return(0xbd5+4961-0x1f36); return(0xbd5+4961-0x1f36);
<operator>.notEquals ReplacementFor_h!=NULL
<operator>.subtraction 0xbd5+4961-0x1f36
<operator>.assignment *ReplacementFor_temp=ReplacementFor_h
<operator>.notEquals ReplacementFor_temp!=NULL
<operator>.addition 0xbd5+4961
<operator>.assignment ReplacementFor_temp=\012ReplacementFor_temp->next
<operator>.equals ReplacementFor_temp->ReplacementFor_a==\012ReplacementFor_D[i]
<operator>.assignment t=i
<operator>.greaterEqualsThan t>=(0xc32+6319-0x24e1)
<operator>.postDecrement t--
<operator>.equals ReplacementFor_temp->ReplacementFor_b==ReplacementFor_D[i]
<operator>.subtraction 0xc32+6319-0x24e1
<operator>.equals ReplacementFor_D[t\012]==ReplacementFor_temp->ReplacementFor_b
<operator>.assignment t=i
<operator>.addition 0xc32+6319
RETURN return(0xff4+3504-0x1da3); return(0xff4+3504-0x1da3);
<operator>.greaterEqualsThan t>=\012(0x962+1248-0xe42)
<operator>.subtraction 0xff4+3504-0x1da3
<operator>.postDecrement t--
<operator>.subtraction 0x962+1248-0xe42
<operator>.equals ReplacementFor_D[t]==ReplacementFor_temp->\012ReplacementFor_a
<operator>.addition 0xff4+3504
<operator>.addition 0x962+1248
RETURN return(0x18f1+3207-0x2577); return(0x18f1+3207-0x2577);
<operator>.subtraction 0x18f1+3207-0x2577
<operator>.addition 0x18f1+3207
<operator>.indirectFieldAccess ReplacementFor_temp->next
<operator>.indirectFieldAccess ReplacementFor_temp->ReplacementFor_a
<operator>.indirectIndexAccess ReplacementFor_D[i]
FIELD_IDENTIFIER next next
FIELD_IDENTIFIER ReplacementFor_a ReplacementFor_a
<operator>.indirectFieldAccess ReplacementFor_temp->ReplacementFor_b
<operator>.indirectIndexAccess ReplacementFor_D[i]
<operator>.indirectIndexAccess ReplacementFor_D[t\012]
<operator>.indirectFieldAccess ReplacementFor_temp->ReplacementFor_b
FIELD_IDENTIFIER ReplacementFor_b ReplacementFor_b
FIELD_IDENTIFIER ReplacementFor_b ReplacementFor_b
<operator>.indirectIndexAccess ReplacementFor_D[t]
<operator>.indirectFieldAccess ReplacementFor_temp->\012ReplacementFor_a
FIELD_IDENTIFIER ReplacementFor_a ReplacementFor_a
>>>PDG&46 0->2 0->3 0->4 0->6 0->7 0->8 0->9 0->10 0->13 0->14 0->15 0->17 0->19 0->20 0->22 0->23 0->24 0->25 0->27 0->28 0->30 0->31 2->6 3->1 3->12 3->16 3->18 3->26 4->13 4->19 5->1 6->1 6->5 6->7 6->8 6->8 6->9 6->9 6->10 7->5 8->1 8->1 8->9 9->1 9->1 9->1 9->5 9->7 9->10 9->12 9->33 9->34 9->36 11->1 11->1 11->9 12->1 12->1 12->1 12->13 12->14 12->16 12->16 12->17 12->20 12->26 12->37 12->38 12->41 13->1 13->1 13->14 14->1 14->1 14->1 14->9 14->11 14->15 14->18 14->32 14->35 14->39 14->40 14->42 15->1 15->14 16->1 16->9 16->11 16->12 16->18 16->19 16->22 16->25 16->28 16->32 16->35 17->1 17->14 17->14 18->1 18->1 18->1 18->14 18->15 18->16 18->17 18->20 18->21 18->23 18->27 19->22 21->1 22->1 22->1 22->9 22->11 22->24 22->26 22->32 22->35 22->43 22->44 22->45 23->1 23->1 23->21 24->1 24->22 25->1 25->22 25->22 26->1 26->1 26->1 26->12 26->22 26->24 26->25 26->28 26->29 26->30 26->31 29->1 30->29
>>>Token int ReplacementFor_check_opposites ( struct ReplacementFor_node_D * ReplacementFor_h , char ReplacementFor_D [ ] , int i ) { if ( ReplacementFor_h != NULL ) { struct ReplacementFor_node_D * ReplacementFor_temp = ReplacementFor_h ; while ( ReplacementFor_temp != NULL ) { if ( ReplacementFor_temp -> ReplacementFor_a == ReplacementFor_D [ i ] ) { int t = i ; while ( t >= ( 0xc32 + 6319 - 0x24e1 ) ) { if ( ReplacementFor_D [ t ] == ReplacementFor_temp -> ReplacementFor_b ) { return ( 0xff4 + 3504 - 0x1da3 ) ; } t -- ; } } else if ( ReplacementFor_temp -> ReplacementFor_b == ReplacementFor_D [ i ] ) { int t = i ; while ( t >= ( 0x962 + 1248 - 0xe42 ) ) { if ( ReplacementFor_D [ t ] == ReplacementFor_temp -> ReplacementFor_a ) { return ( 0x18f1 + 3207 - 0x2577 ) ; } t -- ; } } ReplacementFor_temp = ReplacementFor_temp -> next ; } } return ( 0xbd5 + 4961 - 0x1f36 ) ; }
>>>Func
METHOD ReplacementFor_gcd
METHOD_RETURN int
PARAM int ReplacementFor_a
PARAM int ReplacementFor_b
RETURN return ReplacementFor_a; return ReplacementFor_a;
<operator>.lessThan ReplacementFor_a<ReplacementFor_b
<operator>.notEquals ReplacementFor_b!=(0x20+9685-0x25f5)
IDENTIFIER ReplacementFor_a return ReplacementFor_a;
<operator>.assignment ReplacementFor_temp=\012ReplacementFor_a
<operator>.assignment ReplacementFor_a=ReplacementFor_b
<operator>.assignment ReplacementFor_b=\012ReplacementFor_temp
<operator>.assignment ReplacementFor_temp=ReplacementFor_a%ReplacementFor_b
<operator>.assignment ReplacementFor_a=\012ReplacementFor_b
<operator>.assignment ReplacementFor_b=ReplacementFor_temp
<operator>.subtraction 0x20+9685-0x25f5
<operator>.addition 0x20+9685
<operator>.modulo ReplacementFor_a%ReplacementFor_b
>>>PDG&17 0->2 0->3 0->5 0->6 0->7 0->8 0->9 0->10 0->12 0->13 0->14 0->15 0->16 2->5 3->5 4->1 5->1 5->1 5->6 5->7 5->8 5->8 5->9 5->9 5->10 5->16 6->1 6->1 6->1 6->6 6->11 6->12 6->13 6->14 6->15 6->16 6->16 7->4 8->1 8->10 9->1 9->1 9->7 9->16 10->1 10->1 10->6 11->1 11->1 11->13 12->1 12->1 12->7 12->16 13->1 13->1 13->6 14->1 14->6 14->6 16->11 16->11 16->12
>>>Token int ReplacementFor_gcd ( int ReplacementFor_a , int ReplacementFor_b ) { int ReplacementFor_temp ; if ( ReplacementFor_a < ReplacementFor_b ) { ReplacementFor_temp = ReplacementFor_a ; ReplacementFor_a = ReplacementFor_b ; ReplacementFor_b = ReplacementFor_temp ; } while ( ReplacementFor_b != ( 0x20 + 9685 - 0x25f5 ) ) { ReplacementFor_temp = ReplacementFor_a % ReplacementFor_b ; ReplacementFor_a = ReplacementFor_b ; ReplacementFor_b = ReplacementFor_temp ; } return ReplacementFor_a ; }
>>>Func
METHOD ReplacementFor_solve
METHOD_RETURN void
<operator>.assignmentDivision t/=(0x1337+4319-0x2414)
<operator>.assignment ReplacementFor_sum=\012(0xfa3+369-0x1114)
<operator>.assignment time=\012ReplacementFor_sum*(0x1101+1625-0x1758)*ReplacementFor_N/ReplacementFor_C
<operator>.assignment ReplacementFor_rest=ReplacementFor_N%ReplacementFor_C
<operator>.assignment ReplacementFor_start=t/ReplacementFor_sum
<operator>.assignment ReplacementFor_rest=t%\012ReplacementFor_sum
<operator>.assignment ReplacementFor_aux=(0x5d8+6629-0x1fbd)
<operator>.assignment val=\012ReplacementFor_aux-ReplacementFor_rest
memcpy memcpy(ReplacementFor_b ReplacementFor_a \012ReplacementFor_C*sizeof(ReplacementFor_a[(0x380+635-0x5fb)]))
qsort qsort(\012ReplacementFor_b ReplacementFor_C sizeof(ReplacementFor_b[(0x1bc9+1530-0x21c3)])\012,ReplacementFor_cmp)
<operator>.lessThan i<ReplacementFor_C
<operator>.postIncrement i++
<operator>.lessThan i<ReplacementFor_rest
<operator>.postIncrement i++
<operator>.logicalOr t>=time||L==(0xa5f+6026-0x21e9)
<operator>.logicalAnd i<ReplacementFor_C&&ReplacementFor_aux<ReplacementFor_rest
<operator>.postIncrement i\012++
<operator>.logicalAnd i<ReplacementFor_C&&L>\012(0x1144+2246-0x1a0a)
<operator>.postIncrement i++
<operator>.subtraction 0x1337+4319-0x2414
<operator>.subtraction 0xfa3+369-0x1114
<operator>.assignment i=(0x1d5+3549-0xfb2)
<operator>.assignmentPlus ReplacementFor_sum+=ReplacementFor_a[i].ReplacementFor_c
<operator>.division ReplacementFor_sum*(0x1101+1625-0x1758)*ReplacementFor_N/ReplacementFor_C
<operator>.modulo ReplacementFor_N%ReplacementFor_C
<operator>.assignment i=(0x885+2484-0x1239)
<operator>.assignmentPlus time+=ReplacementFor_a[i].ReplacementFor_c*\012(0x1bc+6882-0x1c9c)
RETURN return; return;
<operator>.division t/ReplacementFor_sum
<operator>.modulo t%\012ReplacementFor_sum
<operator>.subtraction 0x5d8+6629-0x1fbd
<operator>.assignment i=\012(0x11f8+255-0x12f7)
<operator>.assignmentPlus ReplacementFor_aux+=ReplacementFor_a[i].ReplacementFor_c
<operator>.subtraction ReplacementFor_aux-ReplacementFor_rest
<operator>.multiplication ReplacementFor_C*sizeof(ReplacementFor_a[(0x380+635-0x5fb)])
<operator>.assignment i=(0x32f+7519-0x208e)
<operator>.assignment ReplacementFor_aux=ReplacementFor_N/\012ReplacementFor_C
<operator>.assignment ReplacementFor_rest=t/ReplacementFor_sum
<operator>.assignmentMinus ReplacementFor_aux-=ReplacementFor_rest
<operator>.assignmentMinus L-=ReplacementFor_aux
<operator>.assignmentMinus time-=\012ReplacementFor_aux*ReplacementFor_b[i].ReplacementFor_c
<operator>.addition 0x1337+4319
<operator>.addition 0xfa3+369
<operator>.multiplication ReplacementFor_sum*(0x1101+1625-0x1758)*ReplacementFor_N
<operator>.greaterEqualsThan t>=time
<operator>.equals L==(0xa5f+6026-0x21e9)
<operator>.addition 0x5d8+6629
<operator>.lessThan i<ReplacementFor_C
<operator>.lessThan ReplacementFor_aux<ReplacementFor_rest
<operator>.lessThan i<ReplacementFor_C
<operator>.greaterThan L>\012(0x1144+2246-0x1a0a)
<operator>.greaterThan val>ReplacementFor_b[i].ReplacementFor_c
<operator>.lessEqualsThan L<=(0xf3c+1942-0x16d2)
<operator>.lessEqualsThan ReplacementFor_b[i].i+(0x238+6121-0x1a20)<=ReplacementFor_N%\012ReplacementFor_C
<operator>.greaterEqualsThan ReplacementFor_start%ReplacementFor_C+(0x21f+3578-0x1018)>=ReplacementFor_b[\012i].i
<operator>.lessThan L<\012ReplacementFor_aux
<operator>.subtraction 0x1d5+3549-0xfb2
<operator>.multiplication ReplacementFor_sum*(0x1101+1625-0x1758)
<operator>.subtraction 0x885+2484-0x1239
<operator>.multiplication ReplacementFor_a[i].ReplacementFor_c*\012(0x1bc+6882-0x1c9c)
<operator>.subtraction 0xa5f+6026-0x21e9
<operator>.subtraction 0x11f8+255-0x12f7
<operator>.subtraction 0x32f+7519-0x208e
<operator>.subtraction 0x1144+2246-0x1a0a
<operator>.assignmentMinus time-=val
<operator>.postDecrement L--
<operator>.division ReplacementFor_N/\012ReplacementFor_C
<operator>.postIncrement ReplacementFor_aux++
<operator>.division t/ReplacementFor_sum
<operator>.postIncrement ReplacementFor_rest++
<operator>.assignment ReplacementFor_aux=L
<operator>.multiplication ReplacementFor_aux*ReplacementFor_b[i].ReplacementFor_c
<operator>.addition 0x1d5+3549
<operator>.subtraction 0x1101+1625-0x1758
<operator>.addition 0x885+2484
<operator>.subtraction 0x1bc+6882-0x1c9c
<operator>.addition 0xa5f+6026
<operator>.addition 0x11f8+255
<operator>.addition 0x32f+7519
<operator>.addition 0x1144+2246
<operator>.subtraction 0xf3c+1942-0x16d2
<operator>.addition ReplacementFor_b[i].i+(0x238+6121-0x1a20)
<operator>.modulo ReplacementFor_N%\012ReplacementFor_C
<operator>.addition ReplacementFor_start%ReplacementFor_C+(0x21f+3578-0x1018)
<operator>.addition 0x1101+1625
<operator>.addition 0x1bc+6882
<operator>.addition 0xf3c+1942
<operator>.subtraction 0x238+6121-0x1a20
<operator>.modulo ReplacementFor_start%ReplacementFor_C
<operator>.subtraction 0x21f+3578-0x1018
<operator>.addition 0x238+6121
<operator>.addition 0x21f+3578
<operator>.sizeOf sizeof(ReplacementFor_b[(0x1bc9+1530-0x21c3)])
<operator>.sizeOf sizeof(ReplacementFor_a[(0x380+635-0x5fb)])
<operator>.fieldAccess ReplacementFor_a[i].ReplacementFor_c
<operator>.fieldAccess ReplacementFor_a[i].ReplacementFor_c
<operator>.indirectIndexAccess ReplacementFor_a[i]
FIELD_IDENTIFIER ReplacementFor_c ReplacementFor_c
<operator>.fieldAccess ReplacementFor_a[i].ReplacementFor_c
<operator>.indirectIndexAccess ReplacementFor_a[i]
FIELD_IDENTIFIER ReplacementFor_c ReplacementFor_c
<operator>.fieldAccess ReplacementFor_b[i].ReplacementFor_c
<operator>.fieldAccess ReplacementFor_b[\012i].i
<operator>.fieldAccess ReplacementFor_b[i].ReplacementFor_c
<operator>.indirectIndexAccess ReplacementFor_a[i]
FIELD_IDENTIFIER ReplacementFor_c ReplacementFor_c
<operator>.indirectIndexAccess ReplacementFor_b[i]
FIELD_IDENTIFIER ReplacementFor_c ReplacementFor_c
<operator>.fieldAccess ReplacementFor_b[i].i
<operator>.indirectIndexAccess ReplacementFor_b[\012i]
FIELD_IDENTIFIER i i
<operator>.indirectIndexAccess ReplacementFor_b[i]
FIELD_IDENTIFIER ReplacementFor_c ReplacementFor_c
<operator>.indirectIndexAccess ReplacementFor_b[i]
FIELD_IDENTIFIER i i
>>>PDG&117 0->2 0->10 0->11 0->12 0->13 0->14 0->15 0->18 0->20 0->21 0->22 0->24 0->25 0->26 0->28 0->29 0->30 0->31 0->32 0->34 0->35 0->36 0->40 0->41 0->42 0->43 0->44 0->45 0->46 0->47 0->48 0->49 0->50 0->51 0->52 0->53 0->54 0->57 0->58 0->59 0->60 0->62 0->63 0->64 0->65 0->66 0->67 0->68 0->69 0->70 0->71 0->72 0->73 0->74 0->75 0->76 0->77 0->78 0->79 0->80 0->81 0->82 0->84 0->86 0->87 0->88 0->89 0->90 0->91 0->92 0->93 2->1 2->1 2->46 3->1 3->1 3->24 3->59 4->1 4->1 4->28 4->46 5->1 5->1 5->14 6->90 7->35 7->50 8->34 8->35 8->50 9->53 11->1 11->51 12->1 12->12 12->13 12->13 12->24 12->25 12->96 12->98 12->99 13->1 13->12 14->1 14->1 14->1 14->14 14->15 14->15 14->28 14->61 14->77 14->87 14->100 14->106 14->107 15->1 15->14 16->1 16->1 16->1 16->6 16->7 16->8 16->9 16->10 16->11 16->17 16->19 16->29 16->30 16->31 16->32 16->33 16->35 16->36 16->37 16->48 16->49 16->51 16->63 16->64 16->79 16->80 16->94 16->95 17->17 17->18 17->34 17->49 17->97 17->101 17->102 18->49 19->53 19->54 19->82 19->88 19->103 19->108 19->109 20->51 21->1 21->2 21->2 22->1 22->3 22->3 23->1 23->1 23->12 24->1 24->59 25->1 25->4 25->4 25->26 26->1 26->1 26->5 26->5 26->49 26->68 27->1 27->1 27->14 28->1 28->1 28->46 29->1 30->6 30->6 30->31 30->31 31->7 31->7 31->70 31->70 32->8 32->8 33->49 34->35 34->50 35->9 35->9 36->10 36->11 37->51 38->40 38->69 39->40 39->71 40->57 41->52 41->54 41->67 42->66 45->1 45->25 45->25 45->26 46->1 46->1 46->16 46->16 46->30 46->42 46->47 46->62 46->66 46->78 47->1 47->1 47->16 47->16 47->52 47->54 47->67 49->17 49->17 49->18 49->36 49->50 50->17 50->17 50->34 50->35 50->35 51->19 51->19 51->20 51->52 51->65 51->68 51->81 52->19 52->19 52->54 52->67 53->66 53->66 53->67 53->73 54->19 54->20 54->38 54->39 54->40 54->41 54->42 54->51 54->55 54->56 54->57 54->57 54->68 54->70 54->73 54->83 54->84 54->85 54->89 54->90 54->91 54->92 54->93 54->104 54->105 54->110 54->111 54->112 54->113 54->114 54->115 54->116 55->69 56->71 57->41 57->41 57->72 57->72 57->73 58->1 58->23 58->23 59->1 59->1 59->30 59->45 59->45 60->1 60->27 60->27 61->1 61->28 61->28 62->1 62->47 62->47 63->33 63->33 64->37 64->37 65->52 65->52 66->42 67->54 68->38 68->38 68->84 68->84 69->40 70->39 70->39 71->40 72->41 72->73 73->42 73->42 75->1 75->59 75->59 77->1 77->61 77->61 82->54 82->54 84->55 84->55 84->68 84->90 89->55 89->55 89->83 89->83 90->51 90->56 90->56 90->85 90->85 91->56 91->56 91->85 91->85
>>>Token void ReplacementFor_solve ( ) { t /= ( 0x1337 + 4319 - 0x2414 ) ; ReplacementFor_sum = ( 0xfa3 + 369 - 0x1114 ) ; for ( i = ( 0x1d5 + 3549 - 0xfb2 ) ; i < ReplacementFor_C ; i ++ ) { ReplacementFor_sum += ReplacementFor_a [ i ] . ReplacementFor_c ; } time = ReplacementFor_sum * ( 0x1101 + 1625 - 0x1758 ) * ReplacementFor_N / ReplacementFor_C ; ReplacementFor_rest = ReplacementFor_N % ReplacementFor_C ; for ( i = ( 0x885 + 2484 - 0x1239 ) ; i < ReplacementFor_rest ; i ++ ) { time += ReplacementFor_a [ i ] . ReplacementFor_c * ( 0x1bc + 6882 - 0x1c9c ) ; } if ( t >= time || L == ( 0xa5f + 6026 - 0x21e9 ) ) { return ; } ReplacementFor_start = t / ReplacementFor_sum ; ReplacementFor_rest = t % ReplacementFor_sum ; ReplacementFor_aux = ( 0x5d8 + 6629 - 0x1fbd ) ; for ( i = ( 0x11f8 + 255 - 0x12f7 ) ; i < ReplacementFor_C && ReplacementFor_aux < ReplacementFor_rest ; i ++ ) { ReplacementFor_aux += ReplacementFor_a [ i ] . ReplacementFor_c ; } val = ReplacementFor_aux - ReplacementFor_rest ; memcpy ( ReplacementFor_b , ReplacementFor_a , ReplacementFor_C * sizeof ( ReplacementFor_a [ ( 0x380 + 635 - 0x5fb ) ] ) ) ; qsort ( ReplacementFor_b , ReplacementFor_C , sizeof ( ReplacementFor_b [ ( 0x1bc9 + 1530 - 0x21c3 ) ] ) , ReplacementFor_cmp ) ; for ( i = ( 0x32f + 7519 - 0x208e ) ; i < ReplacementFor_C && L > ( 0x1144 + 2246 - 0x1a0a ) ; i ++ ) { if ( val > ReplacementFor_b [ i ] . ReplacementFor_c ) { time -= val ; L -- ; } if ( L <= ( 0xf3c + 1942 - 0x16d2 ) ) { break ; } ReplacementFor_aux = ReplacementFor_N / ReplacementFor_C ; if ( ReplacementFor_b [ i ] . i + ( 0x238 + 6121 - 0x1a20 ) <= ReplacementFor_N % ReplacementFor_C ) { ReplacementFor_aux ++ ; } ReplacementFor_rest = t / ReplacementFor_sum ; if ( ReplacementFor_start % ReplacementFor_C + ( 0x21f + 3578 - 0x1018 ) >= ReplacementFor_b [ i ] . i ) ReplacementFor_rest ++ ; ReplacementFor_aux -= ReplacementFor_rest ; if ( L < ReplacementFor_aux ) { ReplacementFor_aux = L ; } L -= ReplacementFor_aux ; time -= ReplacementFor_aux * ReplacementFor_b [ i ] . ReplacementFor_c ; } }
>>>Func
METHOD ReplacementFor_combine_bases
METHOD_RETURN char
PARAM char ReplacementFor_b1
PARAM char ReplacementFor_b2
PARAM struct ReplacementFor_combine*ReplacementFor_list
PARAM int ReplacementFor_length
RETURN return(0x39a+7583-0x2139); return(0x39a+7583-0x2139);
<operator>.lessThan i<ReplacementFor_length
<operator>.postIncrement i++
<operator>.subtraction 0x39a+7583-0x2139
<operator>.assignment i=(0xaf6+5239-0x1f6d)
<operator>.logicalOr (\012ReplacementFor_list[i].ReplacementFor_base1==ReplacementFor_b1&&\012ReplacementFor_list[i].ReplacementFor_base2==ReplacementFor_b2)||(\012ReplacementFor_list[i].ReplacementFor_base1==ReplacementFor_b2&&\012ReplacementFor_list[i].ReplacementFor_base2==ReplacementFor_b1)
<operator>.addition 0x39a+7583
<operator>.subtraction 0xaf6+5239-0x1f6d
RETURN return \012ReplacementFor_list[i].ReplacementFor_combine; return \012ReplacementFor_list[i].ReplacementFor_combine;
<operator>.addition 0xaf6+5239
<operator>.logicalAnd ReplacementFor_list[i].ReplacementFor_base1==ReplacementFor_b1&&\012ReplacementFor_list[i].ReplacementFor_base2==ReplacementFor_b2
<operator>.logicalAnd ReplacementFor_list[i].ReplacementFor_base1==ReplacementFor_b2&&\012ReplacementFor_list[i].ReplacementFor_base2==ReplacementFor_b1
<operator>.equals ReplacementFor_list[i].ReplacementFor_base1==ReplacementFor_b1
<operator>.equals ReplacementFor_list[i].ReplacementFor_base2==ReplacementFor_b2
<operator>.equals ReplacementFor_list[i].ReplacementFor_base1==ReplacementFor_b2
<operator>.equals ReplacementFor_list[i].ReplacementFor_base2==ReplacementFor_b1
<operator>.fieldAccess ReplacementFor_list[i].ReplacementFor_combine
<operator>.fieldAccess ReplacementFor_list[i].ReplacementFor_base1
<operator>.fieldAccess ReplacementFor_list[i].ReplacementFor_base2
<operator>.fieldAccess ReplacementFor_list[i].ReplacementFor_base1
<operator>.fieldAccess ReplacementFor_list[i].ReplacementFor_base2
<operator>.indirectIndexAccess ReplacementFor_list[i]
FIELD_IDENTIFIER ReplacementFor_combine ReplacementFor_combine
<operator>.indirectIndexAccess ReplacementFor_list[i]
FIELD_IDENTIFIER ReplacementFor_base1 ReplacementFor_base1
<operator>.indirectIndexAccess ReplacementFor_list[i]
FIELD_IDENTIFIER ReplacementFor_base2 ReplacementFor_base2
<operator>.indirectIndexAccess ReplacementFor_list[i]
FIELD_IDENTIFIER ReplacementFor_base1 ReplacementFor_base1
<operator>.indirectIndexAccess ReplacementFor_list[i]
FIELD_IDENTIFIER ReplacementFor_base2 ReplacementFor_base2
>>>PDG&37 0->2 0->3 0->4 0->5 0->7 0->8 0->9 0->12 0->13 0->14 0->15 0->18 0->19 0->20 0->21 2->18 3->1 3->19 3->20 4->1 5->7 6->1 7->1 7->1 7->1 7->6 7->8 7->9 7->11 7->12 7->16 7->18 7->23 7->29 7->30 8->1 8->7 9->6 10->1 10->1 10->7 11->1 11->1 11->1 11->7 11->8 11->14 11->22 11->27 11->28 13->1 13->10 13->10 14->1 16->1 16->1 16->11 16->11 16->17 16->20 16->25 16->33 16->34 17->1 17->1 17->11 17->11 18->1 18->1 18->16 18->16 18->19 18->20 18->21 18->24 18->31 18->32 19->1 19->1 19->16 19->16 19->20 19->21 20->1 20->1 20->17 20->17 20->19 20->21 20->26 20->35 20->36 21->1 21->1 21->17 21->17 21->18
>>>Token char ReplacementFor_combine_bases ( char ReplacementFor_b1 , char ReplacementFor_b2 , struct ReplacementFor_combine * ReplacementFor_list , int ReplacementFor_length ) { int i ; for ( i = ( 0xaf6 + 5239 - 0x1f6d ) ; i < ReplacementFor_length ; i ++ ) { if ( ( ReplacementFor_list [ i ] . ReplacementFor_base1 == ReplacementFor_b1 && ReplacementFor_list [ i ] . ReplacementFor_base2 == ReplacementFor_b2 ) || ( ReplacementFor_list [ i ] . ReplacementFor_base1 == ReplacementFor_b2 && ReplacementFor_list [ i ] . ReplacementFor_base2 == ReplacementFor_b1 ) ) { return ReplacementFor_list [ i ] . ReplacementFor_combine ; } } return ( 0x39a + 7583 - 0x2139 ) ; }
>>>Func
METHOD main
METHOD_RETURN int
PARAM int ReplacementFor_argc
PARAM char*ReplacementFor_argv[]
ReplacementFor_test ReplacementFor_test(ReplacementFor_pcm,ReplacementFor_coded,\012ReplacementFor_decoded,LEN)
printf printf("\x69\x6e\x70\x75\x74\x73\x3a\x20")
printf printf("\n")
printf printf("\x65\x6e\x63\x6f\x64\x65\x3a\x20")
printf printf("\n")
printf printf("\x64\x65\x63\x6f\x64\x65\x3a\x20")
printf printf("\n")
RETURN return(0x35+9359-0x24c4); return(0x35+9359-0x24c4);
<operator>.lessThan i<LEN
<operator>.postIncrement i++
<operator>.lessThan i<LEN
<operator>.postIncrement i++
<operator>.lessThan i<LEN
<operator>.postIncrement i++
<operator>.subtraction 0x35+9359-0x24c4
<operator>.assignment i=(0x2d9+1107-0x72c)
printf printf("\x25\x64\x20",ReplacementFor_pcm[\012i])
<operator>.assignment i=\012(0x2f+9633-0x25d0)
printf printf("\x25\x75\x20",ReplacementFor_coded[i])
<operator>.assignment i=\012(0x1c43+927-0x1fe2)
printf printf("\x25\x64\x20",ReplacementFor_decoded[i])
<operator>.addition 0x35+9359
<operator>.subtraction 0x2d9+1107-0x72c
<operator>.subtraction 0x2f+9633-0x25d0
<operator>.subtraction 0x1c43+927-0x1fe2
<operator>.addition 0x2d9+1107
<operator>.addition 0x2f+9633
<operator>.addition 0x1c43+927
<operator>.indirectIndexAccess ReplacementFor_pcm[\012i]
<operator>.indirectIndexAccess ReplacementFor_coded[i]
<operator>.indirectIndexAccess ReplacementFor_decoded[i]
>>>PDG&35 0->2 0->3 0->4 0->5 0->6 0->7 0->8 0->9 0->10 0->12 0->13 0->14 0->15 0->16 0->17 0->18 0->20 0->22 0->24 0->25 0->26 0->27 0->28 0->29 0->30 0->31 2->1 3->1 4->1 4->1 4->1 4->1 4->12 4->20 4->22 4->24 5->1 7->1 9->1 10->1 11->1 12->12 12->13 12->13 12->14 12->20 12->32 13->1 13->12 14->14 14->15 14->15 14->16 14->22 14->33 15->1 15->14 16->1 16->1 16->1 16->16 16->17 16->17 16->24 16->34 17->1 17->16 18->1 18->1 18->11 19->1 19->1 19->12 20->1 20->1 21->1 21->1 21->14 22->1 22->1 23->1 23->1 23->16 24->1 24->1 26->1 26->19 26->19 27->1 27->21 27->21 28->1 28->23 28->23
>>>Token int main ( int ReplacementFor_argc , char * ReplacementFor_argv [ ] ) { uint8_t ReplacementFor_coded [ LEN ] ; int16_t ReplacementFor_decoded [ LEN ] ; ReplacementFor_test ( ReplacementFor_pcm , ReplacementFor_coded , ReplacementFor_decoded , LEN ) ; printf ( " \x69 \x6e \x70 \x75 \x74 \x73 \x3a \x20 " ) ; for ( size_t i = ( 0x2d9 + 1107 - 0x72c ) ; i < LEN ; i ++ ) { printf ( " \x25 \x64 \x20 " , ReplacementFor_pcm [ i ] ) ; } printf ( " \n " ) ; printf ( " \x65 \x6e \x63 \x6f \x64 \x65 \x3a \x20 " ) ; for ( size_t i = ( 0x2f + 9633 - 0x25d0 ) ; i < LEN ; i ++ ) { printf ( " \x25 \x75 \x20 " , ReplacementFor_coded [ i ] ) ; } printf ( " \n " ) ; printf ( " \x64 \x65 \x63 \x6f \x64 \x65 \x3a \x20 " ) ; for ( size_t i = ( 0x1c43 + 927 - 0x1fe2 ) ; i < LEN ; i ++ ) { printf ( " \x25 \x64 \x20 " , ReplacementFor_decoded [ i ] ) ; } printf ( " \n " ) ; return ( 0x35 + 9359 - 0x24c4 ) ; }
>>>Func
METHOD ReplacementFor_input
METHOD_RETURN void
memset memset(ReplacementFor_tab0 (0x1bb1+1262-0x209f) sizeof(ReplacementFor_tab0))
memset memset(ReplacementFor_tab1 (0x7f7+2081-0x1018) sizeof(ReplacementFor_tab1))
scanf scanf("\x25\x64",&ReplacementFor_n)
scanf scanf("\x25\x64",&ReplacementFor_n)
scanf scanf("\x25\x64",&ReplacementFor_n)
scanf scanf("\x25\x73",&s)
<operator>.lessThan i<\012ReplacementFor_n
<operator>.postIncrement i++
<operator>.lessThan i<ReplacementFor_n
<operator>.postIncrement i++
<operator>.subtraction 0x1bb1+1262-0x209f
<operator>.subtraction 0x7f7+2081-0x1018
<operator>.assignment i=(0x19e7+2197-0x227c)
scanf scanf("\x25\x73",&ReplacementFor_str)
<operator>.assignment ReplacementFor_tab0[\012ReplacementFor_str[(0x15e7+3738-0x2481)]-((char)(0xedf+1246-0x137c))][\012ReplacementFor_str[(0xd39+4370-0x1e4a)]-((char)(0x15d4+1611-0x1bde))]=\012ReplacementFor_str[(0xfff+3810-0x1edf)]
<operator>.assignment ReplacementFor_tab0[ReplacementFor_str[\012(0x1318+1755-0x19f2)]-((char)(0xc59+2293-0x150d))][ReplacementFor_str[\012(0x1593+1699-0x1c36)]-((char)(0x1033+3114-0x1c1c))]=ReplacementFor_str[\012(0x1e79+2057-0x2680)]
<operator>.assignment i=\012(0xa25+6462-0x2363)
scanf scanf("\x25\x73",&ReplacementFor_str\012)
<operator>.assignment ReplacementFor_tab1[ReplacementFor_str[(0x40c+5830-0x1ad2)]-\012((char)(0xe7c+4588-0x2027))][ReplacementFor_str[(0x8fa+5380-0x1dfd)]-\012((char)(0x31b+6079-0x1a99))]=(0x10f+7255-0x1d65)
<operator>.assignment ReplacementFor_tab1[\012ReplacementFor_str[(0xa17+7202-0x2638)]-((char)(0x57a+3935-0x1498))][\012ReplacementFor_str[(0xb24+2568-0x152c)]-((char)(0xcfd+2528-0x169c))]=\012(0x6d2+3918-0x161f)
<operator>.addition 0x1bb1+1262
<operator>.addition 0x7f7+2081
<operator>.subtraction 0x19e7+2197-0x227c
<operator>.subtraction 0xa25+6462-0x2363
<operator>.subtraction 0x10f+7255-0x1d65
<operator>.subtraction 0x6d2+3918-0x161f
<operator>.addition 0x19e7+2197
<operator>.subtraction ReplacementFor_str[(0xd39+4370-0x1e4a)]-((char)(0x15d4+1611-0x1bde))
<operator>.subtraction 0xfff+3810-0x1edf
<operator>.subtraction ReplacementFor_str[\012(0x1593+1699-0x1c36)]-((char)(0x1033+3114-0x1c1c))
<operator>.subtraction 0x1e79+2057-0x2680
<operator>.addition 0xa25+6462
<operator>.subtraction ReplacementFor_str[(0x8fa+5380-0x1dfd)]-\012((char)(0x31b+6079-0x1a99))
<operator>.addition 0x10f+7255
<operator>.subtraction ReplacementFor_str[(0xb24+2568-0x152c)]-((char)(0xcfd+2528-0x169c))
<operator>.addition 0x6d2+3918
<operator>.subtraction ReplacementFor_str[(0x15e7+3738-0x2481)]-((char)(0xedf+1246-0x137c))
<operator>.cast (char)(0x15d4+1611-0x1bde)
<operator>.addition 0xfff+3810
<operator>.subtraction ReplacementFor_str[\012(0x1318+1755-0x19f2)]-((char)(0xc59+2293-0x150d))
<operator>.cast (char)(0x1033+3114-0x1c1c)
<operator>.addition 0x1e79+2057
<operator>.subtraction ReplacementFor_str[(0x40c+5830-0x1ad2)]-\012((char)(0xe7c+4588-0x2027))
<operator>.cast (char)(0x31b+6079-0x1a99)
<operator>.subtraction ReplacementFor_str[(0xa17+7202-0x2638)]-((char)(0x57a+3935-0x1498))
<operator>.cast (char)(0xcfd+2528-0x169c)
<operator>.cast (char)(0xedf+1246-0x137c)
<operator>.subtraction 0xd39+4370-0x1e4a
<operator>.subtraction 0x15d4+1611-0x1bde
<operator>.cast (char)(0xc59+2293-0x150d)
<operator>.subtraction 0x1593+1699-0x1c36
<operator>.subtraction 0x1033+3114-0x1c1c
<operator>.cast (char)(0xe7c+4588-0x2027)
<operator>.subtraction 0x8fa+5380-0x1dfd
<operator>.subtraction 0x31b+6079-0x1a99
<operator>.cast (char)(0x57a+3935-0x1498)
<operator>.subtraction 0xb24+2568-0x152c
<operator>.subtraction 0xcfd+2528-0x169c
<operator>.subtraction 0x15e7+3738-0x2481
<operator>.subtraction 0xedf+1246-0x137c
<operator>.addition 0xd39+4370
<operator>.addition 0x15d4+1611
<operator>.subtraction 0x1318+1755-0x19f2
<operator>.subtraction 0xc59+2293-0x150d
<operator>.addition 0x1593+1699
<operator>.addition 0x1033+3114
<operator>.subtraction 0x40c+5830-0x1ad2
<operator>.subtraction 0xe7c+4588-0x2027
<operator>.addition 0x8fa+5380
<operator>.addition 0x31b+6079
<operator>.subtraction 0xa17+7202-0x2638
<operator>.subtraction 0x57a+3935-0x1498
<operator>.addition 0xb24+2568
<operator>.addition 0xcfd+2528
<operator>.addition 0x15e7+3738
<operator>.addition 0xedf+1246
<operator>.addition 0x1318+1755
<operator>.addition 0xc59+2293
<operator>.addition 0x40c+5830
<operator>.addition 0xe7c+4588
<operator>.addition 0xa17+7202
<operator>.addition 0x57a+3935
<operator>.addressOf &ReplacementFor_str
<operator>.indirectIndexAccess ReplacementFor_tab0[\012ReplacementFor_str[(0x15e7+3738-0x2481)]-((char)(0xedf+1246-0x137c))][\012ReplacementFor_str[(0xd39+4370-0x1e4a)]-((char)(0x15d4+1611-0x1bde))]
<operator>.indirectIndexAccess ReplacementFor_str[(0xfff+3810-0x1edf)]
<operator>.indirectIndexAccess ReplacementFor_tab0[ReplacementFor_str[\012(0x1318+1755-0x19f2)]-((char)(0xc59+2293-0x150d))][ReplacementFor_str[\012(0x1593+1699-0x1c36)]-((char)(0x1033+3114-0x1c1c))]
<operator>.indirectIndexAccess ReplacementFor_str[\012(0x1e79+2057-0x2680)]
<operator>.addressOf &ReplacementFor_str
<operator>.indirectIndexAccess ReplacementFor_tab1[ReplacementFor_str[(0x40c+5830-0x1ad2)]-\012((char)(0xe7c+4588-0x2027))][ReplacementFor_str[(0x8fa+5380-0x1dfd)]-\012((char)(0x31b+6079-0x1a99))]
<operator>.indirectIndexAccess ReplacementFor_tab1[\012ReplacementFor_str[(0xa17+7202-0x2638)]-((char)(0x57a+3935-0x1498))][\012ReplacementFor_str[(0xb24+2568-0x152c)]-((char)(0xcfd+2528-0x169c))]
<operator>.indirectIndexAccess ReplacementFor_tab0[\012ReplacementFor_str[(0x15e7+3738-0x2481)]-((char)(0xedf+1246-0x137c))]
<operator>.indirectIndexAccess ReplacementFor_tab0[ReplacementFor_str[\012(0x1318+1755-0x19f2)]-((char)(0xc59+2293-0x150d))]
<operator>.indirectIndexAccess ReplacementFor_tab1[ReplacementFor_str[(0x40c+5830-0x1ad2)]-\012((char)(0xe7c+4588-0x2027))]
<operator>.indirectIndexAccess ReplacementFor_tab1[\012ReplacementFor_str[(0xa17+7202-0x2638)]-((char)(0x57a+3935-0x1498))]
<operator>.indirectIndexAccess ReplacementFor_str[(0xd39+4370-0x1e4a)]
<operator>.indirectIndexAccess ReplacementFor_str[\012(0x1593+1699-0x1c36)]
<operator>.indirectIndexAccess ReplacementFor_str[(0x8fa+5380-0x1dfd)]
<operator>.indirectIndexAccess ReplacementFor_str[(0xb24+2568-0x152c)]
<operator>.indirectIndexAccess ReplacementFor_str[(0x15e7+3738-0x2481)]
UNKNOWN char char
<operator>.indirectIndexAccess ReplacementFor_str[\012(0x1318+1755-0x19f2)]
UNKNOWN char char
<operator>.indirectIndexAccess ReplacementFor_str[(0x40c+5830-0x1ad2)]
UNKNOWN char char
<operator>.indirectIndexAccess ReplacementFor_str[(0xa17+7202-0x2638)]
UNKNOWN char char
UNKNOWN char char
UNKNOWN char char
UNKNOWN char char
UNKNOWN char char
>>>PDG&112 0->2 0->3 0->4 0->5 0->6 0->7 0->8 0->9 0->10 0->11 0->12 0->13 0->15 0->16 0->19 0->22 0->23 0->24 0->25 0->26 0->27 0->28 0->29 0->30 0->31 0->32 0->33 0->34 0->35 0->36 0->37 0->38 0->40 0->41 0->43 0->44 0->46 0->49 0->50 0->52 0->53 0->55 0->56 0->58 0->59 0->60 0->61 0->62 0->63 0->64 0->65 0->66 0->67 0->68 0->69 0->70 0->71 0->72 0->73 0->74 0->75 0->76 0->77 0->78 0->79 0->80 0->81 0->82 0->83 2->1 2->1 2->1 3->1 3->1 3->1 4->5 4->8 4->10 5->6 5->10 6->1 7->1 8->1 8->5 8->8 8->9 8->9 8->10 8->15 8->16 8->17 8->29 8->30 8->31 8->32 8->38 8->39 8->40 8->41 8->42 8->43 8->48 8->49 8->50 8->51 8->52 8->53 8->60 8->61 8->62 8->63 8->64 8->65 8->66 8->67 8->76 8->77 8->78 8->79 8->84 8->85 8->86 8->87 8->88 8->92 8->93 8->96 8->97 8->100 8->101 8->102 8->103 8->108 8->109 9->1 9->8 10->1 10->1 10->1 10->6 10->10 10->11 10->11 10->19 10->20 10->21 10->26 10->27 10->34 10->35 10->36 10->37 10->44 10->45 10->46 10->47 10->54 10->55 10->56 10->57 10->58 10->59 10->68 10->69 10->70 10->71 10->72 10->73 10->74 10->75 10->80 10->81 10->82 10->83 10->89 10->90 10->91 10->94 10->95 10->98 10->99 10->104 10->105 10->106 10->107 10->110 10->111 11->1 11->10 12->1 12->2 12->2 13->1 13->3 13->3 14->1 14->1 14->8 15->1 15->16 15->19 15->29 15->31 15->34 15->36 15->38 15->41 15->44 15->46 16->1 16->1 16->1 17->1 17->1 17->1 18->1 18->1 18->10 19->1 19->34 19->36 19->44 19->46 20->1 20->1 20->1 21->1 21->1 21->1 24->1 24->14 24->14 25->1 25->18 25->18 26->1 26->20 26->20 27->1 27->21 27->21 29->1 29->1 29->15 29->16 29->19 29->31 29->34 29->36 29->38 29->41 29->44 29->46 30->1 31->1 31->1 31->15 31->16 31->19 31->29 31->34 31->36 31->38 31->41 31->44 31->46 32->1 34->1 34->1 34->19 34->36 34->44 34->46 36->1 36->1 36->19 36->34 36->44 36->46 38->1 38->1 38->15 38->16 38->19 38->29 38->31 38->34 38->36 38->41 38->44 38->46 39->1 41->1 41->1 41->15 41->16 41->19 41->29 41->31 41->34 41->36 41->38 41->44 41->46 42->1 44->1 44->1 44->19 44->34 44->36 44->46 45->1 46->1 46->1 46->19 46->34 46->36 46->44 47->1 48->1 49->1 50->1 50->29 50->29 50->39 50->39 51->1 52->1 53->1 53->31 53->31 53->42 53->42 54->1 55->1 56->1 56->34 56->34 56->45 56->45 57->1 58->1 59->1 59->36 59->36 59->47 59->47 60->1 61->1 61->38 61->38 61->48 61->48 64->1 65->1 65->41 65->41 65->51 65->51 68->1 69->1 69->44 69->44 69->54 69->54 72->1 73->1 73->46 73->46 73->57 73->57
>>>Token void ReplacementFor_input ( ) { int i ; char ReplacementFor_str [ ( 0x11b9 + 1493 - 0x1789 ) ] ; memset ( ReplacementFor_tab0 , ( 0x1bb1 + 1262 - 0x209f ) , sizeof ( ReplacementFor_tab0 ) ) ; memset ( ReplacementFor_tab1 , ( 0x7f7 + 2081 - 0x1018 ) , sizeof ( ReplacementFor_tab1 ) ) ; scanf ( " \x25 \x64 " , & ReplacementFor_n ) ; for ( i = ( 0x19e7 + 2197 - 0x227c ) ; i < ReplacementFor_n ; i ++ ) { scanf ( " \x25 \x73 " , & ReplacementFor_str ) ; ReplacementFor_tab0 [ ReplacementFor_str [ ( 0x15e7 + 3738 - 0x2481 ) ] - ( ( char ) ( 0xedf + 1246 - 0x137c ) ) ] [ ReplacementFor_str [ ( 0xd39 + 4370 - 0x1e4a ) ] - ( ( char ) ( 0x15d4 + 1611 - 0x1bde ) ) ] = ReplacementFor_str [ ( 0xfff + 3810 - 0x1edf ) ] ; ReplacementFor_tab0 [ ReplacementFor_str [ ( 0x1318 + 1755 - 0x19f2 ) ] - ( ( char ) ( 0xc59 + 2293 - 0x150d ) ) ] [ ReplacementFor_str [ ( 0x1593 + 1699 - 0x1c36 ) ] - ( ( char ) ( 0x1033 + 3114 - 0x1c1c ) ) ] = ReplacementFor_str [ ( 0x1e79 + 2057 - 0x2680 ) ] ; } scanf ( " \x25 \x64 " , & ReplacementFor_n ) ; for ( i = ( 0xa25 + 6462 - 0x2363 ) ; i < ReplacementFor_n ; i ++ ) { scanf ( " \x25 \x73 " , & ReplacementFor_str ) ; ReplacementFor_tab1 [ ReplacementFor_str [ ( 0x40c + 5830 - 0x1ad2 ) ] - ( ( char ) ( 0xe7c + 4588 - 0x2027 ) ) ] [ ReplacementFor_str [ ( 0x8fa + 5380 - 0x1dfd ) ] - ( ( char ) ( 0x31b + 6079 - 0x1a99 ) ) ] = ( 0x10f + 7255 - 0x1d65 ) ; ReplacementFor_tab1 [ ReplacementFor_str [ ( 0xa17 + 7202 - 0x2638 ) ] - ( ( char ) ( 0x57a + 3935 - 0x1498 ) ) ] [ ReplacementFor_str [ ( 0xb24 + 2568 - 0x152c ) ] - ( ( char ) ( 0xcfd + 2528 - 0x169c ) ) ] = ( 0x6d2 + 3918 - 0x161f ) ; } scanf ( " \x25 \x64 " , & ReplacementFor_n ) ; scanf ( " \x25 \x73 " , & s ) ; }
>>>Func
METHOD ReplacementFor_setOppose
METHOD_RETURN void
PARAM char*ReplacementFor_oppose
<operator>.assignment ReplacementFor_iElement1=\012ReplacementFor_baseElementToInt(ReplacementFor_oppose[(0x7f4+2883-0x1337)])
<operator>.assignment ReplacementFor_iElement2=ReplacementFor_baseElementToInt(ReplacementFor_oppose[\012(0x10f3+5063-0x24b9)])
ReplacementFor_assert ReplacementFor_assert(ReplacementFor_iElement1!=-\012(0x199c+3057-0x258c)&&ReplacementFor_iElement2!=-(0xa24+6114-0x2205))
<operator>.assignment ReplacementFor_opposeChart[ReplacementFor_iElement1][ReplacementFor_iElement2]=\012(0x11f7+3482-0x1f90)
<operator>.assignment ReplacementFor_opposeChart[ReplacementFor_iElement2][\012ReplacementFor_iElement1]=(0x41+272-0x150)
ReplacementFor_baseElementToInt ReplacementFor_baseElementToInt(ReplacementFor_oppose[(0x7f4+2883-0x1337)])
ReplacementFor_baseElementToInt ReplacementFor_baseElementToInt(ReplacementFor_oppose[\012(0x10f3+5063-0x24b9)])
<operator>.logicalAnd ReplacementFor_iElement1!=-\012(0x199c+3057-0x258c)&&ReplacementFor_iElement2!=-(0xa24+6114-0x2205)
<operator>.subtraction 0x11f7+3482-0x1f90
<operator>.subtraction 0x41+272-0x150
<operator>.notEquals ReplacementFor_iElement1!=-\012(0x199c+3057-0x258c)
<operator>.notEquals ReplacementFor_iElement2!=-(0xa24+6114-0x2205)
<operator>.addition 0x11f7+3482
<operator>.addition 0x41+272
<operator>.subtraction 0x7f4+2883-0x1337
<operator>.subtraction 0x10f3+5063-0x24b9
<operator>.minus -\012(0x199c+3057-0x258c)
<operator>.minus -(0xa24+6114-0x2205)
<operator>.addition 0x7f4+2883
<operator>.addition 0x10f3+5063
<operator>.subtraction 0x199c+3057-0x258c
<operator>.subtraction 0xa24+6114-0x2205
<operator>.addition 0x199c+3057
<operator>.addition 0xa24+6114
>>>PDG&27 0->2 0->11 0->12 0->13 0->14 0->15 0->16 0->17 0->18 0->21 0->22 0->23 0->24 0->25 0->26 2->1 2->8 2->9 3->1 3->1 3->13 4->1 4->1 4->1 4->14 5->1 5->1 6->1 6->1 6->1 7->1 7->1 7->1 8->1 8->3 9->1 9->4 10->1 10->1 10->5 10->5 11->1 11->6 11->6 12->1 12->7 12->7 13->1 13->1 13->10 13->10 13->14 13->20 13->24 13->26 14->1 14->1 14->10 14->10 17->1 18->1 19->1 19->13 20->1 20->14 23->1 23->19 23->19 24->1 24->20 24->20
>>>Token void ReplacementFor_setOppose ( char * ReplacementFor_oppose ) { int ReplacementFor_iElement1 , ReplacementFor_iElement2 ; ReplacementFor_iElement1 = ReplacementFor_baseElementToInt ( ReplacementFor_oppose [ ( 0x7f4 + 2883 - 0x1337 ) ] ) ; ReplacementFor_iElement2 = ReplacementFor_baseElementToInt ( ReplacementFor_oppose [ ( 0x10f3 + 5063 - 0x24b9 ) ] ) ; ReplacementFor_assert ( ReplacementFor_iElement1 != - ( 0x199c + 3057 - 0x258c ) && ReplacementFor_iElement2 != - ( 0xa24 + 6114 - 0x2205 ) ) ; ReplacementFor_opposeChart [ ReplacementFor_iElement1 ] [ ReplacementFor_iElement2 ] = ( 0x11f7 + 3482 - 0x1f90 ) ; ReplacementFor_opposeChart [ ReplacementFor_iElement2 ] [ ReplacementFor_iElement1 ] = ( 0x41 + 272 - 0x150 ) ; }
>>>Func
METHOD ReplacementFor_checkIO
METHOD_RETURN void
ReplacementFor_fileread ReplacementFor_fileread(&ReplacementFor_numdataset,ReplacementFor_DataSet)
printf printf(\012"\n" "\x20\x2a\x2a\x2a\x20\x63\x68\x65\x63\x6b\x49\x4f\x20\x3a\x20\x52\x65\x61\x64\x44\x61\x74\x61\x73\x65\x74\x20\x3d\x20\x25\x64" "\n"\012,ReplacementFor_numdataset)
ReplacementFor_filewrite ReplacementFor_filewrite(ReplacementFor_numdataset,\012ReplacementFor_DataSet)
>>>PDG&5 0->2 0->3 0->4 2->1 2->1 2->3 2->4 2->4 3->1 3->4 4->1 4->1 4->1
>>>Token void ReplacementFor_checkIO ( ) { int ReplacementFor_numdataset ; ReplacementFor_TypeDataSet ReplacementFor_DataSet [ ReplacementFor_MAX_DATASET ] ; ReplacementFor_fileread ( & ReplacementFor_numdataset , ReplacementFor_DataSet ) ; printf ( " \n " " \x20 \x2a \x2a \x2a \x20 \x63 \x68 \x65 \x63 \x6b \x49 \x4f \x20 \x3a \x20 \x52 \x65 \x61 \x64 \x44 \x61 \x74 \x61 \x73 \x65 \x74 \x20 \x3d \x20 \x25 \x64 " " \n " , ReplacementFor_numdataset ) ; ReplacementFor_filewrite ( ReplacementFor_numdataset , ReplacementFor_DataSet ) ; }
>>>Func
METHOD ReplacementFor_find
METHOD_RETURN int
PARAM char ReplacementFor_arr[]
PARAM int ReplacementFor_n
PARAM char s
RETURN return-(0xb14+3792-0x19e3); return-(0xb14+3792-0x19e3);
<operator>.lessThan i<ReplacementFor_n
<operator>.postIncrement i++
<operator>.minus -(0xb14+3792-0x19e3)
<operator>.assignment i=(0xd20+1240-0x11f8)
<operator>.equals ReplacementFor_arr[i]\012==s
RETURN return i; return i;
<operator>.subtraction 0xb14+3792-0x19e3
<operator>.subtraction 0xd20+1240-0x11f8
IDENTIFIER i return i;
<operator>.addition 0xb14+3792
<operator>.addition 0xd20+1240
<operator>.indirectIndexAccess ReplacementFor_arr[i]
>>>PDG&18 0->2 0->3 0->4 0->6 0->7 0->10 0->12 0->13 0->14 0->15 0->16 2->1 2->10 3->6 4->10 5->1 6->1 6->1 6->1 6->5 6->7 6->8 6->10 6->12 6->14 6->15 6->17 7->1 7->6 8->5 9->1 9->1 9->6 10->1 10->1 10->1 10->6 10->7 10->11 11->1 12->8 12->8 13->1 13->9 13->9 14->11
>>>Token int ReplacementFor_find ( char ReplacementFor_arr [ ] , int ReplacementFor_n , char s ) { int i ; for ( i = ( 0xd20 + 1240 - 0x11f8 ) ; i < ReplacementFor_n ; i ++ ) if ( ReplacementFor_arr [ i ] == s ) return i ; return - ( 0xb14 + 3792 - 0x19e3 ) ; }
>>>Func
METHOD main
METHOD_RETURN int
PARAM int ReplacementFor_argc
PARAM char*ReplacementFor_argv[]
ReplacementFor_readfile ReplacementFor_readfile(ReplacementFor_argv[(0x146c+3899-0x23a6)])
exit exit(\012(0x580+4584-0x1768))
<operator>.subtraction 0x580+4584-0x1768
<operator>.subtraction 0x146c+3899-0x23a6
<operator>.addition 0x580+4584
<operator>.addition 0x146c+3899
>>>PDG&10 0->2 0->3 0->6 0->7 0->8 0->9 2->1 3->1 3->4 4->1 4->1 5->1 6->1 6->5 6->5 7->1
>>>Token int main ( int ReplacementFor_argc , char * ReplacementFor_argv [ ] ) { ReplacementFor_readfile ( ReplacementFor_argv [ ( 0x146c + 3899 - 0x23a6 ) ] ) ; exit ( ( 0x580 + 4584 - 0x1768 ) ) ; }
>>>Func
METHOD ReplacementFor_combine
METHOD_RETURN void
<operator>.assignment ReplacementFor_p=(0xd0b+5433-0x2244)
<operator>.assignment ReplacementFor_q=(0x157b+3563-0x2366)
<operator>.lessThan ReplacementFor_n<(0x52c+4806-0x17f1)
<operator>.lessThan ReplacementFor_q<\012ReplacementFor_c
<operator>.postIncrement ReplacementFor_q++
<operator>.subtraction 0xd0b+5433-0x2244
<operator>.subtraction 0x157b+3563-0x2366
RETURN return; return;
<operator>.assignment ReplacementFor_q=(0x408+4487-0x158f)
<operator>.addition 0xd0b+5433
<operator>.addition 0x157b+3563
<operator>.subtraction 0x52c+4806-0x17f1
<operator>.equals ReplacementFor_str[ReplacementFor_n-\012(0xf81+170-0x102a)]==ReplacementFor_comb[ReplacementFor_q][(0xad3+4549-0x1c98)]
<operator>.addition 0x52c+4806
<operator>.subtraction 0x408+4487-0x158f
<operator>.addition 0x408+4487
<operator>.equals ReplacementFor_str[ReplacementFor_n]==ReplacementFor_comb[ReplacementFor_q][\012(0x1a52+1072-0x1e81)]
<operator>.subtraction ReplacementFor_n-\012(0xf81+170-0x102a)
<operator>.subtraction 0xad3+4549-0x1c98
<operator>.assignment ReplacementFor_str[ReplacementFor_n-(0x11f4+418-0x1395)]=\012ReplacementFor_comb[ReplacementFor_q][(0x12fd+1850-0x1a35)]
<operator>.assignment ReplacementFor_str[\012ReplacementFor_n]='\0'
<operator>.postDecrement ReplacementFor_n--
<operator>.equals ReplacementFor_str[\012ReplacementFor_n-(0xcf9+3798-0x1bce)]==ReplacementFor_comb[ReplacementFor_q][\012(0xa2c+3611-0x1846)]
<operator>.subtraction 0xf81+170-0x102a
<operator>.addition 0xad3+4549
<operator>.addition 0xf81+170
<operator>.subtraction 0x1a52+1072-0x1e81
<operator>.equals ReplacementFor_str[ReplacementFor_n]==\012ReplacementFor_comb[ReplacementFor_q][(0x1e6b+133-0x1ef0)]
<operator>.addition 0x1a52+1072
<operator>.subtraction ReplacementFor_n-(0x11f4+418-0x1395)
<operator>.subtraction 0x12fd+1850-0x1a35
<operator>.subtraction ReplacementFor_n-(0xcf9+3798-0x1bce)
<operator>.subtraction 0xa2c+3611-0x1846
<operator>.assignment ReplacementFor_str[\012ReplacementFor_n-(0x9a+5626-0x1693)]=ReplacementFor_comb[ReplacementFor_q][\012(0x356+3137-0xf95)]
<operator>.assignment ReplacementFor_str[ReplacementFor_n]='\0'
<operator>.postDecrement ReplacementFor_n--
<operator>.subtraction 0x11f4+418-0x1395
<operator>.addition 0x12fd+1850
<operator>.subtraction 0xcf9+3798-0x1bce
<operator>.addition 0xa2c+3611
<operator>.addition 0x11f4+418
<operator>.addition 0xcf9+3798
<operator>.subtraction 0x1e6b+133-0x1ef0
<operator>.addition 0x1e6b+133
<operator>.subtraction ReplacementFor_n-(0x9a+5626-0x1693)
<operator>.subtraction 0x356+3137-0xf95
<operator>.subtraction 0x9a+5626-0x1693
<operator>.addition 0x356+3137
<operator>.addition 0x9a+5626
<operator>.indirectIndexAccess ReplacementFor_str[ReplacementFor_n-\012(0xf81+170-0x102a)]
<operator>.indirectIndexAccess ReplacementFor_comb[ReplacementFor_q][(0xad3+4549-0x1c98)]
<operator>.indirectIndexAccess ReplacementFor_comb[ReplacementFor_q]
<operator>.indirectIndexAccess ReplacementFor_str[ReplacementFor_n]
<operator>.indirectIndexAccess ReplacementFor_comb[ReplacementFor_q][\012(0x1a52+1072-0x1e81)]
<operator>.indirectIndexAccess ReplacementFor_comb[ReplacementFor_q]
<operator>.indirectIndexAccess ReplacementFor_str[ReplacementFor_n-(0x11f4+418-0x1395)]
<operator>.indirectIndexAccess ReplacementFor_comb[ReplacementFor_q][(0x12fd+1850-0x1a35)]
<operator>.indirectIndexAccess ReplacementFor_str[\012ReplacementFor_n]
<operator>.indirectIndexAccess ReplacementFor_str[\012ReplacementFor_n-(0xcf9+3798-0x1bce)]
<operator>.indirectIndexAccess ReplacementFor_comb[ReplacementFor_q][\012(0xa2c+3611-0x1846)]
<operator>.indirectIndexAccess ReplacementFor_comb[ReplacementFor_q]
<operator>.indirectIndexAccess ReplacementFor_comb[ReplacementFor_q]
<operator>.indirectIndexAccess ReplacementFor_str[ReplacementFor_n]
<operator>.indirectIndexAccess ReplacementFor_comb[ReplacementFor_q][(0x1e6b+133-0x1ef0)]
<operator>.indirectIndexAccess ReplacementFor_comb[ReplacementFor_q]
<operator>.indirectIndexAccess ReplacementFor_str[\012ReplacementFor_n-(0x9a+5626-0x1693)]
<operator>.indirectIndexAccess ReplacementFor_comb[ReplacementFor_q][\012(0x356+3137-0xf95)]
<operator>.indirectIndexAccess ReplacementFor_str[ReplacementFor_n]
<operator>.indirectIndexAccess ReplacementFor_comb[ReplacementFor_q]
>>>PDG&71 0->4 0->5 0->6 0->7 0->8 0->9 0->11 0->12 0->13 0->15 0->16 0->17 0->19 0->20 0->22 0->23 0->25 0->26 0->27 0->28 0->30 0->31 0->32 0->33 0->34 0->36 0->37 0->38 0->39 0->40 0->41 0->42 0->43 0->44 0->45 0->46 0->47 0->48 0->49 0->50 2->1 2->1 2->1 3->1 3->1 3->1 4->1 4->1 4->1 4->5 4->9 4->10 4->16 4->17 4->19 5->1 5->5 5->6 5->6 5->14 5->19 5->20 5->25 5->26 5->27 5->51 5->52 5->53 6->5 7->1 7->2 7->2 8->1 8->3 8->3 9->1 10->5 13->1 13->4 13->4 14->18 14->24 14->28 14->30 14->33 14->34 14->40 14->41 14->43 14->54 14->55 14->56 14->60 14->61 14->63 16->10 16->10 18->21 18->22 18->23 18->29 18->31 18->32 18->38 18->39 18->42 18->57 18->58 18->59 18->62 19->31 19->33 23->19 24->29 24->44 24->45 24->64 24->65 24->66 25->19 25->19 29->18 29->35 29->36 29->37 29->46 29->47 29->48 29->49 29->50 29->67 29->68 29->69 29->70 31->23 33->19 33->46 36->18 36->29 37->19 38->31 38->31 40->33 40->33 46->37 48->46 48->46
>>>Token void ReplacementFor_combine ( ) { int ReplacementFor_p = ( 0xd0b + 5433 - 0x2244 ) , ReplacementFor_q = ( 0x157b + 3563 - 0x2366 ) ; if ( ReplacementFor_n < ( 0x52c + 4806 - 0x17f1 ) ) return ; for ( ReplacementFor_q = ( 0x408 + 4487 - 0x158f ) ; ReplacementFor_q < ReplacementFor_c ; ReplacementFor_q ++ ) { if ( ReplacementFor_str [ ReplacementFor_n - ( 0xf81 + 170 - 0x102a ) ] == ReplacementFor_comb [ ReplacementFor_q ] [ ( 0xad3 + 4549 - 0x1c98 ) ] ) { if ( ReplacementFor_str [ ReplacementFor_n ] == ReplacementFor_comb [ ReplacementFor_q ] [ ( 0x1a52 + 1072 - 0x1e81 ) ] ) { ReplacementFor_str [ ReplacementFor_n - ( 0x11f4 + 418 - 0x1395 ) ] = ReplacementFor_comb [ ReplacementFor_q ] [ ( 0x12fd + 1850 - 0x1a35 ) ] ; ReplacementFor_str [ ReplacementFor_n ] = ' \0 ' ; ReplacementFor_n -- ; } } else if ( ReplacementFor_str [ ReplacementFor_n - ( 0xcf9 + 3798 - 0x1bce ) ] == ReplacementFor_comb [ ReplacementFor_q ] [ ( 0xa2c + 3611 - 0x1846 ) ] ) { if ( ReplacementFor_str [ ReplacementFor_n ] == ReplacementFor_comb [ ReplacementFor_q ] [ ( 0x1e6b + 133 - 0x1ef0 ) ] ) { ReplacementFor_str [ ReplacementFor_n - ( 0x9a + 5626 - 0x1693 ) ] = ReplacementFor_comb [ ReplacementFor_q ] [ ( 0x356 + 3137 - 0xf95 ) ] ; ReplacementFor_str [ ReplacementFor_n ] = ' \0 ' ; ReplacementFor_n -- ; } } } }
>>>Func
METHOD ReplacementFor_DoIt
METHOD_RETURN void
<operator>.assignment ReplacementFor_flag=(0x109d+3632-0x1ecd)
<operator>.assignment ReplacementFor_combine=(0x12db+2784-0x1dbb)
<operator>.assignment base=(0x179+2940-0xcf5)
<operator>.assignment ReplacementFor_opposed=(0x8af+5036-0x1c5b)
<operator>.assignment ReplacementFor_answer_length=0U
fscanf fscanf(ReplacementFor_fin,"\x25\x75",&ReplacementFor_combine)
fscanf fscanf(ReplacementFor_fin,"\x25\x75",&ReplacementFor_opposed\012)
fscanf fscanf(ReplacementFor_fin,"\x25\x75",&base)
fscanf fscanf(ReplacementFor_fin "\x25\x73" &ReplacementFor_N[(0xcdf+3697-0x1b50)])
printf printf("\x5b")
fprintf fprintf(ReplacementFor_fout,\012"\x5b")
printf printf("\x5d")
fprintf fprintf(ReplacementFor_fout,\012"\x5d")
<operator>.lessThan ReplacementFor_j<ReplacementFor_combine
<operator>.preIncrement ++\012ReplacementFor_j
<operator>.lessThan ReplacementFor_j<\012ReplacementFor_opposed
<operator>.preIncrement ++ReplacementFor_j
<operator>.lessThan i<base
<operator>.preIncrement ++i
<operator>.lessThan ReplacementFor_j<\012ReplacementFor_answer_length
<operator>.preIncrement ++ReplacementFor_j
<operator>.subtraction 0x109d+3632-0x1ecd
<operator>.subtraction 0x12db+2784-0x1dbb
<operator>.subtraction 0x179+2940-0xcf5
<operator>.subtraction 0x8af+5036-0x1c5b
<operator>.assignment ReplacementFor_j=(0xdd2+3838-0x1cd0)
fscanf fscanf(ReplacementFor_fin,"\x25\x73",ReplacementFor_C[\012ReplacementFor_j])
<operator>.assignment ReplacementFor_j=(0x1149+1390-0x16b7)
fscanf fscanf(ReplacementFor_fin,"\x25\x73",\012ReplacementFor_D[ReplacementFor_j])
<operator>.assignment i=(0x181c+1012-0x1c10)
<operator>.assignment ReplacementFor_ANS[\012ReplacementFor_answer_length++]=ReplacementFor_N[i]
<operator>.assignment ReplacementFor_j=(0x103c+1498-0x1616)
printf printf("\x25\x63",\012ReplacementFor_ANS[ReplacementFor_j])
fprintf fprintf(ReplacementFor_fout,"\x25\x63",\012ReplacementFor_ANS[ReplacementFor_j])
<operator>.addition 0x109d+3632
<operator>.addition 0x12db+2784
<operator>.addition 0x179+2940
<operator>.addition 0x8af+5036
<operator>.greaterEqualsThan ReplacementFor_answer_length>=(0x588+8270-0x25d4)
<operator>.notEquals ReplacementFor_j!=\012ReplacementFor_answer_length-(0x11f3+3569-0x1fe3)
<operator>.subtraction 0xdd2+3838-0x1cd0
<operator>.subtraction 0x1149+1390-0x16b7
<operator>.subtraction 0xcdf+3697-0x1b50
<operator>.subtraction 0x181c+1012-0x1c10
ReplacementFor_find_combine ReplacementFor_find_combine()
ReplacementFor_find_opposed ReplacementFor_find_opposed()
<operator>.subtraction 0x103c+1498-0x1616
printf printf("\x2c\x20")
fprintf fprintf(\012ReplacementFor_fout,"\x2c\x20")
<operator>.addition 0xdd2+3838
<operator>.addition 0x1149+1390
<operator>.addition 0xcdf+3697
<operator>.addition 0x181c+1012
<operator>.postIncrement ReplacementFor_answer_length++
<operator>.subtraction 0x588+8270-0x25d4
<operator>.addition 0x103c+1498
<operator>.subtraction ReplacementFor_answer_length-(0x11f3+3569-0x1fe3)
<operator>.addition 0x588+8270
<operator>.subtraction 0x11f3+3569-0x1fe3
<operator>.addition 0x11f3+3569
<operator>.indirectIndexAccess ReplacementFor_C[\012ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_D[ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_ANS[\012ReplacementFor_answer_length++]
<operator>.indirectIndexAccess ReplacementFor_N[i]
<operator>.indirectIndexAccess ReplacementFor_ANS[ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_ANS[ReplacementFor_j]
>>>PDG&68 0->6 0->7 0->8 0->9 0->10 0->11 0->12 0->13 0->14 0->15 0->16 0->17 0->18 0->19 0->20 0->21 0->22 0->23 0->24 0->25 0->26 0->28 0->30 0->34 0->35 0->36 0->37 0->38 0->39 0->40 0->41 0->42 0->43 0->44 0->45 0->46 0->47 0->48 0->49 0->50 0->51 0->52 0->53 0->54 0->55 0->56 0->57 0->58 0->59 0->60 0->61 2->1 2->1 2->1 3->1 3->1 3->7 3->15 4->1 4->1 4->9 4->19 5->1 5->1 5->8 5->17 6->1 6->21 6->55 7->1 7->1 7->8 7->15 7->28 8->1 8->1 8->9 8->17 8->30 9->1 9->1 9->10 9->19 10->1 10->1 10->1 11->1 12->1 12->14 12->35 13->1 14->1 14->1 15->1 15->1 15->15 15->16 15->16 15->28 15->62 16->1 16->15 17->1 17->1 17->17 17->18 17->18 17->30 17->63 18->1 18->17 19->1 19->1 19->1 19->19 19->20 19->20 19->32 19->40 19->55 19->56 19->59 19->64 19->65 20->1 20->19 21->1 21->1 21->1 21->21 21->22 21->34 21->35 21->41 21->41 21->58 21->58 21->60 21->61 21->66 21->67 22->1 22->21 23->1 23->2 23->2 24->1 24->3 24->3 25->1 25->4 25->4 26->1 26->5 26->5 27->1 27->1 27->15 28->1 28->1 28->8 29->1 29->1 29->17 30->1 30->1 30->9 31->1 31->1 31->19 32->1 32->1 32->1 33->1 33->1 33->21 34->1 34->35 35->1 35->1 35->14 35->34 35->50 40->1 40->1 40->21 40->46 40->47 40->55 41->1 41->1 41->22 41->49 41->50 42->1 42->27 42->27 43->1 43->29 43->29 44->1 45->1 45->31 45->31 46->1 47->1 48->1 48->33 48->33 49->1 50->1 50->14 50->35 55->40 56->1 56->40 56->40 58->1 58->21 58->41 58->41 60->1 60->58 60->58
>>>Token void ReplacementFor_DoIt ( ) { int i , ReplacementFor_j , ReplacementFor_k ; char ReplacementFor_c ; int ReplacementFor_flag = ( 0x109d + 3632 - 0x1ecd ) ; ReplacementFor_combine = ( 0x12db + 2784 - 0x1dbb ) ; base = ( 0x179 + 2940 - 0xcf5 ) ; ReplacementFor_opposed = ( 0x8af + 5036 - 0x1c5b ) ; ReplacementFor_answer_length = 0U ; fscanf ( ReplacementFor_fin , " \x25 \x75 " , & ReplacementFor_combine ) ; for ( ReplacementFor_j = ( 0xdd2 + 3838 - 0x1cd0 ) ; ReplacementFor_j < ReplacementFor_combine ; ++ ReplacementFor_j ) { fscanf ( ReplacementFor_fin , " \x25 \x73 " , ReplacementFor_C [ ReplacementFor_j ] ) ; } fscanf ( ReplacementFor_fin , " \x25 \x75 " , & ReplacementFor_opposed ) ; for ( ReplacementFor_j = ( 0x1149 + 1390 - 0x16b7 ) ; ReplacementFor_j < ReplacementFor_opposed ; ++ ReplacementFor_j ) { fscanf ( ReplacementFor_fin , " \x25 \x73 " , ReplacementFor_D [ ReplacementFor_j ] ) ; } fscanf ( ReplacementFor_fin , " \x25 \x75 " , & base ) ; fscanf ( ReplacementFor_fin , " \x25 \x73 " , & ReplacementFor_N [ ( 0xcdf + 3697 - 0x1b50 ) ] ) ; for ( i = ( 0x181c + 1012 - 0x1c10 ) ; i < base ; ++ i ) { ReplacementFor_ANS [ ReplacementFor_answer_length ++ ] = ReplacementFor_N [ i ] ; if ( ReplacementFor_answer_length >= ( 0x588 + 8270 - 0x25d4 ) ) { ReplacementFor_find_combine ( ) ; ReplacementFor_find_opposed ( ) ; } } printf ( " \x5b " ) ; fprintf ( ReplacementFor_fout , " \x5b " ) ; for ( ReplacementFor_j = ( 0x103c + 1498 - 0x1616 ) ; ReplacementFor_j < ReplacementFor_answer_length ; ++ ReplacementFor_j ) { printf ( " \x25 \x63 " , ReplacementFor_ANS [ ReplacementFor_j ] ) ; fprintf ( ReplacementFor_fout , " \x25 \x63 " , ReplacementFor_ANS [ ReplacementFor_j ] ) ; if ( ReplacementFor_j != ReplacementFor_answer_length - ( 0x11f3 + 3569 - 0x1fe3 ) ) { printf ( " \x2c \x20 " ) ; fprintf ( ReplacementFor_fout , " \x2c \x20 " ) ; } } printf ( " \x5d " ) ; fprintf ( ReplacementFor_fout , " \x5d " ) ; }
>>>Func
METHOD main
METHOD_RETURN int
PARAM void
scanf scanf("\x25\x64",&T)
<operator>.lessThan i<T
<operator>.postIncrement i++
<operator>.assignment i=\012(0xc0b+2399-0x156a)
scanf scanf("\x25\x64",&ReplacementFor_C)
<operator>.assignment ReplacementFor_comb=(ReplacementFor_combine*)malloc(ReplacementFor_C*sizeof(\012ReplacementFor_combine))
scanf scanf("\x25\x64",&ReplacementFor_D)
<operator>.assignment ReplacementFor_opp=(ReplacementFor_opposed*)malloc(ReplacementFor_D*sizeof(\012ReplacementFor_opposed))
scanf scanf("\x25\x64",&ReplacementFor_N)
<operator>.assignment ReplacementFor_list=(char*)malloc(ReplacementFor_N*sizeof(char))
<operator>.assignment ReplacementFor_pos=(0x1698+4043-0x2663)
scanf scanf("\x25\x73",ReplacementFor_str)
printf printf(\012"\x43\x61\x73\x65\x20\x23\x25\x64\x3a\x20\x5b" i+(0x131b+3351-0x2031),\012ReplacementFor_list)
printf printf(\012"\x5d" "\n")
<operator>.lessThan ReplacementFor_j<ReplacementFor_C
<operator>.postIncrement ReplacementFor_j++
<operator>.lessThan ReplacementFor_j<ReplacementFor_D
<operator>.postIncrement ReplacementFor_j++
<operator>.lessThan ReplacementFor_j<ReplacementFor_N
<operator>.postIncrement ReplacementFor_j++
IDENTIFIER ReplacementFor_pos if (ReplacementFor_pos)
<operator>.subtraction 0xc0b+2399-0x156a
<operator>.cast (ReplacementFor_combine*)malloc(ReplacementFor_C*sizeof(\012ReplacementFor_combine))
<operator>.assignment ReplacementFor_j=(0xb44+6772-0x25b8)
scanf scanf("\x25\x73",\012ReplacementFor_str)
<operator>.assignment (ReplacementFor_comb+ReplacementFor_j)->base[\012(0x50a+898-0x88c)]=*ReplacementFor_str
<operator>.assignment (ReplacementFor_comb+ReplacementFor_j)->\012base[(0x9c2+4163-0x1a04)]=*(ReplacementFor_str+(0x967+1786-0x1060))
<operator>.assignment (\012ReplacementFor_comb+ReplacementFor_j)->ReplacementFor_nonbase=*(\012ReplacementFor_str+(0x457+8327-0x24dc))
<operator>.cast (ReplacementFor_opposed*)malloc(ReplacementFor_D*sizeof(\012ReplacementFor_opposed))
<operator>.assignment ReplacementFor_j=(0xa5d+5514-0x1fe7)
scanf scanf("\x25\x73",\012ReplacementFor_str)
<operator>.assignment (ReplacementFor_opp+ReplacementFor_j)->ReplacementFor_elem1=\012*ReplacementFor_str
<operator>.assignment (ReplacementFor_opp+ReplacementFor_j)->ReplacementFor_elem2=\012*(ReplacementFor_str+(0x1292+3122-0x1ec3))
<operator>.cast (char*)malloc(ReplacementFor_N*sizeof(char))
<operator>.subtraction 0x1698+4043-0x2663
<operator>.assignment ReplacementFor_j=(0x7f+1405-0x5fc)
<operator>.assignment ReplacementFor_invoke=ReplacementFor_str[ReplacementFor_j]
<operator>.addition i+(0x131b+3351-0x2031)
printf printf("\x25\x63" \012ReplacementFor_list[(0x1c9f+832-0x1fdf)])
<operator>.addition 0xc0b+2399
malloc malloc(ReplacementFor_C*sizeof(\012ReplacementFor_combine))
malloc malloc(ReplacementFor_D*sizeof(\012ReplacementFor_opposed))
malloc malloc(ReplacementFor_N*sizeof(char))
<operator>.addition 0x1698+4043
<operator>.logicalNot !ReplacementFor_pos
<operator>.subtraction 0x131b+3351-0x2031
<operator>.lessThan ReplacementFor_j<ReplacementFor_pos
<operator>.postIncrement ReplacementFor_j++
<operator>.multiplication ReplacementFor_C*sizeof(\012ReplacementFor_combine)
<operator>.subtraction 0xb44+6772-0x25b8
<operator>.multiplication ReplacementFor_D*sizeof(\012ReplacementFor_opposed)
<operator>.subtraction 0xa5d+5514-0x1fe7
<operator>.multiplication ReplacementFor_N*sizeof(char)
<operator>.subtraction 0x7f+1405-0x5fc
<operator>.assignment ReplacementFor_list[ReplacementFor_pos]=\012ReplacementFor_invoke
<operator>.postIncrement ReplacementFor_pos++
<operator>.addition 0x131b+3351
<operator>.assignment ReplacementFor_j=\012(0x9f6+7175-0x25fc)
printf printf("\x2c\x20\x25\x63",ReplacementFor_list[ReplacementFor_j])
<operator>.sizeOf sizeof(\012ReplacementFor_combine)
<operator>.addition 0xb44+6772
<operator>.subtraction 0x50a+898-0x88c
<operator>.subtraction 0x9c2+4163-0x1a04
<operator>.addition ReplacementFor_str+(0x967+1786-0x1060)
<operator>.addition ReplacementFor_comb+ReplacementFor_j
<operator>.addition ReplacementFor_str+(0x457+8327-0x24dc)
<operator>.sizeOf sizeof(\012ReplacementFor_opposed)
<operator>.addition 0xa5d+5514
<operator>.addition ReplacementFor_opp+ReplacementFor_j
<operator>.addition ReplacementFor_opp+ReplacementFor_j
<operator>.addition ReplacementFor_str+(0x1292+3122-0x1ec3)
<operator>.sizeOf sizeof(char)
<operator>.addition 0x7f+1405
<operator>.assignment ReplacementFor_k=\012(0x1eda+724-0x21ae)
<operator>.assignment ReplacementFor_change=(0x13c+3069-0xd39)
<operator>.subtraction 0x1c9f+832-0x1fdf
<operator>.addition ReplacementFor_comb+ReplacementFor_j
<operator>.addition 0x50a+898
<operator>.addition ReplacementFor_comb+ReplacementFor_j
<operator>.addition 0x9c2+4163
<operator>.subtraction 0x967+1786-0x1060
<operator>.subtraction 0x457+8327-0x24dc
<operator>.subtraction 0x1292+3122-0x1ec3
<operator>.logicalAnd !\012ReplacementFor_change&&ReplacementFor_k<ReplacementFor_C
<operator>.logicalNot !ReplacementFor_change
<operator>.logicalAnd !\012ReplacementFor_change&&!clear
<operator>.addition 0x1c9f+832
<operator>.subtraction 0x9f6+7175-0x25fc
<operator>.addition 0x967+1786
<operator>.addition 0x457+8327
<operator>.addition 0x1292+3122
<operator>.subtraction 0x1eda+724-0x21ae
<operator>.subtraction 0x13c+3069-0xd39
<operator>.postIncrement ReplacementFor_k++
<operator>.assignment ReplacementFor_k=\012(0x192a+837-0x1c6f)
<operator>.assignment clear=(0x1688+2856-0x21b0)
<operator>.assignment ReplacementFor_list[ReplacementFor_pos]=\012ReplacementFor_invoke
<operator>.postIncrement ReplacementFor_pos++
<operator>.addition 0x9f6+7175
<operator>.addition 0x1eda+724
<operator>.addition 0x13c+3069
<operator>.logicalNot !\012ReplacementFor_change
<operator>.lessThan ReplacementFor_k<ReplacementFor_C
<operator>.logicalOr (\012ReplacementFor_invoke==(ReplacementFor_comb+ReplacementFor_k)->base[\012(0xced+1814-0x1403)]&&ReplacementFor_list[ReplacementFor_pos-(0x16db+92-0x1736)]\012==(ReplacementFor_comb+ReplacementFor_k)->base[(0x352+7626-0x211b)])||(\012ReplacementFor_invoke==(ReplacementFor_comb+ReplacementFor_k)->base[\012(0x2226+1173-0x26ba)]&&ReplacementFor_list[ReplacementFor_pos-\012(0xc51+2353-0x1581)]==(ReplacementFor_comb+ReplacementFor_k)->base[\012(0x11df+4847-0x24ce)])
<operator>.logicalAnd !clear&&ReplacementFor_k<\012ReplacementFor_D
<operator>.logicalNot !\012ReplacementFor_change
<operator>.logicalNot !clear
<operator>.assignment ReplacementFor_list[ReplacementFor_pos-\012(0x250+3965-0x11cc)]=(ReplacementFor_comb+ReplacementFor_k)->\012ReplacementFor_nonbase
<operator>.assignment ReplacementFor_change=(0x3c3+5435-0x18fd)
<operator>.subtraction 0x192a+837-0x1c6f
<operator>.subtraction 0x1688+2856-0x21b0
<operator>.postIncrement ReplacementFor_k++
<operator>.logicalAnd ReplacementFor_invoke==(ReplacementFor_comb+ReplacementFor_k)->base[\012(0xced+1814-0x1403)]&&ReplacementFor_list[ReplacementFor_pos-(0x16db+92-0x1736)]\012==(ReplacementFor_comb+ReplacementFor_k)->base[(0x352+7626-0x211b)]
<operator>.logicalAnd ReplacementFor_invoke==(ReplacementFor_comb+ReplacementFor_k)->base[\012(0x2226+1173-0x26ba)]&&ReplacementFor_list[ReplacementFor_pos-\012(0xc51+2353-0x1581)]==(ReplacementFor_comb+ReplacementFor_k)->base[\012(0x11df+4847-0x24ce)]
<operator>.addition 0x192a+837
<operator>.addition 0x1688+2856
<operator>.logicalNot !clear
<operator>.lessThan ReplacementFor_k<\012ReplacementFor_D
<operator>.equals ReplacementFor_invoke==(ReplacementFor_opp+ReplacementFor_k\012)->ReplacementFor_elem1
<operator>.equals ReplacementFor_invoke==(ReplacementFor_comb+ReplacementFor_k)->base[\012(0xced+1814-0x1403)]
<operator>.equals ReplacementFor_list[ReplacementFor_pos-(0x16db+92-0x1736)]\012==(ReplacementFor_comb+ReplacementFor_k)->base[(0x352+7626-0x211b)]
<operator>.equals ReplacementFor_invoke==(ReplacementFor_comb+ReplacementFor_k)->base[\012(0x2226+1173-0x26ba)]
<operator>.equals ReplacementFor_list[ReplacementFor_pos-\012(0xc51+2353-0x1581)]==(ReplacementFor_comb+ReplacementFor_k)->base[\012(0x11df+4847-0x24ce)]
<operator>.subtraction 0x3c3+5435-0x18fd
<operator>.assignment l=(0xf08+3104-0x1b28)
<operator>.subtraction ReplacementFor_pos-\012(0x250+3965-0x11cc)
<operator>.addition ReplacementFor_comb+ReplacementFor_k
<operator>.addition 0x3c3+5435
<operator>.logicalAnd !clear&&l<\012ReplacementFor_pos
<operator>.subtraction 0xced+1814-0x1403
<operator>.subtraction ReplacementFor_pos-(0x16db+92-0x1736)
<operator>.subtraction 0x352+7626-0x211b
<operator>.subtraction 0x2226+1173-0x26ba
<operator>.subtraction ReplacementFor_pos-\012(0xc51+2353-0x1581)
<operator>.subtraction 0x11df+4847-0x24ce
<operator>.subtraction 0x250+3965-0x11cc
<operator>.addition ReplacementFor_opp+ReplacementFor_k
<operator>.subtraction 0xf08+3104-0x1b28
<operator>.postIncrement l++
<operator>.equals ReplacementFor_invoke==(\012ReplacementFor_opp+ReplacementFor_k)->ReplacementFor_elem2
<operator>.addition ReplacementFor_comb+ReplacementFor_k
<operator>.addition 0xced+1814
<operator>.subtraction 0x16db+92-0x1736
<operator>.addition ReplacementFor_comb+ReplacementFor_k
<operator>.addition 0x352+7626
<operator>.addition ReplacementFor_comb+ReplacementFor_k
<operator>.addition 0x2226+1173
<operator>.subtraction 0xc51+2353-0x1581
<operator>.addition ReplacementFor_comb+ReplacementFor_k
<operator>.addition 0x11df+4847
<operator>.addition 0x250+3965
<operator>.addition 0xf08+3104
<operator>.logicalNot !clear
<operator>.lessThan l<\012ReplacementFor_pos
<operator>.equals ReplacementFor_list[l]==(ReplacementFor_opp+\012ReplacementFor_k)->ReplacementFor_elem2
<operator>.assignment l=(0xe6+386-0x268)
<operator>.addition 0x16db+92
<operator>.addition 0xc51+2353
<operator>.assignment ReplacementFor_pos=(0x18e2+2444-0x226e)
<operator>.assignment clear=(0x16e9+697-0x19a1)
<operator>.logicalAnd !clear&&l<ReplacementFor_pos
<operator>.addition ReplacementFor_opp+ReplacementFor_k
<operator>.subtraction 0xe6+386-0x268
<operator>.postIncrement l++
<operator>.addition ReplacementFor_opp+\012ReplacementFor_k
<operator>.subtraction 0x18e2+2444-0x226e
<operator>.subtraction 0x16e9+697-0x19a1
<operator>.addition 0xe6+386
<operator>.logicalNot !clear
<operator>.lessThan l<ReplacementFor_pos
<operator>.equals ReplacementFor_list[l]==(\012ReplacementFor_opp+ReplacementFor_k)->ReplacementFor_elem1
<operator>.addition 0x18e2+2444
<operator>.addition 0x16e9+697
<operator>.assignment ReplacementFor_pos=\012(0xf10+5413-0x2435)
<operator>.assignment clear=(0x25e0+245-0x26d4)
<operator>.addition ReplacementFor_opp+ReplacementFor_k
<operator>.subtraction 0xf10+5413-0x2435
<operator>.subtraction 0x25e0+245-0x26d4
<operator>.addition 0xf10+5413
<operator>.addition 0x25e0+245
<operator>.addressOf &ReplacementFor_C
<operator>.addressOf &ReplacementFor_D
<operator>.addressOf &ReplacementFor_N
UNKNOWN ReplacementFor_combine* ReplacementFor_combine*
UNKNOWN ReplacementFor_opposed* ReplacementFor_opposed*
UNKNOWN char* char*
<operator>.indirectIndexAccess (ReplacementFor_comb+ReplacementFor_j)->base[\012(0x50a+898-0x88c)]
<operator>.indirection *ReplacementFor_str
<operator>.indirectIndexAccess (ReplacementFor_comb+ReplacementFor_j)->\012base[(0x9c2+4163-0x1a04)]
<operator>.indirection *(ReplacementFor_str+(0x967+1786-0x1060))
<operator>.indirectFieldAccess (\012ReplacementFor_comb+ReplacementFor_j)->ReplacementFor_nonbase
<operator>.indirection *(\012ReplacementFor_str+(0x457+8327-0x24dc))
<operator>.indirectFieldAccess (ReplacementFor_opp+ReplacementFor_j)->ReplacementFor_elem1
<operator>.indirection *ReplacementFor_str
<operator>.indirectFieldAccess (ReplacementFor_opp+ReplacementFor_j)->ReplacementFor_elem2
<operator>.indirection *(ReplacementFor_str+(0x1292+3122-0x1ec3))
<operator>.indirectIndexAccess ReplacementFor_str[ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_list[(0x1c9f+832-0x1fdf)]
<operator>.indirectFieldAccess (ReplacementFor_comb+ReplacementFor_j)->base
<operator>.indirectFieldAccess (ReplacementFor_comb+ReplacementFor_j)->\012base
FIELD_IDENTIFIER ReplacementFor_nonbase ReplacementFor_nonbase
FIELD_IDENTIFIER ReplacementFor_elem1 ReplacementFor_elem1
FIELD_IDENTIFIER ReplacementFor_elem2 ReplacementFor_elem2
FIELD_IDENTIFIER base base
FIELD_IDENTIFIER base base
<operator>.indirectIndexAccess ReplacementFor_list[ReplacementFor_pos]
<operator>.indirectIndexAccess ReplacementFor_list[ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_list[ReplacementFor_pos]
<operator>.indirectIndexAccess ReplacementFor_list[ReplacementFor_pos-\012(0x250+3965-0x11cc)]
<operator>.indirectFieldAccess (ReplacementFor_comb+ReplacementFor_k)->\012ReplacementFor_nonbase
<operator>.indirectIndexAccess (ReplacementFor_comb+ReplacementFor_k)->base[\012(0xced+1814-0x1403)]
<operator>.indirectIndexAccess ReplacementFor_list[ReplacementFor_pos-(0x16db+92-0x1736)]
<operator>.indirectIndexAccess (ReplacementFor_comb+ReplacementFor_k)->base[(0x352+7626-0x211b)]
<operator>.indirectIndexAccess (ReplacementFor_comb+ReplacementFor_k)->base[\012(0x2226+1173-0x26ba)]
<operator>.indirectIndexAccess ReplacementFor_list[ReplacementFor_pos-\012(0xc51+2353-0x1581)]
<operator>.indirectIndexAccess (ReplacementFor_comb+ReplacementFor_k)->base[\012(0x11df+4847-0x24ce)]
FIELD_IDENTIFIER ReplacementFor_nonbase ReplacementFor_nonbase
<operator>.indirectFieldAccess (ReplacementFor_opp+ReplacementFor_k\012)->ReplacementFor_elem1
<operator>.indirectFieldAccess (ReplacementFor_comb+ReplacementFor_k)->base
<operator>.indirectFieldAccess (ReplacementFor_comb+ReplacementFor_k)->base
<operator>.indirectFieldAccess (ReplacementFor_comb+ReplacementFor_k)->base
<operator>.indirectFieldAccess (ReplacementFor_comb+ReplacementFor_k)->base
FIELD_IDENTIFIER ReplacementFor_elem1 ReplacementFor_elem1
FIELD_IDENTIFIER base base
FIELD_IDENTIFIER base base
FIELD_IDENTIFIER base base
FIELD_IDENTIFIER base base
<operator>.indirectFieldAccess (\012ReplacementFor_opp+ReplacementFor_k)->ReplacementFor_elem2
<operator>.indirectIndexAccess ReplacementFor_list[l]
<operator>.indirectFieldAccess (ReplacementFor_opp+\012ReplacementFor_k)->ReplacementFor_elem2
FIELD_IDENTIFIER ReplacementFor_elem2 ReplacementFor_elem2
FIELD_IDENTIFIER ReplacementFor_elem2 ReplacementFor_elem2
<operator>.indirectIndexAccess ReplacementFor_list[l]
<operator>.indirectFieldAccess (\012ReplacementFor_opp+ReplacementFor_k)->ReplacementFor_elem1
FIELD_IDENTIFIER ReplacementFor_elem1 ReplacementFor_elem1
>>>PDG&238 0->2 0->3 0->4 0->5 0->7 0->9 0->11 0->14 0->15 0->16 0->17 0->18 0->19 0->20 0->21 0->22 0->23 0->24 0->27 0->33 0->37 0->40 0->41 0->42 0->46 0->47 0->48 0->49 0->50 0->51 0->52 0->53 0->54 0->55 0->56 0->57 0->58 0->59 0->61 0->63 0->64 0->65 0->66 0->67 0->68 0->70 0->71 0->72 0->73 0->75 0->78 0->79 0->80 0->81 0->82 0->83 0->84 0->85 0->87 0->89 0->90 0->91 0->92 0->93 0->94 0->95 0->96 0->99 0->100 0->101 0->102 0->103 0->104 0->105 0->108 0->109 0->112 0->113 0->114 0->117 0->118 0->119 0->120 0->121 0->122 0->124 0->126 0->128 0->129 0->130 0->132 0->133 0->134 0->135 0->136 0->137 0->138 0->139 0->140 0->141 0->142 0->143 0->144 0->145 0->146 0->147 0->148 0->149 0->150 0->151 0->152 0->153 0->154 0->155 0->156 0->159 0->160 0->164 0->165 0->166 0->167 0->168 0->169 0->170 0->171 0->172 0->174 0->175 0->178 0->179 0->180 0->181 0->182 2->1 3->1 3->4 4->1 4->1 4->1 4->4 4->5 4->5 4->7 4->8 4->9 4->10 4->11 4->12 4->13 4->14 4->15 4->15 4->16 4->17 4->19 4->21 4->25 4->26 4->31 4->32 4->36 4->37 4->38 4->40 4->40 4->41 4->43 4->44 4->45 4->46 4->48 4->49 4->51 4->52 4->53 4->54 4->55 4->56 4->59 4->60 4->62 4->63 4->69 4->70 4->74 4->75 4->78 4->89 4->90 4->101 4->183 4->184 4->185 4->186 4->187 4->188 4->200 5->1 5->4 6->1 6->1 6->4 7->17 7->51 7->105 8->67 8->79 8->81 8->129 8->143 9->19 9->53 9->120 10->71 10->139 11->21 11->55 12->15 12->123 12->125 12->157 12->173 13->47 13->49 14->27 14->33 14->39 14->66 14->68 14->73 15->41 15->61 17->7 17->17 17->18 17->18 17->27 17->28 17->29 17->30 17->51 17->64 17->65 17->66 17->67 17->67 17->68 17->79 17->79 17->80 17->81 17->81 17->82 17->83 17->84 17->91 17->92 17->105 17->189 17->190 17->191 17->192 17->193 17->194 17->201 17->202 17->203 17->206 17->207 18->17 19->9 19->19 19->20 19->20 19->33 19->34 19->35 19->53 19->71 19->71 19->72 19->72 19->73 19->85 19->93 19->120 19->195 19->196 19->197 19->198 19->204 19->205 20->19 21->11 21->21 21->22 21->22 21->39 21->47 21->55 21->199 22->21 24->1 24->6 24->6 26->17 27->14 27->33 27->66 27->68 32->19 33->14 33->73 37->13 37->13 38->21 39->57 39->99 39->121 39->122 41->15 43->8 43->25 44->10 44->31 45->12 45->36 47->49 47->57 47->58 47->58 47->76 47->77 47->86 47->87 47->88 47->94 47->95 47->100 47->102 47->103 47->104 47->108 47->128 47->133 47->136 47->156 47->172 47->208 48->15 48->15 48->40 48->40 49->49 49->50 49->50 49->61 49->209 50->49 51->17 51->43 52->26 52->26 53->19 53->44 54->32 54->32 55->21 55->45 56->38 56->38 57->15 58->47 58->49 60->49 61->15 62->1 69->1 74->1 76->96 76->105 76->129 76->143 76->146 76->148 76->151 77->104 83->66 83->66 84->68 84->68 85->73 85->73 86->86 86->96 86->104 86->106 86->115 86->122 86->132 86->143 86->144 86->213 86->221 86->226 87->97 87->98 87->107 87->108 87->112 87->113 87->117 87->118 87->119 88->99 88->100 88->210 90->60 90->60 94->76 94->76 95->77 95->77 96->105 96->129 96->143 96->146 96->148 96->151 97->114 97->120 97->139 97->164 97->167 97->178 98->119 99->15 100->47 100->49 104->86 104->87 104->105 105->7 105->51 105->86 105->86 105->96 105->129 105->143 105->146 105->148 105->151 106->110 106->111 106->126 106->128 106->129 106->130 106->138 106->153 106->211 106->212 106->219 107->88 107->107 107->114 107->119 107->121 107->139 107->220 107->225 108->88 108->109 109->88 110->15 111->104 112->97 112->97 113->98 113->98 114->120 114->139 114->164 114->167 114->178 115->106 115->106 115->116 115->124 115->135 115->148 115->149 115->216 115->223 115->228 116->106 116->106 119->107 119->109 119->120 119->155 119->171 120->9 120->53 120->107 120->107 120->114 120->139 120->164 120->167 120->178 121->99 121->127 121->131 121->140 121->142 121->142 121->154 121->155 121->164 121->230 121->233 122->99 122->115 122->115 122->121 122->123 122->124 122->133 122->134 122->145 122->146 122->147 122->159 122->214 122->215 122->222 122->227 123->15 123->115 123->115 124->99 124->116 124->116 124->121 124->122 124->125 124->136 124->137 124->150 124->151 124->152 124->160 124->217 124->218 124->224 124->229 125->15 125->116 125->116 126->111 126->111 127->141 127->156 128->47 128->49 128->100 128->133 128->136 128->156 128->172 131->131 131->141 131->155 131->157 131->167 131->231 131->232 131->234 133->47 133->49 133->100 133->128 133->136 133->156 133->172 136->47 136->49 136->100 136->128 136->133 136->156 136->172 138->128 138->128 140->127 140->127 141->156 142->99 142->121 142->158 142->163 142->165 142->170 142->171 145->133 145->133 150->136 150->136 155->119 155->131 155->156 156->47 156->49 156->100 156->131 156->131 156->141 156->172 157->15 157->161 157->162 157->168 157->169 157->173 157->174 157->175 158->166 158->172 161->47 161->49 161->100 161->156 161->172 162->155 163->163 163->166 163->171 163->173 163->178 163->235 163->236 163->237 165->158 165->158 166->172 168->161 168->161 169->162 169->162 171->119 171->163 171->172 172->47 172->49 172->100 172->156 172->163 172->163 172->166 173->15 173->157 173->176 173->177 173->179 173->180 173->181 173->182 176->47 176->49 176->100 176->156 176->172 177->171 179->176 179->176 180->177 180->177
>>>Token int main ( void ) { int T , ReplacementFor_C , ReplacementFor_D , ReplacementFor_N , i , ReplacementFor_j , ReplacementFor_k , l , ReplacementFor_pos , ReplacementFor_change , clear ; char ReplacementFor_str [ ( 0x25e6 + 170 - 0x2686 ) ] ; char ReplacementFor_invoke ; ReplacementFor_combine * ReplacementFor_comb ; ReplacementFor_opposed * ReplacementFor_opp ; char * ReplacementFor_list ; scanf ( " \x25 \x64 " , & T ) ; for ( i = ( 0xc0b + 2399 - 0x156a ) ; i < T ; i ++ ) { scanf ( " \x25 \x64 " , & ReplacementFor_C ) ; ReplacementFor_comb = ( ReplacementFor_combine * ) malloc ( ReplacementFor_C * sizeof ( ReplacementFor_combine ) ) ; for ( ReplacementFor_j = ( 0xb44 + 6772 - 0x25b8 ) ; ReplacementFor_j < ReplacementFor_C ; ReplacementFor_j ++ ) { scanf ( " \x25 \x73 " , ReplacementFor_str ) ; ( ReplacementFor_comb + ReplacementFor_j ) -> base [ ( 0x50a + 898 - 0x88c ) ] = * ReplacementFor_str ; ( ReplacementFor_comb + ReplacementFor_j ) -> base [ ( 0x9c2 + 4163 - 0x1a04 ) ] = * ( ReplacementFor_str + ( 0x967 + 1786 - 0x1060 ) ) ; ( ReplacementFor_comb + ReplacementFor_j ) -> ReplacementFor_nonbase = * ( ReplacementFor_str + ( 0x457 + 8327 - 0x24dc ) ) ; } scanf ( " \x25 \x64 " , & ReplacementFor_D ) ; ReplacementFor_opp = ( ReplacementFor_opposed * ) malloc ( ReplacementFor_D * sizeof ( ReplacementFor_opposed ) ) ; for ( ReplacementFor_j = ( 0xa5d + 5514 - 0x1fe7 ) ; ReplacementFor_j < ReplacementFor_D ; ReplacementFor_j ++ ) { scanf ( " \x25 \x73 " , ReplacementFor_str ) ; ( ReplacementFor_opp + ReplacementFor_j ) -> ReplacementFor_elem1 = * ReplacementFor_str ; ( ReplacementFor_opp + ReplacementFor_j ) -> ReplacementFor_elem2 = * ( ReplacementFor_str + ( 0x1292 + 3122 - 0x1ec3 ) ) ; } scanf ( " \x25 \x64 " , & ReplacementFor_N ) ; ReplacementFor_list = ( char * ) malloc ( ReplacementFor_N * sizeof ( char ) ) ; ReplacementFor_pos = ( 0x1698 + 4043 - 0x2663 ) ; scanf ( " \x25 \x73 " , ReplacementFor_str ) ; for ( ReplacementFor_j = ( 0x7f + 1405 - 0x5fc ) ; ReplacementFor_j < ReplacementFor_N ; ReplacementFor_j ++ ) { ReplacementFor_invoke = ReplacementFor_str [ ReplacementFor_j ] ; if ( ! ReplacementFor_pos ) { ReplacementFor_list [ ReplacementFor_pos ] = ReplacementFor_invoke ; ReplacementFor_pos ++ ; } else { ReplacementFor_k = ( 0x1eda + 724 - 0x21ae ) ; ReplacementFor_change = ( 0x13c + 3069 - 0xd39 ) ; while ( ! ReplacementFor_change && ReplacementFor_k < ReplacementFor_C ) { if ( ( ReplacementFor_invoke == ( ReplacementFor_comb + ReplacementFor_k ) -> base [ ( 0xced + 1814 - 0x1403 ) ] && ReplacementFor_list [ ReplacementFor_pos - ( 0x16db + 92 - 0x1736 ) ] == ( ReplacementFor_comb + ReplacementFor_k ) -> base [ ( 0x352 + 7626 - 0x211b ) ] ) || ( ReplacementFor_invoke == ( ReplacementFor_comb + ReplacementFor_k ) -> base [ ( 0x2226 + 1173 - 0x26ba ) ] && ReplacementFor_list [ ReplacementFor_pos - ( 0xc51 + 2353 - 0x1581 ) ] == ( ReplacementFor_comb + ReplacementFor_k ) -> base [ ( 0x11df + 4847 - 0x24ce ) ] ) ) { ReplacementFor_list [ ReplacementFor_pos - ( 0x250 + 3965 - 0x11cc ) ] = ( ReplacementFor_comb + ReplacementFor_k ) -> ReplacementFor_nonbase ; ReplacementFor_change = ( 0x3c3 + 5435 - 0x18fd ) ; } ReplacementFor_k ++ ; } if ( ! ReplacementFor_change ) { ReplacementFor_k = ( 0x192a + 837 - 0x1c6f ) ; clear = ( 0x1688 + 2856 - 0x21b0 ) ; while ( ! clear && ReplacementFor_k < ReplacementFor_D ) { if ( ReplacementFor_invoke == ( ReplacementFor_opp + ReplacementFor_k ) -> ReplacementFor_elem1 ) { l = ( 0xf08 + 3104 - 0x1b28 ) ; while ( ! clear && l < ReplacementFor_pos ) { if ( ReplacementFor_list [ l ] == ( ReplacementFor_opp + ReplacementFor_k ) -> ReplacementFor_elem2 ) { ReplacementFor_pos = ( 0x18e2 + 2444 - 0x226e ) ; clear = ( 0x16e9 + 697 - 0x19a1 ) ; } l ++ ; } } else if ( ReplacementFor_invoke == ( ReplacementFor_opp + ReplacementFor_k ) -> ReplacementFor_elem2 ) { l = ( 0xe6 + 386 - 0x268 ) ; while ( ! clear && l < ReplacementFor_pos ) { if ( ReplacementFor_list [ l ] == ( ReplacementFor_opp + ReplacementFor_k ) -> ReplacementFor_elem1 ) { ReplacementFor_pos = ( 0xf10 + 5413 - 0x2435 ) ; clear = ( 0x25e0 + 245 - 0x26d4 ) ; } l ++ ; } } ReplacementFor_k ++ ; } } if ( ! ReplacementFor_change && ! clear ) { ReplacementFor_list [ ReplacementFor_pos ] = ReplacementFor_invoke ; ReplacementFor_pos ++ ; } } } printf ( " \x43 \x61 \x73 \x65 \x20 \x23 \x25 \x64 \x3a \x20 \x5b " , i + ( 0x131b + 3351 - 0x2031 ) , ReplacementFor_list ) ; if ( ReplacementFor_pos ) { printf ( " \x25 \x63 " , ReplacementFor_list [ ( 0x1c9f + 832 - 0x1fdf ) ] ) ; for ( ReplacementFor_j = ( 0x9f6 + 7175 - 0x25fc ) ; ReplacementFor_j < ReplacementFor_pos ; ReplacementFor_j ++ ) { printf ( " \x2c \x20 \x25 \x63 " , ReplacementFor_list [ ReplacementFor_j ] ) ; } } printf ( " \x5d " " \n " ) ; } }
>>>Func
METHOD ReplacementFor_adjust_column
METHOD_RETURN size_t
PARAM size_t ReplacementFor_column
PARAM char \012ReplacementFor_c
RETURN return ReplacementFor_column; return ReplacementFor_column;
<operator>.logicalNot !ReplacementFor_count_bytes
IDENTIFIER ReplacementFor_column return ReplacementFor_column;
<operator>.equals ReplacementFor_c=='\b'
<operator>.postIncrement ReplacementFor_column++
<operator>.greaterThan ReplacementFor_column>(0xdfa+2805-0x18ef)
<operator>.postDecrement ReplacementFor_column--
<operator>.equals ReplacementFor_c=='\r'
<operator>.subtraction 0xdfa+2805-0x18ef
<operator>.assignment ReplacementFor_column=(0x1163+4174-0x21b1)
<operator>.addition 0xdfa+2805
<operator>.subtraction 0x1163+4174-0x21b1
<operator>.equals ReplacementFor_c=='\t'
<operator>.addition 0x1163+4174
<operator>.assignmentPlus ReplacementFor_column+=ReplacementFor_TAB_WIDTH-\012ReplacementFor_column%ReplacementFor_TAB_WIDTH
<operator>.postIncrement ReplacementFor_column++
<operator>.subtraction ReplacementFor_TAB_WIDTH-\012ReplacementFor_column%ReplacementFor_TAB_WIDTH
<operator>.modulo ReplacementFor_column%ReplacementFor_TAB_WIDTH
>>>PDG&22 0->2 0->3 0->5 0->6 0->7 0->8 0->9 0->10 0->11 0->12 0->14 0->15 0->16 0->17 0->18 0->19 0->20 0->21 2->8 2->9 2->19 2->21 3->1 3->7 4->1 5->1 5->1 5->7 5->8 6->4 7->1 7->1 7->9 7->11 7->11 7->12 7->14 8->1 8->1 8->6 9->1 9->1 9->1 9->6 9->10 9->10 10->1 10->1 10->6 11->1 11->1 11->13 11->15 11->16 11->16 11->17 12->1 12->9 12->9 13->1 13->1 13->1 13->6 15->1 15->13 15->13 16->1 16->1 16->18 16->19 16->20 16->21 18->1 18->1 18->1 18->6 19->1 19->1 19->6 20->1 20->1 20->18 20->18 21->18 21->20 21->20
>>>Token static size_t ReplacementFor_adjust_column ( size_t ReplacementFor_column , char ReplacementFor_c ) { if ( ! ReplacementFor_count_bytes ) { if ( ReplacementFor_c == ' \b ' ) { if ( ReplacementFor_column > ( 0xdfa + 2805 - 0x18ef ) ) ReplacementFor_column -- ; } else if ( ReplacementFor_c == ' \r ' ) ReplacementFor_column = ( 0x1163 + 4174 - 0x21b1 ) ; else if ( ReplacementFor_c == ' \t ' ) ReplacementFor_column += ReplacementFor_TAB_WIDTH - ReplacementFor_column % ReplacementFor_TAB_WIDTH ; else ReplacementFor_column ++ ; } else ReplacementFor_column ++ ; return ReplacementFor_column ; }
>>>Func
METHOD ReplacementFor_operand2sig
METHOD_RETURN int
PARAM char const*ReplacementFor_operand
PARAM char*\012ReplacementFor_signame
RETURN return\012 ReplacementFor_signum; return\012 ReplacementFor_signum;
ISDIGIT ISDIGIT(*\012ReplacementFor_operand)
<operator>.logicalOr ReplacementFor_signum<(0x1365+2782-0x1e43)||ReplacementFor_sig2str(\012ReplacementFor_signum,ReplacementFor_signame)!=(0x65+173-0x112)
IDENTIFIER ReplacementFor_signum return\012 ReplacementFor_signum;
<operator>.assignment l=(errno=\012(0x1a3+1000-0x58b) strtol(ReplacementFor_operand &ReplacementFor_endp \012(0x98d+1039-0xd92)))
<operator>.assignment i=l
<operator>.assignment ReplacementFor_signum=(ReplacementFor_operand==\012ReplacementFor_endp||*ReplacementFor_endp||errno||i!=l?-(0xb7d+514-0xd7e):i)
error error(\012(0x12e3+2527-0x1cc2) (0xa7a+1765-0x115f) ReplacementFor__(\012"\x25\x73\x3a\x20\x69\x6e\x76\x61\x6c\x69\x64\x20\x73\x69\x67\x6e\x61\x6c") \012ReplacementFor_quote(ReplacementFor_operand))
RETURN return-(0x3bf+3884-0x12ea); return-(0x3bf+3884-0x12ea);
<operator>.notEquals ReplacementFor_signum!=-(0xc2f+92-0xc8a)
<operator>.assignment *ReplacementFor_upcased=ReplacementFor_xstrdup(\012ReplacementFor_operand)
free free(ReplacementFor_upcased)
<operator>.lessThan ReplacementFor_signum<(0x1365+2782-0x1e43)
<operator>.notEquals ReplacementFor_sig2str(\012ReplacementFor_signum,ReplacementFor_signame)!=(0x65+173-0x112)
<operator>.minus -(0x3bf+3884-0x12ea)
<operator>.bracketedPrimary (errno=\012(0x1a3+1000-0x58b) strtol(ReplacementFor_operand &ReplacementFor_endp \012(0x98d+1039-0xd92)))
<operator>.conditional ReplacementFor_operand==\012ReplacementFor_endp||*ReplacementFor_endp||errno||i!=l?-(0xb7d+514-0xd7e):i
<operators>.assignmentAnd ReplacementFor_signum&=\012ReplacementFor_signum>=(0x9d8+1528-0xed1)?(0x19cc+1647-0x1f3c):\012(0x2d5+3738-0x10f0)
<operator>.postIncrement ReplacementFor_p++
<operator>.logicalNot !(\012ReplacementFor_str2sig(ReplacementFor_upcased,&ReplacementFor_signum)==\012(0x1a15+2969-0x25ae)||(ReplacementFor_upcased[(0x1028+5849-0x2701)]==\012((char)(0x257c+334-0x2677))&&ReplacementFor_upcased[(0x1fd+6059-0x19a7)]==\012((char)(0x1e1+9548-0x26e4))&&ReplacementFor_upcased[(0xdc4+6422-0x26d8)]==\012((char)(0x15f8+1872-0x1d01))&&ReplacementFor_str2sig(ReplacementFor_upcased+\012(0x15aa+326-0x16ed),&ReplacementFor_signum)==(0x72f+1854-0xe6d)))
<operator>.subtraction 0x1365+2782-0x1e43
ReplacementFor_sig2str ReplacementFor_sig2str(\012ReplacementFor_signum,ReplacementFor_signame)
<operator>.subtraction 0x65+173-0x112
<operator>.subtraction 0x12e3+2527-0x1cc2
<operator>.subtraction 0xa7a+1765-0x115f
ReplacementFor__ ReplacementFor__(\012"\x25\x73\x3a\x20\x69\x6e\x76\x61\x6c\x69\x64\x20\x73\x69\x67\x6e\x61\x6c")
ReplacementFor_quote ReplacementFor_quote(ReplacementFor_operand)
<operator>.expressionList errno=\012(0x1a3+1000-0x58b) strtol(ReplacementFor_operand &ReplacementFor_endp \012(0x98d+1039-0xd92))
<operator>.logicalOr ReplacementFor_operand==\012ReplacementFor_endp||*ReplacementFor_endp||errno||i!=l
<operator>.minus -(0xb7d+514-0xd7e)
<operator>.minus -(0xc2f+92-0xc8a)
ReplacementFor_xstrdup ReplacementFor_xstrdup(\012ReplacementFor_operand)
<operator>.assignment ReplacementFor_p=\012ReplacementFor_upcased
strchr strchr(\012"abcdefghijklmnopqrstuvwxyz",*ReplacementFor_p)
<operator>.assignment ReplacementFor_signum=-(0x154+9604-0x26d7)
<operator>.addition 0x1365+2782
<operator>.addition 0x65+173
<operator>.addition 0x12e3+2527
<operator>.addition 0xa7a+1765
<operator>.subtraction 0x3bf+3884-0x12ea
<operator>.assignment errno=\012(0x1a3+1000-0x58b)
strtol strtol(ReplacementFor_operand &ReplacementFor_endp \012(0x98d+1039-0xd92))
<operator>.logicalOr ReplacementFor_operand==\012ReplacementFor_endp||*ReplacementFor_endp||errno
<operator>.notEquals i!=l
<operator>.subtraction 0xb7d+514-0xd7e
<operator>.subtraction 0xc2f+92-0xc8a
<operator>.conditional ReplacementFor_signum>=(0x9d8+1528-0xed1)?(0x19cc+1647-0x1f3c):\012(0x2d5+3738-0x10f0)
<operator>.assignmentPlus *ReplacementFor_p+=\012((char)(0x22e6+936-0x264d))-((char)(0x56a+358-0x66f))
<operator>.logicalOr ReplacementFor_str2sig(ReplacementFor_upcased,&ReplacementFor_signum)==\012(0x1a15+2969-0x25ae)||(ReplacementFor_upcased[(0x1028+5849-0x2701)]==\012((char)(0x257c+334-0x2677))&&ReplacementFor_upcased[(0x1fd+6059-0x19a7)]==\012((char)(0x1e1+9548-0x26e4))&&ReplacementFor_upcased[(0xdc4+6422-0x26d8)]==\012((char)(0x15f8+1872-0x1d01))&&ReplacementFor_str2sig(ReplacementFor_upcased+\012(0x15aa+326-0x16ed),&ReplacementFor_signum)==(0x72f+1854-0xe6d))
<operator>.addition 0x3bf+3884
<operator>.subtraction 0x1a3+1000-0x58b
<operator>.subtraction 0x98d+1039-0xd92
<operator>.logicalOr ReplacementFor_operand==\012ReplacementFor_endp||*ReplacementFor_endp
<operator>.addition 0xb7d+514
<operator>.addition 0xc2f+92
<operator>.greaterEqualsThan ReplacementFor_signum>=(0x9d8+1528-0xed1)
<operator>.subtraction 0x19cc+1647-0x1f3c
<operator>.subtraction 0x2d5+3738-0x10f0
<operator>.equals ReplacementFor_str2sig(ReplacementFor_upcased,&ReplacementFor_signum)==\012(0x1a15+2969-0x25ae)
<operator>.logicalAnd ReplacementFor_upcased[(0x1028+5849-0x2701)]==\012((char)(0x257c+334-0x2677))&&ReplacementFor_upcased[(0x1fd+6059-0x19a7)]==\012((char)(0x1e1+9548-0x26e4))&&ReplacementFor_upcased[(0xdc4+6422-0x26d8)]==\012((char)(0x15f8+1872-0x1d01))&&ReplacementFor_str2sig(ReplacementFor_upcased+\012(0x15aa+326-0x16ed),&ReplacementFor_signum)==(0x72f+1854-0xe6d)
<operator>.minus -(0x154+9604-0x26d7)
<operator>.addition 0x1a3+1000
<operator>.addition 0x98d+1039
<operator>.equals ReplacementFor_operand==\012ReplacementFor_endp
<operator>.subtraction 0x9d8+1528-0xed1
<operator>.addition 0x19cc+1647
<operator>.addition 0x2d5+3738
<operator>.subtraction ((char)(0x22e6+936-0x264d))-((char)(0x56a+358-0x66f))
ReplacementFor_str2sig ReplacementFor_str2sig(ReplacementFor_upcased,&ReplacementFor_signum)
<operator>.subtraction 0x1a15+2969-0x25ae
<operator>.logicalAnd ReplacementFor_upcased[(0x1028+5849-0x2701)]==\012((char)(0x257c+334-0x2677))&&ReplacementFor_upcased[(0x1fd+6059-0x19a7)]==\012((char)(0x1e1+9548-0x26e4))&&ReplacementFor_upcased[(0xdc4+6422-0x26d8)]==\012((char)(0x15f8+1872-0x1d01))
<operator>.equals ReplacementFor_str2sig(ReplacementFor_upcased+\012(0x15aa+326-0x16ed),&ReplacementFor_signum)==(0x72f+1854-0xe6d)
<operator>.subtraction 0x154+9604-0x26d7
<operator>.addition 0x9d8+1528
<operator>.cast (char)(0x22e6+936-0x264d)
<operator>.cast (char)(0x56a+358-0x66f)
<operator>.addition 0x1a15+2969
<operator>.logicalAnd ReplacementFor_upcased[(0x1028+5849-0x2701)]==\012((char)(0x257c+334-0x2677))&&ReplacementFor_upcased[(0x1fd+6059-0x19a7)]==\012((char)(0x1e1+9548-0x26e4))
<operator>.equals ReplacementFor_upcased[(0xdc4+6422-0x26d8)]==\012((char)(0x15f8+1872-0x1d01))
ReplacementFor_str2sig ReplacementFor_str2sig(ReplacementFor_upcased+\012(0x15aa+326-0x16ed),&ReplacementFor_signum)
<operator>.subtraction 0x72f+1854-0xe6d
<operator>.addition 0x154+9604
<operator>.subtraction 0x22e6+936-0x264d
<operator>.subtraction 0x56a+358-0x66f
<operator>.equals ReplacementFor_upcased[(0x1028+5849-0x2701)]==\012((char)(0x257c+334-0x2677))
<operator>.equals ReplacementFor_upcased[(0x1fd+6059-0x19a7)]==\012((char)(0x1e1+9548-0x26e4))
<operator>.cast (char)(0x15f8+1872-0x1d01)
<operator>.addition ReplacementFor_upcased+\012(0x15aa+326-0x16ed)
<operator>.addition 0x72f+1854
<operator>.addition 0x22e6+936
<operator>.addition 0x56a+358
<operator>.cast (char)(0x257c+334-0x2677)
<operator>.cast (char)(0x1e1+9548-0x26e4)
<operator>.subtraction 0xdc4+6422-0x26d8
<operator>.subtraction 0x15f8+1872-0x1d01
<operator>.subtraction 0x15aa+326-0x16ed
<operator>.subtraction 0x1028+5849-0x2701
<operator>.subtraction 0x257c+334-0x2677
<operator>.subtraction 0x1fd+6059-0x19a7
<operator>.subtraction 0x1e1+9548-0x26e4
<operator>.addition 0xdc4+6422
<operator>.addition 0x15f8+1872
<operator>.addition 0x15aa+326
<operator>.addition 0x1028+5849
<operator>.addition 0x257c+334
<operator>.addition 0x1fd+6059
<operator>.addition 0x1e1+9548
<operator>.indirection *ReplacementFor_p
<operator>.addressOf &ReplacementFor_endp
<operator>.indirection *ReplacementFor_p
<operator>.indirection *ReplacementFor_endp
<operator>.indirection *ReplacementFor_p
<operator>.addressOf &ReplacementFor_signum
UNKNOWN char char
UNKNOWN char char
<operator>.indirectIndexAccess ReplacementFor_upcased[(0xdc4+6422-0x26d8)]
<operator>.addressOf &ReplacementFor_signum
<operator>.indirectIndexAccess ReplacementFor_upcased[(0x1028+5849-0x2701)]
<operator>.indirectIndexAccess ReplacementFor_upcased[(0x1fd+6059-0x19a7)]
UNKNOWN char char
UNKNOWN char char
UNKNOWN char char
>>>PDG&126 0->2 0->3 0->7 0->9 0->10 0->13 0->15 0->16 0->20 0->21 0->22 0->24 0->25 0->26 0->27 0->28 0->29 0->30 0->35 0->36 0->37 0->39 0->40 0->41 0->42 0->43 0->45 0->46 0->47 0->48 0->49 0->53 0->54 0->55 0->57 0->58 0->59 0->60 0->61 0->65 0->66 0->67 0->68 0->69 0->70 0->72 0->73 0->76 0->77 0->80 0->83 0->84 0->85 0->86 0->87 0->91 0->92 0->93 0->94 0->97 0->98 0->99 0->100 0->101 0->102 0->103 0->104 0->105 0->106 0->107 0->108 0->109 0->110 2->35 2->45 3->1 3->25 4->1 5->1 5->1 5->8 5->9 5->10 5->13 5->14 5->15 5->19 5->20 5->23 5->30 5->31 5->32 5->34 5->35 5->35 5->36 5->44 5->45 5->45 5->46 5->49 5->52 5->54 5->55 5->56 5->58 5->62 5->65 5->66 5->67 5->67 5->72 5->73 5->80 5->111 5->112 5->116 6->1 6->1 6->1 6->4 6->11 6->12 6->18 6->27 6->28 6->29 6->30 6->41 6->42 6->43 6->53 7->4 8->1 8->1 8->9 8->47 9->1 9->1 9->10 9->20 9->47 10->1 10->1 10->13 11->1 11->1 11->1 11->1 11->1 12->1 13->1 13->1 13->16 13->21 13->50 13->59 13->59 13->68 13->77 14->1 14->1 14->36 14->72 15->1 16->1 16->1 16->6 16->6 16->7 16->17 16->25 16->25 16->26 16->40 17->1 17->1 17->6 17->6 18->1 18->1 18->12 19->1 19->8 20->1 20->1 20->1 21->1 21->16 22->1 22->1 23->1 23->1 23->38 23->64 23->76 23->85 24->1 24->16 24->16 25->1 25->1 25->7 25->17 25->17 26->1 26->17 26->17 27->1 27->11 27->11 28->1 28->11 28->11 29->11 30->1 30->11 31->1 31->1 31->19 31->19 32->1 32->1 32->33 32->48 32->57 33->1 33->10 33->20 34->1 34->13 35->14 35->30 36->1 36->1 36->22 37->1 37->1 37->22 37->51 37->51 37->71 37->78 37->79 37->86 37->87 37->93 37->94 37->115 37->117 37->118 38->1 38->1 38->16 43->1 43->18 43->18 44->1 44->31 44->46 45->1 45->1 45->31 45->31 45->31 45->67 45->67 46->1 46->1 46->32 46->32 46->47 47->1 47->10 47->20 47->32 47->32 48->1 48->33 48->33 49->1 49->34 49->34 50->1 50->1 50->1 51->1 51->1 51->1 51->22 51->37 52->1 52->1 52->23 52->23 54->1 54->31 54->31 54->44 54->44 55->1 55->45 55->45 56->1 56->1 56->46 56->46 59->1 59->21 59->60 59->61 59->69 59->70 60->1 60->21 60->21 60->50 60->50 61->1 61->21 61->21 61->50 61->50 62->1 62->1 62->52 62->52 62->63 62->74 62->81 62->88 62->95 62->100 62->101 62->107 62->108 62->121 62->124 63->1 63->1 63->52 63->52 64->1 64->38 67->1 67->30 67->56 67->56 67->114 68->1 68->59 68->59 71->1 71->1 71->51 71->51 72->1 72->7 72->15 72->16 72->25 72->62 72->62 72->82 72->83 72->83 72->88 72->89 72->91 73->1 73->62 73->62 74->1 74->1 74->63 74->63 74->75 74->83 74->84 74->91 74->92 74->99 74->106 74->120 75->1 75->1 75->63 75->63 76->1 76->64 76->64 78->1 79->1 81->1 81->1 81->74 81->74 81->82 81->90 81->97 81->98 81->104 81->105 81->119 81->123 82->1 82->1 82->15 82->74 82->74 82->83 82->91 83->1 83->1 83->7 83->16 83->25 83->75 83->75 84->1 84->75 84->75 86->1 86->71 86->71 86->78 86->78 87->1 87->71 87->71 87->79 87->79 88->1 88->1 88->15 88->81 88->81 88->83 88->89 88->91 88->96 88->102 88->103 88->109 88->110 88->122 88->125 89->1 89->1 89->15 89->81 89->81 89->83 89->91 90->1 91->1 95->1 96->1 97->1 98->1 98->82 98->82 98->90 98->90 99->1 99->83 99->83 99->91 99->91 100->1 101->1 101->88 101->88 101->95 101->95 102->1 103->1 103->89 103->89 103->96 103->96 111->22 111->37 111->111 111->113
>>>Token extern int ReplacementFor_operand2sig ( char const * ReplacementFor_operand , char * ReplacementFor_signame ) { int ReplacementFor_signum ; if ( ISDIGIT ( * ReplacementFor_operand ) ) { char * ReplacementFor_endp ; long int l = ( errno = ( 0x1a3 + 1000 - 0x58b ) , strtol ( ReplacementFor_operand , & ReplacementFor_endp , ( 0x98d + 1039 - 0xd92 ) ) ) ; int i = l ; ReplacementFor_signum = ( ReplacementFor_operand == ReplacementFor_endp || * ReplacementFor_endp || errno || i != l ? - ( 0xb7d + 514 - 0xd7e ) : i ) ; if ( ReplacementFor_signum != - ( 0xc2f + 92 - 0xc8a ) ) { ReplacementFor_signum &= ReplacementFor_signum >= ( 0x9d8 + 1528 - 0xed1 ) ? ( 0x19cc + 1647 - 0x1f3c ) : ( 0x2d5 + 3738 - 0x10f0 ) ; } } else { char * ReplacementFor_upcased = ReplacementFor_xstrdup ( ReplacementFor_operand ) ; char * ReplacementFor_p ; for ( ReplacementFor_p = ReplacementFor_upcased ; * ReplacementFor_p ; ReplacementFor_p ++ ) if ( strchr ( " " , * ReplacementFor_p ) ) * ReplacementFor_p += ( ( char ) ( 0x22e6 + 936 - 0x264d ) ) - ( ( char ) ( 0x56a + 358 - 0x66f ) ) ; if ( ! ( ReplacementFor_str2sig ( ReplacementFor_upcased , & ReplacementFor_signum ) == ( 0x1a15 + 2969 - 0x25ae ) || ( ReplacementFor_upcased [ ( 0x1028 + 5849 - 0x2701 ) ] == ( ( char ) ( 0x257c + 334 - 0x2677 ) ) && ReplacementFor_upcased [ ( 0x1fd + 6059 - 0x19a7 ) ] == ( ( char ) ( 0x1e1 + 9548 - 0x26e4 ) ) && ReplacementFor_upcased [ ( 0xdc4 + 6422 - 0x26d8 ) ] == ( ( char ) ( 0x15f8 + 1872 - 0x1d01 ) ) && ReplacementFor_str2sig ( ReplacementFor_upcased + ( 0x15aa + 326 - 0x16ed ) , & ReplacementFor_signum ) == ( 0x72f + 1854 - 0xe6d ) ) ) ) ReplacementFor_signum = - ( 0x154 + 9604 - 0x26d7 ) ; free ( ReplacementFor_upcased ) ; } if ( ReplacementFor_signum < ( 0x1365 + 2782 - 0x1e43 ) || ReplacementFor_sig2str ( ReplacementFor_signum , ReplacementFor_signame ) != ( 0x65 + 173 - 0x112 ) ) { error ( ( 0x12e3 + 2527 - 0x1cc2 ) , ( 0xa7a + 1765 - 0x115f ) , ReplacementFor__ ( " \x25 \x73 \x3a \x20 \x69 \x6e \x76 \x61 \x6c \x69 \x64 \x20 \x73 \x69 \x67 \x6e \x61 \x6c " ) , ReplacementFor_quote ( ReplacementFor_operand ) ) ; return - ( 0x3bf + 3884 - 0x12ea ) ; } return ReplacementFor_signum ; }
>>>Func
METHOD ReplacementFor_fnlogfnname
METHOD_RETURN void
PARAM char*ReplacementFor_fnname
PARAM int \012ReplacementFor_direction
<operator>.assignment ReplacementFor_fplogfile=fopen(ReplacementFor_LOGFILE,\012"\x61")
fclose fclose(ReplacementFor_fplogfile)
IDENTIFIER ReplacementFor_ndif <empty>
<operator>.equals ReplacementFor_direction==(0xae0+3199-0x175e)
fopen fopen(ReplacementFor_LOGFILE,\012"\x61")
fprintf fprintf(\012ReplacementFor_fplogfile,"\x45\x6e\x74\x72\x79\x20\x3a\x3a\x20\x25\x73" "\n",\012ReplacementFor_fnname)
<operator>.subtraction 0xae0+3199-0x175e
fprintf fprintf(ReplacementFor_fplogfile,\012"\x45\x78\x69\x74\x20\x20\x3a\x3a\x20\x25\x73" "\n",ReplacementFor_fnname)
<operator>.addition 0xae0+3199
>>>PDG&13 0->2 0->3 0->5 0->6 0->7 0->8 0->9 0->10 0->11 0->12 2->9 2->11 3->7 4->1 4->1 4->9 4->11 5->1 5->1 7->1 7->1 7->1 7->9 7->11 8->1 8->4 8->4 9->1 9->1 9->5 10->1 10->7 10->7 11->1 11->1 11->5
>>>Token void ReplacementFor_fnlogfnname ( char * ReplacementFor_fnname , int ReplacementFor_direction ) { ReplacementFor_ndef ReplacementFor_LBL_RUNNING  FILE * ReplacementFor_fplogfile ; ReplacementFor_fplogfile = fopen ( ReplacementFor_LOGFILE , " \x61 " ) ; if ( ReplacementFor_direction == ( 0xae0 + 3199 - 0x175e ) ) { fprintf ( ReplacementFor_fplogfile , " \x45 \x6e \x74 \x72 \x79 \x20 \x3a \x3a \x20 \x25 \x73 " " \n " , ReplacementFor_fnname ) ; } else { fprintf ( ReplacementFor_fplogfile , " \x45 \x78 \x69 \x74 \x20 \x20 \x3a \x3a \x20 \x25 \x73 " " \n " , ReplacementFor_fnname ) ; } fclose ( ReplacementFor_fplogfile ) ; ReplacementFor_ndif  }
>>>Func
METHOD ReplacementFor_get_val_tab_clear
METHOD_RETURN int
PARAM void*ReplacementFor_a
PARAM void*ReplacementFor_b
<operator>.assignment ReplacementFor_i1=ReplacementFor_get_indice(ReplacementFor_a)
<operator>.assignment ReplacementFor_i2=ReplacementFor_get_indice(ReplacementFor_b)
RETURN return \012ReplacementFor_tab_clear[(0x96f+6987-0x24a0)*ReplacementFor_i1+ReplacementFor_i2\012]; return \012ReplacementFor_tab_clear[(0x96f+6987-0x24a0)*ReplacementFor_i1+ReplacementFor_i2\012];
ReplacementFor_get_indice ReplacementFor_get_indice(ReplacementFor_a)
ReplacementFor_get_indice ReplacementFor_get_indice(ReplacementFor_b)
<operator>.addition (0x96f+6987-0x24a0)*ReplacementFor_i1+ReplacementFor_i2
<operator>.multiplication (0x96f+6987-0x24a0)*ReplacementFor_i1
<operator>.subtraction 0x96f+6987-0x24a0
<operator>.addition 0x96f+6987
>>>PDG&13 0->2 0->3 0->6 0->7 0->8 0->9 0->10 0->11 0->12 2->7 3->8 4->1 4->1 4->10 5->1 5->1 5->9 6->1 7->1 7->4 8->1 8->5 9->1 9->1 10->1 10->1 10->9 10->9 11->1 11->10 11->10
>>>Token int ReplacementFor_get_val_tab_clear ( void * ReplacementFor_a , void * ReplacementFor_b ) { int ReplacementFor_i1 = ReplacementFor_get_indice ( ReplacementFor_a ) ; int ReplacementFor_i2 = ReplacementFor_get_indice ( ReplacementFor_b ) ; return ReplacementFor_tab_clear [ ( 0x96f + 6987 - 0x24a0 ) * ReplacementFor_i1 + ReplacementFor_i2 ] ; }
>>>Func
METHOD main
METHOD_RETURN ANY
<operator>.assignment i=(0x1215+2738-0x1cc7)
<operator>.assignment ReplacementFor_j=(0x8df+5316-0x1da3)
<operator>.assignment ReplacementFor_skip_flg=\012ReplacementFor_DISABLE
<operator>.assignment ReplacementFor_te=(0xf62+658-0x11f4)
<operator>.assignment ReplacementFor_temp=\012(0x994+6600-0x235c)
<operator>.assignment ReplacementFor_fpin=fopen(\012"\x2e\x2e" "\\" "\x42\x2d\x73\x6d\x61\x6c\x6c\x2d\x61\x74\x74\x65\x6d\x70\x74\x33\x2e\x69\x6e"\012,"\x72")
fscanf fscanf(ReplacementFor_fpin,"\x25\x64",&T)
<operator>.assignment ReplacementFor_fpout=fopen(\012"\x2e\x2e" "\\" "\x4d\x61\x67\x69\x6b\x61\x5f\x6f\x75\x74\x2e\x74\x78\x74",\012"\x77")
fclose fclose(\012ReplacementFor_fpin)
fclose fclose(ReplacementFor_fpout)
<operator>.equals ReplacementFor_fpin==NULL
<operator>.lessEqualsThan ReplacementFor_cur_te<=T
<operator>.subtraction 0x1215+2738-0x1cc7
<operator>.subtraction 0x8df+5316-0x1da3
<operator>.subtraction 0xf62+658-0x11f4
<operator>.subtraction 0x994+6600-0x235c
fopen fopen(\012"\x2e\x2e" "\\" "\x42\x2d\x73\x6d\x61\x6c\x6c\x2d\x61\x74\x74\x65\x6d\x70\x74\x33\x2e\x69\x6e"\012,"\x72")
printf printf(\012"\x49\x6e\x70\x75\x74\x20\x66\x69\x6c\x65\x20\x63\x6f\x75\x6c\x64\x6e\x74\x20\x62\x65\x20\x6f\x70\x65\x6e\x65\x64"\012)
exit exit((0x2b7+6882-0x1d99))
fopen fopen(\012"\x2e\x2e" "\\" "\x4d\x61\x67\x69\x6b\x61\x5f\x6f\x75\x74\x2e\x74\x78\x74",\012"\x77")
<operator>.assignment i=(0x119+5029-0x14be)
fscanf fscanf(\012ReplacementFor_fpin,"\x25\x64",&ReplacementFor_C)
fscanf fscanf(ReplacementFor_fpin,"\x25\x64",&\012ReplacementFor_D)
fscanf fscanf(ReplacementFor_fpin,"\x25\x64",&\012ReplacementFor_N)
<operator>.assignment ReplacementFor_te=(0x86+7291-0x1d00)
<operator>.assignment ReplacementFor_res[i]=ReplacementFor_alpha[(0x20b+6740-0x1c5f)]
<operator>.postIncrement i++
fprintf fprintf(\012ReplacementFor_fpout,"\x43\x61\x73\x65\x20\x23\x25\x64\x3a\x20\x5b",\012ReplacementFor_cur_te)
<operator>.assignment ReplacementFor_j=(0x139+6708-0x1b6d)
fprintf fprintf(ReplacementFor_fpout,"\x5d" "\n")
<operator>.postIncrement ReplacementFor_cur_te++
<operator>.addition 0x1215+2738
<operator>.addition 0x8df+5316
<operator>.addition 0xf62+658
<operator>.addition 0x994+6600
<operator>.lessThan ReplacementFor_j<ReplacementFor_C
<operator>.postIncrement ReplacementFor_j++
<operator>.lessThan ReplacementFor_j<\012ReplacementFor_D
<operator>.postIncrement ReplacementFor_j++
<operator>.lessThan ReplacementFor_j<\012ReplacementFor_N
<operator>.postIncrement ReplacementFor_j++
<operator>.lessEqualsThan ReplacementFor_te<=(ReplacementFor_N)
<operator>.lessThan ReplacementFor_j<i
<operator>.lessThan ReplacementFor_j<ReplacementFor_N
<operator>.postIncrement ReplacementFor_j++
<operator>.subtraction 0x2b7+6882-0x1d99
<operator>.subtraction 0x119+5029-0x14be
<operator>.assignment ReplacementFor_j=\012(0x62a+5832-0x1cf2)
fscanf fscanf\012(ReplacementFor_fpin,"\x25\x63",&ReplacementFor_co[ReplacementFor_j].\012ReplacementFor_b1)
fscanf fscanf(\012ReplacementFor_fpin,"\x25\x63",&ReplacementFor_co[ReplacementFor_j].\012ReplacementFor_b2)
fscanf fscanf(ReplacementFor_fpin,"\x25\x63",&ReplacementFor_co[\012ReplacementFor_j].ReplacementFor_fin)
<operator>.assignment ReplacementFor_j=(0xcb0+4808-0x1f78)
fscanf fscanf(ReplacementFor_fpin,"\x25\x63",&\012ReplacementFor_de[ReplacementFor_j].ReplacementFor_d1)
fscanf fscanf(ReplacementFor_fpin,"\x25\x63",&ReplacementFor_de[\012ReplacementFor_j].ReplacementFor_d2)
<operator>.assignment ReplacementFor_de[ReplacementFor_j].\012ReplacementFor_ind=(0xe2f+2035-0x1622)
<operator>.assignment ReplacementFor_j=(0x104+4079-0x10f3)
fscanf fscanf(ReplacementFor_fpin,"\x25\x63",&\012ReplacementFor_alpha[ReplacementFor_j])
<operator>.subtraction 0x86+7291-0x1d00
<operator>.postIncrement ReplacementFor_te++
<operator>.subtraction 0x139+6708-0x1b6d
<operator>.assignment ReplacementFor_j=(0x1999+2160-0x2209)
<operator>.assignment ReplacementFor_res[ReplacementFor_j]='\0'
<operator>.assignment ReplacementFor_alpha[ReplacementFor_j]='\0'
<operator>.addition 0x2b7+6882
<operator>.addition 0x119+5029
<operator>.equals ReplacementFor_co[ReplacementFor_j].ReplacementFor_b1==\012((char)(0x10a+9696-0x26ca))
<operator>.equals ReplacementFor_de[\012ReplacementFor_j].ReplacementFor_d1==((char)(0x1ecb+132-0x1f2f))
<operator>.equals ReplacementFor_alpha[ReplacementFor_j\012]==((char)(0x1d98+433-0x1f29))
<operator>.addition 0x86+7291
<operator>.subtraction 0x20b+6740-0x1c5f
<operator>.lessThan ReplacementFor_j<ReplacementFor_D
<operator>.postIncrement ReplacementFor_j++
<operator>.equals ReplacementFor_te==ReplacementFor_N
<operator>.lessThan ReplacementFor_j<ReplacementFor_C
<operator>.postIncrement ReplacementFor_j++
<operator>.equals ReplacementFor_skip_flg==ReplacementFor_DISABLE
<operator>.addition 0x139+6708
<operator>.greaterThan i>(0x7f0+7403-0x24da)
<operator>.subtraction 0x62a+5832-0x1cf2
fscanf fscanf(ReplacementFor_fpin,"\x25\x63",&\012ReplacementFor_co[ReplacementFor_j].ReplacementFor_b1)
<operator>.subtraction 0xcb0+4808-0x1f78
fscanf fscanf(\012ReplacementFor_fpin,"\x25\x63",&ReplacementFor_de[ReplacementFor_j].\012ReplacementFor_d1)
<operator>.subtraction 0xe2f+2035-0x1622
<operator>.subtraction 0x104+4079-0x10f3
fscanf fscanf(ReplacementFor_fpin,"\x25\x63",&\012ReplacementFor_alpha[ReplacementFor_j])
<operator>.addition 0x20b+6740
<operator>.assignment ReplacementFor_j=(0x16c0+451-0x1883)
<operator>.assignment ReplacementFor_j=\012(0x55b+1754-0xc35)
<operator>.assignment ReplacementFor_res[i]=ReplacementFor_alpha[ReplacementFor_te]
<operator>.postIncrement i++
fprintf fprintf(ReplacementFor_fpout,\012"\x25\x63\x2c\x20",ReplacementFor_res[ReplacementFor_j])
<operator>.postIncrement ReplacementFor_j++
<operator>.subtraction 0x1999+2160-0x2209
<operator>.addition 0x62a+5832
<operator>.cast (char)(0x10a+9696-0x26ca)
<operator>.addition 0xcb0+4808
<operator>.cast (char)(0x1ecb+132-0x1f2f)
<operator>.addition 0xe2f+2035
<operator>.addition 0x104+4079
<operator>.cast (char)(0x1d98+433-0x1f29)
<operator>.equals ReplacementFor_res[i-\012(0x1a9+2-0x1aa)]==ReplacementFor_de[ReplacementFor_j].ReplacementFor_d1
<operator>.equals ReplacementFor_res\012[i-(0x168b+1866-0x1dd4)]==ReplacementFor_de[ReplacementFor_j].ReplacementFor_d2
<operator>.equals ReplacementFor_alpha[ReplacementFor_te]==ReplacementFor_co[ReplacementFor_j].\012ReplacementFor_b1
<operator>.equals ReplacementFor_alpha[\012ReplacementFor_te]==ReplacementFor_co[ReplacementFor_j].ReplacementFor_b2
<operator>.assignment ReplacementFor_skip_flg=ReplacementFor_DISABLE
<operator>.subtraction 0x7f0+7403-0x24da
<operator>.equals ReplacementFor_j==i-(0x828+5483-0x1d92)
fprintf fprintf(\012ReplacementFor_fpout,"\x25\x63",ReplacementFor_res[ReplacementFor_j])
<operator>.postIncrement ReplacementFor_j++
<operator>.addition 0x1999+2160
<operator>.subtraction 0x10a+9696-0x26ca
<operator>.subtraction 0x1ecb+132-0x1f2f
<operator>.subtraction 0x1d98+433-0x1f29
<operator>.subtraction 0x16c0+451-0x1883
<operator>.subtraction 0x55b+1754-0xc35
<operator>.addition 0x7f0+7403
fprintf fprintf(ReplacementFor_fpout,"\x25\x63"\012,ReplacementFor_res[ReplacementFor_j])
<operator>.postIncrement ReplacementFor_j++
<operator>.addition 0x10a+9696
<operator>.addition 0x1ecb+132
<operator>.addition 0x1d98+433
<operator>.addition 0x16c0+451
<operator>.equals ReplacementFor_de[ReplacementFor_j].ReplacementFor_ind==(0x1580+2091-0x1dab)
<operator>.equals ReplacementFor_de[ReplacementFor_j].ReplacementFor_ind==(0x51b+6373-0x1e00)
<operator>.addition 0x55b+1754
<operator>.equals ReplacementFor_res[i-(0x740+5941-0x1e74)]==\012ReplacementFor_co[ReplacementFor_j].ReplacementFor_b2
<operator>.equals ReplacementFor_res[i-(0x6cf+8250-0x2708)]==ReplacementFor_co[ReplacementFor_j].\012ReplacementFor_b1
<operator>.subtraction i-(0x828+5483-0x1d92)
<operator>.subtraction i-\012(0x1a9+2-0x1aa)
<operator>.assignment ReplacementFor_de[ReplacementFor_j].ReplacementFor_loc[ReplacementFor_de[\012ReplacementFor_j].ReplacementFor_ind]=i-(0xe14+1017-0x120c)
<operator>.assignment ReplacementFor_de[\012ReplacementFor_j].ReplacementFor_c2d[ReplacementFor_de[ReplacementFor_j].\012ReplacementFor_ind]=ReplacementFor_de[ReplacementFor_j].ReplacementFor_d2
<operator>.postIncrement ReplacementFor_de[ReplacementFor_j].ReplacementFor_ind++
<operator>.subtraction i-(0x168b+1866-0x1dd4)
<operator>.assignment ReplacementFor_de[ReplacementFor_j].ReplacementFor_loc[(0x6a+2348-0x996)]=i-\012(0x3b9+5585-0x1989)
<operator>.assignment ReplacementFor_de[ReplacementFor_j].ReplacementFor_c2d[\012(0x899+2765-0x1366)]=ReplacementFor_de[ReplacementFor_j].ReplacementFor_d1
<operator>.postIncrement ReplacementFor_de[ReplacementFor_j].ReplacementFor_ind++
<operator>.assignment ReplacementFor_res[i-\012(0x126f+4737-0x24ef)]=ReplacementFor_co[ReplacementFor_j].ReplacementFor_fin
<operator>.assignment ReplacementFor_skip_flg=ReplacementFor_ENABLE
<operator>.assignment ReplacementFor_res[i-(0x8e3+6850-0x23a4)]=ReplacementFor_co[\012ReplacementFor_j].ReplacementFor_fin
<operator>.assignment ReplacementFor_skip_flg=\012ReplacementFor_ENABLE
<operator>.subtraction 0x828+5483-0x1d92
<operator>.subtraction 0x1a9+2-0x1aa
<operator>.subtraction 0x1580+2091-0x1dab
<operator>.subtraction 0x168b+1866-0x1dd4
<operator>.subtraction 0x51b+6373-0x1e00
<operator>.addition 0x828+5483
<operator>.addition 0x1a9+2
<operator>.addition 0x1580+2091
<operator>.subtraction i-(0xe14+1017-0x120c)
<operator>.equals ReplacementFor_de[ReplacementFor_j].ReplacementFor_c2d[ReplacementFor_de[\012ReplacementFor_j].ReplacementFor_ind-(0x3d0+8560-0x253f)]==ReplacementFor_de[\012ReplacementFor_j].ReplacementFor_d1
<operator>.addition 0x168b+1866
<operator>.addition 0x51b+6373
<operator>.subtraction i-\012(0x3b9+5585-0x1989)
<operator>.equals ReplacementFor_de[ReplacementFor_j].ReplacementFor_c2d[ReplacementFor_de[\012ReplacementFor_j].ReplacementFor_ind-(0x87d+5156-0x1ca0)]==ReplacementFor_de[\012ReplacementFor_j].ReplacementFor_d2
<operator>.subtraction i-(0x740+5941-0x1e74)
<operator>.subtraction i-(0x6cf+8250-0x2708)
<operator>.subtraction 0xe14+1017-0x120c
<operator>.subtraction 0x6a+2348-0x996
<operator>.subtraction 0x3b9+5585-0x1989
<operator>.subtraction 0x899+2765-0x1366
<operator>.subtraction 0x740+5941-0x1e74
<operator>.subtraction i-\012(0x126f+4737-0x24ef)
<operator>.subtraction 0x6cf+8250-0x2708
<operator>.subtraction i-(0x8e3+6850-0x23a4)
<operator>.addition 0xe14+1017
<operator>.notEquals ReplacementFor_res[ReplacementFor_de[\012ReplacementFor_j].ReplacementFor_loc[ReplacementFor_de[ReplacementFor_j].\012ReplacementFor_ind-(0x1015+4898-0x2336)]]!=ReplacementFor_de[ReplacementFor_j].\012ReplacementFor_d2
<operator>.addition 0x6a+2348
<operator>.addition 0x3b9+5585
<operator>.addition 0x899+2765
<operator>.notEquals ReplacementFor_res[ReplacementFor_de[\012ReplacementFor_j].ReplacementFor_loc[ReplacementFor_de[ReplacementFor_j].\012ReplacementFor_ind-(0x40+8203-0x204a)]]!=ReplacementFor_de[ReplacementFor_j].\012ReplacementFor_d1
<operator>.addition 0x740+5941
<operator>.subtraction 0x126f+4737-0x24ef
<operator>.addition 0x6cf+8250
<operator>.subtraction 0x8e3+6850-0x23a4
<operator>.subtraction ReplacementFor_de[\012ReplacementFor_j].ReplacementFor_ind-(0x3d0+8560-0x253f)
<operator>.postDecrement ReplacementFor_de[ReplacementFor_j].ReplacementFor_ind--
<operator>.equals ReplacementFor_de[ReplacementFor_j].\012ReplacementFor_c2d[ReplacementFor_de[ReplacementFor_j].ReplacementFor_ind-\012(0x1660+745-0x1948)]==ReplacementFor_de[ReplacementFor_j].ReplacementFor_d2
<operator>.subtraction ReplacementFor_de[\012ReplacementFor_j].ReplacementFor_ind-(0x87d+5156-0x1ca0)
<operator>.postDecrement ReplacementFor_de[ReplacementFor_j].ReplacementFor_ind--
<operator>.equals ReplacementFor_de[\012ReplacementFor_j].ReplacementFor_c2d[ReplacementFor_de[ReplacementFor_j].\012ReplacementFor_ind-(0xf07+545-0x1127)]==ReplacementFor_de[ReplacementFor_j].\012ReplacementFor_d1
<operator>.addition 0x126f+4737
<operator>.addition 0x8e3+6850
<operator>.subtraction 0x3d0+8560-0x253f
<operator>.greaterEqualsThan ReplacementFor_de[ReplacementFor_j].ReplacementFor_ind>=\012(0x20d7+1145-0x2550)
<operator>.lessThan ReplacementFor_de[ReplacementFor_j].\012ReplacementFor_ind<(0x8+2611-0xa3b)
<operator>.postDecrement ReplacementFor_de[ReplacementFor_j].ReplacementFor_ind--
<operator>.assignment ReplacementFor_de[\012ReplacementFor_j].ReplacementFor_c2d[ReplacementFor_de[ReplacementFor_j].\012ReplacementFor_ind]='\0'
<operator>.assignment i=ReplacementFor_de[\012ReplacementFor_j].ReplacementFor_loc[ReplacementFor_de[ReplacementFor_j].\012ReplacementFor_ind]
<operator>.assignment ReplacementFor_de[ReplacementFor_j].ReplacementFor_loc[ReplacementFor_de[\012ReplacementFor_j].ReplacementFor_ind]=i-(0xc29+1230-0x10f6)
<operator>.assignment ReplacementFor_de[\012ReplacementFor_j].ReplacementFor_c2d[ReplacementFor_de[ReplacementFor_j].\012ReplacementFor_ind]=ReplacementFor_de[ReplacementFor_j].ReplacementFor_d2
<operator>.postIncrement ReplacementFor_de[ReplacementFor_j].ReplacementFor_ind++
<operator>.subtraction 0x87d+5156-0x1ca0
<operator>.greaterEqualsThan ReplacementFor_de[ReplacementFor_j].ReplacementFor_ind>=\012(0xfb5+4019-0x1f68)
<operator>.lessThan ReplacementFor_de[\012ReplacementFor_j].ReplacementFor_ind<(0x604+3510-0x13ba)
<operator>.postDecrement ReplacementFor_de[ReplacementFor_j].\012ReplacementFor_ind--
<operator>.assignment ReplacementFor_de[ReplacementFor_j].ReplacementFor_c2d[\012ReplacementFor_de[ReplacementFor_j].ReplacementFor_ind]='\0'
<operator>.assignment i=\012ReplacementFor_de[ReplacementFor_j].ReplacementFor_loc[ReplacementFor_de[\012ReplacementFor_j].ReplacementFor_ind]
<operator>.assignment ReplacementFor_de[ReplacementFor_j].ReplacementFor_loc[\012ReplacementFor_de[ReplacementFor_j].ReplacementFor_ind]=i-(0x873+3272-0x153a)
<operator>.assignment ReplacementFor_de[ReplacementFor_j].ReplacementFor_c2d[ReplacementFor_de[\012ReplacementFor_j].ReplacementFor_ind]=ReplacementFor_de[ReplacementFor_j].\012ReplacementFor_d1
<operator>.postIncrement ReplacementFor_de[ReplacementFor_j].ReplacementFor_ind++
<operator>.addition 0x3d0+8560
<operator>.postIncrement ReplacementFor_de[ReplacementFor_j].\012ReplacementFor_ind++
<operator>.assignment ReplacementFor_de[ReplacementFor_j].ReplacementFor_c2d[\012ReplacementFor_de[ReplacementFor_j].ReplacementFor_ind]=ReplacementFor_de[\012ReplacementFor_j].ReplacementFor_d2
<operator>.assignment ReplacementFor_de[ReplacementFor_j].\012ReplacementFor_loc[ReplacementFor_de[ReplacementFor_j].ReplacementFor_ind]=i-\012(0x1225+1241-0x16fd)
<operator>.postIncrement ReplacementFor_de[ReplacementFor_j].ReplacementFor_ind++
<operator>.lessThan ReplacementFor_temp<i
<operator>.postIncrement ReplacementFor_temp++
<operator>.addition 0x87d+5156
<operator>.postIncrement ReplacementFor_de[\012ReplacementFor_j].ReplacementFor_ind++
<operator>.assignment ReplacementFor_de[ReplacementFor_j].\012ReplacementFor_c2d[ReplacementFor_de[ReplacementFor_j].ReplacementFor_ind]=\012ReplacementFor_de[ReplacementFor_j].ReplacementFor_d1
<operator>.assignment ReplacementFor_de[\012ReplacementFor_j].ReplacementFor_loc[ReplacementFor_de[ReplacementFor_j].\012ReplacementFor_ind]=i-(0x1660+932-0x1a03)
<operator>.postIncrement ReplacementFor_de[ReplacementFor_j].\012ReplacementFor_ind++
<operator>.lessThan ReplacementFor_temp<i
<operator>.postIncrement ReplacementFor_temp++
<operator>.subtraction ReplacementFor_de[ReplacementFor_j].\012ReplacementFor_ind-(0x1015+4898-0x2336)
<operator>.subtraction 0x20d7+1145-0x2550
<operator>.logicalAnd (ReplacementFor_de[ReplacementFor_j].ReplacementFor_c2d\012[ReplacementFor_de[ReplacementFor_j].ReplacementFor_ind-(0x914+961-0xcd4)]==\012ReplacementFor_de[ReplacementFor_j].ReplacementFor_d1)&&(ReplacementFor_res[\012ReplacementFor_de[ReplacementFor_j].ReplacementFor_loc[ReplacementFor_de[\012ReplacementFor_j].ReplacementFor_ind-(0x10a2+4008-0x2049)]]==ReplacementFor_de[\012ReplacementFor_j].ReplacementFor_d2)
<operator>.subtraction 0x8+2611-0xa3b
<operator>.assignment ReplacementFor_temp=ReplacementFor_de[\012ReplacementFor_j].ReplacementFor_loc[ReplacementFor_de[ReplacementFor_j].\012ReplacementFor_ind]
<operator>.assignment ReplacementFor_res[ReplacementFor_temp]='\0'
<operator>.subtraction ReplacementFor_de[ReplacementFor_j].ReplacementFor_ind-\012(0x1660+745-0x1948)
<operator>.subtraction i-(0xc29+1230-0x10f6)
<operator>.subtraction ReplacementFor_de[ReplacementFor_j].\012ReplacementFor_ind-(0x40+8203-0x204a)
<operator>.subtraction 0xfb5+4019-0x1f68
<operator>.logicalAnd (ReplacementFor_de[ReplacementFor_j].ReplacementFor_c2d[\012ReplacementFor_de[ReplacementFor_j].ReplacementFor_ind-(0x1ec0+832-0x21ff)]==\012ReplacementFor_de[ReplacementFor_j].ReplacementFor_d2)&&(ReplacementFor_res[\012ReplacementFor_de[ReplacementFor_j].ReplacementFor_loc[ReplacementFor_de[\012ReplacementFor_j].ReplacementFor_ind-(0x15d9+2548-0x1fcc)]]==ReplacementFor_de[\012ReplacementFor_j].ReplacementFor_d1)
<operator>.subtraction 0x604+3510-0x13ba
<operator>.assignment ReplacementFor_temp=ReplacementFor_de[ReplacementFor_j].ReplacementFor_loc[\012ReplacementFor_de[ReplacementFor_j].ReplacementFor_ind]
<operator>.assignment ReplacementFor_res[ReplacementFor_temp]='\0'
<operator>.subtraction ReplacementFor_de[ReplacementFor_j].\012ReplacementFor_ind-(0xf07+545-0x1127)
<operator>.subtraction i-(0x873+3272-0x153a)
<operator>.subtraction 0x1015+4898-0x2336
<operator>.addition 0x20d7+1145
<operator>.assignment i=ReplacementFor_de[\012ReplacementFor_j].ReplacementFor_loc[ReplacementFor_de[ReplacementFor_j].\012ReplacementFor_ind-(0x1478+281-0x1590)]
<operator>.addition 0x8+2611
<operator>.subtraction i-\012(0x1225+1241-0x16fd)
<operator>.subtraction 0x1660+745-0x1948
<operator>.subtraction 0xc29+1230-0x10f6
<operator>.subtraction 0x40+8203-0x204a
<operator>.addition 0xfb5+4019
<operator>.assignment i=\012ReplacementFor_de[ReplacementFor_j].ReplacementFor_loc[ReplacementFor_de[\012ReplacementFor_j].ReplacementFor_ind-(0x1093+3819-0x1f7d)]
<operator>.addition 0x604+3510
<operator>.subtraction i-(0x1660+932-0x1a03)
<operator>.subtraction 0xf07+545-0x1127
<operator>.subtraction 0x873+3272-0x153a
<operator>.addition 0x1015+4898
<operator>.equals ReplacementFor_de[ReplacementFor_j].ReplacementFor_c2d\012[ReplacementFor_de[ReplacementFor_j].ReplacementFor_ind-(0x914+961-0xcd4)]==\012ReplacementFor_de[ReplacementFor_j].ReplacementFor_d1
<operator>.equals ReplacementFor_res[\012ReplacementFor_de[ReplacementFor_j].ReplacementFor_loc[ReplacementFor_de[\012ReplacementFor_j].ReplacementFor_ind-(0x10a2+4008-0x2049)]]==ReplacementFor_de[\012ReplacementFor_j].ReplacementFor_d2
<operator>.lessThan ReplacementFor_temp<i
<operator>.postIncrement ReplacementFor_temp\012++
<operator>.postDecrement ReplacementFor_de[\012ReplacementFor_j].ReplacementFor_ind--
<operator>.subtraction 0x1225+1241-0x16fd
<operator>.addition 0x1660+745
<operator>.addition 0xc29+1230
<operator>.addition 0x40+8203
<operator>.equals ReplacementFor_de[ReplacementFor_j].ReplacementFor_c2d[\012ReplacementFor_de[ReplacementFor_j].ReplacementFor_ind-(0x1ec0+832-0x21ff)]==\012ReplacementFor_de[ReplacementFor_j].ReplacementFor_d2
<operator>.equals ReplacementFor_res[\012ReplacementFor_de[ReplacementFor_j].ReplacementFor_loc[ReplacementFor_de[\012ReplacementFor_j].ReplacementFor_ind-(0x15d9+2548-0x1fcc)]]==ReplacementFor_de[\012ReplacementFor_j].ReplacementFor_d1
<operator>.lessThan ReplacementFor_temp<i
<operator>.postIncrement ReplacementFor_temp++
<operator>.postDecrement ReplacementFor_de[ReplacementFor_j].ReplacementFor_ind--
<operator>.subtraction 0x1660+932-0x1a03
<operator>.addition 0xf07+545
<operator>.addition 0x873+3272
<operator>.assignment ReplacementFor_temp=ReplacementFor_de[\012ReplacementFor_j].ReplacementFor_loc[ReplacementFor_de[ReplacementFor_j].\012ReplacementFor_ind-(0x208f+75-0x20d9)]
<operator>.assignment ReplacementFor_res[ReplacementFor_temp]='\0'
<operator>.addition 0x1225+1241
<operator>.assignment ReplacementFor_temp=ReplacementFor_de[\012ReplacementFor_j].ReplacementFor_loc[ReplacementFor_de[ReplacementFor_j].\012ReplacementFor_ind-(0x73c+6213-0x1f80)]
<operator>.assignment ReplacementFor_res[ReplacementFor_temp]='\0'
<operator>.addition 0x1660+932
<operator>.subtraction ReplacementFor_de[ReplacementFor_j].ReplacementFor_ind-(0x914+961-0xcd4)
<operator>.subtraction ReplacementFor_de[ReplacementFor_j].\012ReplacementFor_ind-(0x1478+281-0x1590)
<operator>.subtraction ReplacementFor_de[ReplacementFor_j].ReplacementFor_ind-(0x1ec0+832-0x21ff)
<operator>.subtraction ReplacementFor_de[\012ReplacementFor_j].ReplacementFor_ind-(0x1093+3819-0x1f7d)
<operator>.subtraction 0x914+961-0xcd4
<operator>.subtraction ReplacementFor_de[\012ReplacementFor_j].ReplacementFor_ind-(0x10a2+4008-0x2049)
<operator>.subtraction 0x1478+281-0x1590
<operator>.subtraction 0x1ec0+832-0x21ff
<operator>.subtraction ReplacementFor_de[\012ReplacementFor_j].ReplacementFor_ind-(0x15d9+2548-0x1fcc)
<operator>.subtraction 0x1093+3819-0x1f7d
<operator>.addition 0x914+961
<operator>.subtraction 0x10a2+4008-0x2049
<operator>.subtraction ReplacementFor_de[ReplacementFor_j].\012ReplacementFor_ind-(0x208f+75-0x20d9)
<operator>.addition 0x1478+281
<operator>.addition 0x1ec0+832
<operator>.subtraction 0x15d9+2548-0x1fcc
<operator>.subtraction ReplacementFor_de[ReplacementFor_j].\012ReplacementFor_ind-(0x73c+6213-0x1f80)
<operator>.addition 0x1093+3819
<operator>.addition 0x10a2+4008
<operator>.subtraction 0x208f+75-0x20d9
<operator>.addition 0x15d9+2548
<operator>.subtraction 0x73c+6213-0x1f80
<operator>.addition 0x208f+75
<operator>.addition 0x73c+6213
<operator>.addressOf &ReplacementFor_C
<operator>.addressOf &\012ReplacementFor_D
<operator>.addressOf &\012ReplacementFor_N
<operator>.indirectIndexAccess ReplacementFor_res[i]
<operator>.indirectIndexAccess ReplacementFor_alpha[(0x20b+6740-0x1c5f)]
<operator>.addressOf &ReplacementFor_co[ReplacementFor_j].\012ReplacementFor_b1
<operator>.addressOf &ReplacementFor_co[ReplacementFor_j].\012ReplacementFor_b2
<operator>.addressOf &ReplacementFor_co[\012ReplacementFor_j].ReplacementFor_fin
<operator>.addressOf &\012ReplacementFor_de[ReplacementFor_j].ReplacementFor_d1
<operator>.addressOf &ReplacementFor_de[\012ReplacementFor_j].ReplacementFor_d2
<operator>.fieldAccess ReplacementFor_de[ReplacementFor_j].\012ReplacementFor_ind
<operator>.addressOf &\012ReplacementFor_alpha[ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_res[ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_alpha[ReplacementFor_j]
<operator>.fieldAccess ReplacementFor_co[ReplacementFor_j].\012ReplacementFor_b1
<operator>.fieldAccess ReplacementFor_co[ReplacementFor_j].ReplacementFor_b1
<operator>.fieldAccess ReplacementFor_co[ReplacementFor_j].\012ReplacementFor_b2
<operator>.fieldAccess ReplacementFor_co[\012ReplacementFor_j].ReplacementFor_fin
<operator>.fieldAccess ReplacementFor_de[ReplacementFor_j].ReplacementFor_d1
<operator>.fieldAccess ReplacementFor_de[\012ReplacementFor_j].ReplacementFor_d1
<operator>.fieldAccess ReplacementFor_de[\012ReplacementFor_j].ReplacementFor_d2
<operator>.indirectIndexAccess ReplacementFor_de[ReplacementFor_j]
FIELD_IDENTIFIER ReplacementFor_ind ReplacementFor_ind
<operator>.indirectIndexAccess ReplacementFor_alpha[ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_alpha[ReplacementFor_j\012]
<operator>.indirectIndexAccess ReplacementFor_co[ReplacementFor_j]
FIELD_IDENTIFIER ReplacementFor_b1 ReplacementFor_b1
<operator>.indirectIndexAccess ReplacementFor_co[ReplacementFor_j]
FIELD_IDENTIFIER ReplacementFor_b1 ReplacementFor_b1
UNKNOWN char char
<operator>.addressOf &\012ReplacementFor_co[ReplacementFor_j].ReplacementFor_b1
<operator>.indirectIndexAccess ReplacementFor_co[ReplacementFor_j]
FIELD_IDENTIFIER ReplacementFor_b2 ReplacementFor_b2
<operator>.indirectIndexAccess ReplacementFor_co[\012ReplacementFor_j]
FIELD_IDENTIFIER ReplacementFor_fin ReplacementFor_fin
<operator>.indirectIndexAccess ReplacementFor_de[ReplacementFor_j]
FIELD_IDENTIFIER ReplacementFor_d1 ReplacementFor_d1
<operator>.indirectIndexAccess ReplacementFor_de[\012ReplacementFor_j]
FIELD_IDENTIFIER ReplacementFor_d1 ReplacementFor_d1
UNKNOWN char char
<operator>.addressOf &ReplacementFor_de[ReplacementFor_j].\012ReplacementFor_d1
<operator>.indirectIndexAccess ReplacementFor_de[\012ReplacementFor_j]
FIELD_IDENTIFIER ReplacementFor_d2 ReplacementFor_d2
UNKNOWN char char
<operator>.addressOf &\012ReplacementFor_alpha[ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_res[i]
<operator>.indirectIndexAccess ReplacementFor_alpha[ReplacementFor_te]
<operator>.indirectIndexAccess ReplacementFor_res[ReplacementFor_j]
<operator>.fieldAccess ReplacementFor_co[ReplacementFor_j].ReplacementFor_b1
<operator>.fieldAccess ReplacementFor_de[ReplacementFor_j].\012ReplacementFor_d1
<operator>.indirectIndexAccess ReplacementFor_alpha[ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_res[i-\012(0x1a9+2-0x1aa)]
<operator>.fieldAccess ReplacementFor_de[ReplacementFor_j].ReplacementFor_d1
<operator>.indirectIndexAccess ReplacementFor_res\012[i-(0x168b+1866-0x1dd4)]
<operator>.fieldAccess ReplacementFor_de[ReplacementFor_j].ReplacementFor_d2
<operator>.indirectIndexAccess ReplacementFor_alpha[ReplacementFor_te]
<operator>.fieldAccess ReplacementFor_co[ReplacementFor_j].\012ReplacementFor_b1
<operator>.indirectIndexAccess ReplacementFor_alpha[\012ReplacementFor_te]
<operator>.fieldAccess ReplacementFor_co[ReplacementFor_j].ReplacementFor_b2
<operator>.indirectIndexAccess ReplacementFor_res[ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_co[ReplacementFor_j]
FIELD_IDENTIFIER ReplacementFor_b1 ReplacementFor_b1
<operator>.indirectIndexAccess ReplacementFor_de[ReplacementFor_j]
FIELD_IDENTIFIER ReplacementFor_d1 ReplacementFor_d1
<operator>.indirectIndexAccess ReplacementFor_de[ReplacementFor_j]
FIELD_IDENTIFIER ReplacementFor_d1 ReplacementFor_d1
<operator>.indirectIndexAccess ReplacementFor_de[ReplacementFor_j]
FIELD_IDENTIFIER ReplacementFor_d2 ReplacementFor_d2
<operator>.indirectIndexAccess ReplacementFor_co[ReplacementFor_j]
FIELD_IDENTIFIER ReplacementFor_b1 ReplacementFor_b1
<operator>.indirectIndexAccess ReplacementFor_co[ReplacementFor_j]
FIELD_IDENTIFIER ReplacementFor_b2 ReplacementFor_b2
<operator>.indirectIndexAccess ReplacementFor_res[ReplacementFor_j]
<operator>.fieldAccess ReplacementFor_de[ReplacementFor_j].ReplacementFor_ind
<operator>.fieldAccess ReplacementFor_de[ReplacementFor_j].ReplacementFor_ind
<operator>.indirectIndexAccess ReplacementFor_res[i-(0x740+5941-0x1e74)]
<operator>.fieldAccess ReplacementFor_co[ReplacementFor_j].ReplacementFor_b2
<operator>.indirectIndexAccess ReplacementFor_res[i-(0x6cf+8250-0x2708)]
<operator>.fieldAccess ReplacementFor_co[ReplacementFor_j].\012ReplacementFor_b1
<operator>.indirectIndexAccess ReplacementFor_de[ReplacementFor_j]
FIELD_IDENTIFIER ReplacementFor_ind ReplacementFor_ind
<operator>.indirectIndexAccess ReplacementFor_de[ReplacementFor_j].ReplacementFor_loc[ReplacementFor_de[\012ReplacementFor_j].ReplacementFor_ind]
<operator>.indirectIndexAccess ReplacementFor_de[\012ReplacementFor_j].ReplacementFor_c2d[ReplacementFor_de[ReplacementFor_j].\012ReplacementFor_ind]
<operator>.fieldAccess ReplacementFor_de[ReplacementFor_j].ReplacementFor_d2
<operator>.fieldAccess ReplacementFor_de[ReplacementFor_j].ReplacementFor_ind
<operator>.indirectIndexAccess ReplacementFor_de[ReplacementFor_j]
FIELD_IDENTIFIER ReplacementFor_ind ReplacementFor_ind
<operator>.indirectIndexAccess ReplacementFor_de[ReplacementFor_j].ReplacementFor_loc[(0x6a+2348-0x996)]
<operator>.indirectIndexAccess ReplacementFor_de[ReplacementFor_j].ReplacementFor_c2d[\012(0x899+2765-0x1366)]
<operator>.fieldAccess ReplacementFor_de[ReplacementFor_j].ReplacementFor_d1
<operator>.fieldAccess ReplacementFor_de[ReplacementFor_j].ReplacementFor_ind
<operator>.indirectIndexAccess ReplacementFor_co[ReplacementFor_j]
FIELD_IDENTIFIER ReplacementFor_b2 ReplacementFor_b2
<operator>.indirectIndexAccess ReplacementFor_res[i-\012(0x126f+4737-0x24ef)]
<operator>.fieldAccess ReplacementFor_co[ReplacementFor_j].ReplacementFor_fin
<operator>.indirectIndexAccess ReplacementFor_co[ReplacementFor_j]
FIELD_IDENTIFIER ReplacementFor_b1 ReplacementFor_b1
<operator>.indirectIndexAccess ReplacementFor_res[i-(0x8e3+6850-0x23a4)]
<operator>.fieldAccess ReplacementFor_co[\012ReplacementFor_j].ReplacementFor_fin
<operator>.fieldAccess ReplacementFor_de[ReplacementFor_j].ReplacementFor_loc
<operator>.fieldAccess ReplacementFor_de[\012ReplacementFor_j].ReplacementFor_ind
<operator>.fieldAccess ReplacementFor_de[\012ReplacementFor_j].ReplacementFor_c2d
<operator>.fieldAccess ReplacementFor_de[ReplacementFor_j].\012ReplacementFor_ind
<operator>.indirectIndexAccess ReplacementFor_de[ReplacementFor_j]
FIELD_IDENTIFIER ReplacementFor_d2 ReplacementFor_d2
<operator>.indirectIndexAccess ReplacementFor_de[ReplacementFor_j]
FIELD_IDENTIFIER ReplacementFor_ind ReplacementFor_ind
<operator>.fieldAccess ReplacementFor_de[ReplacementFor_j].ReplacementFor_loc
<operator>.fieldAccess ReplacementFor_de[ReplacementFor_j].ReplacementFor_c2d
<operator>.indirectIndexAccess ReplacementFor_de[ReplacementFor_j]
FIELD_IDENTIFIER ReplacementFor_d1 ReplacementFor_d1
<operator>.indirectIndexAccess ReplacementFor_de[ReplacementFor_j]
FIELD_IDENTIFIER ReplacementFor_ind ReplacementFor_ind
<operator>.indirectIndexAccess ReplacementFor_co[ReplacementFor_j]
FIELD_IDENTIFIER ReplacementFor_fin ReplacementFor_fin
<operator>.indirectIndexAccess ReplacementFor_co[\012ReplacementFor_j]
FIELD_IDENTIFIER ReplacementFor_fin ReplacementFor_fin
<operator>.indirectIndexAccess ReplacementFor_de[ReplacementFor_j]
FIELD_IDENTIFIER ReplacementFor_loc ReplacementFor_loc
<operator>.indirectIndexAccess ReplacementFor_de[\012ReplacementFor_j]
FIELD_IDENTIFIER ReplacementFor_ind ReplacementFor_ind
<operator>.indirectIndexAccess ReplacementFor_de[\012ReplacementFor_j]
FIELD_IDENTIFIER ReplacementFor_c2d ReplacementFor_c2d
<operator>.indirectIndexAccess ReplacementFor_de[ReplacementFor_j]
FIELD_IDENTIFIER ReplacementFor_ind ReplacementFor_ind
<operator>.indirectIndexAccess ReplacementFor_de[ReplacementFor_j].ReplacementFor_c2d[ReplacementFor_de[\012ReplacementFor_j].ReplacementFor_ind-(0x3d0+8560-0x253f)]
<operator>.fieldAccess ReplacementFor_de[\012ReplacementFor_j].ReplacementFor_d1
<operator>.indirectIndexAccess ReplacementFor_de[ReplacementFor_j]
FIELD_IDENTIFIER ReplacementFor_loc ReplacementFor_loc
<operator>.indirectIndexAccess ReplacementFor_de[ReplacementFor_j]
FIELD_IDENTIFIER ReplacementFor_c2d ReplacementFor_c2d
<operator>.indirectIndexAccess ReplacementFor_de[ReplacementFor_j].ReplacementFor_c2d[ReplacementFor_de[\012ReplacementFor_j].ReplacementFor_ind-(0x87d+5156-0x1ca0)]
<operator>.fieldAccess ReplacementFor_de[\012ReplacementFor_j].ReplacementFor_d2
<operator>.fieldAccess ReplacementFor_de[ReplacementFor_j].ReplacementFor_c2d
<operator>.indirectIndexAccess ReplacementFor_de[\012ReplacementFor_j]
FIELD_IDENTIFIER ReplacementFor_d1 ReplacementFor_d1
<operator>.fieldAccess ReplacementFor_de[ReplacementFor_j].ReplacementFor_c2d
<operator>.indirectIndexAccess ReplacementFor_de[\012ReplacementFor_j]
FIELD_IDENTIFIER ReplacementFor_d2 ReplacementFor_d2
<operator>.indirectIndexAccess ReplacementFor_de[ReplacementFor_j]
FIELD_IDENTIFIER ReplacementFor_c2d ReplacementFor_c2d
<operator>.fieldAccess ReplacementFor_de[\012ReplacementFor_j].ReplacementFor_ind
<operator>.indirectIndexAccess ReplacementFor_res[ReplacementFor_de[\012ReplacementFor_j].ReplacementFor_loc[ReplacementFor_de[ReplacementFor_j].\012ReplacementFor_ind-(0x1015+4898-0x2336)]]
<operator>.fieldAccess ReplacementFor_de[ReplacementFor_j].\012ReplacementFor_d2
<operator>.indirectIndexAccess ReplacementFor_de[ReplacementFor_j]
FIELD_IDENTIFIER ReplacementFor_c2d ReplacementFor_c2d
<operator>.fieldAccess ReplacementFor_de[\012ReplacementFor_j].ReplacementFor_ind
<operator>.indirectIndexAccess ReplacementFor_res[ReplacementFor_de[\012ReplacementFor_j].ReplacementFor_loc[ReplacementFor_de[ReplacementFor_j].\012ReplacementFor_ind-(0x40+8203-0x204a)]]
<operator>.fieldAccess ReplacementFor_de[ReplacementFor_j].\012ReplacementFor_d1
<operator>.indirectIndexAccess ReplacementFor_de[\012ReplacementFor_j]
FIELD_IDENTIFIER ReplacementFor_ind ReplacementFor_ind
<operator>.indirectIndexAccess ReplacementFor_de[\012ReplacementFor_j].ReplacementFor_loc[ReplacementFor_de[ReplacementFor_j].\012ReplacementFor_ind-(0x1015+4898-0x2336)]
<operator>.indirectIndexAccess ReplacementFor_de[ReplacementFor_j]
FIELD_IDENTIFIER ReplacementFor_d2 ReplacementFor_d2
<operator>.fieldAccess ReplacementFor_de[ReplacementFor_j].ReplacementFor_ind
<operator>.indirectIndexAccess ReplacementFor_de[ReplacementFor_j].\012ReplacementFor_c2d[ReplacementFor_de[ReplacementFor_j].ReplacementFor_ind-\012(0x1660+745-0x1948)]
<operator>.fieldAccess ReplacementFor_de[ReplacementFor_j].ReplacementFor_d2
<operator>.indirectIndexAccess ReplacementFor_de[\012ReplacementFor_j]
FIELD_IDENTIFIER ReplacementFor_ind ReplacementFor_ind
<operator>.indirectIndexAccess ReplacementFor_de[\012ReplacementFor_j].ReplacementFor_loc[ReplacementFor_de[ReplacementFor_j].\012ReplacementFor_ind-(0x40+8203-0x204a)]
<operator>.indirectIndexAccess ReplacementFor_de[ReplacementFor_j]
FIELD_IDENTIFIER ReplacementFor_d1 ReplacementFor_d1
<operator>.fieldAccess ReplacementFor_de[ReplacementFor_j].ReplacementFor_ind
<operator>.indirectIndexAccess ReplacementFor_de[\012ReplacementFor_j].ReplacementFor_c2d[ReplacementFor_de[ReplacementFor_j].\012ReplacementFor_ind-(0xf07+545-0x1127)]
<operator>.fieldAccess ReplacementFor_de[ReplacementFor_j].\012ReplacementFor_d1
<operator>.fieldAccess ReplacementFor_de[\012ReplacementFor_j].ReplacementFor_loc
<operator>.indirectIndexAccess ReplacementFor_de[ReplacementFor_j]
FIELD_IDENTIFIER ReplacementFor_ind ReplacementFor_ind
<operator>.fieldAccess ReplacementFor_de[ReplacementFor_j].ReplacementFor_ind
<operator>.fieldAccess ReplacementFor_de[ReplacementFor_j].\012ReplacementFor_ind
<operator>.fieldAccess ReplacementFor_de[ReplacementFor_j].ReplacementFor_ind
<operator>.indirectIndexAccess ReplacementFor_de[\012ReplacementFor_j].ReplacementFor_c2d[ReplacementFor_de[ReplacementFor_j].\012ReplacementFor_ind]
<operator>.indirectIndexAccess ReplacementFor_de[\012ReplacementFor_j].ReplacementFor_loc[ReplacementFor_de[ReplacementFor_j].\012ReplacementFor_ind]
<operator>.fieldAccess ReplacementFor_de[ReplacementFor_j].\012ReplacementFor_c2d
<operator>.indirectIndexAccess ReplacementFor_de[ReplacementFor_j]
FIELD_IDENTIFIER ReplacementFor_d2 ReplacementFor_d2
<operator>.indirectIndexAccess ReplacementFor_de[ReplacementFor_j].ReplacementFor_loc[ReplacementFor_de[\012ReplacementFor_j].ReplacementFor_ind]
<operator>.indirectIndexAccess ReplacementFor_de[\012ReplacementFor_j].ReplacementFor_c2d[ReplacementFor_de[ReplacementFor_j].\012ReplacementFor_ind]
<operator>.fieldAccess ReplacementFor_de[ReplacementFor_j].ReplacementFor_d2
<operator>.fieldAccess ReplacementFor_de[ReplacementFor_j].ReplacementFor_ind
<operator>.fieldAccess ReplacementFor_de[\012ReplacementFor_j].ReplacementFor_loc
<operator>.indirectIndexAccess ReplacementFor_de[ReplacementFor_j]
FIELD_IDENTIFIER ReplacementFor_ind ReplacementFor_ind
<operator>.fieldAccess ReplacementFor_de[ReplacementFor_j].ReplacementFor_ind
<operator>.fieldAccess ReplacementFor_de[\012ReplacementFor_j].ReplacementFor_ind
<operator>.fieldAccess ReplacementFor_de[ReplacementFor_j].\012ReplacementFor_ind
<operator>.indirectIndexAccess ReplacementFor_de[ReplacementFor_j].ReplacementFor_c2d[\012ReplacementFor_de[ReplacementFor_j].ReplacementFor_ind]
<operator>.indirectIndexAccess ReplacementFor_de[ReplacementFor_j].ReplacementFor_loc[ReplacementFor_de[\012ReplacementFor_j].ReplacementFor_ind]
<operator>.fieldAccess ReplacementFor_de[\012ReplacementFor_j].ReplacementFor_c2d
<operator>.indirectIndexAccess ReplacementFor_de[ReplacementFor_j]
FIELD_IDENTIFIER ReplacementFor_d1 ReplacementFor_d1
<operator>.indirectIndexAccess ReplacementFor_de[ReplacementFor_j].ReplacementFor_loc[\012ReplacementFor_de[ReplacementFor_j].ReplacementFor_ind]
<operator>.indirectIndexAccess ReplacementFor_de[ReplacementFor_j].ReplacementFor_c2d[ReplacementFor_de[\012ReplacementFor_j].ReplacementFor_ind]
<operator>.fieldAccess ReplacementFor_de[ReplacementFor_j].\012ReplacementFor_d1
<operator>.fieldAccess ReplacementFor_de[ReplacementFor_j].ReplacementFor_ind
<operator>.indirectIndexAccess ReplacementFor_de[\012ReplacementFor_j]
FIELD_IDENTIFIER ReplacementFor_loc ReplacementFor_loc
<operator>.fieldAccess ReplacementFor_de[ReplacementFor_j].\012ReplacementFor_ind
<operator>.indirectIndexAccess ReplacementFor_de[ReplacementFor_j]
FIELD_IDENTIFIER ReplacementFor_ind ReplacementFor_ind
<operator>.indirectIndexAccess ReplacementFor_de[ReplacementFor_j]
FIELD_IDENTIFIER ReplacementFor_ind ReplacementFor_ind
<operator>.fieldAccess ReplacementFor_de[ReplacementFor_j].\012ReplacementFor_ind
<operator>.indirectIndexAccess ReplacementFor_de[ReplacementFor_j].ReplacementFor_c2d[\012ReplacementFor_de[ReplacementFor_j].ReplacementFor_ind]
<operator>.fieldAccess ReplacementFor_de[\012ReplacementFor_j].ReplacementFor_d2
<operator>.indirectIndexAccess ReplacementFor_de[ReplacementFor_j].\012ReplacementFor_loc[ReplacementFor_de[ReplacementFor_j].ReplacementFor_ind]
<operator>.fieldAccess ReplacementFor_de[ReplacementFor_j].ReplacementFor_ind
<operator>.indirectIndexAccess ReplacementFor_de[ReplacementFor_j]
FIELD_IDENTIFIER ReplacementFor_ind ReplacementFor_ind
<operator>.fieldAccess ReplacementFor_de[\012ReplacementFor_j].ReplacementFor_c2d
<operator>.fieldAccess ReplacementFor_de[ReplacementFor_j].\012ReplacementFor_ind
<operator>.fieldAccess ReplacementFor_de[\012ReplacementFor_j].ReplacementFor_loc
<operator>.fieldAccess ReplacementFor_de[ReplacementFor_j].\012ReplacementFor_ind
<operator>.indirectIndexAccess ReplacementFor_de[ReplacementFor_j]
FIELD_IDENTIFIER ReplacementFor_c2d ReplacementFor_c2d
<operator>.fieldAccess ReplacementFor_de[ReplacementFor_j].ReplacementFor_ind
<operator>.fieldAccess ReplacementFor_de[ReplacementFor_j].ReplacementFor_loc
<operator>.fieldAccess ReplacementFor_de[\012ReplacementFor_j].ReplacementFor_ind
<operator>.fieldAccess ReplacementFor_de[\012ReplacementFor_j].ReplacementFor_c2d
<operator>.fieldAccess ReplacementFor_de[ReplacementFor_j].\012ReplacementFor_ind
<operator>.indirectIndexAccess ReplacementFor_de[ReplacementFor_j]
FIELD_IDENTIFIER ReplacementFor_d2 ReplacementFor_d2
<operator>.indirectIndexAccess ReplacementFor_de[ReplacementFor_j]
FIELD_IDENTIFIER ReplacementFor_ind ReplacementFor_ind
<operator>.indirectIndexAccess ReplacementFor_de[\012ReplacementFor_j]
FIELD_IDENTIFIER ReplacementFor_loc ReplacementFor_loc
<operator>.fieldAccess ReplacementFor_de[ReplacementFor_j].\012ReplacementFor_ind
<operator>.indirectIndexAccess ReplacementFor_de[ReplacementFor_j]
FIELD_IDENTIFIER ReplacementFor_ind ReplacementFor_ind
<operator>.indirectIndexAccess ReplacementFor_de[\012ReplacementFor_j]
FIELD_IDENTIFIER ReplacementFor_ind ReplacementFor_ind
<operator>.fieldAccess ReplacementFor_de[\012ReplacementFor_j].ReplacementFor_ind
<operator>.indirectIndexAccess ReplacementFor_de[ReplacementFor_j].\012ReplacementFor_c2d[ReplacementFor_de[ReplacementFor_j].ReplacementFor_ind]
<operator>.fieldAccess ReplacementFor_de[ReplacementFor_j].ReplacementFor_d1
<operator>.indirectIndexAccess ReplacementFor_de[\012ReplacementFor_j].ReplacementFor_loc[ReplacementFor_de[ReplacementFor_j].\012ReplacementFor_ind]
<operator>.fieldAccess ReplacementFor_de[ReplacementFor_j].\012ReplacementFor_ind
<operator>.indirectIndexAccess ReplacementFor_de[ReplacementFor_j]
FIELD_IDENTIFIER ReplacementFor_ind ReplacementFor_ind
<operator>.fieldAccess ReplacementFor_de[ReplacementFor_j].ReplacementFor_c2d
<operator>.fieldAccess ReplacementFor_de[ReplacementFor_j].ReplacementFor_ind
<operator>.fieldAccess ReplacementFor_de[ReplacementFor_j].ReplacementFor_loc
<operator>.fieldAccess ReplacementFor_de[\012ReplacementFor_j].ReplacementFor_ind
<operator>.indirectIndexAccess ReplacementFor_de[\012ReplacementFor_j]
FIELD_IDENTIFIER ReplacementFor_c2d ReplacementFor_c2d
<operator>.fieldAccess ReplacementFor_de[ReplacementFor_j].\012ReplacementFor_ind
<operator>.fieldAccess ReplacementFor_de[ReplacementFor_j].ReplacementFor_loc
<operator>.fieldAccess ReplacementFor_de[ReplacementFor_j].ReplacementFor_ind
<operator>.fieldAccess ReplacementFor_de[ReplacementFor_j].ReplacementFor_c2d
<operator>.fieldAccess ReplacementFor_de[\012ReplacementFor_j].ReplacementFor_ind
<operator>.indirectIndexAccess ReplacementFor_de[ReplacementFor_j]
FIELD_IDENTIFIER ReplacementFor_d1 ReplacementFor_d1
<operator>.indirectIndexAccess ReplacementFor_de[ReplacementFor_j]
FIELD_IDENTIFIER ReplacementFor_ind ReplacementFor_ind
<operator>.indirectIndexAccess ReplacementFor_de[ReplacementFor_j]
FIELD_IDENTIFIER ReplacementFor_ind ReplacementFor_ind
<operator>.indirectIndexAccess ReplacementFor_de[ReplacementFor_j]
FIELD_IDENTIFIER ReplacementFor_ind ReplacementFor_ind
<operator>.fieldAccess ReplacementFor_de[ReplacementFor_j].ReplacementFor_c2d
<operator>.fieldAccess ReplacementFor_de[ReplacementFor_j].ReplacementFor_ind
<operator>.indirectIndexAccess ReplacementFor_de[\012ReplacementFor_j]
FIELD_IDENTIFIER ReplacementFor_d2 ReplacementFor_d2
<operator>.fieldAccess ReplacementFor_de[ReplacementFor_j].\012ReplacementFor_loc
<operator>.fieldAccess ReplacementFor_de[ReplacementFor_j].ReplacementFor_ind
<operator>.indirectIndexAccess ReplacementFor_de[ReplacementFor_j]
FIELD_IDENTIFIER ReplacementFor_ind ReplacementFor_ind
<operator>.indirectIndexAccess ReplacementFor_de[\012ReplacementFor_j]
FIELD_IDENTIFIER ReplacementFor_c2d ReplacementFor_c2d
<operator>.indirectIndexAccess ReplacementFor_de[ReplacementFor_j]
FIELD_IDENTIFIER ReplacementFor_ind ReplacementFor_ind
<operator>.indirectIndexAccess ReplacementFor_de[\012ReplacementFor_j].ReplacementFor_loc[ReplacementFor_de[ReplacementFor_j].\012ReplacementFor_ind]
<operator>.indirectIndexAccess ReplacementFor_res[ReplacementFor_temp]
<operator>.indirectIndexAccess ReplacementFor_de[\012ReplacementFor_j]
FIELD_IDENTIFIER ReplacementFor_loc ReplacementFor_loc
<operator>.indirectIndexAccess ReplacementFor_de[ReplacementFor_j]
FIELD_IDENTIFIER ReplacementFor_ind ReplacementFor_ind
<operator>.indirectIndexAccess ReplacementFor_de[ReplacementFor_j]
FIELD_IDENTIFIER ReplacementFor_ind ReplacementFor_ind
<operator>.indirectIndexAccess ReplacementFor_de[ReplacementFor_j]
FIELD_IDENTIFIER ReplacementFor_loc ReplacementFor_loc
<operator>.indirectIndexAccess ReplacementFor_de[\012ReplacementFor_j]
FIELD_IDENTIFIER ReplacementFor_ind ReplacementFor_ind
<operator>.indirectIndexAccess ReplacementFor_de[\012ReplacementFor_j]
FIELD_IDENTIFIER ReplacementFor_c2d ReplacementFor_c2d
<operator>.indirectIndexAccess ReplacementFor_de[ReplacementFor_j]
FIELD_IDENTIFIER ReplacementFor_ind ReplacementFor_ind
<operator>.indirectIndexAccess ReplacementFor_de[ReplacementFor_j]
FIELD_IDENTIFIER ReplacementFor_ind ReplacementFor_ind
<operator>.indirectIndexAccess ReplacementFor_de[\012ReplacementFor_j]
FIELD_IDENTIFIER ReplacementFor_ind ReplacementFor_ind
<operator>.fieldAccess ReplacementFor_de[ReplacementFor_j].\012ReplacementFor_c2d
<operator>.fieldAccess ReplacementFor_de[ReplacementFor_j].ReplacementFor_ind
<operator>.indirectIndexAccess ReplacementFor_de[ReplacementFor_j]
FIELD_IDENTIFIER ReplacementFor_d1 ReplacementFor_d1
<operator>.fieldAccess ReplacementFor_de[\012ReplacementFor_j].ReplacementFor_loc
<operator>.fieldAccess ReplacementFor_de[ReplacementFor_j].\012ReplacementFor_ind
<operator>.indirectIndexAccess ReplacementFor_de[ReplacementFor_j]
FIELD_IDENTIFIER ReplacementFor_ind ReplacementFor_ind
<operator>.indirectIndexAccess ReplacementFor_de[ReplacementFor_j]
FIELD_IDENTIFIER ReplacementFor_c2d ReplacementFor_c2d
<operator>.indirectIndexAccess ReplacementFor_de[ReplacementFor_j]
FIELD_IDENTIFIER ReplacementFor_ind ReplacementFor_ind
<operator>.indirectIndexAccess ReplacementFor_de[ReplacementFor_j].ReplacementFor_loc[\012ReplacementFor_de[ReplacementFor_j].ReplacementFor_ind]
<operator>.indirectIndexAccess ReplacementFor_res[ReplacementFor_temp]
<operator>.indirectIndexAccess ReplacementFor_de[ReplacementFor_j]
FIELD_IDENTIFIER ReplacementFor_loc ReplacementFor_loc
<operator>.indirectIndexAccess ReplacementFor_de[\012ReplacementFor_j]
FIELD_IDENTIFIER ReplacementFor_ind ReplacementFor_ind
<operator>.indirectIndexAccess ReplacementFor_de[ReplacementFor_j]
FIELD_IDENTIFIER ReplacementFor_ind ReplacementFor_ind
<operator>.indirectIndexAccess ReplacementFor_de[ReplacementFor_j]
FIELD_IDENTIFIER ReplacementFor_loc ReplacementFor_loc
<operator>.indirectIndexAccess ReplacementFor_de[ReplacementFor_j]
FIELD_IDENTIFIER ReplacementFor_ind ReplacementFor_ind
<operator>.indirectIndexAccess ReplacementFor_de[ReplacementFor_j]
FIELD_IDENTIFIER ReplacementFor_c2d ReplacementFor_c2d
<operator>.indirectIndexAccess ReplacementFor_de[\012ReplacementFor_j]
FIELD_IDENTIFIER ReplacementFor_ind ReplacementFor_ind
<operator>.indirectIndexAccess ReplacementFor_de[ReplacementFor_j].ReplacementFor_c2d\012[ReplacementFor_de[ReplacementFor_j].ReplacementFor_ind-(0x914+961-0xcd4)]
<operator>.fieldAccess ReplacementFor_de[ReplacementFor_j].ReplacementFor_d1
<operator>.indirectIndexAccess ReplacementFor_res[\012ReplacementFor_de[ReplacementFor_j].ReplacementFor_loc[ReplacementFor_de[\012ReplacementFor_j].ReplacementFor_ind-(0x10a2+4008-0x2049)]]
<operator>.fieldAccess ReplacementFor_de[\012ReplacementFor_j].ReplacementFor_d2
<operator>.indirectIndexAccess ReplacementFor_de[\012ReplacementFor_j].ReplacementFor_loc[ReplacementFor_de[ReplacementFor_j].\012ReplacementFor_ind-(0x1478+281-0x1590)]
<operator>.indirectIndexAccess ReplacementFor_de[ReplacementFor_j]
FIELD_IDENTIFIER ReplacementFor_c2d ReplacementFor_c2d
<operator>.indirectIndexAccess ReplacementFor_de[ReplacementFor_j]
FIELD_IDENTIFIER ReplacementFor_ind ReplacementFor_ind
<operator>.indirectIndexAccess ReplacementFor_de[ReplacementFor_j]
FIELD_IDENTIFIER ReplacementFor_loc ReplacementFor_loc
<operator>.indirectIndexAccess ReplacementFor_de[ReplacementFor_j]
FIELD_IDENTIFIER ReplacementFor_ind ReplacementFor_ind
<operator>.fieldAccess ReplacementFor_de[\012ReplacementFor_j].ReplacementFor_loc
<operator>.fieldAccess ReplacementFor_de[ReplacementFor_j].\012ReplacementFor_ind
<operator>.indirectIndexAccess ReplacementFor_de[ReplacementFor_j].ReplacementFor_c2d[\012ReplacementFor_de[ReplacementFor_j].ReplacementFor_ind-(0x1ec0+832-0x21ff)]
<operator>.fieldAccess ReplacementFor_de[ReplacementFor_j].ReplacementFor_d2
<operator>.indirectIndexAccess ReplacementFor_res[\012ReplacementFor_de[ReplacementFor_j].ReplacementFor_loc[ReplacementFor_de[\012ReplacementFor_j].ReplacementFor_ind-(0x15d9+2548-0x1fcc)]]
<operator>.fieldAccess ReplacementFor_de[\012ReplacementFor_j].ReplacementFor_d1
<operator>.indirectIndexAccess ReplacementFor_de[ReplacementFor_j].ReplacementFor_loc[ReplacementFor_de[\012ReplacementFor_j].ReplacementFor_ind-(0x1093+3819-0x1f7d)]
<operator>.indirectIndexAccess ReplacementFor_de[ReplacementFor_j]
FIELD_IDENTIFIER ReplacementFor_c2d ReplacementFor_c2d
<operator>.indirectIndexAccess ReplacementFor_de[ReplacementFor_j]
FIELD_IDENTIFIER ReplacementFor_ind ReplacementFor_ind
<operator>.indirectIndexAccess ReplacementFor_de[\012ReplacementFor_j]
FIELD_IDENTIFIER ReplacementFor_loc ReplacementFor_loc
<operator>.indirectIndexAccess ReplacementFor_de[ReplacementFor_j]
FIELD_IDENTIFIER ReplacementFor_ind ReplacementFor_ind
<operator>.fieldAccess ReplacementFor_de[ReplacementFor_j].ReplacementFor_loc
<operator>.fieldAccess ReplacementFor_de[ReplacementFor_j].ReplacementFor_ind
<operator>.fieldAccess ReplacementFor_de[ReplacementFor_j].ReplacementFor_c2d
<operator>.indirectIndexAccess ReplacementFor_de[ReplacementFor_j]
FIELD_IDENTIFIER ReplacementFor_d1 ReplacementFor_d1
<operator>.indirectIndexAccess ReplacementFor_de[ReplacementFor_j].ReplacementFor_loc[ReplacementFor_de[\012ReplacementFor_j].ReplacementFor_ind-(0x10a2+4008-0x2049)]
<operator>.indirectIndexAccess ReplacementFor_de[\012ReplacementFor_j]
FIELD_IDENTIFIER ReplacementFor_d2 ReplacementFor_d2
<operator>.fieldAccess ReplacementFor_de[\012ReplacementFor_j].ReplacementFor_loc
<operator>.fieldAccess ReplacementFor_de[\012ReplacementFor_j].ReplacementFor_ind
<operator>.indirectIndexAccess ReplacementFor_de[\012ReplacementFor_j]
FIELD_IDENTIFIER ReplacementFor_loc ReplacementFor_loc
<operator>.indirectIndexAccess ReplacementFor_de[ReplacementFor_j]
FIELD_IDENTIFIER ReplacementFor_ind ReplacementFor_ind
<operator>.fieldAccess ReplacementFor_de[ReplacementFor_j].ReplacementFor_c2d
<operator>.indirectIndexAccess ReplacementFor_de[ReplacementFor_j]
FIELD_IDENTIFIER ReplacementFor_d2 ReplacementFor_d2
<operator>.indirectIndexAccess ReplacementFor_de[ReplacementFor_j].ReplacementFor_loc[ReplacementFor_de[\012ReplacementFor_j].ReplacementFor_ind-(0x15d9+2548-0x1fcc)]
<operator>.indirectIndexAccess ReplacementFor_de[\012ReplacementFor_j]
FIELD_IDENTIFIER ReplacementFor_d1 ReplacementFor_d1
<operator>.fieldAccess ReplacementFor_de[ReplacementFor_j].ReplacementFor_loc
<operator>.fieldAccess ReplacementFor_de[ReplacementFor_j].ReplacementFor_ind
<operator>.indirectIndexAccess ReplacementFor_de[ReplacementFor_j]
FIELD_IDENTIFIER ReplacementFor_loc ReplacementFor_loc
<operator>.indirectIndexAccess ReplacementFor_de[ReplacementFor_j]
FIELD_IDENTIFIER ReplacementFor_ind ReplacementFor_ind
<operator>.indirectIndexAccess ReplacementFor_de[ReplacementFor_j]
FIELD_IDENTIFIER ReplacementFor_c2d ReplacementFor_c2d
<operator>.fieldAccess ReplacementFor_de[ReplacementFor_j].ReplacementFor_ind
<operator>.fieldAccess ReplacementFor_de[ReplacementFor_j].ReplacementFor_loc
<operator>.indirectIndexAccess ReplacementFor_de[\012ReplacementFor_j].ReplacementFor_loc[ReplacementFor_de[ReplacementFor_j].\012ReplacementFor_ind-(0x208f+75-0x20d9)]
<operator>.indirectIndexAccess ReplacementFor_res[ReplacementFor_temp]
<operator>.indirectIndexAccess ReplacementFor_de[\012ReplacementFor_j]
FIELD_IDENTIFIER ReplacementFor_loc ReplacementFor_loc
<operator>.fieldAccess ReplacementFor_de[ReplacementFor_j].\012ReplacementFor_ind
<operator>.indirectIndexAccess ReplacementFor_de[\012ReplacementFor_j]
FIELD_IDENTIFIER ReplacementFor_ind ReplacementFor_ind
<operator>.indirectIndexAccess ReplacementFor_de[ReplacementFor_j]
FIELD_IDENTIFIER ReplacementFor_c2d ReplacementFor_c2d
<operator>.fieldAccess ReplacementFor_de[ReplacementFor_j].ReplacementFor_ind
<operator>.fieldAccess ReplacementFor_de[ReplacementFor_j].ReplacementFor_loc
<operator>.indirectIndexAccess ReplacementFor_de[\012ReplacementFor_j].ReplacementFor_loc[ReplacementFor_de[ReplacementFor_j].\012ReplacementFor_ind-(0x73c+6213-0x1f80)]
<operator>.indirectIndexAccess ReplacementFor_res[ReplacementFor_temp]
<operator>.indirectIndexAccess ReplacementFor_de[ReplacementFor_j]
FIELD_IDENTIFIER ReplacementFor_loc ReplacementFor_loc
<operator>.fieldAccess ReplacementFor_de[\012ReplacementFor_j].ReplacementFor_ind
<operator>.indirectIndexAccess ReplacementFor_de[ReplacementFor_j]
FIELD_IDENTIFIER ReplacementFor_ind ReplacementFor_ind
<operator>.indirectIndexAccess ReplacementFor_de[ReplacementFor_j]
FIELD_IDENTIFIER ReplacementFor_ind ReplacementFor_ind
<operator>.indirectIndexAccess ReplacementFor_de[ReplacementFor_j]
FIELD_IDENTIFIER ReplacementFor_loc ReplacementFor_loc
<operator>.fieldAccess ReplacementFor_de[\012ReplacementFor_j].ReplacementFor_ind
<operator>.fieldAccess ReplacementFor_de[\012ReplacementFor_j].ReplacementFor_loc
<operator>.indirectIndexAccess ReplacementFor_de[ReplacementFor_j]
FIELD_IDENTIFIER ReplacementFor_ind ReplacementFor_ind
<operator>.indirectIndexAccess ReplacementFor_de[ReplacementFor_j]
FIELD_IDENTIFIER ReplacementFor_ind ReplacementFor_ind
<operator>.indirectIndexAccess ReplacementFor_de[ReplacementFor_j]
FIELD_IDENTIFIER ReplacementFor_loc ReplacementFor_loc
<operator>.fieldAccess ReplacementFor_de[\012ReplacementFor_j].ReplacementFor_ind
<operator>.fieldAccess ReplacementFor_de[\012ReplacementFor_j].ReplacementFor_loc
<operator>.indirectIndexAccess ReplacementFor_de[\012ReplacementFor_j]
FIELD_IDENTIFIER ReplacementFor_ind ReplacementFor_ind
<operator>.indirectIndexAccess ReplacementFor_de[\012ReplacementFor_j]
FIELD_IDENTIFIER ReplacementFor_ind ReplacementFor_ind
<operator>.indirectIndexAccess ReplacementFor_de[\012ReplacementFor_j]
FIELD_IDENTIFIER ReplacementFor_loc ReplacementFor_loc
<operator>.fieldAccess ReplacementFor_de[ReplacementFor_j].\012ReplacementFor_ind
<operator>.indirectIndexAccess ReplacementFor_de[\012ReplacementFor_j]
FIELD_IDENTIFIER ReplacementFor_ind ReplacementFor_ind
<operator>.indirectIndexAccess ReplacementFor_de[\012ReplacementFor_j]
FIELD_IDENTIFIER ReplacementFor_loc ReplacementFor_loc
<operator>.fieldAccess ReplacementFor_de[ReplacementFor_j].\012ReplacementFor_ind
<operator>.indirectIndexAccess ReplacementFor_de[ReplacementFor_j]
FIELD_IDENTIFIER ReplacementFor_ind ReplacementFor_ind
<operator>.indirectIndexAccess ReplacementFor_de[ReplacementFor_j]
FIELD_IDENTIFIER ReplacementFor_ind ReplacementFor_ind
>>>PDG&717 0->4 0->8 0->10 0->11 0->12 0->13 0->14 0->15 0->16 0->17 0->18 0->19 0->21 0->23 0->24 0->25 0->28 0->29 0->31 0->32 0->33 0->34 0->35 0->36 0->37 0->38 0->39 0->40 0->41 0->42 0->43 0->44 0->45 0->46 0->47 0->48 0->50 0->51 0->52 0->54 0->55 0->58 0->59 0->60 0->61 0->63 0->64 0->65 0->66 0->70 0->71 0->72 0->73 0->74 0->75 0->76 0->77 0->78 0->79 0->80 0->81 0->82 0->83 0->84 0->85 0->86 0->87 0->91 0->92 0->93 0->94 0->95 0->97 0->99 0->100 0->106 0->107 0->108 0->109 0->110 0->111 0->112 0->113 0->114 0->115 0->116 0->117 0->118 0->119 0->120 0->121 0->122 0->123 0->126 0->129 0->130 0->134 0->139 0->141 0->142 0->143 0->144 0->145 0->146 0->147 0->148 0->149 0->150 0->152 0->153 0->154 0->156 0->157 0->158 0->159 0->160 0->161 0->162 0->163 0->164 0->165 0->166 0->168 0->169 0->170 0->172 0->173 0->174 0->175 0->182 0->183 0->184 0->188 0->193 0->197 0->202 0->207 0->208 0->209 0->214 0->215 0->217 0->219 0->221 0->223 0->225 0->227 0->229 0->231 0->232 0->233 0->235 0->236 0->237 0->238 0->239 0->240 0->242 0->243 0->244 0->245 0->246 0->249 0->250 0->252 0->253 0->254 0->255 0->258 0->259 0->261 0->262 0->263 0->265 0->266 0->268 0->269 0->274 0->276 0->277 0->279 0->280 0->281 0->283 0->284 0->285 0->287 0->288 0->289 0->290 0->291 0->292 0->293 2->1 2->1 2->1 3->1 3->1 3->1 4->1 4->1 4->1 4->77 5->1 5->1 5->1 6->1 6->1 6->1 7->1 7->1 7->12 8->1 8->1 8->10 8->13 8->23 9->1 9->1 9->11 9->29 10->1 10->1 11->1 11->1 12->1 12->1 12->8 12->19 12->20 12->47 12->65 13->1 13->1 13->1 13->13 13->22 13->23 13->24 13->25 13->26 13->27 13->28 13->29 13->29 13->30 13->31 13->32 13->37 13->39 13->41 13->43 13->44 13->45 13->48 13->49 13->53 13->57 13->59 13->61 13->62 13->66 13->70 13->71 13->78 13->80 13->82 13->85 13->87 13->94 13->95 13->97 13->100 13->111 13->294 13->295 13->296 13->297 13->298 14->1 14->2 14->2 15->1 15->3 15->3 16->1 16->5 16->5 17->1 17->6 17->6 18->7 18->7 19->1 20->1 21->9 21->9 22->1 22->1 22->28 23->1 23->1 23->24 23->37 23->50 23->75 24->1 24->1 24->25 24->39 24->54 24->72 25->1 25->1 25->10 25->23 25->41 25->43 25->45 25->58 25->74 26->1 26->1 26->43 27->1 27->1 27->1 28->1 28->44 28->91 28->130 28->156 28->157 29->1 29->31 29->32 29->92 29->109 30->1 30->1 30->44 31->1 31->11 31->29 32->1 32->13 37->1 37->1 37->23 37->37 37->38 37->38 37->50 37->51 37->52 37->67 37->75 37->96 37->112 37->120 37->299 37->300 37->301 37->308 37->309 37->310 37->311 37->319 37->320 37->321 37->322 37->323 37->325 37->326 37->327 37->328 38->1 38->37 39->1 39->1 39->24 39->39 39->40 39->40 39->54 39->55 39->56 39->68 39->72 39->84 39->98 39->99 39->113 39->121 39->302 39->303 39->304 39->312 39->313 39->314 39->315 39->316 39->329 39->330 39->331 39->332 39->333 39->335 39->336 40->1 40->39 41->1 41->41 41->42 41->42 41->43 41->58 41->69 41->101 41->114 41->122 41->305 41->317 41->318 41->337 42->1 42->41 43->1 43->1 43->45 43->72 43->74 43->74 43->74 43->88 43->115 43->123 44->1 44->1 44->44 44->79 44->79 44->93 44->107 44->110 44->117 45->1 45->1 45->1 45->25 45->41 45->45 45->46 45->46 45->63 45->64 45->306 45->307 46->1 46->45 47->1 47->20 47->20 48->1 48->22 48->22 49->1 49->1 49->37 50->1 50->1 50->51 50->81 50->104 50->128 51->1 51->1 51->52 52->1 52->1 52->24 52->50 52->140 53->1 53->1 53->39 54->1 54->1 54->55 54->83 54->102 54->136 54->211 54->247 55->1 55->1 55->25 55->54 55->155 55->204 55->248 56->1 56->1 57->1 57->1 57->41 58->1 58->1 58->10 58->23 58->86 58->86 59->1 59->26 59->26 60->1 60->43 61->1 61->30 61->30 62->1 62->1 62->45 63->1 63->1 63->92 63->109 64->1 64->1 64->58 64->86 67->1 67->1 67->81 67->81 67->324 67->342 67->354 67->355 68->1 68->1 68->83 68->334 68->343 68->356 68->357 69->1 69->1 69->1 69->86 69->338 69->344 71->1 72->1 72->1 72->24 72->39 72->72 72->73 72->73 72->102 72->103 72->130 72->134 72->143 72->145 72->148 72->152 72->345 72->346 72->347 72->348 72->358 72->359 72->360 72->361 73->1 73->72 74->1 74->1 74->43 74->43 74->45 74->60 74->60 74->75 74->77 74->89 74->116 74->126 75->1 75->1 75->23 75->37 75->75 75->76 75->76 75->104 75->105 75->349 75->350 75->351 75->352 75->362 75->363 75->364 75->365 76->1 76->75 77->1 77->1 77->1 77->90 77->91 77->106 77->106 77->339 77->340 79->1 79->1 79->44 79->92 79->93 79->108 79->109 79->110 79->129 79->129 79->142 79->147 79->341 79->353 80->1 80->49 80->49 81->1 81->1 81->51 81->67 82->1 82->53 82->53 83->1 83->1 83->55 83->171 83->181 83->200 84->1 84->56 84->56 85->1 85->57 85->57 86->1 86->1 86->10 86->23 86->58 86->58 88->1 88->1 88->72 89->1 89->1 89->75 90->1 90->1 90->1 91->1 91->44 91->130 91->156 91->157 92->1 92->1 92->31 92->109 92->109 92->118 92->118 93->1 93->108 94->1 94->62 94->62 96->1 98->1 101->1 102->1 102->1 102->124 102->136 102->144 102->149 102->211 102->247 102->367 102->373 102->374 103->1 103->1 103->125 103->146 103->153 103->256 103->368 103->379 103->380 104->1 104->1 104->90 104->127 104->128 104->156 104->162 104->172 104->369 104->370 104->385 104->386 105->1 105->1 105->128 105->157 105->164 105->174 105->371 105->372 105->389 105->390 106->1 106->1 106->1 106->77 107->1 107->79 107->79 108->1 108->1 108->44 108->118 108->119 108->119 108->366 109->1 109->1 109->31 109->92 109->92 110->1 110->44 112->1 112->67 112->67 112->96 112->96 113->1 113->68 113->68 113->98 113->98 114->1 114->69 114->69 114->101 114->101 115->1 115->88 115->88 116->1 116->89 116->89 118->1 118->1 118->31 118->92 118->92 118->109 118->109 119->1 119->44 124->1 124->1 124->131 124->132 124->133 124->133 124->150 124->151 124->158 124->166 124->176 124->177 124->184 124->187 124->202 124->222 124->375 124->376 124->377 124->378 124->393 124->394 124->395 124->396 124->397 124->398 124->399 124->400 124->411 124->412 124->413 124->414 124->415 124->416 124->417 124->418 124->419 124->420 124->427 124->428 124->429 124->433 124->434 124->435 124->443 124->444 125->1 125->1 125->135 125->136 125->137 125->137 125->154 125->155 125->159 125->160 125->161 125->168 125->169 125->170 125->179 125->180 125->193 125->201 125->209 125->381 125->382 125->383 125->384 125->401 125->402 125->403 125->404 125->405 125->406 125->421 125->422 125->423 125->424 125->425 125->426 125->430 125->431 125->432 125->438 125->439 125->440 125->451 125->452 127->1 127->1 127->105 127->138 127->139 127->163 127->173 127->182 127->387 127->388 127->407 127->408 128->1 128->1 128->140 128->141 128->165 128->175 128->183 128->391 128->392 128->409 128->410 129->1 129->44 129->108 129->108 130->1 130->134 130->150 130->207 130->223 130->236 130->249 131->1 131->1 131->1 131->198 132->1 132->1 133->1 133->125 134->1 134->44 134->91 134->130 134->154 134->156 134->157 134->214 134->231 134->243 134->258 135->1 135->1 135->1 136->1 136->1 137->1 138->1 138->1 139->1 139->1 139->77 140->1 140->1 141->1 141->1 141->77 142->1 142->129 142->129 143->1 143->130 143->130 144->1 144->124 144->124 145->1 145->134 145->134 146->1 146->125 146->125 150->1 150->131 150->131 150->134 151->1 151->1 151->167 151->178 151->216 151->222 151->232 151->237 151->246 151->253 151->257 151->436 151->437 151->445 151->446 151->447 151->449 151->450 151->459 151->467 151->468 151->469 151->489 151->490 151->491 151->507 151->508 151->509 151->547 151->548 151->569 151->570 154->1 154->44 154->91 154->130 154->135 154->135 154->156 154->157 155->1 155->1 155->171 155->181 155->224 155->230 155->239 155->244 155->255 155->262 155->441 155->442 155->453 155->454 155->455 155->457 155->458 155->474 155->482 155->483 155->484 155->518 155->519 155->520 155->536 155->537 155->538 155->579 155->580 155->601 155->602 156->1 156->44 156->91 156->130 156->157 156->163 157->1 157->44 157->91 157->130 157->156 157->165 158->1 158->150 158->150 159->1 160->1 160->154 160->154 161->1 162->1 162->156 162->156 163->1 163->44 163->91 163->130 163->156 163->157 164->1 164->157 164->157 165->1 165->44 165->91 165->130 165->156 165->157 167->1 167->1 167->177 167->185 167->186 167->187 167->188 167->189 167->207 167->217 167->219 167->220 167->233 167->235 167->448 167->460 167->461 167->462 167->463 167->464 167->465 167->466 167->492 167->493 167->494 167->495 167->501 167->502 167->503 167->504 167->505 167->506 167->559 167->560 167->561 167->562 167->563 167->565 167->566 167->567 167->568 167->624 167->625 167->649 167->650 167->651 167->652 171->1 171->1 171->180 171->194 171->195 171->196 171->197 171->198 171->214 171->225 171->227 171->228 171->240 171->242 171->456 171->475 171->476 171->477 171->478 171->479 171->480 171->481 171->521 171->522 171->523 171->524 171->530 171->531 171->532 171->533 171->534 171->535 171->591 171->592 171->593 171->594 171->595 171->597 171->598 171->599 171->600 171->639 171->640 171->661 171->662 171->663 171->664 173->1 173->163 173->163 175->1 175->165 175->165 176->1 176->179 176->251 176->275 177->1 177->185 178->1 178->1 178->103 178->190 178->191 178->191 178->192 178->223 178->238 178->254 178->470 178->471 178->472 178->473 178->510 178->511 178->512 178->513 178->514 178->515 178->516 178->517 178->571 178->572 178->573 178->574 178->575 178->576 178->577 178->578 179->1 179->195 179->273 179->278 180->1 180->194 181->1 181->1 181->199 181->200 181->200 181->201 181->231 181->245 181->263 181->485 181->486 181->487 181->488 181->539 181->540 181->541 181->542 181->543 181->544 181->545 181->546 181->603 181->604 181->605 181->606 181->607 181->608 181->609 181->610 184->1 184->176 184->176 185->1 185->1 185->125 185->206 185->218 185->247 185->270 185->270 185->274 185->280 185->611 185->612 185->641 185->642 185->643 185->665 185->666 185->667 185->687 185->688 186->1 186->1 186->203 186->203 186->204 186->205 186->206 186->224 186->230 186->236 186->252 186->266 186->496 186->497 186->498 186->499 186->500 186->549 186->550 186->551 186->552 186->553 186->554 186->555 186->556 186->557 186->558 186->616 186->617 186->618 186->619 186->620 186->621 186->622 186->623 187->1 187->125 188->1 188->1 189->1 189->1 189->134 190->1 190->1 190->1 190->198 191->1 191->1 192->1 192->125 193->1 193->179 193->179 194->1 194->1 194->226 194->256 194->272 194->272 194->277 194->284 194->626 194->627 194->653 194->654 194->655 194->676 194->677 194->678 194->695 194->696 195->1 195->1 195->210 195->210 195->211 195->212 195->213 195->243 195->261 195->269 195->525 195->526 195->527 195->528 195->529 195->581 195->582 195->583 195->584 195->585 195->586 195->587 195->588 195->589 195->590 195->631 195->632 195->633 195->634 195->635 195->636 195->637 195->638 196->1 197->1 197->1 198->1 198->1 198->44 198->91 198->130 198->156 198->157 199->1 199->1 199->1 199->228 200->1 200->1 201->1 203->1 203->224 203->230 204->1 204->1 205->1 205->1 205->1 206->1 206->125 207->1 207->1 207->207 207->208 207->208 207->221 207->564 208->1 208->207 210->1 211->1 211->1 212->1 212->1 212->1 212->189 212->220 213->1 214->1 214->1 214->214 214->215 214->215 214->229 214->596 215->1 215->214 216->1 216->186 216->224 216->230 216->282 217->1 217->185 217->185 218->1 218->1 218->1 218->185 218->217 218->233 218->234 218->249 218->251 218->264 218->271 218->276 218->282 218->283 218->289 218->292 218->462 218->492 218->493 218->615 218->647 218->648 218->669 218->671 218->672 218->673 218->674 218->675 218->692 218->693 218->694 218->705 218->706 218->707 218->713 218->714 219->1 219->186 219->186 220->1 220->207 221->1 221->1 222->1 222->125 222->192 223->1 223->134 223->190 223->190 224->1 224->196 224->213 224->286 225->1 225->194 225->194 226->1 226->1 226->1 226->194 226->225 226->240 226->241 226->258 226->260 226->267 226->273 226->279 226->286 226->287 226->291 226->293 226->477 226->521 226->522 226->630 226->659 226->660 226->680 226->682 226->683 226->684 226->685 226->686 226->700 226->701 226->702 226->710 226->711 226->712 226->715 226->716 227->1 227->195 227->195 228->1 228->1 228->214 229->1 229->1 230->1 231->1 231->44 231->91 231->130 231->156 231->157 231->199 231->199 232->1 232->216 232->216 234->1 234->1 234->134 234->236 236->1 236->134 236->205 236->205 237->1 237->222 237->222 238->1 238->223 238->223 239->1 239->224 239->224 241->1 241->1 241->44 241->91 241->130 241->156 241->157 241->243 243->1 243->44 243->91 243->130 243->156 243->157 243->212 243->212 244->1 244->230 244->230 245->1 245->231 245->231 247->1 247->136 247->211 247->218 247->218 247->248 247->275 247->281 247->288 247->613 247->614 247->644 247->645 247->646 247->668 247->689 247->690 247->691 247->703 247->704 248->1 248->155 248->204 248->218 248->218 249->1 249->1 249->249 249->250 249->250 249->265 249->670 250->1 250->249 251->1 251->179 251->275 252->1 252->236 252->236 256->1 256->226 256->226 256->257 256->278 256->285 256->290 256->628 256->629 256->656 256->657 256->658 256->679 256->697 256->698 256->699 256->708 256->709 257->1 257->226 257->226 258->1 258->1 258->258 258->259 258->259 258->268 258->681 259->1 259->258 260->1 260->194 261->1 261->243 261->243 264->1 264->1 264->249 265->1 265->1 267->1 267->1 267->258 268->1 268->1 270->1 270->125 270->185 270->206 271->1 271->186 272->1 272->260 273->1 273->195 274->1 274->270 274->270 275->1 275->179 275->251 276->1 276->271 276->271 277->1 277->272 277->272 278->1 278->195 278->273 279->1 279->273 279->273 281->1 281->275 281->275 282->1 282->271 285->1 285->278 285->278 286->1 286->213 289->1 289->282 289->282 291->1 291->286 291->286
>>>Token main ( ) { FILE * ReplacementFor_fpin , * ReplacementFor_fpout ; int i = ( 0x1215 + 2738 - 0x1cc7 ) , ReplacementFor_j = ( 0x8df + 5316 - 0x1da3 ) , ReplacementFor_skip_flg = ReplacementFor_DISABLE , ReplacementFor_te = ( 0xf62 + 658 - 0x11f4 ) , ReplacementFor_temp = ( 0x994 + 6600 - 0x235c ) ; ReplacementFor_fpin = fopen ( " \x2e \x2e " " \\ " " \x42 \x2d \x73 \x6d \x61 \x6c \x6c \x2d \x61 \x74 \x74 \x65 \x6d \x70 \x74 \x33 \x2e \x69 \x6e " , " \x72 " ) ; if ( ReplacementFor_fpin == NULL ) { printf ( " \x49 \x6e \x70 \x75 \x74 \x20 \x66 \x69 \x6c \x65 \x20 \x63 \x6f \x75 \x6c \x64 \x6e \x74 \x20 \x62 \x65 \x20 \x6f \x70 \x65 \x6e \x65 \x64 " ) ; exit ( ( 0x2b7 + 6882 - 0x1d99 ) ) ; } fscanf ( ReplacementFor_fpin , " \x25 \x64 " , & T ) ; ReplacementFor_fpout = fopen ( " \x2e \x2e " " \\ " " \x4d \x61 \x67 \x69 \x6b \x61 \x5f \x6f \x75 \x74 \x2e \x74 \x78 \x74 " , " \x77 " ) ; while ( ReplacementFor_cur_te <= T ) { i = ( 0x119 + 5029 - 0x14be ) ; fscanf ( ReplacementFor_fpin , " \x25 \x64 " , & ReplacementFor_C ) ; for ( ReplacementFor_j = ( 0x62a + 5832 - 0x1cf2 ) ; ReplacementFor_j < ReplacementFor_C ; ReplacementFor_j ++ ) { fscanf ( ReplacementFor_fpin , " \x25 \x63 " , & ReplacementFor_co [ ReplacementFor_j ] . ReplacementFor_b1 ) ; if ( ReplacementFor_co [ ReplacementFor_j ] . ReplacementFor_b1 == ( ( char ) ( 0x10a + 9696 - 0x26ca ) ) ) fscanf ( ReplacementFor_fpin , " \x25 \x63 " , & ReplacementFor_co [ ReplacementFor_j ] . ReplacementFor_b1 ) ; fscanf ( ReplacementFor_fpin , " \x25 \x63 " , & ReplacementFor_co [ ReplacementFor_j ] . ReplacementFor_b2 ) ; fscanf ( ReplacementFor_fpin , " \x25 \x63 " , & ReplacementFor_co [ ReplacementFor_j ] . ReplacementFor_fin ) ; } fscanf ( ReplacementFor_fpin , " \x25 \x64 " , & ReplacementFor_D ) ; for ( ReplacementFor_j = ( 0xcb0 + 4808 - 0x1f78 ) ; ReplacementFor_j < ReplacementFor_D ; ReplacementFor_j ++ ) { fscanf ( ReplacementFor_fpin , " \x25 \x63 " , & ReplacementFor_de [ ReplacementFor_j ] . ReplacementFor_d1 ) ; if ( ReplacementFor_de [ ReplacementFor_j ] . ReplacementFor_d1 == ( ( char ) ( 0x1ecb + 132 - 0x1f2f ) ) ) fscanf ( ReplacementFor_fpin , " \x25 \x63 " , & ReplacementFor_de [ ReplacementFor_j ] . ReplacementFor_d1 ) ; fscanf ( ReplacementFor_fpin , " \x25 \x63 " , & ReplacementFor_de [ ReplacementFor_j ] . ReplacementFor_d2 ) ; ReplacementFor_de [ ReplacementFor_j ] . ReplacementFor_ind = ( 0xe2f + 2035 - 0x1622 ) ; } fscanf ( ReplacementFor_fpin , " \x25 \x64 " , & ReplacementFor_N ) ; for ( ReplacementFor_j = ( 0x104 + 4079 - 0x10f3 ) ; ReplacementFor_j < ReplacementFor_N ; ReplacementFor_j ++ ) { fscanf ( ReplacementFor_fpin , " \x25 \x63 " , & ReplacementFor_alpha [ ReplacementFor_j ] ) ; if ( ReplacementFor_alpha [ ReplacementFor_j ] == ( ( char ) ( 0x1d98 + 433 - 0x1f29 ) ) ) fscanf ( ReplacementFor_fpin , " \x25 \x63 " , & ReplacementFor_alpha [ ReplacementFor_j ] ) ; } ReplacementFor_te = ( 0x86 + 7291 - 0x1d00 ) ; ReplacementFor_res [ i ] = ReplacementFor_alpha [ ( 0x20b + 6740 - 0x1c5f ) ] ; i ++ ; while ( ReplacementFor_te <= ( ReplacementFor_N ) ) { for ( ReplacementFor_j = ( 0x16c0 + 451 - 0x1883 ) ; ReplacementFor_j < ReplacementFor_D ; ReplacementFor_j ++ ) { if ( ReplacementFor_res [ i - ( 0x1a9 + 2 - 0x1aa ) ] == ReplacementFor_de [ ReplacementFor_j ] . ReplacementFor_d1 ) { if ( ReplacementFor_de [ ReplacementFor_j ] . ReplacementFor_ind == ( 0x1580 + 2091 - 0x1dab ) ) { ReplacementFor_de [ ReplacementFor_j ] . ReplacementFor_loc [ ReplacementFor_de [ ReplacementFor_j ] . ReplacementFor_ind ] = i - ( 0xe14 + 1017 - 0x120c ) ; ReplacementFor_de [ ReplacementFor_j ] . ReplacementFor_c2d [ ReplacementFor_de [ ReplacementFor_j ] . ReplacementFor_ind ] = ReplacementFor_de [ ReplacementFor_j ] . ReplacementFor_d2 ; ReplacementFor_de [ ReplacementFor_j ] . ReplacementFor_ind ++ ; } else if ( ReplacementFor_de [ ReplacementFor_j ] . ReplacementFor_c2d [ ReplacementFor_de [ ReplacementFor_j ] . ReplacementFor_ind - ( 0x3d0 + 8560 - 0x253f ) ] == ReplacementFor_de [ ReplacementFor_j ] . ReplacementFor_d1 ) { if ( ReplacementFor_res [ ReplacementFor_de [ ReplacementFor_j ] . ReplacementFor_loc [ ReplacementFor_de [ ReplacementFor_j ] . ReplacementFor_ind - ( 0x1015 + 4898 - 0x2336 ) ] ] != ReplacementFor_de [ ReplacementFor_j ] . ReplacementFor_d2 ) { ReplacementFor_de [ ReplacementFor_j ] . ReplacementFor_ind -- ; while ( ReplacementFor_de [ ReplacementFor_j ] . ReplacementFor_ind >= ( 0x20d7 + 1145 - 0x2550 ) ) { if ( ( ReplacementFor_de [ ReplacementFor_j ] . ReplacementFor_c2d [ ReplacementFor_de [ ReplacementFor_j ] . ReplacementFor_ind - ( 0x914 + 961 - 0xcd4 ) ] == ReplacementFor_de [ ReplacementFor_j ] . ReplacementFor_d1 ) && ( ReplacementFor_res [ ReplacementFor_de [ ReplacementFor_j ] . ReplacementFor_loc [ ReplacementFor_de [ ReplacementFor_j ] . ReplacementFor_ind - ( 0x10a2 + 4008 - 0x2049 ) ] ] == ReplacementFor_de [ ReplacementFor_j ] . ReplacementFor_d2 ) ) { for ( ReplacementFor_temp = ReplacementFor_de [ ReplacementFor_j ] . ReplacementFor_loc [ ReplacementFor_de [ ReplacementFor_j ] . ReplacementFor_ind - ( 0x208f + 75 - 0x20d9 ) ] ; ReplacementFor_temp < i ; ReplacementFor_temp ++ ) { ReplacementFor_res [ ReplacementFor_temp ] = ' \0 ' ; } i = ReplacementFor_de [ ReplacementFor_j ] . ReplacementFor_loc [ ReplacementFor_de [ ReplacementFor_j ] . ReplacementFor_ind - ( 0x1478 + 281 - 0x1590 ) ] ; break ; } else { ReplacementFor_de [ ReplacementFor_j ] . ReplacementFor_ind -- ; } } if ( ReplacementFor_de [ ReplacementFor_j ] . ReplacementFor_ind < ( 0x8 + 2611 - 0xa3b ) ) { ReplacementFor_de [ ReplacementFor_j ] . ReplacementFor_ind ++ ; ReplacementFor_de [ ReplacementFor_j ] . ReplacementFor_c2d [ ReplacementFor_de [ ReplacementFor_j ] . ReplacementFor_ind ] = ReplacementFor_de [ ReplacementFor_j ] . ReplacementFor_d2 ; ReplacementFor_de [ ReplacementFor_j ] . ReplacementFor_loc [ ReplacementFor_de [ ReplacementFor_j ] . ReplacementFor_ind ] = i - ( 0x1225 + 1241 - 0x16fd ) ; ReplacementFor_de [ ReplacementFor_j ] . ReplacementFor_ind ++ ; } } else { ReplacementFor_de [ ReplacementFor_j ] . ReplacementFor_ind -- ; ReplacementFor_de [ ReplacementFor_j ] . ReplacementFor_c2d [ ReplacementFor_de [ ReplacementFor_j ] . ReplacementFor_ind ] = ' \0 ' ; for ( ReplacementFor_temp = ReplacementFor_de [ ReplacementFor_j ] . ReplacementFor_loc [ ReplacementFor_de [ ReplacementFor_j ] . ReplacementFor_ind ] ; ReplacementFor_temp < i ; ReplacementFor_temp ++ ) { ReplacementFor_res [ ReplacementFor_temp ] = ' \0 ' ; } i = ReplacementFor_de [ ReplacementFor_j ] . ReplacementFor_loc [ ReplacementFor_de [ ReplacementFor_j ] . ReplacementFor_ind ] ; } } else if ( ReplacementFor_de [ ReplacementFor_j ] . ReplacementFor_c2d [ ReplacementFor_de [ ReplacementFor_j ] . ReplacementFor_ind - ( 0x1660 + 745 - 0x1948 ) ] == ReplacementFor_de [ ReplacementFor_j ] . ReplacementFor_d2 ) { ReplacementFor_de [ ReplacementFor_j ] . ReplacementFor_loc [ ReplacementFor_de [ ReplacementFor_j ] . ReplacementFor_ind ] = i - ( 0xc29 + 1230 - 0x10f6 ) ; ReplacementFor_de [ ReplacementFor_j ] . ReplacementFor_c2d [ ReplacementFor_de [ ReplacementFor_j ] . ReplacementFor_ind ] = ReplacementFor_de [ ReplacementFor_j ] . ReplacementFor_d2 ; ReplacementFor_de [ ReplacementFor_j ] . ReplacementFor_ind ++ ; } } if ( ReplacementFor_res [ i - ( 0x168b + 1866 - 0x1dd4 ) ] == ReplacementFor_de [ ReplacementFor_j ] . ReplacementFor_d2 ) { if ( ReplacementFor_de [ ReplacementFor_j ] . ReplacementFor_ind == ( 0x51b + 6373 - 0x1e00 ) ) { ReplacementFor_de [ ReplacementFor_j ] . ReplacementFor_loc [ ( 0x6a + 2348 - 0x996 ) ] = i - ( 0x3b9 + 5585 - 0x1989 ) ; ReplacementFor_de [ ReplacementFor_j ] . ReplacementFor_c2d [ ( 0x899 + 2765 - 0x1366 ) ] = ReplacementFor_de [ ReplacementFor_j ] . ReplacementFor_d1 ; ReplacementFor_de [ ReplacementFor_j ] . ReplacementFor_ind ++ ; } else if ( ReplacementFor_de [ ReplacementFor_j ] . ReplacementFor_c2d [ ReplacementFor_de [ ReplacementFor_j ] . ReplacementFor_ind - ( 0x87d + 5156 - 0x1ca0 ) ] == ReplacementFor_de [ ReplacementFor_j ] . ReplacementFor_d2 ) { if ( ReplacementFor_res [ ReplacementFor_de [ ReplacementFor_j ] . ReplacementFor_loc [ ReplacementFor_de [ ReplacementFor_j ] . ReplacementFor_ind - ( 0x40 + 8203 - 0x204a ) ] ] != ReplacementFor_de [ ReplacementFor_j ] . ReplacementFor_d1 ) { ReplacementFor_de [ ReplacementFor_j ] . ReplacementFor_ind -- ; while ( ReplacementFor_de [ ReplacementFor_j ] . ReplacementFor_ind >= ( 0xfb5 + 4019 - 0x1f68 ) ) { if ( ( ReplacementFor_de [ ReplacementFor_j ] . ReplacementFor_c2d [ ReplacementFor_de [ ReplacementFor_j ] . ReplacementFor_ind - ( 0x1ec0 + 832 - 0x21ff ) ] == ReplacementFor_de [ ReplacementFor_j ] . ReplacementFor_d2 ) && ( ReplacementFor_res [ ReplacementFor_de [ ReplacementFor_j ] . ReplacementFor_loc [ ReplacementFor_de [ ReplacementFor_j ] . ReplacementFor_ind - ( 0x15d9 + 2548 - 0x1fcc ) ] ] == ReplacementFor_de [ ReplacementFor_j ] . ReplacementFor_d1 ) ) { for ( ReplacementFor_temp = ReplacementFor_de [ ReplacementFor_j ] . ReplacementFor_loc [ ReplacementFor_de [ ReplacementFor_j ] . ReplacementFor_ind - ( 0x73c + 6213 - 0x1f80 ) ] ; ReplacementFor_temp < i ; ReplacementFor_temp ++ ) { ReplacementFor_res [ ReplacementFor_temp ] = ' \0 ' ; } i = ReplacementFor_de [ ReplacementFor_j ] . ReplacementFor_loc [ ReplacementFor_de [ ReplacementFor_j ] . ReplacementFor_ind - ( 0x1093 + 3819 - 0x1f7d ) ] ; break ; } else { ReplacementFor_de [ ReplacementFor_j ] . ReplacementFor_ind -- ; } } if ( ReplacementFor_de [ ReplacementFor_j ] . ReplacementFor_ind < ( 0x604 + 3510 - 0x13ba ) ) { ReplacementFor_de [ ReplacementFor_j ] . ReplacementFor_ind ++ ; ReplacementFor_de [ ReplacementFor_j ] . ReplacementFor_c2d [ ReplacementFor_de [ ReplacementFor_j ] . ReplacementFor_ind ] = ReplacementFor_de [ ReplacementFor_j ] . ReplacementFor_d1 ; ReplacementFor_de [ ReplacementFor_j ] . ReplacementFor_loc [ ReplacementFor_de [ ReplacementFor_j ] . ReplacementFor_ind ] = i - ( 0x1660 + 932 - 0x1a03 ) ; ReplacementFor_de [ ReplacementFor_j ] . ReplacementFor_ind ++ ; } } else { ReplacementFor_de [ ReplacementFor_j ] . ReplacementFor_ind -- ; ReplacementFor_de [ ReplacementFor_j ] . ReplacementFor_c2d [ ReplacementFor_de [ ReplacementFor_j ] . ReplacementFor_ind ] = ' \0 ' ; for ( ReplacementFor_temp = ReplacementFor_de [ ReplacementFor_j ] . ReplacementFor_loc [ ReplacementFor_de [ ReplacementFor_j ] . ReplacementFor_ind ] ; ReplacementFor_temp < i ; ReplacementFor_temp ++ ) { ReplacementFor_res [ ReplacementFor_temp ] = ' \0 ' ; } i = ReplacementFor_de [ ReplacementFor_j ] . ReplacementFor_loc [ ReplacementFor_de [ ReplacementFor_j ] . ReplacementFor_ind ] ; } } else if ( ReplacementFor_de [ ReplacementFor_j ] . ReplacementFor_c2d [ ReplacementFor_de [ ReplacementFor_j ] . ReplacementFor_ind - ( 0xf07 + 545 - 0x1127 ) ] == ReplacementFor_de [ ReplacementFor_j ] . ReplacementFor_d1 ) { ReplacementFor_de [ ReplacementFor_j ] . ReplacementFor_loc [ ReplacementFor_de [ ReplacementFor_j ] . ReplacementFor_ind ] = i - ( 0x873 + 3272 - 0x153a ) ; ReplacementFor_de [ ReplacementFor_j ] . ReplacementFor_c2d [ ReplacementFor_de [ ReplacementFor_j ] . ReplacementFor_ind ] = ReplacementFor_de [ ReplacementFor_j ] . ReplacementFor_d1 ; ReplacementFor_de [ ReplacementFor_j ] . ReplacementFor_ind ++ ; } } } if ( ReplacementFor_te == ReplacementFor_N ) break ; for ( ReplacementFor_j = ( 0x55b + 1754 - 0xc35 ) ; ReplacementFor_j < ReplacementFor_C ; ReplacementFor_j ++ ) { if ( ReplacementFor_alpha [ ReplacementFor_te ] == ReplacementFor_co [ ReplacementFor_j ] . ReplacementFor_b1 ) { if ( ReplacementFor_res [ i - ( 0x740 + 5941 - 0x1e74 ) ] == ReplacementFor_co [ ReplacementFor_j ] . ReplacementFor_b2 ) { ReplacementFor_res [ i - ( 0x126f + 4737 - 0x24ef ) ] = ReplacementFor_co [ ReplacementFor_j ] . ReplacementFor_fin ; ReplacementFor_skip_flg = ReplacementFor_ENABLE ; } } if ( ReplacementFor_alpha [ ReplacementFor_te ] == ReplacementFor_co [ ReplacementFor_j ] . ReplacementFor_b2 ) { if ( ReplacementFor_res [ i - ( 0x6cf + 8250 - 0x2708 ) ] == ReplacementFor_co [ ReplacementFor_j ] . ReplacementFor_b1 ) { ReplacementFor_res [ i - ( 0x8e3 + 6850 - 0x23a4 ) ] = ReplacementFor_co [ ReplacementFor_j ] . ReplacementFor_fin ; ReplacementFor_skip_flg = ReplacementFor_ENABLE ; } } } if ( ReplacementFor_skip_flg == ReplacementFor_DISABLE ) { ReplacementFor_res [ i ] = ReplacementFor_alpha [ ReplacementFor_te ] ; i ++ ; } else { ReplacementFor_skip_flg = ReplacementFor_DISABLE ; } ReplacementFor_te ++ ; } fprintf ( ReplacementFor_fpout , " \x43 \x61 \x73 \x65 \x20 \x23 \x25 \x64 \x3a \x20 \x5b " , ReplacementFor_cur_te ) ; ReplacementFor_j = ( 0x139 + 6708 - 0x1b6d ) ; while ( ReplacementFor_j < i ) { if ( i > ( 0x7f0 + 7403 - 0x24da ) ) { fprintf ( ReplacementFor_fpout , " \x25 \x63 \x2c \x20 " , ReplacementFor_res [ ReplacementFor_j ] ) ; ReplacementFor_j ++ ; if ( ReplacementFor_j == i - ( 0x828 + 5483 - 0x1d92 ) ) { fprintf ( ReplacementFor_fpout , " \x25 \x63 " , ReplacementFor_res [ ReplacementFor_j ] ) ; ReplacementFor_j ++ ; } } else { fprintf ( ReplacementFor_fpout , " \x25 \x63 " , ReplacementFor_res [ ReplacementFor_j ] ) ; ReplacementFor_j ++ ; } } fprintf ( ReplacementFor_fpout , " \x5d " " \n " ) ; for ( ReplacementFor_j = ( 0x1999 + 2160 - 0x2209 ) ; ReplacementFor_j < ReplacementFor_N ; ReplacementFor_j ++ ) { ReplacementFor_res [ ReplacementFor_j ] = ' \0 ' ; ReplacementFor_alpha [ ReplacementFor_j ] = ' \0 ' ; } ReplacementFor_cur_te ++ ; } fclose ( ReplacementFor_fpin ) ; fclose ( ReplacementFor_fpout ) ; }
>>>Func
METHOD main
METHOD_RETURN int
scanf scanf("\x25\x64",&T)
RETURN return(0x101a+1424-0x15aa); return(0x101a+1424-0x15aa);
<operator>.lessEqualsThan t<=T
<operator>.postIncrement t++
<operator>.subtraction 0x101a+1424-0x15aa
<operator>.assignment t=(0xe0c+5371-0x2306)
scanf scanf(\012"\x25\x64\x25\x64\x25\x64",&ReplacementFor_n,&ReplacementFor_d1,&\012ReplacementFor_g1)
printf printf("\x43\x61\x73\x65\x20\x23\x25\x64\x3a\x20",t)
<operator>.logicalOr (\012ReplacementFor_d1>(0x933+7162-0x252d)&&ReplacementFor_g1==(0xb91+4255-0x1c30))||\012(ReplacementFor_d1<(0xe8c+476-0x1004)&&ReplacementFor_g1==(0x1c0a+2691-0x2629))
IDENTIFIER ReplacementFor_d1 if (ReplacementFor_d1)
<operator>.lessEqualsThan ReplacementFor_d2\012<=ReplacementFor_n
<operator>.addition 0x101a+1424
<operator>.subtraction 0xe0c+5371-0x2306
printf printf("\x42\x72\x6f\x6b\x65\x6e" "\n")
<operator>.assignment ReplacementFor_g=ReplacementFor_gcd(ReplacementFor_d1 (0x104d+1231-0x14b8))
<operator>.assignmentDivision ReplacementFor_d1/=ReplacementFor_g
<operator>.assignment ReplacementFor_d2=(0x102+854-0x3f4)/\012ReplacementFor_g
printf printf("\x50\x6f\x73\x73\x69\x62\x6c\x65" "\n")
<operator>.addition 0xe0c+5371
<operator>.logicalAnd ReplacementFor_d1>(0x933+7162-0x252d)&&ReplacementFor_g1==(0xb91+4255-0x1c30)
<operator>.logicalAnd ReplacementFor_d1<(0xe8c+476-0x1004)&&ReplacementFor_g1==(0x1c0a+2691-0x2629)
<operator>.assignment ReplacementFor_d2=(0x1d9+3285-0xead)
printf printf(\012"\x42\x72\x6f\x6b\x65\x6e" "\n")
<operator>.greaterThan ReplacementFor_d1>(0x933+7162-0x252d)
<operator>.equals ReplacementFor_g1==(0xb91+4255-0x1c30)
<operator>.lessThan ReplacementFor_d1<(0xe8c+476-0x1004)
<operator>.equals ReplacementFor_g1==(0x1c0a+2691-0x2629)
ReplacementFor_gcd ReplacementFor_gcd(ReplacementFor_d1 (0x104d+1231-0x14b8))
<operator>.division (0x102+854-0x3f4)/\012ReplacementFor_g
<operator>.subtraction 0x933+7162-0x252d
<operator>.subtraction 0xb91+4255-0x1c30
<operator>.subtraction 0xe8c+476-0x1004
<operator>.subtraction 0x1c0a+2691-0x2629
<operator>.subtraction 0x104d+1231-0x14b8
<operator>.subtraction 0x102+854-0x3f4
<operator>.subtraction 0x1d9+3285-0xead
<operator>.addition 0x933+7162
<operator>.addition 0xb91+4255
<operator>.addition 0xe8c+476
<operator>.addition 0x1c0a+2691
<operator>.addition 0x104d+1231
<operator>.addition 0x102+854
<operator>.addition 0x1d9+3285
<operator>.addressOf &ReplacementFor_n
<operator>.addressOf &ReplacementFor_d1
<operator>.addressOf &\012ReplacementFor_g1
>>>PDG&48 0->2 0->4 0->5 0->6 0->8 0->9 0->11 0->12 0->13 0->14 0->15 0->17 0->19 0->20 0->24 0->25 0->26 0->27 0->28 0->29 0->30 0->31 0->32 0->33 0->34 0->35 0->36 0->37 0->38 0->39 0->40 0->41 0->42 0->43 0->44 2->1 2->4 3->1 4->1 4->1 4->1 4->4 4->5 4->8 4->9 4->9 4->10 4->21 4->25 4->31 4->38 4->45 4->46 4->47 5->1 5->4 6->1 6->1 6->3 7->1 7->1 7->4 8->1 8->1 8->1 8->12 9->1 9->5 10->1 10->1 10->1 10->12 10->15 10->16 10->17 10->18 10->23 10->29 10->30 10->35 10->36 10->37 10->42 10->43 10->44 12->1 12->1 12->1 12->8 12->19 12->24 14->1 14->7 14->7 15->1 16->1 16->1 16->17 16->30 17->1 17->1 17->25 18->1 18->1 18->12 19->1 21->1 21->1 21->10 21->10 21->22 21->27 21->33 21->40 22->1 22->1 22->10 22->10 23->1 23->1 23->12 24->1 25->1 25->1 25->21 25->21 25->26 25->27 25->29 25->32 25->39 26->1 26->1 26->21 26->21 26->28 27->1 27->1 27->22 27->22 27->25 27->28 27->29 27->34 27->41 28->1 28->1 28->22 28->22 28->26 29->1 29->16 29->16 29->17 30->1 30->1 30->18 30->18 31->1 31->25 31->25 32->1 32->26 32->26 33->1 33->27 33->27 34->1 34->28 34->28 35->1 35->29 35->29 36->1 36->30 36->30 37->1 37->23 37->23
>>>Token int main ( ) { scanf ( " \x25 \x64 " , & T ) ; for ( t = ( 0xe0c + 5371 - 0x2306 ) ; t <= T ; t ++ ) { scanf ( " \x25 \x64 \x25 \x64 \x25 \x64 " , & ReplacementFor_n , & ReplacementFor_d1 , & ReplacementFor_g1 ) ; printf ( " \x43 \x61 \x73 \x65 \x20 \x23 \x25 \x64 \x3a \x20 " , t ) ; if ( ( ReplacementFor_d1 > ( 0x933 + 7162 - 0x252d ) && ReplacementFor_g1 == ( 0xb91 + 4255 - 0x1c30 ) ) || ( ReplacementFor_d1 < ( 0xe8c + 476 - 0x1004 ) && ReplacementFor_g1 == ( 0x1c0a + 2691 - 0x2629 ) ) ) { printf ( " \x42 \x72 \x6f \x6b \x65 \x6e " " \n " ) ; continue ; } if ( ReplacementFor_d1 ) { ReplacementFor_g = ReplacementFor_gcd ( ReplacementFor_d1 , ( 0x104d + 1231 - 0x14b8 ) ) ; ReplacementFor_d1 /= ReplacementFor_g ; ReplacementFor_d2 = ( 0x102 + 854 - 0x3f4 ) / ReplacementFor_g ; } else ReplacementFor_d2 = ( 0x1d9 + 3285 - 0xead ) ; if ( ReplacementFor_d2 <= ReplacementFor_n ) printf ( " \x50 \x6f \x73 \x73 \x69 \x62 \x6c \x65 " " \n " ) ; else printf ( " \x42 \x72 \x6f \x6b \x65 \x6e " " \n " ) ; } return ( 0x101a + 1424 - 0x15aa ) ; }
>>>Func
METHOD ReplacementFor_fill_happy
METHOD_RETURN void
PARAM int base
memset memset(ReplacementFor_happy \012(0x14c3+561-0x16f4) sizeof(ReplacementFor_happy))
<operator>.assignment ReplacementFor_happy[\012(0x2071+1568-0x2690)]=(0x4a2+121-0x51a)
<operator>.lessEqualsThan i<=\012ReplacementFor_N
<operator>.preIncrement ++i
<operator>.subtraction 0x14c3+561-0x16f4
<operator>.subtraction 0x4a2+121-0x51a
<operator>.assignment i=(0xbe3+6552-0x2579)
<operator>.assignment ReplacementFor_ni=i
<operator>.assignment ReplacementFor_sp=\012(0xc18+4602-0x1e12)
<operator>.assignment ReplacementFor_nv=ReplacementFor_happy[ReplacementFor_ni]==(0x22f+5521-0x17be)?-\012(0x675+4040-0x163c):ReplacementFor_happy[ReplacementFor_ni]
<operator>.addition 0x14c3+561
<operator>.subtraction 0x2071+1568-0x2690
<operator>.addition 0x4a2+121
<operator>.equals ReplacementFor_happy[ReplacementFor_ni]==\012(0x1bba+1052-0x1fd6)
<operator>.greaterThan ReplacementFor_sp>(0x1747+2461-0x20e4)
<operator>.assignment ReplacementFor_happy[ReplacementFor_stack\012[--ReplacementFor_sp]]=ReplacementFor_nv
<operator>.addition 0x2071+1568
<operator>.subtraction 0xbe3+6552-0x2579
<operator>.subtraction 0xc18+4602-0x1e12
<operator>.assignment ReplacementFor_stack[ReplacementFor_sp++]=\012ReplacementFor_ni
<operator>.assignment ReplacementFor_happy[ReplacementFor_ni]=(0x1b63+2667-0x25cc)
<operator>.assignment ReplacementFor_ni=ReplacementFor_next_step(ReplacementFor_ni,base)
<operator>.conditional ReplacementFor_happy[ReplacementFor_ni]==(0x22f+5521-0x17be)?-\012(0x675+4040-0x163c):ReplacementFor_happy[ReplacementFor_ni]
<operator>.addition 0xbe3+6552
<operator>.addition 0xc18+4602
<operator>.subtraction 0x1bba+1052-0x1fd6
<operator>.equals ReplacementFor_happy[ReplacementFor_ni]==(0x22f+5521-0x17be)
<operator>.minus -\012(0x675+4040-0x163c)
<operator>.subtraction 0x1747+2461-0x20e4
<operator>.addition 0x1bba+1052
<operator>.subtraction 0x1b63+2667-0x25cc
ReplacementFor_next_step ReplacementFor_next_step(ReplacementFor_ni,base)
<operator>.subtraction 0x22f+5521-0x17be
<operator>.subtraction 0x675+4040-0x163c
<operator>.addition 0x1747+2461
<operator>.postIncrement ReplacementFor_sp++
<operator>.addition 0x1b63+2667
<operator>.addition 0x22f+5521
<operator>.addition 0x675+4040
<operator>.preDecrement --ReplacementFor_sp
<operator>.indirectIndexAccess ReplacementFor_happy[ReplacementFor_ni]
<operator>.indirectIndexAccess ReplacementFor_happy[ReplacementFor_ni]
<operator>.indirectIndexAccess ReplacementFor_happy[ReplacementFor_stack\012[--ReplacementFor_sp]]
<operator>.indirectIndexAccess ReplacementFor_stack[ReplacementFor_sp++]
<operator>.indirectIndexAccess ReplacementFor_happy[ReplacementFor_ni]
<operator>.indirectIndexAccess ReplacementFor_happy[ReplacementFor_ni]
<operator>.indirectIndexAccess ReplacementFor_stack\012[--ReplacementFor_sp]
>>>PDG&50 0->2 0->3 0->5 0->6 0->7 0->8 0->10 0->13 0->14 0->15 0->17 0->18 0->19 0->20 0->21 0->22 0->26 0->27 0->28 0->31 0->32 0->33 0->34 0->35 0->36 0->37 0->38 0->39 0->40 0->41 0->42 2->1 2->34 3->1 3->1 3->1 3->12 3->16 3->25 3->29 4->1 4->1 4->1 5->1 5->1 5->1 5->5 5->6 5->6 5->10 5->10 5->11 5->12 5->16 5->17 5->21 5->25 5->27 5->28 5->29 5->31 5->32 5->35 5->37 5->40 5->43 5->48 6->1 6->5 7->1 7->3 7->3 8->1 8->4 8->4 9->1 9->1 9->5 10->22 10->34 11->17 11->38 12->18 14->1 16->16 16->22 16->23 16->24 16->28 16->29 16->32 16->33 16->34 16->38 16->39 16->43 16->46 16->47 17->17 17->18 17->31 17->37 17->42 17->42 17->45 17->49 20->1 20->9 20->9 21->11 21->11 23->16 24->22 24->34 28->16 28->16 29->12 29->16 29->25 29->30 29->36 29->41 29->44 30->12 30->25 31->17 31->17 33->23 33->23 34->24 34->24 35->29 35->29 36->30 36->30 38->17 42->17
>>>Token void ReplacementFor_fill_happy ( int base ) { int i ; memset ( ReplacementFor_happy , ( 0x14c3 + 561 - 0x16f4 ) , sizeof ( ReplacementFor_happy ) ) ; ReplacementFor_happy [ ( 0x2071 + 1568 - 0x2690 ) ] = ( 0x4a2 + 121 - 0x51a ) ; for ( i = ( 0xbe3 + 6552 - 0x2579 ) ; i <= ReplacementFor_N ; ++ i ) { int ReplacementFor_ni = i , ReplacementFor_sp = ( 0xc18 + 4602 - 0x1e12 ) ; while ( ReplacementFor_happy [ ReplacementFor_ni ] == ( 0x1bba + 1052 - 0x1fd6 ) ) { ReplacementFor_stack [ ReplacementFor_sp ++ ] = ReplacementFor_ni ; ReplacementFor_happy [ ReplacementFor_ni ] = ( 0x1b63 + 2667 - 0x25cc ) ; ReplacementFor_ni = ReplacementFor_next_step ( ReplacementFor_ni , base ) ; } int ReplacementFor_nv = ReplacementFor_happy [ ReplacementFor_ni ] == ( 0x22f + 5521 - 0x17be ) ? - ( 0x675 + 4040 - 0x163c ) : ReplacementFor_happy [ ReplacementFor_ni ] ; while ( ReplacementFor_sp > ( 0x1747 + 2461 - 0x20e4 ) ) ReplacementFor_happy [ ReplacementFor_stack [ -- ReplacementFor_sp ] ] = ReplacementFor_nv ; } }
>>>Func
METHOD ReplacementFor_xstrcoll_version
METHOD_RETURN int
PARAM ReplacementFor_V ReplacementFor_a
PARAM ReplacementFor_V ReplacementFor_b
RETURN return ReplacementFor_cmp_version(\012ReplacementFor_a,ReplacementFor_b); return ReplacementFor_cmp_version(\012ReplacementFor_a,ReplacementFor_b);
ReplacementFor_cmp_version ReplacementFor_cmp_version(\012ReplacementFor_a,ReplacementFor_b)
>>>PDG&6 0->2 0->3 0->5 2->5 3->5 4->1 5->1 5->1 5->1 5->4
>>>Token static int ReplacementFor_xstrcoll_version ( ReplacementFor_V ReplacementFor_a , ReplacementFor_V ReplacementFor_b ) { return ReplacementFor_cmp_version ( ReplacementFor_a , ReplacementFor_b ) ; }
>>>Func
METHOD main
METHOD_RETURN int
printf printf(\012"\x45\x6e\x74\x65\x72\x20\x6f\x63\x74\x61\x6c\x20\x76\x61\x6c\x75\x65\x3a\x20")
scanf scanf("\x25\x64",&ReplacementFor_octal_value)
<operator>.assignment ReplacementFor_result=ReplacementFor_toDecimal(\012ReplacementFor_octal_value)
printf printf(\012"\x25\x64\x20\x69\x6e\x20\x64\x65\x63\x69\x6d\x61\x6c\x20\x69\x73\x20\x25\x6c\x6c\x64" "\n"\012,ReplacementFor_octal_value,ReplacementFor_result)
RETURN return(0x1064+2785-0x1b45); return(0x1064+2785-0x1b45);
<operator>.subtraction 0x1064+2785-0x1b45
ReplacementFor_toDecimal ReplacementFor_toDecimal(\012ReplacementFor_octal_value)
<operator>.addition 0x1064+2785
>>>PDG&10 0->2 0->3 0->5 0->7 0->8 0->9 2->1 3->1 3->5 3->8 4->1 4->1 4->5 5->1 5->1 5->1 6->1 7->1 7->1 7->6 8->4 8->5
>>>Token int main ( ) { printf ( " \x45 \x6e \x74 \x65 \x72 \x20 \x6f \x63 \x74 \x61 \x6c \x20 \x76 \x61 \x6c \x75 \x65 \x3a \x20 " ) ; int ReplacementFor_octal_value ; scanf ( " \x25 \x64 " , & ReplacementFor_octal_value ) ; long long ReplacementFor_result = ReplacementFor_toDecimal ( ReplacementFor_octal_value ) ; printf ( " \x25 \x64 \x20 \x69 \x6e \x20 \x64 \x65 \x63 \x69 \x6d \x61 \x6c \x20 \x69 \x73 \x20 \x25 \x6c \x6c \x64 " " \n " , ReplacementFor_octal_value , ReplacementFor_result ) ; return ( 0x1064 + 2785 - 0x1b45 ) ; }
>>>Func
METHOD main
METHOD_RETURN int
PARAM int ReplacementFor_argc
PARAM char**ReplacementFor_argv
<operator>.assignment ReplacementFor_cases=\012(0x15d+5959-0x18a4)
<operator>.assignment ReplacementFor_coordinates[ReplacementFor_n][\012(0x1277+4250-0x230f)]={{(0x8a4+1178-0xd3e)}}
<operator>.assignment ReplacementFor_no=\012(0x231b+47-0x234a)
<operator>.assignment ReplacementFor_x0=(0x420+8486-0x2546)
<operator>.assignment y0=\012(0x54a+3754-0x13f4)
<operator>.assignment ReplacementFor_X=(0xd93+2997-0x1948)
<operator>.assignment ReplacementFor_Y=(0x778+3646-0x15b6)
<operator>.assignment ReplacementFor_A=\012(0xea5+2960-0x1a35)
<operator>.assignment ReplacementFor_B=(0xac6+6534-0x244c)
<operator>.assignment ReplacementFor_C=(0x127b+3346-0x1f8d)
<operator>.assignment ReplacementFor_D=\012(0x6fc+116-0x770)
<operator>.assignment M=(0x936+5827-0x1ff9)
<operator>.assignment i=(0xd80+1489-0x1351)
<operator>.assignment ReplacementFor_j=(0x1c17+2420-0x258b)
<operator>.assignment ReplacementFor_k=(0x6b+1730-0x72d)
<operator>.assignment l=(0x148a+570-0x16c4)
<operator>.assignment ReplacementFor_count[ReplacementFor_N]={\012(0xcc0+568-0xef8)}
<operator>.assignment ReplacementFor_center[(0x44d+5035-0x17f6)]={\012(0x7ba+2849-0x12db)}
RETURN return\012(0x237+8918-0x250d); return\012(0x237+8918-0x250d);
<operator>.equals ReplacementFor_argc==(0x1372+1533-0x196c)
<operator>.subtraction 0x237+8918-0x250d
<operator>.subtraction 0x15d+5959-0x18a4
<operator>.arrayInitializer {{(0x8a4+1178-0xd3e)}}
<operator>.subtraction 0x231b+47-0x234a
<operator>.subtraction 0x420+8486-0x2546
<operator>.subtraction 0x54a+3754-0x13f4
<operator>.subtraction 0xd93+2997-0x1948
<operator>.subtraction 0x778+3646-0x15b6
<operator>.subtraction 0xea5+2960-0x1a35
<operator>.subtraction 0xac6+6534-0x244c
<operator>.subtraction 0x127b+3346-0x1f8d
<operator>.subtraction 0x6fc+116-0x770
<operator>.subtraction 0x936+5827-0x1ff9
<operator>.subtraction 0xd80+1489-0x1351
<operator>.subtraction 0x1c17+2420-0x258b
<operator>.subtraction 0x6b+1730-0x72d
<operator>.subtraction 0x148a+570-0x16c4
<operator>.arrayInitializer {\012(0xcc0+568-0xef8)}
<operator>.arrayInitializer {\012(0x7ba+2849-0x12db)}
<operator>.assignment ReplacementFor_finput=fopen(ReplacementFor_argv[(0xb0a+1677-0x1196)],"\x72")
<operator>.assignment ReplacementFor_foutput=fopen(ReplacementFor_argv[(0x17e7+3367-0x250c)],"\x77")
fscanf fscanf(ReplacementFor_finput,"\x25\x64",&\012ReplacementFor_cases)
fgetc fgetc(ReplacementFor_finput)
fclose fclose(ReplacementFor_finput)
fclose fclose(\012ReplacementFor_foutput)
<operator>.addition 0x15d+5959
<operator>.arrayInitializer {(0x8a4+1178-0xd3e)}
<operator>.addition 0x231b+47
<operator>.addition 0x420+8486
<operator>.addition 0x54a+3754
<operator>.addition 0xd93+2997
<operator>.addition 0x778+3646
<operator>.addition 0xea5+2960
<operator>.addition 0xac6+6534
<operator>.addition 0x127b+3346
<operator>.addition 0x6fc+116
<operator>.addition 0x936+5827
<operator>.addition 0xd80+1489
<operator>.addition 0x1c17+2420
<operator>.addition 0x6b+1730
<operator>.addition 0x148a+570
<operator>.subtraction 0xcc0+568-0xef8
<operator>.subtraction 0x7ba+2849-0x12db
<operator>.subtraction 0x1372+1533-0x196c
<operator>.equals ReplacementFor_finput==NULL
<operator>.lessThan i<\012ReplacementFor_cases
<operator>.postIncrement i++
<operator>.lessThan i<ReplacementFor_cases
<operator>.postIncrement i++
printf printf("\x45\x52\x52\x4f\x52")
<operator>.addition 0x237+8918
<operator>.subtraction 0x8a4+1178-0xd3e
<operator>.addition 0xcc0+568
<operator>.addition 0x7ba+2849
<operator>.addition 0x1372+1533
fopen fopen(ReplacementFor_argv[(0xb0a+1677-0x1196)],"\x72")
fopen fopen(ReplacementFor_argv[(0x17e7+3367-0x250c)],"\x77")
printf printf(\012"\x66\x69\x6c\x65\x20\x6f\x70\x65\x6e\x20\x66\x61\x69\x6c\x65\x64")
RETURN return-\012(0xc52+5768-0x22d9); return-\012(0xc52+5768-0x22d9);
<operator>.assignment i=(0x1646+4166-0x268c)
fscanf fscanf(ReplacementFor_finput,"\x25\x64",&\012ReplacementFor_no)
fscanf fscanf(ReplacementFor_finput,"\x25\x4c\x64",&ReplacementFor_A\012)
fscanf fscanf(ReplacementFor_finput,"\x25\x4c\x64",&ReplacementFor_B)
fscanf fscanf(\012ReplacementFor_finput,"\x25\x4c\x64",&ReplacementFor_C)
fscanf fscanf(\012ReplacementFor_finput,"\x25\x4c\x64",&ReplacementFor_D)
fscanf fscanf(\012ReplacementFor_finput,"\x25\x4c\x64",&ReplacementFor_x0)
fscanf fscanf(\012ReplacementFor_finput,"\x25\x4c\x64",&y0)
fscanf fscanf(ReplacementFor_finput,\012"\x25\x4c\x64",&M)
fgetc fgetc(ReplacementFor_finput)
<operator>.assignment ReplacementFor_coordinates[\012(0x157+242-0x249)][(0x13fa+3902-0x2338)]=ReplacementFor_x0
<operator>.assignment ReplacementFor_coordinates[(0x16a6+403-0x1839)][(0x1095+2162-0x1906)]=y0
<operator>.assignment ReplacementFor_X=ReplacementFor_x0
<operator>.assignment ReplacementFor_Y=y0
<operator>.assignment i=(0x986+5994-0x20f0)
fprintf fprintf(ReplacementFor_foutput \012"\x43\x61\x73\x65\x20\x23\x25\x64\x3a\x20\x25\x64" "\n" (i+(0xb18+2840-0x162f)),\012ReplacementFor_count[i])
<operator>.addition 0x8a4+1178
<operator>.minus -\012(0xc52+5768-0x22d9)
<operator>.lessThan ReplacementFor_j<ReplacementFor_no
<operator>.postIncrement ReplacementFor_j++
<operator>.lessThan ReplacementFor_j<ReplacementFor_no-(0xf1+2369-0xa30)
<operator>.postIncrement ReplacementFor_j++
<operator>.subtraction 0xb0a+1677-0x1196
<operator>.subtraction 0x17e7+3367-0x250c
<operator>.subtraction 0x1646+4166-0x268c
<operator>.assignment ReplacementFor_j=\012(0x3ba+3894-0x12ef)
<operator>.assignment ReplacementFor_coordinates[ReplacementFor_j][(0x13bb+4129-0x23dc)]=(\012ReplacementFor_A*ReplacementFor_X+ReplacementFor_B)%M
<operator>.assignment ReplacementFor_coordinates\012[ReplacementFor_j][(0x18df+1652-0x1f52)]=(ReplacementFor_C*ReplacementFor_Y+\012ReplacementFor_D)%M
<operator>.assignment ReplacementFor_X=ReplacementFor_coordinates[ReplacementFor_j\012][(0x667+3971-0x15ea)]
<operator>.assignment ReplacementFor_Y=ReplacementFor_coordinates[\012ReplacementFor_j][(0xea9+1171-0x133b)]
<operator>.assignment ReplacementFor_j=(0x3ac+6011-0x1b27)
<operator>.subtraction 0x986+5994-0x20f0
<operator>.addition i+(0xb18+2840-0x162f)
<operator>.addition 0xb0a+1677
<operator>.addition 0x17e7+3367
<operator>.subtraction 0xc52+5768-0x22d9
<operator>.addition 0x1646+4166
<operator>.subtraction 0x13fa+3902-0x2338
<operator>.subtraction 0x1095+2162-0x1906
<operator>.subtraction ReplacementFor_no-(0xf1+2369-0xa30)
<operator>.lessThan ReplacementFor_k<\012ReplacementFor_no-(0x95a+7247-0x25a8)
<operator>.postIncrement ReplacementFor_k++
<operator>.addition 0x986+5994
<operator>.subtraction 0xb18+2840-0x162f
<operator>.addition 0xc52+5768
<operator>.subtraction 0x157+242-0x249
<operator>.addition 0x13fa+3902
<operator>.subtraction 0x16a6+403-0x1839
<operator>.addition 0x1095+2162
<operator>.subtraction 0x3ba+3894-0x12ef
<operator>.modulo (\012ReplacementFor_A*ReplacementFor_X+ReplacementFor_B)%M
<operator>.modulo (ReplacementFor_C*ReplacementFor_Y+\012ReplacementFor_D)%M
<operator>.subtraction 0x3ac+6011-0x1b27
<operator>.subtraction 0xf1+2369-0xa30
<operator>.assignment ReplacementFor_k=ReplacementFor_j+(0x1304+1365-0x1858)
<operator>.addition 0xb18+2840
<operator>.addition 0x157+242
<operator>.addition 0x16a6+403
<operator>.addition 0x3ba+3894
<operator>.subtraction 0x13bb+4129-0x23dc
<operator>.addition ReplacementFor_A*ReplacementFor_X+ReplacementFor_B
<operator>.subtraction 0x18df+1652-0x1f52
<operator>.addition ReplacementFor_C*ReplacementFor_Y+\012ReplacementFor_D
<operator>.subtraction 0x667+3971-0x15ea
<operator>.subtraction 0xea9+1171-0x133b
<operator>.addition 0x3ac+6011
<operator>.addition 0xf1+2369
<operator>.subtraction ReplacementFor_no-(0x95a+7247-0x25a8)
<operator>.lessThan l<ReplacementFor_no
<operator>.postIncrement l++
<operator>.addition 0x13bb+4129
<operator>.multiplication ReplacementFor_A*ReplacementFor_X
<operator>.addition 0x18df+1652
<operator>.multiplication ReplacementFor_C*ReplacementFor_Y
<operator>.addition 0x667+3971
<operator>.addition 0xea9+1171
<operator>.addition ReplacementFor_j+(0x1304+1365-0x1858)
<operator>.subtraction 0x95a+7247-0x25a8
<operator>.assignment l=ReplacementFor_k\012+(0x203+7101-0x1dbf)
<operator>.assignment ReplacementFor_center[\012(0x1812+3792-0x26e2)]=(ReplacementFor_coordinates[ReplacementFor_j][\012(0x352+7243-0x1f9d)]+ReplacementFor_coordinates[ReplacementFor_k][\012(0x25aa+48-0x25da)]+ReplacementFor_coordinates[l][(0x3ef+504-0x5e7)])/3.0
<operator>.assignment ReplacementFor_center[(0x2d1+4942-0x161e)]=(ReplacementFor_coordinates[\012ReplacementFor_j][(0x10e7+171-0x1191)]+ReplacementFor_coordinates[\012ReplacementFor_k][(0x14d6+2388-0x1e29)]+ReplacementFor_coordinates[l][\012(0x13c9+1172-0x185c)])/3.0
<operator>.subtraction 0x1304+1365-0x1858
<operator>.addition 0x95a+7247
<operator>.logicalAnd (ReplacementFor_center[(0x1e39+253-0x1f36)]==(int)\012ReplacementFor_center[(0x7+4463-0x1176)])&&(ReplacementFor_center[\012(0x188d+1091-0x1ccf)]==(int)ReplacementFor_center[(0x24af+501-0x26a3)])
<operator>.addition 0x1304+1365
<operator>.addition ReplacementFor_k\012+(0x203+7101-0x1dbf)
<operator>.division (ReplacementFor_coordinates[ReplacementFor_j][\012(0x352+7243-0x1f9d)]+ReplacementFor_coordinates[ReplacementFor_k][\012(0x25aa+48-0x25da)]+ReplacementFor_coordinates[l][(0x3ef+504-0x5e7)])/3.0
<operator>.division (ReplacementFor_coordinates[\012ReplacementFor_j][(0x10e7+171-0x1191)]+ReplacementFor_coordinates[\012ReplacementFor_k][(0x14d6+2388-0x1e29)]+ReplacementFor_coordinates[l][\012(0x13c9+1172-0x185c)])/3.0
<operator>.postIncrement ReplacementFor_count[i]++
<operator>.subtraction 0x203+7101-0x1dbf
<operator>.subtraction 0x1812+3792-0x26e2
<operator>.subtraction 0x2d1+4942-0x161e
<operator>.equals ReplacementFor_center[(0x1e39+253-0x1f36)]==(int)\012ReplacementFor_center[(0x7+4463-0x1176)]
<operator>.equals ReplacementFor_center[\012(0x188d+1091-0x1ccf)]==(int)ReplacementFor_center[(0x24af+501-0x26a3)]
<operator>.addition 0x203+7101
<operator>.addition 0x1812+3792
<operator>.addition 0x2d1+4942
<operator>.cast (int)\012ReplacementFor_center[(0x7+4463-0x1176)]
<operator>.cast (int)ReplacementFor_center[(0x24af+501-0x26a3)]
<operator>.subtraction 0x3ef+504-0x5e7
<operator>.subtraction 0x13c9+1172-0x185c
<operator>.subtraction 0x1e39+253-0x1f36
<operator>.subtraction 0x188d+1091-0x1ccf
<operator>.subtraction 0x352+7243-0x1f9d
<operator>.subtraction 0x25aa+48-0x25da
<operator>.addition 0x3ef+504
<operator>.subtraction 0x10e7+171-0x1191
<operator>.subtraction 0x14d6+2388-0x1e29
<operator>.addition 0x13c9+1172
<operator>.addition 0x1e39+253
<operator>.subtraction 0x7+4463-0x1176
<operator>.addition 0x188d+1091
<operator>.subtraction 0x24af+501-0x26a3
<operator>.addition 0x352+7243
<operator>.addition 0x25aa+48
<operator>.addition 0x10e7+171
<operator>.addition 0x14d6+2388
<operator>.addition 0x7+4463
<operator>.addition 0x24af+501
<operator>.addressOf &\012ReplacementFor_cases
<operator>.indirectIndexAccess ReplacementFor_argv[(0xb0a+1677-0x1196)]
<operator>.indirectIndexAccess ReplacementFor_argv[(0x17e7+3367-0x250c)]
<operator>.addressOf &\012ReplacementFor_no
<operator>.addressOf &ReplacementFor_A
<operator>.addressOf &ReplacementFor_B
<operator>.addressOf &ReplacementFor_C
<operator>.addressOf &ReplacementFor_D
<operator>.addressOf &ReplacementFor_x0
<operator>.addressOf &y0
<operator>.addressOf &M
<operator>.indirectIndexAccess ReplacementFor_coordinates[\012(0x157+242-0x249)][(0x13fa+3902-0x2338)]
<operator>.indirectIndexAccess ReplacementFor_coordinates[(0x16a6+403-0x1839)][(0x1095+2162-0x1906)]
<operator>.indirectIndexAccess ReplacementFor_count[i]
<operator>.indirectIndexAccess ReplacementFor_coordinates[\012(0x157+242-0x249)]
<operator>.indirectIndexAccess ReplacementFor_coordinates[(0x16a6+403-0x1839)]
<operator>.indirectIndexAccess ReplacementFor_coordinates[ReplacementFor_j][(0x13bb+4129-0x23dc)]
<operator>.indirectIndexAccess ReplacementFor_coordinates\012[ReplacementFor_j][(0x18df+1652-0x1f52)]
<operator>.indirectIndexAccess ReplacementFor_coordinates[ReplacementFor_j\012][(0x667+3971-0x15ea)]
<operator>.indirectIndexAccess ReplacementFor_coordinates[\012ReplacementFor_j][(0xea9+1171-0x133b)]
<operator>.indirectIndexAccess ReplacementFor_coordinates[ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_coordinates\012[ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_coordinates[ReplacementFor_j\012]
<operator>.indirectIndexAccess ReplacementFor_coordinates[\012ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_center[\012(0x1812+3792-0x26e2)]
<operator>.indirectIndexAccess ReplacementFor_center[(0x2d1+4942-0x161e)]
<operator>.addition ReplacementFor_coordinates[ReplacementFor_j][\012(0x352+7243-0x1f9d)]+ReplacementFor_coordinates[ReplacementFor_k][\012(0x25aa+48-0x25da)]+ReplacementFor_coordinates[l][(0x3ef+504-0x5e7)]
<operator>.addition ReplacementFor_coordinates[\012ReplacementFor_j][(0x10e7+171-0x1191)]+ReplacementFor_coordinates[\012ReplacementFor_k][(0x14d6+2388-0x1e29)]+ReplacementFor_coordinates[l][\012(0x13c9+1172-0x185c)]
<operator>.addition ReplacementFor_coordinates[ReplacementFor_j][\012(0x352+7243-0x1f9d)]+ReplacementFor_coordinates[ReplacementFor_k][\012(0x25aa+48-0x25da)]
<operator>.indirectIndexAccess ReplacementFor_coordinates[l][(0x3ef+504-0x5e7)]
<operator>.addition ReplacementFor_coordinates[\012ReplacementFor_j][(0x10e7+171-0x1191)]+ReplacementFor_coordinates[\012ReplacementFor_k][(0x14d6+2388-0x1e29)]
<operator>.indirectIndexAccess ReplacementFor_coordinates[l][\012(0x13c9+1172-0x185c)]
<operator>.indirectIndexAccess ReplacementFor_center[(0x1e39+253-0x1f36)]
<operator>.indirectIndexAccess ReplacementFor_center[\012(0x188d+1091-0x1ccf)]
<operator>.indirectIndexAccess ReplacementFor_count[i]
<operator>.indirectIndexAccess ReplacementFor_coordinates[ReplacementFor_j][\012(0x352+7243-0x1f9d)]
<operator>.indirectIndexAccess ReplacementFor_coordinates[ReplacementFor_k][\012(0x25aa+48-0x25da)]
<operator>.indirectIndexAccess ReplacementFor_coordinates[l]
<operator>.indirectIndexAccess ReplacementFor_coordinates[\012ReplacementFor_j][(0x10e7+171-0x1191)]
<operator>.indirectIndexAccess ReplacementFor_coordinates[\012ReplacementFor_k][(0x14d6+2388-0x1e29)]
<operator>.indirectIndexAccess ReplacementFor_coordinates[l]
UNKNOWN int int
<operator>.indirectIndexAccess ReplacementFor_center[(0x7+4463-0x1176)]
UNKNOWN int int
<operator>.indirectIndexAccess ReplacementFor_center[(0x24af+501-0x26a3)]
<operator>.indirectIndexAccess ReplacementFor_coordinates[ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_coordinates[ReplacementFor_k]
<operator>.indirectIndexAccess ReplacementFor_coordinates[\012ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_coordinates[\012ReplacementFor_k]
>>>PDG&251 0->2 0->3 0->23 0->24 0->25 0->27 0->28 0->29 0->30 0->31 0->32 0->33 0->34 0->35 0->36 0->37 0->38 0->39 0->40 0->45 0->46 0->47 0->48 0->49 0->51 0->52 0->53 0->54 0->55 0->56 0->57 0->58 0->59 0->60 0->61 0->62 0->63 0->64 0->65 0->66 0->67 0->68 0->69 0->70 0->71 0->72 0->73 0->74 0->75 0->76 0->77 0->78 0->79 0->80 0->81 0->84 0->85 0->86 0->87 0->88 0->89 0->90 0->91 0->92 0->93 0->94 0->95 0->96 0->98 0->99 0->101 0->102 0->103 0->104 0->105 0->106 0->107 0->114 0->115 0->116 0->117 0->118 0->119 0->120 0->121 0->122 0->123 0->124 0->125 0->126 0->127 0->128 0->129 0->130 0->131 0->132 0->133 0->134 0->135 0->136 0->137 0->138 0->139 0->140 0->141 0->142 0->143 0->144 0->145 0->146 0->147 0->148 0->149 0->150 0->151 0->152 0->153 0->154 0->155 0->156 0->157 0->158 0->159 0->160 0->161 0->164 0->165 0->167 0->168 0->169 0->170 0->172 0->173 0->174 0->177 0->178 0->179 0->182 0->183 0->184 0->185 0->186 0->187 0->188 0->189 0->190 0->191 0->192 0->193 0->194 0->195 0->196 0->197 0->198 0->199 0->200 0->201 2->23 3->1 3->79 3->80 4->1 4->1 4->1 4->45 4->69 5->1 5->1 5->1 6->1 6->1 6->1 6->84 6->101 7->1 7->1 7->1 7->89 7->93 8->1 8->1 8->1 8->90 8->94 9->1 9->1 9->1 10->1 10->1 10->1 11->1 11->1 11->1 11->85 11->154 12->1 12->1 12->1 12->86 12->133 12->143 13->1 13->1 13->1 13->87 13->156 14->1 14->1 14->1 14->88 14->134 14->145 15->1 15->1 15->1 15->91 15->133 16->1 16->1 16->1 17->1 17->1 17->1 18->1 18->1 18->1 19->1 19->1 19->1 20->1 20->1 20->1 20->98 20->171 21->1 21->1 21->1 21->175 21->176 21->180 21->181 22->1 23->1 23->1 23->1 23->22 23->24 23->43 23->44 23->68 23->73 23->74 23->79 23->80 23->105 23->106 23->116 23->117 23->203 23->204 24->22 25->1 25->4 25->4 26->1 26->5 27->1 27->6 27->6 28->1 28->7 28->7 29->1 29->8 29->8 30->1 30->9 30->9 31->1 31->10 31->10 32->1 32->11 32->11 33->1 33->12 33->12 34->1 34->13 34->13 35->1 35->14 35->14 36->1 36->15 36->15 37->1 37->16 37->16 38->1 38->17 38->17 39->1 39->18 39->18 40->1 40->19 40->19 41->1 41->20 42->1 42->21 43->1 43->1 43->68 44->1 44->1 44->1 44->48 44->98 45->46 45->69 45->71 46->47 46->84 50->1 50->26 65->1 65->41 65->41 66->1 66->42 66->42 67->1 67->23 67->23 68->1 68->1 68->1 68->22 68->24 68->45 68->45 68->46 68->47 68->48 68->69 68->71 68->74 68->81 68->82 68->83 68->97 68->100 68->107 68->114 68->118 68->119 68->125 68->127 68->202 69->69 69->70 69->70 69->71 69->84 69->85 69->86 69->87 69->88 69->89 69->90 69->91 69->92 69->93 69->94 69->95 69->96 69->101 69->103 69->108 69->113 69->120 69->121 69->122 69->128 69->129 69->130 69->131 69->132 69->135 69->136 69->139 69->140 69->141 69->148 69->149 69->205 69->206 69->207 69->208 69->209 69->210 69->211 69->212 69->213 69->214 69->216 69->217 70->69 71->71 71->72 71->72 71->98 71->98 71->115 71->115 71->126 71->138 71->215 72->71 75->1 75->50 75->50 79->1 79->43 79->43 80->1 80->44 80->44 81->1 82->1 83->69 84->85 84->101 84->122 84->150 84->151 85->86 85->154 86->87 86->133 86->143 87->88 87->156 88->89 88->134 88->145 89->90 89->93 89->95 90->91 90->94 90->96 91->92 91->133 91->134 92->47 92->84 95->154 96->156 97->71 98->48 100->1 100->1 100->82 101->101 101->102 101->102 101->109 101->110 101->111 101->112 101->122 101->133 101->134 101->142 101->143 101->144 101->145 101->146 101->147 101->153 101->154 101->155 101->156 101->157 101->158 101->218 101->219 101->220 101->221 101->222 101->223 101->224 101->225 102->101 103->103 103->104 103->104 103->122 103->123 103->136 103->137 103->137 103->149 103->150 103->159 103->159 103->160 103->164 103->165 103->167 104->103 105->1 106->1 107->83 107->83 108->101 111->154 112->156 113->103 114->97 114->97 118->1 118->100 118->100 122->84 122->101 122->103 122->103 122->150 123->123 123->124 123->124 123->150 123->151 123->160 123->161 123->161 123->165 123->168 123->168 123->172 123->177 124->123 126->98 126->98 126->115 126->115 132->108 132->108 133->109 133->109 133->134 134->91 134->110 134->110 134->133 135->113 135->113 136->122 136->122 137->123 150->122 150->123 150->123 150->151 151->150 151->151 151->152 151->152 151->162 151->163 151->166 151->169 151->170 151->173 151->174 151->175 151->178 151->179 151->180 151->182 151->183 151->184 151->186 151->187 151->188 151->189 151->190 151->191 151->192 151->193 151->196 151->197 151->198 151->199 151->200 151->226 151->227 151->228 151->229 151->230 151->231 151->232 151->233 151->234 151->237 151->238 151->239 151->240 151->241 151->242 151->243 151->244 151->247 151->248 151->249 151->250 152->151 154->85 154->133 154->133 154->143 154->143 156->87 156->134 156->134 156->145 156->145 160->150 160->150 161->151 164->137 164->137 164->159 164->159 166->171 166->236 169->162 169->162 170->163 170->163 171->98 172->161 172->161 172->168 172->168 175->166 175->166 175->176 175->181 175->185 175->194 175->195 175->201 175->235 175->245 175->246 176->166 176->166
>>>Token int main ( int ReplacementFor_argc , char * * ReplacementFor_argv ) { FILE * ReplacementFor_finput ; FILE * ReplacementFor_foutput ; int ReplacementFor_cases = ( 0x15d + 5959 - 0x18a4 ) ; long long ReplacementFor_coordinates [ ReplacementFor_n ] [ ( 0x1277 + 4250 - 0x230f ) ] = { { ( 0x8a4 + 1178 - 0xd3e ) } } ; int ReplacementFor_no = ( 0x231b + 47 - 0x234a ) ; long long ReplacementFor_x0 = ( 0x420 + 8486 - 0x2546 ) , y0 = ( 0x54a + 3754 - 0x13f4 ) ; long long ReplacementFor_X = ( 0xd93 + 2997 - 0x1948 ) , ReplacementFor_Y = ( 0x778 + 3646 - 0x15b6 ) ; long long ReplacementFor_A = ( 0xea5 + 2960 - 0x1a35 ) ; long long ReplacementFor_B = ( 0xac6 + 6534 - 0x244c ) ; long long ReplacementFor_C = ( 0x127b + 3346 - 0x1f8d ) ; long long ReplacementFor_D = ( 0x6fc + 116 - 0x770 ) ; long long M = ( 0x936 + 5827 - 0x1ff9 ) ; int i = ( 0xd80 + 1489 - 0x1351 ) ; int ReplacementFor_j = ( 0x1c17 + 2420 - 0x258b ) ; int ReplacementFor_k = ( 0x6b + 1730 - 0x72d ) ; int l = ( 0x148a + 570 - 0x16c4 ) ; int ReplacementFor_count [ ReplacementFor_N ] = { ( 0xcc0 + 568 - 0xef8 ) } ; long double ReplacementFor_center [ ( 0x44d + 5035 - 0x17f6 ) ] = { ( 0x7ba + 2849 - 0x12db ) } ; if ( ReplacementFor_argc == ( 0x1372 + 1533 - 0x196c ) ) { ReplacementFor_finput = fopen ( ReplacementFor_argv [ ( 0xb0a + 1677 - 0x1196 ) ] , " \x72 " ) ; ReplacementFor_foutput = fopen ( ReplacementFor_argv [ ( 0x17e7 + 3367 - 0x250c ) ] , " \x77 " ) ; if ( ReplacementFor_finput == NULL ) { printf ( " \x66 \x69 \x6c \x65 \x20 \x6f \x70 \x65 \x6e \x20 \x66 \x61 \x69 \x6c \x65 \x64 " ) ; return - ( 0xc52 + 5768 - 0x22d9 ) ; } fscanf ( ReplacementFor_finput , " \x25 \x64 " , & ReplacementFor_cases ) ; fgetc ( ReplacementFor_finput ) ; for ( i = ( 0x1646 + 4166 - 0x268c ) ; i < ReplacementFor_cases ; i ++ ) { fscanf ( ReplacementFor_finput , " \x25 \x64 " , & ReplacementFor_no ) ; fscanf ( ReplacementFor_finput , " \x25 \x4c \x64 " , & ReplacementFor_A ) ; fscanf ( ReplacementFor_finput , " \x25 \x4c \x64 " , & ReplacementFor_B ) ; fscanf ( ReplacementFor_finput , " \x25 \x4c \x64 " , & ReplacementFor_C ) ; fscanf ( ReplacementFor_finput , " \x25 \x4c \x64 " , & ReplacementFor_D ) ; fscanf ( ReplacementFor_finput , " \x25 \x4c \x64 " , & ReplacementFor_x0 ) ; fscanf ( ReplacementFor_finput , " \x25 \x4c \x64 " , & y0 ) ; fscanf ( ReplacementFor_finput , " \x25 \x4c \x64 " , & M ) ; fgetc ( ReplacementFor_finput ) ; ReplacementFor_coordinates [ ( 0x157 + 242 - 0x249 ) ] [ ( 0x13fa + 3902 - 0x2338 ) ] = ReplacementFor_x0 ; ReplacementFor_coordinates [ ( 0x16a6 + 403 - 0x1839 ) ] [ ( 0x1095 + 2162 - 0x1906 ) ] = y0 ; ReplacementFor_X = ReplacementFor_x0 ; ReplacementFor_Y = y0 ; for ( ReplacementFor_j = ( 0x3ba + 3894 - 0x12ef ) ; ReplacementFor_j < ReplacementFor_no ; ReplacementFor_j ++ ) { ReplacementFor_coordinates [ ReplacementFor_j ] [ ( 0x13bb + 4129 - 0x23dc ) ] = ( ReplacementFor_A * ReplacementFor_X + ReplacementFor_B ) % M ; ReplacementFor_coordinates [ ReplacementFor_j ] [ ( 0x18df + 1652 - 0x1f52 ) ] = ( ReplacementFor_C * ReplacementFor_Y + ReplacementFor_D ) % M ; ReplacementFor_X = ReplacementFor_coordinates [ ReplacementFor_j ] [ ( 0x667 + 3971 - 0x15ea ) ] ; ReplacementFor_Y = ReplacementFor_coordinates [ ReplacementFor_j ] [ ( 0xea9 + 1171 - 0x133b ) ] ; } for ( ReplacementFor_j = ( 0x3ac + 6011 - 0x1b27 ) ; ReplacementFor_j < ReplacementFor_no - ( 0xf1 + 2369 - 0xa30 ) ; ReplacementFor_j ++ ) { for ( ReplacementFor_k = ReplacementFor_j + ( 0x1304 + 1365 - 0x1858 ) ; ReplacementFor_k < ReplacementFor_no - ( 0x95a + 7247 - 0x25a8 ) ; ReplacementFor_k ++ ) { for ( l = ReplacementFor_k + ( 0x203 + 7101 - 0x1dbf ) ; l < ReplacementFor_no ; l ++ ) { ReplacementFor_center [ ( 0x1812 + 3792 - 0x26e2 ) ] = ( ReplacementFor_coordinates [ ReplacementFor_j ] [ ( 0x352 + 7243 - 0x1f9d ) ] + ReplacementFor_coordinates [ ReplacementFor_k ] [ ( 0x25aa + 48 - 0x25da ) ] + ReplacementFor_coordinates [ l ] [ ( 0x3ef + 504 - 0x5e7 ) ] ) / 3.0 ; ReplacementFor_center [ ( 0x2d1 + 4942 - 0x161e ) ] = ( ReplacementFor_coordinates [ ReplacementFor_j ] [ ( 0x10e7 + 171 - 0x1191 ) ] + ReplacementFor_coordinates [ ReplacementFor_k ] [ ( 0x14d6 + 2388 - 0x1e29 ) ] + ReplacementFor_coordinates [ l ] [ ( 0x13c9 + 1172 - 0x185c ) ] ) / 3.0 ; if ( ( ReplacementFor_center [ ( 0x1e39 + 253 - 0x1f36 ) ] == ( int ) ReplacementFor_center [ ( 0x7 + 4463 - 0x1176 ) ] ) && ( ReplacementFor_center [ ( 0x188d + 1091 - 0x1ccf ) ] == ( int ) ReplacementFor_center [ ( 0x24af + 501 - 0x26a3 ) ] ) ) { ReplacementFor_count [ i ] ++ ; } } } } } for ( i = ( 0x986 + 5994 - 0x20f0 ) ; i < ReplacementFor_cases ; i ++ ) { fprintf ( ReplacementFor_foutput , " \x43 \x61 \x73 \x65 \x20 \x23 \x25 \x64 \x3a \x20 \x25 \x64 " " \n " , ( i + ( 0xb18 + 2840 - 0x162f ) ) , ReplacementFor_count [ i ] ) ; } fclose ( ReplacementFor_finput ) ; fclose ( ReplacementFor_foutput ) ; } else { printf ( " \x45 \x52 \x52 \x4f \x52 " ) ; } return ( 0x237 + 8918 - 0x250d ) ; }
>>>Func
METHOD ReplacementFor_OOWP
METHOD_RETURN void
PARAM int ReplacementFor_NO
<operator>.lessThan i<\012ReplacementFor_n
<operator>.preIncrement ++i
<operator>.assignment i=(0x398+8060-0x2314)
<operator>.assignment ReplacementFor_temp=(0x158+6317-0x1a05)
<operator>.assignment ReplacementFor_num\012=(0xe62+4643-0x2085)
<operator>.assignment ReplacementFor_oowp[i]=\012ReplacementFor_temp/(double)(ReplacementFor_num)
<operator>.lessThan ReplacementFor_j<\012ReplacementFor_n
<operator>.preIncrement ++ReplacementFor_j
<operator>.subtraction 0x398+8060-0x2314
<operator>.subtraction 0x158+6317-0x1a05
<operator>.subtraction 0xe62+4643-0x2085
<operator>.assignment ReplacementFor_j=(0xe03+1243-0x12de)
<operator>.division ReplacementFor_temp/(double)(ReplacementFor_num)
<operator>.addition 0x398+8060
<operator>.addition 0x158+6317
<operator>.addition 0xe62+4643
<operator>.notEquals ReplacementFor_table[i][ReplacementFor_j\012]!=((char)(0x1793+2230-0x201b))
<operator>.cast (double)(ReplacementFor_num)
<operator>.subtraction 0xe03+1243-0x12de
<operator>.assignmentPlus ReplacementFor_temp+=ReplacementFor_owp[\012ReplacementFor_j]
<operator>.postIncrement ReplacementFor_num++
<operator>.addition 0xe03+1243
<operator>.cast (char)(0x1793+2230-0x201b)
<operator>.subtraction 0x1793+2230-0x201b
<operator>.addition 0x1793+2230
<operator>.indirectIndexAccess ReplacementFor_oowp[i]
UNKNOWN double double
<operator>.indirectIndexAccess ReplacementFor_table[i][ReplacementFor_j\012]
<operator>.indirectIndexAccess ReplacementFor_table[i]
UNKNOWN char char
<operator>.indirectIndexAccess ReplacementFor_owp[\012ReplacementFor_j]
>>>PDG&34 0->2 0->3 0->4 0->9 0->10 0->11 0->12 0->13 0->15 0->16 0->17 0->18 0->20 0->21 0->22 0->23 0->24 0->26 0->27 2->1 3->1 3->1 3->1 3->3 3->4 3->4 3->6 3->7 3->8 3->9 3->9 3->12 3->13 3->14 3->15 3->17 3->18 3->20 3->21 3->24 3->28 3->29 4->1 4->3 5->1 5->1 5->3 6->15 6->22 7->15 7->20 7->23 9->3 9->9 9->10 9->10 9->19 9->25 9->26 9->27 9->30 9->31 9->32 10->9 11->1 11->5 11->5 12->6 12->6 13->7 13->7 14->9 15->8 15->8 19->22 19->23 19->33 21->14 21->14 22->15 23->15 23->20 26->19 26->19 26->25 26->25
>>>Token void ReplacementFor_OOWP ( int ReplacementFor_NO ) { int i , ReplacementFor_j ; double ReplacementFor_temp ; int ReplacementFor_num ; for ( i = ( 0x398 + 8060 - 0x2314 ) ; i < ReplacementFor_n ; ++ i ) { ReplacementFor_temp = ( 0x158 + 6317 - 0x1a05 ) ; ReplacementFor_num = ( 0xe62 + 4643 - 0x2085 ) ; for ( ReplacementFor_j = ( 0xe03 + 1243 - 0x12de ) ; ReplacementFor_j < ReplacementFor_n ; ++ ReplacementFor_j ) { if ( ReplacementFor_table [ i ] [ ReplacementFor_j ] != ( ( char ) ( 0x1793 + 2230 - 0x201b ) ) ) { ReplacementFor_temp += ReplacementFor_owp [ ReplacementFor_j ] ; ReplacementFor_num ++ ; } } ReplacementFor_oowp [ i ] = ReplacementFor_temp / ( double ) ( ReplacementFor_num ) ; } }
>>>Func
METHOD main
METHOD_RETURN int
PARAM int ReplacementFor_argc
PARAM char*ReplacementFor_argv[]
scanf scanf("\x25\x64",&ReplacementFor_tc)
RETURN return EXIT_SUCCESS; return EXIT_SUCCESS;
<operator>.lessThan i\012<ReplacementFor_tc
<operator>.postIncrement i++
IDENTIFIER EXIT_SUCCESS return EXIT_SUCCESS;
<operator>.assignment i=(0x142+1243-0x61d)
scanf scanf("\x25\x6c\x6c\x64\x25\x64\x25\x64",&\012ReplacementFor_n,&ReplacementFor_d,&ReplacementFor_g)
printf printf(\012"\x43\x61\x73\x65\x20\x23\x25\x64\x3a\x20" i+(0x101a+3434-0x1d83))
<operator>.logicalAnd ReplacementFor_n>=(0x275+2459-0xbac)/ReplacementFor_gcd(ReplacementFor_d \012(0x1098+949-0x13e9))&&((ReplacementFor_d==(0x14d3+2424-0x1de7)&&ReplacementFor_g\012==(0xbbd+2132-0x13ad))||(ReplacementFor_d==(0x22ef+816-0x261f)&&ReplacementFor_g\012==(0x3f3+6133-0x1be8))||(ReplacementFor_g<(0x22b+2182-0xa4d)&&ReplacementFor_g>\012(0x187b+2110-0x20b9)))
<operator>.subtraction 0x142+1243-0x61d
<operator>.addition i+(0x101a+3434-0x1d83)
printf printf("\x50\x6f\x73\x73\x69\x62\x6c\x65" "\n")
<operator>.addition 0x142+1243
<operator>.subtraction 0x101a+3434-0x1d83
<operator>.greaterEqualsThan ReplacementFor_n>=(0x275+2459-0xbac)/ReplacementFor_gcd(ReplacementFor_d \012(0x1098+949-0x13e9))
<operator>.logicalOr (ReplacementFor_d==(0x14d3+2424-0x1de7)&&ReplacementFor_g\012==(0xbbd+2132-0x13ad))||(ReplacementFor_d==(0x22ef+816-0x261f)&&ReplacementFor_g\012==(0x3f3+6133-0x1be8))||(ReplacementFor_g<(0x22b+2182-0xa4d)&&ReplacementFor_g>\012(0x187b+2110-0x20b9))
printf printf("\x42\x72\x6f\x6b\x65\x6e" "\n")
<operator>.addition 0x101a+3434
<operator>.division (0x275+2459-0xbac)/ReplacementFor_gcd(ReplacementFor_d \012(0x1098+949-0x13e9))
<operator>.logicalOr (ReplacementFor_d==(0x14d3+2424-0x1de7)&&ReplacementFor_g\012==(0xbbd+2132-0x13ad))||(ReplacementFor_d==(0x22ef+816-0x261f)&&ReplacementFor_g\012==(0x3f3+6133-0x1be8))
<operator>.logicalAnd ReplacementFor_g<(0x22b+2182-0xa4d)&&ReplacementFor_g>\012(0x187b+2110-0x20b9)
<operator>.subtraction 0x275+2459-0xbac
ReplacementFor_gcd ReplacementFor_gcd(ReplacementFor_d \012(0x1098+949-0x13e9))
<operator>.logicalAnd ReplacementFor_d==(0x14d3+2424-0x1de7)&&ReplacementFor_g\012==(0xbbd+2132-0x13ad)
<operator>.logicalAnd ReplacementFor_d==(0x22ef+816-0x261f)&&ReplacementFor_g\012==(0x3f3+6133-0x1be8)
<operator>.lessThan ReplacementFor_g<(0x22b+2182-0xa4d)
<operator>.greaterThan ReplacementFor_g>\012(0x187b+2110-0x20b9)
<operator>.addition 0x275+2459
<operator>.subtraction 0x1098+949-0x13e9
<operator>.equals ReplacementFor_d==(0x14d3+2424-0x1de7)
<operator>.equals ReplacementFor_g\012==(0xbbd+2132-0x13ad)
<operator>.equals ReplacementFor_d==(0x22ef+816-0x261f)
<operator>.equals ReplacementFor_g\012==(0x3f3+6133-0x1be8)
<operator>.subtraction 0x22b+2182-0xa4d
<operator>.subtraction 0x187b+2110-0x20b9
<operator>.addition 0x1098+949
<operator>.subtraction 0x14d3+2424-0x1de7
<operator>.subtraction 0xbbd+2132-0x13ad
<operator>.subtraction 0x22ef+816-0x261f
<operator>.subtraction 0x3f3+6133-0x1be8
<operator>.addition 0x22b+2182
<operator>.addition 0x187b+2110
<operator>.addition 0x14d3+2424
<operator>.addition 0xbbd+2132
<operator>.addition 0x22ef+816
<operator>.addition 0x3f3+6133
<operator>.addressOf &\012ReplacementFor_n
<operator>.addressOf &ReplacementFor_d
<operator>.addressOf &ReplacementFor_g
>>>PDG&53 0->2 0->3 0->4 0->5 0->6 0->7 0->8 0->10 0->11 0->13 0->14 0->15 0->16 0->17 0->18 0->20 0->21 0->25 0->26 0->29 0->30 0->31 0->32 0->33 0->34 0->35 0->36 0->37 0->38 0->39 0->40 0->41 0->42 0->43 0->44 0->45 0->46 0->47 0->48 0->49 2->1 3->1 4->1 4->6 5->1 6->1 6->1 6->1 6->6 6->7 6->7 6->10 6->11 6->11 6->12 6->14 6->14 6->17 6->18 6->21 6->22 6->25 6->26 6->31 6->32 6->39 6->50 6->51 6->52 7->1 7->6 8->5 9->1 9->1 9->6 10->1 10->1 10->1 10->18 11->1 11->1 12->1 12->1 12->1 12->15 12->20 13->1 13->9 13->9 14->1 15->1 17->1 17->11 17->11 17->14 17->14 18->1 18->1 18->10 18->12 18->12 18->19 18->23 18->27 18->33 18->40 18->46 19->1 19->1 19->12 19->12 20->1 22->1 22->1 22->18 22->18 23->1 23->1 23->19 23->19 23->24 23->29 23->37 23->44 24->1 24->1 24->19 24->19 25->1 25->22 25->22 26->1 26->1 26->22 26->22 26->33 27->1 27->1 27->23 27->23 27->28 27->35 27->42 27->48 28->1 28->1 28->23 28->23 29->1 29->1 29->24 29->24 29->30 29->30 29->34 29->36 29->38 29->45 30->1 30->1 30->24 30->24 30->29 30->34 30->36 32->1 32->26 32->26 33->1 33->1 33->26 33->27 33->27 33->34 33->35 33->41 33->47 34->1 34->1 34->27 34->27 34->29 34->36 35->1 35->1 35->26 35->28 35->28 35->36 35->43 35->49 36->1 36->1 36->28 36->28 36->29 36->34 37->1 37->29 37->29 38->1 38->30 38->30 40->1 40->33 40->33 41->1 41->34 41->34 42->1 42->35 42->35 43->1 43->36 43->36
>>>Token int main ( int ReplacementFor_argc , char * ReplacementFor_argv [ ] ) { int i , ReplacementFor_tc ; long long ReplacementFor_n ; int ReplacementFor_d , ReplacementFor_g ; scanf ( " \x25 \x64 " , & ReplacementFor_tc ) ; for ( i = ( 0x142 + 1243 - 0x61d ) ; i < ReplacementFor_tc ; i ++ ) { scanf ( " \x25 \x6c \x6c \x64 \x25 \x64 \x25 \x64 " , & ReplacementFor_n , & ReplacementFor_d , & ReplacementFor_g ) ; printf ( " \x43 \x61 \x73 \x65 \x20 \x23 \x25 \x64 \x3a \x20 " , i + ( 0x101a + 3434 - 0x1d83 ) ) ; if ( ReplacementFor_n >= ( 0x275 + 2459 - 0xbac ) / ReplacementFor_gcd ( ReplacementFor_d , ( 0x1098 + 949 - 0x13e9 ) ) && ( ( ReplacementFor_d == ( 0x14d3 + 2424 - 0x1de7 ) && ReplacementFor_g == ( 0xbbd + 2132 - 0x13ad ) ) || ( ReplacementFor_d == ( 0x22ef + 816 - 0x261f ) && ReplacementFor_g == ( 0x3f3 + 6133 - 0x1be8 ) ) || ( ReplacementFor_g < ( 0x22b + 2182 - 0xa4d ) && ReplacementFor_g > ( 0x187b + 2110 - 0x20b9 ) ) ) ) printf ( " \x50 \x6f \x73 \x73 \x69 \x62 \x6c \x65 " " \n " ) ; else printf ( " \x42 \x72 \x6f \x6b \x65 \x6e " " \n " ) ; } return EXIT_SUCCESS ; }
>>>Func
METHOD ReplacementFor_compara
METHOD_RETURN int
PARAM void*\012ReplacementFor_x *ReplacementFor_y;
RETURN return(0xe1f+97-0xe80); return(0xe1f+97-0xe80);
<operator>.greaterThan *(int*)ReplacementFor_x>*(int*)\012ReplacementFor_y
<operator>.subtraction 0xe1f+97-0xe80
RETURN return(0xdc+1442-0x67d); return(0xdc+1442-0x67d);
<operator>.subtraction 0xdc+1442-0x67d
<operator>.addition 0xe1f+97
<operator>.cast (int*)ReplacementFor_x
<operator>.cast (int*)\012ReplacementFor_y
<operator>.lessThan *(int*)ReplacementFor_x<*(int*)\012ReplacementFor_y
<operator>.addition 0xdc+1442
RETURN return-(0x168f+225-0x176f); return-(0x168f+225-0x176f);
<operator>.minus -(0x168f+225-0x176f)
<operator>.cast (int*)ReplacementFor_x
<operator>.cast (int*)\012ReplacementFor_y
<operator>.subtraction 0x168f+225-0x176f
<operator>.addition 0x168f+225
<operator>.indirection *(int*)ReplacementFor_x
<operator>.indirection *(int*)\012ReplacementFor_y
UNKNOWN int* int*
UNKNOWN int* int*
>>>PDG&23 0->2 0->5 0->7 0->8 0->9 0->10 0->12 0->15 0->16 0->17 0->18 2->9 2->15 3->1 4->1 4->1 4->1 4->6 4->7 4->11 4->12 4->15 4->16 4->19 4->20 4->21 4->22 5->3 6->1 7->1 7->1 7->6 9->1 10->1 11->3 11->5 11->8 11->13 11->14 11->17 11->18 13->1 14->13 17->14 17->14
>>>Token int ReplacementFor_compara ( ReplacementFor_x , ReplacementFor_y )  void * ReplacementFor_x , * ReplacementFor_y ; { if ( * ( int * ) ReplacementFor_x > * ( int * ) ReplacementFor_y ) return ( 0xdc + 1442 - 0x67d ) ; else if ( * ( int * ) ReplacementFor_x < * ( int * ) ReplacementFor_y ) return - ( 0x168f + 225 - 0x176f ) ; return ( 0xe1f + 97 - 0xe80 ) ; }
>>>Func
METHOD ReplacementFor_algo
METHOD_RETURN int
PARAM char**ReplacementFor_a
PARAM int ReplacementFor_lim1
PARAM int \012ReplacementFor_lim2
PARAM int ReplacementFor_nb
ReplacementFor_init_tab_combine ReplacementFor_init_tab_combine(\012ReplacementFor_a,ReplacementFor_lim1)
ReplacementFor_init_tab_clear ReplacementFor_init_tab_clear(\012ReplacementFor_a,ReplacementFor_lim1,ReplacementFor_lim2)
<operator>.assignment ReplacementFor_liste_elements=ReplacementFor_listevide()
free free(ReplacementFor_tab_combine)
free free(\012ReplacementFor_tab_clear)
<operator>.assignment ReplacementFor_liste_elements=\012ReplacementFor_inverseliste(ReplacementFor_liste_elements)
<operator>.assignment ReplacementFor_compteur=ReplacementFor_countliste(ReplacementFor_liste_elements)
printf printf("\x25\x64" "\n",ReplacementFor_compteur)
RETURN return ReplacementFor_compteur; return ReplacementFor_compteur;
<operator>.lessThan i<ReplacementFor_nb
<operator>.postIncrement i++
IDENTIFIER ReplacementFor_compteur return ReplacementFor_compteur;
<operator>.assignment i=\012(0xbc8+3410-0x191a)
<operator>.assignment ReplacementFor_liste_elements=\012ReplacementFor_magick_add(ReplacementFor_construit_char(ReplacementFor_a[\012ReplacementFor_lim2][i]))
ReplacementFor_inverseliste ReplacementFor_inverseliste(ReplacementFor_liste_elements)
ReplacementFor_countliste ReplacementFor_countliste(ReplacementFor_liste_elements)
<operator>.subtraction 0xbc8+3410-0x191a
ReplacementFor_magick_add ReplacementFor_magick_add(ReplacementFor_construit_char(ReplacementFor_a[\012ReplacementFor_lim2][i]))
<operator>.addition 0xbc8+3410
ReplacementFor_construit_char ReplacementFor_construit_char(ReplacementFor_a[\012ReplacementFor_lim2][i])
<operator>.indirectIndexAccess ReplacementFor_a[\012ReplacementFor_lim2][i]
<operator>.indirectIndexAccess ReplacementFor_a[\012ReplacementFor_lim2]
>>>PDG&28 0->2 0->3 0->4 0->5 0->6 0->7 0->8 0->9 0->10 0->13 0->15 0->16 0->17 0->20 0->21 0->22 0->24 2->6 3->6 4->7 5->15 6->1 6->7 6->7 7->1 7->1 7->1 7->1 8->1 8->1 8->20 9->1 10->1 11->1 11->1 11->21 12->1 12->1 12->13 13->1 13->1 13->17 14->1 15->1 15->1 15->1 15->15 15->16 15->16 15->19 15->23 15->25 15->26 15->27 16->1 16->15 17->14 18->1 18->1 18->15 19->1 19->1 19->20 20->11 21->1 21->12 22->1 22->18 22->18 23->1 23->19 25->1 25->23
>>>Token int ReplacementFor_algo ( char * * ReplacementFor_a , int ReplacementFor_lim1 , int ReplacementFor_lim2 , int ReplacementFor_nb ) { ReplacementFor_init_tab_combine ( ReplacementFor_a , ReplacementFor_lim1 ) ; ReplacementFor_init_tab_clear ( ReplacementFor_a , ReplacementFor_lim1 , ReplacementFor_lim2 ) ; int i ; ReplacementFor_liste_elements = ReplacementFor_listevide ( ) ; for ( i = ( 0xbc8 + 3410 - 0x191a ) ; i < ReplacementFor_nb ; i ++ ) { ReplacementFor_liste_elements = ReplacementFor_magick_add ( ReplacementFor_construit_char ( ReplacementFor_a [ ReplacementFor_lim2 ] [ i ] ) ) ; } free ( ReplacementFor_tab_combine ) ; free ( ReplacementFor_tab_clear ) ; ReplacementFor_liste_elements = ReplacementFor_inverseliste ( ReplacementFor_liste_elements ) ; int ReplacementFor_compteur = ReplacementFor_countliste ( ReplacementFor_liste_elements ) ; printf ( " \x25 \x64 " " \n " , ReplacementFor_compteur ) ; return ReplacementFor_compteur ; }
>>>Func
METHOD ReplacementFor_test
METHOD_RETURN void
<operator>.assignment ReplacementFor_arr_empty[]={}
ReplacementFor_assert ReplacementFor_assert(ReplacementFor_exponential_search(ReplacementFor_arr_empty\012 (0x154b+868-0x18af) (0x634+152-0x6c2))==-(0x1a9b+897-0x1e1b))
<operator>.assignment ReplacementFor_arr_found[]={(0x50+9341-0x24cc) (0x2b5+1342-0x7f1) \012(0x158c+3383-0x22c0)}
ReplacementFor_assert ReplacementFor_assert(ReplacementFor_exponential_search(\012ReplacementFor_arr_found (0x13d9+3271-0x209d) (0x2395+865-0x26ec))==-\012(0x44d+3984-0x13dc))
<operator>.assignment ReplacementFor_arr_one[]={(0x1243+828-0x157e)}
ReplacementFor_assert ReplacementFor_assert(ReplacementFor_exponential_search(ReplacementFor_arr_found\012 (0x12ea+257-0x13ea) (0xe28+1025-0x1228))==(0xc03+5176-0x203b))
<operator>.assignment ReplacementFor_arr_first_2[]={(0xc27+3007-0x17e5) (0x676+654-0x902)}
ReplacementFor_assert ReplacementFor_assert(ReplacementFor_exponential_search(\012ReplacementFor_arr_first_2 (0x180b+1805-0x1f16) (0x69f+7832-0x2536))==\012(0x136a+1674-0x19f4))
<operator>.assignment ReplacementFor_arr_last_2[]={(0xb19+1901-0x1285) \012(0x8dd+3884-0x1807)}
ReplacementFor_assert ReplacementFor_assert(ReplacementFor_exponential_search(\012ReplacementFor_arr_last_2 (0x14a8+3186-0x2118) (0xd3b+3590-0x1b3f))==\012(0x63+9752-0x267a))
<operator>.assignment ReplacementFor_arr_first_n[]={-(0x5e6+3946-0x154f) \012(0x655+1709-0xd00) (0x73f+3830-0x1631) (0x983+3538-0x174f) (0x26c+8748-0x2490)}
ReplacementFor_assert ReplacementFor_assert(ReplacementFor_exponential_search(\012ReplacementFor_arr_first_n (0xf1a+4533-0x20ca) -(0x1506+1610-0x1b4f))==\012(0x1679+1666-0x1cfb))
<operator>.assignment ReplacementFor_arr_last_n[]={-(0x15c5+2608-0x1ff4)\012 (0x16fc+2449-0x208b) (0xee5+5533-0x247e) (0xf06+473-0x10d9) (0x1cd4+526-0x1eda)\012}
ReplacementFor_assert ReplacementFor_assert(ReplacementFor_exponential_search(\012ReplacementFor_arr_last_n (0xa7b+1053-0xe93) (0x4d1+7972-0x23ed))==\012(0xae6+1097-0xf2b))
<operator>.assignment ReplacementFor_arr_middle[]={-(0x2f8+2815-0xdf6) \012(0x10e9+1867-0x1832) (0x7ba+3998-0x1754) (0x196+4404-0x12c4) \012(0x1b1c+1874-0x2266)}
ReplacementFor_assert ReplacementFor_assert(ReplacementFor_exponential_search(\012ReplacementFor_arr_middle (0xe4d+5633-0x2449) (0x532+2658-0xf8e))==\012(0x1af3+214-0x1bc6))
<operator>.equals ReplacementFor_exponential_search(ReplacementFor_arr_empty\012 (0x154b+868-0x18af) (0x634+152-0x6c2))==-(0x1a9b+897-0x1e1b)
<operator>.arrayInitializer {(0x50+9341-0x24cc) (0x2b5+1342-0x7f1) \012(0x158c+3383-0x22c0)}
<operator>.equals ReplacementFor_exponential_search(\012ReplacementFor_arr_found (0x13d9+3271-0x209d) (0x2395+865-0x26ec))==-\012(0x44d+3984-0x13dc)
<operator>.arrayInitializer {(0x1243+828-0x157e)}
<operator>.equals ReplacementFor_exponential_search(ReplacementFor_arr_found\012 (0x12ea+257-0x13ea) (0xe28+1025-0x1228))==(0xc03+5176-0x203b)
<operator>.arrayInitializer {(0xc27+3007-0x17e5) (0x676+654-0x902)}
<operator>.equals ReplacementFor_exponential_search(\012ReplacementFor_arr_first_2 (0x180b+1805-0x1f16) (0x69f+7832-0x2536))==\012(0x136a+1674-0x19f4)
<operator>.arrayInitializer {(0xb19+1901-0x1285) \012(0x8dd+3884-0x1807)}
<operator>.equals ReplacementFor_exponential_search(\012ReplacementFor_arr_last_2 (0x14a8+3186-0x2118) (0xd3b+3590-0x1b3f))==\012(0x63+9752-0x267a)
<operator>.arrayInitializer {-(0x5e6+3946-0x154f) \012(0x655+1709-0xd00) (0x73f+3830-0x1631) (0x983+3538-0x174f) (0x26c+8748-0x2490)}
<operator>.equals ReplacementFor_exponential_search(\012ReplacementFor_arr_first_n (0xf1a+4533-0x20ca) -(0x1506+1610-0x1b4f))==\012(0x1679+1666-0x1cfb)
<operator>.arrayInitializer {-(0x15c5+2608-0x1ff4)\012 (0x16fc+2449-0x208b) (0xee5+5533-0x247e) (0xf06+473-0x10d9) (0x1cd4+526-0x1eda)\012}
<operator>.equals ReplacementFor_exponential_search(\012ReplacementFor_arr_last_n (0xa7b+1053-0xe93) (0x4d1+7972-0x23ed))==\012(0xae6+1097-0xf2b)
<operator>.arrayInitializer {-(0x2f8+2815-0xdf6) \012(0x10e9+1867-0x1832) (0x7ba+3998-0x1754) (0x196+4404-0x12c4) \012(0x1b1c+1874-0x2266)}
<operator>.equals ReplacementFor_exponential_search(\012ReplacementFor_arr_middle (0xe4d+5633-0x2449) (0x532+2658-0xf8e))==\012(0x1af3+214-0x1bc6)
ReplacementFor_exponential_search ReplacementFor_exponential_search(ReplacementFor_arr_empty\012 (0x154b+868-0x18af) (0x634+152-0x6c2))
<operator>.minus -(0x1a9b+897-0x1e1b)
<operator>.subtraction 0x50+9341-0x24cc
<operator>.subtraction 0x2b5+1342-0x7f1
<operator>.subtraction 0x158c+3383-0x22c0
ReplacementFor_exponential_search ReplacementFor_exponential_search(\012ReplacementFor_arr_found (0x13d9+3271-0x209d) (0x2395+865-0x26ec))
<operator>.minus -\012(0x44d+3984-0x13dc)
<operator>.subtraction 0x1243+828-0x157e
ReplacementFor_exponential_search ReplacementFor_exponential_search(ReplacementFor_arr_found\012 (0x12ea+257-0x13ea) (0xe28+1025-0x1228))
<operator>.subtraction 0xc03+5176-0x203b
<operator>.subtraction 0xc27+3007-0x17e5
<operator>.subtraction 0x676+654-0x902
ReplacementFor_exponential_search ReplacementFor_exponential_search(\012ReplacementFor_arr_first_2 (0x180b+1805-0x1f16) (0x69f+7832-0x2536))
<operator>.subtraction 0x136a+1674-0x19f4
<operator>.subtraction 0xb19+1901-0x1285
<operator>.subtraction 0x8dd+3884-0x1807
ReplacementFor_exponential_search ReplacementFor_exponential_search(\012ReplacementFor_arr_last_2 (0x14a8+3186-0x2118) (0xd3b+3590-0x1b3f))
<operator>.subtraction 0x63+9752-0x267a
<operator>.minus -(0x5e6+3946-0x154f)
<operator>.subtraction 0x655+1709-0xd00
<operator>.subtraction 0x73f+3830-0x1631
<operator>.subtraction 0x983+3538-0x174f
<operator>.subtraction 0x26c+8748-0x2490
ReplacementFor_exponential_search ReplacementFor_exponential_search(\012ReplacementFor_arr_first_n (0xf1a+4533-0x20ca) -(0x1506+1610-0x1b4f))
<operator>.subtraction 0x1679+1666-0x1cfb
<operator>.minus -(0x15c5+2608-0x1ff4)
<operator>.subtraction 0x16fc+2449-0x208b
<operator>.subtraction 0xee5+5533-0x247e
<operator>.subtraction 0xf06+473-0x10d9
<operator>.subtraction 0x1cd4+526-0x1eda
ReplacementFor_exponential_search ReplacementFor_exponential_search(\012ReplacementFor_arr_last_n (0xa7b+1053-0xe93) (0x4d1+7972-0x23ed))
<operator>.subtraction 0xae6+1097-0xf2b
<operator>.minus -(0x2f8+2815-0xdf6)
<operator>.subtraction 0x10e9+1867-0x1832
<operator>.subtraction 0x7ba+3998-0x1754
<operator>.subtraction 0x196+4404-0x12c4
<operator>.subtraction 0x1b1c+1874-0x2266
ReplacementFor_exponential_search ReplacementFor_exponential_search(\012ReplacementFor_arr_middle (0xe4d+5633-0x2449) (0x532+2658-0xf8e))
<operator>.subtraction 0x1af3+214-0x1bc6
<operator>.subtraction 0x154b+868-0x18af
<operator>.subtraction 0x634+152-0x6c2
<operator>.subtraction 0x1a9b+897-0x1e1b
<operator>.addition 0x50+9341
<operator>.addition 0x2b5+1342
<operator>.addition 0x158c+3383
<operator>.subtraction 0x13d9+3271-0x209d
<operator>.subtraction 0x2395+865-0x26ec
<operator>.subtraction 0x44d+3984-0x13dc
<operator>.addition 0x1243+828
<operator>.subtraction 0x12ea+257-0x13ea
<operator>.subtraction 0xe28+1025-0x1228
<operator>.addition 0xc03+5176
<operator>.addition 0xc27+3007
<operator>.addition 0x676+654
<operator>.subtraction 0x180b+1805-0x1f16
<operator>.subtraction 0x69f+7832-0x2536
<operator>.addition 0x136a+1674
<operator>.addition 0xb19+1901
<operator>.addition 0x8dd+3884
<operator>.subtraction 0x14a8+3186-0x2118
<operator>.subtraction 0xd3b+3590-0x1b3f
<operator>.addition 0x63+9752
<operator>.subtraction 0x5e6+3946-0x154f
<operator>.addition 0x655+1709
<operator>.addition 0x73f+3830
<operator>.addition 0x983+3538
<operator>.addition 0x26c+8748
<operator>.subtraction 0xf1a+4533-0x20ca
<operator>.minus -(0x1506+1610-0x1b4f)
<operator>.addition 0x1679+1666
<operator>.subtraction 0x15c5+2608-0x1ff4
<operator>.addition 0x16fc+2449
<operator>.addition 0xee5+5533
<operator>.addition 0xf06+473
<operator>.addition 0x1cd4+526
<operator>.subtraction 0xa7b+1053-0xe93
<operator>.subtraction 0x4d1+7972-0x23ed
<operator>.addition 0xae6+1097
<operator>.subtraction 0x2f8+2815-0xdf6
<operator>.addition 0x10e9+1867
<operator>.addition 0x7ba+3998
<operator>.addition 0x196+4404
<operator>.addition 0x1b1c+1874
<operator>.subtraction 0xe4d+5633-0x2449
<operator>.subtraction 0x532+2658-0xf8e
<operator>.addition 0x1af3+214
<operator>.addition 0x154b+868
<operator>.addition 0x634+152
<operator>.addition 0x1a9b+897
<operator>.addition 0x13d9+3271
<operator>.addition 0x2395+865
<operator>.addition 0x44d+3984
<operator>.addition 0x12ea+257
<operator>.addition 0xe28+1025
<operator>.addition 0x180b+1805
<operator>.addition 0x69f+7832
<operator>.addition 0x14a8+3186
<operator>.addition 0xd3b+3590
<operator>.addition 0x5e6+3946
<operator>.addition 0xf1a+4533
<operator>.subtraction 0x1506+1610-0x1b4f
<operator>.addition 0x15c5+2608
<operator>.addition 0xa7b+1053
<operator>.addition 0x4d1+7972
<operator>.addition 0x2f8+2815
<operator>.addition 0xe4d+5633
<operator>.addition 0x532+2658
<operator>.addition 0x1506+1610
>>>PDG&141 0->2 0->33 0->35 0->36 0->37 0->38 0->40 0->41 0->42 0->43 0->44 0->45 0->46 0->47 0->48 0->49 0->50 0->52 0->53 0->54 0->55 0->56 0->57 0->59 0->60 0->61 0->62 0->63 0->64 0->66 0->67 0->68 0->69 0->70 0->71 0->72 0->73 0->74 0->75 0->76 0->77 0->78 0->79 0->80 0->81 0->82 0->83 0->84 0->85 0->86 0->87 0->88 0->89 0->90 0->91 0->92 0->93 0->94 0->95 0->96 0->97 0->98 0->99 0->100 0->102 0->103 0->104 0->105 0->106 0->107 0->108 0->109 0->110 0->111 0->112 0->113 0->114 0->115 0->116 0->117 0->118 0->119 0->120 0->121 0->122 0->123 0->124 0->125 0->126 0->127 0->128 0->129 0->130 0->131 0->132 0->133 0->134 0->135 0->136 0->137 0->138 0->139 0->140 2->1 2->1 2->33 3->1 3->1 4->1 4->1 4->38 5->1 5->1 6->1 6->1 6->1 7->1 7->1 8->1 8->1 8->45 9->1 9->1 10->1 10->1 10->49 11->1 11->1 12->1 12->1 12->56 13->1 13->1 14->1 14->1 14->63 15->1 15->1 16->1 16->1 16->70 17->1 17->1 18->1 18->1 18->3 18->3 19->1 19->1 19->1 19->4 19->4 19->4 20->1 20->1 20->5 20->5 21->1 21->6 22->1 22->1 22->7 22->7 23->1 23->1 23->8 23->8 24->1 24->1 24->9 24->9 25->1 25->1 25->10 25->10 26->1 26->1 26->11 26->11 27->1 27->1 27->1 27->1 27->1 27->12 27->12 27->12 27->12 27->12 28->1 28->1 28->13 28->13 29->1 29->1 29->1 29->1 29->1 29->14 29->14 29->14 29->14 29->14 30->1 30->1 30->15 30->15 31->1 31->1 31->1 31->1 31->1 31->16 31->16 31->16 31->16 31->16 32->1 32->1 32->17 32->17 33->1 33->1 33->1 33->18 33->18 33->18 34->1 34->18 35->1 35->19 35->19 36->1 36->19 36->19 37->1 37->19 37->19 38->1 38->1 38->20 38->20 38->20 38->41 39->1 39->20 40->1 40->21 40->21 41->1 41->1 41->1 41->22 41->22 41->22 42->1 42->22 42->22 43->1 43->23 43->23 44->1 44->23 44->23 45->1 45->1 45->1 45->24 45->24 45->24 46->1 46->24 46->24 47->1 47->25 47->25 48->1 48->25 48->25 49->1 49->1 49->1 49->26 49->26 49->26 50->1 50->26 50->26 51->1 51->27 52->1 52->27 52->27 53->1 53->27 53->27 54->1 54->27 54->27 55->1 55->27 55->27 56->1 56->1 56->1 56->28 56->28 56->28 57->1 57->28 57->28 58->1 58->29 59->1 59->29 59->29 60->1 60->29 60->29 61->1 61->29 61->29 62->1 62->29 62->29 63->1 63->1 63->1 63->30 63->30 63->30 64->1 64->30 64->30 65->1 65->31 66->1 66->31 66->31 67->1 67->31 67->31 68->1 68->31 68->31 69->1 69->31 69->31 70->1 70->1 70->1 70->32 70->32 70->32 71->1 71->32 71->32 72->1 72->33 72->33 73->1 73->33 73->33 74->1 74->34 74->34 78->1 78->38 78->38 79->1 79->38 79->38 80->1 80->39 80->39 82->1 82->41 82->41 83->1 83->41 83->41 87->1 87->45 87->45 88->1 88->45 88->45 92->1 92->49 92->49 93->1 93->49 93->49 95->1 95->51 95->51 100->1 100->56 100->56 101->1 101->56 103->1 103->58 103->58 108->1 108->63 108->63 109->1 109->63 109->63 111->1 111->65 111->65 116->1 116->70 116->70 117->1 117->70 117->70 133->1 133->101 133->101
>>>Token static void ReplacementFor_test ( ) { int64_t ReplacementFor_arr_empty [ ] = { } ; ReplacementFor_assert ( ReplacementFor_exponential_search ( ReplacementFor_arr_empty , ( 0x154b + 868 - 0x18af ) , ( 0x634 + 152 - 0x6c2 ) ) == - ( 0x1a9b + 897 - 0x1e1b ) ) ; int64_t ReplacementFor_arr_found [ ] = { ( 0x50 + 9341 - 0x24cc ) , ( 0x2b5 + 1342 - 0x7f1 ) , ( 0x158c + 3383 - 0x22c0 ) } ; ReplacementFor_assert ( ReplacementFor_exponential_search ( ReplacementFor_arr_found , ( 0x13d9 + 3271 - 0x209d ) , ( 0x2395 + 865 - 0x26ec ) ) == - ( 0x44d + 3984 - 0x13dc ) ) ; int64_t ReplacementFor_arr_one [ ] = { ( 0x1243 + 828 - 0x157e ) } ; ReplacementFor_assert ( ReplacementFor_exponential_search ( ReplacementFor_arr_found , ( 0x12ea + 257 - 0x13ea ) , ( 0xe28 + 1025 - 0x1228 ) ) == ( 0xc03 + 5176 - 0x203b ) ) ; int64_t ReplacementFor_arr_first_2 [ ] = { ( 0xc27 + 3007 - 0x17e5 ) , ( 0x676 + 654 - 0x902 ) } ; ReplacementFor_assert ( ReplacementFor_exponential_search ( ReplacementFor_arr_first_2 , ( 0x180b + 1805 - 0x1f16 ) , ( 0x69f + 7832 - 0x2536 ) ) == ( 0x136a + 1674 - 0x19f4 ) ) ; int64_t ReplacementFor_arr_last_2 [ ] = { ( 0xb19 + 1901 - 0x1285 ) , ( 0x8dd + 3884 - 0x1807 ) } ; ReplacementFor_assert ( ReplacementFor_exponential_search ( ReplacementFor_arr_last_2 , ( 0x14a8 + 3186 - 0x2118 ) , ( 0xd3b + 3590 - 0x1b3f ) ) == ( 0x63 + 9752 - 0x267a ) ) ; int64_t ReplacementFor_arr_first_n [ ] = { - ( 0x5e6 + 3946 - 0x154f ) , ( 0x655 + 1709 - 0xd00 ) , ( 0x73f + 3830 - 0x1631 ) , ( 0x983 + 3538 - 0x174f ) , ( 0x26c + 8748 - 0x2490 ) } ; ReplacementFor_assert ( ReplacementFor_exponential_search ( ReplacementFor_arr_first_n , ( 0xf1a + 4533 - 0x20ca ) , - ( 0x1506 + 1610 - 0x1b4f ) ) == ( 0x1679 + 1666 - 0x1cfb ) ) ; int64_t ReplacementFor_arr_last_n [ ] = { - ( 0x15c5 + 2608 - 0x1ff4 ) , ( 0x16fc + 2449 - 0x208b ) , ( 0xee5 + 5533 - 0x247e ) , ( 0xf06 + 473 - 0x10d9 ) , ( 0x1cd4 + 526 - 0x1eda ) } ; ReplacementFor_assert ( ReplacementFor_exponential_search ( ReplacementFor_arr_last_n , ( 0xa7b + 1053 - 0xe93 ) , ( 0x4d1 + 7972 - 0x23ed ) ) == ( 0xae6 + 1097 - 0xf2b ) ) ; int64_t ReplacementFor_arr_middle [ ] = { - ( 0x2f8 + 2815 - 0xdf6 ) , ( 0x10e9 + 1867 - 0x1832 ) , ( 0x7ba + 3998 - 0x1754 ) , ( 0x196 + 4404 - 0x12c4 ) , ( 0x1b1c + 1874 - 0x2266 ) } ; ReplacementFor_assert ( ReplacementFor_exponential_search ( ReplacementFor_arr_middle , ( 0xe4d + 5633 - 0x2449 ) , ( 0x532 + 2658 - 0xf8e ) ) == ( 0x1af3 + 214 - 0x1bc6 ) ) ; }
>>>Func
METHOD main
METHOD_RETURN int
scanf scanf("\x25\x64",&Case)
RETURN return(0x10b2+348-0x120e); return(0x10b2+348-0x120e);
<operator>.lessEqualsThan t<=Case
<operator>.preIncrement ++t
<operator>.subtraction 0x10b2+348-0x120e
<operator>.assignment t=\012(0x1679+3250-0x232a)
scanf scanf("\x25\x64",&ReplacementFor_n)
ReplacementFor_WP ReplacementFor_WP()
ReplacementFor_OWP ReplacementFor_OWP()
ReplacementFor_OOWP ReplacementFor_OOWP()
printf printf("\x43\x61\x73\x65\x20\x23\x25\x64\x3a" "\n",t)
<operator>.lessThan i<ReplacementFor_n
<operator>.preIncrement ++i
<operator>.lessThan i<ReplacementFor_n
<operator>.preIncrement ++i
<operator>.addition 0x10b2+348
<operator>.subtraction 0x1679+3250-0x232a
<operator>.assignment i=\012(0x1988+3376-0x26b8)
scanf scanf("\x20\x25\x73",\012ReplacementFor_table[i])
<operator>.assignment i=(0x140c+2801-0x1efd)
printf printf("\x25\x6c\x66" "\n" 0.25*(\012double)(ReplacementFor_wp[i][(0x843+4154-0x187d)])/(double)(ReplacementFor_wp[i]\012[(0x94f+6214-0x2194)])+0.5*ReplacementFor_owp[i]+0.25*ReplacementFor_oowp[i])
<operator>.addition 0x1679+3250
<operator>.subtraction 0x1988+3376-0x26b8
<operator>.subtraction 0x140c+2801-0x1efd
<operator>.addition 0.25*(\012double)(ReplacementFor_wp[i][(0x843+4154-0x187d)])/(double)(ReplacementFor_wp[i]\012[(0x94f+6214-0x2194)])+0.5*ReplacementFor_owp[i]+0.25*ReplacementFor_oowp[i]
<operator>.addition 0x1988+3376
<operator>.addition 0x140c+2801
<operator>.addition 0.25*(\012double)(ReplacementFor_wp[i][(0x843+4154-0x187d)])/(double)(ReplacementFor_wp[i]\012[(0x94f+6214-0x2194)])+0.5*ReplacementFor_owp[i]
<operator>.multiplication 0.25*ReplacementFor_oowp[i]
<operator>.division 0.25*(\012double)(ReplacementFor_wp[i][(0x843+4154-0x187d)])/(double)(ReplacementFor_wp[i]\012[(0x94f+6214-0x2194)])
<operator>.multiplication 0.5*ReplacementFor_owp[i]
<operator>.multiplication 0.25*(\012double)(ReplacementFor_wp[i][(0x843+4154-0x187d)])
<operator>.cast (double)(ReplacementFor_wp[i]\012[(0x94f+6214-0x2194)])
<operator>.cast (\012double)(ReplacementFor_wp[i][(0x843+4154-0x187d)])
<operator>.subtraction 0x94f+6214-0x2194
<operator>.subtraction 0x843+4154-0x187d
<operator>.addition 0x94f+6214
<operator>.addition 0x843+4154
<operator>.addressOf &ReplacementFor_n
<operator>.indirectIndexAccess ReplacementFor_table[i]
<operator>.indirectIndexAccess ReplacementFor_oowp[i]
<operator>.indirectIndexAccess ReplacementFor_owp[i]
UNKNOWN double double
<operator>.indirectIndexAccess ReplacementFor_wp[i]\012[(0x94f+6214-0x2194)]
UNKNOWN double double
<operator>.indirectIndexAccess ReplacementFor_wp[i][(0x843+4154-0x187d)]
<operator>.indirectIndexAccess ReplacementFor_wp[i]
<operator>.indirectIndexAccess ReplacementFor_wp[i]
>>>PDG&50 0->2 0->4 0->5 0->6 0->8 0->9 0->10 0->11 0->12 0->13 0->14 0->15 0->16 0->17 0->18 0->22 0->23 0->24 0->25 0->27 0->28 0->30 0->32 0->33 0->36 0->37 0->38 0->39 2->1 2->4 3->1 4->1 4->1 4->1 4->4 4->5 4->8 4->9 4->10 4->11 4->12 4->12 4->13 4->15 4->19 4->21 4->24 4->25 4->27 4->28 4->40 5->1 5->4 6->1 6->1 6->3 7->1 7->1 7->4 8->1 8->13 8->15 9->1 10->1 11->1 12->1 12->5 13->13 13->14 13->14 13->15 13->20 13->41 14->1 14->13 15->1 15->1 15->1 15->8 15->13 15->15 15->16 15->16 15->22 15->26 15->29 15->30 15->31 15->32 15->33 15->34 15->35 15->36 15->37 15->38 15->39 15->42 15->43 15->44 15->45 15->46 15->47 15->48 15->49 16->1 16->15 18->1 18->7 18->7 19->1 19->1 19->13 20->1 21->1 21->1 21->15 22->1 22->1 24->1 24->19 24->19 25->1 25->21 25->21 26->1 26->1 29->1 29->1 30->1 30->22 30->22 30->26 30->26 31->1 31->1 31->22 31->22 31->26 31->26 31->29 31->29 32->1 32->22 32->22 32->26 32->26 32->29 32->29 33->1 33->31 33->31 34->1 35->1 36->1 37->1
>>>Token int main ( ) { int Case , t ; int i , ReplacementFor_j ; scanf ( " \x25 \x64 " , & Case ) ; for ( t = ( 0x1679 + 3250 - 0x232a ) ; t <= Case ; ++ t ) { scanf ( " \x25 \x64 " , & ReplacementFor_n ) ; for ( i = ( 0x1988 + 3376 - 0x26b8 ) ; i < ReplacementFor_n ; ++ i ) { scanf ( " \x20 \x25 \x73 " , ReplacementFor_table [ i ] ) ; } ReplacementFor_WP ( ) ; ReplacementFor_OWP ( ) ; ReplacementFor_OOWP ( ) ; printf ( " \x43 \x61 \x73 \x65 \x20 \x23 \x25 \x64 \x3a " " \n " , t ) ; for ( i = ( 0x140c + 2801 - 0x1efd ) ; i < ReplacementFor_n ; ++ i ) { printf ( " \x25 \x6c \x66 " " \n " , 0.25 * ( double ) ( ReplacementFor_wp [ i ] [ ( 0x843 + 4154 - 0x187d ) ] ) / ( double ) ( ReplacementFor_wp [ i ] [ ( 0x94f + 6214 - 0x2194 ) ] ) +0.5 * ReplacementFor_owp [ i ] + 0.25 * ReplacementFor_oowp [ i ] ) ; } } return ( 0x10b2 + 348 - 0x120e ) ; }
>>>Func
METHOD ReplacementFor_removeFromElementsSoFar
METHOD_RETURN void
PARAM int*ReplacementFor_elementsSoFar
PARAM char ReplacementFor_curChar
<operator>.assignment ReplacementFor_iElement=\012ReplacementFor_baseElementToInt(ReplacementFor_curChar)
<operator>.postDecrement ReplacementFor_elementsSoFar[ReplacementFor_iElement]--
ReplacementFor_baseElementToInt ReplacementFor_baseElementToInt(ReplacementFor_curChar)
>>>PDG&7 0->2 0->3 0->6 2->1 2->5 3->6 4->1 4->1 4->1 5->1 5->1 6->1 6->4
>>>Token void ReplacementFor_removeFromElementsSoFar ( int * ReplacementFor_elementsSoFar , char ReplacementFor_curChar ) { int ReplacementFor_iElement = ReplacementFor_baseElementToInt ( ReplacementFor_curChar ) ; ReplacementFor_elementsSoFar [ ReplacementFor_iElement ] -- ; }
>>>Func
METHOD ReplacementFor_insert
METHOD_RETURN ReplacementFor_List
PARAM ReplacementFor_List*\012ReplacementFor_list
PARAM double value
PARAM int ReplacementFor_pos
<operator>.equals ReplacementFor_list\012==NULL
<operator>.greaterThan ReplacementFor_pos>(0xc01+2182-0x1487)
<operator>.assignment ReplacementFor_list=ReplacementFor_create(value)
RETURN return \012ReplacementFor_list; return \012ReplacementFor_list;
<operator>.assignment *ReplacementFor_cpy=ReplacementFor_list
<operator>.assignment *ReplacementFor_tmp=\012ReplacementFor_cpy
<operator>.assignment ReplacementFor_flag=(0x8f9+1284-0xdfc)
<operator>.assignment index=\012(0x163d+1484-0x1c08)
<operator>.assignment ReplacementFor_size=(0xbcf+2079-0x13ee)
RETURN return ReplacementFor_list; return ReplacementFor_list;
IDENTIFIER ReplacementFor_list return \012ReplacementFor_list;
<operator>.subtraction 0xc01+2182-0x1487
<operator>.notEquals ReplacementFor_tmp!=NULL
<operator>.equals ReplacementFor_pos==(0x601+6486-0x1f56)
<operator>.greaterThan ReplacementFor_size+\012(0x8+9155-0x23c9)>ReplacementFor_pos
IDENTIFIER ReplacementFor_list return ReplacementFor_list;
ReplacementFor_create ReplacementFor_create(value)
<operator>.addition 0xc01+2182
<operator>.subtraction 0x8f9+1284-0xdfc
<operator>.subtraction 0x163d+1484-0x1c08
<operator>.subtraction 0xbcf+2079-0x13ee
<operator>.postIncrement ReplacementFor_size++
<operator>.assignment ReplacementFor_tmp=\012ReplacementFor_tmp->next
<operator>.assignment *ReplacementFor_new_node=ReplacementFor_create(value)
<operator>.assignment ReplacementFor_new_node->next=ReplacementFor_cpy
<operator>.assignment ReplacementFor_cpy->\012ReplacementFor_prev=ReplacementFor_new_node
<operator>.assignment ReplacementFor_list=\012ReplacementFor_new_node
RETURN return ReplacementFor_list; return ReplacementFor_list;
<operator>.assignment *ReplacementFor_new_node=(\012ReplacementFor_List*)malloc(sizeof(ReplacementFor_List))
<operator>.assignment ReplacementFor_new_node\012->value=value
<operator>.addition 0x8f9+1284
<operator>.addition 0x163d+1484
<operator>.addition 0xbcf+2079
<operator>.subtraction 0x601+6486-0x1f56
IDENTIFIER ReplacementFor_list return ReplacementFor_list;
<operator>.addition ReplacementFor_size+\012(0x8+9155-0x23c9)
<operator>.logicalAnd ReplacementFor_cpy->next!=NULL&&\012index<ReplacementFor_pos
<operator>.equals ReplacementFor_flag==ReplacementFor_pos
<operator>.lessThan ReplacementFor_flag<ReplacementFor_pos
<operator>.addition 0x601+6486
ReplacementFor_create ReplacementFor_create(value)
<operator>.subtraction 0x8+9155-0x23c9
<operator>.postIncrement ReplacementFor_flag++
<operator>.postIncrement index++
<operator>.assignment ReplacementFor_cpy=\012ReplacementFor_cpy->next
<operator>.assignment ReplacementFor_cpy->\012ReplacementFor_prev->next=ReplacementFor_new_node
<operator>.assignment ReplacementFor_new_node->next=\012ReplacementFor_cpy
<operator>.assignment ReplacementFor_new_node->ReplacementFor_prev=\012ReplacementFor_cpy->ReplacementFor_prev
<operator>.assignment ReplacementFor_cpy->ReplacementFor_prev=\012ReplacementFor_new_node
<operator>.assignment ReplacementFor_new_node->next=ReplacementFor_cpy->next
<operator>.assignment ReplacementFor_new_node->\012ReplacementFor_prev=ReplacementFor_cpy
<operator>.assignment ReplacementFor_cpy->next=\012ReplacementFor_new_node
<operator>.addition 0x8+9155
<operator>.notEquals ReplacementFor_cpy->next!=NULL
<operator>.lessThan index<ReplacementFor_pos
<operator>.sizeOf sizeof(ReplacementFor_List)
<operator>.indirectFieldAccess ReplacementFor_tmp->next
<operator>.indirectFieldAccess ReplacementFor_new_node->next
<operator>.indirectFieldAccess ReplacementFor_cpy->\012ReplacementFor_prev
<operator>.cast (\012ReplacementFor_List*)malloc(sizeof(ReplacementFor_List))
<operator>.indirectFieldAccess ReplacementFor_new_node\012->value
FIELD_IDENTIFIER next next
FIELD_IDENTIFIER next next
FIELD_IDENTIFIER ReplacementFor_prev ReplacementFor_prev
UNKNOWN ReplacementFor_List* ReplacementFor_List*
malloc malloc(sizeof(ReplacementFor_List))
FIELD_IDENTIFIER value value
<operator>.indirectFieldAccess ReplacementFor_cpy->next
<operator>.indirectFieldAccess ReplacementFor_cpy->next
<operator>.indirectFieldAccess ReplacementFor_cpy->\012ReplacementFor_prev->next
<operator>.indirectFieldAccess ReplacementFor_new_node->next
<operator>.indirectFieldAccess ReplacementFor_new_node->ReplacementFor_prev
<operator>.indirectFieldAccess ReplacementFor_cpy->ReplacementFor_prev
<operator>.indirectFieldAccess ReplacementFor_cpy->ReplacementFor_prev
<operator>.indirectFieldAccess ReplacementFor_new_node->next
<operator>.indirectFieldAccess ReplacementFor_cpy->next
<operator>.indirectFieldAccess ReplacementFor_new_node->\012ReplacementFor_prev
<operator>.indirectFieldAccess ReplacementFor_cpy->next
FIELD_IDENTIFIER next next
FIELD_IDENTIFIER next next
<operator>.indirectFieldAccess ReplacementFor_cpy->\012ReplacementFor_prev
FIELD_IDENTIFIER next next
FIELD_IDENTIFIER next next
FIELD_IDENTIFIER ReplacementFor_prev ReplacementFor_prev
FIELD_IDENTIFIER ReplacementFor_prev ReplacementFor_prev
FIELD_IDENTIFIER ReplacementFor_prev ReplacementFor_prev
FIELD_IDENTIFIER next next
FIELD_IDENTIFIER next next
FIELD_IDENTIFIER ReplacementFor_prev ReplacementFor_prev
FIELD_IDENTIFIER next next
FIELD_IDENTIFIER ReplacementFor_prev ReplacementFor_prev
>>>PDG&96 0->2 0->3 0->4 0->5 0->6 0->9 0->10 0->15 0->16 0->17 0->18 0->19 0->20 0->21 0->22 0->23 0->24 0->25 0->26 0->29 0->30 0->31 0->34 0->35 0->36 0->37 0->38 0->39 0->40 0->42 0->43 0->44 0->45 0->46 0->47 0->48 0->50 0->51 0->53 0->55 0->56 0->57 0->58 0->59 2->5 3->21 3->34 3->45 4->1 4->6 5->1 5->1 5->6 5->7 5->8 5->9 5->16 5->17 5->20 5->21 5->22 6->9 6->10 6->11 6->12 6->13 6->17 6->18 6->18 6->23 6->24 6->25 6->35 6->36 6->37 6->38 6->44 7->1 7->1 7->1 7->15 8->1 9->10 9->29 9->51 9->55 10->17 11->42 11->47 12->48 12->59 13->19 13->26 13->40 14->1 15->8 16->6 16->6 17->17 17->26 17->27 17->58 17->61 17->66 18->14 18->19 18->19 18->28 18->29 18->30 18->31 18->32 18->40 18->45 18->46 18->57 18->62 18->63 18->67 18->68 19->33 19->34 19->41 19->42 19->42 19->43 19->58 19->59 19->60 19->64 19->65 19->69 19->70 19->71 19->72 19->83 20->14 21->1 21->7 23->11 23->11 24->12 24->12 25->13 25->13 26->19 26->40 27->17 28->30 28->31 31->39 32->1 33->50 33->53 33->56 38->18 38->18 39->32 41->41 41->47 41->48 41->49 41->58 41->72 41->73 41->83 41->84 42->43 42->43 42->50 42->51 42->52 42->53 42->74 42->75 42->76 42->77 42->78 42->85 42->86 42->87 42->88 42->89 42->90 42->95 43->54 43->55 43->56 43->79 43->80 43->81 43->82 43->91 43->92 43->93 43->94 45->28 46->19 46->19 46->40 46->40 47->42 48->59 49->51 49->55 58->41 58->41 58->49 58->54 58->59 59->41 59->41 59->42 59->48 60->1
>>>Token ReplacementFor_List * ReplacementFor_insert ( ReplacementFor_List * ReplacementFor_list , double value , int ReplacementFor_pos ) { if ( ReplacementFor_list == NULL ) { ReplacementFor_list = ReplacementFor_create ( value ) ; return ReplacementFor_list ; } if ( ReplacementFor_pos > ( 0xc01 + 2182 - 0x1487 ) ) { ReplacementFor_List * ReplacementFor_cpy = ReplacementFor_list , * ReplacementFor_tmp = ReplacementFor_cpy ; int ReplacementFor_flag = ( 0x8f9 + 1284 - 0xdfc ) , index = ( 0x163d + 1484 - 0x1c08 ) , ReplacementFor_size = ( 0xbcf + 2079 - 0x13ee ) ; while ( ReplacementFor_tmp != NULL ) { ReplacementFor_size ++ ; ReplacementFor_tmp = ReplacementFor_tmp -> next ; } if ( ReplacementFor_pos == ( 0x601 + 6486 - 0x1f56 ) ) { ReplacementFor_List * ReplacementFor_new_node = ReplacementFor_create ( value ) ; ReplacementFor_new_node -> next = ReplacementFor_cpy ; ReplacementFor_cpy -> ReplacementFor_prev = ReplacementFor_new_node ; ReplacementFor_list = ReplacementFor_new_node ; return ReplacementFor_list ; } if ( ReplacementFor_size + ( 0x8 + 9155 - 0x23c9 ) > ReplacementFor_pos ) { while ( ReplacementFor_cpy -> next != NULL && index < ReplacementFor_pos ) { ReplacementFor_flag ++ ; index ++ ; ReplacementFor_cpy = ReplacementFor_cpy -> next ; } ReplacementFor_List * ReplacementFor_new_node = ( ReplacementFor_List * ) malloc ( sizeof ( ReplacementFor_List ) ) ; ReplacementFor_new_node -> value = value ; if ( ReplacementFor_flag == ReplacementFor_pos ) { ReplacementFor_cpy -> ReplacementFor_prev -> next = ReplacementFor_new_node ; ReplacementFor_new_node -> next = ReplacementFor_cpy ; ReplacementFor_new_node -> ReplacementFor_prev = ReplacementFor_cpy -> ReplacementFor_prev ; ReplacementFor_cpy -> ReplacementFor_prev = ReplacementFor_new_node ; } if ( ReplacementFor_flag < ReplacementFor_pos ) { ReplacementFor_new_node -> next = ReplacementFor_cpy -> next ; ReplacementFor_new_node -> ReplacementFor_prev = ReplacementFor_cpy ; ReplacementFor_cpy -> next = ReplacementFor_new_node ; } } return ReplacementFor_list ; } }
>>>Func
METHOD ReplacementFor_createqueue
METHOD_RETURN void
<operator>.assignment ReplacementFor_front=ReplacementFor_rear=NULL
<operator>.assignment ReplacementFor_rear=NULL
>>>PDG&4 0->2 0->3 2->1 2->1 2->1 3->1 3->1 3->2
>>>Token void ReplacementFor_createqueue ( ) { ReplacementFor_front = ReplacementFor_rear = NULL ; }
>>>Func
METHOD main
METHOD_RETURN int
PARAM void
scanf scanf("\x25\x64",&T)
RETURN return(0xd48+2818-0x184a); return(0xd48+2818-0x184a);
<operator>.lessThan i<T\012+(0x43b+2720-0xeda)
<operator>.postIncrement i++
<operator>.subtraction 0xd48+2818-0x184a
<operator>.assignment i=(0x1227+2533-0x1c0b)
memset memset(ReplacementFor_ele (0xf4d+5250-0x23cf) sizeof(\012ReplacementFor_ele))
memset memset(array (0x5bc+8427-0x26a7) sizeof(array))
scanf scanf("\x25\x64",&ReplacementFor_C)
scanf scanf("\x25\x64",&ReplacementFor_D)
scanf scanf("\x25\x64",&ReplacementFor_N)
scanf scanf(\012"\x25\x73",ReplacementFor_istr)
<operator>.assignment ReplacementFor_o_idx=(0x64f+4509-0x17ec)
<operator>.assignment ReplacementFor_pre_string_value=ReplacementFor_string_value=(0x214+2971-0xdaf)
<operator>.assignment ReplacementFor_ostr[\012ReplacementFor_o_idx]=(0x971+6030-0x20ff)
<operator>.assignment ReplacementFor_istr[(0xf7+7534-0x1e65)\012]=ReplacementFor_ostr[(0xc29+6189-0x2456)]
<operator>.assignment ReplacementFor_istr[(0xe6f+5380-0x2370)*ReplacementFor_j-\012(0x9d3+5519-0x1f60)]=(0x4a1+7710-0x22bf)
printf printf(\012"\x43\x61\x73\x65\x20\x23\x25\x64\x3a\x20\x5b\x25\x73\x5d" "\n",i,\012ReplacementFor_istr)
<operator>.addition T\012+(0x43b+2720-0xeda)
<operator>.lessThan ReplacementFor_j<sizeof(\012ReplacementFor_basic_ele)
<operator>.postIncrement ReplacementFor_j++
<operator>.lessThan ReplacementFor_j<ReplacementFor_C
<operator>.postIncrement ReplacementFor_j++
<operator>.lessThan ReplacementFor_j<ReplacementFor_D
<operator>.postIncrement ReplacementFor_j++
<operator>.lessThan ReplacementFor_j<ReplacementFor_N
<operator>.postIncrement ReplacementFor_j++
<operator>.lessThan ReplacementFor_j<ReplacementFor_o_idx
<operator>.postIncrement ReplacementFor_j++
<operator>.addition 0xd48+2818
<operator>.subtraction 0x1227+2533-0x1c0b
<operator>.subtraction 0x43b+2720-0xeda
<operator>.subtraction 0xf4d+5250-0x23cf
<operator>.subtraction 0x5bc+8427-0x26a7
<operator>.assignment ReplacementFor_j=(0x12b4+4076-0x22a0)
<operator>.assignment ReplacementFor_ele[\012ReplacementFor_basic_ele[ReplacementFor_j]-((char)(0x190b+103-0x1931))].value=\012(0x1ed5+1476-0x2498)<<ReplacementFor_j
<operator>.assignment ReplacementFor_j=(0x1837+1517-0x1e24)
scanf scanf("\x25\x73",ReplacementFor_istr)
<operator>.assignment array[\012ReplacementFor_ele[ReplacementFor_istr[(0x63a+2888-0x1182)]-\012((char)(0x16a1+930-0x1a02))].value|ReplacementFor_ele[ReplacementFor_istr[\012(0xf8a+2479-0x1938)]-((char)(0x1178+2677-0x1bac))].value]=ReplacementFor_istr[\012(0x148b+3545-0x2262)]
<operator>.assignment ReplacementFor_j=\012(0x6f4+7169-0x22f5)
scanf scanf(\012"\x25\x73",ReplacementFor_istr)
<operator>.assignmentPlus ReplacementFor_ele[ReplacementFor_istr[\012(0xb9d+4016-0x1b4d)]-((char)(0x940+21-0x914))].ReplacementFor_opp_value+=\012ReplacementFor_ele[ReplacementFor_istr[(0x2ea+7833-0x2182)]-\012((char)(0xde0+3616-0x1bbf))].value
<operator>.assignmentPlus ReplacementFor_ele[ReplacementFor_istr[\012(0x513+777-0x81b)]-((char)(0x853+7054-0x23a0))].ReplacementFor_opp_value+=\012ReplacementFor_ele[ReplacementFor_istr[(0x23bb+54-0x23f1)]-\012((char)(0xb53+5878-0x2208))].value
<operator>.subtraction 0x64f+4509-0x17ec
<operator>.assignment ReplacementFor_string_value=(0x214+2971-0xdaf)
<operator>.assignment ReplacementFor_j=(0x11c5+578-0x1407)
<operator>.assignment ReplacementFor_ostr[ReplacementFor_o_idx]=\012ReplacementFor_istr[ReplacementFor_j]
<operator>.assignment ReplacementFor_cur_value=\012ReplacementFor_ele[ReplacementFor_ostr[ReplacementFor_o_idx]-\012((char)(0x228+7106-0x1da9))].value
<operator>.assignment ReplacementFor_cur_opp_value=\012ReplacementFor_ele[ReplacementFor_ostr[ReplacementFor_o_idx]-\012((char)(0x8a2+1829-0xf86))].ReplacementFor_opp_value
<operator>.assignment ReplacementFor_pre_string_value=\012ReplacementFor_string_value
<operators>.assignmentOr ReplacementFor_string_value|=\012ReplacementFor_cur_value
<operator>.postIncrement ReplacementFor_o_idx++
<operator>.subtraction 0x971+6030-0x20ff
<operator>.assignment ReplacementFor_j=\012(0x55f+998-0x944)
<operator>.assignment ReplacementFor_istr[(0x73a+1309-0xc54)*ReplacementFor_j-(0xf47+3797-0x1e1a)]=\012((char)(0x1a33+2538-0x23f1))
<operator>.assignment ReplacementFor_istr[(0x119c+3640-0x1fd1)*\012ReplacementFor_j-(0xea5+5187-0x22e7)]=((char)(0x818+4055-0x17cf))
<operator>.assignment ReplacementFor_istr[(0x1619+3177-0x227f)*ReplacementFor_j]=ReplacementFor_ostr[\012ReplacementFor_j]
<operator>.subtraction 0x4a1+7710-0x22bf
<operator>.addition 0x1227+2533
<operator>.addition 0x43b+2720
<operator>.addition 0xf4d+5250
<operator>.addition 0x5bc+8427
<operator>.sizeOf sizeof(\012ReplacementFor_basic_ele)
<operator>.addition 0x64f+4509
<operator>.subtraction 0x214+2971-0xdaf
<operator>.greaterThan ReplacementFor_o_idx>\012(0x5e2+7012-0x2146)
<operator>.addition 0x971+6030
<operator>.subtraction 0xf7+7534-0x1e65
<operator>.subtraction 0xc29+6189-0x2456
<operator>.subtraction (0xe6f+5380-0x2370)*ReplacementFor_j-\012(0x9d3+5519-0x1f60)
<operator>.addition 0x4a1+7710
<operator>.subtraction 0x12b4+4076-0x22a0
<operator>.shiftLeft (0x1ed5+1476-0x2498)<<ReplacementFor_j
<operator>.subtraction 0x1837+1517-0x1e24
<operator>.subtraction 0x6f4+7169-0x22f5
<operator>.addition 0x214+2971
<operator>.subtraction 0x11c5+578-0x1407
<operator>.assignment ReplacementFor_pre_value=ReplacementFor_ele[\012ReplacementFor_ostr[ReplacementFor_o_idx-(0x1c27+1621-0x227b)]-\012((char)(0x1cdb+1572-0x22be))].value
<operator>.addition 0xf7+7534
<operator>.addition 0xc29+6189
<operator>.subtraction 0x55f+998-0x944
<operator>.cast (char)(0x1a33+2538-0x23f1)
<operator>.cast (char)(0x818+4055-0x17cf)
<operator>.multiplication (0xe6f+5380-0x2370)*ReplacementFor_j
<operator>.subtraction 0x9d3+5519-0x1f60
<operator>.addition 0x12b4+4076
<operator>.subtraction 0x1ed5+1476-0x2498
<operator>.addition 0x1837+1517
<operator>.or ReplacementFor_ele[ReplacementFor_istr[(0x63a+2888-0x1182)]-\012((char)(0x16a1+930-0x1a02))].value|ReplacementFor_ele[ReplacementFor_istr[\012(0xf8a+2479-0x1938)]-((char)(0x1178+2677-0x1bac))].value
<operator>.subtraction 0x148b+3545-0x2262
<operator>.addition 0x6f4+7169
<operator>.addition 0x11c5+578
<operator>.subtraction 0x5e2+7012-0x2146
IDENTIFIER ReplacementFor_pre_value if (ReplacementFor_pre_value)
<operator>.and ReplacementFor_cur_opp_value&ReplacementFor_string_value
<operator>.addition 0x55f+998
<operator>.subtraction (0x73a+1309-0xc54)*ReplacementFor_j-(0xf47+3797-0x1e1a)
<operator>.subtraction 0x1a33+2538-0x23f1
<operator>.subtraction (0x119c+3640-0x1fd1)*\012ReplacementFor_j-(0xea5+5187-0x22e7)
<operator>.subtraction 0x818+4055-0x17cf
<operator>.multiplication (0x1619+3177-0x227f)*ReplacementFor_j
<operator>.subtraction 0xe6f+5380-0x2370
<operator>.addition 0x9d3+5519
<operator>.subtraction ReplacementFor_basic_ele[ReplacementFor_j]-((char)(0x190b+103-0x1931))
<operator>.addition 0x1ed5+1476
<operator>.addition 0x148b+3545
<operator>.subtraction ReplacementFor_istr[\012(0xb9d+4016-0x1b4d)]-((char)(0x940+21-0x914))
<operator>.subtraction ReplacementFor_istr[(0x2ea+7833-0x2182)]-\012((char)(0xde0+3616-0x1bbf))
<operator>.subtraction ReplacementFor_istr[\012(0x513+777-0x81b)]-((char)(0x853+7054-0x23a0))
<operator>.subtraction ReplacementFor_istr[(0x23bb+54-0x23f1)]-\012((char)(0xb53+5878-0x2208))
<operator>.subtraction ReplacementFor_ostr[ReplacementFor_o_idx]-\012((char)(0x228+7106-0x1da9))
<operator>.subtraction ReplacementFor_ostr[ReplacementFor_o_idx]-\012((char)(0x8a2+1829-0xf86))
<operator>.addition 0x5e2+7012
<operator>.assignment ReplacementFor_combine_value=ReplacementFor_pre_value|ReplacementFor_cur_value
<operator>.assignment ReplacementFor_o_idx=\012(0x14+843-0x35f)
<operator>.assignment ReplacementFor_pre_string_value=ReplacementFor_string_value=\012(0x420+1746-0xaf2)
<operator>.multiplication (0x73a+1309-0xc54)*ReplacementFor_j
<operator>.subtraction 0xf47+3797-0x1e1a
<operator>.addition 0x1a33+2538
<operator>.multiplication (0x119c+3640-0x1fd1)*\012ReplacementFor_j
<operator>.subtraction 0xea5+5187-0x22e7
<operator>.addition 0x818+4055
<operator>.subtraction 0x1619+3177-0x227f
<operator>.addition 0xe6f+5380
<operator>.cast (char)(0x190b+103-0x1931)
<operator>.cast (char)(0x940+21-0x914)
<operator>.cast (char)(0xde0+3616-0x1bbf)
<operator>.cast (char)(0x853+7054-0x23a0)
<operator>.cast (char)(0xb53+5878-0x2208)
<operator>.cast (char)(0x228+7106-0x1da9)
<operator>.cast (char)(0x8a2+1829-0xf86)
<operator>.subtraction 0x73a+1309-0xc54
<operator>.addition 0xf47+3797
<operator>.subtraction 0x119c+3640-0x1fd1
<operator>.addition 0xea5+5187
<operator>.addition 0x1619+3177
<operator>.subtraction 0x190b+103-0x1931
<operator>.subtraction ReplacementFor_istr[(0x63a+2888-0x1182)]-\012((char)(0x16a1+930-0x1a02))
<operator>.subtraction ReplacementFor_istr[\012(0xf8a+2479-0x1938)]-((char)(0x1178+2677-0x1bac))
<operator>.subtraction 0xb9d+4016-0x1b4d
<operator>.subtraction 0x940+21-0x914
<operator>.subtraction 0x2ea+7833-0x2182
<operator>.subtraction 0xde0+3616-0x1bbf
<operator>.subtraction 0x513+777-0x81b
<operator>.subtraction 0x853+7054-0x23a0
<operator>.subtraction 0x23bb+54-0x23f1
<operator>.subtraction 0xb53+5878-0x2208
<operator>.subtraction 0x228+7106-0x1da9
<operator>.subtraction 0x8a2+1829-0xf86
<operator>.subtraction ReplacementFor_ostr[ReplacementFor_o_idx-(0x1c27+1621-0x227b)]-\012((char)(0x1cdb+1572-0x22be))
<operator>.or ReplacementFor_pre_value|ReplacementFor_cur_value
<operator>.assignment ReplacementFor_ostr[ReplacementFor_o_idx\012-(0x229+8573-0x23a5)]=array[ReplacementFor_combine_value]
<operator>.assignment ReplacementFor_string_value=ReplacementFor_pre_string_value
<operator>.subtraction 0x14+843-0x35f
<operator>.assignment ReplacementFor_string_value=\012(0x420+1746-0xaf2)
<operator>.addition 0x73a+1309
<operator>.addition 0x119c+3640
<operator>.addition 0x190b+103
<operator>.cast (char)(0x16a1+930-0x1a02)
<operator>.cast (char)(0x1178+2677-0x1bac)
<operator>.addition 0xb9d+4016
<operator>.addition 0x940+21
<operator>.addition 0x2ea+7833
<operator>.addition 0xde0+3616
<operator>.addition 0x513+777
<operator>.addition 0x853+7054
<operator>.addition 0x23bb+54
<operator>.addition 0xb53+5878
<operator>.addition 0x228+7106
<operator>.addition 0x8a2+1829
<operator>.cast (char)(0x1cdb+1572-0x22be)
<operator>.addition 0x14+843
<operator>.subtraction 0x420+1746-0xaf2
<operator>.subtraction 0x63a+2888-0x1182
<operator>.subtraction 0x16a1+930-0x1a02
<operator>.subtraction 0xf8a+2479-0x1938
<operator>.subtraction 0x1178+2677-0x1bac
<operator>.subtraction ReplacementFor_o_idx-(0x1c27+1621-0x227b)
<operator>.subtraction 0x1cdb+1572-0x22be
<operator>.addition 0x420+1746
<operator>.addition 0x63a+2888
<operator>.addition 0x16a1+930
<operator>.addition 0xf8a+2479
<operator>.addition 0x1178+2677
<operator>.subtraction 0x1c27+1621-0x227b
<operator>.addition 0x1cdb+1572
<operator>.subtraction ReplacementFor_o_idx\012-(0x229+8573-0x23a5)
<operator>.addition 0x1c27+1621
<operator>.subtraction 0x229+8573-0x23a5
<operator>.addition 0x229+8573
<operator>.sizeOf sizeof(\012ReplacementFor_ele)
<operator>.sizeOf sizeof(array)
<operator>.addressOf &ReplacementFor_C
<operator>.addressOf &ReplacementFor_D
<operator>.addressOf &ReplacementFor_N
<operator>.indirectIndexAccess ReplacementFor_ostr[\012ReplacementFor_o_idx]
<operator>.indirectIndexAccess ReplacementFor_istr[(0xf7+7534-0x1e65)\012]
<operator>.indirectIndexAccess ReplacementFor_ostr[(0xc29+6189-0x2456)]
<operator>.indirectIndexAccess ReplacementFor_istr[(0xe6f+5380-0x2370)*ReplacementFor_j-\012(0x9d3+5519-0x1f60)]
<operator>.fieldAccess ReplacementFor_ele[\012ReplacementFor_basic_ele[ReplacementFor_j]-((char)(0x190b+103-0x1931))].value
<operator>.indirectIndexAccess array[\012ReplacementFor_ele[ReplacementFor_istr[(0x63a+2888-0x1182)]-\012((char)(0x16a1+930-0x1a02))].value|ReplacementFor_ele[ReplacementFor_istr[\012(0xf8a+2479-0x1938)]-((char)(0x1178+2677-0x1bac))].value]
<operator>.indirectIndexAccess ReplacementFor_istr[\012(0x148b+3545-0x2262)]
<operator>.fieldAccess ReplacementFor_ele[ReplacementFor_istr[\012(0xb9d+4016-0x1b4d)]-((char)(0x940+21-0x914))].ReplacementFor_opp_value
<operator>.fieldAccess ReplacementFor_ele[ReplacementFor_istr[(0x2ea+7833-0x2182)]-\012((char)(0xde0+3616-0x1bbf))].value
<operator>.fieldAccess ReplacementFor_ele[ReplacementFor_istr[\012(0x513+777-0x81b)]-((char)(0x853+7054-0x23a0))].ReplacementFor_opp_value
<operator>.fieldAccess ReplacementFor_ele[ReplacementFor_istr[(0x23bb+54-0x23f1)]-\012((char)(0xb53+5878-0x2208))].value
<operator>.indirectIndexAccess ReplacementFor_ostr[ReplacementFor_o_idx]
<operator>.indirectIndexAccess ReplacementFor_istr[ReplacementFor_j]
<operator>.fieldAccess ReplacementFor_ele[ReplacementFor_ostr[ReplacementFor_o_idx]-\012((char)(0x228+7106-0x1da9))].value
<operator>.fieldAccess ReplacementFor_ele[ReplacementFor_ostr[ReplacementFor_o_idx]-\012((char)(0x8a2+1829-0xf86))].ReplacementFor_opp_value
<operator>.indirectIndexAccess ReplacementFor_istr[(0x73a+1309-0xc54)*ReplacementFor_j-(0xf47+3797-0x1e1a)]
<operator>.indirectIndexAccess ReplacementFor_istr[(0x119c+3640-0x1fd1)*\012ReplacementFor_j-(0xea5+5187-0x22e7)]
<operator>.indirectIndexAccess ReplacementFor_istr[(0x1619+3177-0x227f)*ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_ostr[\012ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_ele[\012ReplacementFor_basic_ele[ReplacementFor_j]-((char)(0x190b+103-0x1931))]
FIELD_IDENTIFIER value value
<operator>.indirectIndexAccess ReplacementFor_ele[ReplacementFor_istr[\012(0xb9d+4016-0x1b4d)]-((char)(0x940+21-0x914))]
FIELD_IDENTIFIER ReplacementFor_opp_value ReplacementFor_opp_value
<operator>.indirectIndexAccess ReplacementFor_ele[ReplacementFor_istr[(0x2ea+7833-0x2182)]-\012((char)(0xde0+3616-0x1bbf))]
FIELD_IDENTIFIER value value
<operator>.indirectIndexAccess ReplacementFor_ele[ReplacementFor_istr[\012(0x513+777-0x81b)]-((char)(0x853+7054-0x23a0))]
FIELD_IDENTIFIER ReplacementFor_opp_value ReplacementFor_opp_value
<operator>.indirectIndexAccess ReplacementFor_ele[ReplacementFor_istr[(0x23bb+54-0x23f1)]-\012((char)(0xb53+5878-0x2208))]
FIELD_IDENTIFIER value value
<operator>.indirectIndexAccess ReplacementFor_ele[ReplacementFor_ostr[ReplacementFor_o_idx]-\012((char)(0x228+7106-0x1da9))]
FIELD_IDENTIFIER value value
<operator>.indirectIndexAccess ReplacementFor_ele[ReplacementFor_ostr[ReplacementFor_o_idx]-\012((char)(0x8a2+1829-0xf86))]
FIELD_IDENTIFIER ReplacementFor_opp_value ReplacementFor_opp_value
UNKNOWN char char
UNKNOWN char char
<operator>.fieldAccess ReplacementFor_ele[ReplacementFor_istr[(0x63a+2888-0x1182)]-\012((char)(0x16a1+930-0x1a02))].value
<operator>.fieldAccess ReplacementFor_ele[ReplacementFor_istr[\012(0xf8a+2479-0x1938)]-((char)(0x1178+2677-0x1bac))].value
<operator>.fieldAccess ReplacementFor_ele[\012ReplacementFor_ostr[ReplacementFor_o_idx-(0x1c27+1621-0x227b)]-\012((char)(0x1cdb+1572-0x22be))].value
<operator>.indirectIndexAccess ReplacementFor_basic_ele[ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_ele[ReplacementFor_istr[(0x63a+2888-0x1182)]-\012((char)(0x16a1+930-0x1a02))]
FIELD_IDENTIFIER value value
<operator>.indirectIndexAccess ReplacementFor_ele[ReplacementFor_istr[\012(0xf8a+2479-0x1938)]-((char)(0x1178+2677-0x1bac))]
FIELD_IDENTIFIER value value
<operator>.indirectIndexAccess ReplacementFor_istr[\012(0xb9d+4016-0x1b4d)]
<operator>.indirectIndexAccess ReplacementFor_istr[(0x2ea+7833-0x2182)]
<operator>.indirectIndexAccess ReplacementFor_istr[\012(0x513+777-0x81b)]
<operator>.indirectIndexAccess ReplacementFor_istr[(0x23bb+54-0x23f1)]
<operator>.indirectIndexAccess ReplacementFor_ostr[ReplacementFor_o_idx]
<operator>.indirectIndexAccess ReplacementFor_ostr[ReplacementFor_o_idx]
<operator>.indirectIndexAccess ReplacementFor_ele[\012ReplacementFor_ostr[ReplacementFor_o_idx-(0x1c27+1621-0x227b)]-\012((char)(0x1cdb+1572-0x22be))]
FIELD_IDENTIFIER value value
UNKNOWN char char
UNKNOWN char char
UNKNOWN char char
UNKNOWN char char
UNKNOWN char char
UNKNOWN char char
UNKNOWN char char
<operator>.indirectIndexAccess array[ReplacementFor_combine_value]
<operator>.indirectIndexAccess ReplacementFor_istr[(0x63a+2888-0x1182)]
<operator>.indirectIndexAccess ReplacementFor_istr[\012(0xf8a+2479-0x1938)]
<operator>.indirectIndexAccess ReplacementFor_ostr[ReplacementFor_o_idx-(0x1c27+1621-0x227b)]
UNKNOWN char char
UNKNOWN char char
UNKNOWN char char
<operator>.indirectIndexAccess ReplacementFor_ostr[ReplacementFor_o_idx\012-(0x229+8573-0x23a5)]
<operator>.indirectIndexAccess array[ReplacementFor_combine_value]
>>>PDG&265 0->2 0->3 0->5 0->6 0->7 0->9 0->10 0->11 0->12 0->13 0->14 0->20 0->21 0->22 0->23 0->24 0->25 0->26 0->27 0->28 0->29 0->30 0->31 0->32 0->33 0->34 0->35 0->36 0->40 0->43 0->46 0->52 0->53 0->54 0->55 0->60 0->61 0->62 0->63 0->64 0->66 0->67 0->68 0->69 0->70 0->71 0->73 0->74 0->75 0->76 0->77 0->78 0->79 0->81 0->82 0->83 0->86 0->87 0->88 0->89 0->90 0->92 0->93 0->94 0->95 0->96 0->97 0->98 0->100 0->102 0->103 0->104 0->105 0->107 0->108 0->115 0->119 0->120 0->121 0->122 0->123 0->124 0->125 0->126 0->134 0->135 0->136 0->137 0->138 0->139 0->142 0->143 0->144 0->145 0->146 0->147 0->148 0->149 0->150 0->151 0->153 0->155 0->156 0->158 0->159 0->160 0->163 0->164 0->165 0->166 0->167 0->168 0->169 0->170 0->171 0->172 0->174 0->175 0->176 0->177 0->178 0->179 0->180 0->181 0->182 0->183 0->184 0->185 0->186 0->187 0->188 0->189 0->190 0->191 0->192 2->1 3->1 3->5 3->21 4->1 5->1 5->1 5->1 5->5 5->6 5->9 5->10 5->11 5->12 5->13 5->14 5->15 5->16 5->17 5->18 5->19 5->20 5->20 5->21 5->22 5->24 5->26 5->28 5->30 5->34 5->35 5->36 5->37 5->39 5->42 5->46 5->47 5->48 5->55 5->56 5->60 5->62 5->63 5->64 5->65 5->66 5->67 5->69 5->70 5->71 5->72 5->73 5->74 5->76 5->77 5->78 5->79 5->81 5->82 5->83 5->86 5->87 5->88 5->90 5->93 5->94 5->98 5->104 5->105 5->126 5->193 5->194 5->195 5->196 5->197 5->198 5->199 5->200 5->201 6->1 6->5 7->1 7->1 7->4 8->1 8->1 8->5 9->1 9->1 9->1 10->1 10->1 10->1 10->154 11->1 11->24 12->1 12->26 13->1 13->28 14->20 14->40 14->43 14->49 15->1 15->1 15->30 15->68 16->1 16->1 16->1 16->155 17->1 17->1 17->1 18->1 18->1 18->1 18->14 18->20 18->40 18->43 19->1 19->1 19->1 19->14 19->20 19->40 19->43 20->1 20->1 20->6 20->14 20->40 20->43 21->1 21->1 22->1 22->22 22->23 22->38 22->65 22->75 22->75 22->89 22->106 22->107 22->127 22->139 22->160 22->202 22->217 22->218 22->236 22->249 23->1 23->22 24->1 24->1 24->11 24->24 24->25 24->25 24->40 24->41 24->91 24->92 24->108 24->140 24->141 24->161 24->162 24->176 24->177 24->178 24->179 24->183 24->184 24->185 24->186 24->203 24->204 24->233 24->234 24->237 24->238 24->239 24->240 24->257 24->258 24->260 24->261 25->1 25->24 26->1 26->1 26->12 26->26 26->27 26->27 26->43 26->44 26->45 26->109 26->110 26->111 26->112 26->128 26->129 26->130 26->131 26->142 26->143 26->144 26->145 26->146 26->147 26->148 26->149 26->163 26->164 26->165 26->166 26->167 26->168 26->169 26->170 26->205 26->206 26->207 26->208 26->219 26->220 26->221 26->222 26->223 26->224 26->225 26->226 26->241 26->242 26->243 26->244 26->250 26->251 26->252 26->253 27->1 27->26 28->1 28->1 28->13 28->28 28->29 28->29 28->49 28->50 28->51 28->68 28->95 28->113 28->114 28->115 28->132 28->133 28->150 28->151 28->171 28->172 28->209 28->210 28->211 28->212 28->227 28->228 28->229 28->230 28->245 28->246 28->254 28->255 29->1 29->28 30->1 30->1 30->30 30->31 30->57 30->58 30->59 30->84 30->85 30->86 30->99 30->100 30->101 30->102 30->103 30->119 30->119 30->120 30->121 30->122 30->123 30->124 30->125 30->134 30->135 30->136 30->137 30->138 30->158 30->159 30->213 30->214 30->215 30->216 30->231 30->232 31->1 31->30 33->1 33->8 33->8 34->1 34->5 34->5 34->21 34->21 35->1 35->9 35->9 36->1 36->10 36->10 37->1 37->1 37->22 38->1 38->1 39->1 39->1 39->24 40->14 40->20 40->41 40->43 40->140 40->141 41->1 41->1 41->1 41->10 42->1 42->1 42->26 43->14 43->109 43->110 43->111 43->112 44->1 45->1 46->1 46->15 46->15 47->1 47->1 47->16 47->52 47->53 47->97 48->1 48->1 48->28 49->1 49->1 49->113 50->1 50->1 50->53 50->153 51->1 51->1 51->97 52->1 52->1 52->155 53->1 53->1 53->52 53->97 54->1 54->30 54->68 55->1 55->17 55->17 56->1 56->1 56->30 57->1 57->1 57->1 57->14 57->20 57->40 57->43 58->1 58->1 58->1 58->14 58->20 58->40 58->43 59->1 59->1 59->1 59->14 59->20 59->40 59->43 60->1 60->19 60->19 65->1 67->1 67->16 67->16 67->47 67->47 68->1 68->1 68->52 68->53 68->54 68->54 68->80 68->97 68->116 68->152 68->153 68->173 68->180 68->180 68->181 68->187 68->188 68->190 68->235 68->247 68->248 68->256 68->259 68->262 70->1 71->1 72->1 72->1 74->1 74->37 74->37 75->1 75->23 75->38 75->38 76->1 76->39 76->39 77->1 77->42 77->42 79->1 79->48 79->48 80->1 80->1 80->153 83->1 83->56 83->56 84->1 85->1 86->1 86->1 86->72 86->72 87->1 87->72 87->72 89->1 89->75 89->75 92->1 95->1 95->68 95->68 97->1 97->1 97->52 97->52 97->53 97->53 97->54 97->117 97->118 97->156 97->157 97->174 97->175 97->182 99->1 99->1 100->1 100->57 100->57 100->84 100->84 101->1 101->1 102->1 102->58 102->58 102->85 102->85 103->1 103->31 104->1 104->86 104->86 106->1 106->1 109->1 109->1 109->14 109->20 109->40 109->43 110->1 110->1 110->14 110->20 110->40 110->43 111->1 111->1 111->14 111->20 111->40 111->43 112->1 112->1 112->14 112->20 112->40 112->43 113->1 113->114 114->1 114->1 116->1 116->1 116->1 117->1 117->1 117->30 117->68 118->1 118->1 118->1 118->155 119->1 119->99 119->99 119->122 120->1 120->99 120->99 122->1 122->101 122->101 122->103 123->1 123->101 123->101 125->1 125->103 125->103 127->1 128->1 129->1 130->1 131->1 132->1 133->1 134->1 134->119 134->119 136->1 136->122 136->122 139->1 139->106 139->106 139->127 139->127 140->1 140->1 140->14 140->20 140->40 140->43 141->1 141->1 141->14 141->20 141->40 141->43 142->1 143->1 143->109 143->109 143->128 143->128 144->1 145->1 145->110 145->110 145->129 145->129 146->1 147->1 147->111 147->111 147->130 147->130 148->1 149->1 149->112 149->112 149->131 149->131 150->1 150->113 150->113 150->132 150->132 151->1 151->114 151->114 151->133 151->133 152->1 152->1 153->1 153->1 153->53 153->116 153->116 154->1 154->1 154->1 155->1 155->1 155->1 155->52 155->53 155->97 156->1 156->117 156->117 157->1 157->1 157->52 157->53 157->97 157->118 161->1 162->1 173->1 175->1 175->118 175->118 175->157 175->157 176->1 177->1 177->140 177->140 177->161 177->161 178->1 179->1 179->141 179->141 179->162 179->162 180->1 180->54 180->189 181->1 181->152 181->152 181->173 181->173 187->1 187->180 187->180 189->1 189->30 189->68 191->1 191->189 191->189 256->97 256->154 256->155 256->189 256->191 256->192 256->263 256->264
>>>Token int main ( void ) { int i , ReplacementFor_j , ReplacementFor_pre_value , ReplacementFor_cur_value , ReplacementFor_o_idx , ReplacementFor_string_value , ReplacementFor_pre_string_value , ReplacementFor_combine_value , ReplacementFor_cur_opp_value ; scanf ( " \x25 \x64 " , & T ) ; for ( i = ( 0x1227 + 2533 - 0x1c0b ) ; i < T + ( 0x43b + 2720 - 0xeda ) ; i ++ ) { memset ( ReplacementFor_ele , ( 0xf4d + 5250 - 0x23cf ) , sizeof ( ReplacementFor_ele ) ) ; memset ( array , ( 0x5bc + 8427 - 0x26a7 ) , sizeof ( array ) ) ; for ( ReplacementFor_j = ( 0x12b4 + 4076 - 0x22a0 ) ; ReplacementFor_j < sizeof ( ReplacementFor_basic_ele ) ; ReplacementFor_j ++ ) { ReplacementFor_ele [ ReplacementFor_basic_ele [ ReplacementFor_j ] - ( ( char ) ( 0x190b + 103 - 0x1931 ) ) ] . value = ( 0x1ed5 + 1476 - 0x2498 ) << ReplacementFor_j ; } scanf ( " \x25 \x64 " , & ReplacementFor_C ) ; for ( ReplacementFor_j = ( 0x1837 + 1517 - 0x1e24 ) ; ReplacementFor_j < ReplacementFor_C ; ReplacementFor_j ++ ) { scanf ( " \x25 \x73 " , ReplacementFor_istr ) ; array [ ReplacementFor_ele [ ReplacementFor_istr [ ( 0x63a + 2888 - 0x1182 ) ] - ( ( char ) ( 0x16a1 + 930 - 0x1a02 ) ) ] . value | ReplacementFor_ele [ ReplacementFor_istr [ ( 0xf8a + 2479 - 0x1938 ) ] - ( ( char ) ( 0x1178 + 2677 - 0x1bac ) ) ] . value ] = ReplacementFor_istr [ ( 0x148b + 3545 - 0x2262 ) ] ; } scanf ( " \x25 \x64 " , & ReplacementFor_D ) ; for ( ReplacementFor_j = ( 0x6f4 + 7169 - 0x22f5 ) ; ReplacementFor_j < ReplacementFor_D ; ReplacementFor_j ++ ) { scanf ( " \x25 \x73 " , ReplacementFor_istr ) ; ReplacementFor_ele [ ReplacementFor_istr [ ( 0xb9d + 4016 - 0x1b4d ) ] - ( ( char ) ( 0x940 + 21 - 0x914 ) ) ] . ReplacementFor_opp_value += ReplacementFor_ele [ ReplacementFor_istr [ ( 0x2ea + 7833 - 0x2182 ) ] - ( ( char ) ( 0xde0 + 3616 - 0x1bbf ) ) ] . value ; ReplacementFor_ele [ ReplacementFor_istr [ ( 0x513 + 777 - 0x81b ) ] - ( ( char ) ( 0x853 + 7054 - 0x23a0 ) ) ] . ReplacementFor_opp_value += ReplacementFor_ele [ ReplacementFor_istr [ ( 0x23bb + 54 - 0x23f1 ) ] - ( ( char ) ( 0xb53 + 5878 - 0x2208 ) ) ] . value ; } scanf ( " \x25 \x64 " , & ReplacementFor_N ) ; scanf ( " \x25 \x73 " , ReplacementFor_istr ) ; ReplacementFor_o_idx = ( 0x64f + 4509 - 0x17ec ) ; ReplacementFor_pre_string_value = ReplacementFor_string_value = ( 0x214 + 2971 - 0xdaf ) ; for ( ReplacementFor_j = ( 0x11c5 + 578 - 0x1407 ) ; ReplacementFor_j < ReplacementFor_N ; ReplacementFor_j ++ ) { ReplacementFor_ostr [ ReplacementFor_o_idx ] = ReplacementFor_istr [ ReplacementFor_j ] ; ReplacementFor_cur_value = ReplacementFor_ele [ ReplacementFor_ostr [ ReplacementFor_o_idx ] - ( ( char ) ( 0x228 + 7106 - 0x1da9 ) ) ] . value ; ReplacementFor_cur_opp_value = ReplacementFor_ele [ ReplacementFor_ostr [ ReplacementFor_o_idx ] - ( ( char ) ( 0x8a2 + 1829 - 0xf86 ) ) ] . ReplacementFor_opp_value ; if ( ReplacementFor_o_idx > ( 0x5e2 + 7012 - 0x2146 ) ) { ReplacementFor_pre_value = ReplacementFor_ele [ ReplacementFor_ostr [ ReplacementFor_o_idx - ( 0x1c27 + 1621 - 0x227b ) ] - ( ( char ) ( 0x1cdb + 1572 - 0x22be ) ) ] . value ; if ( ReplacementFor_pre_value ) { ReplacementFor_combine_value = ReplacementFor_pre_value | ReplacementFor_cur_value ; if ( array [ ReplacementFor_combine_value ] ) { ReplacementFor_ostr [ ReplacementFor_o_idx - ( 0x229 + 8573 - 0x23a5 ) ] = array [ ReplacementFor_combine_value ] ; ReplacementFor_string_value = ReplacementFor_pre_string_value ; continue ; } } if ( ReplacementFor_cur_opp_value & ReplacementFor_string_value ) { ReplacementFor_o_idx = ( 0x14 + 843 - 0x35f ) ; ReplacementFor_pre_string_value = ReplacementFor_string_value = ( 0x420 + 1746 - 0xaf2 ) ; continue ; } } ReplacementFor_pre_string_value = ReplacementFor_string_value ; ReplacementFor_string_value |= ReplacementFor_cur_value ; ReplacementFor_o_idx ++ ; } ReplacementFor_ostr [ ReplacementFor_o_idx ] = ( 0x971 + 6030 - 0x20ff ) ; ReplacementFor_istr [ ( 0xf7 + 7534 - 0x1e65 ) ] = ReplacementFor_ostr [ ( 0xc29 + 6189 - 0x2456 ) ] ; for ( ReplacementFor_j = ( 0x55f + 998 - 0x944 ) ; ReplacementFor_j < ReplacementFor_o_idx ; ReplacementFor_j ++ ) { ReplacementFor_istr [ ( 0x73a + 1309 - 0xc54 ) * ReplacementFor_j - ( 0xf47 + 3797 - 0x1e1a ) ] = ( ( char ) ( 0x1a33 + 2538 - 0x23f1 ) ) ; ReplacementFor_istr [ ( 0x119c + 3640 - 0x1fd1 ) * ReplacementFor_j - ( 0xea5 + 5187 - 0x22e7 ) ] = ( ( char ) ( 0x818 + 4055 - 0x17cf ) ) ; ReplacementFor_istr [ ( 0x1619 + 3177 - 0x227f ) * ReplacementFor_j ] = ReplacementFor_ostr [ ReplacementFor_j ] ; } ReplacementFor_istr [ ( 0xe6f + 5380 - 0x2370 ) * ReplacementFor_j - ( 0x9d3 + 5519 - 0x1f60 ) ] = ( 0x4a1 + 7710 - 0x22bf ) ; printf ( " \x43 \x61 \x73 \x65 \x20 \x23 \x25 \x64 \x3a \x20 \x5b \x25 \x73 \x5d " " \n " , i , ReplacementFor_istr ) ; } return ( 0xd48 + 2818 - 0x184a ) ; }
>>>Func
METHOD ReplacementFor_rekuCount
METHOD_RETURN void
PARAM int i
PARAM int ReplacementFor_j
<operator>.assignment ReplacementFor_d=\012(0x79b+2475-0x1145)
<operator>.assignment ReplacementFor_v0=i
<operator>.logicalOr i==\012ReplacementFor_j+(0x2f1+1930-0xa7a)||(ReplacementFor_j==ReplacementFor_n&&i==\012(0x49a+7214-0x20c7))
<operator>.subtraction 0x751+2774-0x1226
<operator>.lessThan ReplacementFor_d<ReplacementFor_barev
<operator>.subtraction 0x79b+2475-0x1145
RETURN return; return;
<operator>.assignment ReplacementFor_k=ReplacementFor_nextv(i,\012ReplacementFor_j)
<operator>.postIncrement ReplacementFor_d++
<operator>.assignment i=ReplacementFor_j
<operator>.assignment ReplacementFor_j=\012ReplacementFor_k
ReplacementFor_rekuCount ReplacementFor_rekuCount(ReplacementFor_j,i)
<operator>.assignment ReplacementFor_barev=ReplacementFor_d
<operator>.addition 0x79b+2475
<operator>.equals i==\012ReplacementFor_j+(0x2f1+1930-0xa7a)
<operator>.logicalAnd ReplacementFor_j==ReplacementFor_n&&i==\012(0x49a+7214-0x20c7)
<operator>.addition 0x751+2774
<operator>.equals ReplacementFor_j==\012ReplacementFor_v0
<operator>.addition ReplacementFor_j+(0x2f1+1930-0xa7a)
<operator>.equals ReplacementFor_j==ReplacementFor_n
<operator>.equals i==\012(0x49a+7214-0x20c7)
ReplacementFor_nextv ReplacementFor_nextv(i,\012ReplacementFor_j)
<operator>.subtraction 0x2f1+1930-0xa7a
<operator>.subtraction 0x49a+7214-0x20c7
<operator>.addition 0x2f1+1930
<operator>.addition 0x49a+7214
>>>PDG&30 0->2 0->3 0->5 0->7 0->8 0->9 0->10 0->12 0->13 0->14 0->15 0->16 0->17 0->18 0->20 0->21 0->22 0->23 0->24 0->25 0->26 0->27 0->28 0->29 2->5 2->18 3->18 3->21 3->22 3->23 4->1 4->1 4->1 4->8 4->12 5->1 5->1 5->21 6->1 6->1 6->1 6->7 6->8 6->10 6->20 7->21 8->16 8->16 9->1 9->4 9->4 10->1 11->14 12->8 13->15 14->15 15->21 15->25 18->1 18->1 18->6 18->6 18->19 18->23 18->24 18->25 19->1 19->1 19->6 19->6 21->7 21->11 21->12 21->13 21->14 21->15 21->20 21->25 21->25 22->1 22->1 23->1 23->1 23->19 23->19 23->21 23->24 23->27 23->29 24->1 24->1 24->19 24->19 24->25 25->11 25->11 25->13 26->1 26->18 26->18 26->22 26->22 27->1 27->24 27->24
>>>Token void ReplacementFor_rekuCount ( int i , int ReplacementFor_j ) { int ReplacementFor_d = ( 0x79b + 2475 - 0x1145 ) ; int ReplacementFor_v0 = i ; int ReplacementFor_k ; if ( i == ReplacementFor_j + ( 0x2f1 + 1930 - 0xa7a ) || ( ReplacementFor_j == ReplacementFor_n && i == ( 0x49a + 7214 - 0x20c7 ) ) ) { return ; } while ( ( 0x751 + 2774 - 0x1226 ) ) { if ( ReplacementFor_j == ReplacementFor_v0 ) { break ; } ReplacementFor_k = ReplacementFor_nextv ( i , ReplacementFor_j ) ; ReplacementFor_d ++ ; i = ReplacementFor_j ; ReplacementFor_j = ReplacementFor_k ; ReplacementFor_rekuCount ( ReplacementFor_j , i ) ; } if ( ReplacementFor_d < ReplacementFor_barev ) { ReplacementFor_barev = ReplacementFor_d ; } }
>>>Func
METHOD ReplacementFor_init
METHOD_RETURN void
<operator>.assignment ReplacementFor_C=ReplacementFor_D=\012ReplacementFor_N=ReplacementFor_fi=(0x176+6118-0x195c)
strcpy strcpy(final,"\0")
<operator>.lessThan i<ReplacementFor_MAX
<operator>.postIncrement i++
<operator>.assignment ReplacementFor_D=\012ReplacementFor_N=ReplacementFor_fi=(0x176+6118-0x195c)
<operator>.assignment i=\012(0x959+7576-0x26f1)
strcpy strcpy(ReplacementFor_combine[i],\012"\0")
strcpy strcpy(ReplacementFor_oppose[i],"\0")
<operator>.assignment ReplacementFor_N=ReplacementFor_fi=(0x176+6118-0x195c)
<operator>.assignment ReplacementFor_fi=(0x176+6118-0x195c)
<operator>.subtraction 0x959+7576-0x26f1
<operator>.subtraction 0x176+6118-0x195c
<operator>.addition 0x959+7576
<operator>.addition 0x176+6118
<operator>.indirectIndexAccess ReplacementFor_combine[i]
<operator>.indirectIndexAccess ReplacementFor_oppose[i]
>>>PDG&18 0->3 0->4 0->5 0->8 0->9 0->12 0->13 0->14 0->15 2->1 2->1 2->1 3->1 3->1 4->1 4->1 4->1 4->4 4->5 4->5 4->8 4->9 4->16 4->17 5->1 5->4 6->1 6->1 6->2 7->1 7->1 7->4 8->1 8->1 9->1 9->1 10->1 10->1 10->2 10->6 11->1 11->1 11->2 11->6 11->10 12->1 12->7 12->7 13->1 13->2 13->2 13->6 13->6 13->10 13->10 13->11 13->11
>>>Token void ReplacementFor_init ( ) { int i ; ReplacementFor_C = ReplacementFor_D = ReplacementFor_N = ReplacementFor_fi = ( 0x176 + 6118 - 0x195c ) ; strcpy ( final , " \0 " ) ; for ( i = ( 0x959 + 7576 - 0x26f1 ) ; i < ReplacementFor_MAX ; i ++ ) { strcpy ( ReplacementFor_combine [ i ] , " \0 " ) ; strcpy ( ReplacementFor_oppose [ i ] , " \0 " ) ; } }
>>>Func
METHOD ReplacementFor_gcd
METHOD_RETURN int
PARAM int ReplacementFor_a
PARAM int ReplacementFor_b
RETURN return \012ReplacementFor_a%ReplacementFor_b==(0x303+8040-0x226b)?ReplacementFor_b:\012ReplacementFor_gcd(ReplacementFor_b,ReplacementFor_a%ReplacementFor_b); return \012ReplacementFor_a%ReplacementFor_b==(0x303+8040-0x226b)?ReplacementFor_b:\012ReplacementFor_gcd(ReplacementFor_b,ReplacementFor_a%ReplacementFor_b);
<operator>.conditional ReplacementFor_a%ReplacementFor_b==(0x303+8040-0x226b)?ReplacementFor_b:\012ReplacementFor_gcd(ReplacementFor_b,ReplacementFor_a%ReplacementFor_b)
<operator>.equals ReplacementFor_a%ReplacementFor_b==(0x303+8040-0x226b)
ReplacementFor_gcd ReplacementFor_gcd(ReplacementFor_b,ReplacementFor_a%ReplacementFor_b)
<operator>.modulo ReplacementFor_a%ReplacementFor_b
<operator>.subtraction 0x303+8040-0x226b
<operator>.modulo ReplacementFor_a%ReplacementFor_b
<operator>.addition 0x303+8040
>>>PDG&12 0->2 0->3 0->5 0->7 0->8 0->9 0->10 0->11 2->8 3->8 4->1 5->1 5->1 5->1 5->1 5->4 6->1 6->1 6->7 6->10 7->1 7->5 7->5 8->1 8->5 8->6 8->6 8->10 8->10 9->1 9->6 9->6 10->1 10->7 10->7
>>>Token int ReplacementFor_gcd ( int ReplacementFor_a , int ReplacementFor_b ) { return ReplacementFor_a % ReplacementFor_b == ( 0x303 + 8040 - 0x226b ) ? ReplacementFor_b : ReplacementFor_gcd ( ReplacementFor_b , ReplacementFor_a % ReplacementFor_b ) ; }
>>>Func
METHOD main
METHOD_RETURN int
PARAM int ReplacementFor_argc
PARAM char*ReplacementFor_argv[]
<operator>.assignment ReplacementFor_sum=(0x185+4890-0x149f)
printf printf(\012"\x53\x75\x6d\x20\x69\x73\x3a\x20\x25\x64" "\n",ReplacementFor_sum)
RETURN return\012(0x921+4170-0x196b); return\012(0x921+4170-0x196b);
<operator>.lessThan i<\012ReplacementFor_argv[(0xae4+1006-0xed1)][(0x485+7726-0x22b3)]
<operator>.postIncrement i++
<operator>.subtraction 0x921+4170-0x196b
<operator>.subtraction 0x185+4890-0x149f
<operator>.assignment i=(0xdd8+2271-0x16b7)
<operator>.addition 0x185+4890
<operator>.equals ReplacementFor_argv[(0xb91+1120-0xff0)][(0x317+5829-0x19dc)]==\012(0x283+4016-0x11b4)
<operator>.addition 0x921+4170
<operator>.subtraction 0xdd8+2271-0x16b7
<operator>.subtraction 0x485+7726-0x22b3
<operator>.assignmentPlus ReplacementFor_sum+=i
<operator>.addition 0xdd8+2271
<operator>.subtraction 0xae4+1006-0xed1
<operator>.addition 0x485+7726
<operator>.subtraction 0x283+4016-0x11b4
<operator>.assignmentMultiplication ReplacementFor_sum*=i
<operator>.addition 0xae4+1006
<operator>.subtraction 0x317+5829-0x19dc
<operator>.addition 0x283+4016
<operator>.subtraction 0xb91+1120-0xff0
<operator>.addition 0x317+5829
<operator>.addition 0xb91+1120
<operator>.indirectIndexAccess ReplacementFor_argv[(0xae4+1006-0xed1)][(0x485+7726-0x22b3)]
<operator>.indirectIndexAccess ReplacementFor_argv[(0xae4+1006-0xed1)]
<operator>.indirectIndexAccess ReplacementFor_argv[(0xb91+1120-0xff0)][(0x317+5829-0x19dc)]
<operator>.indirectIndexAccess ReplacementFor_argv[(0xb91+1120-0xff0)]
>>>PDG&33 0->2 0->3 0->5 0->7 0->8 0->9 0->10 0->12 0->14 0->15 0->16 0->17 0->18 0->19 0->20 0->21 0->22 0->23 0->24 0->25 0->26 0->27 0->28 2->1 3->1 4->1 4->1 4->5 4->17 4->22 5->1 5->1 6->1 7->1 7->1 7->1 7->7 7->8 7->8 7->13 7->16 7->17 7->19 7->20 7->21 7->22 7->23 7->24 7->25 7->26 7->27 7->28 7->29 7->30 7->31 7->32 8->1 8->7 9->1 9->1 9->6 10->1 10->4 10->4 11->1 11->1 11->7 13->1 13->1 13->1 13->17 13->22 15->1 15->11 15->11 16->1 17->1 17->5 17->22 19->1 21->1 21->13 21->13 22->1 22->5 22->17 24->1 26->1
>>>Token int main ( int ReplacementFor_argc , char * ReplacementFor_argv [ ] ) { int i ; int ReplacementFor_sum = ( 0x185 + 4890 - 0x149f ) ; for ( i = ( 0xdd8 + 2271 - 0x16b7 ) ; i < ReplacementFor_argv [ ( 0xae4 + 1006 - 0xed1 ) ] [ ( 0x485 + 7726 - 0x22b3 ) ] ; i ++ ) { if ( ReplacementFor_argv [ ( 0xb91 + 1120 - 0xff0 ) ] [ ( 0x317 + 5829 - 0x19dc ) ] == ( 0x283 + 4016 - 0x11b4 ) ) ReplacementFor_sum += i ; else ReplacementFor_sum *= i ; } printf ( " \x53 \x75 \x6d \x20 \x69 \x73 \x3a \x20 \x25 \x64 " " \n " , ReplacementFor_sum ) ; return ( 0x921 + 4170 - 0x196b ) ; }
>>>Func
METHOD main
METHOD_RETURN int
PARAM int ReplacementFor_argc
PARAM char*ReplacementFor_argv[]
scanf scanf(\012"\x25\x64" "\n",&t)
<operator>.lessThan i<t
<operator>.postIncrement i++
<operator>.assignment i=(0x1610+590-0x185e)
scanf scanf("\x25\x64" "\n",&ReplacementFor_n)
printf printf(\012"\x43\x61\x73\x65\x20\x23\x25\x64\x3a" "\n" i+(0xe7b+1103-0x12c9))
bzero bzero(ReplacementFor_wp sizeof(\012ReplacementFor_wp))
bzero bzero(ReplacementFor_owp sizeof(ReplacementFor_owp))
bzero bzero(\012ReplacementFor_no sizeof(ReplacementFor_no))
bzero bzero(ReplacementFor_oowp sizeof\012(ReplacementFor_oowp))
<operator>.lessThan ReplacementFor_j<ReplacementFor_n
<operator>.postIncrement ReplacementFor_j++
<operator>.lessThan ReplacementFor_j<ReplacementFor_n
<operator>.postIncrement ReplacementFor_j++
<operator>.lessThan ReplacementFor_j<\012ReplacementFor_n
<operator>.postIncrement ReplacementFor_j++
<operator>.subtraction 0x1610+590-0x185e
<operator>.assignment ReplacementFor_j=(0x38+7750-0x1e7e)
<operator>.addition i+(0xe7b+1103-0x12c9)
<operator>.assignment ReplacementFor_j=\012(0x3d4+2587-0xdef)
<operator>.assignment ReplacementFor_w=(0x168f+1684-0x1d23)
<operator>.assignment l=(0x95b+3238-0x1601)
<operator>.assignment ReplacementFor_wp[\012ReplacementFor_j]=(double)ReplacementFor_w/(float)(ReplacementFor_w+l)
<operator>.assignmentDivision ReplacementFor_owp[ReplacementFor_j]/=(double)ReplacementFor_no[ReplacementFor_j\012]
<operator>.assignment ReplacementFor_j=(0x89+1771-0x774)
<operator>.assignmentDivision ReplacementFor_oowp[\012ReplacementFor_j]/=(double)ReplacementFor_no[ReplacementFor_j]
printf printf(\012"\x25\x2e\x31\x32\x6c\x66" "\n",0.25*ReplacementFor_wp[ReplacementFor_j]+0.5*\012ReplacementFor_owp[ReplacementFor_j]+0.25*ReplacementFor_oowp[ReplacementFor_j])
<operator>.addition 0x1610+590
<operator>.lessThan ReplacementFor_k<\012ReplacementFor_n
<operator>.postIncrement ReplacementFor_k++
<operator>.subtraction 0xe7b+1103-0x12c9
<operator>.lessThan ReplacementFor_k<ReplacementFor_n
<operator>.postIncrement ReplacementFor_k++
<operator>.lessThan ReplacementFor_k<ReplacementFor_n
<operator>.postIncrement ReplacementFor_k++
<operator>.subtraction 0x38+7750-0x1e7e
<operator>.assignment ReplacementFor_k=(0x7e8+1266-0xcda)
scanf scanf("\x25\x63",&tab[ReplacementFor_j][\012ReplacementFor_k])
<operator>.addition 0xe7b+1103
<operator>.subtraction 0x3d4+2587-0xdef
<operator>.subtraction 0x168f+1684-0x1d23
<operator>.subtraction 0x95b+3238-0x1601
<operator>.assignment ReplacementFor_k\012=(0x500+1077-0x935)
<operator>.division (double)ReplacementFor_w/(float)(ReplacementFor_w+l)
<operator>.cast (double)ReplacementFor_no[ReplacementFor_j\012]
<operator>.subtraction 0x89+1771-0x774
<operator>.assignment ReplacementFor_k=(0xe5b+1164-0x12e7)
<operator>.cast (double)ReplacementFor_no[ReplacementFor_j]
<operator>.addition 0.25*ReplacementFor_wp[ReplacementFor_j]+0.5*\012ReplacementFor_owp[ReplacementFor_j]+0.25*ReplacementFor_oowp[ReplacementFor_j]
<operator>.addition 0x38+7750
<operator>.addition 0x3d4+2587
<operator>.addition 0x168f+1684
<operator>.addition 0x95b+3238
<operator>.equals tab\012[ReplacementFor_j][ReplacementFor_k]==((char)(0xb30+6016-0x227f))
<operator>.cast (double)ReplacementFor_w
<operator>.cast (float)(ReplacementFor_w+l)
<operator>.addition 0x89+1771
<operator>.logicalOr tab[ReplacementFor_j][\012ReplacementFor_k]==((char)(0x12f0+895-0x163e))||tab[ReplacementFor_j][\012ReplacementFor_k]==((char)(0x1d8d+423-0x1f04))
<operator>.addition 0.25*ReplacementFor_wp[ReplacementFor_j]+0.5*\012ReplacementFor_owp[ReplacementFor_j]
<operator>.multiplication 0.25*ReplacementFor_oowp[ReplacementFor_j]
<operator>.subtraction 0x7e8+1266-0xcda
<operator>.subtraction 0x500+1077-0x935
<operator>.postIncrement ReplacementFor_w++
<operator>.assignment ReplacementFor_wo=(0x578+2932-0x10ec)
<operator>.assignment ReplacementFor_lo=(0x819+1430-0xdaf)
<operator>.assignmentPlus ReplacementFor_owp[ReplacementFor_j]+=(double)ReplacementFor_wo/(float)(\012ReplacementFor_wo+ReplacementFor_lo)
<operator>.postIncrement ReplacementFor_no[ReplacementFor_j]++
<operator>.addition ReplacementFor_w+l
<operator>.subtraction 0xe5b+1164-0x12e7
<operator>.assignmentPlus ReplacementFor_oowp[\012ReplacementFor_j]+=ReplacementFor_owp[ReplacementFor_k]
<operator>.multiplication 0.25*ReplacementFor_wp[ReplacementFor_j]
<operator>.multiplication 0.5*\012ReplacementFor_owp[ReplacementFor_j]
<operator>.addition 0x7e8+1266
<operator>.addition 0x500+1077
<operator>.cast (char)(0xb30+6016-0x227f)
<operator>.lessThan m<\012ReplacementFor_n
<operator>.postIncrement m++
<operator>.addition 0xe5b+1164
<operator>.equals tab[ReplacementFor_j][\012ReplacementFor_k]==((char)(0x12f0+895-0x163e))
<operator>.equals tab[ReplacementFor_j][\012ReplacementFor_k]==((char)(0x1d8d+423-0x1f04))
<operator>.subtraction 0xb30+6016-0x227f
<operator>.subtraction 0x578+2932-0x10ec
<operator>.subtraction 0x819+1430-0xdaf
<operator>.assignment m=(0x1781+3202-0x2403)
<operator>.division (double)ReplacementFor_wo/(float)(\012ReplacementFor_wo+ReplacementFor_lo)
<operator>.equals tab[ReplacementFor_j][ReplacementFor_k]==((char)(0xd1d+4569-0x1ec6))
<operator>.cast (char)(0x12f0+895-0x163e)
<operator>.cast (char)(0x1d8d+423-0x1f04)
<operator>.addition 0xb30+6016
<operator>.addition 0x578+2932
<operator>.addition 0x819+1430
<operator>.equals m==ReplacementFor_j
<operator>.equals tab[ReplacementFor_k]\012[m]==((char)(0xef4+1781-0x15b8))
<operator>.cast (double)ReplacementFor_wo
<operator>.cast (float)(\012ReplacementFor_wo+ReplacementFor_lo)
<operator>.postIncrement l++
<operator>.assignment ReplacementFor_wo=(0x1001+1832-0x1729)
<operator>.assignment ReplacementFor_lo=\012(0xafd+5996-0x2269)
<operator>.assignmentPlus ReplacementFor_owp[\012ReplacementFor_j]+=(double)ReplacementFor_wo/(float)(ReplacementFor_wo+\012ReplacementFor_lo)
<operator>.postIncrement ReplacementFor_no[ReplacementFor_j]++
<operator>.subtraction 0x12f0+895-0x163e
<operator>.subtraction 0x1d8d+423-0x1f04
<operator>.subtraction 0x1781+3202-0x2403
<operator>.postIncrement ReplacementFor_wo++
<operator>.addition ReplacementFor_wo+ReplacementFor_lo
<operator>.cast (char)(0xd1d+4569-0x1ec6)
<operator>.lessThan m<ReplacementFor_n
<operator>.postIncrement m++
<operator>.addition 0x12f0+895
<operator>.addition 0x1d8d+423
<operator>.addition 0x1781+3202
<operator>.cast (char)(0xef4+1781-0x15b8)
<operator>.subtraction 0xd1d+4569-0x1ec6
<operator>.subtraction 0x1001+1832-0x1729
<operator>.subtraction 0xafd+5996-0x2269
<operator>.assignment m=(0xee0+3990-0x1e76)
<operator>.division (double)ReplacementFor_wo/(float)(ReplacementFor_wo+\012ReplacementFor_lo)
<operator>.subtraction 0xef4+1781-0x15b8
<operator>.equals tab[\012ReplacementFor_k][m]==((char)(0xde4+4834-0x2096))
<operator>.addition 0xd1d+4569
<operator>.addition 0x1001+1832
<operator>.addition 0xafd+5996
<operator>.equals m==\012ReplacementFor_j
<operator>.equals tab[ReplacementFor_k][m]==\012((char)(0x1732+3560-0x24e9))
<operator>.cast (double)ReplacementFor_wo
<operator>.cast (float)(ReplacementFor_wo+\012ReplacementFor_lo)
<operator>.addition 0xef4+1781
<operator>.postIncrement ReplacementFor_lo++
<operator>.subtraction 0xee0+3990-0x1e76
<operator>.postIncrement ReplacementFor_wo++
<operator>.addition ReplacementFor_wo+\012ReplacementFor_lo
<operator>.cast (char)(0xde4+4834-0x2096)
<operator>.addition 0xee0+3990
<operator>.cast (char)(0x1732+3560-0x24e9)
<operator>.subtraction 0xde4+4834-0x2096
<operator>.subtraction 0x1732+3560-0x24e9
<operator>.equals tab[ReplacementFor_k]\012[m]==((char)(0x1313+1202-0x1795))
<operator>.addition 0xde4+4834
<operator>.addition 0x1732+3560
<operator>.postIncrement ReplacementFor_lo++
<operator>.cast (char)(0x1313+1202-0x1795)
<operator>.subtraction 0x1313+1202-0x1795
<operator>.addition 0x1313+1202
<operator>.addressOf &ReplacementFor_n
<operator>.sizeOf sizeof(\012ReplacementFor_wp)
<operator>.sizeOf sizeof(ReplacementFor_owp)
<operator>.sizeOf sizeof(ReplacementFor_no)
<operator>.sizeOf sizeof\012(ReplacementFor_oowp)
scanf scanf("\n")
<operator>.indirectIndexAccess ReplacementFor_wp[\012ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_owp[ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_oowp[\012ReplacementFor_j]
UNKNOWN double double
<operator>.indirectIndexAccess ReplacementFor_no[ReplacementFor_j\012]
UNKNOWN double double
<operator>.indirectIndexAccess ReplacementFor_no[ReplacementFor_j]
<operator>.addressOf &tab[ReplacementFor_j][\012ReplacementFor_k]
UNKNOWN double double
UNKNOWN float float
<operator>.indirectIndexAccess ReplacementFor_oowp[ReplacementFor_j]
<operator>.indirectIndexAccess tab[ReplacementFor_j][\012ReplacementFor_k]
<operator>.indirectIndexAccess tab\012[ReplacementFor_j][ReplacementFor_k]
<operator>.indirectIndexAccess ReplacementFor_wp[ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_owp[ReplacementFor_j]
<operator>.indirectIndexAccess tab[ReplacementFor_j]
<operator>.indirectIndexAccess tab\012[ReplacementFor_j]
UNKNOWN char char
<operator>.indirectIndexAccess ReplacementFor_owp[ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_no[ReplacementFor_j]
<operator>.indirectIndexAccess tab[ReplacementFor_j][\012ReplacementFor_k]
<operator>.indirectIndexAccess tab[ReplacementFor_j][\012ReplacementFor_k]
<operator>.indirectIndexAccess ReplacementFor_oowp[\012ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_owp[ReplacementFor_k]
<operator>.indirectIndexAccess tab[ReplacementFor_j]
UNKNOWN char char
<operator>.indirectIndexAccess tab[ReplacementFor_j]
UNKNOWN char char
UNKNOWN double double
UNKNOWN float float
<operator>.indirectIndexAccess tab[ReplacementFor_j][ReplacementFor_k]
<operator>.indirectIndexAccess tab[ReplacementFor_k]\012[m]
<operator>.indirectIndexAccess tab[ReplacementFor_j]
UNKNOWN char char
<operator>.indirectIndexAccess ReplacementFor_owp[\012ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_no[ReplacementFor_j]
<operator>.indirectIndexAccess tab[ReplacementFor_k]
UNKNOWN char char
UNKNOWN double double
UNKNOWN float float
<operator>.indirectIndexAccess tab[\012ReplacementFor_k][m]
<operator>.indirectIndexAccess tab[ReplacementFor_k][m]
<operator>.indirectIndexAccess tab[\012ReplacementFor_k]
UNKNOWN char char
<operator>.indirectIndexAccess tab[ReplacementFor_k]
UNKNOWN char char
<operator>.indirectIndexAccess tab[ReplacementFor_k]\012[m]
<operator>.indirectIndexAccess tab[ReplacementFor_k]
UNKNOWN char char
>>>PDG&202 0->2 0->3 0->4 0->5 0->6 0->8 0->9 0->10 0->11 0->12 0->13 0->14 0->15 0->16 0->17 0->18 0->19 0->20 0->22 0->30 0->31 0->32 0->33 0->34 0->35 0->36 0->37 0->38 0->39 0->42 0->43 0->44 0->45 0->47 0->49 0->53 0->54 0->55 0->56 0->58 0->59 0->60 0->63 0->64 0->65 0->66 0->71 0->72 0->74 0->75 0->76 0->77 0->79 0->80 0->81 0->84 0->85 0->86 0->88 0->92 0->93 0->94 0->95 0->97 0->98 0->99 0->104 0->105 0->106 0->107 0->108 0->110 0->111 0->112 0->113 0->114 0->116 0->117 0->118 0->120 0->121 0->123 0->124 0->125 0->126 0->128 0->129 0->130 0->131 0->132 0->133 0->134 0->136 0->138 0->139 0->141 0->142 0->143 0->145 0->146 2->1 3->1 4->1 4->5 5->1 5->1 5->1 5->5 5->6 5->6 5->8 5->9 5->9 5->10 5->11 5->12 5->13 5->14 5->16 5->18 5->21 5->22 5->22 5->23 5->28 5->34 5->39 5->42 5->43 5->49 5->53 5->54 5->60 5->147 5->148 5->149 5->150 5->151 6->1 6->5 7->1 7->1 7->5 8->14 8->16 8->18 8->32 8->35 8->37 8->79 8->110 10->74 11->27 11->69 11->73 11->75 11->102 12->27 12->29 12->48 12->51 12->70 12->103 13->29 13->63 13->73 14->14 14->15 14->15 14->16 14->32 14->32 14->40 14->64 14->76 14->152 15->14 16->16 16->17 16->17 16->18 16->24 16->25 16->26 16->27 16->35 16->35 16->44 16->45 16->46 16->47 16->48 16->55 16->56 16->58 16->59 16->65 16->71 16->77 16->95 16->126 16->153 16->154 16->156 16->157 16->161 16->162 17->16 18->8 18->14 18->18 18->19 18->19 18->29 18->30 18->37 18->37 18->50 18->51 18->52 18->62 18->63 18->72 18->74 18->75 18->81 18->155 18->158 18->159 18->163 18->166 18->167 19->18 20->1 20->7 20->7 21->14 23->16 24->47 24->58 24->59 24->66 24->71 25->47 25->59 25->71 25->99 26->10 27->11 27->69 27->75 28->18 29->13 29->73 32->14 32->32 32->33 32->33 32->41 32->160 32->164 32->168 33->32 34->9 34->9 34->22 34->22 35->16 35->35 35->36 35->36 35->57 35->78 35->79 35->84 35->92 35->110 35->165 35->169 35->170 36->35 37->18 37->37 37->38 37->38 37->61 37->82 37->90 37->104 37->112 37->173 37->177 37->178 38->37 39->21 39->21 40->32 41->82 41->83 43->23 43->23 44->24 44->24 45->25 45->25 46->35 47->26 47->26 49->28 49->28 50->37 57->66 57->67 57->68 57->69 57->70 57->79 57->85 57->86 57->87 57->88 57->89 57->93 57->94 57->97 57->98 57->106 57->108 57->109 57->114 57->116 57->123 57->171 57->172 57->181 57->182 57->183 57->185 57->186 61->73 61->175 61->176 63->13 63->30 63->30 63->52 63->52 64->40 64->40 65->46 65->46 66->47 66->58 66->59 66->71 67->88 67->97 67->98 67->107 67->108 68->88 68->98 68->108 68->131 69->27 70->12 70->29 70->51 70->103 72->50 72->50 73->29 74->10 74->30 74->30 74->52 74->52 74->62 74->62 75->11 75->27 75->30 75->30 75->52 75->52 75->62 75->62 75->69 79->35 79->79 79->80 79->95 79->95 80->79 82->41 82->61 82->61 82->83 82->83 82->91 82->105 82->113 82->174 82->179 82->180 83->41 83->61 83->61 83->82 84->57 84->57 84->78 84->78 85->67 85->67 86->68 86->68 87->79 88->69 88->69 89->99 89->100 89->101 89->102 89->103 89->110 89->117 89->118 89->119 89->120 89->124 89->125 89->128 89->129 89->132 89->134 89->136 89->187 89->188 89->191 89->192 95->17 95->80 95->96 95->115 95->121 95->126 95->130 95->184 95->189 95->190 96->107 96->122 96->135 96->138 96->140 96->141 96->193 96->195 96->196 99->47 99->59 99->71 100->120 100->128 100->129 100->133 100->134 101->120 101->129 101->134 101->143 102->11 103->12 103->29 103->51 103->70 104->82 104->82 104->90 104->90 105->83 105->83 105->91 105->91 106->87 106->87 107->88 107->97 107->98 107->108 110->35 110->110 110->111 110->126 110->126 111->110 116->89 116->89 116->109 116->109 117->100 117->100 118->101 118->101 119->110 120->102 120->102 121->96 121->96 121->115 121->115 122->131 126->17 126->95 126->111 126->127 126->137 126->139 126->142 126->194 126->197 126->198 127->133 127->140 127->144 127->145 127->146 127->199 127->200 127->201 131->88 131->98 131->108 132->119 132->119 133->120 133->128 133->129 133->134 138->122 138->122 138->135 138->135 139->127 139->127 139->137 139->137 140->96 140->143 143->120 143->129 143->134 145->140 145->140 145->144 145->144
>>>Token int main ( int ReplacementFor_argc , char * ReplacementFor_argv [ ] ) { int t ; scanf ( " \x25 \x64 " " \n " , & t ) ; int i ; for ( i = ( 0x1610 + 590 - 0x185e ) ; i < t ; i ++ ) { int ReplacementFor_n ; scanf ( " \x25 \x64 " " \n " , & ReplacementFor_n ) ; char tab [ ReplacementFor_n ] [ ReplacementFor_n ] ; int ReplacementFor_j , ReplacementFor_k ; for ( ReplacementFor_j = ( 0x38 + 7750 - 0x1e7e ) ; ReplacementFor_j < ReplacementFor_n ; ReplacementFor_j ++ ) { for ( ReplacementFor_k = ( 0x7e8 + 1266 - 0xcda ) ; ReplacementFor_k < ReplacementFor_n ; ReplacementFor_k ++ ) { scanf ( " \x25 \x63 " , & tab [ ReplacementFor_j ] [ ReplacementFor_k ] ) ; } scanf ( " \n " ) ; } printf ( " \x43 \x61 \x73 \x65 \x20 \x23 \x25 \x64 \x3a " " \n " , i + ( 0xe7b + 1103 - 0x12c9 ) ) ; double ReplacementFor_wp [ ReplacementFor_n ] , ReplacementFor_owp [ ReplacementFor_n ] , ReplacementFor_no [ ReplacementFor_n ] ; bzero ( ReplacementFor_wp , sizeof ( ReplacementFor_wp ) ) ; bzero ( ReplacementFor_owp , sizeof ( ReplacementFor_owp ) ) ; bzero ( ReplacementFor_no , sizeof ( ReplacementFor_no ) ) ; for ( ReplacementFor_j = ( 0x3d4 + 2587 - 0xdef ) ; ReplacementFor_j < ReplacementFor_n ; ReplacementFor_j ++ ) { int ReplacementFor_w = ( 0x168f + 1684 - 0x1d23 ) , l = ( 0x95b + 3238 - 0x1601 ) ; for ( ReplacementFor_k = ( 0x500 + 1077 - 0x935 ) ; ReplacementFor_k < ReplacementFor_n ; ReplacementFor_k ++ ) { if ( tab [ ReplacementFor_j ] [ ReplacementFor_k ] == ( ( char ) ( 0xb30 + 6016 - 0x227f ) ) ) { ReplacementFor_w ++ ; int m ; int ReplacementFor_wo = ( 0x578 + 2932 - 0x10ec ) , ReplacementFor_lo = ( 0x819 + 1430 - 0xdaf ) ; for ( m = ( 0x1781 + 3202 - 0x2403 ) ; m < ReplacementFor_n ; m ++ ) { if ( m == ReplacementFor_j ) { continue ; } if ( tab [ ReplacementFor_k ] [ m ] == ( ( char ) ( 0xef4 + 1781 - 0x15b8 ) ) ) { ReplacementFor_wo ++ ; } else if ( tab [ ReplacementFor_k ] [ m ] == ( ( char ) ( 0xde4 + 4834 - 0x2096 ) ) ) { ReplacementFor_lo ++ ; } } ReplacementFor_owp [ ReplacementFor_j ] += ( double ) ReplacementFor_wo / ( float ) ( ReplacementFor_wo + ReplacementFor_lo ) ; ReplacementFor_no [ ReplacementFor_j ] ++ ; } else if ( tab [ ReplacementFor_j ] [ ReplacementFor_k ] == ( ( char ) ( 0xd1d + 4569 - 0x1ec6 ) ) ) { l ++ ; int m ; int ReplacementFor_wo = ( 0x1001 + 1832 - 0x1729 ) , ReplacementFor_lo = ( 0xafd + 5996 - 0x2269 ) ; for ( m = ( 0xee0 + 3990 - 0x1e76 ) ; m < ReplacementFor_n ; m ++ ) { if ( m == ReplacementFor_j ) { continue ; } if ( tab [ ReplacementFor_k ] [ m ] == ( ( char ) ( 0x1732 + 3560 - 0x24e9 ) ) ) { ReplacementFor_wo ++ ; } else if ( tab [ ReplacementFor_k ] [ m ] == ( ( char ) ( 0x1313 + 1202 - 0x1795 ) ) ) { ReplacementFor_lo ++ ; } } ReplacementFor_owp [ ReplacementFor_j ] += ( double ) ReplacementFor_wo / ( float ) ( ReplacementFor_wo + ReplacementFor_lo ) ; ReplacementFor_no [ ReplacementFor_j ] ++ ; } } ReplacementFor_wp [ ReplacementFor_j ] = ( double ) ReplacementFor_w / ( float ) ( ReplacementFor_w + l ) ; ReplacementFor_owp [ ReplacementFor_j ] /= ( double ) ReplacementFor_no [ ReplacementFor_j ] ; } double ReplacementFor_oowp [ ReplacementFor_n ] ; bzero ( ReplacementFor_oowp , sizeof ( ReplacementFor_oowp ) ) ; for ( ReplacementFor_j = ( 0x89 + 1771 - 0x774 ) ; ReplacementFor_j < ReplacementFor_n ; ReplacementFor_j ++ ) { for ( ReplacementFor_k = ( 0xe5b + 1164 - 0x12e7 ) ; ReplacementFor_k < ReplacementFor_n ; ReplacementFor_k ++ ) { if ( tab [ ReplacementFor_j ] [ ReplacementFor_k ] == ( ( char ) ( 0x12f0 + 895 - 0x163e ) ) || tab [ ReplacementFor_j ] [ ReplacementFor_k ] == ( ( char ) ( 0x1d8d + 423 - 0x1f04 ) ) ) { ReplacementFor_oowp [ ReplacementFor_j ] += ReplacementFor_owp [ ReplacementFor_k ] ; } } ReplacementFor_oowp [ ReplacementFor_j ] /= ( double ) ReplacementFor_no [ ReplacementFor_j ] ; printf ( " \x25 \x2e \x31 \x32 \x6c \x66 " " \n " , 0.25 * ReplacementFor_wp [ ReplacementFor_j ] + 0.5 * ReplacementFor_owp [ ReplacementFor_j ] + 0.25 * ReplacementFor_oowp [ ReplacementFor_j ] ) ; } } }
>>>Func
METHOD main
METHOD_RETURN ANY
scanf scanf("\x25\x64",&ReplacementFor_total)
<operator>.lessEqualsThan i<=ReplacementFor_total
<operator>.postIncrement i++
<operator>.assignment i=\012(0x1a2+7613-0x1f5e)
scanf scanf(\012"\x25\x64\x20\x25\x64\x20\x25\x64\x20\x25\x64",&ReplacementFor_bno,&t,&\012ReplacementFor_n,&ReplacementFor_c)
<operator>.assignment ReplacementFor_dis[ReplacementFor_n]=-(0x21dc+21-0x21f0)
<operator>.assignment ReplacementFor_sum=\012(0x2b8+4516-0x145c)
printf printf(\012"\x43\x61\x73\x65\x20\x23\x25\x64\x3a\x20\x25\x64" "\n",i,ReplacementFor_res)
<operator>.lessThan ReplacementFor_j<ReplacementFor_c
<operator>.postIncrement ReplacementFor_j++
<operator>.lessThan ReplacementFor_j<ReplacementFor_n
<operator>.postIncrement ReplacementFor_j++
<operator>.lessThan ReplacementFor_j<\012ReplacementFor_n
<operator>.postIncrement ReplacementFor_j++
<operator>.equals ReplacementFor_j==ReplacementFor_n
<operator>.subtraction 0x1a2+7613-0x1f5e
<operator>.assignment ReplacementFor_j=(0xa27+6305-0x22c8)
scanf scanf("\x25\x64",&\012ReplacementFor_r[ReplacementFor_j])
<operator>.assignment ReplacementFor_j=(0x155f+4123-0x257a)
<operator>.assignment ReplacementFor_dis[\012ReplacementFor_j]=ReplacementFor_r[ReplacementFor_j%ReplacementFor_c]
<operator>.minus -(0x21dc+21-0x21f0)
<operator>.subtraction 0x2b8+4516-0x145c
<operator>.assignment ReplacementFor_j=(0xe67+4915-0x219a)
<operator>.assignment ReplacementFor_res=ReplacementFor_sum*\012(0x111d+4603-0x2316)
<operator>.addition 0x1a2+7613
<operator>.subtraction 0x21dc+21-0x21f0
<operator>.addition 0x2b8+4516
<operator>.lessEqualsThan ReplacementFor_sum+ReplacementFor_dis[\012ReplacementFor_j]<=t/(0x1206+2763-0x1ccf)
<operator>.assignment ReplacementFor_res=t
qsort qsort(ReplacementFor_dis+\012ReplacementFor_j ReplacementFor_n-ReplacementFor_j sizeof(int),\012ReplacementFor_compare_function)
<operator>.subtraction 0xa27+6305-0x22c8
<operator>.subtraction 0x155f+4123-0x257a
<operator>.addition 0x21dc+21
<operator>.subtraction 0xe67+4915-0x219a
<operator>.assignmentPlus ReplacementFor_sum+=ReplacementFor_dis\012[ReplacementFor_j]
<operator>.multiplication ReplacementFor_sum*\012(0x111d+4603-0x2316)
<operator>.lessThan ReplacementFor_k<ReplacementFor_n
<operator>.expressionList ReplacementFor_k++ l++
<operator>.addition 0xa27+6305
<operator>.addition 0x155f+4123
<operator>.modulo ReplacementFor_j%ReplacementFor_c
<operator>.addition 0xe67+4915
<operator>.addition ReplacementFor_sum+ReplacementFor_dis[\012ReplacementFor_j]
<operator>.division t/(0x1206+2763-0x1ccf)
<operator>.assignment ReplacementFor_dis[ReplacementFor_j]=ReplacementFor_sum+\012ReplacementFor_dis[ReplacementFor_j]-t/(0x10c+8961-0x240b)
<operator>.subtraction 0x111d+4603-0x2316
<operator>.addition ReplacementFor_dis+\012ReplacementFor_j
<operator>.subtraction ReplacementFor_n-ReplacementFor_j
<operator>.sizeOf sizeof(int)
<operator>.expressionList ReplacementFor_k=ReplacementFor_j l=\012(0x399+4561-0x1569)
<operator>.subtraction 0x1206+2763-0x1ccf
<operator>.addition 0x111d+4603
<operator>.postIncrement ReplacementFor_k++
<operator>.postIncrement l++
<operator>.lessEqualsThan l<=ReplacementFor_bno
<operator>.addition 0x1206+2763
<operator>.subtraction ReplacementFor_sum+\012ReplacementFor_dis[ReplacementFor_j]-t/(0x10c+8961-0x240b)
<operator>.assignment ReplacementFor_k=ReplacementFor_j
<operator>.assignment l=\012(0x399+4561-0x1569)
<operator>.assignmentPlus ReplacementFor_res+=ReplacementFor_dis[ReplacementFor_k]
<operator>.addition ReplacementFor_sum+\012ReplacementFor_dis[ReplacementFor_j]
<operator>.division t/(0x10c+8961-0x240b)
<operator>.subtraction 0x399+4561-0x1569
<operator>.assignmentPlus ReplacementFor_res+=ReplacementFor_dis[ReplacementFor_k]*\012(0x1957+1571-0x1f78)
<operator>.subtraction 0x10c+8961-0x240b
<operator>.addition 0x399+4561
<operator>.addition 0x10c+8961
<operator>.multiplication ReplacementFor_dis[ReplacementFor_k]*\012(0x1957+1571-0x1f78)
<operator>.subtraction 0x1957+1571-0x1f78
<operator>.addition 0x1957+1571
<operator>.addressOf &ReplacementFor_bno
<operator>.addressOf &t
<operator>.addressOf &\012ReplacementFor_n
<operator>.addressOf &ReplacementFor_c
<operator>.indirectIndexAccess ReplacementFor_dis[ReplacementFor_n]
<operator>.addressOf &\012ReplacementFor_r[ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_dis[\012ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_r[ReplacementFor_j%ReplacementFor_c]
<operator>.indirectIndexAccess ReplacementFor_r[ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_dis[\012ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_dis\012[ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_dis[ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_dis[ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_dis[ReplacementFor_k]
<operator>.indirectIndexAccess ReplacementFor_dis[ReplacementFor_k]
>>>PDG&87 0->2 0->3 0->4 0->6 0->9 0->10 0->11 0->12 0->13 0->14 0->15 0->16 0->17 0->23 0->26 0->27 0->28 0->29 0->30 0->31 0->32 0->33 0->34 0->35 0->36 0->37 0->38 0->40 0->41 0->42 0->43 0->44 0->45 0->47 0->48 0->49 0->51 0->52 0->53 0->54 0->55 0->56 0->57 0->58 0->59 0->61 0->62 0->63 0->64 0->65 0->66 0->67 0->68 0->69 0->70 0->71 2->1 2->3 3->1 3->1 3->1 3->3 3->4 3->6 3->7 3->8 3->9 3->9 3->10 3->12 3->14 3->16 3->18 3->20 3->22 3->23 3->24 3->27 3->28 3->32 3->33 3->34 3->35 3->40 3->41 3->43 3->72 3->73 3->74 3->75 3->76 4->1 4->3 5->1 5->1 5->3 6->1 6->1 6->1 6->1 6->56 7->1 7->1 7->1 7->29 7->31 7->44 7->48 7->58 7->62 7->69 8->1 8->1 8->1 8->29 8->36 8->37 8->44 8->58 8->62 9->1 9->1 9->4 10->1 10->1 10->10 10->11 10->11 10->19 10->42 10->77 10->80 11->1 11->10 12->1 12->12 12->13 12->14 12->21 12->42 12->42 12->78 12->79 13->1 13->12 14->1 14->15 14->16 14->16 14->29 14->44 14->45 14->52 14->57 14->81 15->1 15->14 16->1 16->1 16->1 16->12 16->25 16->30 16->31 16->31 16->37 16->38 16->47 16->48 16->48 16->49 16->49 16->49 16->50 16->51 16->53 16->59 16->60 16->64 16->67 17->1 17->5 17->5 18->1 18->1 18->10 19->1 20->1 20->1 20->12 21->1 21->1 21->1 21->29 21->31 21->44 21->48 21->58 21->62 21->69 22->1 22->7 23->1 23->8 23->8 24->1 24->1 24->14 25->1 25->1 25->9 27->1 27->22 27->22 29->1 29->1 29->1 29->14 29->15 29->36 29->46 29->58 29->62 29->63 29->66 29->68 29->82 29->83 29->84 30->1 30->1 30->9 30->61 30->65 31->1 31->1 31->1 31->1 32->1 32->18 32->18 33->1 33->20 33->20 35->1 35->24 35->24 36->1 36->1 36->1 36->29 36->37 36->44 36->58 36->62 37->1 37->1 37->25 37->25 38->1 38->1 38->1 38->12 38->38 38->39 38->54 38->54 38->55 38->56 39->1 39->1 39->1 42->1 42->10 42->13 44->1 45->1 45->1 45->29 45->29 45->30 45->63 46->1 46->1 46->1 46->29 46->31 46->44 46->48 46->58 46->62 46->69 47->1 47->37 47->37 48->1 49->31 49->31 49->38 49->51 49->59 50->1 51->1 51->1 51->1 52->1 52->45 52->45 54->38 54->39 55->1 55->39 55->56 56->1 56->1 56->6 56->55 56->61 56->65 56->69 56->70 56->71 56->85 56->86 58->1 58->1 58->46 58->46 59->1 59->38 59->51 60->1 60->1 60->51 60->56 61->1 61->1 61->9 61->65 62->1 63->1 63->1 63->30 63->45 63->58 63->58 64->1 64->51 64->51 64->60 64->60 65->1 65->1 65->9 65->61 66->1 66->63 66->63 69->1 69->1 69->29 69->31 69->44 69->48 69->58 69->61 69->62 69->65 69->65 70->1 70->69 70->69
>>>Token main ( ) { int ReplacementFor_total , i , ReplacementFor_j , ReplacementFor_k , t , ReplacementFor_n , ReplacementFor_bno , ReplacementFor_c , ReplacementFor_sum , ReplacementFor_res , l ; scanf ( " \x25 \x64 " , & ReplacementFor_total ) ; for ( i = ( 0x1a2 + 7613 - 0x1f5e ) ; i <= ReplacementFor_total ; i ++ ) { scanf ( " \x25 \x64 \x20 \x25 \x64 \x20 \x25 \x64 \x20 \x25 \x64 " , & ReplacementFor_bno , & t , & ReplacementFor_n , & ReplacementFor_c ) ; for ( ReplacementFor_j = ( 0xa27 + 6305 - 0x22c8 ) ; ReplacementFor_j < ReplacementFor_c ; ReplacementFor_j ++ ) { scanf ( " \x25 \x64 " , & ReplacementFor_r [ ReplacementFor_j ] ) ; } for ( ReplacementFor_j = ( 0x155f + 4123 - 0x257a ) ; ReplacementFor_j < ReplacementFor_n ; ReplacementFor_j ++ ) { ReplacementFor_dis [ ReplacementFor_j ] = ReplacementFor_r [ ReplacementFor_j % ReplacementFor_c ] ; } ReplacementFor_dis [ ReplacementFor_n ] = - ( 0x21dc + 21 - 0x21f0 ) ; ReplacementFor_sum = ( 0x2b8 + 4516 - 0x145c ) ; for ( ReplacementFor_j = ( 0xe67 + 4915 - 0x219a ) ; ReplacementFor_j < ReplacementFor_n ; ReplacementFor_j ++ ) { if ( ReplacementFor_sum + ReplacementFor_dis [ ReplacementFor_j ] <= t / ( 0x1206 + 2763 - 0x1ccf ) ) ReplacementFor_sum += ReplacementFor_dis [ ReplacementFor_j ] ; else { ReplacementFor_dis [ ReplacementFor_j ] = ReplacementFor_sum + ReplacementFor_dis [ ReplacementFor_j ] - t / ( 0x10c + 8961 - 0x240b ) ; break ; } } if ( ReplacementFor_j == ReplacementFor_n ) { ReplacementFor_res = ReplacementFor_sum * ( 0x111d + 4603 - 0x2316 ) ; } else { ReplacementFor_res = t ; qsort ( ReplacementFor_dis + ReplacementFor_j , ReplacementFor_n - ReplacementFor_j , sizeof ( int ) , ReplacementFor_compare_function ) ; for ( ReplacementFor_k = ReplacementFor_j , l = ( 0x399 + 4561 - 0x1569 ) ; ReplacementFor_k < ReplacementFor_n ; ReplacementFor_k ++ , l ++ ) { if ( l <= ReplacementFor_bno ) ReplacementFor_res += ReplacementFor_dis [ ReplacementFor_k ] ; else ReplacementFor_res += ReplacementFor_dis [ ReplacementFor_k ] * ( 0x1957 + 1571 - 0x1f78 ) ; } } printf ( " \x43 \x61 \x73 \x65 \x20 \x23 \x25 \x64 \x3a \x20 \x25 \x64 " " \n " , i , ReplacementFor_res ) ; } }
>>>Func
METHOD ReplacementFor_rand_string
METHOD_RETURN char*
PARAM char*ReplacementFor_str
PARAM size_t \012ReplacementFor_size
<operator>.assignment ReplacementFor_charset[]=\012"\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c\x6d\x6e\x6f\x70\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7a\x31\x32\x33\x34\x35\x36\x37\x38\x39\x30"
RETURN return ReplacementFor_str; return ReplacementFor_str;
IDENTIFIER ReplacementFor_size if (ReplacementFor_size)
IDENTIFIER ReplacementFor_str return ReplacementFor_str;
<operator>.preDecrement --ReplacementFor_size
<operator>.assignment ReplacementFor_str[ReplacementFor_size]='\0'
<operator>.lessThan ReplacementFor_n<ReplacementFor_size
<operator>.postIncrement ReplacementFor_n++
<operator>.assignment ReplacementFor_n=\012(0xa33+2871-0x156a)
<operator>.assignment key=rand()%(int)(sizeof ReplacementFor_charset-(0x1e26+1451-0x23d0))
<operator>.assignment ReplacementFor_str[ReplacementFor_n]=ReplacementFor_charset[key]
<operator>.subtraction 0xa33+2871-0x156a
<operator>.modulo rand()%(int)(sizeof ReplacementFor_charset-(0x1e26+1451-0x23d0))
<operator>.addition 0xa33+2871
<operator>.cast (int)(sizeof ReplacementFor_charset-(0x1e26+1451-0x23d0))
<operator>.subtraction sizeof ReplacementFor_charset-(0x1e26+1451-0x23d0)
<operator>.sizeOf sizeof ReplacementFor_charset
<operator>.subtraction 0x1e26+1451-0x23d0
<operator>.addition 0x1e26+1451
<operator>.indirectIndexAccess ReplacementFor_str[ReplacementFor_n]
<operator>.indirectIndexAccess ReplacementFor_charset[key]
rand rand()
UNKNOWN int int
>>>PDG&27 0->2 0->3 0->4 0->6 0->7 0->8 0->9 0->10 0->11 0->15 0->16 0->17 0->21 0->22 2->1 2->7 3->1 3->8 4->1 4->1 5->1 7->5 8->1 8->10 9->1 9->1 9->7 10->1 10->1 10->1 10->10 10->11 10->11 10->13 10->14 10->16 10->18 10->19 10->20 10->21 10->22 10->23 10->24 10->25 10->26 11->1 11->10 12->1 12->1 12->10 13->1 13->1 13->1 14->1 14->1 14->1 14->7 15->1 15->12 15->12 16->1 16->1 16->13 16->13 18->1 19->1 19->16 19->18 20->1 21->1 21->19 21->19
>>>Token char * ReplacementFor_rand_string ( char * ReplacementFor_str , size_t ReplacementFor_size ) { const char ReplacementFor_charset [ ] = " \x61 \x62 \x63 \x64 \x65 \x66 \x67 \x68 \x69 \x6a \x6b \x6c \x6d \x6e \x6f \x70 \x71 \x72 \x73 \x74 \x75 \x76 \x77 \x78 \x79 \x7a \x31 \x32 \x33 \x34 \x35 \x36 \x37 \x38 \x39 \x30 " ; if ( ReplacementFor_size ) { -- ReplacementFor_size ; for ( size_t ReplacementFor_n = ( 0xa33 + 2871 - 0x156a ) ; ReplacementFor_n < ReplacementFor_size ; ReplacementFor_n ++ ) { int key = rand ( ) % ( int ) ( sizeof ReplacementFor_charset - ( 0x1e26 + 1451 - 0x23d0 ) ) ; ReplacementFor_str [ ReplacementFor_n ] = ReplacementFor_charset [ key ] ; } ReplacementFor_str [ ReplacementFor_size ] = ' \0 ' ; } return ReplacementFor_str ; }
>>>Func
METHOD ReplacementFor_octalToBinary
METHOD_RETURN long
PARAM int ReplacementFor_octalnum
<operator>.assignment ReplacementFor_decimalnum=(0x11bd+2433-0x1b3e)
<operator>.assignment i=(0x658+469-0x82d)
<operator>.assignment ReplacementFor_binarynum=(0xc2b+851-0xf7e)
<operator>.assignment i=\012(0xa80+5860-0x2163)
RETURN return \012ReplacementFor_binarynum; return \012ReplacementFor_binarynum;
<operator>.notEquals ReplacementFor_octalnum!=\012(0x516+5711-0x1b65)
<operator>.notEquals ReplacementFor_decimalnum!=(0x1319+1095-0x1760)
IDENTIFIER ReplacementFor_binarynum return \012ReplacementFor_binarynum;
<operator>.subtraction 0x11bd+2433-0x1b3e
<operator>.subtraction 0x658+469-0x82d
<operator>.subtraction 0xc2b+851-0xf7e
<operator>.assignment ReplacementFor_decimalnum=ReplacementFor_decimalnum+(\012ReplacementFor_octalnum%(0xbf0+5959-0x232d))*pow((0x1fc9+481-0x21a2),i)
<operator>.postIncrement i++
<operator>.assignment ReplacementFor_octalnum=ReplacementFor_octalnum/(0x1c57+1294-0x215b)
<operator>.subtraction 0xa80+5860-0x2163
<operator>.assignment ReplacementFor_binarynum=ReplacementFor_binarynum+(long)(\012ReplacementFor_decimalnum%(0x555+6905-0x204c))*i
<operator>.assignment ReplacementFor_decimalnum=\012ReplacementFor_decimalnum/(0x1b9a+286-0x1cb6)
<operator>.assignment i=i*(0x3e8+8175-0x23cd)
<operator>.addition 0x11bd+2433
<operator>.addition 0x658+469
<operator>.addition 0xc2b+851
<operator>.subtraction 0x516+5711-0x1b65
<operator>.addition 0xa80+5860
<operator>.subtraction 0x1319+1095-0x1760
<operator>.addition 0x516+5711
<operator>.addition ReplacementFor_decimalnum+(\012ReplacementFor_octalnum%(0xbf0+5959-0x232d))*pow((0x1fc9+481-0x21a2),i)
<operator>.division ReplacementFor_octalnum/(0x1c57+1294-0x215b)
<operator>.addition 0x1319+1095
<operator>.addition ReplacementFor_binarynum+(long)(\012ReplacementFor_decimalnum%(0x555+6905-0x204c))*i
<operator>.division ReplacementFor_decimalnum/(0x1b9a+286-0x1cb6)
<operator>.multiplication i*(0x3e8+8175-0x23cd)
<operator>.multiplication (\012ReplacementFor_octalnum%(0xbf0+5959-0x232d))*pow((0x1fc9+481-0x21a2),i)
<operator>.subtraction 0x1c57+1294-0x215b
<operator>.multiplication (long)(\012ReplacementFor_decimalnum%(0x555+6905-0x204c))*i
<operator>.subtraction 0x1b9a+286-0x1cb6
<operator>.subtraction 0x3e8+8175-0x23cd
<operator>.modulo ReplacementFor_octalnum%(0xbf0+5959-0x232d)
pow pow((0x1fc9+481-0x21a2),i)
<operator>.addition 0x1c57+1294
<operator>.cast (long)(\012ReplacementFor_decimalnum%(0x555+6905-0x204c))
<operator>.addition 0x1b9a+286
<operator>.addition 0x3e8+8175
<operator>.subtraction 0xbf0+5959-0x232d
<operator>.subtraction 0x1fc9+481-0x21a2
<operator>.modulo ReplacementFor_decimalnum%(0x555+6905-0x204c)
<operator>.addition 0xbf0+5959
<operator>.addition 0x1fc9+481
<operator>.subtraction 0x555+6905-0x204c
<operator>.addition 0x555+6905
UNKNOWN long long
>>>PDG&53 0->2 0->8 0->9 0->10 0->11 0->12 0->13 0->14 0->15 0->17 0->18 0->21 0->22 0->23 0->24 0->25 0->26 0->27 0->28 0->29 0->30 0->31 0->32 0->33 0->35 0->36 0->37 0->38 0->39 0->40 0->41 0->43 0->44 0->45 0->46 0->47 0->48 0->49 0->50 0->51 2->8 3->1 3->1 3->9 3->14 3->28 4->1 4->1 4->40 5->1 5->1 5->1 5->10 5->18 5->31 6->1 6->1 6->1 6->36 7->1 8->1 8->1 8->1 8->8 8->14 8->15 8->16 8->24 8->27 8->28 8->29 8->34 8->35 8->39 8->39 8->40 8->41 8->45 8->46 8->48 8->49 9->1 9->1 9->1 9->9 9->18 9->19 9->20 9->26 9->30 9->31 9->32 9->33 9->36 9->37 9->38 9->42 9->43 9->44 9->47 9->47 9->50 9->51 9->52 10->7 11->1 11->3 11->3 12->1 12->4 12->4 13->1 13->5 13->5 14->1 14->1 14->9 14->28 15->1 15->40 16->1 16->1 16->8 17->1 17->6 17->6 18->1 18->1 18->1 18->10 18->31 19->1 19->1 19->9 20->1 20->1 20->1 20->36 24->1 24->8 24->8 26->1 26->9 26->9 28->1 29->1 29->16 29->16 31->1 32->1 32->19 32->19 33->1 33->20 33->20 34->1 34->1 34->14 34->14 34->28 34->28 35->1 35->29 35->29 36->1 36->18 36->18 36->31 36->31 36->33 37->1 37->32 37->32 38->1 38->33 38->33 39->1 39->29 39->34 39->34 40->1 40->15 40->34 40->34 42->1 45->1 45->39 45->39 46->1 46->40 46->40 47->1 47->32 47->36 47->36 47->42 47->42 50->1 50->47 50->47
>>>Token long ReplacementFor_octalToBinary ( int ReplacementFor_octalnum ) { int ReplacementFor_decimalnum = ( 0x11bd + 2433 - 0x1b3e ) , i = ( 0x658 + 469 - 0x82d ) ; long ReplacementFor_binarynum = ( 0xc2b + 851 - 0xf7e ) ; while ( ReplacementFor_octalnum != ( 0x516 + 5711 - 0x1b65 ) ) { ReplacementFor_decimalnum = ReplacementFor_decimalnum + ( ReplacementFor_octalnum % ( 0xbf0 + 5959 - 0x232d ) ) * pow ( ( 0x1fc9 + 481 - 0x21a2 ) , i ) ; i ++ ; ReplacementFor_octalnum = ReplacementFor_octalnum / ( 0x1c57 + 1294 - 0x215b ) ; } i = ( 0xa80 + 5860 - 0x2163 ) ; while ( ReplacementFor_decimalnum != ( 0x1319 + 1095 - 0x1760 ) ) { ReplacementFor_binarynum = ReplacementFor_binarynum + ( long ) ( ReplacementFor_decimalnum % ( 0x555 + 6905 - 0x204c ) ) * i ; ReplacementFor_decimalnum = ReplacementFor_decimalnum / ( 0x1b9a + 286 - 0x1cb6 ) ; i = i * ( 0x3e8 + 8175 - 0x23cd ) ; } return ReplacementFor_binarynum ; }
>>>Func
METHOD ReplacementFor_push
METHOD_RETURN void
PARAM char ReplacementFor_item
<operator>.lessThan ReplacementFor_esp<\012(0x11a4+2241-0x1a01)
<operator>.assignment ReplacementFor_stack[++ReplacementFor_esp]=\012ReplacementFor_item
<operator>.subtraction 0x11a4+2241-0x1a01
<operator>.addition 0x11a4+2241
<operator>.preIncrement ++ReplacementFor_esp
<operator>.indirectIndexAccess ReplacementFor_stack[++ReplacementFor_esp]
>>>PDG&9 0->2 0->3 0->4 0->5 0->6 0->7 2->4 3->1 3->1 3->4 3->7 3->7 3->8 4->1 4->1 4->1 5->1 5->3 5->3 7->1
>>>Token void ReplacementFor_push ( char ReplacementFor_item ) { if ( ReplacementFor_esp < ( 0x11a4 + 2241 - 0x1a01 ) ) { ReplacementFor_stack [ ++ ReplacementFor_esp ] = ReplacementFor_item ; } }
>>>Func
METHOD ReplacementFor_compare_desc
METHOD_RETURN int
PARAM const void*ReplacementFor_x1
PARAM const void*\012ReplacementFor_x2
<operator>.assignment ReplacementFor_t1=*((\012int*)ReplacementFor_x1)
<operator>.assignment ReplacementFor_t2=*((int*)ReplacementFor_x2)
<operator>.greaterThan ReplacementFor_t1>ReplacementFor_t2
<operator>.lessThan ReplacementFor_t1<ReplacementFor_t2
<operator>.equals ReplacementFor_t1==ReplacementFor_t2
RETURN return-(0x1595+3762-0x2446); return-(0x1595+3762-0x2446);
RETURN return(0xf84+3731-0x1e16); return(0xf84+3731-0x1e16);
RETURN return(0x735+6397-0x2032); return(0x735+6397-0x2032);
<operator>.cast (\012int*)ReplacementFor_x1
<operator>.cast (int*)ReplacementFor_x2
<operator>.minus -(0x1595+3762-0x2446)
<operator>.subtraction 0xf84+3731-0x1e16
<operator>.subtraction 0x735+6397-0x2032
<operator>.subtraction 0x1595+3762-0x2446
<operator>.addition 0xf84+3731
<operator>.addition 0x735+6397
<operator>.addition 0x1595+3762
>>>PDG&21 0->2 0->3 0->6 0->7 0->8 0->12 0->13 0->15 0->16 0->17 0->18 0->19 0->20 2->12 3->13 4->1 4->1 4->6 5->1 5->1 5->6 6->1 6->1 6->1 6->7 6->7 6->7 6->9 6->14 6->17 6->20 7->8 7->8 7->8 7->10 7->15 7->18 8->11 8->16 8->19 9->1 10->1 11->1 12->1 13->1 14->1 14->1 14->9 15->10 16->11 17->1 17->14 17->14
>>>Token int ReplacementFor_compare_desc ( const void * ReplacementFor_x1 , const void * ReplacementFor_x2 ) { int ReplacementFor_t1 , ReplacementFor_t2 ; ReplacementFor_t1 = * ( ( int * ) ReplacementFor_x1 ) ; ReplacementFor_t2 = * ( ( int * ) ReplacementFor_x2 ) ; if ( ReplacementFor_t1 > ReplacementFor_t2 ) return - ( 0x1595 + 3762 - 0x2446 ) ; if ( ReplacementFor_t1 < ReplacementFor_t2 ) return ( 0xf84 + 3731 - 0x1e16 ) ; if ( ReplacementFor_t1 == ReplacementFor_t2 ) return ( 0x735 + 6397 - 0x2032 ) ; }
>>>Func
METHOD ReplacementFor_gcd
METHOD_RETURN int
PARAM int ReplacementFor_a
PARAM int ReplacementFor_b
RETURN return ReplacementFor_a; return ReplacementFor_a;
<operator>.equals ReplacementFor_a==(0x834+6715-0x226f)
<operator>.notEquals ReplacementFor_b!=(0x18e8+2504-0x22b0)
IDENTIFIER ReplacementFor_a return ReplacementFor_a;
RETURN return ReplacementFor_b; return ReplacementFor_b;
<operator>.greaterThan ReplacementFor_a>ReplacementFor_b
<operator>.subtraction 0x834+6715-0x226f
IDENTIFIER ReplacementFor_b return ReplacementFor_b;
<operator>.subtraction 0x18e8+2504-0x22b0
<operator>.assignment ReplacementFor_a=ReplacementFor_a-ReplacementFor_b
<operator>.addition 0x834+6715
<operator>.addition 0x18e8+2504
<operator>.assignment ReplacementFor_b=\012ReplacementFor_b-ReplacementFor_a
<operator>.subtraction ReplacementFor_a-ReplacementFor_b
<operator>.subtraction ReplacementFor_b-ReplacementFor_a
>>>PDG&19 0->2 0->3 0->5 0->6 0->7 0->9 0->10 0->11 0->12 0->14 0->15 0->17 0->18 2->5 3->1 3->6 3->11 4->1 5->1 5->1 5->1 5->4 5->6 5->7 5->8 5->9 5->12 5->15 6->6 6->9 6->9 6->12 6->15 7->4 8->1 9->13 9->16 9->17 9->17 9->17 9->18 9->18 9->18 10->1 10->5 10->5 11->8 12->6 12->6 13->7 13->9 16->6 17->6 17->13 17->13 18->7 18->9 18->16 18->16
>>>Token int ReplacementFor_gcd ( int ReplacementFor_a , int ReplacementFor_b ) { if ( ReplacementFor_a == ( 0x834 + 6715 - 0x226f ) ) return ReplacementFor_b ; while ( ReplacementFor_b != ( 0x18e8 + 2504 - 0x22b0 ) ) if ( ReplacementFor_a > ReplacementFor_b ) ReplacementFor_a = ReplacementFor_a - ReplacementFor_b ; else ReplacementFor_b = ReplacementFor_b - ReplacementFor_a ; return ReplacementFor_a ; }
>>>Func
METHOD ReplacementFor_FloydWarshall
METHOD_RETURN void
PARAM struct ReplacementFor_Graph*\012ReplacementFor_graph
<operator>.assignment ReplacementFor_V=ReplacementFor_graph->\012ReplacementFor_vertexNum
ReplacementFor_print ReplacementFor_print(ReplacementFor_dist1d,ReplacementFor_V)
<operator>.lessThan i<ReplacementFor_V
<operator>.postIncrement i++
<operator>.lessThan ReplacementFor_k<ReplacementFor_V
<operator>.postIncrement ReplacementFor_k++
<operator>.lessThan i<ReplacementFor_V
<operator>.postIncrement i++
<operator>.assignment i=(0x9f7+7294-0x2675)
<operator>.lessThan ReplacementFor_j<ReplacementFor_V
<operator>.postIncrement ReplacementFor_j++
<operator>.assignment ReplacementFor_dist[i][ReplacementFor_j]=ReplacementFor_graph\012->ReplacementFor_edges[i][ReplacementFor_j]
<operator>.assignment ReplacementFor_k=\012(0x15fc+4184-0x2654)
<operator>.lessThan i<ReplacementFor_V
<operator>.postIncrement i++
<operator>.assignment i=(0x109a+4492-0x2226)
<operator>.lessThan ReplacementFor_j<ReplacementFor_V
<operator>.postIncrement ReplacementFor_j++
<operator>.assignment ReplacementFor_dist1d[i*ReplacementFor_V+ReplacementFor_j]=ReplacementFor_dist[i\012][ReplacementFor_j]
<operator>.assignment ReplacementFor_j=(0x1655+3203-0x22d8)
<operator>.assignment i=(0x1899+78-0x18e7)
<operator>.lessThan ReplacementFor_j<ReplacementFor_V
<operator>.postIncrement ReplacementFor_j++
<operator>.assignment ReplacementFor_j=\012(0x76d+3297-0x144e)
<operator>.subtraction 0x9f7+7294-0x2675
<operator>.subtraction 0x15fc+4184-0x2654
<operator>.assignment ReplacementFor_j=\012(0x8f7+4299-0x19c2)
<operator>.logicalAnd ReplacementFor_dist[i][ReplacementFor_k]!=INT_MAX&&ReplacementFor_dist[\012ReplacementFor_k][ReplacementFor_j]!=INT_MAX&&ReplacementFor_dist[i][\012ReplacementFor_k]+ReplacementFor_dist[ReplacementFor_k][ReplacementFor_j]<\012ReplacementFor_dist[i][ReplacementFor_j]
<operator>.subtraction 0x109a+4492-0x2226
<operator>.addition 0x9f7+7294
<operator>.subtraction 0x1655+3203-0x22d8
<operator>.addition 0x15fc+4184
<operator>.subtraction 0x1899+78-0x18e7
<operator>.assignment ReplacementFor_dist[i][ReplacementFor_j\012]=ReplacementFor_dist[i][ReplacementFor_k]+ReplacementFor_dist[ReplacementFor_k]\012[ReplacementFor_j]
<operator>.addition 0x109a+4492
<operator>.subtraction 0x76d+3297-0x144e
<operator>.addition i*ReplacementFor_V+ReplacementFor_j
<operator>.addition 0x1655+3203
<operator>.addition 0x1899+78
<operator>.subtraction 0x8f7+4299-0x19c2
<operator>.logicalAnd ReplacementFor_dist[i][ReplacementFor_k]!=INT_MAX&&ReplacementFor_dist[\012ReplacementFor_k][ReplacementFor_j]!=INT_MAX
<operator>.lessThan ReplacementFor_dist[i][\012ReplacementFor_k]+ReplacementFor_dist[ReplacementFor_k][ReplacementFor_j]<\012ReplacementFor_dist[i][ReplacementFor_j]
<operator>.addition 0x76d+3297
<operator>.multiplication i*ReplacementFor_V
<operator>.addition 0x8f7+4299
<operator>.notEquals ReplacementFor_dist[i][ReplacementFor_k]!=INT_MAX
<operator>.notEquals ReplacementFor_dist[\012ReplacementFor_k][ReplacementFor_j]!=INT_MAX
<operator>.addition ReplacementFor_dist[i][\012ReplacementFor_k]+ReplacementFor_dist[ReplacementFor_k][ReplacementFor_j]
<operator>.addition ReplacementFor_dist[i][ReplacementFor_k]+ReplacementFor_dist[ReplacementFor_k]\012[ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_dist[i][ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_graph\012->ReplacementFor_edges[i][ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_dist1d[i*ReplacementFor_V+ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_dist[i\012][ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_dist[i]
<operator>.indirectIndexAccess ReplacementFor_graph\012->ReplacementFor_edges[i]
<operator>.indirectIndexAccess ReplacementFor_dist[i\012]
<operator>.indirectFieldAccess ReplacementFor_graph\012->ReplacementFor_edges
FIELD_IDENTIFIER ReplacementFor_edges ReplacementFor_edges
<operator>.indirectIndexAccess ReplacementFor_dist[i][ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_dist[i][ReplacementFor_j\012]
<operator>.indirectIndexAccess ReplacementFor_dist[i][ReplacementFor_k]
<operator>.indirectIndexAccess ReplacementFor_dist[\012ReplacementFor_k][ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_dist[i][\012ReplacementFor_k]
<operator>.indirectIndexAccess ReplacementFor_dist[ReplacementFor_k][ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_dist[i]
<operator>.indirectIndexAccess ReplacementFor_dist[i]
<operator>.indirectIndexAccess ReplacementFor_dist[i][ReplacementFor_k]
<operator>.indirectIndexAccess ReplacementFor_dist[ReplacementFor_k]\012[ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_dist[i]
<operator>.indirectIndexAccess ReplacementFor_dist[\012ReplacementFor_k]
<operator>.indirectIndexAccess ReplacementFor_dist[i]
<operator>.indirectIndexAccess ReplacementFor_dist[ReplacementFor_k]
<operator>.indirectIndexAccess ReplacementFor_dist[i]
<operator>.indirectIndexAccess ReplacementFor_dist[ReplacementFor_k]
>>>PDG&77 0->2 0->4 0->5 0->6 0->7 0->8 0->9 0->10 0->12 0->13 0->16 0->17 0->19 0->20 0->24 0->25 0->27 0->28 0->31 0->32 0->33 0->34 0->35 0->37 0->38 0->39 0->40 0->41 0->42 0->45 0->46 0->47 0->48 0->49 2->1 3->1 3->1 3->5 4->1 4->1 4->1 5->5 5->6 5->6 5->7 5->12 5->12 5->22 5->33 5->40 6->1 6->5 7->1 7->1 7->7 7->8 7->8 7->9 7->16 7->16 7->23 7->35 7->41 8->1 8->7 9->1 9->1 9->4 9->9 9->10 9->10 9->19 9->19 9->26 9->38 9->45 9->46 10->1 10->9 11->1 11->1 11->5 12->1 12->1 12->5 12->12 12->13 12->13 12->14 12->52 12->53 12->56 12->57 12->59 12->60 13->1 13->12 14->1 14->1 14->1 14->44 15->1 15->1 15->7 16->7 16->16 16->17 16->17 16->24 16->24 16->29 16->42 16->47 17->1 17->16 18->1 18->1 18->9 19->1 19->1 19->9 19->19 19->20 19->20 19->21 19->39 19->39 19->46 19->46 19->54 19->55 19->58 20->1 20->19 21->1 21->1 21->1 21->4 22->1 22->1 22->12 23->1 23->1 23->16 24->1 24->1 24->16 24->24 24->25 24->25 24->30 24->43 24->48 24->63 24->71 25->1 25->24 26->1 26->1 26->19 27->1 27->11 27->11 28->1 28->15 28->15 29->1 29->1 29->24 30->1 30->1 30->1 30->36 30->51 30->62 30->68 30->69 30->70 30->75 30->76 31->1 31->18 31->18 33->1 33->22 33->22 35->1 35->23 35->23 36->1 36->1 36->1 38->1 38->26 38->26 39->1 42->1 42->29 42->29 43->1 43->1 43->30 43->30 43->44 43->50 43->61 43->65 43->66 43->67 43->73 43->74 44->1 44->1 44->30 44->30 46->10 46->19 46->39 46->39 48->1 48->1 48->36 48->43 48->43 48->49 48->49 48->51 48->64 48->72 49->1 49->1 49->43 49->43 49->48 50->1 50->1 51->1 51->1
>>>Token void ReplacementFor_FloydWarshall ( struct ReplacementFor_Graph * ReplacementFor_graph ) { int ReplacementFor_V = ReplacementFor_graph -> ReplacementFor_vertexNum ; int ReplacementFor_dist [ ReplacementFor_V ] [ ReplacementFor_V ] ; for ( int i = ( 0x9f7 + 7294 - 0x2675 ) ; i < ReplacementFor_V ; i ++ ) for ( int ReplacementFor_j = ( 0x1655 + 3203 - 0x22d8 ) ; ReplacementFor_j < ReplacementFor_V ; ReplacementFor_j ++ ) ReplacementFor_dist [ i ] [ ReplacementFor_j ] = ReplacementFor_graph -> ReplacementFor_edges [ i ] [ ReplacementFor_j ] ; for ( int ReplacementFor_k = ( 0x15fc + 4184 - 0x2654 ) ; ReplacementFor_k < ReplacementFor_V ; ReplacementFor_k ++ ) for ( int i = ( 0x1899 + 78 - 0x18e7 ) ; i < ReplacementFor_V ; i ++ ) for ( int ReplacementFor_j = ( 0x8f7 + 4299 - 0x19c2 ) ; ReplacementFor_j < ReplacementFor_V ; ReplacementFor_j ++ ) if ( ReplacementFor_dist [ i ] [ ReplacementFor_k ] != INT_MAX && ReplacementFor_dist [ ReplacementFor_k ] [ ReplacementFor_j ] != INT_MAX && ReplacementFor_dist [ i ] [ ReplacementFor_k ] + ReplacementFor_dist [ ReplacementFor_k ] [ ReplacementFor_j ] < ReplacementFor_dist [ i ] [ ReplacementFor_j ] ) ReplacementFor_dist [ i ] [ ReplacementFor_j ] = ReplacementFor_dist [ i ] [ ReplacementFor_k ] + ReplacementFor_dist [ ReplacementFor_k ] [ ReplacementFor_j ] ; int ReplacementFor_dist1d [ ReplacementFor_V * ReplacementFor_V ] ; for ( int i = ( 0x109a + 4492 - 0x2226 ) ; i < ReplacementFor_V ; i ++ ) for ( int ReplacementFor_j = ( 0x76d + 3297 - 0x144e ) ; ReplacementFor_j < ReplacementFor_V ; ReplacementFor_j ++ ) ReplacementFor_dist1d [ i * ReplacementFor_V + ReplacementFor_j ] = ReplacementFor_dist [ i ] [ ReplacementFor_j ] ; ReplacementFor_print ( ReplacementFor_dist1d , ReplacementFor_V ) ; }
>>>Func
METHOD main
METHOD_RETURN void
PARAM int ReplacementFor_argc
PARAM char*ReplacementFor_argv[]
ReplacementFor_GenerateFilename ReplacementFor_GenerateFilename(ReplacementFor_fname_o ReplacementFor_argv[\012(0x1563+1652-0x1bd6)],"\x5f\x6f\x75\x74\x2e\x74\x78\x74")
<operator>.assignment ReplacementFor_fp_i=\012fopen(ReplacementFor_argv[(0xd36+3682-0x1b97)],"\x72")
<operator>.assignment ReplacementFor_fp_o=fopen\012(ReplacementFor_fname_o,"\x77")
fscanf fscanf(ReplacementFor_fp_i,"\x25\x64",&T)
fclose fclose(ReplacementFor_fp_i)
fclose fclose(ReplacementFor_fp_o)
<operator>.lessEqualsThan ReplacementFor_No<=T
<operator>.postIncrement ReplacementFor_No++
fopen fopen(ReplacementFor_argv[(0xd36+3682-0x1b97)],"\x72")
fopen fopen\012(ReplacementFor_fname_o,"\x77")
<operator>.assignment ReplacementFor_No=(0x279+8245-0x22ad)
fprintf fprintf(stderr,"\x43\x61\x73\x65\x20\x23\x25\x64\x2f\x25\x64\x2e\x2e\x2e",\012ReplacementFor_No,T)
fscanf fscanf(ReplacementFor_fp_i,"\x25\x64",&ReplacementFor_N)
<operator>.assignment ReplacementFor_X=(0xf8f+4742-0x2215)
qsort qsort(S ReplacementFor_N sizeof(double)*(0x6f4+4060-0x16cd),\012ReplacementFor_sort1)
<operator>.assignment ReplacementFor_Total=ReplacementFor_X
qsort qsort(S ReplacementFor_N sizeof(double)*(0x306+6384-0x1bf3),\012ReplacementFor_sort0)
fprintf fprintf(ReplacementFor_fp_o,\012"\x43\x61\x73\x65\x20\x23\x25\x64\x3a",ReplacementFor_No)
fprintf fprintf(\012ReplacementFor_fp_o,"\n")
fprintf fprintf(stderr,"\x66\x69\x6e\x69\x73\x68\x21\x21" "\n"\012)
<operator>.subtraction 0x1563+1652-0x1bd6
<operator>.lessThan ReplacementFor_ii<ReplacementFor_N
<operator>.postIncrement ReplacementFor_ii++
<operator>.lessThan ReplacementFor_ii<ReplacementFor_N
<operator>.postIncrement ReplacementFor_ii++
<operator>.greaterThan ReplacementFor_Total>(0x1583+1119-0x19e2)
<operator>.lessThan ReplacementFor_ii<ReplacementFor_N
<operator>.postIncrement ReplacementFor_ii++
<operator>.addition 0x1563+1652
<operator>.subtraction 0xd36+3682-0x1b97
<operator>.subtraction 0x279+8245-0x22ad
<operator>.subtraction 0xf8f+4742-0x2215
<operator>.assignment ReplacementFor_ii=(0xb5f+3075-0x1762)
fscanf fscanf(\012ReplacementFor_fp_i "\x25\x6c\x66" &(S[ReplacementFor_ii][(0x9+342-0x15e)]))
<operator>.assignment S[\012ReplacementFor_ii][(0x1057+215-0x112e)]=ReplacementFor_ii
<operator>.assignment S[ReplacementFor_ii][\012(0x1be7+1-0x1be6)]=0.0
<operator>.assignmentPlus ReplacementFor_X+=S[ReplacementFor_ii][(0x926+1208-0xddd)\012]
<operator>.multiplication sizeof(double)*(0x6f4+4060-0x16cd)
<operator>.assignment ReplacementFor_ii=(0x59c+7644-0x2377)
<operator>.multiplication sizeof(double)*(0x306+6384-0x1bf3)
<operator>.assignment ReplacementFor_ii=\012(0x13f8+501-0x15ed)
fprintf fprintf(ReplacementFor_fp_o "\x20\x25\x2e\x36\x6c\x66" (0x4cd+7201-0x208a)*S[\012ReplacementFor_ii][(0x2640+108-0x26aa)]/ReplacementFor_X)
<operator>.addition 0xd36+3682
<operator>.addition 0x279+8245
<operator>.addition 0xf8f+4742
<operator>.subtraction 0x6f4+4060-0x16cd
<operator>.greaterThan ReplacementFor_Total>(S[ReplacementFor_ii][\012(0x553+2513-0xf23)]-(S[(0x1569+1581-0x1b96)][(0xd87+3136-0x19c6)]+S[\012(0x19ef+1621-0x2044)][(0xfb4+2208-0x1852)]))*ReplacementFor_ii
<operator>.subtraction 0x1583+1119-0x19e2
<operator>.lessThan ReplacementFor_ii<ReplacementFor_N
<operator>.postIncrement ReplacementFor_ii++
<operator>.sizeOf sizeof(double)
<operator>.subtraction 0x306+6384-0x1bf3
<operator>.subtraction 0xb5f+3075-0x1762
<operator>.addition 0x6f4+4060
<operator>.subtraction 0x59c+7644-0x2377
<operator>.addition 0x1583+1119
<operator>.assignment ReplacementFor_ii=\012(0x32+718-0x300)
<operator>.assignmentPlus S[\012ReplacementFor_ii][(0x5b4+3146-0x11fc)]+=ReplacementFor_Total/(double)\012ReplacementFor_N
<operator>.addition 0x306+6384
<operator>.subtraction 0x13f8+501-0x15ed
<operator>.division (0x4cd+7201-0x208a)*S[\012ReplacementFor_ii][(0x2640+108-0x26aa)]/ReplacementFor_X
<operator>.addition 0xb5f+3075
<operator>.subtraction 0x1057+215-0x112e
<operator>.subtraction 0x1be7+1-0x1be6
<operator>.subtraction 0x926+1208-0xddd
<operator>.addition 0x59c+7644
<operator>.multiplication (S[ReplacementFor_ii][\012(0x553+2513-0xf23)]-(S[(0x1569+1581-0x1b96)][(0xd87+3136-0x19c6)]+S[\012(0x19ef+1621-0x2044)][(0xfb4+2208-0x1852)]))*ReplacementFor_ii
<operator>.lessThan ReplacementFor_jj<ReplacementFor_ii
<operator>.postIncrement ReplacementFor_jj++
<operator>.assignment ReplacementFor_Total=0.0
<operator>.addition 0x13f8+501
<operator>.multiplication (0x4cd+7201-0x208a)*S[\012ReplacementFor_ii][(0x2640+108-0x26aa)]
<operator>.subtraction 0x9+342-0x15e
<operator>.addition 0x1057+215
<operator>.addition 0x1be7+1
<operator>.addition 0x926+1208
<operator>.subtraction S[ReplacementFor_ii][\012(0x553+2513-0xf23)]-(S[(0x1569+1581-0x1b96)][(0xd87+3136-0x19c6)]+S[\012(0x19ef+1621-0x2044)][(0xfb4+2208-0x1852)])
<operator>.assignment ReplacementFor_jj=(0xafc+7011-0x265f)
<operator>.assignmentMinus ReplacementFor_Total-=S[ReplacementFor_ii][\012(0x1ce8+1228-0x21b3)]-(S[ReplacementFor_jj][(0x457+2911-0xfb5)]+S[\012ReplacementFor_jj][(0x100a+5288-0x24b0)])
<operator>.assignmentPlus S[ReplacementFor_jj][(0xaab+229-0xb8e)\012]+=S[ReplacementFor_ii][(0xc52+2647-0x16a8)]-(S[ReplacementFor_jj][\012(0x997+4543-0x1b55)]+S[ReplacementFor_jj][(0x1bd2+209-0x1ca1)])
<operator>.lessThan ReplacementFor_jj<ReplacementFor_ii
<operator>.postIncrement ReplacementFor_jj++
<operator>.subtraction 0x32+718-0x300
<operator>.division ReplacementFor_Total/(double)\012ReplacementFor_N
<operator>.subtraction 0x4cd+7201-0x208a
<operator>.addition 0x9+342
<operator>.addition S[(0x1569+1581-0x1b96)][(0xd87+3136-0x19c6)]+S[\012(0x19ef+1621-0x2044)][(0xfb4+2208-0x1852)]
<operator>.assignment ReplacementFor_jj=(0xa6a+5947-0x21a5)
<operator>.assignmentPlus S[ReplacementFor_jj][(0x9d8+3712-0x1856)]+=\012ReplacementFor_Total/(double)ReplacementFor_ii
<operator>.addition 0x32+718
<operator>.subtraction 0x5b4+3146-0x11fc
<operator>.cast (double)\012ReplacementFor_N
<operator>.addition 0x4cd+7201
<operator>.subtraction 0x2640+108-0x26aa
<operator>.subtraction 0x553+2513-0xf23
<operator>.subtraction 0xafc+7011-0x265f
<operator>.subtraction S[ReplacementFor_ii][\012(0x1ce8+1228-0x21b3)]-(S[ReplacementFor_jj][(0x457+2911-0xfb5)]+S[\012ReplacementFor_jj][(0x100a+5288-0x24b0)])
<operator>.subtraction S[ReplacementFor_ii][(0xc52+2647-0x16a8)]-(S[ReplacementFor_jj][\012(0x997+4543-0x1b55)]+S[ReplacementFor_jj][(0x1bd2+209-0x1ca1)])
<operator>.addition 0x5b4+3146
<operator>.addition 0x2640+108
<operator>.addition 0x553+2513
<operator>.subtraction 0xd87+3136-0x19c6
<operator>.subtraction 0xfb4+2208-0x1852
<operator>.addition 0xafc+7011
<operator>.addition S[ReplacementFor_jj][(0x457+2911-0xfb5)]+S[\012ReplacementFor_jj][(0x100a+5288-0x24b0)]
<operator>.subtraction 0xaab+229-0xb8e
<operator>.addition S[ReplacementFor_jj][\012(0x997+4543-0x1b55)]+S[ReplacementFor_jj][(0x1bd2+209-0x1ca1)]
<operator>.subtraction 0xa6a+5947-0x21a5
<operator>.division ReplacementFor_Total/(double)ReplacementFor_ii
<operator>.subtraction 0x1569+1581-0x1b96
<operator>.addition 0xd87+3136
<operator>.subtraction 0x19ef+1621-0x2044
<operator>.addition 0xfb4+2208
<operator>.subtraction 0x1ce8+1228-0x21b3
<operator>.addition 0xaab+229
<operator>.subtraction 0xc52+2647-0x16a8
<operator>.addition 0xa6a+5947
<operator>.subtraction 0x9d8+3712-0x1856
<operator>.cast (double)ReplacementFor_ii
<operator>.addition 0x1569+1581
<operator>.addition 0x19ef+1621
<operator>.addition 0x1ce8+1228
<operator>.subtraction 0x457+2911-0xfb5
<operator>.subtraction 0x100a+5288-0x24b0
<operator>.addition 0xc52+2647
<operator>.subtraction 0x997+4543-0x1b55
<operator>.subtraction 0x1bd2+209-0x1ca1
<operator>.addition 0x9d8+3712
<operator>.addition 0x457+2911
<operator>.addition 0x100a+5288
<operator>.addition 0x997+4543
<operator>.addition 0x1bd2+209
<operator>.addressOf &ReplacementFor_N
<operator>.sizeOf sizeof(double)
<operator>.addressOf &(S[ReplacementFor_ii][(0x9+342-0x15e)])
<operator>.indirectIndexAccess S[\012ReplacementFor_ii][(0x1057+215-0x112e)]
<operator>.indirectIndexAccess S[ReplacementFor_ii][\012(0x1be7+1-0x1be6)]
<operator>.indirectIndexAccess S[ReplacementFor_ii][(0x926+1208-0xddd)\012]
<operator>.indirectIndexAccess S[ReplacementFor_ii][(0x9+342-0x15e)]
<operator>.indirectIndexAccess S[\012ReplacementFor_ii]
<operator>.indirectIndexAccess S[ReplacementFor_ii]
<operator>.indirectIndexAccess S[ReplacementFor_ii]
<operator>.indirectIndexAccess S[ReplacementFor_ii]
<operator>.indirectIndexAccess S[\012ReplacementFor_ii][(0x5b4+3146-0x11fc)]
<operator>.indirectIndexAccess S[\012ReplacementFor_ii][(0x2640+108-0x26aa)]
<operator>.indirectIndexAccess S[ReplacementFor_ii][\012(0x553+2513-0xf23)]
<operator>.indirectIndexAccess S[\012ReplacementFor_ii]
<operator>.indirectIndexAccess S[\012ReplacementFor_ii]
<operator>.indirectIndexAccess S[ReplacementFor_ii]
<operator>.indirectIndexAccess S[(0x1569+1581-0x1b96)][(0xd87+3136-0x19c6)]
<operator>.indirectIndexAccess S[\012(0x19ef+1621-0x2044)][(0xfb4+2208-0x1852)]
<operator>.indirectIndexAccess S[ReplacementFor_jj][(0xaab+229-0xb8e)\012]
UNKNOWN double double
<operator>.indirectIndexAccess S[(0x1569+1581-0x1b96)]
<operator>.indirectIndexAccess S[\012(0x19ef+1621-0x2044)]
<operator>.indirectIndexAccess S[ReplacementFor_ii][\012(0x1ce8+1228-0x21b3)]
<operator>.indirectIndexAccess S[ReplacementFor_jj]
<operator>.indirectIndexAccess S[ReplacementFor_ii][(0xc52+2647-0x16a8)]
<operator>.indirectIndexAccess S[ReplacementFor_jj][(0x9d8+3712-0x1856)]
<operator>.indirectIndexAccess S[ReplacementFor_ii]
<operator>.indirectIndexAccess S[ReplacementFor_jj][(0x457+2911-0xfb5)]
<operator>.indirectIndexAccess S[\012ReplacementFor_jj][(0x100a+5288-0x24b0)]
<operator>.indirectIndexAccess S[ReplacementFor_ii]
<operator>.indirectIndexAccess S[ReplacementFor_jj][\012(0x997+4543-0x1b55)]
<operator>.indirectIndexAccess S[ReplacementFor_jj][(0x1bd2+209-0x1ca1)]
<operator>.indirectIndexAccess S[ReplacementFor_jj]
<operator>.indirectIndexAccess S[ReplacementFor_jj]
<operator>.indirectIndexAccess S[\012ReplacementFor_jj]
<operator>.indirectIndexAccess S[ReplacementFor_jj]
<operator>.indirectIndexAccess S[ReplacementFor_jj]
UNKNOWN double double
>>>PDG&175 0->2 0->3 0->4 0->7 0->8 0->9 0->10 0->11 0->12 0->13 0->15 0->16 0->18 0->19 0->20 0->21 0->22 0->23 0->24 0->25 0->26 0->27 0->28 0->29 0->30 0->31 0->32 0->33 0->34 0->35 0->37 0->38 0->39 0->40 0->45 0->46 0->47 0->48 0->49 0->50 0->51 0->52 0->53 0->55 0->56 0->57 0->58 0->59 0->62 0->63 0->64 0->65 0->66 0->67 0->68 0->69 0->70 0->71 0->72 0->73 0->74 0->76 0->77 0->78 0->79 0->82 0->84 0->85 0->86 0->87 0->88 0->89 0->93 0->94 0->95 0->96 0->97 0->98 0->99 0->102 0->103 0->104 0->105 0->106 0->107 0->109 0->111 0->112 0->113 0->114 0->115 0->116 0->117 0->118 0->119 0->120 0->121 0->122 0->123 0->124 0->125 0->126 0->127 0->128 0->129 0->130 0->131 0->132 0->133 0->134 0->135 2->1 3->1 3->4 3->12 4->1 4->1 4->13 5->1 5->1 5->7 6->1 6->1 6->9 6->21 7->1 7->1 7->8 7->10 7->15 7->16 8->1 8->1 9->1 9->1 10->1 10->1 10->1 10->10 10->11 10->15 10->15 10->15 10->16 10->17 10->18 10->19 10->20 10->21 10->22 10->23 10->25 10->27 10->29 10->30 10->35 10->36 10->41 10->42 10->43 10->44 10->48 10->49 10->51 10->54 10->55 10->56 10->57 10->58 10->59 10->62 10->63 10->65 10->69 10->74 10->136 10->137 11->1 11->10 12->1 12->5 12->5 13->1 13->6 13->6 14->1 14->1 14->10 15->1 15->10 15->21 15->23 16->1 16->1 16->8 16->18 16->20 16->25 16->27 16->30 16->37 16->52 16->87 16->95 17->1 17->1 17->19 17->40 17->64 18->1 18->1 18->1 18->20 18->27 19->1 19->1 19->29 19->50 20->1 20->1 20->1 20->1 20->18 20->30 21->1 21->11 21->22 21->45 22->1 22->9 22->21 23->1 23->1 23->15 24->1 25->18 25->25 25->26 25->26 25->37 25->38 25->38 25->39 25->40 25->66 25->67 25->68 25->76 25->77 25->78 25->79 25->89 25->138 25->139 25->140 25->141 25->142 25->143 25->144 25->145 25->146 26->1 26->25 27->20 27->50 27->52 27->70 27->70 27->80 27->90 27->98 27->104 27->105 27->106 27->113 27->114 27->115 27->116 27->123 27->124 27->149 27->152 27->153 27->154 27->157 27->158 28->1 28->27 29->1 29->1 29->1 29->52 29->60 29->86 29->87 29->93 30->1 30->1 30->1 30->16 30->25 30->30 30->31 30->31 30->45 30->64 30->75 30->88 30->96 30->97 30->103 30->148 30->151 31->1 31->30 33->1 34->1 34->14 34->14 35->1 35->17 35->17 36->1 36->1 36->25 37->1 37->1 37->8 37->16 38->1 38->1 39->1 39->1 40->1 40->1 40->19 40->64 41->1 41->18 42->1 42->1 42->27 43->1 43->20 44->1 44->1 44->30 45->1 45->1 45->22 49->1 49->41 49->41 50->1 50->1 50->27 50->28 50->29 50->71 50->73 50->81 50->82 50->84 50->91 50->99 50->107 50->111 50->112 50->120 51->1 51->29 51->29 52->20 52->52 52->53 52->53 52->61 52->87 52->87 52->94 52->95 52->95 52->102 52->147 52->150 52->156 53->1 53->52 54->1 55->1 55->43 55->43 56->1 56->36 56->36 58->1 58->42 58->42 60->1 60->1 60->52 61->1 61->1 61->1 63->1 63->44 63->44 64->1 64->1 64->45 64->45 66->1 67->1 68->1 70->1 70->50 70->50 70->71 70->84 71->1 71->1 71->28 71->71 71->72 71->72 71->82 71->83 71->100 71->101 71->108 71->109 71->110 71->117 71->118 71->119 71->125 71->126 71->127 71->128 71->129 71->130 71->132 71->133 71->134 71->135 71->155 71->159 71->160 71->161 71->163 71->164 71->165 71->166 71->167 71->168 71->170 71->171 71->172 71->173 72->1 72->71 73->1 73->29 75->1 75->1 75->64 75->64 76->1 80->1 80->1 80->70 80->70 81->1 81->1 81->71 82->1 82->1 82->29 82->50 83->1 83->1 83->1 84->1 84->1 84->84 84->85 84->85 84->92 84->112 84->112 84->121 84->122 84->122 84->131 84->162 84->169 84->174 85->1 85->84 86->1 86->60 86->60 87->1 87->1 87->61 87->61 88->1 88->75 88->75 90->1 90->1 91->1 91->1 91->84 92->1 92->1 92->1 94->1 97->1 98->1 99->1 99->81 99->81 100->1 100->1 100->82 100->82 101->1 101->1 101->83 101->83 105->1 106->1 108->1 108->1 109->1 110->1 110->1 111->1 111->91 111->91 112->1 112->92 112->92 113->1 115->1 117->1 119->1 121->1 126->1 127->1 129->1 130->1
>>>Token void main ( int ReplacementFor_argc , char * ReplacementFor_argv [ ] ) { char ReplacementFor_fname_o [ ReplacementFor__MAX_PATH ] ; FILE * ReplacementFor_fp_i ; FILE * ReplacementFor_fp_o ; int ReplacementFor_No ; int ReplacementFor_ii ; int ReplacementFor_jj ; int T ; int ReplacementFor_N ; double S [ ( 0xc9b + 6298 - 0x246d ) ] [ ( 0x17d + 78 - 0x1c8 ) ] ; double ReplacementFor_X ; double ReplacementFor_Total ; ReplacementFor_GenerateFilename ( ReplacementFor_fname_o , ReplacementFor_argv [ ( 0x1563 + 1652 - 0x1bd6 ) ] , " \x5f \x6f \x75 \x74 \x2e \x74 \x78 \x74 " ) ; ReplacementFor_fp_i = fopen ( ReplacementFor_argv [ ( 0xd36 + 3682 - 0x1b97 ) ] , " \x72 " ) ; ReplacementFor_fp_o = fopen ( ReplacementFor_fname_o , " \x77 " ) ; fscanf ( ReplacementFor_fp_i , " \x25 \x64 " , & T ) ; for ( ReplacementFor_No = ( 0x279 + 8245 - 0x22ad ) ; ReplacementFor_No <= T ; ReplacementFor_No ++ ) { fprintf ( stderr , " \x43 \x61 \x73 \x65 \x20 \x23 \x25 \x64 \x2f \x25 \x64 \x2e \x2e \x2e " , ReplacementFor_No , T ) ; fscanf ( ReplacementFor_fp_i , " \x25 \x64 " , & ReplacementFor_N ) ; ReplacementFor_X = ( 0xf8f + 4742 - 0x2215 ) ; for ( ReplacementFor_ii = ( 0xb5f + 3075 - 0x1762 ) ; ReplacementFor_ii < ReplacementFor_N ; ReplacementFor_ii ++ ) { fscanf ( ReplacementFor_fp_i , " \x25 \x6c \x66 " , & ( S [ ReplacementFor_ii ] [ ( 0x9 + 342 - 0x15e ) ] ) ) ; S [ ReplacementFor_ii ] [ ( 0x1057 + 215 - 0x112e ) ] = ReplacementFor_ii ; S [ ReplacementFor_ii ] [ ( 0x1be7 + 1 - 0x1be6 ) ] = 0.0 ; ReplacementFor_X += S [ ReplacementFor_ii ] [ ( 0x926 + 1208 - 0xddd ) ] ; } qsort ( S , ReplacementFor_N , sizeof ( double ) * ( 0x6f4 + 4060 - 0x16cd ) , ReplacementFor_sort1 ) ; ReplacementFor_Total = ReplacementFor_X ; for ( ReplacementFor_ii = ( 0x59c + 7644 - 0x2377 ) ; ReplacementFor_ii < ReplacementFor_N ; ReplacementFor_ii ++ ) { if ( ReplacementFor_Total > ( S [ ReplacementFor_ii ] [ ( 0x553 + 2513 - 0xf23 ) ] - ( S [ ( 0x1569 + 1581 - 0x1b96 ) ] [ ( 0xd87 + 3136 - 0x19c6 ) ] + S [ ( 0x19ef + 1621 - 0x2044 ) ] [ ( 0xfb4 + 2208 - 0x1852 ) ] ) ) * ReplacementFor_ii ) { for ( ReplacementFor_jj = ( 0xafc + 7011 - 0x265f ) ; ReplacementFor_jj < ReplacementFor_ii ; ReplacementFor_jj ++ ) { ReplacementFor_Total -= S [ ReplacementFor_ii ] [ ( 0x1ce8 + 1228 - 0x21b3 ) ] - ( S [ ReplacementFor_jj ] [ ( 0x457 + 2911 - 0xfb5 ) ] + S [ ReplacementFor_jj ] [ ( 0x100a + 5288 - 0x24b0 ) ] ) ; S [ ReplacementFor_jj ] [ ( 0xaab + 229 - 0xb8e ) ] += S [ ReplacementFor_ii ] [ ( 0xc52 + 2647 - 0x16a8 ) ] - ( S [ ReplacementFor_jj ] [ ( 0x997 + 4543 - 0x1b55 ) ] + S [ ReplacementFor_jj ] [ ( 0x1bd2 + 209 - 0x1ca1 ) ] ) ; } } else { for ( ReplacementFor_jj = ( 0xa6a + 5947 - 0x21a5 ) ; ReplacementFor_jj < ReplacementFor_ii ; ReplacementFor_jj ++ ) { S [ ReplacementFor_jj ] [ ( 0x9d8 + 3712 - 0x1856 ) ] += ReplacementFor_Total / ( double ) ReplacementFor_ii ; } ReplacementFor_Total = 0.0 ; break ; } } if ( ReplacementFor_Total > ( 0x1583 + 1119 - 0x19e2 ) ) { for ( ReplacementFor_ii = ( 0x32 + 718 - 0x300 ) ; ReplacementFor_ii < ReplacementFor_N ; ReplacementFor_ii ++ ) { S [ ReplacementFor_ii ] [ ( 0x5b4 + 3146 - 0x11fc ) ] += ReplacementFor_Total / ( double ) ReplacementFor_N ; } } qsort ( S , ReplacementFor_N , sizeof ( double ) * ( 0x306 + 6384 - 0x1bf3 ) , ReplacementFor_sort0 ) ; fprintf ( ReplacementFor_fp_o , " \x43 \x61 \x73 \x65 \x20 \x23 \x25 \x64 \x3a " , ReplacementFor_No ) ; for ( ReplacementFor_ii = ( 0x13f8 + 501 - 0x15ed ) ; ReplacementFor_ii < ReplacementFor_N ; ReplacementFor_ii ++ ) { fprintf ( ReplacementFor_fp_o , " \x20 \x25 \x2e \x36 \x6c \x66 " , ( 0x4cd + 7201 - 0x208a ) * S [ ReplacementFor_ii ] [ ( 0x2640 + 108 - 0x26aa ) ] / ReplacementFor_X ) ; } fprintf ( ReplacementFor_fp_o , " \n " ) ; fprintf ( stderr , " \x66 \x69 \x6e \x69 \x73 \x68 \x21 \x21 " " \n " ) ; } fclose ( ReplacementFor_fp_i ) ; fclose ( ReplacementFor_fp_o ) ; }
>>>Func
METHOD main
METHOD_RETURN int
scanf scanf("\x25\x64",&ReplacementFor_Tcases)
RETURN return(0xf58+1249-0x1439); return(0xf58+1249-0x1439);
<operator>.lessThan ReplacementFor_cases<ReplacementFor_Tcases
<operator>.postIncrement ReplacementFor_cases++
<operator>.subtraction 0xf58+1249-0x1439
<operator>.assignment ReplacementFor_cases=(0x843+5822-0x1f01)
scanf scanf(\012"\x25\x64\x20",&ReplacementFor_N)
printf printf("\x43\x61\x73\x65\x20\x23\x25\x64\x3a" "\n" \012ReplacementFor_cases+(0x7bd+6848-0x227c))
<operator>.lessThan i<ReplacementFor_N
<operator>.postIncrement i++
<operator>.lessThan i<\012ReplacementFor_N
<operator>.postIncrement i++
<operator>.lessThan i<\012ReplacementFor_N
<operator>.postIncrement i++
<operator>.lessThan i<\012ReplacementFor_N
<operator>.postIncrement i++
<operator>.lessThan i<\012ReplacementFor_N
<operator>.postIncrement i++
<operator>.addition 0xf58+1249
<operator>.subtraction 0x843+5822-0x1f01
<operator>.assignment i=\012(0x5ec+8403-0x26bf)
scanf scanf("\x25\x73",\012ReplacementFor_input)
<operator>.assignment i=(0xc01+3613-0x1a1e)
<operator>.assignment ReplacementFor_wp[i]=0.0
<operator>.assignment ReplacementFor_cnt=\012(0x514+6348-0x1de0)
<operator>.assignmentDivision ReplacementFor_wp[i]/=ReplacementFor_cnt
<operator>.assignment i=(0x187+5941-0x18bc)
<operator>.assignment ReplacementFor_owp[i]=0.0
<operator>.assignment ReplacementFor_cnt=\012(0x632+6636-0x201e)
<operator>.assignmentDivision ReplacementFor_owp[i]/=ReplacementFor_cnt
<operator>.assignment i=(0x170f+2752-0x21cf)
<operator>.assignment ReplacementFor_oowp[i]=0.0
<operator>.assignment ReplacementFor_cnt=\012(0x243+5679-0x1872)
<operator>.assignmentDivision ReplacementFor_oowp[i]/=\012ReplacementFor_cnt
<operator>.addition ReplacementFor_cases+(0x7bd+6848-0x227c)
<operator>.assignment i=(0x12aa+1898-0x1a14)
printf printf("\x25\x2e\x31\x30\x6c\x66" "\n",0.25*\012ReplacementFor_wp[i]+0.5*ReplacementFor_owp[i]+0.25*ReplacementFor_oowp[i])
<operator>.addition 0x843+5822
<operator>.lessThan ReplacementFor_j<\012ReplacementFor_N
<operator>.postIncrement ReplacementFor_j++
<operator>.lessThan ReplacementFor_j<\012ReplacementFor_N
<operator>.postIncrement ReplacementFor_j++
<operator>.lessThan ReplacementFor_j<\012ReplacementFor_N
<operator>.postIncrement ReplacementFor_j++
<operator>.lessThan ReplacementFor_j<\012ReplacementFor_N
<operator>.postIncrement ReplacementFor_j++
<operator>.subtraction 0x7bd+6848-0x227c
<operator>.subtraction 0x5ec+8403-0x26bf
<operator>.assignment ReplacementFor_j=(0x232a+614-0x2590)
<operator>.assignment ReplacementFor_graph[i][ReplacementFor_j]=\012ReplacementFor_input[ReplacementFor_j]
<operator>.subtraction 0xc01+3613-0x1a1e
<operator>.subtraction 0x514+6348-0x1de0
<operator>.assignment ReplacementFor_j=(0x21cc+1013-0x25c1)
<operator>.subtraction 0x187+5941-0x18bc
<operator>.subtraction 0x632+6636-0x201e
<operator>.assignment ReplacementFor_j=(0x30d+7362-0x1fcf)
<operator>.subtraction 0x170f+2752-0x21cf
<operator>.subtraction 0x243+5679-0x1872
<operator>.assignment ReplacementFor_j=(0x4+4212-0x1078)
<operator>.addition 0x7bd+6848
<operator>.subtraction 0x12aa+1898-0x1a14
<operator>.addition 0.25*\012ReplacementFor_wp[i]+0.5*ReplacementFor_owp[i]+0.25*ReplacementFor_oowp[i]
<operator>.addition 0x5ec+8403
<operator>.addition 0xc01+3613
<operator>.addition 0x514+6348
<operator>.notEquals ReplacementFor_graph[i][ReplacementFor_j\012]!=((char)(0x203d+779-0x231a))
<operator>.addition 0x187+5941
<operator>.addition 0x632+6636
<operator>.notEquals ReplacementFor_graph[i][ReplacementFor_j\012]!=((char)(0x686+4326-0x173e))
<operator>.addition 0x170f+2752
<operator>.addition 0x243+5679
<operator>.notEquals ReplacementFor_graph[i][ReplacementFor_j\012]!=((char)(0x1055+2953-0x1bb0))
<operator>.addition 0x12aa+1898
<operator>.addition 0.25*\012ReplacementFor_wp[i]+0.5*ReplacementFor_owp[i]
<operator>.multiplication 0.25*ReplacementFor_oowp[i]
<operator>.subtraction 0x232a+614-0x2590
<operator>.subtraction 0x21cc+1013-0x25c1
<operator>.preIncrement ++ReplacementFor_cnt
<operator>.assignmentPlus ReplacementFor_wp[i]+=\012ReplacementFor_graph[i][ReplacementFor_j]==((char)(0x1e7d+678-0x20f2))
<operator>.subtraction 0x30d+7362-0x1fcf
<operator>.assignment ReplacementFor_wpj=0.0
<operator>.assignment ReplacementFor_cntj=(0x2ef+7999-0x222e)
<operator>.preIncrement ++ReplacementFor_cnt
<operator>.assignmentPlus ReplacementFor_owp[i]+=ReplacementFor_wpj/ReplacementFor_cntj
<operator>.subtraction 0x4+4212-0x1078
<operator>.preIncrement ++ReplacementFor_cnt
<operator>.assignmentPlus ReplacementFor_oowp[i]+=\012ReplacementFor_owp[ReplacementFor_j]
<operator>.multiplication 0.25*\012ReplacementFor_wp[i]
<operator>.multiplication 0.5*ReplacementFor_owp[i]
<operator>.addition 0x232a+614
<operator>.addition 0x21cc+1013
<operator>.cast (char)(0x203d+779-0x231a)
<operator>.addition 0x30d+7362
<operator>.cast (char)(0x686+4326-0x173e)
<operator>.lessThan ReplacementFor_k<ReplacementFor_N
<operator>.postIncrement ReplacementFor_k++
<operator>.addition 0x4+4212
<operator>.cast (char)(0x1055+2953-0x1bb0)
<operator>.subtraction 0x203d+779-0x231a
<operator>.equals ReplacementFor_graph[i][ReplacementFor_j]==((char)(0x1e7d+678-0x20f2))
<operator>.subtraction 0x686+4326-0x173e
<operator>.subtraction 0x2ef+7999-0x222e
<operator>.assignment ReplacementFor_k=\012(0x1b35+2430-0x24b3)
<operator>.division ReplacementFor_wpj/ReplacementFor_cntj
<operator>.subtraction 0x1055+2953-0x1bb0
<operator>.addition 0x203d+779
<operator>.cast (char)(0x1e7d+678-0x20f2)
<operator>.addition 0x686+4326
<operator>.addition 0x2ef+7999
<operator>.logicalAnd ReplacementFor_graph[ReplacementFor_j][ReplacementFor_k]!=\012((char)(0x12b6+3121-0x1eb9))&&ReplacementFor_k!=i
<operator>.addition 0x1055+2953
<operator>.subtraction 0x1e7d+678-0x20f2
<operator>.subtraction 0x1b35+2430-0x24b3
<operator>.assignmentPlus ReplacementFor_wpj+=\012ReplacementFor_graph[ReplacementFor_j][ReplacementFor_k]==\012((char)(0x1711+1920-0x1e60))
<operator>.preIncrement ++ReplacementFor_cntj
<operator>.addition 0x1e7d+678
<operator>.addition 0x1b35+2430
<operator>.notEquals ReplacementFor_graph[ReplacementFor_j][ReplacementFor_k]!=\012((char)(0x12b6+3121-0x1eb9))
<operator>.notEquals ReplacementFor_k!=i
<operator>.cast (char)(0x12b6+3121-0x1eb9)
<operator>.equals ReplacementFor_graph[ReplacementFor_j][ReplacementFor_k]==\012((char)(0x1711+1920-0x1e60))
<operator>.subtraction 0x12b6+3121-0x1eb9
<operator>.cast (char)(0x1711+1920-0x1e60)
<operator>.addition 0x12b6+3121
<operator>.subtraction 0x1711+1920-0x1e60
<operator>.addition 0x1711+1920
<operator>.addressOf &ReplacementFor_N
<operator>.indirectIndexAccess ReplacementFor_wp[i]
<operator>.indirectIndexAccess ReplacementFor_wp[i]
<operator>.indirectIndexAccess ReplacementFor_owp[i]
<operator>.indirectIndexAccess ReplacementFor_owp[i]
<operator>.indirectIndexAccess ReplacementFor_oowp[i]
<operator>.indirectIndexAccess ReplacementFor_oowp[i]
<operator>.indirectIndexAccess ReplacementFor_graph[i][ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_input[ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_oowp[i]
<operator>.indirectIndexAccess ReplacementFor_graph[i]
<operator>.indirectIndexAccess ReplacementFor_graph[i][ReplacementFor_j\012]
<operator>.indirectIndexAccess ReplacementFor_graph[i][ReplacementFor_j\012]
<operator>.indirectIndexAccess ReplacementFor_graph[i][ReplacementFor_j\012]
<operator>.indirectIndexAccess ReplacementFor_wp[i]
<operator>.indirectIndexAccess ReplacementFor_owp[i]
<operator>.indirectIndexAccess ReplacementFor_graph[i]
UNKNOWN char char
<operator>.indirectIndexAccess ReplacementFor_wp[i]
<operator>.indirectIndexAccess ReplacementFor_graph[i]
UNKNOWN char char
<operator>.indirectIndexAccess ReplacementFor_owp[i]
<operator>.indirectIndexAccess ReplacementFor_graph[i]
UNKNOWN char char
<operator>.indirectIndexAccess ReplacementFor_oowp[i]
<operator>.indirectIndexAccess ReplacementFor_owp[ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_graph[i][ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_graph[i]
UNKNOWN char char
<operator>.indirectIndexAccess ReplacementFor_graph[ReplacementFor_j][ReplacementFor_k]
<operator>.indirectIndexAccess ReplacementFor_graph[ReplacementFor_j]
UNKNOWN char char
<operator>.indirectIndexAccess ReplacementFor_graph[ReplacementFor_j][ReplacementFor_k]
<operator>.indirectIndexAccess ReplacementFor_graph[ReplacementFor_j]
UNKNOWN char char
>>>PDG&163 0->2 0->4 0->5 0->6 0->8 0->9 0->10 0->11 0->12 0->13 0->14 0->15 0->16 0->17 0->18 0->19 0->20 0->21 0->23 0->25 0->27 0->29 0->31 0->33 0->35 0->36 0->38 0->39 0->40 0->41 0->42 0->43 0->44 0->45 0->46 0->47 0->48 0->49 0->52 0->53 0->55 0->56 0->58 0->59 0->61 0->62 0->64 0->65 0->66 0->68 0->69 0->71 0->72 0->74 0->76 0->77 0->78 0->79 0->81 0->82 0->84 0->86 0->87 0->89 0->90 0->91 0->92 0->94 0->96 0->97 0->98 0->100 0->102 0->103 0->105 0->106 0->107 0->109 0->110 0->112 0->113 0->114 0->115 0->116 0->117 0->118 0->120 0->123 0->125 0->126 0->127 2->1 2->4 3->1 4->1 4->1 4->1 4->4 4->5 4->5 4->8 4->9 4->9 4->10 4->12 4->14 4->16 4->18 4->22 4->24 4->28 4->32 4->36 4->36 4->37 4->48 4->49 4->52 4->55 4->58 4->61 4->62 4->64 4->65 4->68 4->71 4->74 4->128 5->1 5->4 6->1 6->1 6->3 7->1 7->1 7->4 8->1 8->10 8->12 8->14 8->16 8->18 8->40 8->42 8->44 8->46 8->96 9->1 9->1 10->1 10->10 10->11 10->11 10->12 10->23 10->40 10->40 10->50 10->77 10->91 11->1 11->10 12->12 12->13 12->13 12->14 12->25 12->26 12->27 12->42 12->42 12->53 12->54 12->66 12->78 12->92 12->129 12->130 13->1 13->12 14->14 14->15 14->15 14->16 14->29 14->30 14->31 14->44 14->44 14->56 14->57 14->69 14->81 14->94 14->120 14->131 14->132 15->1 15->14 16->16 16->17 16->17 16->18 16->33 16->34 16->35 16->46 16->46 16->59 16->60 16->72 16->86 16->98 16->133 16->134 17->1 17->16 18->1 18->1 18->1 18->8 18->10 18->18 18->19 18->19 18->38 18->63 18->75 18->76 18->89 18->90 18->137 18->142 18->143 19->1 19->18 21->1 21->7 21->7 22->1 22->1 22->10 23->1 23->51 24->1 24->1 24->12 25->1 25->27 25->80 26->1 26->1 26->27 26->79 27->1 27->1 27->1 27->89 28->1 28->1 28->14 29->1 29->31 29->85 30->1 30->1 30->31 30->84 31->1 31->1 31->1 31->90 32->1 32->1 32->16 33->1 33->35 33->88 34->1 34->1 34->35 34->87 35->1 35->1 35->1 35->76 36->1 37->1 37->1 37->18 38->1 38->1 40->1 40->1 40->10 40->40 40->41 40->41 40->51 40->135 40->136 40->138 41->1 41->40 42->1 42->1 42->12 42->42 42->43 42->43 42->67 42->93 42->100 42->107 42->139 42->144 42->145 43->1 43->42 44->1 44->1 44->14 44->44 44->45 44->45 44->70 44->95 44->96 44->102 44->109 44->140 44->147 44->148 45->1 45->44 46->1 46->1 46->16 46->46 46->47 46->47 46->73 46->99 46->106 46->112 46->141 46->150 46->151 47->1 47->46 48->1 48->9 48->9 48->36 48->36 49->1 49->22 49->22 50->1 50->1 50->40 51->1 51->1 51->1 51->101 52->1 52->24 52->24 53->1 53->26 53->26 54->1 54->1 54->42 55->1 55->28 55->28 56->1 56->30 56->30 57->1 57->1 57->44 58->1 58->32 58->32 59->1 59->34 59->34 60->1 60->1 60->46 62->1 62->37 62->37 63->1 63->1 67->1 67->1 67->1 67->70 67->73 67->79 67->80 67->101 67->108 67->113 67->117 67->146 67->154 67->155 67->156 70->1 70->1 70->1 70->67 70->73 70->82 70->83 70->84 70->85 70->96 70->103 70->104 70->105 70->110 70->114 70->118 70->149 73->1 73->1 73->1 73->67 73->70 73->87 73->88 73->152 73->153 75->1 75->1 76->1 76->38 76->38 76->63 76->63 77->1 77->50 77->50 78->1 78->54 78->54 79->1 79->27 80->1 80->1 80->27 81->1 81->57 81->57 82->1 82->105 82->115 83->1 83->1 83->105 83->116 84->1 84->31 85->1 85->1 85->31 86->1 86->60 86->60 87->1 87->35 88->1 88->1 88->35 89->1 89->38 89->38 89->63 89->63 89->75 89->75 90->1 90->38 90->38 90->63 90->63 90->75 90->75 93->1 95->1 96->1 96->1 96->44 96->96 96->97 96->97 96->111 96->119 96->120 96->121 96->123 96->125 96->157 96->158 96->159 97->1 97->96 99->1 100->1 100->67 100->67 100->93 100->93 101->1 101->1 101->80 101->80 102->1 102->70 102->70 102->95 102->95 103->1 103->83 103->83 104->1 104->1 104->96 105->1 105->1 105->85 105->85 106->1 106->73 106->73 106->99 106->99 108->1 111->1 111->1 111->1 111->115 111->116 111->122 111->124 111->126 111->127 111->160 111->161 111->162 113->1 113->101 113->101 113->108 113->108 114->1 114->104 114->104 115->1 115->1 115->105 116->1 116->105 119->1 119->1 119->111 119->111 119->120 119->122 120->15 120->97 120->111 120->111 121->1 122->1 122->1 122->115 122->115 122->119 123->1 123->119 123->119 123->121 123->121 124->1 126->1 126->122 126->122 126->124 126->124
>>>Token int main ( ) { int ReplacementFor_Tcases ; scanf ( " \x25 \x64 " , & ReplacementFor_Tcases ) ; int ReplacementFor_cases ; for ( ReplacementFor_cases = ( 0x843 + 5822 - 0x1f01 ) ; ReplacementFor_cases < ReplacementFor_Tcases ; ReplacementFor_cases ++ ) { scanf ( " \x25 \x64 \x20 " , & ReplacementFor_N ) ; int i , ReplacementFor_j , ReplacementFor_k ; for ( i = ( 0x5ec + 8403 - 0x26bf ) ; i < ReplacementFor_N ; i ++ ) { scanf ( " \x25 \x73 " , ReplacementFor_input ) ; for ( ReplacementFor_j = ( 0x232a + 614 - 0x2590 ) ; ReplacementFor_j < ReplacementFor_N ; ReplacementFor_j ++ ) { ReplacementFor_graph [ i ] [ ReplacementFor_j ] = ReplacementFor_input [ ReplacementFor_j ] ; } } for ( i = ( 0xc01 + 3613 - 0x1a1e ) ; i < ReplacementFor_N ; i ++ ) { ReplacementFor_wp [ i ] = 0.0 ; int ReplacementFor_cnt = ( 0x514 + 6348 - 0x1de0 ) ; for ( ReplacementFor_j = ( 0x21cc + 1013 - 0x25c1 ) ; ReplacementFor_j < ReplacementFor_N ; ReplacementFor_j ++ ) { if ( ReplacementFor_graph [ i ] [ ReplacementFor_j ] != ( ( char ) ( 0x203d + 779 - 0x231a ) ) ) { ++ ReplacementFor_cnt ; ReplacementFor_wp [ i ] += ReplacementFor_graph [ i ] [ ReplacementFor_j ] == ( ( char ) ( 0x1e7d + 678 - 0x20f2 ) ) ; } } ReplacementFor_wp [ i ] /= ReplacementFor_cnt ; } for ( i = ( 0x187 + 5941 - 0x18bc ) ; i < ReplacementFor_N ; i ++ ) { ReplacementFor_owp [ i ] = 0.0 ; int ReplacementFor_cnt = ( 0x632 + 6636 - 0x201e ) ; for ( ReplacementFor_j = ( 0x30d + 7362 - 0x1fcf ) ; ReplacementFor_j < ReplacementFor_N ; ReplacementFor_j ++ ) { if ( ReplacementFor_graph [ i ] [ ReplacementFor_j ] != ( ( char ) ( 0x686 + 4326 - 0x173e ) ) ) { double ReplacementFor_wpj = 0.0 ; int ReplacementFor_cntj = ( 0x2ef + 7999 - 0x222e ) ; for ( ReplacementFor_k = ( 0x1b35 + 2430 - 0x24b3 ) ; ReplacementFor_k < ReplacementFor_N ; ReplacementFor_k ++ ) { if ( ReplacementFor_graph [ ReplacementFor_j ] [ ReplacementFor_k ] != ( ( char ) ( 0x12b6 + 3121 - 0x1eb9 ) ) && ReplacementFor_k != i ) { ReplacementFor_wpj += ReplacementFor_graph [ ReplacementFor_j ] [ ReplacementFor_k ] == ( ( char ) ( 0x1711 + 1920 - 0x1e60 ) ) ; ++ ReplacementFor_cntj ; } } ++ ReplacementFor_cnt ; ReplacementFor_owp [ i ] += ReplacementFor_wpj / ReplacementFor_cntj ; } } ReplacementFor_owp [ i ] /= ReplacementFor_cnt ; } for ( i = ( 0x170f + 2752 - 0x21cf ) ; i < ReplacementFor_N ; i ++ ) { ReplacementFor_oowp [ i ] = 0.0 ; int ReplacementFor_cnt = ( 0x243 + 5679 - 0x1872 ) ; for ( ReplacementFor_j = ( 0x4 + 4212 - 0x1078 ) ; ReplacementFor_j < ReplacementFor_N ; ReplacementFor_j ++ ) { if ( ReplacementFor_graph [ i ] [ ReplacementFor_j ] != ( ( char ) ( 0x1055 + 2953 - 0x1bb0 ) ) ) { ++ ReplacementFor_cnt ; ReplacementFor_oowp [ i ] += ReplacementFor_owp [ ReplacementFor_j ] ; } } ReplacementFor_oowp [ i ] /= ReplacementFor_cnt ; } printf ( " \x43 \x61 \x73 \x65 \x20 \x23 \x25 \x64 \x3a " " \n " , ReplacementFor_cases + ( 0x7bd + 6848 - 0x227c ) ) ; for ( i = ( 0x12aa + 1898 - 0x1a14 ) ; i < ReplacementFor_N ; i ++ ) { printf ( " \x25 \x2e \x31 \x30 \x6c \x66 " " \n " , 0.25 * ReplacementFor_wp [ i ] + 0.5 * ReplacementFor_owp [ i ] + 0.25 * ReplacementFor_oowp [ i ] ) ; } } return ( 0xf58 + 1249 - 0x1439 ) ; }
>>>Func
METHOD ReplacementFor_compare
METHOD_RETURN int
PARAM const void*ReplacementFor_a
PARAM const void*\012ReplacementFor_b
RETURN return(*(int*)ReplacementFor_a-*(int*)ReplacementFor_b); return(*(int*)ReplacementFor_a-*(int*)ReplacementFor_b);
<operator>.subtraction *(int*)ReplacementFor_a-*(int*)ReplacementFor_b
<operator>.cast (int*)ReplacementFor_a
<operator>.cast (int*)ReplacementFor_b
>>>PDG&8 0->2 0->3 0->6 0->7 2->6 3->7 4->1 5->1 5->1 5->1 5->4 6->1 7->1
>>>Token int ReplacementFor_compare ( const void * ReplacementFor_a , const void * ReplacementFor_b ) { return ( * ( int * ) ReplacementFor_a - * ( int * ) ReplacementFor_b ) ; }
>>>Func
METHOD ReplacementFor_min
METHOD_RETURN int
PARAM int ReplacementFor_a
PARAM int ReplacementFor_b
RETURN return((\012ReplacementFor_a<ReplacementFor_b)?ReplacementFor_a:ReplacementFor_b); return((\012ReplacementFor_a<ReplacementFor_b)?ReplacementFor_a:ReplacementFor_b);
<operator>.conditional (\012ReplacementFor_a<ReplacementFor_b)?ReplacementFor_a:ReplacementFor_b
<operator>.lessThan ReplacementFor_a<ReplacementFor_b
>>>PDG&7 0->2 0->3 0->5 0->6 2->6 3->6 4->1 5->1 5->1 5->1 5->1 5->4 6->5 6->5
>>>Token int ReplacementFor_min ( int ReplacementFor_a , int ReplacementFor_b ) { return ( ( ReplacementFor_a < ReplacementFor_b ) ? ReplacementFor_a : ReplacementFor_b ) ; }
>>>Func
METHOD ReplacementFor_checkOpp
METHOD_RETURN int
PARAM char ReplacementFor_a
PARAM char ReplacementFor_list[\012(0xae9+1819-0x119f)]
PARAM char ReplacementFor_oppList[(0x1c15+2004-0x23cd)][\012(0x1b45+1363-0x2096)]
PARAM int ReplacementFor_oppCnt
RETURN return(0x7b3+3055-0x13a2); return(0x7b3+3055-0x13a2);
<operator>.lessThan i<ReplacementFor_oppCnt
<operator>.postIncrement i++
<operator>.subtraction 0x7b3+3055-0x13a2
<operator>.assignment i=(0x5af+6814-0x204d)
<operator>.equals ReplacementFor_a==ReplacementFor_oppList[i][\012(0xdc6+2695-0x184d)]
<operator>.addition 0x7b3+3055
<operator>.subtraction 0x5af+6814-0x204d
<operator>.addition 0x5af+6814
<operator>.notEquals NULL!=strchr(ReplacementFor_list ReplacementFor_oppList\012[i][(0xf22+4926-0x225f)])
<operator>.subtraction 0xdc6+2695-0x184d
RETURN return(0xc8a+5203-0x20dc); return(0xc8a+5203-0x20dc);
<operator>.equals ReplacementFor_a\012==ReplacementFor_oppList[i][(0xa71+1174-0xf06)]
<operator>.addition 0xdc6+2695
strchr strchr(ReplacementFor_list ReplacementFor_oppList\012[i][(0xf22+4926-0x225f)])
<operator>.subtraction 0xc8a+5203-0x20dc
<operator>.notEquals NULL!=strchr(\012ReplacementFor_list ReplacementFor_oppList[i][(0xef7+2707-0x198a)])
<operator>.subtraction 0xf22+4926-0x225f
<operator>.addition 0xc8a+5203
<operator>.subtraction 0xa71+1174-0xf06
RETURN return\012(0x115+8941-0x2401); return\012(0x115+8941-0x2401);
<operator>.addition 0xf22+4926
<operator>.addition 0xa71+1174
strchr strchr(\012ReplacementFor_list ReplacementFor_oppList[i][(0xef7+2707-0x198a)])
<operator>.subtraction 0x115+8941-0x2401
<operator>.subtraction 0xef7+2707-0x198a
<operator>.addition 0x115+8941
<operator>.addition 0xef7+2707
<operator>.indirectIndexAccess ReplacementFor_oppList[i][\012(0xdc6+2695-0x184d)]
<operator>.indirectIndexAccess ReplacementFor_oppList[i]
<operator>.indirectIndexAccess ReplacementFor_oppList\012[i][(0xf22+4926-0x225f)]
<operator>.indirectIndexAccess ReplacementFor_oppList[i][(0xa71+1174-0xf06)]
<operator>.indirectIndexAccess ReplacementFor_oppList\012[i]
<operator>.indirectIndexAccess ReplacementFor_oppList[i]
<operator>.indirectIndexAccess ReplacementFor_oppList[i][(0xef7+2707-0x198a)]
<operator>.indirectIndexAccess ReplacementFor_oppList[i]
>>>PDG&42 0->2 0->3 0->4 0->5 0->7 0->8 0->9 0->11 0->12 0->13 0->14 0->15 0->16 0->18 0->19 0->20 0->21 0->22 0->23 0->24 0->25 0->27 0->28 0->29 0->30 0->31 0->32 0->33 2->11 3->20 3->29 4->1 5->7 6->1 7->1 7->1 7->1 7->6 7->8 7->9 7->11 7->12 7->16 7->19 7->34 7->35 8->1 8->7 9->6 10->1 10->1 10->7 11->1 11->1 11->1 11->15 11->18 11->18 11->20 11->23 11->25 11->27 11->28 11->36 11->37 11->38 11->39 13->1 13->10 13->10 15->1 15->1 15->1 15->7 15->8 15->17 15->21 15->22 15->24 16->1 17->1 18->1 18->1 18->7 18->8 18->11 18->22 18->29 18->31 18->33 18->40 18->41 20->1 20->1 20->15 20->15 20->29 21->1 21->1 21->17 22->1 22->1 22->7 22->8 22->15 22->26 22->30 22->32 23->1 25->1 26->1 29->1 29->20 29->22 29->22 30->26 31->1
>>>Token int ReplacementFor_checkOpp ( char ReplacementFor_a , char ReplacementFor_list [ ( 0xae9 + 1819 - 0x119f ) ] , char ReplacementFor_oppList [ ( 0x1c15 + 2004 - 0x23cd ) ] [ ( 0x1b45 + 1363 - 0x2096 ) ] , int ReplacementFor_oppCnt ) { int i ; for ( i = ( 0x5af + 6814 - 0x204d ) ; i < ReplacementFor_oppCnt ; i ++ ) { if ( ReplacementFor_a == ReplacementFor_oppList [ i ] [ ( 0xdc6 + 2695 - 0x184d ) ] ) { if ( NULL != strchr ( ReplacementFor_list , ReplacementFor_oppList [ i ] [ ( 0xf22 + 4926 - 0x225f ) ] ) ) { return ( 0xc8a + 5203 - 0x20dc ) ; } } else if ( ReplacementFor_a == ReplacementFor_oppList [ i ] [ ( 0xa71 + 1174 - 0xf06 ) ] ) { if ( NULL != strchr ( ReplacementFor_list , ReplacementFor_oppList [ i ] [ ( 0xef7 + 2707 - 0x198a ) ] ) ) { return ( 0x115 + 8941 - 0x2401 ) ; } } } return ( 0x7b3 + 3055 - 0x13a2 ) ; }
>>>Func
METHOD ReplacementFor_find
METHOD_RETURN int
PARAM const char*s
<operator>.lessThan i<\012ReplacementFor_search
<operator>.postIncrement i++
<operator>.subtraction 0x19a5+976-0x1d74
printf printf("\x45\x52\x52\x4f\x52" "\n")
<operator>.assignment i=(0x181+6948-0x1ca5)
<operator>.equals strcmp(s,name[i])==(0x122b+4584-0x2413)
RETURN return i; return i;
<operator>.addition 0x19a5+976
<operator>.subtraction 0x181+6948-0x1ca5
strcmp strcmp(s,name[i])
<operator>.subtraction 0x122b+4584-0x2413
IDENTIFIER i return i;
<operator>.addition 0x181+6948
<operator>.addition 0x122b+4584
<operator>.indirectIndexAccess name[i]
>>>PDG&18 0->2 0->3 0->4 0->5 0->6 0->10 0->11 0->12 0->13 0->14 0->15 0->16 2->12 3->1 3->1 3->1 3->4 3->5 3->8 3->10 3->12 3->13 3->14 3->16 3->17 4->1 4->3 5->5 5->6 5->10 7->1 7->1 7->3 8->1 8->1 8->1 8->3 8->4 8->9 9->1 11->1 11->7 11->7 12->1 12->1 12->8 12->8 13->1 13->8 13->8 14->9
>>>Token int ReplacementFor_find ( const char * s ) { int i ; for ( i = ( 0x181 + 6948 - 0x1ca5 ) ; i < ReplacementFor_search ; i ++ ) if ( strcmp ( s , name [ i ] ) == ( 0x122b + 4584 - 0x2413 ) ) return i ; while ( ( 0x19a5 + 976 - 0x1d74 ) ) printf ( " \x45 \x52 \x52 \x4f \x52 " " \n " ) ; }
>>>Func
METHOD ReplacementFor_denom
METHOD_RETURN int
PARAM int ReplacementFor_P_d
<operator>.assignment ReplacementFor_j=\012(0x1174+301-0x123d)
RETURN return ReplacementFor_j; return ReplacementFor_j;
<operator>.lessThan i<(0x1212+4043-0x21db)
<operator>.postIncrement i++
<operator>.lessThan i<(0xee9+3761-0x1d98)
<operator>.postIncrement i++
IDENTIFIER ReplacementFor_j return ReplacementFor_j;
<operator>.subtraction 0x1174+301-0x123d
<operator>.assignment i=(0x18d+5638-0x1793)
<operator>.equals ReplacementFor_P_d%(0xc91+691-0xf42)==(0x452+3457-0x11d3)
<operator>.assignment i=\012(0x1d8+5241-0x1651)
<operator>.equals ReplacementFor_P_d%\012(0x451+3003-0x1007)==(0x652+700-0x90e)
<operator>.addition 0x1174+301
<operator>.subtraction 0x1212+4043-0x21db
<operator>.assignmentDivision ReplacementFor_j/=\012(0xb45+120-0xbbb)
<operator>.assignmentDivision ReplacementFor_P_d/=(0x949+4086-0x193d)
<operator>.subtraction 0xee9+3761-0x1d98
<operator>.assignmentDivision ReplacementFor_j/=(0x12d0+315-0x1406)
<operator>.assignmentDivision ReplacementFor_P_d/=(0x6a8+585-0x8ec)
<operator>.subtraction 0x18d+5638-0x1793
<operator>.addition 0x1212+4043
<operator>.modulo ReplacementFor_P_d%(0xc91+691-0xf42)
<operator>.subtraction 0x452+3457-0x11d3
<operator>.subtraction 0x1d8+5241-0x1651
<operator>.addition 0xee9+3761
<operator>.modulo ReplacementFor_P_d%\012(0x451+3003-0x1007)
<operator>.subtraction 0x652+700-0x90e
<operator>.addition 0x18d+5638
<operator>.subtraction 0xc91+691-0xf42
<operator>.addition 0x452+3457
<operator>.subtraction 0xb45+120-0xbbb
<operator>.subtraction 0x949+4086-0x193d
<operator>.addition 0x1d8+5241
<operator>.subtraction 0x451+3003-0x1007
<operator>.addition 0x652+700
<operator>.subtraction 0x12d0+315-0x1406
<operator>.subtraction 0x6a8+585-0x8ec
<operator>.addition 0xc91+691
<operator>.addition 0xb45+120
<operator>.addition 0x949+4086
<operator>.addition 0x451+3003
<operator>.addition 0x12d0+315
<operator>.addition 0x6a8+585
>>>PDG&46 0->2 0->5 0->6 0->7 0->8 0->9 0->10 0->15 0->16 0->17 0->18 0->19 0->20 0->21 0->22 0->23 0->24 0->25 0->26 0->27 0->28 0->29 0->30 0->31 0->32 0->33 0->34 0->35 0->36 0->37 0->38 0->39 0->40 0->41 0->42 0->43 0->44 0->45 2->1 2->24 2->28 3->1 3->1 3->1 3->9 3->17 3->20 4->1 5->1 5->1 5->5 5->6 5->6 5->12 5->16 5->23 5->24 5->25 5->31 5->32 5->40 6->1 6->5 7->1 7->1 7->1 7->7 7->8 7->8 7->14 7->19 7->27 7->28 7->29 7->36 7->37 7->43 8->1 8->7 9->4 10->1 10->3 10->3 11->1 11->1 11->5 12->1 12->1 12->1 12->17 12->18 12->33 12->34 12->41 12->42 13->1 13->1 13->7 14->1 14->1 14->1 14->20 14->21 14->38 14->39 14->44 14->45 16->1 16->5 16->5 17->1 17->1 17->1 17->9 17->20 18->1 18->1 18->1 18->24 18->28 19->1 19->7 19->7 20->1 20->1 20->1 20->9 21->1 21->1 21->1 21->28 22->1 22->11 22->11 24->1 24->1 24->12 24->12 24->18 24->28 25->1 25->12 25->12 26->1 26->13 26->13 28->1 28->1 28->14 28->14 28->21 29->1 29->14 29->14 31->1 31->24 31->24 33->1 33->17 33->17 34->1 34->18 34->18 36->1 36->28 36->28 38->1 38->20 38->20 39->1 39->21 39->21
>>>Token int ReplacementFor_denom ( int ReplacementFor_P_d ) { int i , ReplacementFor_j = ( 0x1174 + 301 - 0x123d ) ; for ( i = ( 0x18d + 5638 - 0x1793 ) ; i < ( 0x1212 + 4043 - 0x21db ) ; i ++ ) if ( ReplacementFor_P_d % ( 0xc91 + 691 - 0xf42 ) == ( 0x452 + 3457 - 0x11d3 ) ) { ReplacementFor_j /= ( 0xb45 + 120 - 0xbbb ) ; ReplacementFor_P_d /= ( 0x949 + 4086 - 0x193d ) ; } for ( i = ( 0x1d8 + 5241 - 0x1651 ) ; i < ( 0xee9 + 3761 - 0x1d98 ) ; i ++ ) if ( ReplacementFor_P_d % ( 0x451 + 3003 - 0x1007 ) == ( 0x652 + 700 - 0x90e ) ) { ReplacementFor_j /= ( 0x12d0 + 315 - 0x1406 ) ; ReplacementFor_P_d /= ( 0x6a8 + 585 - 0x8ec ) ; } return ReplacementFor_j ; }
>>>Func
METHOD ReplacementFor_samedir_template
METHOD_RETURN char*
PARAM char const*ReplacementFor_dstname
PARAM char buf[ReplacementFor_smallsize]
<operator>.assignment ReplacementFor_dstdirlen=\012ReplacementFor_last_component(ReplacementFor_dstname)-ReplacementFor_dstname
<operator>.assignment ReplacementFor_dsttmpsize=ReplacementFor_dstdirlen+sizeof \012ReplacementFor_simple_pattern
strcpy strcpy(\012ReplacementFor_mempcpy(ReplacementFor_dsttmp,ReplacementFor_dstname,\012ReplacementFor_dstdirlen),ReplacementFor_simple_pattern)
RETURN return \012ReplacementFor_dsttmp; return \012ReplacementFor_dsttmp;
<operator>.lessEqualsThan ReplacementFor_dsttmpsize<=ReplacementFor_smallsize
IDENTIFIER ReplacementFor_dsttmp return \012ReplacementFor_dsttmp;
<operator>.subtraction ReplacementFor_last_component(ReplacementFor_dstname)-ReplacementFor_dstname
<operator>.addition ReplacementFor_dstdirlen+sizeof \012ReplacementFor_simple_pattern
<operator>.assignment ReplacementFor_dsttmp=buf
ReplacementFor_mempcpy ReplacementFor_mempcpy(ReplacementFor_dsttmp,ReplacementFor_dstname,\012ReplacementFor_dstdirlen)
ReplacementFor_last_component ReplacementFor_last_component(ReplacementFor_dstname)
<operator>.sizeOf sizeof \012ReplacementFor_simple_pattern
<operator>.assignment ReplacementFor_dsttmp=malloc(ReplacementFor_dsttmpsize)
<operator>.logicalNot !\012ReplacementFor_dsttmp
malloc malloc(ReplacementFor_dsttmpsize)
RETURN return ReplacementFor_dsttmp; return ReplacementFor_dsttmp;
IDENTIFIER ReplacementFor_dsttmp return ReplacementFor_dsttmp;
>>>PDG&21 0->2 0->3 0->5 0->6 0->8 0->9 0->10 0->11 0->12 0->13 0->14 0->17 0->18 0->20 2->14 3->1 3->12 4->1 4->1 4->5 4->11 4->13 5->1 5->1 5->8 7->1 8->1 8->1 8->6 8->7 8->12 8->13 8->16 8->17 8->18 8->18 9->7 10->1 10->1 10->4 10->4 10->13 11->1 12->13 13->6 13->6 13->6 13->9 14->10 15->1 16->1 16->1 16->17 17->1 17->1 17->6 17->7 17->13 17->13 17->19 17->20 18->1 18->16 19->1 20->19
>>>Token static char * ReplacementFor_samedir_template ( char const * ReplacementFor_dstname , char buf [ ReplacementFor_smallsize ] ) { ptrdiff_t ReplacementFor_dstdirlen = ReplacementFor_last_component ( ReplacementFor_dstname ) - ReplacementFor_dstname ; size_t ReplacementFor_dsttmpsize = ReplacementFor_dstdirlen + sizeof ReplacementFor_simple_pattern ; char * ReplacementFor_dsttmp ; if ( ReplacementFor_dsttmpsize <= ReplacementFor_smallsize ) ReplacementFor_dsttmp = buf ; else { ReplacementFor_dsttmp = malloc ( ReplacementFor_dsttmpsize ) ; if ( ! ReplacementFor_dsttmp ) return ReplacementFor_dsttmp ; } strcpy ( ReplacementFor_mempcpy ( ReplacementFor_dsttmp , ReplacementFor_dstname , ReplacementFor_dstdirlen ) , ReplacementFor_simple_pattern ) ; return ReplacementFor_dsttmp ; }
>>>Func
METHOD ReplacementFor_nod
METHOD_RETURN int
PARAM int ReplacementFor_a
PARAM int ReplacementFor_b
RETURN return ReplacementFor_nod(ReplacementFor_b \012abs(ReplacementFor_a-ReplacementFor_b)); return ReplacementFor_nod(ReplacementFor_b \012abs(ReplacementFor_a-ReplacementFor_b));
<operator>.logicalOr ReplacementFor_a==(0x4e1+7068-0x207d)||ReplacementFor_b==(0x1134+3617-0x1f55)
<operator>.logicalAnd ReplacementFor_a%\012(0x287+4342-0x137b)==(0x1f8f+588-0x21db)&&ReplacementFor_b%(0x187+3527-0xf4c)==\012(0x22a+5276-0x16c6)
<operator>.logicalAnd ReplacementFor_a%(0xa43+5554-0x1ff3)==(0xf7b+5804-0x2627)&&ReplacementFor_b%\012(0x4bd+5392-0x19cb)==(0x63b+3451-0x13b5)
<operator>.logicalAnd ReplacementFor_a%\012(0x717+2682-0x118f)==(0xe61+1329-0x1391)&&ReplacementFor_b%(0x1fe5+1040-0x23f3)\012==(0x361+4200-0x13c9)
ReplacementFor_nod ReplacementFor_nod(ReplacementFor_b \012abs(ReplacementFor_a-ReplacementFor_b))
RETURN return ReplacementFor_a+ReplacementFor_b; return ReplacementFor_a+ReplacementFor_b;
RETURN return(0x1ac1+725-0x1d94)*ReplacementFor_nod(\012ReplacementFor_a/(0x33f+4384-0x145d) ReplacementFor_b/(0xbcc+4574-0x1da8)); return(0x1ac1+725-0x1d94)*ReplacementFor_nod(\012ReplacementFor_a/(0x33f+4384-0x145d) ReplacementFor_b/(0xbcc+4574-0x1da8));
RETURN return ReplacementFor_nod(\012ReplacementFor_a/(0x2129+211-0x21fa),ReplacementFor_b); return ReplacementFor_nod(\012ReplacementFor_a/(0x2129+211-0x21fa),ReplacementFor_b);
RETURN return ReplacementFor_nod(ReplacementFor_a \012ReplacementFor_b/(0x184+138-0x20c)); return ReplacementFor_nod(ReplacementFor_a \012ReplacementFor_b/(0x184+138-0x20c));
<operator>.equals ReplacementFor_a==(0x4e1+7068-0x207d)
<operator>.equals ReplacementFor_b==(0x1134+3617-0x1f55)
<operator>.addition ReplacementFor_a+ReplacementFor_b
<operator>.equals ReplacementFor_a%\012(0x287+4342-0x137b)==(0x1f8f+588-0x21db)
<operator>.equals ReplacementFor_b%(0x187+3527-0xf4c)==\012(0x22a+5276-0x16c6)
<operator>.multiplication (0x1ac1+725-0x1d94)*ReplacementFor_nod(\012ReplacementFor_a/(0x33f+4384-0x145d) ReplacementFor_b/(0xbcc+4574-0x1da8))
<operator>.equals ReplacementFor_a%(0xa43+5554-0x1ff3)==(0xf7b+5804-0x2627)
<operator>.equals ReplacementFor_b%\012(0x4bd+5392-0x19cb)==(0x63b+3451-0x13b5)
ReplacementFor_nod ReplacementFor_nod(\012ReplacementFor_a/(0x2129+211-0x21fa),ReplacementFor_b)
<operator>.equals ReplacementFor_a%\012(0x717+2682-0x118f)==(0xe61+1329-0x1391)
<operator>.equals ReplacementFor_b%(0x1fe5+1040-0x23f3)\012==(0x361+4200-0x13c9)
ReplacementFor_nod ReplacementFor_nod(ReplacementFor_a \012ReplacementFor_b/(0x184+138-0x20c))
abs abs(ReplacementFor_a-ReplacementFor_b)
<operator>.subtraction 0x4e1+7068-0x207d
<operator>.subtraction 0x1134+3617-0x1f55
<operator>.modulo ReplacementFor_a%\012(0x287+4342-0x137b)
<operator>.subtraction 0x1f8f+588-0x21db
<operator>.modulo ReplacementFor_b%(0x187+3527-0xf4c)
<operator>.subtraction 0x22a+5276-0x16c6
<operator>.modulo ReplacementFor_a%(0xa43+5554-0x1ff3)
<operator>.subtraction 0xf7b+5804-0x2627
<operator>.modulo ReplacementFor_b%\012(0x4bd+5392-0x19cb)
<operator>.subtraction 0x63b+3451-0x13b5
<operator>.modulo ReplacementFor_a%\012(0x717+2682-0x118f)
<operator>.subtraction 0xe61+1329-0x1391
<operator>.modulo ReplacementFor_b%(0x1fe5+1040-0x23f3)
<operator>.subtraction 0x361+4200-0x13c9
<operator>.subtraction ReplacementFor_a-ReplacementFor_b
<operator>.addition 0x4e1+7068
<operator>.addition 0x1134+3617
<operator>.subtraction 0x287+4342-0x137b
<operator>.addition 0x1f8f+588
<operator>.subtraction 0x187+3527-0xf4c
<operator>.addition 0x22a+5276
<operator>.subtraction 0x1ac1+725-0x1d94
ReplacementFor_nod ReplacementFor_nod(\012ReplacementFor_a/(0x33f+4384-0x145d) ReplacementFor_b/(0xbcc+4574-0x1da8))
<operator>.subtraction 0xa43+5554-0x1ff3
<operator>.addition 0xf7b+5804
<operator>.subtraction 0x4bd+5392-0x19cb
<operator>.addition 0x63b+3451
<operator>.division ReplacementFor_a/(0x2129+211-0x21fa)
<operator>.subtraction 0x717+2682-0x118f
<operator>.addition 0xe61+1329
<operator>.subtraction 0x1fe5+1040-0x23f3
<operator>.addition 0x361+4200
<operator>.division ReplacementFor_b/(0x184+138-0x20c)
<operator>.addition 0x287+4342
<operator>.addition 0x187+3527
<operator>.addition 0x1ac1+725
<operator>.division ReplacementFor_a/(0x33f+4384-0x145d)
<operator>.division ReplacementFor_b/(0xbcc+4574-0x1da8)
<operator>.addition 0xa43+5554
<operator>.addition 0x4bd+5392
<operator>.subtraction 0x2129+211-0x21fa
<operator>.addition 0x717+2682
<operator>.addition 0x1fe5+1040
<operator>.subtraction 0x184+138-0x20c
<operator>.subtraction 0x33f+4384-0x145d
<operator>.subtraction 0xbcc+4574-0x1da8
<operator>.addition 0x2129+211
<operator>.addition 0x184+138
<operator>.addition 0x33f+4384
<operator>.addition 0xbcc+4574
>>>PDG&77 0->2 0->3 0->9 0->14 0->15 0->16 0->22 0->25 0->27 0->28 0->29 0->30 0->31 0->32 0->33 0->34 0->35 0->36 0->37 0->38 0->39 0->40 0->41 0->42 0->43 0->44 0->45 0->46 0->47 0->48 0->50 0->51 0->52 0->53 0->54 0->55 0->56 0->57 0->58 0->59 0->60 0->61 0->62 0->63 0->64 0->65 0->66 0->67 0->68 0->69 0->70 0->71 0->72 0->73 0->74 0->75 0->76 2->14 3->15 3->16 3->22 3->31 3->35 3->39 3->41 3->59 3->64 4->1 5->1 5->1 5->1 5->6 5->10 5->16 5->17 5->29 5->30 5->44 5->45 5->60 6->7 6->11 6->19 6->20 6->33 6->34 6->48 6->49 6->50 6->51 6->62 6->63 6->64 6->65 6->71 6->72 6->75 6->76 7->8 7->12 7->22 7->23 7->37 7->38 7->54 7->55 7->56 7->67 7->68 7->73 8->4 8->9 8->13 8->25 8->26 8->41 8->59 8->70 8->74 9->4 10->1 11->1 12->1 13->1 14->1 14->5 14->5 14->15 14->16 14->28 14->29 14->43 15->1 15->5 15->5 15->16 15->22 15->31 15->35 15->39 15->41 15->59 15->64 16->1 16->1 16->1 16->10 17->6 17->6 17->18 17->31 17->32 17->46 17->47 17->61 18->6 18->6 19->11 20->7 20->7 20->21 20->35 20->36 20->52 20->53 20->66 21->7 21->7 22->12 23->8 23->8 23->24 23->39 23->40 23->57 23->58 23->69 24->8 24->8 25->13 26->9 27->1 27->14 27->14 28->1 28->15 28->15 29->17 29->17 29->33 29->63 30->17 30->17 31->18 31->18 31->22 31->35 31->39 31->41 31->59 31->64 32->18 32->18 33->20 33->20 33->37 33->54 34->20 34->20 35->21 35->21 35->22 35->39 35->41 35->59 36->21 36->21 37->23 37->23 37->25 37->41 38->23 38->23 39->24 39->24 39->41 39->59 40->24 40->24 41->9 41->26 41->26 44->29 44->29 46->31 46->31 48->19 48->19 49->19 49->19 50->33 50->33 52->35 52->35 54->22 54->22 55->37 55->37 57->39 57->39 59->25 59->25 63->49 63->49 64->49 64->49 67->54 67->54 70->59 70->59 71->63 71->63 72->64 72->64
>>>Token int ReplacementFor_nod ( int ReplacementFor_a , int ReplacementFor_b ) { if ( ReplacementFor_a == ( 0x4e1 + 7068 - 0x207d ) || ReplacementFor_b == ( 0x1134 + 3617 - 0x1f55 ) ) { return ReplacementFor_a + ReplacementFor_b ; } if ( ReplacementFor_a % ( 0x287 + 4342 - 0x137b ) == ( 0x1f8f + 588 - 0x21db ) && ReplacementFor_b % ( 0x187 + 3527 - 0xf4c ) == ( 0x22a + 5276 - 0x16c6 ) ) { return ( 0x1ac1 + 725 - 0x1d94 ) * ReplacementFor_nod ( ReplacementFor_a / ( 0x33f + 4384 - 0x145d ) , ReplacementFor_b / ( 0xbcc + 4574 - 0x1da8 ) ) ; } if ( ReplacementFor_a % ( 0xa43 + 5554 - 0x1ff3 ) == ( 0xf7b + 5804 - 0x2627 ) && ReplacementFor_b % ( 0x4bd + 5392 - 0x19cb ) == ( 0x63b + 3451 - 0x13b5 ) ) { return ReplacementFor_nod ( ReplacementFor_a / ( 0x2129 + 211 - 0x21fa ) , ReplacementFor_b ) ; } if ( ReplacementFor_a % ( 0x717 + 2682 - 0x118f ) == ( 0xe61 + 1329 - 0x1391 ) && ReplacementFor_b % ( 0x1fe5 + 1040 - 0x23f3 ) == ( 0x361 + 4200 - 0x13c9 ) ) { return ReplacementFor_nod ( ReplacementFor_a , ReplacementFor_b / ( 0x184 + 138 - 0x20c ) ) ; } return ReplacementFor_nod ( ReplacementFor_b , abs ( ReplacementFor_a - ReplacementFor_b ) ) ; }
>>>Func
METHOD ReplacementFor_clearElementsSoFar
METHOD_RETURN void
PARAM int*ReplacementFor_elementsSoFar
<operator>.lessThan i<ReplacementFor_BASE_ELEMENTS
<operator>.postIncrement i++
<operator>.assignment i=(0x248+6833-0x1cf9)
<operator>.assignment ReplacementFor_elementsSoFar[i]=(0x636+2370-0xf78)
<operator>.subtraction 0x248+6833-0x1cf9
<operator>.subtraction 0x636+2370-0xf78
<operator>.addition 0x248+6833
<operator>.addition 0x636+2370
<operator>.indirectIndexAccess ReplacementFor_elementsSoFar[i]
>>>PDG&12 0->2 0->3 0->4 0->7 0->8 0->9 0->10 2->1 3->1 3->1 3->1 3->3 3->4 3->4 3->6 3->8 3->10 3->11 4->1 4->3 5->1 5->1 5->3 7->1 7->5 7->5 8->6 8->6
>>>Token void ReplacementFor_clearElementsSoFar ( int * ReplacementFor_elementsSoFar ) { int i ; for ( i = ( 0x248 + 6833 - 0x1cf9 ) ; i < ReplacementFor_BASE_ELEMENTS ; i ++ ) { ReplacementFor_elementsSoFar [ i ] = ( 0x636 + 2370 - 0xf78 ) ; } }
>>>Func
METHOD ReplacementFor_run_tests
METHOD_RETURN void
PARAM ReplacementFor_UnitTestFunction*\012ReplacementFor_tests
<operator>.notEquals ReplacementFor_tests[i]!=\012NULL
<operator>.preIncrement ++i
<operator>.assignment i=(0x1d54+2086-0x257a)
ReplacementFor_run_test ReplacementFor_run_test(ReplacementFor_tests[i])
<operator>.subtraction 0x1d54+2086-0x257a
<operator>.addition 0x1d54+2086
<operator>.indirectIndexAccess ReplacementFor_tests[i]
<operator>.indirectIndexAccess ReplacementFor_tests[i]
>>>PDG&11 0->2 0->3 0->4 0->7 0->8 2->1 2->3 2->6 3->1 3->1 3->1 3->3 3->4 3->6 3->6 3->9 3->10 4->1 4->1 5->1 5->1 5->1 5->4 6->3 7->1 7->5 7->5
>>>Token void ReplacementFor_run_tests ( ReplacementFor_UnitTestFunction * ReplacementFor_tests ) { int i ; for ( i = ( 0x1d54 + 2086 - 0x257a ) ; ReplacementFor_tests [ i ] != NULL ; ++ i ) { ReplacementFor_run_test ( ReplacementFor_tests [ i ] ) ; } }
>>>Func
METHOD main
METHOD_RETURN int
PARAM int ReplacementFor_argc
PARAM char**ReplacementFor_argv
PARAM char**\012ReplacementFor_envp
<operator>.assignment ReplacementFor_File=open(ReplacementFor_argv[\012(0x194+221-0x270)],O_RDONLY)
<operator>.assignment ReplacementFor_Size=lseek(\012ReplacementFor_File (0x355+8111-0x2304),SEEK_END)
<operator>.assignment *\012ReplacementFor_Mem=malloc(ReplacementFor_Size)
lseek lseek(ReplacementFor_File \012(0x1c5a+2658-0x26bc),SEEK_SET)
read read(ReplacementFor_File,ReplacementFor_Mem,\012ReplacementFor_Size)
close close(ReplacementFor_File)
<operator>.assignment ReplacementFor_x=\012(0xcf6+3696-0x1b66)
<operator>.assignment ReplacementFor_Cases=atoi(ReplacementFor_Mem)
<operator>.assignment ReplacementFor_x=strlen(ReplacementFor_Mem)+(0x7f4+1188-0xc97)
fprintf fprintf(stderr,\012"\x43\x61\x73\x65\x73\x3a\x20\x25\x75" "\n",ReplacementFor_Cases)
<operator>.assignment ReplacementFor_GlobalDumbMS=malloc(sizeof(ReplacementFor_MSStruct)*\012ReplacementFor_MS_Biggest)
<operator>.assignment *\012ReplacementFor_Poo=malloc(sizeof(ReplacementFor_MSStruct)*(0xa08+8264-0x2666))
<operator>.assignment ReplacementFor_Case_T=(0x946+7488-0x2686)
RETURN return(0x211c+1445-0x26c1); return(0x211c+1445-0x26c1);
<operator>.lessThan ReplacementFor_x<ReplacementFor_Size
<operator>.lessThan ReplacementFor_Case_T<ReplacementFor_Cases
<operator>.subtraction 0x211c+1445-0x26c1
open open(ReplacementFor_argv[\012(0x194+221-0x270)],O_RDONLY)
lseek lseek(\012ReplacementFor_File (0x355+8111-0x2304),SEEK_END)
malloc malloc(ReplacementFor_Size)
<operator>.subtraction 0x1c5a+2658-0x26bc
<operator>.subtraction 0xcf6+3696-0x1b66
<operator>.postIncrement ReplacementFor_x++
atoi atoi(ReplacementFor_Mem)
<operator>.addition strlen(ReplacementFor_Mem)+(0x7f4+1188-0xc97)
malloc malloc(sizeof(ReplacementFor_MSStruct)*\012ReplacementFor_MS_Biggest)
malloc malloc(sizeof(ReplacementFor_MSStruct)*(0xa08+8264-0x2666))
<operator>.subtraction 0x946+7488-0x2686
<operator>.assignment ReplacementFor_X=\012ReplacementFor_atoll(ReplacementFor_Mem+ReplacementFor_x)
<operator>.assignmentPlus ReplacementFor_x+=(\012strlen(ReplacementFor_Mem+ReplacementFor_x)+(0x12b3+670-0x1550))
<operator>.assignment S=\012ReplacementFor_atoll(ReplacementFor_Mem+ReplacementFor_x)
<operator>.assignmentPlus ReplacementFor_x+=(\012strlen(ReplacementFor_Mem+ReplacementFor_x)+(0x753+857-0xaab))
<operator>.assignment ReplacementFor_R=\012ReplacementFor_atoll(ReplacementFor_Mem+ReplacementFor_x)
<operator>.assignmentPlus ReplacementFor_x+=(\012strlen(ReplacementFor_Mem+ReplacementFor_x)+(0x7b9+1157-0xc3d))
<operator>.assignment t=\012ReplacementFor_atoll(ReplacementFor_Mem+ReplacementFor_x)
<operator>.assignmentPlus ReplacementFor_x+=(\012strlen(ReplacementFor_Mem+ReplacementFor_x)+(0x276+7680-0x2075))
<operator>.assignment ReplacementFor_N=ReplacementFor_atoll(ReplacementFor_Mem+ReplacementFor_x)
<operator>.assignmentPlus ReplacementFor_x+=(strlen(ReplacementFor_Mem+ReplacementFor_x)+\012(0x1d32+389-0x1eb6))
<operator>.assignment ReplacementFor_temp=(0x813+5142-0x1c29)
<operator>.assignment ReplacementFor_qx=\012(0xe75+3036-0x1a51)
<operator>.assignment ReplacementFor_Poo[\012ReplacementFor_N].l=ReplacementFor_X-ReplacementFor_temp
<operator>.assignment ReplacementFor_Poo[\012ReplacementFor_N].s=S
<operator>.assignment ReplacementFor_bonus=ReplacementFor_R-S
ReplacementFor_ms ReplacementFor_ms(\012ReplacementFor_Poo (ReplacementFor_N+(0xac3+6746-0x251c)))
<operator>.assignment ReplacementFor_dtemp=\012((double)t)
<operator>.assignment ReplacementFor_qx=(0xb4a+2140-0x13a6)
<operator>.assignment ReplacementFor_Answer=0.0
<operator>.assignment ReplacementFor_qx=(0x1227+2697-0x1cb0)
printf printf(\012"\x43\x61\x73\x65\x20\x23\x25\x75\x3a\x20\x25\x6c\x66" "\n" \012ReplacementFor_Case_T+(0xde6+5391-0x22f4),ReplacementFor_Answer)
<operator>.postIncrement ReplacementFor_Case_T++
<operator>.subtraction 0x355+8111-0x2304
<operator>.addition 0x1c5a+2658
<operator>.addition 0xcf6+3696
<operator>.equals ReplacementFor_Mem[ReplacementFor_x]==(0x5c3+4044-0x1585)
<operator>.equals ReplacementFor_Mem[ReplacementFor_x]==\012(0x7b7+634-0xa11)
strlen strlen(ReplacementFor_Mem)
<operator>.subtraction 0x7f4+1188-0xc97
<operator>.multiplication sizeof(ReplacementFor_MSStruct)*\012ReplacementFor_MS_Biggest
<operator>.multiplication sizeof(ReplacementFor_MSStruct)*(0xa08+8264-0x2666)
<operator>.addition 0x946+7488
<operator>.lessThan ReplacementFor_qx<ReplacementFor_N
<operator>.lessThan ReplacementFor_qx<(\012ReplacementFor_N+(0x258+3966-0x11d5))
<operator>.equals ReplacementFor_qx==(\012ReplacementFor_N+(0x188+1784-0x87f))
<operator>.lessThan ReplacementFor_qx<(ReplacementFor_N\012+(0xdb2+1765-0x1495))
<operator>.addition 0x211c+1445
<operator>.subtraction 0x194+221-0x270
<operator>.addition 0x355+8111
<operator>.assignment ReplacementFor_Mem[\012ReplacementFor_x]=(0x600+3961-0x1579)
<operator>.assignment ReplacementFor_Mem[ReplacementFor_x]=(0x15ef+1755-0x1cca)
<operator>.addition 0x7f4+1188
<operator>.sizeOf sizeof(ReplacementFor_MSStruct)
<operator>.subtraction 0xa08+8264-0x2666
ReplacementFor_atoll ReplacementFor_atoll(ReplacementFor_Mem+ReplacementFor_x)
<operator>.addition strlen(ReplacementFor_Mem+ReplacementFor_x)+(0x12b3+670-0x1550)
ReplacementFor_atoll ReplacementFor_atoll(ReplacementFor_Mem+ReplacementFor_x)
<operator>.addition strlen(ReplacementFor_Mem+ReplacementFor_x)+(0x753+857-0xaab)
ReplacementFor_atoll ReplacementFor_atoll(ReplacementFor_Mem+ReplacementFor_x)
<operator>.addition strlen(ReplacementFor_Mem+ReplacementFor_x)+(0x7b9+1157-0xc3d)
ReplacementFor_atoll ReplacementFor_atoll(ReplacementFor_Mem+ReplacementFor_x)
<operator>.addition strlen(ReplacementFor_Mem+ReplacementFor_x)+(0x276+7680-0x2075)
ReplacementFor_atoll ReplacementFor_atoll(ReplacementFor_Mem+ReplacementFor_x)
<operator>.addition strlen(ReplacementFor_Mem+ReplacementFor_x)+\012(0x1d32+389-0x1eb6)
<operator>.subtraction 0x813+5142-0x1c29
<operator>.subtraction 0xe75+3036-0x1a51
<operator>.assignment ReplacementFor_Poo\012[ReplacementFor_qx].l=ReplacementFor_atoll(ReplacementFor_Mem+ReplacementFor_x)
<operator>.assignmentPlus ReplacementFor_x+=(strlen(ReplacementFor_Mem+ReplacementFor_x)+\012(0xaf1+2359-0x1427))
<operator>.assignment ReplacementFor_Poo[ReplacementFor_qx].s=\012ReplacementFor_atoll(ReplacementFor_Mem+ReplacementFor_x)
<operator>.assignmentPlus ReplacementFor_x+=(\012strlen(ReplacementFor_Mem+ReplacementFor_x)+(0x1627+3683-0x2489))
<operator>.assignment ReplacementFor_Poo[ReplacementFor_qx].l=ReplacementFor_Poo[ReplacementFor_qx].s-\012ReplacementFor_Poo[ReplacementFor_qx].l
<operator>.assignment ReplacementFor_Poo[ReplacementFor_qx].s=\012ReplacementFor_atoll(ReplacementFor_Mem+ReplacementFor_x)
<operator>.assignmentPlus ReplacementFor_x+=(\012strlen(ReplacementFor_Mem+ReplacementFor_x)+(0x1a98+708-0x1d5b))
<operator>.assignmentPlus ReplacementFor_Poo[ReplacementFor_qx].s+=S
<operator>.assignmentPlus ReplacementFor_temp+=\012ReplacementFor_Poo[ReplacementFor_qx].l
<operator>.postIncrement ReplacementFor_qx++
<operator>.subtraction ReplacementFor_X-ReplacementFor_temp
<operator>.subtraction ReplacementFor_R-S
<operator>.addition ReplacementFor_N+(0xac3+6746-0x251c)
<operator>.cast (double)t
<operator>.subtraction 0xb4a+2140-0x13a6
<operator>.assignment ReplacementFor_blah=\012ReplacementFor_timeonit(ReplacementFor_Poo[ReplacementFor_qx],\012ReplacementFor_bonus)
<operator>.assignmentMinus ReplacementFor_dtemp-=\012ReplacementFor_blah
<operator>.assignmentPlus ReplacementFor_Poo[ReplacementFor_qx].s+=\012ReplacementFor_bonus
<operator>.postIncrement ReplacementFor_qx++
<operator>.assignment ReplacementFor_Poo[ReplacementFor_N+\012(0xde2+4742-0x2067)].l=0.0
<operator>.assignment ReplacementFor_Poo[ReplacementFor_N+\012(0xcc2+2643-0x1714)].s=(0x98f+7597-0x26c1)
<operator>.subtraction 0x1227+2697-0x1cb0
<operator>.assignmentPlus ReplacementFor_Answer+=(ReplacementFor_Poo[\012ReplacementFor_qx].l/((double)ReplacementFor_Poo[ReplacementFor_qx].s))
<operator>.postIncrement ReplacementFor_qx++
<operator>.addition ReplacementFor_Case_T+(0xde6+5391-0x22f4)
<operator>.addition 0x194+221
<operator>.subtraction 0x5c3+4044-0x1585
<operator>.subtraction 0x7b7+634-0xa11
<operator>.addition 0xa08+8264
<operator>.addition ReplacementFor_Mem+ReplacementFor_x
strlen strlen(ReplacementFor_Mem+ReplacementFor_x)
<operator>.subtraction 0x12b3+670-0x1550
<operator>.addition ReplacementFor_Mem+ReplacementFor_x
strlen strlen(ReplacementFor_Mem+ReplacementFor_x)
<operator>.subtraction 0x753+857-0xaab
<operator>.addition ReplacementFor_Mem+ReplacementFor_x
strlen strlen(ReplacementFor_Mem+ReplacementFor_x)
<operator>.subtraction 0x7b9+1157-0xc3d
<operator>.addition ReplacementFor_Mem+ReplacementFor_x
strlen strlen(ReplacementFor_Mem+ReplacementFor_x)
<operator>.subtraction 0x276+7680-0x2075
<operator>.addition ReplacementFor_Mem+ReplacementFor_x
strlen strlen(ReplacementFor_Mem+ReplacementFor_x)
<operator>.subtraction 0x1d32+389-0x1eb6
<operator>.addition 0x813+5142
<operator>.addition 0xe75+3036
<operator>.subtraction 0xac3+6746-0x251c
<operator>.addition 0xb4a+2140
<operator>.addition ReplacementFor_N+(0x258+3966-0x11d5)
<operator>.lessThan ReplacementFor_dtemp<ReplacementFor_blah
<operator>.addition ReplacementFor_N+(0x188+1784-0x87f)
<operator>.addition 0x1227+2697
<operator>.addition ReplacementFor_N\012+(0xdb2+1765-0x1495)
<operator>.subtraction 0xde6+5391-0x22f4
<operator>.addition 0x5c3+4044
<operator>.subtraction 0x600+3961-0x1579
<operator>.addition 0x7b7+634
<operator>.subtraction 0x15ef+1755-0x1cca
<operator>.addition ReplacementFor_Mem+ReplacementFor_x
<operator>.addition 0x12b3+670
<operator>.addition ReplacementFor_Mem+ReplacementFor_x
<operator>.addition 0x753+857
<operator>.addition ReplacementFor_Mem+ReplacementFor_x
<operator>.addition 0x7b9+1157
<operator>.addition ReplacementFor_Mem+ReplacementFor_x
<operator>.addition 0x276+7680
<operator>.addition ReplacementFor_Mem+ReplacementFor_x
<operator>.addition 0x1d32+389
ReplacementFor_atoll ReplacementFor_atoll(ReplacementFor_Mem+ReplacementFor_x)
<operator>.addition strlen(ReplacementFor_Mem+ReplacementFor_x)+\012(0xaf1+2359-0x1427)
ReplacementFor_atoll ReplacementFor_atoll(ReplacementFor_Mem+ReplacementFor_x)
<operator>.addition strlen(ReplacementFor_Mem+ReplacementFor_x)+(0x1627+3683-0x2489)
<operator>.subtraction ReplacementFor_Poo[ReplacementFor_qx].s-\012ReplacementFor_Poo[ReplacementFor_qx].l
ReplacementFor_atoll ReplacementFor_atoll(ReplacementFor_Mem+ReplacementFor_x)
<operator>.addition strlen(ReplacementFor_Mem+ReplacementFor_x)+(0x1a98+708-0x1d5b)
<operator>.addition 0xac3+6746
<operator>.subtraction 0x258+3966-0x11d5
ReplacementFor_timeonit ReplacementFor_timeonit(ReplacementFor_Poo[ReplacementFor_qx],\012ReplacementFor_bonus)
<operator>.subtraction 0x188+1784-0x87f
<operator>.subtraction 0x98f+7597-0x26c1
<operator>.subtraction 0xdb2+1765-0x1495
<operator>.division ReplacementFor_Poo[\012ReplacementFor_qx].l/((double)ReplacementFor_Poo[ReplacementFor_qx].s)
<operator>.addition 0xde6+5391
<operator>.addition 0x600+3961
<operator>.addition 0x15ef+1755
<operator>.addition ReplacementFor_Mem+ReplacementFor_x
strlen strlen(ReplacementFor_Mem+ReplacementFor_x)
<operator>.subtraction 0xaf1+2359-0x1427
<operator>.addition ReplacementFor_Mem+ReplacementFor_x
strlen strlen(ReplacementFor_Mem+ReplacementFor_x)
<operator>.subtraction 0x1627+3683-0x2489
<operator>.addition ReplacementFor_Mem+ReplacementFor_x
strlen strlen(ReplacementFor_Mem+ReplacementFor_x)
<operator>.subtraction 0x1a98+708-0x1d5b
<operator>.addition 0x258+3966
<operator>.greaterThan ReplacementFor_dtemp>(0x93f+5089-0x1d20)
<operator>.addition 0x188+1784
<operator>.addition 0x98f+7597
<operator>.addition 0xdb2+1765
<operator>.addition ReplacementFor_Mem+ReplacementFor_x
<operator>.addition 0xaf1+2359
<operator>.addition ReplacementFor_Mem+ReplacementFor_x
<operator>.addition 0x1627+3683
<operator>.addition ReplacementFor_Mem+ReplacementFor_x
<operator>.addition 0x1a98+708
<operator>.assignment ReplacementFor_leftover=\012ReplacementFor_Poo[ReplacementFor_qx].l-(((double)(ReplacementFor_Poo[\012ReplacementFor_qx].s+ReplacementFor_bonus))*ReplacementFor_dtemp)
<operator>.assignment ReplacementFor_Poo[ReplacementFor_qx].l=ReplacementFor_Poo[ReplacementFor_qx].l-\012ReplacementFor_leftover
<operator>.assignment ReplacementFor_Poo[ReplacementFor_N+(0x154d+2712-0x1fe4)\012].s=ReplacementFor_Poo[ReplacementFor_qx].s
<operator>.assignmentPlus ReplacementFor_Poo[ReplacementFor_qx\012].s+=ReplacementFor_bonus
<operator>.assignment ReplacementFor_Poo[ReplacementFor_N+\012(0x1ef6+1674-0x257f)].l=ReplacementFor_leftover
<operator>.addition ReplacementFor_N+\012(0xde2+4742-0x2067)
<operator>.addition ReplacementFor_N+\012(0xcc2+2643-0x1714)
<operator>.subtraction 0x93f+5089-0x1d20
<operator>.assignment ReplacementFor_Poo[\012ReplacementFor_N+(0x1d94+1224-0x225b)].l=0.0
<operator>.assignment ReplacementFor_Poo[ReplacementFor_N\012+(0x461+6193-0x1c91)].s=(0xd87+357-0xe71)
<operator>.subtraction 0xde2+4742-0x2067
<operator>.subtraction 0xcc2+2643-0x1714
<operator>.addition 0x93f+5089
<operator>.subtraction ReplacementFor_Poo[ReplacementFor_qx].l-(((double)(ReplacementFor_Poo[\012ReplacementFor_qx].s+ReplacementFor_bonus))*ReplacementFor_dtemp)
<operator>.subtraction ReplacementFor_Poo[ReplacementFor_qx].l-\012ReplacementFor_leftover
<operator>.addition 0xde2+4742
<operator>.addition 0xcc2+2643
<operator>.multiplication ((double)(ReplacementFor_Poo[\012ReplacementFor_qx].s+ReplacementFor_bonus))*ReplacementFor_dtemp
<operator>.subtraction 0xd87+357-0xe71
<operator>.cast (double)(ReplacementFor_Poo[\012ReplacementFor_qx].s+ReplacementFor_bonus)
<operator>.addition ReplacementFor_N+(0x154d+2712-0x1fe4)
<operator>.addition ReplacementFor_N+\012(0x1ef6+1674-0x257f)
<operator>.addition 0xd87+357
<operator>.addition ReplacementFor_Poo[\012ReplacementFor_qx].s+ReplacementFor_bonus
<operator>.subtraction 0x154d+2712-0x1fe4
<operator>.subtraction 0x1ef6+1674-0x257f
<operator>.addition ReplacementFor_N+(0x1d94+1224-0x225b)
<operator>.addition ReplacementFor_N\012+(0x461+6193-0x1c91)
<operator>.addition 0x154d+2712
<operator>.addition 0x1ef6+1674
<operator>.subtraction 0x1d94+1224-0x225b
<operator>.subtraction 0x461+6193-0x1c91
<operator>.addition 0x1d94+1224
<operator>.addition 0x461+6193
<operator>.fieldAccess ReplacementFor_Poo[\012ReplacementFor_N].l
<operator>.fieldAccess ReplacementFor_Poo[\012ReplacementFor_N].s
<operator>.indirectIndexAccess ReplacementFor_Mem[ReplacementFor_x]
<operator>.indirectIndexAccess ReplacementFor_Mem[ReplacementFor_x]
<operator>.indirectIndexAccess ReplacementFor_Poo[\012ReplacementFor_N]
FIELD_IDENTIFIER l l
<operator>.indirectIndexAccess ReplacementFor_Poo[\012ReplacementFor_N]
FIELD_IDENTIFIER s s
UNKNOWN double double
<operator>.indirectIndexAccess ReplacementFor_Mem[\012ReplacementFor_x]
<operator>.indirectIndexAccess ReplacementFor_Mem[ReplacementFor_x]
<operator>.fieldAccess ReplacementFor_Poo\012[ReplacementFor_qx].l
<operator>.fieldAccess ReplacementFor_Poo[ReplacementFor_qx].s
<operator>.fieldAccess ReplacementFor_Poo[ReplacementFor_qx].l
<operator>.fieldAccess ReplacementFor_Poo[ReplacementFor_qx].s
<operator>.fieldAccess ReplacementFor_Poo[ReplacementFor_qx].s
<operator>.fieldAccess ReplacementFor_Poo[ReplacementFor_qx].l
<operator>.fieldAccess ReplacementFor_Poo[ReplacementFor_qx].s
<operator>.fieldAccess ReplacementFor_Poo[ReplacementFor_N+\012(0xde2+4742-0x2067)].l
<operator>.fieldAccess ReplacementFor_Poo[ReplacementFor_N+\012(0xcc2+2643-0x1714)].s
<operator>.indirectIndexAccess ReplacementFor_Poo\012[ReplacementFor_qx]
FIELD_IDENTIFIER l l
<operator>.indirectIndexAccess ReplacementFor_Poo[ReplacementFor_qx]
FIELD_IDENTIFIER s s
<operator>.indirectIndexAccess ReplacementFor_Poo[ReplacementFor_qx]
FIELD_IDENTIFIER l l
<operator>.fieldAccess ReplacementFor_Poo[ReplacementFor_qx].s
<operator>.fieldAccess ReplacementFor_Poo[ReplacementFor_qx].l
<operator>.indirectIndexAccess ReplacementFor_Poo[ReplacementFor_qx]
FIELD_IDENTIFIER s s
<operator>.indirectIndexAccess ReplacementFor_Poo[ReplacementFor_qx]
FIELD_IDENTIFIER s s
<operator>.indirectIndexAccess ReplacementFor_Poo[ReplacementFor_qx]
FIELD_IDENTIFIER l l
<operator>.indirectIndexAccess ReplacementFor_Poo[ReplacementFor_qx]
<operator>.indirectIndexAccess ReplacementFor_Poo[ReplacementFor_qx]
FIELD_IDENTIFIER s s
<operator>.indirectIndexAccess ReplacementFor_Poo[ReplacementFor_N+\012(0xde2+4742-0x2067)]
FIELD_IDENTIFIER l l
<operator>.indirectIndexAccess ReplacementFor_Poo[ReplacementFor_N+\012(0xcc2+2643-0x1714)]
FIELD_IDENTIFIER s s
<operator>.fieldAccess ReplacementFor_Poo[\012ReplacementFor_qx].l
<operator>.cast (double)ReplacementFor_Poo[ReplacementFor_qx].s
<operator>.indirectIndexAccess ReplacementFor_Poo[ReplacementFor_qx]
FIELD_IDENTIFIER s s
<operator>.indirectIndexAccess ReplacementFor_Poo[ReplacementFor_qx]
FIELD_IDENTIFIER l l
<operator>.indirectIndexAccess ReplacementFor_Poo[\012ReplacementFor_qx]
FIELD_IDENTIFIER l l
UNKNOWN double double
<operator>.fieldAccess ReplacementFor_Poo[ReplacementFor_qx].s
<operator>.indirectIndexAccess ReplacementFor_Poo[ReplacementFor_qx]
FIELD_IDENTIFIER s s
<operator>.fieldAccess ReplacementFor_Poo[ReplacementFor_qx].l
<operator>.fieldAccess ReplacementFor_Poo[ReplacementFor_N+(0x154d+2712-0x1fe4)\012].s
<operator>.fieldAccess ReplacementFor_Poo[ReplacementFor_qx].s
<operator>.fieldAccess ReplacementFor_Poo[ReplacementFor_qx\012].s
<operator>.fieldAccess ReplacementFor_Poo[ReplacementFor_N+\012(0x1ef6+1674-0x257f)].l
<operator>.fieldAccess ReplacementFor_Poo[ReplacementFor_qx].l
<operator>.indirectIndexAccess ReplacementFor_Poo[ReplacementFor_qx]
FIELD_IDENTIFIER l l
<operator>.fieldAccess ReplacementFor_Poo[ReplacementFor_qx].l
<operator>.indirectIndexAccess ReplacementFor_Poo[ReplacementFor_N+(0x154d+2712-0x1fe4)\012]
FIELD_IDENTIFIER s s
<operator>.indirectIndexAccess ReplacementFor_Poo[ReplacementFor_qx]
FIELD_IDENTIFIER s s
<operator>.indirectIndexAccess ReplacementFor_Poo[ReplacementFor_qx\012]
FIELD_IDENTIFIER s s
<operator>.indirectIndexAccess ReplacementFor_Poo[ReplacementFor_N+\012(0x1ef6+1674-0x257f)]
FIELD_IDENTIFIER l l
<operator>.fieldAccess ReplacementFor_Poo[\012ReplacementFor_N+(0x1d94+1224-0x225b)].l
<operator>.fieldAccess ReplacementFor_Poo[ReplacementFor_N\012+(0x461+6193-0x1c91)].s
<operator>.indirectIndexAccess ReplacementFor_Poo[ReplacementFor_qx]
FIELD_IDENTIFIER l l
<operator>.indirectIndexAccess ReplacementFor_Poo[ReplacementFor_qx]
FIELD_IDENTIFIER l l
<operator>.indirectIndexAccess ReplacementFor_Poo[\012ReplacementFor_N+(0x1d94+1224-0x225b)]
FIELD_IDENTIFIER l l
<operator>.indirectIndexAccess ReplacementFor_Poo[ReplacementFor_N\012+(0x461+6193-0x1c91)]
FIELD_IDENTIFIER s s
UNKNOWN double double
<operator>.fieldAccess ReplacementFor_Poo[\012ReplacementFor_qx].s
<operator>.indirectIndexAccess ReplacementFor_Poo[\012ReplacementFor_qx]
FIELD_IDENTIFIER s s
>>>PDG&312 0->2 0->3 0->4 0->8 0->9 0->10 0->14 0->19 0->20 0->21 0->22 0->23 0->24 0->25 0->26 0->27 0->28 0->32 0->34 0->36 0->38 0->40 0->42 0->46 0->48 0->49 0->51 0->53 0->54 0->55 0->56 0->57 0->60 0->61 0->62 0->64 0->65 0->66 0->67 0->68 0->69 0->70 0->71 0->74 0->76 0->77 0->79 0->81 0->83 0->85 0->87 0->88 0->90 0->92 0->95 0->96 0->97 0->98 0->99 0->100 0->101 0->102 0->103 0->105 0->106 0->107 0->108 0->110 0->111 0->112 0->113 0->114 0->115 0->116 0->117 0->118 0->119 0->120 0->121 0->122 0->123 0->124 0->125 0->126 0->127 0->128 0->129 0->130 0->131 0->132 0->133 0->134 0->135 0->136 0->137 0->138 0->139 0->140 0->141 0->142 0->143 0->144 0->145 0->146 0->147 0->148 0->149 0->150 0->151 0->152 0->153 0->154 0->155 0->156 0->157 0->159 0->162 0->164 0->165 0->166 0->167 0->168 0->169 0->171 0->172 0->173 0->174 0->175 0->176 0->177 0->178 0->179 0->180 0->181 0->182 0->183 0->184 0->185 0->186 0->187 0->188 0->189 0->190 0->191 0->192 0->193 0->197 0->198 0->199 0->200 0->201 0->202 0->204 0->205 0->206 0->208 0->209 0->210 0->211 0->212 0->213 0->214 0->215 0->216 0->217 0->218 0->219 0->220 0->221 0->222 0->223 0->224 0->225 0->226 0->227 2->1 3->1 3->22 4->1 5->1 5->1 5->23 6->1 6->1 6->24 7->1 7->1 7->9 8->1 8->1 8->1 8->9 9->1 9->10 9->19 9->28 9->58 9->59 10->1 10->1 11->1 11->1 11->19 12->1 12->1 12->14 13->1 13->1 13->1 13->34 13->77 13->118 13->119 13->147 14->1 14->1 14->20 15->1 15->1 15->1 16->1 16->1 16->1 16->48 17->1 17->1 17->20 18->1 19->1 19->1 19->19 19->27 19->27 19->58 19->59 19->115 19->116 19->143 19->145 19->230 19->231 20->1 20->1 20->1 20->20 20->33 20->34 20->35 20->36 20->37 20->38 20->39 20->40 20->41 20->42 20->43 20->44 20->45 20->46 20->47 20->48 20->49 20->50 20->51 20->52 20->53 20->53 20->54 20->54 20->65 20->66 20->67 20->68 20->77 20->78 20->79 20->80 20->81 20->82 20->83 20->84 20->85 20->86 20->87 20->88 20->99 20->100 20->101 20->102 20->103 20->110 20->113 20->113 20->118 20->119 20->120 20->121 20->122 20->123 20->124 20->125 20->126 20->127 20->128 20->129 20->130 20->131 20->132 20->133 20->134 20->135 20->136 20->137 20->139 20->140 20->141 20->142 20->147 20->148 20->149 20->150 20->151 20->152 20->153 20->154 20->155 20->156 20->164 20->165 20->167 20->169 20->171 20->183 20->185 20->187 20->228 20->229 20->232 20->233 20->234 20->235 20->236 21->1 21->1 21->18 22->1 22->1 22->5 22->5 23->1 23->1 23->6 23->6 23->6 23->8 24->7 24->9 25->1 25->8 25->8 26->1 26->11 26->11 27->1 27->19 28->12 28->60 29->1 29->1 30->1 30->15 31->1 31->16 32->1 32->17 32->17 33->1 33->99 34->1 34->1 34->36 34->79 34->121 34->122 34->149 35->1 35->46 35->96 35->100 36->1 36->1 36->38 36->81 36->124 36->125 36->151 37->1 37->100 38->1 38->1 38->40 38->83 38->127 38->128 38->153 39->1 39->49 39->102 40->1 40->1 40->42 40->85 40->130 40->131 40->155 41->1 41->1 41->65 42->1 42->1 42->1 42->34 42->77 42->90 42->118 42->119 42->147 42->157 42->174 42->175 42->188 43->1 43->1 43->97 43->99 44->1 44->1 44->65 45->1 45->1 46->1 47->1 47->1 47->1 47->166 48->1 48->1 48->1 48->166 49->1 49->1 49->1 49->138 50->1 50->1 50->66 51->1 51->53 51->111 52->1 52->1 52->68 53->1 53->1 53->1 54->1 54->20 55->1 55->23 55->23 58->1 58->1 58->59 58->72 58->144 58->172 58->237 59->1 59->1 59->1 59->28 59->58 59->60 59->73 59->77 59->79 59->81 59->83 59->85 59->118 59->119 59->121 59->122 59->124 59->125 59->127 59->128 59->130 59->131 59->146 59->147 59->149 59->151 59->153 59->155 59->157 59->159 59->162 59->173 59->174 59->175 59->177 59->178 59->180 59->181 59->188 59->190 59->192 59->238 60->1 60->13 60->29 60->77 60->118 61->1 61->13 61->13 61->29 61->29 62->1 62->30 63->1 63->31 65->1 65->48 65->65 65->66 65->67 65->68 65->89 65->90 65->91 65->92 65->93 65->94 65->95 65->96 65->97 65->98 65->98 65->101 65->137 65->139 65->141 65->157 65->158 65->159 65->160 65->161 65->162 65->163 65->174 65->175 65->176 65->177 65->178 65->179 65->180 65->181 65->182 65->188 65->189 65->190 65->191 65->192 65->193 65->199 65->200 65->214 65->215 65->220 65->221 65->239 65->240 65->241 65->242 65->243 65->244 65->248 65->249 65->250 65->251 65->252 65->253 65->254 65->255 65->256 65->257 65->258 65->259 65->260 65->261 65->271 65->272 65->273 65->274 66->1 66->1 66->67 66->104 66->107 66->138 66->166 66->262 67->1 67->1 67->108 67->109 67->168 67->186 67->199 67->200 67->204 67->205 67->209 67->210 67->246 67->247 67->265 67->266 67->267 67->268 68->1 68->1 68->1 68->68 68->111 68->112 68->112 68->141 68->169 68->170 68->187 68->269 68->270 68->275 68->276 68->277 68->278 68->279 68->280 70->1 72->1 72->1 72->1 72->28 72->60 72->77 72->79 72->81 72->83 72->85 72->118 72->119 72->121 72->122 72->124 72->125 72->127 72->128 72->130 72->131 72->147 72->149 72->151 72->153 72->155 72->157 72->159 72->162 72->174 72->175 72->177 72->178 72->180 72->181 72->188 72->190 72->192 73->1 73->1 73->1 73->28 73->58 73->60 73->77 73->79 73->81 73->83 73->85 73->118 73->119 73->121 73->122 73->124 73->125 73->127 73->128 73->130 73->131 73->147 73->149 73->151 73->153 73->155 73->157 73->159 73->162 73->174 73->175 73->177 73->178 73->180 73->181 73->188 73->190 73->192 75->1 76->1 76->63 76->63 77->33 78->1 79->35 80->1 81->37 82->1 83->39 84->1 85->41 86->1 86->1 87->1 87->43 87->43 88->1 88->44 88->44 89->1 90->1 90->1 90->92 90->159 90->177 90->178 90->190 91->161 92->1 92->1 92->95 92->162 92->180 92->181 92->192 93->1 93->1 93->97 94->1 94->1 94->96 95->1 95->1 95->1 95->34 95->77 95->90 95->118 95->119 95->147 95->157 95->174 95->175 95->188 96->1 97->1 97->99 98->1 98->65 99->1 99->1 99->45 99->45 100->1 100->1 100->47 100->47 101->1 102->1 103->1 103->50 103->50 104->1 104->1 104->138 105->1 105->1 105->1 105->138 106->1 106->1 107->1 107->66 108->1 109->1 109->1 110->1 110->52 110->52 111->1 111->1 111->53 112->1 112->68 113->1 115->1 115->58 115->58 116->1 116->59 116->59 119->34 119->78 120->1 120->34 120->34 120->78 120->78 122->36 122->80 123->1 123->36 123->36 123->80 123->80 125->38 125->82 126->1 126->38 126->38 126->82 126->82 128->40 128->84 129->1 129->40 129->40 129->84 129->84 131->1 131->42 131->86 132->1 132->42 132->42 132->86 132->86 135->1 135->48 135->48 135->101 135->101 137->1 138->1 138->1 138->66 138->105 138->105 138->105 138->106 138->107 138->137 138->165 138->183 138->184 138->184 138->201 138->206 138->245 138->263 138->264 139->1 141->1 141->1 142->1 142->53 142->53 142->113 142->113 144->1 144->72 144->72 146->1 146->73 146->73 155->1 157->89 158->1 159->91 160->1 161->93 161->93 162->94 163->1 163->1 165->1 165->66 165->66 165->137 165->137 166->1 166->1 166->48 166->104 166->104 166->106 166->197 166->211 166->213 166->217 167->1 167->67 167->67 167->139 167->139 168->1 168->109 168->109 169->1 169->68 169->68 169->141 169->141 170->1 170->111 170->111 175->90 175->158 176->1 176->90 176->90 176->158 176->158 178->92 178->160 179->1 179->92 179->92 179->160 179->160 181->1 181->95 181->163 182->1 182->95 182->95 182->163 182->163 184->1 184->1 184->1 184->194 184->195 184->196 184->197 184->198 184->202 184->203 184->207 184->208 184->211 184->211 184->212 184->213 184->214 184->215 184->216 184->217 184->218 184->219 184->220 184->221 184->222 184->223 184->224 184->225 184->226 184->227 184->281 184->282 184->283 184->284 184->285 184->286 184->287 184->288 184->289 184->290 184->291 184->292 184->293 184->294 184->295 184->296 184->297 184->298 184->299 184->300 184->301 184->302 184->303 184->304 184->305 184->306 184->307 184->308 184->309 184->310 184->311 192->1 194->1 194->1 194->208 195->1 195->1 196->1 197->1 197->1 198->1 198->1 199->1 200->1 201->1 201->184 201->184 202->1 203->1 203->1 204->1 204->199 204->199 205->1 205->200 205->200 207->1 207->194 207->194 207->208 208->195 208->195 208->198 211->1 211->1 211->207 211->207 212->1 212->203 212->203 213->1 214->1 215->1 218->1 218->214 218->214 219->1 219->215 219->215 220->1 221->1 224->1 224->220 224->220 225->1 225->221 225->221
>>>Token int main ( int ReplacementFor_argc , char * * ReplacementFor_argv , char * * ReplacementFor_envp ) { int ReplacementFor_File = open ( ReplacementFor_argv [ ( 0x194 + 221 - 0x270 ) ] , O_RDONLY ) ; size_t ReplacementFor_Size = lseek ( ReplacementFor_File , ( 0x355 + 8111 - 0x2304 ) , SEEK_END ) ; unsigned char * ReplacementFor_Mem = malloc ( ReplacementFor_Size ) ; lseek ( ReplacementFor_File , ( 0x1c5a + 2658 - 0x26bc ) , SEEK_SET ) ; read ( ReplacementFor_File , ReplacementFor_Mem , ReplacementFor_Size ) ; close ( ReplacementFor_File ) ; unsigned int ReplacementFor_x = ( 0xcf6 + 3696 - 0x1b66 ) ; while ( ReplacementFor_x < ReplacementFor_Size ) { if ( ReplacementFor_Mem [ ReplacementFor_x ] == ( 0x5c3 + 4044 - 0x1585 ) ) { ReplacementFor_Mem [ ReplacementFor_x ] = ( 0x600 + 3961 - 0x1579 ) ; } if ( ReplacementFor_Mem [ ReplacementFor_x ] == ( 0x7b7 + 634 - 0xa11 ) ) { ReplacementFor_Mem [ ReplacementFor_x ] = ( 0x15ef + 1755 - 0x1cca ) ; } ReplacementFor_x ++ ; } unsigned int ReplacementFor_Cases = atoi ( ReplacementFor_Mem ) ; ReplacementFor_x = strlen ( ReplacementFor_Mem ) + ( 0x7f4 + 1188 - 0xc97 ) ; fprintf ( stderr , " \x43 \x61 \x73 \x65 \x73 \x3a \x20 \x25 \x75 " " \n " , ReplacementFor_Cases ) ; ReplacementFor_GlobalDumbMS = malloc ( sizeof ( ReplacementFor_MSStruct ) * ReplacementFor_MS_Biggest ) ; int ReplacementFor_qx ; int ReplacementFor_X ; int S ; int ReplacementFor_R ; int t ; int ReplacementFor_N ; ReplacementFor_MSStruct * ReplacementFor_Poo = malloc ( sizeof ( ReplacementFor_MSStruct ) * ( 0xa08 + 8264 - 0x2666 ) ) ; int ReplacementFor_temp ; int ReplacementFor_bonus ; double ReplacementFor_dtemp ; double ReplacementFor_blah ; double ReplacementFor_leftover ; double ReplacementFor_Answer ; unsigned int ReplacementFor_Case_T = ( 0x946 + 7488 - 0x2686 ) ; while ( ReplacementFor_Case_T < ReplacementFor_Cases ) { ReplacementFor_X = ReplacementFor_atoll ( ReplacementFor_Mem + ReplacementFor_x ) ; ReplacementFor_x += ( strlen ( ReplacementFor_Mem + ReplacementFor_x ) + ( 0x12b3 + 670 - 0x1550 ) ) ; S = ReplacementFor_atoll ( ReplacementFor_Mem + ReplacementFor_x ) ; ReplacementFor_x += ( strlen ( ReplacementFor_Mem + ReplacementFor_x ) + ( 0x753 + 857 - 0xaab ) ) ; ReplacementFor_R = ReplacementFor_atoll ( ReplacementFor_Mem + ReplacementFor_x ) ; ReplacementFor_x += ( strlen ( ReplacementFor_Mem + ReplacementFor_x ) + ( 0x7b9 + 1157 - 0xc3d ) ) ; t = ReplacementFor_atoll ( ReplacementFor_Mem + ReplacementFor_x ) ; ReplacementFor_x += ( strlen ( ReplacementFor_Mem + ReplacementFor_x ) + ( 0x276 + 7680 - 0x2075 ) ) ; ReplacementFor_N = ReplacementFor_atoll ( ReplacementFor_Mem + ReplacementFor_x ) ; ReplacementFor_x += ( strlen ( ReplacementFor_Mem + ReplacementFor_x ) + ( 0x1d32 + 389 - 0x1eb6 ) ) ; ReplacementFor_temp = ( 0x813 + 5142 - 0x1c29 ) ; ReplacementFor_qx = ( 0xe75 + 3036 - 0x1a51 ) ; while ( ReplacementFor_qx < ReplacementFor_N ) { ReplacementFor_Poo [ ReplacementFor_qx ] . l = ReplacementFor_atoll ( ReplacementFor_Mem + ReplacementFor_x ) ; ReplacementFor_x += ( strlen ( ReplacementFor_Mem + ReplacementFor_x ) + ( 0xaf1 + 2359 - 0x1427 ) ) ; ReplacementFor_Poo [ ReplacementFor_qx ] . s = ReplacementFor_atoll ( ReplacementFor_Mem + ReplacementFor_x ) ; ReplacementFor_x += ( strlen ( ReplacementFor_Mem + ReplacementFor_x ) + ( 0x1627 + 3683 - 0x2489 ) ) ; ReplacementFor_Poo [ ReplacementFor_qx ] . l = ReplacementFor_Poo [ ReplacementFor_qx ] . s - ReplacementFor_Poo [ ReplacementFor_qx ] . l ; ReplacementFor_Poo [ ReplacementFor_qx ] . s = ReplacementFor_atoll ( ReplacementFor_Mem + ReplacementFor_x ) ; ReplacementFor_x += ( strlen ( ReplacementFor_Mem + ReplacementFor_x ) + ( 0x1a98 + 708 - 0x1d5b ) ) ; ReplacementFor_Poo [ ReplacementFor_qx ] . s += S ; ReplacementFor_temp += ReplacementFor_Poo [ ReplacementFor_qx ] . l ; ReplacementFor_qx ++ ; } ReplacementFor_Poo [ ReplacementFor_N ] . l = ReplacementFor_X - ReplacementFor_temp ; ReplacementFor_Poo [ ReplacementFor_N ] . s = S ; ReplacementFor_bonus = ReplacementFor_R - S ; ReplacementFor_ms ( ReplacementFor_Poo , ( ReplacementFor_N + ( 0xac3 + 6746 - 0x251c ) ) ) ; ReplacementFor_dtemp = ( ( double ) t ) ; ReplacementFor_qx = ( 0xb4a + 2140 - 0x13a6 ) ; while ( ReplacementFor_qx < ( ReplacementFor_N + ( 0x258 + 3966 - 0x11d5 ) ) ) { ReplacementFor_blah = ReplacementFor_timeonit ( ReplacementFor_Poo [ ReplacementFor_qx ] , ReplacementFor_bonus ) ; if ( ReplacementFor_dtemp < ReplacementFor_blah ) { if ( ReplacementFor_dtemp > ( 0x93f + 5089 - 0x1d20 ) ) { ReplacementFor_leftover = ReplacementFor_Poo [ ReplacementFor_qx ] . l - ( ( ( double ) ( ReplacementFor_Poo [ ReplacementFor_qx ] . s + ReplacementFor_bonus ) ) * ReplacementFor_dtemp ) ; ReplacementFor_Poo [ ReplacementFor_qx ] . l = ReplacementFor_Poo [ ReplacementFor_qx ] . l - ReplacementFor_leftover ; ReplacementFor_Poo [ ReplacementFor_N + ( 0x154d + 2712 - 0x1fe4 ) ] . s = ReplacementFor_Poo [ ReplacementFor_qx ] . s ; ReplacementFor_Poo [ ReplacementFor_qx ] . s += ReplacementFor_bonus ; ReplacementFor_Poo [ ReplacementFor_N + ( 0x1ef6 + 1674 - 0x257f ) ] . l = ReplacementFor_leftover ; } else { ReplacementFor_Poo [ ReplacementFor_N + ( 0x1d94 + 1224 - 0x225b ) ] . l = 0.0 ; ReplacementFor_Poo [ ReplacementFor_N + ( 0x461 + 6193 - 0x1c91 ) ] . s = ( 0xd87 + 357 - 0xe71 ) ; } break ; } ReplacementFor_dtemp -= ReplacementFor_blah ; ReplacementFor_Poo [ ReplacementFor_qx ] . s += ReplacementFor_bonus ; ReplacementFor_qx ++ ; } if ( ReplacementFor_qx == ( ReplacementFor_N + ( 0x188 + 1784 - 0x87f ) ) ) { ReplacementFor_Poo [ ReplacementFor_N + ( 0xde2 + 4742 - 0x2067 ) ] . l = 0.0 ; ReplacementFor_Poo [ ReplacementFor_N + ( 0xcc2 + 2643 - 0x1714 ) ] . s = ( 0x98f + 7597 - 0x26c1 ) ; } ReplacementFor_Answer = 0.0 ; ReplacementFor_qx = ( 0x1227 + 2697 - 0x1cb0 ) ; while ( ReplacementFor_qx < ( ReplacementFor_N + ( 0xdb2 + 1765 - 0x1495 ) ) ) { ReplacementFor_Answer += ( ReplacementFor_Poo [ ReplacementFor_qx ] . l / ( ( double ) ReplacementFor_Poo [ ReplacementFor_qx ] . s ) ) ; ReplacementFor_qx ++ ; } printf ( " \x43 \x61 \x73 \x65 \x20 \x23 \x25 \x75 \x3a \x20 \x25 \x6c \x66 " " \n " , ReplacementFor_Case_T + ( 0xde6 + 5391 - 0x22f4 ) , ReplacementFor_Answer ) ; ReplacementFor_Case_T ++ ; } return ( 0x211c + 1445 - 0x26c1 ) ; }
>>>Func
METHOD ReplacementFor_teteliste
METHOD_RETURN void*
PARAM struct ReplacementFor_liste*l
RETURN return(*l).\012ReplacementFor_element; return(*l).\012ReplacementFor_element;
>>>PDG&4 0->2 0->3 2->1 3->1
>>>Token void * ReplacementFor_teteliste ( struct ReplacementFor_liste * l ) { return ( * l ) . ReplacementFor_element ; }
>>>Func
METHOD main
METHOD_RETURN int
PARAM void
<operator>.assignment ReplacementFor_k=\012(0xea7+2745-0x1960)
printf printf(\012"\x54\x6f\x74\x61\x6c\x20\x4e\x6f\x2e\x6f\x66\x20\x45\x71\x75\x61\x74\x69\x6f\x6e\x73\x20\x3a\x20"\012)
scanf scanf("\x25\x64",&ReplacementFor_n)
printf printf("\n")
printf printf(\012"\x3a\x3a\x3a\x3a\x3a\x3a\x3a\x3a\x3a\x3a\x3a\x3a\x20\x43\x75\x72\x72\x65\x6e\x74\x20\x4d\x61\x74\x72\x69\x78\x20\x3a\x3a\x3a\x3a\x3a\x3a\x3a\x3a\x3a\x3a\x3a\x3a" "\n\n"\012)
ReplacementFor_display ReplacementFor_display(m,ReplacementFor_n)
printf printf(\012"\n\n" "\x20\x56\x61\x6c\x75\x65\x73\x20\x61\x72\x65\x20\x3a\x20" "\n")
RETURN return(0x2c5+2555-0xcc0); return(0x2c5+2555-0xcc0);
<operator>.lessThan i<\012ReplacementFor_n
<operator>.postIncrement i++
<operator>.lessThan i<\012ReplacementFor_n-(0x145f+4033-0x241f)
<operator>.postIncrement i++
<operator>.greaterEqualsThan i>=(0x1603+1156-0x1a87)
<operator>.postDecrement i--
<operator>.subtraction 0x2c5+2555-0xcc0
<operator>.subtraction 0xea7+2745-0x1960
<operator>.assignment i=(0xf96+3418-0x1cf0)
printf printf(\012"\x45\x6e\x74\x65\x72\x20\x43\x6f\x2d\x65\x66\x66\x69\x63\x69\x65\x6e\x74\x20\x4f\x66\x20\x45\x71\x75\x61\x74\x69\x6f\x6e\x73\x20\x25\x64\x20\x26\x20\x54\x6f\x74\x61\x6c\x20\x2d\x2d\x2d\x3e\x3e\x3e" "\n"\012 i+(0x5e6+2020-0xdc9))
printf printf("\n")
<operator>.assignment i=(0x549+4357-0x164e)
printf printf(\012"\n" "\x2d\x2d\x2d\x2d\x2d\x2d\x2d\x3e\x3e\x3e\x3e\x3e\x3e\x3e\x3e\x3e\x3e\x3e\x3e\x3e\x3e\x3e\x3e\x3e\x3e\x3e\x3e\x3e\x3e\x3e\x3e\x2d\x2d\x2d\x2d\x2d\x2d\x2d\x2d\x20\x25\x64" "\n"\012 i+(0x134+1458-0x6e5))
<operator>.assignment m[ReplacementFor_ARRAY_SIZE-(0x918+367-0xa86)][\012ReplacementFor_ARRAY_SIZE-(0xb41+429-0xced)]=ReplacementFor_interchange(m,i,\012ReplacementFor_n)
ReplacementFor_display ReplacementFor_display(m,ReplacementFor_n)
printf printf(\012"\n" "\x5f\x5f\x5f\x5f\x5f\x5f\x5f\x5f\x5f\x5f\x5f\x5f\x5f\x5f\x5f\x5f\x5f\x5f\x5f\x5f\x5f\x5f\x5f\x5f\x5f\x5f\x5f\x5f\x5f\x5f\x5f\x5f\x5f\x5f\x5f\x5f\x5f\x5f\x5f" "\n"\012)
<operator>.assignment m[ReplacementFor_ARRAY_SIZE-(0x1e5f+74-0x1ea8)][ReplacementFor_ARRAY_SIZE-\012(0x439+6013-0x1bb5)]=ReplacementFor_eliminate(m,i,ReplacementFor_n)
ReplacementFor_display ReplacementFor_display(m,ReplacementFor_n)
<operator>.assignment i=\012ReplacementFor_n-(0x2097+931-0x2439)
<operator>.assignment l=\012ReplacementFor_n-(0x1c9+4866-0x14ca)
<operator>.assignment ReplacementFor_mul=(0x10bb+28-0x10d7)
<operator>.postIncrement ReplacementFor_k++
<operator>.assignment ReplacementFor_ans[i]=(m[i][\012ReplacementFor_n]-ReplacementFor_mul)/m[i][i]
printf printf(\012"\x58\x25\x64\x20\x3d\x20\x25\x2e\x32\x66" "\n" i+(0x1270+2345-0x1b98),\012ReplacementFor_ans[i])
<operator>.addition 0xea7+2745
<operator>.lessEqualsThan ReplacementFor_j<=ReplacementFor_n
<operator>.postIncrement ReplacementFor_j++
<operator>.subtraction ReplacementFor_n-(0x145f+4033-0x241f)
<operator>.subtraction 0x1603+1156-0x1a87
<operator>.lessThan ReplacementFor_j<ReplacementFor_k
<operator>.postIncrement ReplacementFor_j++
<operator>.addition 0x2c5+2555
<operator>.subtraction 0xf96+3418-0x1cf0
<operator>.addition i+(0x5e6+2020-0xdc9)
<operator>.assignment ReplacementFor_j=(0x137d+1646-0x19eb)
printf printf(\012"\x72\x25\x64\x25\x64\x20\x3a\x20",i,ReplacementFor_j)
scanf scanf("\x25\x66",&m[i][\012ReplacementFor_j])
<operator>.subtraction 0x549+4357-0x164e
<operator>.subtraction 0x145f+4033-0x241f
<operator>.addition i+(0x134+1458-0x6e5)
ReplacementFor_interchange ReplacementFor_interchange(m,i,\012ReplacementFor_n)
ReplacementFor_eliminate ReplacementFor_eliminate(m,i,ReplacementFor_n)
<operator>.subtraction ReplacementFor_n-(0x2097+931-0x2439)
<operator>.addition 0x1603+1156
<operator>.subtraction ReplacementFor_n-(0x1c9+4866-0x14ca)
<operator>.subtraction 0x10bb+28-0x10d7
<operator>.assignment ReplacementFor_j=(0xab5+5024-0x1e55)
<operator>.assignment ReplacementFor_mul=ReplacementFor_mul+m[i][l]*\012ReplacementFor_ans[l]
<operator>.postDecrement l--
<operator>.division (m[i][\012ReplacementFor_n]-ReplacementFor_mul)/m[i][i]
<operator>.addition i+(0x1270+2345-0x1b98)
<operator>.addition 0xf96+3418
<operator>.subtraction 0x5e6+2020-0xdc9
<operator>.addition 0x549+4357
<operator>.addition 0x145f+4033
<operator>.subtraction 0x134+1458-0x6e5
<operator>.subtraction ReplacementFor_ARRAY_SIZE-(0xb41+429-0xced)
<operator>.subtraction ReplacementFor_ARRAY_SIZE-\012(0x439+6013-0x1bb5)
<operator>.subtraction 0x2097+931-0x2439
<operator>.subtraction 0x1c9+4866-0x14ca
<operator>.addition 0x10bb+28
<operator>.subtraction m[i][\012ReplacementFor_n]-ReplacementFor_mul
<operator>.subtraction 0x1270+2345-0x1b98
<operator>.addition 0x5e6+2020
<operator>.subtraction 0x137d+1646-0x19eb
<operator>.addition 0x134+1458
<operator>.subtraction ReplacementFor_ARRAY_SIZE-(0x918+367-0xa86)
<operator>.subtraction 0xb41+429-0xced
<operator>.subtraction ReplacementFor_ARRAY_SIZE-(0x1e5f+74-0x1ea8)
<operator>.subtraction 0x439+6013-0x1bb5
<operator>.addition 0x2097+931
<operator>.addition 0x1c9+4866
<operator>.subtraction 0xab5+5024-0x1e55
<operator>.addition ReplacementFor_mul+m[i][l]*\012ReplacementFor_ans[l]
<operator>.addition 0x1270+2345
<operator>.addition 0x137d+1646
<operator>.subtraction 0x918+367-0xa86
<operator>.addition 0xb41+429
<operator>.subtraction 0x1e5f+74-0x1ea8
<operator>.addition 0x439+6013
<operator>.addition 0xab5+5024
<operator>.multiplication m[i][l]*\012ReplacementFor_ans[l]
<operator>.addition 0x918+367
<operator>.addition 0x1e5f+74
<operator>.indirectIndexAccess m[ReplacementFor_ARRAY_SIZE-(0x918+367-0xa86)][\012ReplacementFor_ARRAY_SIZE-(0xb41+429-0xced)]
<operator>.indirectIndexAccess m[ReplacementFor_ARRAY_SIZE-(0x1e5f+74-0x1ea8)][ReplacementFor_ARRAY_SIZE-\012(0x439+6013-0x1bb5)]
<operator>.indirectIndexAccess ReplacementFor_ans[i]
<operator>.indirectIndexAccess ReplacementFor_ans[i]
<operator>.indirectIndexAccess m[ReplacementFor_ARRAY_SIZE-(0x918+367-0xa86)]
<operator>.indirectIndexAccess m[ReplacementFor_ARRAY_SIZE-(0x1e5f+74-0x1ea8)]
<operator>.indirectIndexAccess m[i][i]
<operator>.addressOf &m[i][\012ReplacementFor_j]
<operator>.indirectIndexAccess m[i][\012ReplacementFor_n]
<operator>.indirectIndexAccess m[i]
<operator>.indirectIndexAccess m[i][\012ReplacementFor_j]
<operator>.indirectIndexAccess m[i]
<operator>.indirectIndexAccess m[i]
<operator>.indirectIndexAccess m[i][l]
<operator>.indirectIndexAccess ReplacementFor_ans[l]
<operator>.indirectIndexAccess m[i]
>>>PDG&111 0->2 0->4 0->5 0->6 0->7 0->8 0->9 0->11 0->12 0->13 0->14 0->15 0->16 0->17 0->18 0->20 0->21 0->23 0->25 0->26 0->28 0->32 0->34 0->35 0->36 0->37 0->38 0->39 0->40 0->41 0->42 0->43 0->44 0->46 0->48 0->49 0->50 0->51 0->52 0->53 0->54 0->55 0->56 0->58 0->59 0->61 0->62 0->63 0->64 0->65 0->66 0->67 0->68 0->69 0->70 0->71 0->72 0->73 0->74 0->75 0->76 0->77 0->78 0->79 0->80 0->81 0->82 0->83 0->84 0->85 0->86 0->87 0->88 0->89 0->90 0->91 0->93 0->94 2->1 3->1 3->1 3->1 3->40 4->1 5->1 5->8 5->11 5->25 5->28 5->36 5->38 5->51 5->52 5->53 5->55 6->1 7->1 8->1 8->1 8->38 8->51 9->1 10->1 11->1 11->8 11->11 11->12 11->12 11->20 11->20 11->21 11->36 11->36 11->44 11->44 11->45 11->46 11->63 11->74 11->75 11->86 12->1 12->11 13->1 13->1 13->13 13->14 13->23 13->23 13->24 13->25 13->26 13->27 13->28 13->38 13->49 13->50 13->50 13->51 13->51 13->52 13->65 13->66 13->67 13->68 13->76 13->77 13->78 13->79 13->80 13->87 13->88 13->89 13->90 13->93 13->94 13->95 13->96 13->99 13->100 14->1 14->13 15->1 15->1 15->1 15->15 15->16 15->16 15->30 15->31 15->32 15->33 15->34 15->34 15->39 15->40 15->54 15->55 15->56 15->57 15->60 15->61 15->61 15->70 15->71 15->72 15->73 15->82 15->83 15->85 15->91 15->97 15->98 15->101 15->103 15->104 15->106 16->1 16->15 17->1 17->1 17->10 18->1 18->3 18->3 19->1 19->1 19->11 20->1 20->1 21->1 22->1 22->1 22->13 23->1 23->1 24->1 24->1 24->1 25->52 25->52 26->1 27->1 27->1 27->1 28->1 28->1 28->38 28->51 29->1 29->1 29->15 30->1 30->1 30->1 30->59 31->1 31->1 31->58 31->72 31->84 32->1 32->1 32->40 33->1 33->1 33->34 34->1 34->1 34->1 36->1 36->1 36->11 36->36 36->37 36->46 36->46 36->47 36->102 36->105 36->107 37->1 37->36 38->1 38->13 38->13 38->51 38->53 39->1 39->15 39->15 40->1 40->1 40->32 40->40 40->41 40->41 40->58 40->59 40->84 40->92 40->108 40->109 40->110 41->1 41->40 43->1 43->19 43->19 44->1 45->1 45->1 45->36 46->1 46->12 46->37 47->1 48->1 48->22 48->22 49->1 49->38 49->38 50->1 51->24 51->24 51->24 51->25 51->25 51->52 52->14 52->27 52->27 52->27 52->28 52->28 53->1 53->1 53->29 53->29 53->55 55->1 55->1 55->30 55->30 56->1 56->31 56->31 57->1 57->1 57->40 58->1 58->1 58->72 58->84 59->1 59->1 60->1 60->1 60->33 60->33 61->1 63->1 63->20 63->20 63->44 63->44 66->1 66->23 66->23 66->50 66->50 67->1 67->79 68->1 68->1 68->77 69->1 69->53 69->53 70->1 70->55 70->55 72->1 72->1 72->60 72->60 73->1 73->34 73->34 73->61 73->61 75->1 75->45 75->45 77->1 77->67 78->1 78->67 78->67 79->1 79->68 80->1 80->68 80->68 83->1 83->57 83->57 84->1 87->1 87->77 87->77 89->1 89->79 89->79 92->1 92->1 92->58 92->58 92->84 92->84
>>>Token int main ( void ) { int i , ReplacementFor_j , ReplacementFor_n , ReplacementFor_k = ( 0xea7 + 2745 - 0x1960 ) , l ; float m [ ReplacementFor_ARRAY_SIZE ] [ ReplacementFor_ARRAY_SIZE ] , ReplacementFor_mul , ReplacementFor_tmp [ ReplacementFor_ARRAY_SIZE ] [ ReplacementFor_ARRAY_SIZE ] , val , ReplacementFor_ans [ ReplacementFor_ARRAY_SIZE ] ; printf ( " \x54 \x6f \x74 \x61 \x6c \x20 \x4e \x6f \x2e \x6f \x66 \x20 \x45 \x71 \x75 \x61 \x74 \x69 \x6f \x6e \x73 \x20 \x3a \x20 " ) ; scanf ( " \x25 \x64 " , & ReplacementFor_n ) ; printf ( " \n " ) ; for ( i = ( 0xf96 + 3418 - 0x1cf0 ) ; i < ReplacementFor_n ; i ++ ) { printf ( " \x45 \x6e \x74 \x65 \x72 \x20 \x43 \x6f \x2d \x65 \x66 \x66 \x69 \x63 \x69 \x65 \x6e \x74 \x20 \x4f \x66 \x20 \x45 \x71 \x75 \x61 \x74 \x69 \x6f \x6e \x73 \x20 \x25 \x64 \x20 \x26 \x20 \x54 \x6f \x74 \x61 \x6c \x20 \x2d \x2d \x2d \x3e \x3e \x3e " " \n " , i + ( 0x5e6 + 2020 - 0xdc9 ) ) ; for ( ReplacementFor_j = ( 0x137d + 1646 - 0x19eb ) ; ReplacementFor_j <= ReplacementFor_n ; ReplacementFor_j ++ ) { printf ( " \x72 \x25 \x64 \x25 \x64 \x20 \x3a \x20 " , i , ReplacementFor_j ) ; scanf ( " \x25 \x66 " , & m [ i ] [ ReplacementFor_j ] ) ; } printf ( " \n " ) ; } printf ( " \x3a \x3a \x3a \x3a \x3a \x3a \x3a \x3a \x3a \x3a \x3a \x3a \x20 \x43 \x75 \x72 \x72 \x65 \x6e \x74 \x20 \x4d \x61 \x74 \x72 \x69 \x78 \x20 \x3a \x3a \x3a \x3a \x3a \x3a \x3a \x3a \x3a \x3a \x3a \x3a " " \n \n " ) ; ReplacementFor_display ( m , ReplacementFor_n ) ; for ( i = ( 0x549 + 4357 - 0x164e ) ; i < ReplacementFor_n - ( 0x145f + 4033 - 0x241f ) ; i ++ ) { printf ( " \n " " \x2d \x2d \x2d \x2d \x2d \x2d \x2d \x3e \x3e \x3e \x3e \x3e \x3e \x3e \x3e \x3e \x3e \x3e \x3e \x3e \x3e \x3e \x3e \x3e \x3e \x3e \x3e \x3e \x3e \x3e \x3e \x2d \x2d \x2d \x2d \x2d \x2d \x2d \x2d \x20 \x25 \x64 " " \n " , i + ( 0x134 + 1458 - 0x6e5 ) ) ; m [ ReplacementFor_ARRAY_SIZE - ( 0x918 + 367 - 0xa86 ) ] [ ReplacementFor_ARRAY_SIZE - ( 0xb41 + 429 - 0xced ) ] = ReplacementFor_interchange ( m , i , ReplacementFor_n ) ; ReplacementFor_display ( m , ReplacementFor_n ) ; printf ( " \n " " \x5f \x5f \x5f \x5f \x5f \x5f \x5f \x5f \x5f \x5f \x5f \x5f \x5f \x5f \x5f \x5f \x5f \x5f \x5f \x5f \x5f \x5f \x5f \x5f \x5f \x5f \x5f \x5f \x5f \x5f \x5f \x5f \x5f \x5f \x5f \x5f \x5f \x5f \x5f " " \n " ) ; m [ ReplacementFor_ARRAY_SIZE - ( 0x1e5f + 74 - 0x1ea8 ) ] [ ReplacementFor_ARRAY_SIZE - ( 0x439 + 6013 - 0x1bb5 ) ] = ReplacementFor_eliminate ( m , i , ReplacementFor_n ) ; ReplacementFor_display ( m , ReplacementFor_n ) ; } printf ( " \n \n " " \x20 \x56 \x61 \x6c \x75 \x65 \x73 \x20 \x61 \x72 \x65 \x20 \x3a \x20 " " \n " ) ; for ( i = ReplacementFor_n - ( 0x2097 + 931 - 0x2439 ) ; i >= ( 0x1603 + 1156 - 0x1a87 ) ; i -- ) { l = ReplacementFor_n - ( 0x1c9 + 4866 - 0x14ca ) ; ReplacementFor_mul = ( 0x10bb + 28 - 0x10d7 ) ; for ( ReplacementFor_j = ( 0xab5 + 5024 - 0x1e55 ) ; ReplacementFor_j < ReplacementFor_k ; ReplacementFor_j ++ ) { ReplacementFor_mul = ReplacementFor_mul + m [ i ] [ l ] * ReplacementFor_ans [ l ] ; l -- ; } ReplacementFor_k ++ ; ReplacementFor_ans [ i ] = ( m [ i ] [ ReplacementFor_n ] - ReplacementFor_mul ) / m [ i ] [ i ] ; printf ( " \x58 \x25 \x64 \x20 \x3d \x20 \x25 \x2e \x32 \x66 " " \n " , i + ( 0x1270 + 2345 - 0x1b98 ) , ReplacementFor_ans [ i ] ) ; } return ( 0x2c5 + 2555 - 0xcc0 ) ; }
>>>Func
METHOD main
METHOD_RETURN int
printf printf(\012"\x45\x6e\x74\x65\x72\x20\x74\x77\x6f\x20\x6e\x75\x6d\x62\x65\x72\x73\x20\x74\x6f\x20\x66\x69\x6e\x64\x20\x74\x68\x65\x69\x72\x20\x4c\x43\x4d\x20" "\n"\012)
scanf scanf("\x25\x64\x25\x64",&ReplacementFor_a,&ReplacementFor_b)
printf printf(\012"\x4c\x43\x4d\x20\x6f\x66\x20\x25\x64\x20\x61\x6e\x64\x20\x25\x64\x20\x69\x73\x20\x25\x64\x20"\012 ReplacementFor_a ReplacementFor_b ReplacementFor_lcm(ReplacementFor_a,\012ReplacementFor_b))
RETURN return(0x1b09+698-0x1dc3); return(0x1b09+698-0x1dc3);
<operator>.subtraction 0x1b09+698-0x1dc3
ReplacementFor_lcm ReplacementFor_lcm(ReplacementFor_a,\012ReplacementFor_b)
<operator>.addition 0x1b09+698
>>>PDG&9 0->2 0->3 0->4 0->6 0->7 0->8 2->1 3->1 3->1 3->4 3->7 4->1 4->1 4->1 4->1 5->1 6->1 6->1 6->5 7->4 7->4
>>>Token int main ( ) { int ReplacementFor_a , ReplacementFor_b ; printf ( " \x45 \x6e \x74 \x65 \x72 \x20 \x74 \x77 \x6f \x20 \x6e \x75 \x6d \x62 \x65 \x72 \x73 \x20 \x74 \x6f \x20 \x66 \x69 \x6e \x64 \x20 \x74 \x68 \x65 \x69 \x72 \x20 \x4c \x43 \x4d \x20 " " \n " ) ; scanf ( " \x25 \x64 \x25 \x64 " , & ReplacementFor_a , & ReplacementFor_b ) ; printf ( " \x4c \x43 \x4d \x20 \x6f \x66 \x20 \x25 \x64 \x20 \x61 \x6e \x64 \x20 \x25 \x64 \x20 \x69 \x73 \x20 \x25 \x64 \x20 " , ReplacementFor_a , ReplacementFor_b , ReplacementFor_lcm ( ReplacementFor_a , ReplacementFor_b ) ) ; return ( 0x1b09 + 698 - 0x1dc3 ) ; }
>>>Func
METHOD main
METHOD_RETURN int
PARAM int ReplacementFor_argc
PARAM char*ReplacementFor_argv[]
<operator>.assignment ReplacementFor_verbose_level=ReplacementFor_VERBOSE_LEVEL_DEFAULT
<operator>.assignment *\012ReplacementFor_input_file_name_default="\x69\x6e\x70\x75\x74\x2e\x74\x78\x74"
<operator>.assignment *ReplacementFor_input_file_name=NULL
<operator>.assignment *\012ReplacementFor_output_file_name_default=\012"\x6f\x75\x74\x70\x75\x74\x2e\x74\x78\x74"
<operator>.assignment *ReplacementFor_output_file_name=\012NULL
<operator>.assignment ReplacementFor_input_file_ptr=fopen(\012ReplacementFor_input_file_name,"\x72")
<operator>.assignment ReplacementFor_output_file_ptr=fopen(\012ReplacementFor_output_file_name,"\x77")
<operator>.assignment ReplacementFor_temp_i=fscanf(\012ReplacementFor_input_file_ptr,"\x25\x64",&ReplacementFor_num_tests)
fclose fclose(ReplacementFor_input_file_ptr)
fclose fclose(\012ReplacementFor_output_file_ptr)
RETURN return(0x4af+804-0x7d3); return(0x4af+804-0x7d3);
<operator>.lessThan i<ReplacementFor_argc
<operator>.postIncrement i\012++
<operator>.equals ReplacementFor_input_file_name==NULL
<operator>.equals ReplacementFor_output_file_name==NULL
<operator>.equals ReplacementFor_input_file_ptr==NULL
<operator>.equals ReplacementFor_input_file_ptr==NULL
<operator>.greaterEqualsThan ReplacementFor_verbose_level>=(0x1324+647-0x15a9)
<operator>.lessEqualsThan ReplacementFor_test_id<=ReplacementFor_num_tests
<operator>.postIncrement ReplacementFor_test_id++
<operator>.subtraction 0x4af+804-0x7d3
<operator>.assignment i=(0x1dab+213-0x1e7f)
<operator>.assignment ReplacementFor_input_file_name=ReplacementFor_input_file_name_default
<operator>.assignment ReplacementFor_output_file_name=\012ReplacementFor_output_file_name_default
fopen fopen(\012ReplacementFor_input_file_name,"\x72")
printf printf(\012"\x45\x72\x72\x6f\x72\x20\x6f\x70\x65\x6e\x69\x6e\x67\x20\x69\x6e\x70\x75\x74\x20\x66\x69\x6c\x65\x2e" "\n"\012)
RETURN return(0xcd8+6253-0x2545); return(0xcd8+6253-0x2545);
fopen fopen(\012ReplacementFor_output_file_name,"\x77")
printf printf(\012"\x45\x72\x72\x6f\x72\x20\x6f\x70\x65\x6e\x69\x6e\x67\x20\x6f\x75\x74\x70\x75\x74\x20\x66\x69\x6c\x65\x2e" "\n"\012)
RETURN return(0x215+6952-0x1d3d); return(0x215+6952-0x1d3d);
fscanf fscanf(\012ReplacementFor_input_file_ptr,"\x25\x64",&ReplacementFor_num_tests)
printf printf(\012"\x20\x20\x4e\x75\x6d\x62\x65\x72\x20\x6f\x66\x20\x74\x65\x73\x74\x73\x3a\x20\x25\x64" "\n"\012,ReplacementFor_num_tests)
<operator>.assignment ReplacementFor_test_id=(0x24a+5569-0x180a)
<operator>.assignment ReplacementFor_temp_i=fscanf(ReplacementFor_input_file_ptr,"\x25\x64",&\012ReplacementFor_num_comb)
<operator>.assignment ReplacementFor_comb_list=malloc(ReplacementFor_num_comb\012*(0x14a+2999-0xcfe)*sizeof(char))
<operator>.assignment ReplacementFor_temp_i=fscanf(ReplacementFor_input_file_ptr,"\x25\x64",&\012ReplacementFor_num_dest)
<operator>.assignment ReplacementFor_dest_list=malloc(ReplacementFor_num_dest\012*(0x1091+5625-0x2688)*sizeof(char))
<operator>.assignment ReplacementFor_temp_i=fscanf(\012ReplacementFor_input_file_ptr,"\x25\x64",&ReplacementFor_num_input_elt)
<operator>.assignment ReplacementFor_input_elt_list=malloc(ReplacementFor_num_input_elt*sizeof(char))
<operator>.assignment ReplacementFor_output_elt_list=\012malloc(ReplacementFor_num_input_elt*sizeof(char))
<operator>.assignment ReplacementFor_j=-\012(0x9b6+502-0xbab)
<operator>.assignment ReplacementFor_num_output_elt=ReplacementFor_j+(0x9cc+564-0xbff)
fprintf fprintf(ReplacementFor_output_file_ptr,\012"\x43\x61\x73\x65\x20\x23\x25\x64\x3a\x20\x5b",ReplacementFor_test_id)
fprintf fprintf(ReplacementFor_output_file_ptr,\012"\x5d" "\n",ReplacementFor_output_elt_list[i])
free free(ReplacementFor_comb_list)
free free(ReplacementFor_dest_list)
free free(ReplacementFor_input_elt_list)
free free(\012ReplacementFor_output_elt_list)
<operator>.logicalAnd strcmp(ReplacementFor_argv[i],"\x2d\x69")==(0x63a+2221-0xee7)&&i+\012(0xacc+2416-0x143b)<ReplacementFor_argc
<operator>.subtraction 0xcd8+6253-0x2545
<operator>.subtraction 0x215+6952-0x1d3d
<operator>.subtraction 0x1324+647-0x15a9
<operator>.greaterEqualsThan ReplacementFor_verbose_level>=(0x1b4c+2319-0x245a)
<operator>.lessThan i<\012ReplacementFor_num_comb
<operator>.postIncrement i++
<operator>.lessThan i<\012ReplacementFor_num_dest
<operator>.postIncrement i++
<operator>.lessThan i<ReplacementFor_num_input_elt
<operator>.postIncrement i++
<operator>.greaterEqualsThan ReplacementFor_verbose_level>=\012(0x4ef+1414-0xa73)
<operator>.lessThan i<ReplacementFor_num_input_elt
<operator>.postIncrement i++
<operator>.greaterEqualsThan ReplacementFor_verbose_level>=\012(0xf08+1822-0x1622)
<operator>.greaterEqualsThan ReplacementFor_verbose_level>=(0x21c+7765-0x2070)
<operator>.lessEqualsThan i<=ReplacementFor_num_output_elt-(0x150b+2908-0x2065)
<operator>.postIncrement i++
<operator>.greaterThan ReplacementFor_num_output_elt>\012(0x7c9+4449-0x192a)
<operator>.addition 0x4af+804
<operator>.subtraction 0x1dab+213-0x1e7f
<operator>.assignment ReplacementFor_input_file_name=\012ReplacementFor_argv[++i]
<operator>.addition 0x1324+647
<operator>.subtraction 0x24a+5569-0x180a
printf printf(\012"\x20\x20\x54\x65\x73\x74\x20\x23\x25\x64\x3a" "\n",ReplacementFor_test_id)
fscanf fscanf(ReplacementFor_input_file_ptr,"\x25\x64",&\012ReplacementFor_num_comb)
malloc malloc(ReplacementFor_num_comb\012*(0x14a+2999-0xcfe)*sizeof(char))
<operator>.assignment i=(0xd+959-0x3cc)
<operator>.assignment ReplacementFor_temp_i=fscanf(\012ReplacementFor_input_file_ptr "\x20\x25\x63\x25\x63\x25\x63" &\012ReplacementFor_comb_list[i*(0xf06+1799-0x160a)+(0x4b3+4113-0x14c4)] &\012ReplacementFor_comb_list[i*(0x24a2+591-0x26ee)+(0xb39+2804-0x162c)] &\012ReplacementFor_comb_list[i*(0x1195+1687-0x1829)+(0x1903+1297-0x1e12)])
fscanf fscanf(ReplacementFor_input_file_ptr,"\x25\x64",&\012ReplacementFor_num_dest)
malloc malloc(ReplacementFor_num_dest\012*(0x1091+5625-0x2688)*sizeof(char))
<operator>.assignment i=(0xcb4+1737-0x137d)
<operator>.assignment ReplacementFor_temp_i=fscanf(\012ReplacementFor_input_file_ptr "\x20\x25\x63\x25\x63" &ReplacementFor_dest_list[i\012*(0x271+5826-0x1931)+(0x1b8a+759-0x1e81)] &ReplacementFor_dest_list[i*\012(0x2f1+3279-0xfbe)+(0x5c7+4551-0x178d)])
fscanf fscanf(\012ReplacementFor_input_file_ptr,"\x25\x64",&ReplacementFor_num_input_elt)
malloc malloc(ReplacementFor_num_input_elt*sizeof(char))
<operator>.assignment i=(0x884+2509-0x1251)
<operator>.assignment ReplacementFor_temp_i=fscanf(ReplacementFor_input_file_ptr,"\x20\x25\x63",&\012ReplacementFor_input_elt_list[i])
printf printf(\012"\x20\x20\x20\x20\x43\x6f\x6d\x62\x69\x6e\x61\x74\x69\x6f\x6e\x20\x72\x75\x6c\x65\x73\x3a"\012)
printf printf("\n")
printf printf(\012"\x20\x20\x20\x20\x44\x65\x73\x74\x72\x75\x63\x74\x69\x6f\x6e\x20\x72\x75\x6c\x65\x73\x3a"\012)
printf printf("\n")
printf printf(\012"\x20\x20\x20\x20\x49\x6e\x70\x75\x74\x20\x6c\x69\x73\x74\x3a\x20")
printf printf("\n")
malloc malloc(ReplacementFor_num_input_elt*sizeof(char))
<operator>.minus -\012(0x9b6+502-0xbab)
<operator>.assignment i=(0x1920+1977-0x20d9)
<operator>.assignmentPlus ReplacementFor_j\012+=(0x1151+4338-0x2242)
<operator>.assignment ReplacementFor_output_elt_list[ReplacementFor_j]=\012ReplacementFor_input_elt_list[i]
printf printf(\012"\x20\x20\x20\x20\x20\x20\x6f\x6c\x69\x73\x74\x3a\x20")
printf printf("\n"\012)
<operator>.addition ReplacementFor_j+(0x9cc+564-0xbff)
printf printf(\012"\x20\x20\x20\x20\x4f\x75\x74\x70\x75\x74\x20\x6c\x69\x73\x74\x3a\x20\x5b")
printf printf("\x5d" "\n",\012ReplacementFor_output_elt_list[i])
<operator>.assignment i=\012(0x12f+7732-0x1f63)
fprintf fprintf(ReplacementFor_output_file_ptr,"\x25\x63\x2c\x20",\012ReplacementFor_output_elt_list[i])
fprintf fprintf(ReplacementFor_output_file_ptr,"\x25\x63",\012ReplacementFor_output_elt_list[i])
<operator>.addition 0x1dab+213
<operator>.equals strcmp(ReplacementFor_argv[i],"\x2d\x69")==(0x63a+2221-0xee7)
<operator>.lessThan i+\012(0xacc+2416-0x143b)<ReplacementFor_argc
<operator>.addition 0xcd8+6253
<operator>.addition 0x215+6952
<operator>.addition 0x24a+5569
<operator>.subtraction 0x1b4c+2319-0x245a
<operator>.multiplication ReplacementFor_num_comb\012*(0x14a+2999-0xcfe)*sizeof(char)
<operator>.multiplication ReplacementFor_num_dest\012*(0x1091+5625-0x2688)*sizeof(char)
<operator>.multiplication ReplacementFor_num_input_elt*sizeof(char)
<operator>.subtraction 0x4ef+1414-0xa73
<operator>.lessThan i<ReplacementFor_num_comb
<operator>.postIncrement i++
<operator>.lessThan i<ReplacementFor_num_dest
<operator>.postIncrement i++
<operator>.lessThan i<ReplacementFor_num_input_elt
<operator>.postIncrement i++
<operator>.multiplication ReplacementFor_num_input_elt*sizeof(char)
<operator>.subtraction 0x9b6+502-0xbab
<operator>.greaterEqualsThan ReplacementFor_verbose_level>=(0xc40+157-0xcd9)
<operator>.equals ReplacementFor_j==-(0x1287+207-0x1355)
<operator>.lessThan ReplacementFor_k<ReplacementFor_num_comb
<operator>.postIncrement ReplacementFor_k++
<operator>.lessThan ReplacementFor_k<ReplacementFor_num_comb
<operator>.lessThan ReplacementFor_k<ReplacementFor_num_dest
<operator>.postIncrement ReplacementFor_k++
<operator>.lessThan ReplacementFor_k<ReplacementFor_num_dest
<operator>.subtraction 0xf08+1822-0x1622
<operator>.lessEqualsThan ReplacementFor_k<=ReplacementFor_j
<operator>.postIncrement ReplacementFor_k++
<operator>.subtraction 0x9cc+564-0xbff
<operator>.subtraction 0x21c+7765-0x2070
<operator>.lessEqualsThan i<=ReplacementFor_num_output_elt-(0x1c56+2369-0x2595)
<operator>.postIncrement i++
<operator>.greaterThan ReplacementFor_num_output_elt>(0x1ccd+1924-0x2451)
<operator>.subtraction ReplacementFor_num_output_elt-(0x150b+2908-0x2065)
<operator>.subtraction 0x7c9+4449-0x192a
strcmp strcmp(ReplacementFor_argv[i],"\x2d\x69")
<operator>.subtraction 0x63a+2221-0xee7
<operator>.addition i+\012(0xacc+2416-0x143b)
<operator>.logicalAnd strcmp(ReplacementFor_argv[i],"\x2d\x6f")==\012(0x101c+1011-0x140f)&&i+(0x1fdb+1778-0x26cc)<ReplacementFor_argc
<operator>.addition 0x1b4c+2319
<operator>.multiplication ReplacementFor_num_comb\012*(0x14a+2999-0xcfe)
<operator>.subtraction 0xd+959-0x3cc
fscanf fscanf(\012ReplacementFor_input_file_ptr "\x20\x25\x63\x25\x63\x25\x63" &\012ReplacementFor_comb_list[i*(0xf06+1799-0x160a)+(0x4b3+4113-0x14c4)] &\012ReplacementFor_comb_list[i*(0x24a2+591-0x26ee)+(0xb39+2804-0x162c)] &\012ReplacementFor_comb_list[i*(0x1195+1687-0x1829)+(0x1903+1297-0x1e12)])
<operator>.multiplication ReplacementFor_num_dest\012*(0x1091+5625-0x2688)
<operator>.subtraction 0xcb4+1737-0x137d
fscanf fscanf(\012ReplacementFor_input_file_ptr "\x20\x25\x63\x25\x63" &ReplacementFor_dest_list[i\012*(0x271+5826-0x1931)+(0x1b8a+759-0x1e81)] &ReplacementFor_dest_list[i*\012(0x2f1+3279-0xfbe)+(0x5c7+4551-0x178d)])
<operator>.subtraction 0x884+2509-0x1251
fscanf fscanf(ReplacementFor_input_file_ptr,"\x20\x25\x63",&\012ReplacementFor_input_elt_list[i])
<operator>.addition 0x4ef+1414
<operator>.assignment i=(0x22e4+463-0x24b3)
printf printf(\012"\x20\x25\x63\x25\x63\x25\x63" ReplacementFor_comb_list[i*(0x1fa3+1669-0x2625)+\012(0x12ff+4109-0x230c)] ReplacementFor_comb_list[i*(0xba5+2303-0x14a1)+\012(0x1390+1222-0x1855)] ReplacementFor_comb_list[i*(0x5f5+3423-0x1351)+\012(0x4b7+630-0x72b)])
<operator>.assignment i=(0x444+8672-0x2624)
printf printf(\012"\x20\x25\x63\x25\x63" ReplacementFor_dest_list[i*(0x18bd+2686-0x2339)+\012(0x8fb+7278-0x2569)] ReplacementFor_dest_list[i*(0x1749+1582-0x1d75)+\012(0x81c+1836-0xf47)])
<operator>.assignment i=\012(0xfa7+1185-0x1448)
printf printf("\x25\x63",\012ReplacementFor_input_elt_list[i])
<operator>.addition 0x9b6+502
<operator>.subtraction 0x1920+1977-0x20d9
printf printf(\012"\x20\x20\x20\x20\x20\x20\x6f\x6c\x69\x73\x74\x3a\x20")
printf printf("\n"\012)
<operator>.assignment ReplacementFor_j=\012(0x12f5+1429-0x188a)
<operator>.assignment ReplacementFor_output_elt_list[ReplacementFor_j]=\012ReplacementFor_input_elt_list[i]
<operator>.assignment ReplacementFor_k=\012(0x555+2221-0xe02)
<operator>.assignment ReplacementFor_k=\012(0x270+7528-0x1fd8)
<operator>.subtraction 0x1151+4338-0x2242
<operator>.addition 0xf08+1822
<operator>.assignment ReplacementFor_k=\012(0x199b+284-0x1ab7)
printf printf("\x25\x63",ReplacementFor_output_elt_list[ReplacementFor_k])
<operator>.addition 0x9cc+564
<operator>.addition 0x21c+7765
<operator>.assignment i=(0xf29+1242-0x1403)
printf printf("\x25\x63\x2c\x20",ReplacementFor_output_elt_list[i])
printf printf("\x25\x63",\012ReplacementFor_output_elt_list[i])
<operator>.subtraction 0x12f+7732-0x1f63
<operator>.subtraction 0x150b+2908-0x2065
<operator>.addition 0x7c9+4449
<operator>.addition 0x63a+2221
<operator>.subtraction 0xacc+2416-0x143b
<operator>.preIncrement ++i
<operator>.assignment ReplacementFor_output_file_name=ReplacementFor_argv[++i]
<operator>.subtraction 0x14a+2999-0xcfe
<operator>.addition 0xd+959
<operator>.subtraction 0x1091+5625-0x2688
<operator>.addition 0xcb4+1737
<operator>.addition 0x884+2509
<operator>.addition 0x1920+1977
<operator>.subtraction 0xc40+157-0xcd9
<operator>.lessEqualsThan ReplacementFor_k<=ReplacementFor_j
<operator>.postIncrement ReplacementFor_k++
<operator>.minus -(0x1287+207-0x1355)
<operator>.logicalOr ((ReplacementFor_output_elt_list[ReplacementFor_j]==ReplacementFor_comb_list[\012ReplacementFor_k*(0x25f+1531-0x857)+(0x1451+3289-0x212a)])&&(\012ReplacementFor_input_elt_list[i]==ReplacementFor_comb_list[ReplacementFor_k*\012(0x587+1264-0xa74)+(0x1a01+1708-0x20ac)]))||((ReplacementFor_output_elt_list[\012ReplacementFor_j]==ReplacementFor_comb_list[ReplacementFor_k*(0x392+8813-0x25fc)\012+(0x1fed+1587-0x261f)])&&(ReplacementFor_input_elt_list[i]==\012ReplacementFor_comb_list[ReplacementFor_k*(0x201+138-0x288)+(0xe62+1624-0x14ba)]\012))
<operator>.lessEqualsThan l<=ReplacementFor_j
<operator>.postIncrement l++
<operator>.lessEqualsThan l<=ReplacementFor_j
<operator>.addition 0x1151+4338
<operator>.subtraction ReplacementFor_num_output_elt-(0x1c56+2369-0x2595)
<operator>.subtraction 0x1ccd+1924-0x2451
<operator>.addition 0x12f+7732
<operator>.addition 0x150b+2908
<operator>.addition 0xacc+2416
<operator>.equals strcmp(ReplacementFor_argv[i],"\x2d\x6f")==\012(0x101c+1011-0x140f)
<operator>.lessThan i+(0x1fdb+1778-0x26cc)<ReplacementFor_argc
<operator>.addition 0x14a+2999
<operator>.addition 0x1091+5625
<operator>.subtraction 0x22e4+463-0x24b3
<operator>.subtraction 0x444+8672-0x2624
<operator>.subtraction 0xfa7+1185-0x1448
<operator>.addition 0xc40+157
<operator>.assignment ReplacementFor_k=\012(0x1c13+2168-0x248b)
printf printf("\x25\x63",ReplacementFor_output_elt_list[ReplacementFor_k])
<operator>.subtraction 0x1287+207-0x1355
<operator>.subtraction 0x12f5+1429-0x188a
<operator>.subtraction 0x555+2221-0xe02
<operator>.assignment ReplacementFor_output_elt_list[ReplacementFor_j]=ReplacementFor_comb_list[\012ReplacementFor_k*(0xb1d+2205-0x13b7)+(0x1b1+5807-0x185e)]
<operator>.subtraction 0x270+7528-0x1fd8
<operator>.assignment l=(0x388+6475-0x1cd3)
<operator>.assignment ReplacementFor_j=-(0x12a1+1617-0x18f1)
<operator>.subtraction 0x199b+284-0x1ab7
<operator>.subtraction 0xf29+1242-0x1403
<operator>.subtraction 0x1c56+2369-0x2595
<operator>.addition 0x1ccd+1924
strcmp strcmp(ReplacementFor_argv[i],"\x2d\x6f")
<operator>.subtraction 0x101c+1011-0x140f
<operator>.addition i+(0x1fdb+1778-0x26cc)
<operator>.equals strcmp(\012ReplacementFor_argv[i],"\x2d\x76")==(0x129+5625-0x1722)
<operator>.addition i*(0xf06+1799-0x160a)+(0x4b3+4113-0x14c4)
<operator>.addition i*(0x24a2+591-0x26ee)+(0xb39+2804-0x162c)
<operator>.addition i*(0x1195+1687-0x1829)+(0x1903+1297-0x1e12)
<operator>.addition i\012*(0x271+5826-0x1931)+(0x1b8a+759-0x1e81)
<operator>.addition i*\012(0x2f1+3279-0xfbe)+(0x5c7+4551-0x178d)
<operator>.addition 0x22e4+463
<operator>.addition i*(0x1fa3+1669-0x2625)+\012(0x12ff+4109-0x230c)
<operator>.addition i*(0xba5+2303-0x14a1)+\012(0x1390+1222-0x1855)
<operator>.addition i*(0x5f5+3423-0x1351)+\012(0x4b7+630-0x72b)
<operator>.addition 0x444+8672
<operator>.addition i*(0x18bd+2686-0x2339)+\012(0x8fb+7278-0x2569)
<operator>.addition i*(0x1749+1582-0x1d75)+\012(0x81c+1836-0xf47)
<operator>.addition 0xfa7+1185
<operator>.addition 0x1287+207
<operator>.addition 0x12f5+1429
<operator>.addition 0x555+2221
<operator>.logicalAnd (ReplacementFor_output_elt_list[ReplacementFor_j]==ReplacementFor_comb_list[\012ReplacementFor_k*(0x25f+1531-0x857)+(0x1451+3289-0x212a)])&&(\012ReplacementFor_input_elt_list[i]==ReplacementFor_comb_list[ReplacementFor_k*\012(0x587+1264-0xa74)+(0x1a01+1708-0x20ac)])
<operator>.logicalAnd (ReplacementFor_output_elt_list[\012ReplacementFor_j]==ReplacementFor_comb_list[ReplacementFor_k*(0x392+8813-0x25fc)\012+(0x1fed+1587-0x261f)])&&(ReplacementFor_input_elt_list[i]==\012ReplacementFor_comb_list[ReplacementFor_k*(0x201+138-0x288)+(0xe62+1624-0x14ba)]\012)
<operator>.addition 0x270+7528
<operator>.logicalOr ((\012ReplacementFor_output_elt_list[l]==ReplacementFor_dest_list[ReplacementFor_k*\012(0x1331+1909-0x1aa4)+(0x10e1+683-0x138c)])&&(ReplacementFor_input_elt_list[i]==\012ReplacementFor_dest_list[ReplacementFor_k*(0x105d+3509-0x1e10)+\012(0x1bc0+2508-0x258b)]))||((ReplacementFor_output_elt_list[l]==\012ReplacementFor_dest_list[ReplacementFor_k*(0x18cf+2600-0x22f5)+\012(0xda7+6442-0x26d0)])&&(ReplacementFor_input_elt_list[i]==\012ReplacementFor_dest_list[ReplacementFor_k*(0x21d+6112-0x19fb)+(0x1a4+2637-0xbf1)\012]))
<operator>.addition 0x199b+284
<operator>.addition 0xf29+1242
<operator>.addition 0x1c56+2369
<operator>.addition 0x101c+1011
<operator>.subtraction 0x1fdb+1778-0x26cc
<operator>.preIncrement ++i
<operator>.assignment ReplacementFor_verbose_level=atoi(ReplacementFor_argv[++i])
<operator>.multiplication i*(0xf06+1799-0x160a)
<operator>.subtraction 0x4b3+4113-0x14c4
<operator>.multiplication i*(0x24a2+591-0x26ee)
<operator>.subtraction 0xb39+2804-0x162c
<operator>.multiplication i*(0x1195+1687-0x1829)
<operator>.subtraction 0x1903+1297-0x1e12
<operator>.multiplication i\012*(0x271+5826-0x1931)
<operator>.subtraction 0x1b8a+759-0x1e81
<operator>.multiplication i*\012(0x2f1+3279-0xfbe)
<operator>.subtraction 0x5c7+4551-0x178d
<operator>.multiplication i*(0x1fa3+1669-0x2625)
<operator>.subtraction 0x12ff+4109-0x230c
<operator>.multiplication i*(0xba5+2303-0x14a1)
<operator>.subtraction 0x1390+1222-0x1855
<operator>.multiplication i*(0x5f5+3423-0x1351)
<operator>.subtraction 0x4b7+630-0x72b
<operator>.multiplication i*(0x18bd+2686-0x2339)
<operator>.subtraction 0x8fb+7278-0x2569
<operator>.multiplication i*(0x1749+1582-0x1d75)
<operator>.subtraction 0x81c+1836-0xf47
<operator>.subtraction 0x1c13+2168-0x248b
<operator>.equals ReplacementFor_output_elt_list[ReplacementFor_j]==ReplacementFor_comb_list[\012ReplacementFor_k*(0x25f+1531-0x857)+(0x1451+3289-0x212a)]
<operator>.equals ReplacementFor_input_elt_list[i]==ReplacementFor_comb_list[ReplacementFor_k*\012(0x587+1264-0xa74)+(0x1a01+1708-0x20ac)]
<operator>.equals ReplacementFor_output_elt_list[\012ReplacementFor_j]==ReplacementFor_comb_list[ReplacementFor_k*(0x392+8813-0x25fc)\012+(0x1fed+1587-0x261f)]
<operator>.equals ReplacementFor_input_elt_list[i]==\012ReplacementFor_comb_list[ReplacementFor_k*(0x201+138-0x288)+(0xe62+1624-0x14ba)]
<operator>.subtraction 0x388+6475-0x1cd3
<operator>.minus -(0x12a1+1617-0x18f1)
<operator>.addition 0x1fdb+1778
strcmp strcmp(\012ReplacementFor_argv[i],"\x2d\x76")
<operator>.subtraction 0x129+5625-0x1722
printf printf(\012"\x45\x72\x72\x6f\x72\x20\x70\x61\x72\x73\x69\x6e\x67\x20\x61\x72\x67\x75\x6d\x65\x6e\x74\x73\x21" "\n"\012)
printf printf(\012"\x55\x73\x61\x67\x65\x3a\x20\x62\x6f\x74\x5f\x74\x72\x75\x73\x74\x2e\x62\x69\x6e\x20\x2d\x69\x20\x3c\x69\x6e\x70\x75\x74\x5f\x66\x69\x6c\x65\x5f\x6e\x61\x6d\x65\x3e\x20\x2d\x6f\x20\x3c\x6f\x75\x74\x70\x75\x74\x5f\x66\x69\x6c\x65\x5f\x6e\x61\x6d\x65\x3e"\012)
printf printf(\012"\x20\x20\x2d\x76\x20\x3c\x76\x65\x72\x62\x6f\x73\x65\x5f\x6c\x65\x76\x65\x6c\x3e" "\n"\012)
RETURN return(0x445+6072-0x1bfd); return(0x445+6072-0x1bfd);
<operator>.subtraction 0xf06+1799-0x160a
<operator>.addition 0x4b3+4113
<operator>.subtraction 0x24a2+591-0x26ee
<operator>.addition 0xb39+2804
<operator>.subtraction 0x1195+1687-0x1829
<operator>.addition 0x1903+1297
<operator>.subtraction 0x271+5826-0x1931
<operator>.addition 0x1b8a+759
<operator>.subtraction 0x2f1+3279-0xfbe
<operator>.addition 0x5c7+4551
<operator>.subtraction 0x1fa3+1669-0x2625
<operator>.addition 0x12ff+4109
<operator>.subtraction 0xba5+2303-0x14a1
<operator>.addition 0x1390+1222
<operator>.subtraction 0x5f5+3423-0x1351
<operator>.addition 0x4b7+630
<operator>.subtraction 0x18bd+2686-0x2339
<operator>.addition 0x8fb+7278
<operator>.subtraction 0x1749+1582-0x1d75
<operator>.addition 0x81c+1836
<operator>.addition 0x1c13+2168
<operator>.addition ReplacementFor_k*(0xb1d+2205-0x13b7)+(0x1b1+5807-0x185e)
<operator>.addition 0x388+6475
<operator>.logicalAnd (\012ReplacementFor_output_elt_list[l]==ReplacementFor_dest_list[ReplacementFor_k*\012(0x1331+1909-0x1aa4)+(0x10e1+683-0x138c)])&&(ReplacementFor_input_elt_list[i]==\012ReplacementFor_dest_list[ReplacementFor_k*(0x105d+3509-0x1e10)+\012(0x1bc0+2508-0x258b)])
<operator>.logicalAnd (ReplacementFor_output_elt_list[l]==\012ReplacementFor_dest_list[ReplacementFor_k*(0x18cf+2600-0x22f5)+\012(0xda7+6442-0x26d0)])&&(ReplacementFor_input_elt_list[i]==\012ReplacementFor_dest_list[ReplacementFor_k*(0x21d+6112-0x19fb)+(0x1a4+2637-0xbf1)\012])
<operator>.subtraction 0x12a1+1617-0x18f1
<operator>.addition 0x129+5625
atoi atoi(ReplacementFor_argv[++i])
<operator>.subtraction 0x445+6072-0x1bfd
<operator>.addition 0xf06+1799
<operator>.addition 0x24a2+591
<operator>.addition 0x1195+1687
<operator>.addition 0x271+5826
<operator>.addition 0x2f1+3279
<operator>.addition 0x1fa3+1669
<operator>.addition 0xba5+2303
<operator>.addition 0x5f5+3423
<operator>.addition 0x18bd+2686
<operator>.addition 0x1749+1582
<operator>.addition ReplacementFor_k*(0x25f+1531-0x857)+(0x1451+3289-0x212a)
<operator>.addition ReplacementFor_k*\012(0x587+1264-0xa74)+(0x1a01+1708-0x20ac)
<operator>.addition ReplacementFor_k*(0x392+8813-0x25fc)\012+(0x1fed+1587-0x261f)
<operator>.addition ReplacementFor_k*(0x201+138-0x288)+(0xe62+1624-0x14ba)
<operator>.multiplication ReplacementFor_k*(0xb1d+2205-0x13b7)
<operator>.subtraction 0x1b1+5807-0x185e
<operator>.equals ReplacementFor_output_elt_list[l]==ReplacementFor_dest_list[ReplacementFor_k*\012(0x1331+1909-0x1aa4)+(0x10e1+683-0x138c)]
<operator>.equals ReplacementFor_input_elt_list[i]==\012ReplacementFor_dest_list[ReplacementFor_k*(0x105d+3509-0x1e10)+\012(0x1bc0+2508-0x258b)]
<operator>.equals ReplacementFor_output_elt_list[l]==\012ReplacementFor_dest_list[ReplacementFor_k*(0x18cf+2600-0x22f5)+\012(0xda7+6442-0x26d0)]
<operator>.equals ReplacementFor_input_elt_list[i]==\012ReplacementFor_dest_list[ReplacementFor_k*(0x21d+6112-0x19fb)+(0x1a4+2637-0xbf1)\012]
<operator>.addition 0x12a1+1617
<operator>.multiplication ReplacementFor_k*(0x25f+1531-0x857)
<operator>.subtraction 0x1451+3289-0x212a
<operator>.multiplication ReplacementFor_k*\012(0x587+1264-0xa74)
<operator>.subtraction 0x1a01+1708-0x20ac
<operator>.multiplication ReplacementFor_k*(0x392+8813-0x25fc)
<operator>.subtraction 0x1fed+1587-0x261f
<operator>.multiplication ReplacementFor_k*(0x201+138-0x288)
<operator>.subtraction 0xe62+1624-0x14ba
<operator>.subtraction 0xb1d+2205-0x13b7
<operator>.addition 0x1b1+5807
<operator>.preIncrement ++i
<operator>.addition 0x445+6072
<operator>.subtraction 0x25f+1531-0x857
<operator>.addition 0x1451+3289
<operator>.subtraction 0x587+1264-0xa74
<operator>.addition 0x1a01+1708
<operator>.subtraction 0x392+8813-0x25fc
<operator>.addition 0x1fed+1587
<operator>.subtraction 0x201+138-0x288
<operator>.addition 0xe62+1624
<operator>.addition 0xb1d+2205
<operator>.addition ReplacementFor_k*\012(0x1331+1909-0x1aa4)+(0x10e1+683-0x138c)
<operator>.addition ReplacementFor_k*(0x105d+3509-0x1e10)+\012(0x1bc0+2508-0x258b)
<operator>.addition ReplacementFor_k*(0x18cf+2600-0x22f5)+\012(0xda7+6442-0x26d0)
<operator>.addition ReplacementFor_k*(0x21d+6112-0x19fb)+(0x1a4+2637-0xbf1)
<operator>.addition 0x25f+1531
<operator>.addition 0x587+1264
<operator>.addition 0x392+8813
<operator>.addition 0x201+138
<operator>.multiplication ReplacementFor_k*\012(0x1331+1909-0x1aa4)
<operator>.subtraction 0x10e1+683-0x138c
<operator>.multiplication ReplacementFor_k*(0x105d+3509-0x1e10)
<operator>.subtraction 0x1bc0+2508-0x258b
<operator>.multiplication ReplacementFor_k*(0x18cf+2600-0x22f5)
<operator>.subtraction 0xda7+6442-0x26d0
<operator>.multiplication ReplacementFor_k*(0x21d+6112-0x19fb)
<operator>.subtraction 0x1a4+2637-0xbf1
<operator>.subtraction 0x1331+1909-0x1aa4
<operator>.addition 0x10e1+683
<operator>.subtraction 0x105d+3509-0x1e10
<operator>.addition 0x1bc0+2508
<operator>.subtraction 0x18cf+2600-0x22f5
<operator>.addition 0xda7+6442
<operator>.subtraction 0x21d+6112-0x19fb
<operator>.addition 0x1a4+2637
<operator>.addition 0x1331+1909
<operator>.addition 0x105d+3509
<operator>.addition 0x18cf+2600
<operator>.addition 0x21d+6112
<operator>.addressOf &ReplacementFor_num_tests
<operator>.indirectIndexAccess ReplacementFor_output_elt_list[i]
<operator>.addressOf &\012ReplacementFor_num_comb
<operator>.addressOf &\012ReplacementFor_num_dest
<operator>.addressOf &ReplacementFor_num_input_elt
<operator>.indirectIndexAccess ReplacementFor_argv[++i]
<operator>.sizeOf sizeof(char)
<operator>.sizeOf sizeof(char)
<operator>.sizeOf sizeof(char)
<operator>.sizeOf sizeof(char)
<operator>.indirectIndexAccess ReplacementFor_output_elt_list[ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_input_elt_list[i]
<operator>.indirectIndexAccess ReplacementFor_output_elt_list[i]
<operator>.indirectIndexAccess ReplacementFor_output_elt_list[i]
<operator>.indirectIndexAccess ReplacementFor_output_elt_list[i]
<operator>.indirectIndexAccess ReplacementFor_argv[i]
<operator>.addressOf &\012ReplacementFor_comb_list[i*(0xf06+1799-0x160a)+(0x4b3+4113-0x14c4)]
<operator>.addressOf &\012ReplacementFor_comb_list[i*(0x24a2+591-0x26ee)+(0xb39+2804-0x162c)]
<operator>.addressOf &\012ReplacementFor_comb_list[i*(0x1195+1687-0x1829)+(0x1903+1297-0x1e12)]
<operator>.addressOf &ReplacementFor_dest_list[i\012*(0x271+5826-0x1931)+(0x1b8a+759-0x1e81)]
<operator>.addressOf &ReplacementFor_dest_list[i*\012(0x2f1+3279-0xfbe)+(0x5c7+4551-0x178d)]
<operator>.addressOf &\012ReplacementFor_input_elt_list[i]
<operator>.indirectIndexAccess ReplacementFor_comb_list[i*(0xf06+1799-0x160a)+(0x4b3+4113-0x14c4)]
<operator>.indirectIndexAccess ReplacementFor_comb_list[i*(0x24a2+591-0x26ee)+(0xb39+2804-0x162c)]
<operator>.indirectIndexAccess ReplacementFor_comb_list[i*(0x1195+1687-0x1829)+(0x1903+1297-0x1e12)]
<operator>.indirectIndexAccess ReplacementFor_dest_list[i\012*(0x271+5826-0x1931)+(0x1b8a+759-0x1e81)]
<operator>.indirectIndexAccess ReplacementFor_dest_list[i*\012(0x2f1+3279-0xfbe)+(0x5c7+4551-0x178d)]
<operator>.indirectIndexAccess ReplacementFor_input_elt_list[i]
<operator>.indirectIndexAccess ReplacementFor_comb_list[i*(0x1fa3+1669-0x2625)+\012(0x12ff+4109-0x230c)]
<operator>.indirectIndexAccess ReplacementFor_comb_list[i*(0xba5+2303-0x14a1)+\012(0x1390+1222-0x1855)]
<operator>.indirectIndexAccess ReplacementFor_comb_list[i*(0x5f5+3423-0x1351)+\012(0x4b7+630-0x72b)]
<operator>.indirectIndexAccess ReplacementFor_dest_list[i*(0x18bd+2686-0x2339)+\012(0x8fb+7278-0x2569)]
<operator>.indirectIndexAccess ReplacementFor_dest_list[i*(0x1749+1582-0x1d75)+\012(0x81c+1836-0xf47)]
<operator>.indirectIndexAccess ReplacementFor_input_elt_list[i]
<operator>.indirectIndexAccess ReplacementFor_output_elt_list[ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_input_elt_list[i]
<operator>.indirectIndexAccess ReplacementFor_output_elt_list[ReplacementFor_k]
<operator>.indirectIndexAccess ReplacementFor_output_elt_list[i]
<operator>.indirectIndexAccess ReplacementFor_output_elt_list[i]
<operator>.indirectIndexAccess ReplacementFor_argv[++i]
<operator>.indirectIndexAccess ReplacementFor_argv[i]
<operator>.indirectIndexAccess ReplacementFor_output_elt_list[ReplacementFor_k]
<operator>.indirectIndexAccess ReplacementFor_output_elt_list[ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_comb_list[\012ReplacementFor_k*(0xb1d+2205-0x13b7)+(0x1b1+5807-0x185e)]
<operator>.indirectIndexAccess ReplacementFor_output_elt_list[ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_comb_list[\012ReplacementFor_k*(0x25f+1531-0x857)+(0x1451+3289-0x212a)]
<operator>.indirectIndexAccess ReplacementFor_input_elt_list[i]
<operator>.indirectIndexAccess ReplacementFor_comb_list[ReplacementFor_k*\012(0x587+1264-0xa74)+(0x1a01+1708-0x20ac)]
<operator>.indirectIndexAccess ReplacementFor_output_elt_list[\012ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_comb_list[ReplacementFor_k*(0x392+8813-0x25fc)\012+(0x1fed+1587-0x261f)]
<operator>.indirectIndexAccess ReplacementFor_input_elt_list[i]
<operator>.indirectIndexAccess ReplacementFor_comb_list[ReplacementFor_k*(0x201+138-0x288)+(0xe62+1624-0x14ba)]
<operator>.indirectIndexAccess ReplacementFor_argv[i]
<operator>.indirectIndexAccess ReplacementFor_argv[++i]
<operator>.indirectIndexAccess ReplacementFor_output_elt_list[l]
<operator>.indirectIndexAccess ReplacementFor_dest_list[ReplacementFor_k*\012(0x1331+1909-0x1aa4)+(0x10e1+683-0x138c)]
<operator>.indirectIndexAccess ReplacementFor_input_elt_list[i]
<operator>.indirectIndexAccess ReplacementFor_dest_list[ReplacementFor_k*(0x105d+3509-0x1e10)+\012(0x1bc0+2508-0x258b)]
<operator>.indirectIndexAccess ReplacementFor_output_elt_list[l]
<operator>.indirectIndexAccess ReplacementFor_dest_list[ReplacementFor_k*(0x18cf+2600-0x22f5)+\012(0xda7+6442-0x26d0)]
<operator>.indirectIndexAccess ReplacementFor_input_elt_list[i]
<operator>.indirectIndexAccess ReplacementFor_dest_list[ReplacementFor_k*(0x21d+6112-0x19fb)+(0x1a4+2637-0xbf1)\012]
>>>PDG&456 0->2 0->3 0->4 0->5 0->6 0->7 0->8 0->12 0->13 0->15 0->16 0->17 0->18 0->19 0->20 0->21 0->22 0->23 0->24 0->26 0->27 0->28 0->29 0->31 0->32 0->34 0->35 0->45 0->46 0->47 0->48 0->49 0->50 0->51 0->53 0->54 0->55 0->56 0->57 0->58 0->59 0->60 0->61 0->62 0->63 0->64 0->65 0->66 0->67 0->68 0->69 0->70 0->71 0->72 0->74 0->75 0->76 0->77 0->81 0->85 0->89 0->90 0->91 0->92 0->93 0->94 0->98 0->100 0->101 0->102 0->103 0->104 0->106 0->107 0->108 0->110 0->111 0->112 0->113 0->114 0->117 0->118 0->119 0->120 0->121 0->122 0->123 0->124 0->125 0->126 0->127 0->128 0->129 0->130 0->131 0->132 0->133 0->134 0->135 0->136 0->137 0->138 0->139 0->140 0->141 0->142 0->143 0->144 0->145 0->146 0->147 0->149 0->150 0->151 0->152 0->153 0->154 0->155 0->156 0->157 0->158 0->160 0->162 0->164 0->165 0->166 0->167 0->168 0->173 0->174 0->176 0->177 0->178 0->180 0->181 0->182 0->183 0->184 0->185 0->186 0->187 0->189 0->190 0->191 0->192 0->193 0->194 0->195 0->196 0->197 0->200 0->201 0->202 0->203 0->204 0->205 0->206 0->207 0->208 0->210 0->211 0->212 0->213 0->214 0->215 0->216 0->218 0->219 0->220 0->221 0->223 0->226 0->227 0->228 0->229 0->230 0->231 0->232 0->239 0->243 0->246 0->247 0->248 0->249 0->252 0->254 0->255 0->256 0->257 0->258 0->259 0->261 0->262 0->263 0->264 0->265 0->266 0->267 0->268 0->269 0->270 0->271 0->272 0->273 0->274 0->275 0->276 0->277 0->278 0->279 0->280 0->281 0->286 0->288 0->289 0->290 0->291 0->292 0->293 0->295 0->296 0->297 0->298 0->299 0->300 0->301 0->302 0->303 0->304 0->305 0->306 0->307 0->308 0->309 0->310 0->311 0->312 0->313 0->314 0->315 0->317 0->320 0->321 0->323 0->324 0->325 0->326 0->327 0->328 0->329 0->330 0->331 0->332 0->333 0->338 0->339 0->344 0->345 0->346 0->347 0->348 0->349 0->350 0->351 0->352 0->353 0->354 0->355 0->356 0->357 0->358 0->359 0->360 0->361 0->362 0->363 0->364 0->365 0->370 0->371 0->372 0->373 0->374 0->375 0->376 0->377 0->378 0->379 0->380 0->381 0->382 0->383 0->384 0->385 0->386 0->387 0->388 0->389 0->390 0->391 0->392 0->393 2->15 3->1 3->73 3->145 3->188 3->230 3->289 3->322 4->1 4->1 4->1 4->21 5->1 5->1 5->26 6->1 6->1 6->17 7->1 7->1 7->27 8->1 8->1 8->1 8->18 9->19 10->13 10->46 14->1 15->1 15->1 15->1 15->9 15->17 15->18 15->19 15->28 15->52 15->109 15->110 15->110 15->145 15->146 15->147 15->185 15->187 15->210 15->210 15->232 15->259 15->355 15->409 16->1 16->15 17->18 17->26 17->28 18->19 18->27 18->31 19->10 19->20 19->20 19->20 19->29 19->30 19->31 19->53 19->111 20->11 20->12 20->13 20->14 20->21 20->22 20->24 20->32 20->33 20->34 20->34 20->36 20->54 20->55 20->71 20->74 20->75 20->112 20->113 20->394 21->35 21->56 22->22 22->23 22->37 22->38 22->39 22->40 22->41 22->42 22->43 22->44 22->45 22->46 22->46 22->47 22->48 22->49 22->50 22->51 22->56 22->57 22->59 22->61 22->63 22->64 22->66 22->67 22->68 22->70 22->76 22->77 22->78 22->79 22->81 22->82 22->83 22->85 22->86 22->87 22->95 22->96 22->97 22->102 22->105 22->114 22->115 22->116 22->117 22->118 22->125 22->126 22->135 22->138 22->139 22->143 22->144 22->149 22->150 22->151 22->153 22->154 22->156 22->158 22->165 22->166 22->174 22->177 22->178 22->182 22->183 22->184 22->189 22->190 22->191 22->192 22->193 22->194 22->206 22->207 22->211 22->212 22->395 22->396 22->397 22->398 22->400 22->401 22->402 22->403 23->22 24->14 25->1 25->1 25->15 26->28 27->31 28->9 28->9 30->1 31->10 31->10 33->1 34->11 34->11 34->11 34->12 34->22 34->35 34->77 35->22 36->22 38->48 38->152 38->160 38->222 38->282 38->283 38->284 38->285 40->49 40->155 40->162 40->340 40->341 40->342 40->343 42->50 42->99 42->157 42->164 42->170 42->283 42->285 42->341 42->343 43->47 43->51 43->104 43->106 43->107 43->176 43->180 43->181 43->218 43->282 43->284 43->340 43->342 44->45 44->102 44->128 44->136 44->196 45->143 45->204 46->23 46->47 46->106 46->107 47->13 47->46 47->51 47->104 47->106 47->107 47->180 47->181 52->1 52->1 52->1 52->15 52->16 52->73 52->148 52->187 52->209 52->230 52->231 52->257 52->399 52->434 53->30 54->33 55->21 55->21 56->63 56->76 57->57 57->58 57->77 57->80 57->119 57->129 57->150 57->152 57->234 57->235 57->236 57->261 57->261 57->262 57->263 57->264 57->265 57->266 57->295 57->296 57->297 57->298 57->299 57->300 57->324 57->325 57->326 57->410 57->411 57->412 57->416 57->417 57->418 58->57 59->59 59->60 59->81 59->84 59->121 59->132 59->153 59->155 59->237 59->238 59->267 59->267 59->268 59->269 59->270 59->301 59->302 59->303 59->304 59->327 59->328 59->413 59->414 59->419 59->420 60->59 61->61 61->62 61->62 61->88 61->123 61->125 61->157 61->415 61->421 62->61 63->66 63->89 63->90 63->91 63->92 63->93 63->94 63->119 63->121 63->123 63->127 63->159 63->161 63->163 63->213 63->214 63->215 63->239 63->243 63->246 64->64 64->65 64->65 64->85 64->117 64->127 64->128 64->195 64->198 64->216 64->219 64->247 65->64 66->67 66->100 66->101 66->136 66->175 66->226 66->254 67->56 67->103 67->104 67->140 67->142 67->179 67->204 67->205 67->227 67->228 67->229 67->255 67->256 67->406 68->68 68->69 68->69 68->106 68->143 68->183 68->207 68->407 69->68 70->107 70->408 72->1 72->25 72->25 73->1 73->1 73->1 73->17 75->36 75->36 76->46 77->37 77->37 77->37 77->57 77->81 77->119 77->129 77->131 77->150 77->152 78->38 79->57 81->39 81->39 81->39 81->59 81->85 81->121 81->132 81->134 81->153 81->155 82->40 83->59 85->12 85->41 85->41 85->41 85->61 85->64 85->77 85->117 85->123 85->125 85->157 86->42 87->61 95->43 96->44 97->64 98->45 98->102 98->128 98->136 98->196 99->51 99->282 104->47 104->106 104->107 105->68 106->47 106->47 106->107 106->107 107->47 107->47 109->1 109->1 109->52 109->52 109->110 109->147 109->186 109->208 110->1 110->1 110->15 110->52 110->52 110->210 114->56 114->56 115->78 116->82 117->61 117->86 118->63 118->63 119->77 119->119 119->120 119->129 119->150 119->160 119->240 119->241 119->242 119->271 119->271 119->272 119->273 119->274 119->275 119->276 119->305 119->306 119->307 119->308 119->309 119->310 119->329 119->330 119->331 119->422 119->423 119->424 120->119 121->81 121->121 121->122 121->132 121->153 121->162 121->244 121->245 121->277 121->277 121->278 121->279 121->280 121->311 121->312 121->313 121->314 121->332 121->333 121->425 121->426 122->121 123->123 123->124 123->124 123->125 123->164 123->427 124->123 125->64 125->95 126->96 126->96 127->66 127->167 127->168 127->196 127->217 127->281 127->315 128->45 128->98 128->102 128->129 128->131 128->136 128->169 128->170 128->171 128->196 128->200 128->220 128->221 128->248 128->249 128->428 128->429 129->131 129->131 129->199 129->250 129->282 129->334 129->345 129->345 129->346 129->357 129->358 129->370 129->438 129->439 130->129 131->77 131->129 131->132 131->134 131->150 131->172 131->223 131->252 132->133 132->134 132->134 132->200 132->202 132->224 132->286 132->317 132->374 133->132 134->81 134->98 134->99 134->132 134->153 134->173 134->203 134->404 134->405 135->66 135->66 136->45 136->102 136->136 136->137 136->137 136->176 136->430 137->136 138->45 138->45 138->102 138->102 139->67 139->67 140->140 140->141 140->141 140->180 140->204 140->228 140->256 140->431 141->140 142->143 142->181 142->432 143->68 143->68 143->70 144->70 144->70 145->109 145->109 145->230 146->1 146->109 146->109 147->1 147->1 148->1 148->1 148->1 148->15 148->16 148->188 148->233 148->259 148->289 148->290 148->321 148->433 148->446 150->57 150->115 150->115 151->79 151->79 152->48 152->48 152->48 152->80 152->80 152->80 152->80 152->80 152->81 153->59 153->116 153->116 154->83 154->83 155->49 155->49 155->84 155->84 155->84 155->84 155->85 156->87 156->87 157->12 157->50 157->77 157->88 157->88 157->88 157->99 157->164 157->170 157->283 157->285 157->341 157->343 159->119 160->48 160->48 160->48 161->121 162->49 162->49 163->123 164->50 164->99 164->157 164->170 164->283 164->285 164->341 164->343 166->97 166->97 169->45 169->102 169->128 169->136 169->196 170->51 170->282 171->129 172->132 173->98 173->98 175->136 176->51 176->218 179->140 180->104 180->181 181->104 182->105 182->105 183->143 183->143 186->1 186->110 186->110 186->147 186->147 187->16 188->1 188->1 188->1 188->18 189->150 189->150 191->153 191->153 195->127 195->127 196->128 196->196 196->197 196->197 196->218 196->435 197->196 198->128 199->129 199->130 199->222 199->316 199->338 199->339 199->353 199->354 199->365 199->436 199->437 200->201 200->202 200->202 200->253 200->318 200->340 200->366 200->374 200->375 200->382 200->383 200->390 200->448 200->449 201->200 202->45 202->98 202->102 202->128 202->132 202->133 202->136 202->196 202->200 202->225 202->287 202->320 202->344 204->140 204->140 204->142 205->142 205->142 209->1 209->1 209->148 209->148 209->210 209->232 209->258 209->288 210->1 210->1 210->15 210->148 210->148 213->159 213->159 214->161 214->161 215->163 215->163 217->196 218->51 218->176 219->198 219->198 220->169 220->169 221->171 221->171 222->51 222->282 223->172 223->172 224->200 225->45 225->98 225->102 225->128 225->136 225->196 226->175 226->175 227->179 227->179 228->204 228->204 230->145 230->209 230->209 230->289 231->1 231->209 231->209 232->1 232->1 233->1 233->1 233->1 233->15 233->16 233->260 233->291 233->292 233->293 233->294 233->322 233->323 233->355 233->356 233->447 250->199 250->199 250->251 250->284 250->336 250->349 250->350 250->361 250->362 250->372 250->442 250->443 251->199 251->199 253->200 253->201 258->1 258->210 258->210 258->232 258->232 259->16 260->1 260->1 260->1 260->21 261->234 261->234 261->263 262->234 262->234 263->235 263->235 263->265 264->235 264->235 265->58 265->236 265->236 266->236 266->236 267->237 267->237 267->269 268->237 268->237 269->60 269->238 269->238 270->238 270->238 271->240 271->240 271->273 272->240 272->240 273->241 273->241 273->275 274->241 274->241 275->120 275->242 275->242 276->242 276->242 277->244 277->244 277->279 278->244 278->244 279->122 279->245 279->245 280->245 280->245 281->217 281->217 282->48 282->51 282->250 282->250 282->283 282->335 282->347 282->348 282->359 282->360 282->371 282->440 282->441 283->48 283->50 283->99 283->157 283->164 283->170 283->250 283->250 283->285 283->341 283->343 284->48 284->51 284->251 284->251 284->285 284->337 284->351 284->352 284->363 284->364 284->373 284->444 284->445 285->48 285->50 285->99 285->157 285->164 285->170 285->251 285->251 285->283 285->341 285->343 286->224 286->224 287->225 289->1 289->145 289->233 289->233 290->1 290->233 290->233 291->1 292->1 293->1 294->1 295->261 295->261 297->263 297->263 299->265 299->265 301->267 301->267 303->269 303->269 305->271 305->271 307->273 307->273 309->275 309->275 311->277 311->277 313->279 313->279 318->253 318->253 318->319 318->342 318->368 318->378 318->379 318->386 318->387 318->392 318->452 318->453 319->253 319->253 320->287 320->287 322->1 322->73 322->188 322->260 323->1 323->1 323->294 338->131 338->316 338->316 339->316 339->316 340->49 340->51 340->318 340->318 340->341 340->342 340->367 340->376 340->377 340->384 340->385 340->391 340->450 340->451 341->49 341->50 341->99 341->157 341->164 341->170 341->283 341->285 341->318 341->318 341->343 342->49 342->51 342->319 342->319 342->340 342->343 342->369 342->380 342->381 342->388 342->389 342->393 342->454 342->455 343->49 343->50 343->99 343->157 343->164 343->170 343->283 343->285 343->319 343->319 343->341 345->130 345->334 345->334 345->338 345->347 345->349 346->334 346->334 347->130 347->335 347->335 347->338 347->349 348->335 348->335 349->130 349->336 349->336 349->338 349->351 350->336 350->336 351->130 351->337 351->337 351->338 352->337 352->337 353->338 353->338 355->16 357->345 357->345 359->347 359->347 361->349 361->349 363->351 363->351 374->133 374->134 374->366 374->366 374->376 374->378 375->366 375->366 376->133 376->134 376->367 376->367 376->374 376->378 377->367 377->367 378->133 378->134 378->368 378->368 378->374 378->380 379->368 379->368 380->133 380->134 380->369 380->369 380->374 381->369 381->369 382->374 382->374 384->376 384->376 386->378 386->378 388->380 388->380
>>>Token int main ( int ReplacementFor_argc , char * ReplacementFor_argv [ ] ) { int i , ReplacementFor_j , ReplacementFor_k , l , ReplacementFor_temp_i ; char ReplacementFor_c ; FILE * ReplacementFor_input_file_ptr , * ReplacementFor_output_file_ptr ; int ReplacementFor_verbose_level = ReplacementFor_VERBOSE_LEVEL_DEFAULT ; char * ReplacementFor_input_file_name_default = " \x69 \x6e \x70 \x75 \x74 \x2e \x74 \x78 \x74 " ; char * ReplacementFor_input_file_name = NULL ; char * ReplacementFor_output_file_name_default = " \x6f \x75 \x74 \x70 \x75 \x74 \x2e \x74 \x78 \x74 " ; char * ReplacementFor_output_file_name = NULL ; int ReplacementFor_num_tests , ReplacementFor_test_id , ReplacementFor_num_comb , ReplacementFor_num_dest , ReplacementFor_num_input_elt , ReplacementFor_num_output_elt ; char * ReplacementFor_comb_list , * ReplacementFor_dest_list , * ReplacementFor_input_elt_list , * ReplacementFor_output_elt_list ; for ( i = ( 0x1dab + 213 - 0x1e7f ) ; i < ReplacementFor_argc ; i ++ ) { if ( strcmp ( ReplacementFor_argv [ i ] , " \x2d \x69 " ) == ( 0x63a + 2221 - 0xee7 ) && i + ( 0xacc + 2416 - 0x143b ) < ReplacementFor_argc ) { ReplacementFor_input_file_name = ReplacementFor_argv [ ++ i ] ; } else if ( strcmp ( ReplacementFor_argv [ i ] , " \x2d \x6f " ) == ( 0x101c + 1011 - 0x140f ) && i + ( 0x1fdb + 1778 - 0x26cc ) < ReplacementFor_argc ) { ReplacementFor_output_file_name = ReplacementFor_argv [ ++ i ] ; } else if ( strcmp ( ReplacementFor_argv [ i ] , " \x2d \x76 " ) == ( 0x129 + 5625 - 0x1722 ) ) { ReplacementFor_verbose_level = atoi ( ReplacementFor_argv [ ++ i ] ) ; } else { printf ( " \x45 \x72 \x72 \x6f \x72 \x20 \x70 \x61 \x72 \x73 \x69 \x6e \x67 \x20 \x61 \x72 \x67 \x75 \x6d \x65 \x6e \x74 \x73 \x21 " " \n " ) ; printf ( " \x55 \x73 \x61 \x67 \x65 \x3a \x20 \x62 \x6f \x74 \x5f \x74 \x72 \x75 \x73 \x74 \x2e \x62 \x69 \x6e \x20 \x2d \x69 \x20 \x3c \x69 \x6e \x70 \x75 \x74 \x5f \x66 \x69 \x6c \x65 \x5f \x6e \x61 \x6d \x65 \x3e \x20 \x2d \x6f \x20 \x3c \x6f \x75 \x74 \x70 \x75 \x74 \x5f \x66 \x69 \x6c \x65 \x5f \x6e \x61 \x6d \x65 \x3e " ) ; printf ( " \x20 \x20 \x2d \x76 \x20 \x3c \x76 \x65 \x72 \x62 \x6f \x73 \x65 \x5f \x6c \x65 \x76 \x65 \x6c \x3e " " \n " ) ; return ( 0x445 + 6072 - 0x1bfd ) ; } } if ( ReplacementFor_input_file_name == NULL ) { ReplacementFor_input_file_name = ReplacementFor_input_file_name_default ; } if ( ReplacementFor_output_file_name == NULL ) { ReplacementFor_output_file_name = ReplacementFor_output_file_name_default ; } ReplacementFor_input_file_ptr = fopen ( ReplacementFor_input_file_name , " \x72 " ) ; if ( ReplacementFor_input_file_ptr == NULL ) { printf ( " \x45 \x72 \x72 \x6f \x72 \x20 \x6f \x70 \x65 \x6e \x69 \x6e \x67 \x20 \x69 \x6e \x70 \x75 \x74 \x20 \x66 \x69 \x6c \x65 \x2e " " \n " ) ; return ( 0xcd8 + 6253 - 0x2545 ) ; } ReplacementFor_output_file_ptr = fopen ( ReplacementFor_output_file_name , " \x77 " ) ; if ( ReplacementFor_input_file_ptr == NULL ) { printf ( " \x45 \x72 \x72 \x6f \x72 \x20 \x6f \x70 \x65 \x6e \x69 \x6e \x67 \x20 \x6f \x75 \x74 \x70 \x75 \x74 \x20 \x66 \x69 \x6c \x65 \x2e " " \n " ) ; return ( 0x215 + 6952 - 0x1d3d ) ; } ReplacementFor_temp_i = fscanf ( ReplacementFor_input_file_ptr , " \x25 \x64 " , & ReplacementFor_num_tests ) ; if ( ReplacementFor_verbose_level >= ( 0x1324 + 647 - 0x15a9 ) ) { printf ( " \x20 \x20 \x4e \x75 \x6d \x62 \x65 \x72 \x20 \x6f \x66 \x20 \x74 \x65 \x73 \x74 \x73 \x3a \x20 \x25 \x64 " " \n " , ReplacementFor_num_tests ) ; } for ( ReplacementFor_test_id = ( 0x24a + 5569 - 0x180a ) ; ReplacementFor_test_id <= ReplacementFor_num_tests ; ReplacementFor_test_id ++ ) { if ( ReplacementFor_verbose_level >= ( 0x1b4c + 2319 - 0x245a ) ) { printf ( " \x20 \x20 \x54 \x65 \x73 \x74 \x20 \x23 \x25 \x64 \x3a " " \n " , ReplacementFor_test_id ) ; } ReplacementFor_temp_i = fscanf ( ReplacementFor_input_file_ptr , " \x25 \x64 " , & ReplacementFor_num_comb ) ; ReplacementFor_comb_list = malloc ( ReplacementFor_num_comb * ( 0x14a + 2999 - 0xcfe ) * sizeof ( char ) ) ; for ( i = ( 0xd + 959 - 0x3cc ) ; i < ReplacementFor_num_comb ; i ++ ) { ReplacementFor_temp_i = fscanf ( ReplacementFor_input_file_ptr , " \x20 \x25 \x63 \x25 \x63 \x25 \x63 " , & ReplacementFor_comb_list [ i * ( 0xf06 + 1799 - 0x160a ) + ( 0x4b3 + 4113 - 0x14c4 ) ] , & ReplacementFor_comb_list [ i * ( 0x24a2 + 591 - 0x26ee ) + ( 0xb39 + 2804 - 0x162c ) ] , & ReplacementFor_comb_list [ i * ( 0x1195 + 1687 - 0x1829 ) + ( 0x1903 + 1297 - 0x1e12 ) ] ) ; } ReplacementFor_temp_i = fscanf ( ReplacementFor_input_file_ptr , " \x25 \x64 " , & ReplacementFor_num_dest ) ; ReplacementFor_dest_list = malloc ( ReplacementFor_num_dest * ( 0x1091 + 5625 - 0x2688 ) * sizeof ( char ) ) ; for ( i = ( 0xcb4 + 1737 - 0x137d ) ; i < ReplacementFor_num_dest ; i ++ ) { ReplacementFor_temp_i = fscanf ( ReplacementFor_input_file_ptr , " \x20 \x25 \x63 \x25 \x63 " , & ReplacementFor_dest_list [ i * ( 0x271 + 5826 - 0x1931 ) + ( 0x1b8a + 759 - 0x1e81 ) ] , & ReplacementFor_dest_list [ i * ( 0x2f1 + 3279 - 0xfbe ) + ( 0x5c7 + 4551 - 0x178d ) ] ) ; } ReplacementFor_temp_i = fscanf ( ReplacementFor_input_file_ptr , " \x25 \x64 " , & ReplacementFor_num_input_elt ) ; ReplacementFor_input_elt_list = malloc ( ReplacementFor_num_input_elt * sizeof ( char ) ) ; for ( i = ( 0x884 + 2509 - 0x1251 ) ; i < ReplacementFor_num_input_elt ; i ++ ) { ReplacementFor_temp_i = fscanf ( ReplacementFor_input_file_ptr , " \x20 \x25 \x63 " , & ReplacementFor_input_elt_list [ i ] ) ; } if ( ReplacementFor_verbose_level >= ( 0x4ef + 1414 - 0xa73 ) ) { printf ( " \x20 \x20 \x20 \x20 \x43 \x6f \x6d \x62 \x69 \x6e \x61 \x74 \x69 \x6f \x6e \x20 \x72 \x75 \x6c \x65 \x73 \x3a " ) ; for ( i = ( 0x22e4 + 463 - 0x24b3 ) ; i < ReplacementFor_num_comb ; i ++ ) { printf ( " \x20 \x25 \x63 \x25 \x63 \x25 \x63 " , ReplacementFor_comb_list [ i * ( 0x1fa3 + 1669 - 0x2625 ) + ( 0x12ff + 4109 - 0x230c ) ] , ReplacementFor_comb_list [ i * ( 0xba5 + 2303 - 0x14a1 ) + ( 0x1390 + 1222 - 0x1855 ) ] , ReplacementFor_comb_list [ i * ( 0x5f5 + 3423 - 0x1351 ) + ( 0x4b7 + 630 - 0x72b ) ] ) ; } printf ( " \n " ) ; printf ( " \x20 \x20 \x20 \x20 \x44 \x65 \x73 \x74 \x72 \x75 \x63 \x74 \x69 \x6f \x6e \x20 \x72 \x75 \x6c \x65 \x73 \x3a " ) ; for ( i = ( 0x444 + 8672 - 0x2624 ) ; i < ReplacementFor_num_dest ; i ++ ) { printf ( " \x20 \x25 \x63 \x25 \x63 " , ReplacementFor_dest_list [ i * ( 0x18bd + 2686 - 0x2339 ) + ( 0x8fb + 7278 - 0x2569 ) ] , ReplacementFor_dest_list [ i * ( 0x1749 + 1582 - 0x1d75 ) + ( 0x81c + 1836 - 0xf47 ) ] ) ; } printf ( " \n " ) ; printf ( " \x20 \x20 \x20 \x20 \x49 \x6e \x70 \x75 \x74 \x20 \x6c \x69 \x73 \x74 \x3a \x20 " ) ; for ( i = ( 0xfa7 + 1185 - 0x1448 ) ; i < ReplacementFor_num_input_elt ; i ++ ) { printf ( " \x25 \x63 " , ReplacementFor_input_elt_list [ i ] ) ; } printf ( " \n " ) ; } ReplacementFor_output_elt_list = malloc ( ReplacementFor_num_input_elt * sizeof ( char ) ) ; ReplacementFor_j = - ( 0x9b6 + 502 - 0xbab ) ; for ( i = ( 0x1920 + 1977 - 0x20d9 ) ; i < ReplacementFor_num_input_elt ; i ++ ) { if ( ReplacementFor_verbose_level >= ( 0xc40 + 157 - 0xcd9 ) ) { printf ( " \x20 \x20 \x20 \x20 \x20 \x20 \x6f \x6c \x69 \x73 \x74 \x3a \x20 " ) ; for ( ReplacementFor_k = ( 0x1c13 + 2168 - 0x248b ) ; ReplacementFor_k <= ReplacementFor_j ; ReplacementFor_k ++ ) { printf ( " \x25 \x63 " , ReplacementFor_output_elt_list [ ReplacementFor_k ] ) ; } printf ( " \n " ) ; } if ( ReplacementFor_j == - ( 0x1287 + 207 - 0x1355 ) ) { ReplacementFor_j = ( 0x12f5 + 1429 - 0x188a ) ; ReplacementFor_output_elt_list [ ReplacementFor_j ] = ReplacementFor_input_elt_list [ i ] ; continue ; } for ( ReplacementFor_k = ( 0x555 + 2221 - 0xe02 ) ; ReplacementFor_k < ReplacementFor_num_comb ; ReplacementFor_k ++ ) { if ( ( ( ReplacementFor_output_elt_list [ ReplacementFor_j ] == ReplacementFor_comb_list [ ReplacementFor_k * ( 0x25f + 1531 - 0x857 ) + ( 0x1451 + 3289 - 0x212a ) ] ) && ( ReplacementFor_input_elt_list [ i ] == ReplacementFor_comb_list [ ReplacementFor_k * ( 0x587 + 1264 - 0xa74 ) + ( 0x1a01 + 1708 - 0x20ac ) ] ) ) || ( ( ReplacementFor_output_elt_list [ ReplacementFor_j ] == ReplacementFor_comb_list [ ReplacementFor_k * ( 0x392 + 8813 - 0x25fc ) + ( 0x1fed + 1587 - 0x261f ) ] ) && ( ReplacementFor_input_elt_list [ i ] == ReplacementFor_comb_list [ ReplacementFor_k * ( 0x201 + 138 - 0x288 ) + ( 0xe62 + 1624 - 0x14ba ) ] ) ) ) { ReplacementFor_output_elt_list [ ReplacementFor_j ] = ReplacementFor_comb_list [ ReplacementFor_k * ( 0xb1d + 2205 - 0x13b7 ) + ( 0x1b1 + 5807 - 0x185e ) ] ; break ; } } if ( ReplacementFor_k < ReplacementFor_num_comb ) { continue ; } for ( ReplacementFor_k = ( 0x270 + 7528 - 0x1fd8 ) ; ReplacementFor_k < ReplacementFor_num_dest ; ReplacementFor_k ++ ) { for ( l = ( 0x388 + 6475 - 0x1cd3 ) ; l <= ReplacementFor_j ; l ++ ) { if ( ( ( ReplacementFor_output_elt_list [ l ] == ReplacementFor_dest_list [ ReplacementFor_k * ( 0x1331 + 1909 - 0x1aa4 ) + ( 0x10e1 + 683 - 0x138c ) ] ) && ( ReplacementFor_input_elt_list [ i ] == ReplacementFor_dest_list [ ReplacementFor_k * ( 0x105d + 3509 - 0x1e10 ) + ( 0x1bc0 + 2508 - 0x258b ) ] ) ) || ( ( ReplacementFor_output_elt_list [ l ] == ReplacementFor_dest_list [ ReplacementFor_k * ( 0x18cf + 2600 - 0x22f5 ) + ( 0xda7 + 6442 - 0x26d0 ) ] ) && ( ReplacementFor_input_elt_list [ i ] == ReplacementFor_dest_list [ ReplacementFor_k * ( 0x21d + 6112 - 0x19fb ) + ( 0x1a4 + 2637 - 0xbf1 ) ] ) ) ) { break ; } } if ( l <= ReplacementFor_j ) { ReplacementFor_j = - ( 0x12a1 + 1617 - 0x18f1 ) ; break ; } } if ( ReplacementFor_k < ReplacementFor_num_dest ) { continue ; } ReplacementFor_j += ( 0x1151 + 4338 - 0x2242 ) ; ReplacementFor_output_elt_list [ ReplacementFor_j ] = ReplacementFor_input_elt_list [ i ] ; } if ( ReplacementFor_verbose_level >= ( 0xf08 + 1822 - 0x1622 ) ) { printf ( " \x20 \x20 \x20 \x20 \x20 \x20 \x6f \x6c \x69 \x73 \x74 \x3a \x20 " ) ; for ( ReplacementFor_k = ( 0x199b + 284 - 0x1ab7 ) ; ReplacementFor_k <= ReplacementFor_j ; ReplacementFor_k ++ ) { printf ( " \x25 \x63 " , ReplacementFor_output_elt_list [ ReplacementFor_k ] ) ; } printf ( " \n " ) ; } ReplacementFor_num_output_elt = ReplacementFor_j + ( 0x9cc + 564 - 0xbff ) ; if ( ReplacementFor_verbose_level >= ( 0x21c + 7765 - 0x2070 ) ) { printf ( " \x20 \x20 \x20 \x20 \x4f \x75 \x74 \x70 \x75 \x74 \x20 \x6c \x69 \x73 \x74 \x3a \x20 \x5b " ) ; for ( i = ( 0xf29 + 1242 - 0x1403 ) ; i <= ReplacementFor_num_output_elt - ( 0x1c56 + 2369 - 0x2595 ) ; i ++ ) { printf ( " \x25 \x63 \x2c \x20 " , ReplacementFor_output_elt_list [ i ] ) ; } if ( ReplacementFor_num_output_elt > ( 0x1ccd + 1924 - 0x2451 ) ) { printf ( " \x25 \x63 " , ReplacementFor_output_elt_list [ i ] ) ; } printf ( " \x5d " " \n " , ReplacementFor_output_elt_list [ i ] ) ; } fprintf ( ReplacementFor_output_file_ptr , " \x43 \x61 \x73 \x65 \x20 \x23 \x25 \x64 \x3a \x20 \x5b " , ReplacementFor_test_id ) ; for ( i = ( 0x12f + 7732 - 0x1f63 ) ; i <= ReplacementFor_num_output_elt - ( 0x150b + 2908 - 0x2065 ) ; i ++ ) { fprintf ( ReplacementFor_output_file_ptr , " \x25 \x63 \x2c \x20 " , ReplacementFor_output_elt_list [ i ] ) ; } if ( ReplacementFor_num_output_elt > ( 0x7c9 + 4449 - 0x192a ) ) { fprintf ( ReplacementFor_output_file_ptr , " \x25 \x63 " , ReplacementFor_output_elt_list [ i ] ) ; } fprintf ( ReplacementFor_output_file_ptr , " \x5d " " \n " , ReplacementFor_output_elt_list [ i ] ) ; free ( ReplacementFor_comb_list ) ; free ( ReplacementFor_dest_list ) ; free ( ReplacementFor_input_elt_list ) ; free ( ReplacementFor_output_elt_list ) ; } fclose ( ReplacementFor_input_file_ptr ) ; fclose ( ReplacementFor_output_file_ptr ) ; return ( 0x4af + 804 - 0x7d3 ) ; }
>>>Func
METHOD main
METHOD_RETURN int
PARAM int ReplacementFor_argc
PARAM char**ReplacementFor_argv
<operator>.assignment ReplacementFor_inp=fopen(\012"\x2e\x2f\x42\x2d\x73\x6d\x61\x6c\x6c\x2d\x61\x74\x74\x65\x6d\x70\x74\x30\x2e\x69\x6e"\012,"\x72\x62")
<operator>.assignment ReplacementFor_out=fopen(\012"\x2e\x2f\x6f\x75\x74\x70\x75\x74\x2e\x74\x78\x74","\x77")
<operator>.assignment ReplacementFor_testCount=(0x352+5424-0x1882)
<operator>.assignment *ReplacementFor_inputString=\012NULL
fscanf fscanf(ReplacementFor_inp,"\x25\x64",&ReplacementFor_testCases)
RETURN return(\012EXIT_SUCCESS); return(\012EXIT_SUCCESS);
IDENTIFIER ReplacementFor_testCases while (ReplacementFor_testCases)
IDENTIFIER EXIT_SUCCESS return(\012EXIT_SUCCESS);
fopen fopen(\012"\x2e\x2f\x42\x2d\x73\x6d\x61\x6c\x6c\x2d\x61\x74\x74\x65\x6d\x70\x74\x30\x2e\x69\x6e"\012,"\x72\x62")
fopen fopen(\012"\x2e\x2f\x6f\x75\x74\x70\x75\x74\x2e\x74\x78\x74","\x77")
<operator>.subtraction 0x352+5424-0x1882
<operator>.assignment *\012ReplacementFor_combination=NULL
fscanf fscanf(ReplacementFor_inp,"\x25\x64",&\012ReplacementFor_C)
fgetc fgetc(ReplacementFor_inp)
<operator>.assignment *\012ReplacementFor_oppose=NULL
fscanf fscanf(ReplacementFor_inp,"\x25\x64",&\012ReplacementFor_D)
fgetc fgetc(ReplacementFor_inp)
fscanf fscanf(ReplacementFor_inp,"\x25\x64",&ReplacementFor_N)
fgetc fgetc(ReplacementFor_inp\012)
<operator>.assignment ReplacementFor_inputString=(char*)calloc(ReplacementFor_N+(0x11a8+4041-0x2170)\012 (0x7d+6830-0x1b2a))
fscanf fscanf(ReplacementFor_inp,"\x25\x73",\012ReplacementFor_inputString)
<operator>.assignment ReplacementFor_outIndex=(0xfca+4349-0x20c7)
fprintf fprintf(ReplacementFor_out,"\x43\x61\x73\x65\x20\x23\x25\x64\x3a\x20\x5b",++\012ReplacementFor_testCount)
fprintf fprintf(ReplacementFor_out,"\x5d" "\n")
<operator>.postDecrement ReplacementFor_testCases--
<operator>.addition 0x352+5424
IDENTIFIER ReplacementFor_C if (ReplacementFor_C)
IDENTIFIER ReplacementFor_D if (ReplacementFor_D)
<operator>.lessThan i<\012ReplacementFor_N
<operator>.postIncrement i++
<operator>.lessThan i<\012ReplacementFor_outIndex
<operator>.postIncrement i++
IDENTIFIER ReplacementFor_combination if (ReplacementFor_combination)
IDENTIFIER ReplacementFor_oppose if (ReplacementFor_oppose)
IDENTIFIER ReplacementFor_inputString if (ReplacementFor_inputString)
<operator>.assignment ReplacementFor_combination=(\012ReplacementFor_combinationList*)calloc((0x1581+2456-0x1eff) sizeof(\012ReplacementFor_combinationList))
<operator>.assignment ReplacementFor_oppose=(\012ReplacementFor_opposeList*)calloc((0x20d+6610-0x1bc5) sizeof(\012ReplacementFor_opposeList))
<operator>.cast (char*)calloc(ReplacementFor_N+(0x11a8+4041-0x2170)\012 (0x7d+6830-0x1b2a))
<operator>.subtraction 0xfca+4349-0x20c7
<operator>.assignment i=(0x4e8+5767-0x1b6f)
<operator>.assignment ReplacementFor_outString[ReplacementFor_outIndex]=\012ReplacementFor_inputString[i]
<operator>.postIncrement ReplacementFor_outIndex\012++
<operator>.preIncrement ++\012ReplacementFor_testCount
<operator>.assignment i=(0x449+5122-0x184b)
fprintf fprintf(ReplacementFor_out,"\x25\x63",\012ReplacementFor_outString[i])
free free(\012ReplacementFor_combination)
free free(ReplacementFor_oppose)
free free(ReplacementFor_inputString)
IDENTIFIER ReplacementFor_C while (ReplacementFor_C)
IDENTIFIER ReplacementFor_D while (ReplacementFor_D)
calloc calloc(ReplacementFor_N+(0x11a8+4041-0x2170)\012 (0x7d+6830-0x1b2a))
<operator>.addition 0xfca+4349
<operator>.logicalNot !ReplacementFor_outIndex
IDENTIFIER ReplacementFor_combination if (ReplacementFor_combination)
IDENTIFIER ReplacementFor_oppose if (ReplacementFor_oppose)
<operator>.notEquals i!=ReplacementFor_outIndex-(0x32c+1691-0x9c6)
<operator>.cast (\012ReplacementFor_combinationList*)calloc((0x1581+2456-0x1eff) sizeof(\012ReplacementFor_combinationList))
fgetc fgetc(ReplacementFor_inp)
fscanf fscanf(ReplacementFor_inp,\012"\x25\x73",ReplacementFor_ch)
<operator>.postIncrement ReplacementFor_combination[ReplacementFor_ch[\012(0x8bd+1075-0xcf0)]-((char)(0x1942+766-0x1bff))].ReplacementFor_noOfRows++
<operator>.assignment ReplacementFor_combination[ReplacementFor_ch[(0x455+3523-0x1218)]-\012((char)(0x1376+3408-0x2085))].ReplacementFor_list[ReplacementFor_combination[\012ReplacementFor_ch[(0x436+6468-0x1d7a)]-((char)(0x1e4+7754-0x1fed))].\012ReplacementFor_noOfRows-(0xae3+6089-0x22ab)][(0x2ab+9179-0x2686)]=\012ReplacementFor_ch[(0x3aa+7589-0x214e)]-((char)(0x116b+3228-0x1dc6))
<operator>.assignment ReplacementFor_combination[ReplacementFor_ch[(0x15e1+463-0x17b0)]-\012((char)(0x134b+2634-0x1d54))].ReplacementFor_list[ReplacementFor_combination[\012ReplacementFor_ch[(0x14bf+3780-0x2383)]-((char)(0xb5b+5877-0x220f))].\012ReplacementFor_noOfRows-(0x140+3873-0x1060)][(0x115d+2692-0x1be0)]=\012ReplacementFor_ch[(0xd42+5812-0x23f4)]-((char)(0x1041+909-0x138d))
<operator>.postIncrement ReplacementFor_combination[ReplacementFor_ch[(0x186c+3266-0x252d)]-\012((char)(0x185b+3452-0x2596))].ReplacementFor_noOfRows++
<operator>.assignment ReplacementFor_combination[ReplacementFor_ch[(0x3ed+1770-0xad6)]-\012((char)(0x7d4+7495-0x24da))].ReplacementFor_list[ReplacementFor_combination[\012ReplacementFor_ch[(0x968+5087-0x1d46)]-((char)(0xfe9+2970-0x1b42))].\012ReplacementFor_noOfRows-(0x11bf+1589-0x17f3)][(0x9b3+4605-0x1bb0)]=\012ReplacementFor_ch[(0x11a0+3281-0x1e71)]-((char)(0x652+7931-0x250c))
<operator>.assignment ReplacementFor_combination[ReplacementFor_ch[(0xac6+3309-0x17b2)]-\012((char)(0x67c+5037-0x19e8))].ReplacementFor_list[ReplacementFor_combination[\012ReplacementFor_ch[(0x6b9+5611-0x1ca3)]-((char)(0x14d+7505-0x1e5d))].\012ReplacementFor_noOfRows-(0x51b+3810-0x13fc)][(0x1646+2848-0x2165)]=\012ReplacementFor_ch[(0x3c7+6410-0x1ccf)]-((char)(0x96c+5776-0x1fbb))
<operator>.postDecrement ReplacementFor_C--
<operator>.cast (\012ReplacementFor_opposeList*)calloc((0x20d+6610-0x1bc5) sizeof(\012ReplacementFor_opposeList))
fgetc fgetc(ReplacementFor_inp)
fscanf fscanf(ReplacementFor_inp,\012"\x25\x73",ReplacementFor_ch)
<operator>.assignment ReplacementFor_oppose[ReplacementFor_ch[\012(0x1db+6719-0x1c1a)]-((char)(0x2ea+7972-0x21cd))].ReplacementFor_enable=-\012(0x1723+1598-0x1d60)
<operator>.assignment ReplacementFor_oppose[ReplacementFor_ch[(0x1b1a+536-0x1d32)\012]-((char)(0x1c2+1813-0x896))].ReplacementFor_opposer=ReplacementFor_ch[\012(0x144+7915-0x202e)]-((char)(0x1f7+9344-0x2636))
<operator>.assignment ReplacementFor_oppose[\012ReplacementFor_ch[(0xe0b+3198-0x1a88)]-((char)(0x1600+3221-0x2254))].\012ReplacementFor_enable=-(0x6d5+6242-0x1f36)
<operator>.assignment ReplacementFor_oppose[\012ReplacementFor_ch[(0x25f+8501-0x2393)]-((char)(0x294+9079-0x25ca))].\012ReplacementFor_opposer=ReplacementFor_ch[(0x1ae2+3046-0x26c8)]-\012((char)(0x8cd+5180-0x1cc8))
<operator>.postDecrement ReplacementFor_D--
<operator>.addition ReplacementFor_N+(0x11a8+4041-0x2170)
<operator>.subtraction 0x7d+6830-0x1b2a
<operator>.subtraction 0x4e8+5767-0x1b6f
<operator>.postIncrement ReplacementFor_outIndex++
<operator>.subtraction 0x449+5122-0x184b
fprintf fprintf(ReplacementFor_out,"\x2c\x20")
calloc calloc((0x1581+2456-0x1eff) sizeof(\012ReplacementFor_combinationList))
<operator>.notEquals ReplacementFor_combination[ReplacementFor_ch[\012(0x1807+2719-0x22a6)]-((char)(0xf8c+470-0x1121))].ReplacementFor_enable!=-\012(0x204+4064-0x11e3)
<operator>.notEquals ReplacementFor_combination[ReplacementFor_ch[(0x3f0+7391-0x20ce)]-\012((char)(0x783+3526-0x1508))].ReplacementFor_enable!=-(0xce3+1718-0x1398)
calloc calloc((0x20d+6610-0x1bc5) sizeof(\012ReplacementFor_opposeList))
<operator>.subtraction 0x11a8+4041-0x2170
<operator>.addition 0x7d+6830
<operator>.addition 0x4e8+5767
<operator>.equals ReplacementFor_combination[\012ReplacementFor_outString[ReplacementFor_outIndex]-((char)(0x1559+263-0x161f))].\012ReplacementFor_enable==-(0x1b92+1237-0x2066)
<operator>.equals ReplacementFor_oppose[ReplacementFor_outString[ReplacementFor_outIndex]-\012((char)(0x5d4+6343-0x1e5a))].ReplacementFor_enable==-(0x629+836-0x96c)
<operator>.addition 0x449+5122
<operator>.subtraction ReplacementFor_outIndex-(0x32c+1691-0x9c6)
<operator>.subtraction 0x1581+2456-0x1eff
<operator>.sizeOf sizeof(\012ReplacementFor_combinationList)
<operator>.assignment ReplacementFor_combination[ReplacementFor_ch[\012(0x206+8037-0x216b)]-((char)(0x1582+2791-0x2028))].ReplacementFor_enable=-\012(0x9a4+4392-0x1acb)
<operator>.assignment ReplacementFor_combination[ReplacementFor_ch[\012(0x10f3+2649-0x1b4c)]-((char)(0xdf1+3049-0x1999))].ReplacementFor_noOfRows=\012(0xa81+1267-0xf74)
<operator>.subtraction ReplacementFor_ch[(0x3aa+7589-0x214e)]-((char)(0x116b+3228-0x1dc6))
<operator>.subtraction ReplacementFor_ch[(0xd42+5812-0x23f4)]-((char)(0x1041+909-0x138d))
<operator>.assignment ReplacementFor_combination[ReplacementFor_ch[(0xd2f+1092-0x1172)]-\012((char)(0x65+7188-0x1c38))].ReplacementFor_enable=-(0x951+474-0xb2a)
<operator>.assignment ReplacementFor_combination[ReplacementFor_ch[(0x1c79+1975-0x242f)]-\012((char)(0x1d5c+517-0x1f20))].ReplacementFor_noOfRows=(0xf59+921-0x12f2)
<operator>.subtraction ReplacementFor_ch[(0x11a0+3281-0x1e71)]-((char)(0x652+7931-0x250c))
<operator>.subtraction ReplacementFor_ch[(0x3c7+6410-0x1ccf)]-((char)(0x96c+5776-0x1fbb))
<operator>.subtraction 0x20d+6610-0x1bc5
<operator>.sizeOf sizeof(\012ReplacementFor_opposeList)
<operator>.minus -\012(0x1723+1598-0x1d60)
<operator>.subtraction ReplacementFor_ch[\012(0x144+7915-0x202e)]-((char)(0x1f7+9344-0x2636))
<operator>.minus -(0x6d5+6242-0x1f36)
<operator>.subtraction ReplacementFor_ch[(0x1ae2+3046-0x26c8)]-\012((char)(0x8cd+5180-0x1cc8))
<operator>.addition 0x11a8+4041
<operator>.assignment ReplacementFor_ch=ReplacementFor_oppose[ReplacementFor_outString[\012ReplacementFor_outIndex]-((char)(0xfc+1263-0x5aa))].ReplacementFor_opposer+\012((char)(0xd35+2949-0x1879))
<operator>.subtraction 0x32c+1691-0x9c6
<operator>.addition 0x1581+2456
<operator>.minus -\012(0x204+4064-0x11e3)
<operator>.subtraction 0x2ab+9179-0x2686
<operator>.cast (char)(0x116b+3228-0x1dc6)
<operator>.subtraction 0x115d+2692-0x1be0
<operator>.cast (char)(0x1041+909-0x138d)
<operator>.minus -(0xce3+1718-0x1398)
<operator>.subtraction 0x9b3+4605-0x1bb0
<operator>.cast (char)(0x652+7931-0x250c)
<operator>.subtraction 0x1646+2848-0x2165
<operator>.cast (char)(0x96c+5776-0x1fbb)
<operator>.addition 0x20d+6610
<operator>.subtraction 0x1723+1598-0x1d60
<operator>.cast (char)(0x1f7+9344-0x2636)
<operator>.subtraction 0x6d5+6242-0x1f36
<operator>.cast (char)(0x8cd+5180-0x1cc8)
<operator>.minus -(0x1b92+1237-0x2066)
<operator>.lessThan ReplacementFor_j<ReplacementFor_combination[\012ReplacementFor_outString[ReplacementFor_outIndex]-((char)(0x954+2751-0x13d2))].\012ReplacementFor_noOfRows
<operator>.postIncrement ReplacementFor_j++
<operator>.minus -(0x629+836-0x96c)
<operator>.greaterEqualsThan ReplacementFor_j>=(0x377+5702-0x19bd)
<operator>.postDecrement ReplacementFor_j--
<operator>.addition 0x32c+1691
<operator>.subtraction 0x204+4064-0x11e3
<operator>.minus -\012(0x9a4+4392-0x1acb)
<operator>.subtraction 0xa81+1267-0xf74
<operator>.subtraction ReplacementFor_ch[\012(0x8bd+1075-0xcf0)]-((char)(0x1942+766-0x1bff))
<operator>.subtraction ReplacementFor_combination[\012ReplacementFor_ch[(0x436+6468-0x1d7a)]-((char)(0x1e4+7754-0x1fed))].\012ReplacementFor_noOfRows-(0xae3+6089-0x22ab)
<operator>.addition 0x2ab+9179
<operator>.subtraction 0x3aa+7589-0x214e
<operator>.subtraction 0x116b+3228-0x1dc6
<operator>.subtraction ReplacementFor_combination[\012ReplacementFor_ch[(0x14bf+3780-0x2383)]-((char)(0xb5b+5877-0x220f))].\012ReplacementFor_noOfRows-(0x140+3873-0x1060)
<operator>.addition 0x115d+2692
<operator>.subtraction 0xd42+5812-0x23f4
<operator>.subtraction 0x1041+909-0x138d
<operator>.subtraction 0xce3+1718-0x1398
<operator>.minus -(0x951+474-0xb2a)
<operator>.subtraction 0xf59+921-0x12f2
<operator>.subtraction ReplacementFor_ch[(0x186c+3266-0x252d)]-\012((char)(0x185b+3452-0x2596))
<operator>.subtraction ReplacementFor_combination[\012ReplacementFor_ch[(0x968+5087-0x1d46)]-((char)(0xfe9+2970-0x1b42))].\012ReplacementFor_noOfRows-(0x11bf+1589-0x17f3)
<operator>.addition 0x9b3+4605
<operator>.subtraction 0x11a0+3281-0x1e71
<operator>.subtraction 0x652+7931-0x250c
<operator>.subtraction ReplacementFor_combination[\012ReplacementFor_ch[(0x6b9+5611-0x1ca3)]-((char)(0x14d+7505-0x1e5d))].\012ReplacementFor_noOfRows-(0x51b+3810-0x13fc)
<operator>.addition 0x1646+2848
<operator>.subtraction 0x3c7+6410-0x1ccf
<operator>.subtraction 0x96c+5776-0x1fbb
<operator>.subtraction ReplacementFor_ch[\012(0x1db+6719-0x1c1a)]-((char)(0x2ea+7972-0x21cd))
<operator>.addition 0x1723+1598
<operator>.subtraction ReplacementFor_ch[(0x1b1a+536-0x1d32)\012]-((char)(0x1c2+1813-0x896))
<operator>.subtraction 0x144+7915-0x202e
<operator>.subtraction 0x1f7+9344-0x2636
<operator>.subtraction ReplacementFor_ch[(0xe0b+3198-0x1a88)]-((char)(0x1600+3221-0x2254))
<operator>.addition 0x6d5+6242
<operator>.subtraction ReplacementFor_ch[(0x25f+8501-0x2393)]-((char)(0x294+9079-0x25ca))
<operator>.subtraction 0x1ae2+3046-0x26c8
<operator>.subtraction 0x8cd+5180-0x1cc8
<operator>.subtraction 0x1b92+1237-0x2066
<operator>.assignment ReplacementFor_j=\012(0xff9+4930-0x233b)
<operator>.subtraction 0x629+836-0x96c
<operator>.addition ReplacementFor_oppose[ReplacementFor_outString[\012ReplacementFor_outIndex]-((char)(0xfc+1263-0x5aa))].ReplacementFor_opposer+\012((char)(0xd35+2949-0x1879))
<operator>.assignment ReplacementFor_j=ReplacementFor_outIndex-\012(0x17e5+3201-0x2465)
<operator>.subtraction ReplacementFor_ch[\012(0x1807+2719-0x22a6)]-((char)(0xf8c+470-0x1121))
<operator>.addition 0x204+4064
<operator>.subtraction 0x9a4+4392-0x1acb
<operator>.addition 0xa81+1267
<operator>.cast (char)(0x1942+766-0x1bff)
<operator>.subtraction 0xae3+6089-0x22ab
<operator>.addition 0x3aa+7589
<operator>.addition 0x116b+3228
<operator>.subtraction 0x140+3873-0x1060
<operator>.addition 0xd42+5812
<operator>.addition 0x1041+909
<operator>.subtraction ReplacementFor_ch[(0x3f0+7391-0x20ce)]-\012((char)(0x783+3526-0x1508))
<operator>.addition 0xce3+1718
<operator>.subtraction 0x951+474-0xb2a
<operator>.addition 0xf59+921
<operator>.cast (char)(0x185b+3452-0x2596)
<operator>.subtraction 0x11bf+1589-0x17f3
<operator>.addition 0x11a0+3281
<operator>.addition 0x652+7931
<operator>.subtraction 0x51b+3810-0x13fc
<operator>.addition 0x3c7+6410
<operator>.addition 0x96c+5776
<operator>.cast (char)(0x2ea+7972-0x21cd)
<operator>.cast (char)(0x1c2+1813-0x896)
<operator>.addition 0x144+7915
<operator>.addition 0x1f7+9344
<operator>.cast (char)(0x1600+3221-0x2254)
<operator>.cast (char)(0x294+9079-0x25ca)
<operator>.addition 0x1ae2+3046
<operator>.addition 0x8cd+5180
<operator>.subtraction ReplacementFor_outString[ReplacementFor_outIndex]-((char)(0x1559+263-0x161f))
<operator>.addition 0x1b92+1237
<operator>.equals ReplacementFor_combination[\012ReplacementFor_outString[ReplacementFor_outIndex]-((char)(0x125f+3062-0x1e14))].\012ReplacementFor_list[ReplacementFor_j][(0x28a+6198-0x1ac0)]==(\012ReplacementFor_outString[ReplacementFor_outIndex-(0xa09+6279-0x228f)]-\012((char)(0x64f+7578-0x23a8)))
<operator>.subtraction ReplacementFor_outString[ReplacementFor_outIndex]-\012((char)(0x5d4+6343-0x1e5a))
<operator>.addition 0x629+836
<operator>.cast (char)(0xd35+2949-0x1879)
<operator>.subtraction 0x377+5702-0x19bd
<operator>.equals ReplacementFor_outString[ReplacementFor_j]==ReplacementFor_ch
<operator>.cast (char)(0xf8c+470-0x1121)
<operator>.subtraction ReplacementFor_ch[\012(0x206+8037-0x216b)]-((char)(0x1582+2791-0x2028))
<operator>.addition 0x9a4+4392
<operator>.subtraction ReplacementFor_ch[\012(0x10f3+2649-0x1b4c)]-((char)(0xdf1+3049-0x1999))
<operator>.subtraction 0x8bd+1075-0xcf0
<operator>.subtraction 0x1942+766-0x1bff
<operator>.subtraction ReplacementFor_ch[(0x455+3523-0x1218)]-\012((char)(0x1376+3408-0x2085))
<operator>.addition 0xae3+6089
<operator>.subtraction ReplacementFor_ch[(0x15e1+463-0x17b0)]-\012((char)(0x134b+2634-0x1d54))
<operator>.addition 0x140+3873
<operator>.cast (char)(0x783+3526-0x1508)
<operator>.subtraction ReplacementFor_ch[(0xd2f+1092-0x1172)]-\012((char)(0x65+7188-0x1c38))
<operator>.addition 0x951+474
<operator>.subtraction ReplacementFor_ch[(0x1c79+1975-0x242f)]-\012((char)(0x1d5c+517-0x1f20))
<operator>.subtraction 0x186c+3266-0x252d
<operator>.subtraction 0x185b+3452-0x2596
<operator>.subtraction ReplacementFor_ch[(0x3ed+1770-0xad6)]-\012((char)(0x7d4+7495-0x24da))
<operator>.addition 0x11bf+1589
<operator>.subtraction ReplacementFor_ch[(0xac6+3309-0x17b2)]-\012((char)(0x67c+5037-0x19e8))
<operator>.addition 0x51b+3810
<operator>.subtraction 0x1db+6719-0x1c1a
<operator>.subtraction 0x2ea+7972-0x21cd
<operator>.subtraction 0x1b1a+536-0x1d32
<operator>.subtraction 0x1c2+1813-0x896
<operator>.subtraction 0xe0b+3198-0x1a88
<operator>.subtraction 0x1600+3221-0x2254
<operator>.subtraction 0x25f+8501-0x2393
<operator>.subtraction 0x294+9079-0x25ca
<operator>.cast (char)(0x1559+263-0x161f)
<operator>.subtraction 0xff9+4930-0x233b
<operator>.postDecrement ReplacementFor_outIndex--
<operator>.assignment ReplacementFor_outString\012[ReplacementFor_outIndex]=ReplacementFor_combination[ReplacementFor_outString[\012ReplacementFor_outIndex]-((char)(0x10a4+5338-0x253d))].ReplacementFor_list[\012ReplacementFor_j][(0x82+9282-0x24c3)]+((char)(0x23b+1418-0x784))
<operator>.cast (char)(0x5d4+6343-0x1e5a)
<operator>.subtraction 0xd35+2949-0x1879
<operator>.subtraction ReplacementFor_outIndex-\012(0x17e5+3201-0x2465)
<operator>.addition 0x377+5702
<operator>.assignment ReplacementFor_outIndex=-(0x1795+3064-0x238c)
<operator>.subtraction 0x1807+2719-0x22a6
<operator>.subtraction 0xf8c+470-0x1121
<operator>.cast (char)(0x1582+2791-0x2028)
<operator>.cast (char)(0xdf1+3049-0x1999)
<operator>.addition 0x8bd+1075
<operator>.addition 0x1942+766
<operator>.cast (char)(0x1376+3408-0x2085)
<operator>.subtraction ReplacementFor_ch[(0x436+6468-0x1d7a)]-((char)(0x1e4+7754-0x1fed))
<operator>.cast (char)(0x134b+2634-0x1d54)
<operator>.subtraction ReplacementFor_ch[(0x14bf+3780-0x2383)]-((char)(0xb5b+5877-0x220f))
<operator>.subtraction 0x3f0+7391-0x20ce
<operator>.subtraction 0x783+3526-0x1508
<operator>.cast (char)(0x65+7188-0x1c38)
<operator>.cast (char)(0x1d5c+517-0x1f20)
<operator>.addition 0x186c+3266
<operator>.addition 0x185b+3452
<operator>.cast (char)(0x7d4+7495-0x24da)
<operator>.subtraction ReplacementFor_ch[(0x968+5087-0x1d46)]-((char)(0xfe9+2970-0x1b42))
<operator>.cast (char)(0x67c+5037-0x19e8)
<operator>.subtraction ReplacementFor_ch[(0x6b9+5611-0x1ca3)]-((char)(0x14d+7505-0x1e5d))
<operator>.addition 0x1db+6719
<operator>.addition 0x2ea+7972
<operator>.addition 0x1b1a+536
<operator>.addition 0x1c2+1813
<operator>.addition 0xe0b+3198
<operator>.addition 0x1600+3221
<operator>.addition 0x25f+8501
<operator>.addition 0x294+9079
<operator>.subtraction 0x1559+263-0x161f
<operator>.addition 0xff9+4930
<operator>.subtraction ReplacementFor_outString[ReplacementFor_outIndex]-((char)(0x954+2751-0x13d2))
<operator>.subtraction ReplacementFor_outString[ReplacementFor_outIndex-(0xa09+6279-0x228f)]-\012((char)(0x64f+7578-0x23a8))
IDENTIFIER ReplacementFor_outIndex if (ReplacementFor_outIndex)
<operator>.subtraction 0x5d4+6343-0x1e5a
<operator>.subtraction ReplacementFor_outString[\012ReplacementFor_outIndex]-((char)(0xfc+1263-0x5aa))
<operator>.addition 0xd35+2949
<operator>.subtraction 0x17e5+3201-0x2465
<operator>.addition 0x1807+2719
<operator>.addition 0xf8c+470
<operator>.subtraction 0x206+8037-0x216b
<operator>.subtraction 0x1582+2791-0x2028
<operator>.subtraction 0x10f3+2649-0x1b4c
<operator>.subtraction 0xdf1+3049-0x1999
<operator>.subtraction 0x455+3523-0x1218
<operator>.subtraction 0x1376+3408-0x2085
<operator>.cast (char)(0x1e4+7754-0x1fed)
<operator>.subtraction 0x15e1+463-0x17b0
<operator>.subtraction 0x134b+2634-0x1d54
<operator>.cast (char)(0xb5b+5877-0x220f)
<operator>.addition 0x3f0+7391
<operator>.addition 0x783+3526
<operator>.subtraction 0xd2f+1092-0x1172
<operator>.subtraction 0x65+7188-0x1c38
<operator>.subtraction 0x1c79+1975-0x242f
<operator>.subtraction 0x1d5c+517-0x1f20
<operator>.subtraction 0x3ed+1770-0xad6
<operator>.subtraction 0x7d4+7495-0x24da
<operator>.cast (char)(0xfe9+2970-0x1b42)
<operator>.subtraction 0xac6+3309-0x17b2
<operator>.subtraction 0x67c+5037-0x19e8
<operator>.cast (char)(0x14d+7505-0x1e5d)
<operator>.addition 0x1559+263
<operator>.cast (char)(0x954+2751-0x13d2)
<operator>.subtraction 0x28a+6198-0x1ac0
<operator>.cast (char)(0x64f+7578-0x23a8)
<operator>.addition ReplacementFor_combination[ReplacementFor_outString[\012ReplacementFor_outIndex]-((char)(0x10a4+5338-0x253d))].ReplacementFor_list[\012ReplacementFor_j][(0x82+9282-0x24c3)]+((char)(0x23b+1418-0x784))
<operator>.addition 0x5d4+6343
<operator>.cast (char)(0xfc+1263-0x5aa)
<operator>.addition 0x17e5+3201
<operator>.minus -(0x1795+3064-0x238c)
<operator>.addition 0x206+8037
<operator>.addition 0x1582+2791
<operator>.addition 0x10f3+2649
<operator>.addition 0xdf1+3049
<operator>.addition 0x455+3523
<operator>.addition 0x1376+3408
<operator>.subtraction 0x436+6468-0x1d7a
<operator>.subtraction 0x1e4+7754-0x1fed
<operator>.addition 0x15e1+463
<operator>.addition 0x134b+2634
<operator>.subtraction 0x14bf+3780-0x2383
<operator>.subtraction 0xb5b+5877-0x220f
<operator>.addition 0xd2f+1092
<operator>.addition 0x65+7188
<operator>.addition 0x1c79+1975
<operator>.addition 0x1d5c+517
<operator>.addition 0x3ed+1770
<operator>.addition 0x7d4+7495
<operator>.subtraction 0x968+5087-0x1d46
<operator>.subtraction 0xfe9+2970-0x1b42
<operator>.addition 0xac6+3309
<operator>.addition 0x67c+5037
<operator>.subtraction 0x6b9+5611-0x1ca3
<operator>.subtraction 0x14d+7505-0x1e5d
<operator>.subtraction 0x954+2751-0x13d2
<operator>.addition 0x28a+6198
<operator>.subtraction ReplacementFor_outIndex-(0xa09+6279-0x228f)
<operator>.subtraction 0x64f+7578-0x23a8
<operator>.cast (char)(0x23b+1418-0x784)
<operator>.subtraction 0xfc+1263-0x5aa
<operator>.subtraction 0x1795+3064-0x238c
<operator>.addition 0x436+6468
<operator>.addition 0x1e4+7754
<operator>.addition 0x14bf+3780
<operator>.addition 0xb5b+5877
<operator>.addition 0x968+5087
<operator>.addition 0xfe9+2970
<operator>.addition 0x6b9+5611
<operator>.addition 0x14d+7505
<operator>.addition 0x954+2751
<operator>.subtraction 0xa09+6279-0x228f
<operator>.addition 0x64f+7578
<operator>.subtraction 0x82+9282-0x24c3
<operator>.subtraction 0x23b+1418-0x784
<operator>.addition 0xfc+1263
<operator>.addition 0x1795+3064
<operator>.subtraction ReplacementFor_outString[ReplacementFor_outIndex]-((char)(0x125f+3062-0x1e14))
<operator>.addition 0xa09+6279
<operator>.addition 0x82+9282
<operator>.addition 0x23b+1418
<operator>.cast (char)(0x125f+3062-0x1e14)
<operator>.subtraction 0x125f+3062-0x1e14
<operator>.subtraction ReplacementFor_outString[\012ReplacementFor_outIndex]-((char)(0x10a4+5338-0x253d))
<operator>.addition 0x125f+3062
<operator>.cast (char)(0x10a4+5338-0x253d)
<operator>.subtraction 0x10a4+5338-0x253d
<operator>.addition 0x10a4+5338
<operator>.indirectIndexAccess ReplacementFor_outString[ReplacementFor_outIndex]
<operator>.indirectIndexAccess ReplacementFor_inputString[i]
<operator>.indirectIndexAccess ReplacementFor_outString[i]
<operator>.fieldAccess ReplacementFor_combination[\012ReplacementFor_outString[ReplacementFor_outIndex]-((char)(0x1559+263-0x161f))].\012ReplacementFor_enable
<operator>.fieldAccess ReplacementFor_oppose[ReplacementFor_outString[ReplacementFor_outIndex]-\012((char)(0x5d4+6343-0x1e5a))].ReplacementFor_enable
<operator>.fieldAccess ReplacementFor_combination[ReplacementFor_ch[\012(0x206+8037-0x216b)]-((char)(0x1582+2791-0x2028))].ReplacementFor_enable
<operator>.fieldAccess ReplacementFor_combination[ReplacementFor_ch[\012(0x10f3+2649-0x1b4c)]-((char)(0xdf1+3049-0x1999))].ReplacementFor_noOfRows
<operator>.fieldAccess ReplacementFor_combination[ReplacementFor_ch[(0xd2f+1092-0x1172)]-\012((char)(0x65+7188-0x1c38))].ReplacementFor_enable
<operator>.fieldAccess ReplacementFor_combination[ReplacementFor_ch[(0x1c79+1975-0x242f)]-\012((char)(0x1d5c+517-0x1f20))].ReplacementFor_noOfRows
<operator>.indirectIndexAccess ReplacementFor_combination[\012ReplacementFor_outString[ReplacementFor_outIndex]-((char)(0x1559+263-0x161f))]
FIELD_IDENTIFIER ReplacementFor_enable ReplacementFor_enable
<operator>.indirectIndexAccess ReplacementFor_oppose[ReplacementFor_outString[ReplacementFor_outIndex]-\012((char)(0x5d4+6343-0x1e5a))]
FIELD_IDENTIFIER ReplacementFor_enable ReplacementFor_enable
<operator>.indirectIndexAccess ReplacementFor_combination[ReplacementFor_ch[\012(0x206+8037-0x216b)]-((char)(0x1582+2791-0x2028))]
FIELD_IDENTIFIER ReplacementFor_enable ReplacementFor_enable
<operator>.indirectIndexAccess ReplacementFor_combination[ReplacementFor_ch[\012(0x10f3+2649-0x1b4c)]-((char)(0xdf1+3049-0x1999))]
FIELD_IDENTIFIER ReplacementFor_noOfRows ReplacementFor_noOfRows
<operator>.indirectIndexAccess ReplacementFor_combination[ReplacementFor_ch[(0xd2f+1092-0x1172)]-\012((char)(0x65+7188-0x1c38))]
FIELD_IDENTIFIER ReplacementFor_enable ReplacementFor_enable
<operator>.indirectIndexAccess ReplacementFor_combination[ReplacementFor_ch[(0x1c79+1975-0x242f)]-\012((char)(0x1d5c+517-0x1f20))]
FIELD_IDENTIFIER ReplacementFor_noOfRows ReplacementFor_noOfRows
<operator>.fieldAccess ReplacementFor_combination[\012ReplacementFor_outString[ReplacementFor_outIndex]-((char)(0x954+2751-0x13d2))].\012ReplacementFor_noOfRows
<operator>.fieldAccess ReplacementFor_oppose[ReplacementFor_outString[\012ReplacementFor_outIndex]-((char)(0xfc+1263-0x5aa))].ReplacementFor_opposer
<operator>.indirectIndexAccess ReplacementFor_outString[ReplacementFor_outIndex]
<operator>.indirectIndexAccess ReplacementFor_combination[\012ReplacementFor_outString[ReplacementFor_outIndex]-((char)(0x954+2751-0x13d2))]
FIELD_IDENTIFIER ReplacementFor_noOfRows ReplacementFor_noOfRows
<operator>.indirectIndexAccess ReplacementFor_outString[ReplacementFor_outIndex]
<operator>.indirectIndexAccess ReplacementFor_oppose[ReplacementFor_outString[\012ReplacementFor_outIndex]-((char)(0xfc+1263-0x5aa))]
FIELD_IDENTIFIER ReplacementFor_opposer ReplacementFor_opposer
UNKNOWN char char
<operator>.indirectIndexAccess ReplacementFor_ch[\012(0x206+8037-0x216b)]
<operator>.indirectIndexAccess ReplacementFor_ch[\012(0x10f3+2649-0x1b4c)]
<operator>.indirectIndexAccess ReplacementFor_ch[(0xd2f+1092-0x1172)]
<operator>.indirectIndexAccess ReplacementFor_ch[(0x1c79+1975-0x242f)]
UNKNOWN char char
<operator>.indirectIndexAccess ReplacementFor_combination[\012ReplacementFor_outString[ReplacementFor_outIndex]-((char)(0x125f+3062-0x1e14))].\012ReplacementFor_list[ReplacementFor_j][(0x28a+6198-0x1ac0)]
UNKNOWN char char
<operator>.indirectIndexAccess ReplacementFor_outString[ReplacementFor_j]
UNKNOWN char char
UNKNOWN char char
UNKNOWN char char
UNKNOWN char char
<operator>.indirectIndexAccess ReplacementFor_outString[ReplacementFor_outIndex]
<operator>.indirectIndexAccess ReplacementFor_combination[\012ReplacementFor_outString[ReplacementFor_outIndex]-((char)(0x125f+3062-0x1e14))].\012ReplacementFor_list[ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_outString[ReplacementFor_outIndex-(0xa09+6279-0x228f)]
<operator>.indirectIndexAccess ReplacementFor_outString\012[ReplacementFor_outIndex]
<operator>.indirectIndexAccess ReplacementFor_outString[\012ReplacementFor_outIndex]
UNKNOWN char char
<operator>.fieldAccess ReplacementFor_combination[\012ReplacementFor_outString[ReplacementFor_outIndex]-((char)(0x125f+3062-0x1e14))].\012ReplacementFor_list
UNKNOWN char char
<operator>.indirectIndexAccess ReplacementFor_combination[ReplacementFor_outString[\012ReplacementFor_outIndex]-((char)(0x10a4+5338-0x253d))].ReplacementFor_list[\012ReplacementFor_j][(0x82+9282-0x24c3)]
UNKNOWN char char
<operator>.indirectIndexAccess ReplacementFor_combination[\012ReplacementFor_outString[ReplacementFor_outIndex]-((char)(0x125f+3062-0x1e14))]
FIELD_IDENTIFIER ReplacementFor_list ReplacementFor_list
<operator>.indirectIndexAccess ReplacementFor_combination[ReplacementFor_outString[\012ReplacementFor_outIndex]-((char)(0x10a4+5338-0x253d))].ReplacementFor_list[\012ReplacementFor_j]
UNKNOWN char char
<operator>.fieldAccess ReplacementFor_combination[ReplacementFor_outString[\012ReplacementFor_outIndex]-((char)(0x10a4+5338-0x253d))].ReplacementFor_list
<operator>.indirectIndexAccess ReplacementFor_outString[ReplacementFor_outIndex]
<operator>.indirectIndexAccess ReplacementFor_combination[ReplacementFor_outString[\012ReplacementFor_outIndex]-((char)(0x10a4+5338-0x253d))]
FIELD_IDENTIFIER ReplacementFor_list ReplacementFor_list
UNKNOWN char char
<operator>.indirectIndexAccess ReplacementFor_outString[\012ReplacementFor_outIndex]
UNKNOWN char char
>>>PDG&441 0->2 0->3 0->7 0->8 0->9 0->10 0->11 0->12 0->13 0->14 0->15 0->16 0->17 0->18 0->19 0->20 0->21 0->22 0->23 0->24 0->26 0->27 0->28 0->29 0->30 0->31 0->32 0->33 0->34 0->35 0->36 0->37 0->38 0->41 0->42 0->45 0->46 0->48 0->49 0->50 0->51 0->52 0->53 0->54 0->55 0->56 0->57 0->58 0->59 0->61 0->62 0->69 0->71 0->72 0->77 0->78 0->79 0->80 0->81 0->82 0->83 0->88 0->89 0->90 0->93 0->94 0->95 0->105 0->111 0->113 0->114 0->116 0->118 0->121 0->123 0->125 0->126 0->128 0->131 0->132 0->134 0->135 0->136 0->137 0->139 0->142 0->143 0->144 0->146 0->147 0->148 0->149 0->151 0->154 0->155 0->156 0->158 0->159 0->160 0->162 0->164 0->165 0->167 0->169 0->170 0->171 0->173 0->177 0->178 0->179 0->181 0->182 0->183 0->184 0->185 0->186 0->188 0->189 0->190 0->192 0->193 0->194 0->195 0->196 0->197 0->200 0->201 0->204 0->205 0->207 0->210 0->212 0->213 0->216 0->218 0->219 0->221 0->223 0->226 0->228 0->229 0->231 0->233 0->234 0->235 0->236 0->237 0->238 0->239 0->240 0->241 0->243 0->244 0->247 0->248 0->249 0->251 0->252 0->255 0->256 0->261 0->262 0->265 0->266 0->271 0->272 0->273 0->274 0->275 0->276 0->277 0->278 0->279 0->280 0->283 0->284 0->286 0->287 0->288 0->289 0->290 0->291 0->292 0->293 0->294 0->295 0->297 0->298 0->300 0->301 0->302 0->303 0->304 0->305 0->306 0->307 0->309 0->310 0->312 0->314 0->317 0->319 0->321 0->322 0->323 0->324 0->325 0->326 0->327 0->328 0->329 0->330 0->331 0->332 0->333 0->334 0->335 0->336 0->337 0->338 0->339 0->340 0->341 0->342 0->343 0->344 0->345 0->346 0->347 0->348 0->350 0->351 0->352 0->353 0->354 0->355 0->356 0->357 0->358 0->359 0->360 0->361 0->362 0->363 0->364 0->365 0->366 0->368 0->369 0->370 0->372 0->374 0->376 0->377 2->1 3->1 4->1 4->1 4->8 5->1 5->1 5->1 5->26 6->1 6->1 6->1 6->46 7->1 7->1 7->1 8->1 8->1 8->1 8->16 8->28 9->1 11->9 12->4 12->4 13->5 13->5 14->1 14->6 14->6 15->1 15->1 15->49 16->1 16->1 16->17 16->61 16->69 17->19 18->1 18->1 18->1 18->50 19->1 19->1 19->20 19->71 19->77 20->1 20->21 21->1 21->1 21->22 21->23 21->32 21->41 21->54 21->78 22->1 22->24 23->1 23->1 23->24 24->1 24->1 24->1 24->16 24->44 24->51 25->1 25->1 25->34 25->56 26->1 26->1 26->27 26->48 27->1 27->1 27->26 28->1 28->1 32->1 32->1 32->21 32->23 32->32 32->33 32->33 32->41 32->44 32->54 32->56 32->78 32->378 32->379 33->1 33->32 34->1 34->1 34->1 34->34 34->35 34->48 34->59 34->59 34->94 34->94 34->113 34->136 34->380 35->1 35->34 39->1 39->1 39->1 39->49 40->1 40->1 40->1 40->50 41->1 42->1 42->25 42->25 43->1 43->1 43->32 44->1 44->1 44->1 44->206 44->209 45->1 45->34 45->56 46->1 46->26 47->1 47->1 47->34 48->1 48->1 48->27 48->83 49->1 50->1 51->1 54->1 54->1 56->1 56->45 56->45 56->81 56->81 56->91 56->92 56->130 56->133 56->171 56->173 56->206 56->207 56->209 56->210 56->242 56->246 56->248 56->279 56->284 56->312 56->317 56->347 56->381 56->382 56->387 56->388 56->389 56->390 56->401 56->404 56->412 56->414 59->1 59->1 59->35 59->83 60->1 61->62 62->1 62->1 62->17 62->61 62->72 62->99 62->100 62->103 62->104 62->140 62->152 62->176 62->187 62->215 62->217 62->220 62->222 62->225 62->227 62->230 62->232 62->258 62->260 62->268 62->270 63->1 63->1 64->1 64->1 64->1 65->1 65->1 65->1 66->1 66->1 67->1 67->1 67->1 68->1 68->1 68->1 69->1 69->1 69->16 70->1 71->72 72->1 72->1 72->20 72->62 72->71 72->108 72->110 72->161 72->163 72->166 72->168 73->1 73->1 73->1 74->1 74->1 74->1 75->1 75->1 75->1 76->1 76->1 76->1 77->1 77->1 77->19 78->1 79->1 79->23 79->23 79->41 79->41 79->54 79->54 80->1 80->43 80->43 81->1 81->34 81->56 82->1 82->47 82->47 83->1 83->27 83->48 84->1 85->1 85->1 85->1 85->97 85->98 85->138 85->139 85->178 85->179 85->215 85->216 85->217 85->253 85->254 85->290 85->291 85->292 85->293 85->321 85->322 85->323 85->324 85->383 85->384 85->391 85->392 85->393 85->394 85->408 85->409 85->416 85->417 86->1 86->1 86->1 86->101 86->102 86->150 86->151 86->189 86->190 86->225 86->226 86->227 86->263 86->264 86->302 86->303 86->304 86->305 86->333 86->334 86->335 86->336 86->385 86->386 86->395 86->396 86->397 86->398 86->410 86->411 86->418 86->419 87->1 88->1 88->23 88->23 88->41 88->41 88->54 88->54 88->78 88->78 91->1 91->1 91->131 91->172 91->243 91->280 91->281 91->313 91->345 91->360 91->399 91->402 91->403 91->420 91->425 92->1 92->1 92->112 92->134 92->174 92->175 92->211 92->212 92->247 92->248 92->249 92->285 92->286 92->287 92->318 92->319 92->350 92->365 92->400 92->405 92->406 92->407 92->424 92->429 94->1 94->34 94->59 94->59 95->1 95->39 95->39 95->60 95->60 95->84 95->84 96->1 97->1 97->1 97->1 98->1 98->1 98->1 99->1 99->1 99->62 99->64 99->64 99->72 99->213 100->1 100->1 100->62 100->65 100->65 100->72 100->213 101->1 101->1 101->1 102->1 102->1 102->1 103->1 103->1 103->62 103->67 103->67 103->72 103->213 104->1 104->1 104->62 104->68 104->68 104->72 104->213 105->1 105->40 105->40 105->70 105->70 105->87 105->87 106->1 107->1 107->73 108->1 108->1 108->62 108->72 108->74 108->74 108->213 109->1 109->75 110->1 110->1 110->62 110->72 110->76 110->76 110->213 112->1 112->1 112->1 112->62 112->72 112->213 113->1 113->94 113->94 115->1 115->85 116->1 117->1 118->1 119->1 120->1 120->86 121->1 122->1 123->1 124->1 126->1 126->107 126->107 127->1 128->1 128->109 128->109 129->1 130->1 130->91 131->1 131->1 131->132 131->208 131->282 131->314 131->315 131->346 131->347 131->348 131->361 131->362 131->367 131->368 131->371 131->372 131->374 131->413 131->421 131->422 131->426 131->427 131->430 131->431 131->435 131->438 132->1 132->131 133->1 133->92 134->1 134->1 134->1 134->135 134->213 134->415 135->1 135->134 137->1 137->115 137->115 138->1 138->97 139->1 139->98 139->98 140->1 140->1 140->62 140->72 140->213 141->1 141->1 143->1 144->1 144->99 144->99 144->117 144->117 145->1 145->1 147->1 148->1 148->100 148->100 148->119 148->119 149->1 149->120 149->120 150->1 150->101 151->1 151->102 151->102 152->1 152->1 152->62 152->72 152->213 153->1 153->1 155->1 156->1 156->103 156->103 156->122 156->122 157->1 157->1 159->1 160->1 160->104 160->104 160->124 160->124 161->1 161->1 161->62 161->72 161->213 163->1 163->1 163->62 163->72 163->213 164->1 165->1 165->108 165->108 165->127 165->127 166->1 166->1 166->62 166->72 166->213 168->1 168->1 168->62 168->72 168->213 169->1 170->1 170->110 170->110 170->129 170->129 171->1 171->130 171->130 172->1 172->1 172->131 173->1 173->133 173->133 174->1 175->1 175->1 175->134 176->1 176->1 176->62 176->72 176->213 178->1 178->138 178->138 180->1 181->1 181->141 181->141 184->1 184->145 184->145 187->1 187->1 187->62 187->72 187->213 189->1 189->150 189->150 191->1 192->1 192->153 192->153 195->1 195->157 195->157 198->1 199->1 202->1 203->1 206->1 206->1 206->209 206->281 208->1 208->1 208->1 208->91 208->130 208->131 208->132 208->171 208->206 208->207 208->242 208->244 208->245 208->279 208->281 208->312 208->313 208->316 208->345 208->349 208->360 208->363 208->364 208->369 208->370 208->373 208->375 208->376 208->377 208->381 208->387 208->388 208->399 208->401 208->402 208->403 208->412 208->420 208->423 208->425 208->428 208->432 208->433 208->434 208->436 208->437 208->439 208->440 209->1 209->1 211->1 212->1 212->134 212->134 213->1 213->1 213->1 213->62 213->72 213->134 213->135 213->212 213->249 213->250 213->320 213->351 213->366 214->1 215->1 215->1 215->62 215->72 215->213 217->1 217->1 217->62 217->72 217->213 218->1 219->1 219->140 219->140 219->180 219->180 220->1 220->1 220->62 220->72 220->213 222->1 222->1 222->62 222->72 222->213 224->1 225->1 225->1 225->62 225->72 225->213 227->1 227->1 227->62 227->72 227->213 228->1 229->1 229->152 229->152 229->191 229->191 230->1 230->1 230->62 230->72 230->213 232->1 232->1 232->62 232->72 232->213 234->1 235->1 235->161 235->161 235->198 235->198 236->1 237->1 237->163 237->163 237->199 237->199 238->1 239->1 239->166 239->166 239->202 239->202 240->1 241->1 241->168 241->168 241->203 241->203 242->1 243->1 243->172 243->172 244->1 244->45 244->248 244->347 245->1 245->1 245->1 246->1 247->1 247->112 247->112 247->174 247->174 247->211 247->211 248->1 248->45 248->175 248->175 250->1 250->1 250->45 251->1 252->1 252->176 252->176 252->214 252->214 253->1 254->1 257->1 258->1 258->1 258->62 258->72 258->213 259->1 260->1 260->1 260->62 260->72 260->213 261->1 262->1 262->187 262->187 262->224 262->224 263->1 264->1 267->1 268->1 268->1 268->62 268->72 268->213 269->1 270->1 270->1 270->62 270->72 270->213 279->1 279->206 279->206 279->242 279->242 281->1 281->1 281->209 281->367 282->1 282->1 282->208 282->208 284->1 284->209 284->209 284->246 284->246 285->1 285->1 285->373 287->1 287->248 287->248 290->1 291->1 291->215 291->215 291->253 291->253 292->1 293->1 293->217 293->217 293->254 293->254 294->1 295->1 295->220 295->220 295->257 295->257 296->1 297->1 298->1 298->222 298->222 298->259 298->259 299->1 302->1 303->1 303->225 303->225 303->263 303->263 304->1 305->1 305->227 305->227 305->264 305->264 306->1 307->1 307->230 307->230 307->267 307->267 308->1 309->1 310->1 310->232 310->232 310->269 310->269 311->1 313->1 314->1 315->1 316->1 316->1 318->1 320->1 320->250 327->1 328->1 328->258 328->258 328->296 328->296 331->1 332->1 332->260 332->260 332->299 332->299 339->1 340->1 340->268 340->268 340->308 340->308 343->1 344->1 344->270 344->270 344->311 344->311 345->1 345->281 345->281 345->313 345->313 347->1 347->45 347->244 347->248 348->1 348->282 348->282 348->315 348->315 349->1 350->1 350->285 350->285 350->318 350->318 351->1 351->320 351->320 361->1 361->347 361->347 363->1 364->1 364->245 364->245 364->316 364->316 364->349 364->349 367->1 367->1 367->206 367->209 367->281 371->1 372->1 372->367 372->367 372->371 372->371 373->1 373->1 373->285 375->1 376->1 376->373 376->373 376->375 376->375
>>>Token int main ( int ReplacementFor_argc , char * * ReplacementFor_argv ) { FILE * ReplacementFor_inp , * ReplacementFor_out ; ReplacementFor_inp = fopen ( " \x2e \x2f \x42 \x2d \x73 \x6d \x61 \x6c \x6c \x2d \x61 \x74 \x74 \x65 \x6d \x70 \x74 \x30 \x2e \x69 \x6e " , " \x72 \x62 " ) ; ReplacementFor_out = fopen ( " \x2e \x2f \x6f \x75 \x74 \x70 \x75 \x74 \x2e \x74 \x78 \x74 " , " \x77 " ) ; int ReplacementFor_testCases , ReplacementFor_C , ReplacementFor_D , ReplacementFor_N , ReplacementFor_testCount = ( 0x352 + 5424 - 0x1882 ) ; char * ReplacementFor_inputString = NULL ; fscanf ( ReplacementFor_inp , " \x25 \x64 " , & ReplacementFor_testCases ) ; while ( ReplacementFor_testCases ) { ReplacementFor_combinationList * ReplacementFor_combination = NULL ; fscanf ( ReplacementFor_inp , " \x25 \x64 " , & ReplacementFor_C ) ; if ( ReplacementFor_C ) { ReplacementFor_combination = ( ReplacementFor_combinationList * ) calloc ( ( 0x1581 + 2456 - 0x1eff ) , sizeof ( ReplacementFor_combinationList ) ) ; while ( ReplacementFor_C ) { char ReplacementFor_ch [ ( 0x392 + 6236 - 0x1bea ) ] ; fgetc ( ReplacementFor_inp ) ; fscanf ( ReplacementFor_inp , " \x25 \x73 " , ReplacementFor_ch ) ; if ( ReplacementFor_combination [ ReplacementFor_ch [ ( 0x1807 + 2719 - 0x22a6 ) ] - ( ( char ) ( 0xf8c + 470 - 0x1121 ) ) ] . ReplacementFor_enable != - ( 0x204 + 4064 - 0x11e3 ) ) { ReplacementFor_combination [ ReplacementFor_ch [ ( 0x206 + 8037 - 0x216b ) ] - ( ( char ) ( 0x1582 + 2791 - 0x2028 ) ) ] . ReplacementFor_enable = - ( 0x9a4 + 4392 - 0x1acb ) ; ReplacementFor_combination [ ReplacementFor_ch [ ( 0x10f3 + 2649 - 0x1b4c ) ] - ( ( char ) ( 0xdf1 + 3049 - 0x1999 ) ) ] . ReplacementFor_noOfRows = ( 0xa81 + 1267 - 0xf74 ) ; } ReplacementFor_combination [ ReplacementFor_ch [ ( 0x8bd + 1075 - 0xcf0 ) ] - ( ( char ) ( 0x1942 + 766 - 0x1bff ) ) ] . ReplacementFor_noOfRows ++ ; ReplacementFor_combination [ ReplacementFor_ch [ ( 0x455 + 3523 - 0x1218 ) ] - ( ( char ) ( 0x1376 + 3408 - 0x2085 ) ) ] . ReplacementFor_list [ ReplacementFor_combination [ ReplacementFor_ch [ ( 0x436 + 6468 - 0x1d7a ) ] - ( ( char ) ( 0x1e4 + 7754 - 0x1fed ) ) ] . ReplacementFor_noOfRows - ( 0xae3 + 6089 - 0x22ab ) ] [ ( 0x2ab + 9179 - 0x2686 ) ] = ReplacementFor_ch [ ( 0x3aa + 7589 - 0x214e ) ] - ( ( char ) ( 0x116b + 3228 - 0x1dc6 ) ) ; ReplacementFor_combination [ ReplacementFor_ch [ ( 0x15e1 + 463 - 0x17b0 ) ] - ( ( char ) ( 0x134b + 2634 - 0x1d54 ) ) ] . ReplacementFor_list [ ReplacementFor_combination [ ReplacementFor_ch [ ( 0x14bf + 3780 - 0x2383 ) ] - ( ( char ) ( 0xb5b + 5877 - 0x220f ) ) ] . ReplacementFor_noOfRows - ( 0x140 + 3873 - 0x1060 ) ] [ ( 0x115d + 2692 - 0x1be0 ) ] = ReplacementFor_ch [ ( 0xd42 + 5812 - 0x23f4 ) ] - ( ( char ) ( 0x1041 + 909 - 0x138d ) ) ; if ( ReplacementFor_combination [ ReplacementFor_ch [ ( 0x3f0 + 7391 - 0x20ce ) ] - ( ( char ) ( 0x783 + 3526 - 0x1508 ) ) ] . ReplacementFor_enable != - ( 0xce3 + 1718 - 0x1398 ) ) { ReplacementFor_combination [ ReplacementFor_ch [ ( 0xd2f + 1092 - 0x1172 ) ] - ( ( char ) ( 0x65 + 7188 - 0x1c38 ) ) ] . ReplacementFor_enable = - ( 0x951 + 474 - 0xb2a ) ; ReplacementFor_combination [ ReplacementFor_ch [ ( 0x1c79 + 1975 - 0x242f ) ] - ( ( char ) ( 0x1d5c + 517 - 0x1f20 ) ) ] . ReplacementFor_noOfRows = ( 0xf59 + 921 - 0x12f2 ) ; } ReplacementFor_combination [ ReplacementFor_ch [ ( 0x186c + 3266 - 0x252d ) ] - ( ( char ) ( 0x185b + 3452 - 0x2596 ) ) ] . ReplacementFor_noOfRows ++ ; ReplacementFor_combination [ ReplacementFor_ch [ ( 0x3ed + 1770 - 0xad6 ) ] - ( ( char ) ( 0x7d4 + 7495 - 0x24da ) ) ] . ReplacementFor_list [ ReplacementFor_combination [ ReplacementFor_ch [ ( 0x968 + 5087 - 0x1d46 ) ] - ( ( char ) ( 0xfe9 + 2970 - 0x1b42 ) ) ] . ReplacementFor_noOfRows - ( 0x11bf + 1589 - 0x17f3 ) ] [ ( 0x9b3 + 4605 - 0x1bb0 ) ] = ReplacementFor_ch [ ( 0x11a0 + 3281 - 0x1e71 ) ] - ( ( char ) ( 0x652 + 7931 - 0x250c ) ) ; ReplacementFor_combination [ ReplacementFor_ch [ ( 0xac6 + 3309 - 0x17b2 ) ] - ( ( char ) ( 0x67c + 5037 - 0x19e8 ) ) ] . ReplacementFor_list [ ReplacementFor_combination [ ReplacementFor_ch [ ( 0x6b9 + 5611 - 0x1ca3 ) ] - ( ( char ) ( 0x14d + 7505 - 0x1e5d ) ) ] . ReplacementFor_noOfRows - ( 0x51b + 3810 - 0x13fc ) ] [ ( 0x1646 + 2848 - 0x2165 ) ] = ReplacementFor_ch [ ( 0x3c7 + 6410 - 0x1ccf ) ] - ( ( char ) ( 0x96c + 5776 - 0x1fbb ) ) ; ReplacementFor_C -- ; } } fgetc ( ReplacementFor_inp ) ; ReplacementFor_opposeList * ReplacementFor_oppose = NULL ; fscanf ( ReplacementFor_inp , " \x25 \x64 " , & ReplacementFor_D ) ; if ( ReplacementFor_D ) { ReplacementFor_oppose = ( ReplacementFor_opposeList * ) calloc ( ( 0x20d + 6610 - 0x1bc5 ) , sizeof ( ReplacementFor_opposeList ) ) ; while ( ReplacementFor_D ) { char ReplacementFor_ch [ ( 0x887 + 6598 - 0x224a ) ] ; fgetc ( ReplacementFor_inp ) ; fscanf ( ReplacementFor_inp , " \x25 \x73 " , ReplacementFor_ch ) ; ReplacementFor_oppose [ ReplacementFor_ch [ ( 0x1db + 6719 - 0x1c1a ) ] - ( ( char ) ( 0x2ea + 7972 - 0x21cd ) ) ] . ReplacementFor_enable = - ( 0x1723 + 1598 - 0x1d60 ) ; ReplacementFor_oppose [ ReplacementFor_ch [ ( 0x1b1a + 536 - 0x1d32 ) ] - ( ( char ) ( 0x1c2 + 1813 - 0x896 ) ) ] . ReplacementFor_opposer = ReplacementFor_ch [ ( 0x144 + 7915 - 0x202e ) ] - ( ( char ) ( 0x1f7 + 9344 - 0x2636 ) ) ; ReplacementFor_oppose [ ReplacementFor_ch [ ( 0xe0b + 3198 - 0x1a88 ) ] - ( ( char ) ( 0x1600 + 3221 - 0x2254 ) ) ] . ReplacementFor_enable = - ( 0x6d5 + 6242 - 0x1f36 ) ; ReplacementFor_oppose [ ReplacementFor_ch [ ( 0x25f + 8501 - 0x2393 ) ] - ( ( char ) ( 0x294 + 9079 - 0x25ca ) ) ] . ReplacementFor_opposer = ReplacementFor_ch [ ( 0x1ae2 + 3046 - 0x26c8 ) ] - ( ( char ) ( 0x8cd + 5180 - 0x1cc8 ) ) ; ReplacementFor_D -- ; } } fgetc ( ReplacementFor_inp ) ; fscanf ( ReplacementFor_inp , " \x25 \x64 " , & ReplacementFor_N ) ; fgetc ( ReplacementFor_inp ) ; ReplacementFor_inputString = ( char * ) calloc ( ReplacementFor_N + ( 0x11a8 + 4041 - 0x2170 ) , ( 0x7d + 6830 - 0x1b2a ) ) ; fscanf ( ReplacementFor_inp , " \x25 \x73 " , ReplacementFor_inputString ) ; char ReplacementFor_outString [ ReplacementFor_N ] ; int ReplacementFor_outIndex = ( 0xfca + 4349 - 0x20c7 ) ; for ( int i = ( 0x4e8 + 5767 - 0x1b6f ) ; i < ReplacementFor_N ; i ++ ) { ReplacementFor_outString [ ReplacementFor_outIndex ] = ReplacementFor_inputString [ i ] ; if ( ! ReplacementFor_outIndex ) { ReplacementFor_outIndex ++ ; continue ; } ReplacementFor_comb : if ( ReplacementFor_combination ) { if ( ReplacementFor_combination [ ReplacementFor_outString [ ReplacementFor_outIndex ] - ( ( char ) ( 0x1559 + 263 - 0x161f ) ) ] . ReplacementFor_enable == - ( 0x1b92 + 1237 - 0x2066 ) ) { for ( int ReplacementFor_j = ( 0xff9 + 4930 - 0x233b ) ; ReplacementFor_j < ReplacementFor_combination [ ReplacementFor_outString [ ReplacementFor_outIndex ] - ( ( char ) ( 0x954 + 2751 - 0x13d2 ) ) ] . ReplacementFor_noOfRows ; ReplacementFor_j ++ ) { if ( ReplacementFor_combination [ ReplacementFor_outString [ ReplacementFor_outIndex ] - ( ( char ) ( 0x125f + 3062 - 0x1e14 ) ) ] . ReplacementFor_list [ ReplacementFor_j ] [ ( 0x28a + 6198 - 0x1ac0 ) ] == ( ReplacementFor_outString [ ReplacementFor_outIndex - ( 0xa09 + 6279 - 0x228f ) ] - ( ( char ) ( 0x64f + 7578 - 0x23a8 ) ) ) ) { ReplacementFor_outIndex -- ; ReplacementFor_outString [ ReplacementFor_outIndex ] = ReplacementFor_combination [ ReplacementFor_outString [ ReplacementFor_outIndex ] - ( ( char ) ( 0x10a4 + 5338 - 0x253d ) ) ] . ReplacementFor_list [ ReplacementFor_j ] [ ( 0x82 + 9282 - 0x24c3 ) ] + ( ( char ) ( 0x23b + 1418 - 0x784 ) ) ; if ( ReplacementFor_outIndex ) goto ReplacementFor_comb ; } } } } if ( ReplacementFor_oppose ) { if ( ReplacementFor_oppose [ ReplacementFor_outString [ ReplacementFor_outIndex ] - ( ( char ) ( 0x5d4 + 6343 - 0x1e5a ) ) ] . ReplacementFor_enable == - ( 0x629 + 836 - 0x96c ) ) { char ReplacementFor_ch = ReplacementFor_oppose [ ReplacementFor_outString [ ReplacementFor_outIndex ] - ( ( char ) ( 0xfc + 1263 - 0x5aa ) ) ] . ReplacementFor_opposer + ( ( char ) ( 0xd35 + 2949 - 0x1879 ) ) ; for ( int ReplacementFor_j = ReplacementFor_outIndex - ( 0x17e5 + 3201 - 0x2465 ) ; ReplacementFor_j >= ( 0x377 + 5702 - 0x19bd ) ; ReplacementFor_j -- ) { if ( ReplacementFor_outString [ ReplacementFor_j ] == ReplacementFor_ch ) { ReplacementFor_outIndex = - ( 0x1795 + 3064 - 0x238c ) ; break ; } } } } ReplacementFor_outIndex ++ ; } fprintf ( ReplacementFor_out , " \x43 \x61 \x73 \x65 \x20 \x23 \x25 \x64 \x3a \x20 \x5b " , ++ ReplacementFor_testCount ) ; for ( int i = ( 0x449 + 5122 - 0x184b ) ; i < ReplacementFor_outIndex ; i ++ ) { fprintf ( ReplacementFor_out , " \x25 \x63 " , ReplacementFor_outString [ i ] ) ; if ( i != ReplacementFor_outIndex - ( 0x32c + 1691 - 0x9c6 ) ) fprintf ( ReplacementFor_out , " \x2c \x20 " ) ; } fprintf ( ReplacementFor_out , " \x5d " " \n " ) ; ReplacementFor_testCases -- ; if ( ReplacementFor_combination ) free ( ReplacementFor_combination ) ; if ( ReplacementFor_oppose ) free ( ReplacementFor_oppose ) ; if ( ReplacementFor_inputString ) free ( ReplacementFor_inputString ) ; } return ( EXIT_SUCCESS ) ; }
>>>Func
METHOD ReplacementFor_myprint
METHOD_RETURN void
<operator>.lessThan i\012<(0x1892+597-0x1adf)
<operator>.postIncrement i++
<operator>.assignment i=(0x7c7+2127-0x1016)
<operator>.lessThan ReplacementFor_j<(0x16e3+2952-0x2263)
<operator>.postIncrement ReplacementFor_j++
<operator>.subtraction 0x1892+597-0x1adf
<operator>.assignment ReplacementFor_j=(0x1a95+1449-0x203e)
printf printf(\012"\x69\x3d\x25\x64\x2c\x6a\x3d\x25\x64\x2c\x20\x6d\x61\x74\x63\x68\x3d\x25\x63" "\n"\012,i,ReplacementFor_j,ReplacementFor_match[i][ReplacementFor_j])
<operator>.subtraction 0x7c7+2127-0x1016
<operator>.addition 0x1892+597
<operator>.subtraction 0x16e3+2952-0x2263
<operator>.addition 0x7c7+2127
<operator>.subtraction 0x1a95+1449-0x203e
<operator>.addition 0x16e3+2952
<operator>.addition 0x1a95+1449
<operator>.indirectIndexAccess ReplacementFor_match[i][ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_match[i]
>>>PDG&19 0->2 0->3 0->5 0->6 0->7 0->9 0->10 0->11 0->12 0->13 0->14 0->15 0->16 2->1 2->1 2->1 2->2 2->3 2->3 2->5 2->7 2->8 2->9 2->11 2->12 2->14 2->15 2->16 3->1 3->2 4->1 4->1 4->2 5->1 5->1 5->1 5->5 5->6 5->9 5->9 5->12 5->15 5->17 5->18 6->1 6->5 7->1 7->2 7->2 8->1 8->1 8->5 9->1 9->1 9->3 9->6 10->1 10->4 10->4 12->1 12->5 12->5 14->1 14->8 14->8
>>>Token void ReplacementFor_myprint ( ) { int i , ReplacementFor_j ; for ( i = ( 0x7c7 + 2127 - 0x1016 ) ; i < ( 0x1892 + 597 - 0x1adf ) ; i ++ ) for ( ReplacementFor_j = ( 0x1a95 + 1449 - 0x203e ) ; ReplacementFor_j < ( 0x16e3 + 2952 - 0x2263 ) ; ReplacementFor_j ++ ) { printf ( " \x69 \x3d \x25 \x64 \x2c \x6a \x3d \x25 \x64 \x2c \x20 \x6d \x61 \x74 \x63 \x68 \x3d \x25 \x63 " " \n " , i , ReplacementFor_j , ReplacementFor_match [ i ] [ ReplacementFor_j ] ) ; } }
>>>Func
METHOD ReplacementFor_set_owner
METHOD_RETURN int
PARAM const struct ReplacementFor_cp_options*\012ReplacementFor_x
PARAM char const*ReplacementFor_dst_name
PARAM int ReplacementFor_dst_dirfd
PARAM char const*ReplacementFor_dst_relname
PARAM int ReplacementFor_dest_desc
PARAM struct stat \012const*ReplacementFor_src_sb
PARAM bool ReplacementFor_new_dst
PARAM struct stat const*\012ReplacementFor_dst_sb
<operator>.assignment uid=ReplacementFor_src_sb->st_uid
<operator>.assignment gid=\012ReplacementFor_src_sb->st_gid
RETURN return\012(0x6b0+7690-0x24ba); return\012(0x6b0+7690-0x24ba);
<operator>.logicalAnd !ReplacementFor_new_dst&&(ReplacementFor_x->\012ReplacementFor_preserve_mode||ReplacementFor_x->ReplacementFor_move_mode||\012ReplacementFor_x->ReplacementFor_set_mode)
<operator>.logicalAnd ReplacementFor_HAVE_FCHOWN&&\012ReplacementFor_dest_desc!=-(0x1721+1770-0x1e0a)
<operator>.logicalNot !\012ReplacementFor_chown_failure_ok(ReplacementFor_x)
<operator>.subtraction 0x6b0+7690-0x24ba
<operator>.assignment ReplacementFor_old_mode=\012ReplacementFor_dst_sb->st_mode
<operator>.assignment ReplacementFor_new_mode=(ReplacementFor_x\012->ReplacementFor_preserve_mode||ReplacementFor_x->ReplacementFor_move_mode?\012ReplacementFor_src_sb->st_mode:ReplacementFor_x->mode)
<operator>.assignment ReplacementFor_restrictive_temp_mode=ReplacementFor_old_mode&\012ReplacementFor_new_mode&S_IRWXU
error error((0x1603+496-0x17f3) \012errno ReplacementFor__(\012"\x66\x61\x69\x6c\x65\x64\x20\x74\x6f\x20\x70\x72\x65\x73\x65\x72\x76\x65\x20\x6f\x77\x6e\x65\x72\x73\x68\x69\x70\x20\x66\x6f\x72\x20\x25\x73"\012) ReplacementFor_quoteaf(ReplacementFor_dst_name))
<operator>.logicalNot !ReplacementFor_new_dst
<operator>.logicalOr ReplacementFor_x->\012ReplacementFor_preserve_mode||ReplacementFor_x->ReplacementFor_move_mode||\012ReplacementFor_x->ReplacementFor_set_mode
<operator>.logicalAnd (ReplacementFor_USE_ACL||(\012ReplacementFor_old_mode&ReplacementFor_CHMOD_MODE_BITS&(~ReplacementFor_new_mode\012|S_ISUID|S_ISGID|S_ISVTX)))&&ReplacementFor_qset_acl(ReplacementFor_dst_name,\012ReplacementFor_dest_desc,ReplacementFor_restrictive_temp_mode)!=\012(0x1826+568-0x1a5e)
<operator>.notEquals ReplacementFor_dest_desc!=-(0x1721+1770-0x1e0a)
<operator>.equals fchown(\012ReplacementFor_dest_desc,uid,gid)==(0x1342+874-0x16ac)
<operator>.logicalOr errno==EPERM||errno==EINVAL
ReplacementFor_chown_failure_ok ReplacementFor_chown_failure_ok(ReplacementFor_x)
<operator>.addition 0x6b0+7690
<operator>.logicalOr ReplacementFor_x->\012ReplacementFor_preserve_mode||ReplacementFor_x->ReplacementFor_move_mode
<operator>.conditional ReplacementFor_x\012->ReplacementFor_preserve_mode||ReplacementFor_x->ReplacementFor_move_mode?\012ReplacementFor_src_sb->st_mode:ReplacementFor_x->mode
<operator>.and ReplacementFor_old_mode&\012ReplacementFor_new_mode&S_IRWXU
RETURN return-ReplacementFor_x->\012ReplacementFor_require_preserve; return-ReplacementFor_x->\012ReplacementFor_require_preserve;
<operator>.minus -(0x1721+1770-0x1e0a)
RETURN return\012(0x1833+2324-0x2146); return\012(0x1833+2324-0x2146);
<operator>.assignment ReplacementFor_saved_errno=errno
ReplacementFor_ignore_value ReplacementFor_ignore_value(fchown(\012ReplacementFor_dest_desc -(0x351+7326-0x1fee),gid))
<operator>.assignment errno=\012ReplacementFor_saved_errno
<operator>.equals ReplacementFor_lchownat(\012ReplacementFor_dst_dirfd,ReplacementFor_dst_relname,uid,gid)==(0x8c+3883-0xfb7)
<operator>.logicalOr errno==EPERM||errno==EINVAL
<operator>.subtraction 0x1603+496-0x17f3
ReplacementFor__ ReplacementFor__(\012"\x66\x61\x69\x6c\x65\x64\x20\x74\x6f\x20\x70\x72\x65\x73\x65\x72\x76\x65\x20\x6f\x77\x6e\x65\x72\x73\x68\x69\x70\x20\x66\x6f\x72\x20\x25\x73"\012)
ReplacementFor_quoteaf ReplacementFor_quoteaf(ReplacementFor_dst_name)
RETURN return-(0x13f8+1955-0x1b9a); return-(0x13f8+1955-0x1b9a);
<operator>.logicalOr ReplacementFor_x\012->ReplacementFor_preserve_mode||ReplacementFor_x->ReplacementFor_move_mode
<operator>.and ReplacementFor_old_mode&\012ReplacementFor_new_mode
<operator>.logicalOr ReplacementFor_USE_ACL||(\012ReplacementFor_old_mode&ReplacementFor_CHMOD_MODE_BITS&(~ReplacementFor_new_mode\012|S_ISUID|S_ISGID|S_ISVTX))
<operator>.notEquals ReplacementFor_qset_acl(ReplacementFor_dst_name,\012ReplacementFor_dest_desc,ReplacementFor_restrictive_temp_mode)!=\012(0x1826+568-0x1a5e)
<operator>.logicalNot !ReplacementFor_owner_failure_ok(ReplacementFor_x)
<operator>.minus -ReplacementFor_x->\012ReplacementFor_require_preserve
<operator>.subtraction 0x1721+1770-0x1e0a
fchown fchown(\012ReplacementFor_dest_desc,uid,gid)
<operator>.subtraction 0x1342+874-0x16ac
<operator>.subtraction 0x1833+2324-0x2146
<operator>.equals errno==EPERM
<operator>.equals errno==EINVAL
RETURN return(0x41+1723-0x6fb); return(0x41+1723-0x6fb);
<operator>.assignment ReplacementFor_saved_errno=errno
ReplacementFor_ignore_value ReplacementFor_ignore_value(\012ReplacementFor_lchownat(ReplacementFor_dst_dirfd ReplacementFor_dst_relname -\012(0x20fa+1325-0x2626),gid))
<operator>.assignment errno=ReplacementFor_saved_errno
<operator>.addition 0x1603+496
<operator>.minus -(0x13f8+1955-0x1b9a)
<operator>.and ReplacementFor_old_mode&ReplacementFor_CHMOD_MODE_BITS&(~ReplacementFor_new_mode\012|S_ISUID|S_ISGID|S_ISVTX)
ReplacementFor_qset_acl ReplacementFor_qset_acl(ReplacementFor_dst_name,\012ReplacementFor_dest_desc,ReplacementFor_restrictive_temp_mode)
<operator>.subtraction 0x1826+568-0x1a5e
error error\012((0x103b+4439-0x2192) errno ReplacementFor__(\012"\x63\x6c\x65\x61\x72\x69\x6e\x67\x20\x70\x65\x72\x6d\x69\x73\x73\x69\x6f\x6e\x73\x20\x66\x6f\x72\x20\x25\x73"\012) ReplacementFor_quoteaf(ReplacementFor_dst_name))
<operator>.addition 0x1721+1770
<operator>.addition 0x1342+874
fchown fchown(\012ReplacementFor_dest_desc -(0x351+7326-0x1fee),gid)
ReplacementFor_lchownat ReplacementFor_lchownat(\012ReplacementFor_dst_dirfd,ReplacementFor_dst_relname,uid,gid)
<operator>.subtraction 0x8c+3883-0xfb7
<operator>.subtraction 0x41+1723-0x6fb
<operator>.equals errno==EPERM
<operator>.equals errno==EINVAL
<operator>.and ReplacementFor_old_mode&ReplacementFor_CHMOD_MODE_BITS
<operator>.or ~ReplacementFor_new_mode\012|S_ISUID|S_ISGID|S_ISVTX
<operator>.addition 0x1826+568
ReplacementFor_owner_failure_ok ReplacementFor_owner_failure_ok(ReplacementFor_x)
<operator>.addition 0x1833+2324
<operator>.minus -(0x351+7326-0x1fee)
<operator>.addition 0x8c+3883
ReplacementFor_lchownat ReplacementFor_lchownat(ReplacementFor_dst_dirfd ReplacementFor_dst_relname -\012(0x20fa+1325-0x2626),gid)
<operator>.subtraction 0x13f8+1955-0x1b9a
<operator>.or ~ReplacementFor_new_mode\012|S_ISUID|S_ISGID
<operator>.subtraction 0x103b+4439-0x2192
ReplacementFor__ ReplacementFor__(\012"\x63\x6c\x65\x61\x72\x69\x6e\x67\x20\x70\x65\x72\x6d\x69\x73\x73\x69\x6f\x6e\x73\x20\x66\x6f\x72\x20\x25\x73"\012)
ReplacementFor_quoteaf ReplacementFor_quoteaf(ReplacementFor_dst_name)
<operator>.subtraction 0x351+7326-0x1fee
<operator>.addition 0x41+1723
<operator>.minus -\012(0x20fa+1325-0x2626)
<operator>.addition 0x13f8+1955
<operator>.or ~ReplacementFor_new_mode\012|S_ISUID
<operator>.addition 0x103b+4439
<operator>.addition 0x351+7326
<operator>.subtraction 0x20fa+1325-0x2626
<operator>.not ~ReplacementFor_new_mode
<operator>.addition 0x20fa+1325
<operator>.indirectFieldAccess ReplacementFor_x->ReplacementFor_set_mode
<operator>.indirectFieldAccess ReplacementFor_dst_sb->st_mode
<operator>.indirectFieldAccess ReplacementFor_x->\012ReplacementFor_require_preserve
<operator>.indirectFieldAccess ReplacementFor_x->\012ReplacementFor_preserve_mode
<operator>.indirectFieldAccess ReplacementFor_x->ReplacementFor_move_mode
FIELD_IDENTIFIER ReplacementFor_set_mode ReplacementFor_set_mode
FIELD_IDENTIFIER st_mode st_mode
<operator>.indirectFieldAccess ReplacementFor_src_sb->st_mode
<operator>.indirectFieldAccess ReplacementFor_x->mode
FIELD_IDENTIFIER ReplacementFor_require_preserve ReplacementFor_require_preserve
FIELD_IDENTIFIER ReplacementFor_preserve_mode ReplacementFor_preserve_mode
FIELD_IDENTIFIER ReplacementFor_move_mode ReplacementFor_move_mode
<operator>.indirectFieldAccess ReplacementFor_x\012->ReplacementFor_preserve_mode
<operator>.indirectFieldAccess ReplacementFor_x->ReplacementFor_move_mode
FIELD_IDENTIFIER st_mode st_mode
FIELD_IDENTIFIER mode mode
FIELD_IDENTIFIER ReplacementFor_preserve_mode ReplacementFor_preserve_mode
FIELD_IDENTIFIER ReplacementFor_move_mode ReplacementFor_move_mode
<operator>.indirectFieldAccess ReplacementFor_x->\012ReplacementFor_require_preserve
FIELD_IDENTIFIER ReplacementFor_require_preserve ReplacementFor_require_preserve
>>>PDG&117 0->2 0->3 0->4 0->5 0->6 0->7 0->8 0->9 0->14 0->16 0->20 0->21 0->24 0->27 0->28 0->31 0->35 0->37 0->40 0->41 0->42 0->45 0->46 0->50 0->51 0->52 0->53 0->54 0->55 0->57 0->59 0->60 0->63 0->64 0->65 0->66 0->67 0->68 0->69 0->70 0->71 0->72 0->73 0->74 0->75 0->76 0->77 0->78 0->80 0->81 0->82 0->83 0->84 0->85 0->86 0->87 0->88 0->90 0->91 0->92 0->93 0->94 0->95 0->96 2->27 2->77 3->1 3->42 3->63 3->86 4->1 4->69 5->1 5->69 6->1 6->24 6->51 6->63 7->1 8->21 9->1 10->1 10->1 10->1 10->51 10->69 11->1 11->1 11->1 11->51 11->69 12->1 13->1 13->1 13->1 13->14 13->17 13->18 13->19 13->23 13->24 13->30 13->31 13->33 13->44 13->45 13->46 13->50 13->62 13->66 13->74 13->75 13->83 13->91 13->95 13->98 13->103 13->109 13->113 14->1 14->25 14->38 14->51 14->52 14->67 14->69 14->70 14->80 15->12 15->16 15->20 15->28 15->40 15->41 15->42 15->60 15->99 15->106 16->12 17->1 17->1 17->45 18->1 18->1 18->45 19->1 19->1 19->1 19->63 21->1 21->13 21->22 21->29 21->100 21->107 22->1 22->1 22->13 22->13 23->1 23->1 23->1 23->14 23->24 23->32 23->33 23->48 23->49 23->50 23->66 23->77 23->115 23->116 24->14 24->14 24->51 25->15 25->26 25->27 25->34 25->53 25->54 25->78 26->35 26->36 26->37 26->68 26->79 26->87 26->93 27->15 29->1 29->22 29->22 29->44 29->44 29->97 29->102 30->1 30->1 30->1 31->1 31->1 31->19 31->19 32->1 33->24 34->1 35->37 37->20 38->15 38->27 38->39 38->56 38->71 38->72 38->88 39->57 39->58 39->59 39->81 39->89 39->94 39->96 40->20 40->20 41->20 42->20 43->1 44->1 44->1 44->104 44->105 44->111 44->112 45->1 45->1 45->31 45->31 45->74 45->95 46->1 46->1 46->23 46->23 46->47 46->63 46->64 46->76 47->1 47->1 47->23 47->23 48->1 48->1 48->65 48->84 48->85 48->86 48->92 49->1 49->1 49->32 50->33 50->33 51->25 51->25 51->25 51->68 51->68 52->25 52->25 53->34 54->20 54->26 54->26 54->35 54->55 54->55 55->20 55->26 55->26 55->35 56->1 57->59 59->20 61->43 62->1 62->1 62->46 62->46 63->1 63->1 63->1 63->24 63->42 63->47 63->47 63->47 63->51 63->86 64->1 64->47 64->47 65->1 65->1 65->1 65->1 65->1 68->36 68->36 68->36 69->38 69->38 69->38 69->38 69->81 69->81 69->81 70->38 70->38 71->56 72->20 72->39 72->39 72->57 72->73 72->73 73->20 73->39 73->39 73->57 74->1 74->1 74->62 74->62 75->1 75->1 75->62 75->62 77->1 77->48 79->68 81->58 81->58 81->58 81->58 82->61 82->61 83->1 83->1 83->75 83->75 84->1 84->65 84->65 85->65 86->1 86->65 87->79 87->79 89->81 91->1 91->1 91->83 91->83 94->89 94->89 95->1 95->91 99->12 99->16 99->28 99->43 99->61 99->82 99->90 100->101 100->108 109->110 109->114
>>>Token static int ReplacementFor_set_owner ( const struct ReplacementFor_cp_options * ReplacementFor_x , char const * ReplacementFor_dst_name , int ReplacementFor_dst_dirfd , char const * ReplacementFor_dst_relname , int ReplacementFor_dest_desc , struct stat const * ReplacementFor_src_sb , bool ReplacementFor_new_dst , struct stat const * ReplacementFor_dst_sb ) { uid_t uid = ReplacementFor_src_sb -> st_uid ; gid_t gid = ReplacementFor_src_sb -> st_gid ; if ( ! ReplacementFor_new_dst && ( ReplacementFor_x -> ReplacementFor_preserve_mode || ReplacementFor_x -> ReplacementFor_move_mode || ReplacementFor_x -> ReplacementFor_set_mode ) ) { mode_t ReplacementFor_old_mode = ReplacementFor_dst_sb -> st_mode ; mode_t ReplacementFor_new_mode = ( ReplacementFor_x -> ReplacementFor_preserve_mode || ReplacementFor_x -> ReplacementFor_move_mode ? ReplacementFor_src_sb -> st_mode : ReplacementFor_x -> mode ) ; mode_t ReplacementFor_restrictive_temp_mode = ReplacementFor_old_mode & ReplacementFor_new_mode & S_IRWXU ; if ( ( ReplacementFor_USE_ACL || ( ReplacementFor_old_mode & ReplacementFor_CHMOD_MODE_BITS & ( ~ ReplacementFor_new_mode | S_ISUID | S_ISGID | S_ISVTX ) ) ) && ReplacementFor_qset_acl ( ReplacementFor_dst_name , ReplacementFor_dest_desc , ReplacementFor_restrictive_temp_mode ) != ( 0x1826 + 568 - 0x1a5e ) ) { if ( ! ReplacementFor_owner_failure_ok ( ReplacementFor_x ) ) error ( ( 0x103b + 4439 - 0x2192 ) , errno , ReplacementFor__ ( " \x63 \x6c \x65 \x61 \x72 \x69 \x6e \x67 \x20 \x70 \x65 \x72 \x6d \x69 \x73 \x73 \x69 \x6f \x6e \x73 \x20 \x66 \x6f \x72 \x20 \x25 \x73 " ) , ReplacementFor_quoteaf ( ReplacementFor_dst_name ) ) ; return - ReplacementFor_x -> ReplacementFor_require_preserve ; } } if ( ReplacementFor_HAVE_FCHOWN && ReplacementFor_dest_desc != - ( 0x1721 + 1770 - 0x1e0a ) ) { if ( fchown ( ReplacementFor_dest_desc , uid , gid ) == ( 0x1342 + 874 - 0x16ac ) ) return ( 0x1833 + 2324 - 0x2146 ) ; if ( errno == EPERM || errno == EINVAL ) { int ReplacementFor_saved_errno = errno ; ReplacementFor_ignore_value ( fchown ( ReplacementFor_dest_desc , - ( 0x351 + 7326 - 0x1fee ) , gid ) ) ; errno = ReplacementFor_saved_errno ; } } else { if ( ReplacementFor_lchownat ( ReplacementFor_dst_dirfd , ReplacementFor_dst_relname , uid , gid ) == ( 0x8c + 3883 - 0xfb7 ) ) return ( 0x41 + 1723 - 0x6fb ) ; if ( errno == EPERM || errno == EINVAL ) { int ReplacementFor_saved_errno = errno ; ReplacementFor_ignore_value ( ReplacementFor_lchownat ( ReplacementFor_dst_dirfd , ReplacementFor_dst_relname , - ( 0x20fa + 1325 - 0x2626 ) , gid ) ) ; errno = ReplacementFor_saved_errno ; } } if ( ! ReplacementFor_chown_failure_ok ( ReplacementFor_x ) ) { error ( ( 0x1603 + 496 - 0x17f3 ) , errno , ReplacementFor__ ( " \x66 \x61 \x69 \x6c \x65 \x64 \x20 \x74 \x6f \x20 \x70 \x72 \x65 \x73 \x65 \x72 \x76 \x65 \x20 \x6f \x77 \x6e \x65 \x72 \x73 \x68 \x69 \x70 \x20 \x66 \x6f \x72 \x20 \x25 \x73 " ) , ReplacementFor_quoteaf ( ReplacementFor_dst_name ) ) ; if ( ReplacementFor_x -> ReplacementFor_require_preserve ) return - ( 0x13f8 + 1955 - 0x1b9a ) ; } return ( 0x6b0 + 7690 - 0x24ba ) ; }
>>>Func
METHOD main
METHOD_RETURN int
PARAM int ReplacementFor_argc
PARAM char*ReplacementFor_argv[]
<operator>.assignment ReplacementFor_sum=(0x1662+825-0x199b)
RETURN return\012(0x78c+4998-0x1b12); return\012(0x78c+4998-0x1b12);
<operator>.lessThan i<\012ReplacementFor_argv[(0x1444+2772-0x1f17)][(0x17a5+2130-0x1ff7)]
<operator>.postIncrement i++
<operator>.assignmentPlus ReplacementFor_sum+=i
<operator>.greaterThan ReplacementFor_sum>8128
<operator>.subtraction 0x78c+4998-0x1b12
<operator>.subtraction 0x1662+825-0x199b
<operator>.assignment i=(0x7af+5485-0x1d1c)
printf printf(\012"\x53\x75\x6d\x20\x69\x73\x3a\x20\x25\x64" "\n",ReplacementFor_sum)
<operator>.addition 0x1662+825
printf printf(\012"\x53\x75\x6d\x20\x69\x73\x3a\x20\x25\x64" "\n",ReplacementFor_sum)
<operator>.addition 0x78c+4998
<operator>.subtraction 0x7af+5485-0x1d1c
<operator>.subtraction 0x17a5+2130-0x1ff7
<operator>.addition 0x7af+5485
<operator>.subtraction 0x1444+2772-0x1f17
<operator>.addition 0x17a5+2130
<operator>.addition 0x1444+2772
<operator>.indirectIndexAccess ReplacementFor_argv[(0x1444+2772-0x1f17)][(0x17a5+2130-0x1ff7)]
<operator>.indirectIndexAccess ReplacementFor_argv[(0x1444+2772-0x1f17)]
>>>PDG&25 0->2 0->3 0->6 0->7 0->8 0->9 0->10 0->11 0->13 0->14 0->15 0->16 0->17 0->18 0->19 0->20 0->21 0->22 2->1 3->1 4->1 4->1 4->8 4->9 5->1 6->1 6->1 6->1 6->6 6->7 6->7 6->8 6->8 6->18 6->20 6->21 6->22 6->23 6->24 7->1 7->6 8->1 8->9 9->1 9->13 9->13 9->15 9->15 10->1 10->1 10->5 11->1 11->4 11->4 12->1 12->1 12->6 13->1 13->1 15->1 15->1 17->1 17->12 17->12 18->1 20->1
>>>Token int main ( int ReplacementFor_argc , char * ReplacementFor_argv [ ] ) { int i ; int ReplacementFor_sum = ( 0x1662 + 825 - 0x199b ) ; for ( i = ( 0x7af + 5485 - 0x1d1c ) ; i < ReplacementFor_argv [ ( 0x1444 + 2772 - 0x1f17 ) ] [ ( 0x17a5 + 2130 - 0x1ff7 ) ] ; i ++ ) ReplacementFor_sum += i ; if ( ReplacementFor_sum > 8128 ) printf ( " \x53 \x75 \x6d \x20 \x69 \x73 \x3a \x20 \x25 \x64 " " \n " , ReplacementFor_sum ) ; else printf ( " \x53 \x75 \x6d \x20 \x69 \x73 \x3a \x20 \x25 \x64 " " \n " , ReplacementFor_sum ) ; return ( 0x78c + 4998 - 0x1b12 ) ; }
>>>Func
METHOD ReplacementFor_absF
METHOD_RETURN double
PARAM double ReplacementFor_n
<operator>.lessThan ReplacementFor_n<0.0
RETURN return-ReplacementFor_n; return-ReplacementFor_n;
<operator>.minus -ReplacementFor_n
RETURN return ReplacementFor_n; return ReplacementFor_n;
IDENTIFIER ReplacementFor_n return ReplacementFor_n;
>>>PDG&8 0->2 0->3 0->5 0->7 2->3 3->1 3->4 3->5 3->5 3->6 3->7 4->1 5->1 5->1 5->4 6->1 7->6
>>>Token double ReplacementFor_absF ( double ReplacementFor_n ) { if ( ReplacementFor_n < 0.0 ) { return - ReplacementFor_n ; } else { return ReplacementFor_n ; } }
>>>Func
METHOD ReplacementFor_DeInitData
METHOD_RETURN void
fclose fclose(ReplacementFor_staticFd)
>>>PDG&3 0->2 2->1 2->1
>>>Token void ReplacementFor_DeInitData ( ) { fclose ( ReplacementFor_staticFd ) ; }
>>>Func
METHOD ReplacementFor_mk_elem_list
METHOD_RETURN void
PARAM int ReplacementFor_eqc
PARAM int ReplacementFor_opc
PARAM char*ReplacementFor_el
PARAM int ReplacementFor_elc
PARAM char*ReplacementFor_str
<operator>.assignment ReplacementFor_lc=(0xd45+1188-0x11e8)
<operator>.assignment ReplacementFor_lst[(0xf78+1446-0x151e)]=ReplacementFor_el[\012(0x116d+4642-0x238f)]
<operator>.assignment ReplacementFor_str[(0x333+299-0x45e)]\012=((char)(0xedb+3144-0x1ac8))
<operator>.assignment ReplacementFor_j=(0x231d+496-0x250c)
<operator>.lessThan i<ReplacementFor_elc
<operator>.postIncrement i++
<operator>.lessThan i<ReplacementFor_lc-(0x1480+3895-0x23b6)
<operator>.postIncrement i++
<operator>.greaterThan ReplacementFor_lc>(0x23b9+67-0x23fc)
<operator>.subtraction 0xd45+1188-0x11e8
<operator>.assignment i=(0x63f+3533-0x140b)
<operator>.assignment ReplacementFor_equiv_elem=ReplacementFor_seek_equiv(ReplacementFor_lst[\012ReplacementFor_lc-(0xc18+2331-0x1532)],ReplacementFor_el[i],ReplacementFor_eqc)
<operator>.cast (char)(0xedb+3144-0x1ac8)
<operator>.subtraction 0x231d+496-0x250c
<operator>.assignment i=\012(0xc4d+3688-0x1ab5)
<operator>.assignment ReplacementFor_str[ReplacementFor_j]=ReplacementFor_lst[i]
<operator>.assignment ReplacementFor_str[\012ReplacementFor_j+(0xe34+2340-0x1757)]=((char)(0x1335+4616-0x2511))
<operator>.assignment ReplacementFor_str[ReplacementFor_j+(0x1305+2768-0x1dd3)]=\012((char)(0x333+1521-0x904))
<operator>.assignmentPlus ReplacementFor_j+=(0x7f0+3061-0x13e2)
<operator>.assignment ReplacementFor_str[ReplacementFor_j]=\012ReplacementFor_lst[ReplacementFor_lc-(0x7c4+4999-0x1b4a)]
<operator>.assignment ReplacementFor_str[\012ReplacementFor_j+(0x11e7+601-0x143f)]='\0'
<operator>.addition 0xd45+1188
<operator>.subtraction 0xf78+1446-0x151e
<operator>.subtraction 0x116d+4642-0x238f
IDENTIFIER ReplacementFor_equiv_elem if (ReplacementFor_equiv_elem)
<operator>.subtraction 0x333+299-0x45e
<operator>.subtraction 0xedb+3144-0x1ac8
<operator>.addition 0x231d+496
<operator>.subtraction ReplacementFor_lc-(0x1480+3895-0x23b6)
<operator>.subtraction 0x23b9+67-0x23fc
<operator>.assignment ReplacementFor_str[\012ReplacementFor_j]='\0'
<operator>.addition 0xf78+1446
<operator>.addition 0x116d+4642
<operator>.subtraction 0x63f+3533-0x140b
ReplacementFor_seek_equiv ReplacementFor_seek_equiv(ReplacementFor_lst[\012ReplacementFor_lc-(0xc18+2331-0x1532)],ReplacementFor_el[i],ReplacementFor_eqc)
<operator>.assignment ReplacementFor_lst[ReplacementFor_lc-\012(0x69f+5690-0x1cd8)]=ReplacementFor_equiv_elem
<operator>.addition 0x333+299
<operator>.addition 0xedb+3144
<operator>.subtraction 0xc4d+3688-0x1ab5
<operator>.subtraction 0x1480+3895-0x23b6
<operator>.cast (char)(0x1335+4616-0x2511)
<operator>.cast (char)(0x333+1521-0x904)
<operator>.subtraction 0x7f0+3061-0x13e2
<operator>.addition 0x23b9+67
<operator>.addition 0x63f+3533
<operator>.assignment ReplacementFor_oppos_elem=\012ReplacementFor_seek_oppos(ReplacementFor_el[i],ReplacementFor_opc)
<operator>.assignment ReplacementFor_lst[ReplacementFor_lc]=\012ReplacementFor_el[i]
<operator>.postIncrement ReplacementFor_lc++
<operator>.addition 0xc4d+3688
<operator>.addition 0x1480+3895
<operator>.addition ReplacementFor_j+(0xe34+2340-0x1757)
<operator>.subtraction 0x1335+4616-0x2511
<operator>.addition ReplacementFor_j+(0x1305+2768-0x1dd3)
<operator>.subtraction 0x333+1521-0x904
<operator>.addition 0x7f0+3061
<operator>.subtraction ReplacementFor_lc-(0x7c4+4999-0x1b4a)
<operator>.addition ReplacementFor_j+(0x11e7+601-0x143f)
<operator>.subtraction ReplacementFor_lc-(0xc18+2331-0x1532)
IDENTIFIER ReplacementFor_oppos_elem if (ReplacementFor_oppos_elem)
<operator>.subtraction 0xe34+2340-0x1757
<operator>.addition 0x1335+4616
<operator>.subtraction 0x1305+2768-0x1dd3
<operator>.addition 0x333+1521
<operator>.subtraction 0x7c4+4999-0x1b4a
<operator>.subtraction 0x11e7+601-0x143f
<operator>.subtraction 0xc18+2331-0x1532
<operator>.subtraction ReplacementFor_lc-\012(0x69f+5690-0x1cd8)
ReplacementFor_seek_oppos ReplacementFor_seek_oppos(ReplacementFor_el[i],ReplacementFor_opc)
<operator>.addition 0xe34+2340
<operator>.addition 0x1305+2768
<operator>.addition 0x7c4+4999
<operator>.addition 0x11e7+601
<operator>.addition 0xc18+2331
<operator>.subtraction 0x69f+5690-0x1cd8
<operator>.lessThan ReplacementFor_j<ReplacementFor_lc
<operator>.postIncrement ReplacementFor_j++
<operator>.addition 0x69f+5690
<operator>.assignment ReplacementFor_j=(0x3dd+6431-0x1cfc)
<operator>.equals ReplacementFor_lst[\012ReplacementFor_j]==ReplacementFor_oppos_elem
<operator>.assignment ReplacementFor_lc=\012(0x3a3+2578-0xdb5)
<operator>.postIncrement i++
<operator>.subtraction 0x3dd+6431-0x1cfc
<operator>.addition 0x3dd+6431
<operator>.subtraction 0x3a3+2578-0xdb5
<operator>.addition 0x3a3+2578
<operator>.indirectIndexAccess ReplacementFor_str[ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_lst[i]
<operator>.indirectIndexAccess ReplacementFor_str[\012ReplacementFor_j+(0xe34+2340-0x1757)]
<operator>.indirectIndexAccess ReplacementFor_str[ReplacementFor_j+(0x1305+2768-0x1dd3)]
<operator>.indirectIndexAccess ReplacementFor_str[ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_lst[ReplacementFor_lc-(0x7c4+4999-0x1b4a)]
<operator>.indirectIndexAccess ReplacementFor_str[\012ReplacementFor_j+(0x11e7+601-0x143f)]
<operator>.indirectIndexAccess ReplacementFor_lst[\012ReplacementFor_lc-(0xc18+2331-0x1532)]
<operator>.indirectIndexAccess ReplacementFor_el[i]
UNKNOWN char char
UNKNOWN char char
<operator>.indirectIndexAccess ReplacementFor_str[\012ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_lst[ReplacementFor_lc-\012(0x69f+5690-0x1cd8)]
<operator>.indirectIndexAccess ReplacementFor_lst[ReplacementFor_lc]
<operator>.indirectIndexAccess ReplacementFor_el[i]
<operator>.indirectIndexAccess ReplacementFor_el[i]
<operator>.indirectIndexAccess ReplacementFor_lst[\012ReplacementFor_j]
>>>PDG&109 0->2 0->3 0->4 0->5 0->6 0->11 0->12 0->13 0->14 0->15 0->16 0->20 0->25 0->27 0->28 0->29 0->30 0->31 0->32 0->33 0->34 0->35 0->36 0->37 0->38 0->39 0->40 0->41 0->42 0->43 0->44 0->45 0->46 0->49 0->50 0->51 0->54 0->55 0->56 0->57 0->58 0->59 0->60 0->61 0->62 0->63 0->64 0->65 0->66 0->67 0->68 0->69 0->70 0->71 0->72 0->73 0->74 0->75 0->76 0->77 0->78 0->79 0->80 0->81 0->82 0->83 0->85 0->87 0->88 0->89 0->90 0->91 2->1 2->41 3->1 3->74 4->1 4->8 4->41 4->53 4->74 5->11 6->1 7->1 7->1 7->35 7->64 8->1 8->1 8->1 9->1 9->1 9->1 10->1 10->1 10->25 10->57 10->59 10->63 11->1 11->1 11->11 11->12 11->12 11->18 11->41 11->42 11->52 11->53 11->54 11->64 11->72 11->73 11->74 11->79 11->80 11->81 11->83 11->84 11->87 11->88 11->89 11->99 11->100 11->104 11->105 11->106 11->107 12->1 12->11 13->1 13->1 13->1 13->13 13->14 13->14 13->22 13->23 13->24 13->25 13->35 13->46 13->47 13->48 13->49 13->56 13->57 13->58 13->59 13->60 13->61 13->66 13->67 13->68 13->69 13->75 13->76 13->92 13->93 13->94 13->95 13->101 13->102 14->1 14->13 15->1 15->1 15->26 15->27 15->37 15->62 15->62 15->63 15->70 15->71 15->77 15->78 15->96 15->97 15->98 15->103 16->1 16->7 16->7 17->1 17->1 17->11 18->1 18->1 18->1 18->42 19->1 20->1 20->10 20->10 21->1 21->1 21->13 22->1 22->1 23->1 23->1 23->1 24->1 24->1 24->1 25->1 25->1 25->57 25->59 25->63 26->1 26->1 26->1 27->1 27->1 29->1 30->1 32->1 33->1 33->9 33->9 33->19 33->19 35->1 35->13 35->13 35->15 36->1 36->15 36->15 40->1 40->17 40->17 41->1 41->1 41->1 41->18 41->18 41->18 41->74 42->1 42->1 42->1 45->1 45->21 45->21 46->1 46->35 46->35 47->1 48->1 49->1 49->25 49->25 52->1 52->1 52->1 52->85 53->1 53->1 53->1 54->1 54->35 54->64 57->1 58->1 58->23 58->23 58->47 58->47 59->1 60->1 60->24 60->24 60->48 60->48 62->1 62->1 63->1 63->1 64->1 64->54 64->73 64->81 66->1 66->57 66->57 68->1 68->59 68->59 70->1 70->62 70->62 71->1 71->63 71->63 72->1 72->64 72->64 73->1 73->35 73->64 74->1 74->41 74->52 74->52 74->53 80->1 80->73 80->73 81->1 81->54 81->82 81->85 81->108 82->1 82->81 84->1 84->1 84->81 85->1 85->1 85->1 85->81 85->82 85->86 85->87 85->90 85->91 86->1 86->1 86->54 87->12 88->1 88->84 88->84 90->1 90->86 90->86
>>>Token void ReplacementFor_mk_elem_list ( int ReplacementFor_eqc , int ReplacementFor_opc , char * ReplacementFor_el , int ReplacementFor_elc , char * ReplacementFor_str ) { int ReplacementFor_lc = ( 0xd45 + 1188 - 0x11e8 ) ; int i , ReplacementFor_j ; char ReplacementFor_equiv_elem , ReplacementFor_oppos_elem ; char ReplacementFor_lst [ ReplacementFor_elc ] ; ReplacementFor_lst [ ( 0xf78 + 1446 - 0x151e ) ] = ReplacementFor_el [ ( 0x116d + 4642 - 0x238f ) ] ; for ( i = ( 0x63f + 3533 - 0x140b ) ; i < ReplacementFor_elc ; i ++ ) { ReplacementFor_equiv_elem = ReplacementFor_seek_equiv ( ReplacementFor_lst [ ReplacementFor_lc - ( 0xc18 + 2331 - 0x1532 ) ] , ReplacementFor_el [ i ] , ReplacementFor_eqc ) ; if ( ReplacementFor_equiv_elem ) { ReplacementFor_lst [ ReplacementFor_lc - ( 0x69f + 5690 - 0x1cd8 ) ] = ReplacementFor_equiv_elem ; } else { ReplacementFor_oppos_elem = ReplacementFor_seek_oppos ( ReplacementFor_el [ i ] , ReplacementFor_opc ) ; if ( ReplacementFor_oppos_elem ) { for ( ReplacementFor_j = ( 0x3dd + 6431 - 0x1cfc ) ; ReplacementFor_j < ReplacementFor_lc ; ReplacementFor_j ++ ) if ( ReplacementFor_lst [ ReplacementFor_j ] == ReplacementFor_oppos_elem ) { ReplacementFor_lc = ( 0x3a3 + 2578 - 0xdb5 ) ; i ++ ; break ; } } ReplacementFor_lst [ ReplacementFor_lc ] = ReplacementFor_el [ i ] ; ReplacementFor_lc ++ ; } } ReplacementFor_str [ ( 0x333 + 299 - 0x45e ) ] = ( ( char ) ( 0xedb + 3144 - 0x1ac8 ) ) ; ReplacementFor_j = ( 0x231d + 496 - 0x250c ) ; for ( i = ( 0xc4d + 3688 - 0x1ab5 ) ; i < ReplacementFor_lc - ( 0x1480 + 3895 - 0x23b6 ) ; i ++ ) { ReplacementFor_str [ ReplacementFor_j ] = ReplacementFor_lst [ i ] ; ReplacementFor_str [ ReplacementFor_j + ( 0xe34 + 2340 - 0x1757 ) ] = ( ( char ) ( 0x1335 + 4616 - 0x2511 ) ) ; ReplacementFor_str [ ReplacementFor_j + ( 0x1305 + 2768 - 0x1dd3 ) ] = ( ( char ) ( 0x333 + 1521 - 0x904 ) ) ; ReplacementFor_j += ( 0x7f0 + 3061 - 0x13e2 ) ; } if ( ReplacementFor_lc > ( 0x23b9 + 67 - 0x23fc ) ) { ReplacementFor_str [ ReplacementFor_j ] = ReplacementFor_lst [ ReplacementFor_lc - ( 0x7c4 + 4999 - 0x1b4a ) ] ; ReplacementFor_str [ ReplacementFor_j + ( 0x11e7 + 601 - 0x143f ) ] = ' \0 ' ; } else ReplacementFor_str [ ReplacementFor_j ] = ' \0 ' ; }
>>>Func
METHOD main
METHOD_RETURN int
ReplacementFor_find_wpi ReplacementFor_find_wpi()
RETURN return(0x158+193-0x219); return(0x158+193-0x219);
<operator>.subtraction 0x158+193-0x219
<operator>.addition 0x158+193
>>>PDG&6 0->2 0->4 0->5 2->1 3->1 4->1 4->1 4->3
>>>Token int main ( ) { ReplacementFor_find_wpi ( ) ; return ( 0x158 + 193 - 0x219 ) ; }
>>>Func
METHOD Index
METHOD_RETURN int
PARAM char ReplacementFor_inp
<operator>.assignment ReplacementFor_dif=ReplacementFor_inp-\012(0x1ef8+1574-0x24dd)
<operator>.assignment index=ReplacementFor_Ind[ReplacementFor_dif]
IDENTIFIER ReplacementFor_ndif <empty>
RETURN return index; return index;
IDENTIFIER index return index;
<operator>.subtraction ReplacementFor_inp-\012(0x1ef8+1574-0x24dd)
<operator>.subtraction 0x1ef8+1574-0x24dd
<operator>.addition 0x1ef8+1574
>>>PDG&11 0->2 0->5 0->7 0->8 0->9 0->10 2->8 3->1 3->1 3->1 4->1 4->1 4->1 4->7 6->1 7->6 8->1 8->1 8->3 8->3 9->1 9->8 9->8
>>>Token int Index ( char ReplacementFor_inp ) { int ReplacementFor_dif = ReplacementFor_inp - ( 0x1ef8 + 1574 - 0x24dd ) ; int index = ReplacementFor_Ind [ ReplacementFor_dif ] ; ReplacementFor_def DEBUG  ReplacementFor_ndif return index ; }
>>>Func
METHOD main
METHOD_RETURN int
PARAM int ReplacementFor_argc
PARAM char**ReplacementFor_argv
<operator>.assignment ReplacementFor_count=(0x1041+3629-0x1e6e)
<operator>.assignment ReplacementFor_stringFile=\012ReplacementFor_readFile(ReplacementFor_argv[(0xd73+2025-0x155b)])
<operator>.assignment line=\012ReplacementFor_lineReturn(ReplacementFor_stringFile)
<operator>.assignmentPlus ReplacementFor_count+=\012(0x213c+94-0x2199)
free free(\012ReplacementFor_stringFile)
RETURN return(0x484+2765-0xf51); return(0x484+2765-0xf51);
<operator>.notEquals ReplacementFor_argc!=(0x1e06+1478-0x23ca)
<operator>.equals ReplacementFor_stringFile==NULL
<operator>.notEquals (line=ReplacementFor_lineReturn(\012ReplacementFor_stringFile))!=NULL
<operator>.subtraction 0x484+2765-0xf51
fprintf fprintf(stderr,\012"\x55\x73\x61\x67\x65\x3a\x20\x3c\x69\x6e\x70\x75\x74\x20\x66\x69\x6c\x65\x20\x6e\x61\x6d\x65\x3e" "\n"\012)
RETURN return(0x37+6625-0x1a17); return(0x37+6625-0x1a17);
<operator>.subtraction 0x1041+3629-0x1e6e
ReplacementFor_readFile ReplacementFor_readFile(ReplacementFor_argv[(0xd73+2025-0x155b)])
fprintf fprintf(stderr,\012"\x46\x69\x6c\x65\x20\x65\x72\x72\x6f\x72" "\n")
RETURN return(0xcd+8212-0x20e0); return(0xcd+8212-0x20e0);
ReplacementFor_lineReturn ReplacementFor_lineReturn(ReplacementFor_stringFile)
<operator>.subtraction 0x213c+94-0x2199
ReplacementFor_solver ReplacementFor_solver(line,\012ReplacementFor_count)
<operator>.assignmentPlus ReplacementFor_count+=(0x611+2974-0x11ae)
<operator>.subtraction 0x1e06+1478-0x23ca
<operator>.subtraction 0x37+6625-0x1a17
<operator>.addition 0x1041+3629
<operator>.subtraction 0xcd+8212-0x20e0
<operator>.addition 0x213c+94
<operator>.assignment line=ReplacementFor_lineReturn(\012ReplacementFor_stringFile)
<operator>.addition 0x484+2765
<operator>.addition 0x1e06+1478
<operator>.subtraction 0xd73+2025-0x155b
ReplacementFor_lineReturn ReplacementFor_lineReturn(\012ReplacementFor_stringFile)
<operator>.subtraction 0x611+2974-0x11ae
<operator>.addition 0x37+6625
<operator>.addition 0xd73+2025
<operator>.addition 0xcd+8212
<operator>.addition 0x611+2974
<operator>.indirectIndexAccess ReplacementFor_argv[(0xd73+2025-0x155b)]
>>>PDG&40 0->2 0->3 0->7 0->8 0->10 0->11 0->12 0->13 0->14 0->16 0->18 0->20 0->21 0->22 0->23 0->24 0->25 0->26 0->27 0->28 0->30 0->31 0->32 0->33 0->34 0->35 0->36 0->37 0->38 2->10 3->1 3->17 4->7 5->11 7->22 9->1 10->1 10->1 10->1 10->4 10->5 10->11 10->14 10->15 10->16 10->17 10->25 10->26 10->32 10->35 10->36 10->39 11->6 11->7 11->8 11->9 11->12 11->12 11->13 11->18 11->19 11->20 11->20 11->21 11->27 11->28 11->29 11->30 11->33 11->37 12->12 12->22 12->23 12->29 12->33 12->34 12->38 13->9 14->1 14->1 15->1 16->4 16->4 17->5 19->1 20->6 20->33 21->7 21->7 22->23 23->22 24->1 24->10 24->10 25->1 25->1 25->15 27->19 29->12 29->22 33->8 33->12 33->29 34->23 34->23
>>>Token int main ( int ReplacementFor_argc , char * * ReplacementFor_argv ) { if ( ReplacementFor_argc != ( 0x1e06 + 1478 - 0x23ca ) ) { fprintf ( stderr , " \x55 \x73 \x61 \x67 \x65 \x3a \x20 \x3c \x69 \x6e \x70 \x75 \x74 \x20 \x66 \x69 \x6c \x65 \x20 \x6e \x61 \x6d \x65 \x3e " " \n " ) ; return ( 0x37 + 6625 - 0x1a17 ) ; } char * ReplacementFor_stringFile ; char * line ; int ReplacementFor_count = ( 0x1041 + 3629 - 0x1e6e ) ; ReplacementFor_stringFile = ReplacementFor_readFile ( ReplacementFor_argv [ ( 0xd73 + 2025 - 0x155b ) ] ) ; if ( ReplacementFor_stringFile == NULL ) { fprintf ( stderr , " \x46 \x69 \x6c \x65 \x20 \x65 \x72 \x72 \x6f \x72 " " \n " ) ; return ( 0xcd + 8212 - 0x20e0 ) ; } line = ReplacementFor_lineReturn ( ReplacementFor_stringFile ) ; ReplacementFor_count += ( 0x213c + 94 - 0x2199 ) ; while ( ( line = ReplacementFor_lineReturn ( ReplacementFor_stringFile ) ) != NULL ) { ReplacementFor_solver ( line , ReplacementFor_count ) ; ReplacementFor_count += ( 0x611 + 2974 - 0x11ae ) ; } free ( ReplacementFor_stringFile ) ; return ( 0x484 + 2765 - 0xf51 ) ; }
>>>Func
METHOD main
METHOD_RETURN ANY
RETURN return(0x53f+2964-0x10d3); return(0x53f+2964-0x10d3);
<operator>.lessEqualsThan ReplacementFor_cases<=ReplacementFor_ncases
<operator>.postIncrement ReplacementFor_cases++
<operator>.subtraction 0x53f+2964-0x10d3
<operator>.expressionList scanf("\x25\x64",&\012ReplacementFor_ncases) ReplacementFor_cases=(0xd58+5526-0x22ed)
scanf scanf(\012"\x25\x64\x20\x25\x64\x20\x25\x64",&ReplacementFor_n,&ReplacementFor_pd,&\012ReplacementFor_pg)
<operator>.assignment ReplacementFor_sol=(0x4cf+1357-0xa1c)
printf printf("\x43\x61\x73\x65\x20\x23\x25\x64\x3a\x20",ReplacementFor_cases)
<operator>.logicalAnd ReplacementFor_x>(0x3d5+5346-0x18b7)&&ReplacementFor_sol==\012(0x50d+4776-0x17b5)
<operator>.postDecrement ReplacementFor_x--
<operator>.equals ReplacementFor_sol==(0x2ea+3979-0x1275)
<operator>.addition 0x53f+2964
scanf scanf("\x25\x64",&\012ReplacementFor_ncases)
<operator>.assignment ReplacementFor_cases=(0xd58+5526-0x22ed)
<operator>.subtraction 0x4cf+1357-0xa1c
<operator>.assignment ReplacementFor_x=\012100000
printf printf("\x42\x72\x6f\x6b\x65\x6e" "\n")
<operator>.subtraction 0xd58+5526-0x22ed
<operator>.addition 0x4cf+1357
<operator>.greaterThan ReplacementFor_x>(0x3d5+5346-0x18b7)
<operator>.equals ReplacementFor_sol==\012(0x50d+4776-0x17b5)
<operator>.logicalAnd ReplacementFor_y>(0x15b7+1211-0x1a72)&&\012ReplacementFor_sol==(0xbe8+3156-0x183c)
<operator>.postDecrement ReplacementFor_y--
<operator>.subtraction 0x2ea+3979-0x1275
printf printf("\x50\x6f\x73\x73\x69\x62\x6c\x65" "\n")
<operator>.addition 0xd58+5526
<operator>.subtraction 0x3d5+5346-0x18b7
<operator>.subtraction 0x50d+4776-0x17b5
<operator>.assignment ReplacementFor_y=ReplacementFor_min(\012ReplacementFor_x,ReplacementFor_n)
<operator>.assignment ReplacementFor_r=\012ReplacementFor_y*(ReplacementFor_pd/100.0)
<operator>.assignment ReplacementFor_p=ReplacementFor_y-\012ReplacementFor_r
<operator>.addition 0x2ea+3979
<operator>.addition 0x3d5+5346
<operator>.addition 0x50d+4776
<operator>.greaterThan ReplacementFor_y>(0x15b7+1211-0x1a72)
<operator>.equals ReplacementFor_sol==(0xbe8+3156-0x183c)
<operator>.equals ReplacementFor_r==(int)ReplacementFor_r
ReplacementFor_min ReplacementFor_min(\012ReplacementFor_x,ReplacementFor_n)
<operator>.subtraction 0x15b7+1211-0x1a72
<operator>.subtraction 0xbe8+3156-0x183c
<operator>.multiplication ReplacementFor_y*(ReplacementFor_pd/100.0)
<operator>.subtraction ReplacementFor_y-\012ReplacementFor_r
<operator>.assignment ReplacementFor_d=\012ReplacementFor_x*(ReplacementFor_pg/100.0)
<operator>.addition 0x15b7+1211
<operator>.addition 0xbe8+3156
<operator>.division ReplacementFor_pd/100.0
<operator>.cast (int)ReplacementFor_r
<operator>.equals ReplacementFor_d==(int)\012ReplacementFor_d
<operator>.multiplication ReplacementFor_x*(ReplacementFor_pg/100.0)
<operator>.division ReplacementFor_pg/100.0
<operator>.cast (int)\012ReplacementFor_d
<operator>.logicalAnd (int)ReplacementFor_d>=(int)ReplacementFor_r&&\012ReplacementFor_x-ReplacementFor_d>=ReplacementFor_p
<operator>.postIncrement ReplacementFor_sol++
<operator>.greaterEqualsThan (int)ReplacementFor_d>=(int)ReplacementFor_r
<operator>.greaterEqualsThan ReplacementFor_x-ReplacementFor_d>=ReplacementFor_p
<operator>.cast (int)ReplacementFor_d
<operator>.cast (int)ReplacementFor_r
<operator>.subtraction ReplacementFor_x-ReplacementFor_d
<operator>.addressOf &ReplacementFor_n
<operator>.addressOf &ReplacementFor_pd
<operator>.addressOf &\012ReplacementFor_pg
UNKNOWN int int
UNKNOWN int int
UNKNOWN int int
UNKNOWN int int
>>>PDG&67 0->3 0->4 0->5 0->7 0->9 0->11 0->12 0->13 0->14 0->16 0->17 0->18 0->19 0->20 0->21 0->22 0->24 0->25 0->26 0->27 0->28 0->29 0->33 0->34 0->35 0->36 0->37 0->38 0->39 0->40 0->41 0->42 0->43 0->45 0->46 0->47 0->48 0->49 0->50 0->51 0->52 0->54 0->55 0->56 0->57 0->58 0->59 2->1 3->1 3->1 3->1 3->3 3->4 3->7 3->8 3->9 3->9 3->10 3->12 3->16 3->17 3->20 3->21 3->25 3->28 3->33 3->34 3->60 3->61 3->62 4->1 4->3 5->1 5->1 5->2 6->1 6->1 7->1 7->1 7->1 7->39 8->1 8->1 8->12 8->22 8->37 8->54 9->1 9->4 10->1 10->1 10->1 10->10 10->11 10->21 10->23 10->28 10->30 10->34 10->36 10->39 10->40 10->45 11->1 11->21 12->1 12->1 12->1 12->18 12->26 14->1 14->3 14->6 15->1 15->3 15->6 16->1 16->8 16->8 17->1 17->21 18->1 19->1 19->6 19->6 19->15 19->15 21->1 21->1 21->10 21->10 21->22 21->29 21->35 21->39 22->1 22->10 22->10 22->12 22->37 22->54 23->1 23->1 23->1 23->23 23->24 23->31 23->32 23->36 23->38 23->40 23->42 23->43 23->45 23->47 23->48 23->63 24->1 24->36 25->1 25->12 25->12 26->1 28->1 28->21 28->21 29->1 29->22 29->22 30->1 30->1 30->36 31->1 31->1 31->43 32->1 32->1 32->1 32->56 36->1 36->1 36->23 36->23 36->37 36->41 36->42 36->46 37->1 37->12 37->22 37->23 37->23 37->54 38->1 38->1 38->1 38->44 38->49 38->50 38->51 38->52 38->55 38->58 38->64 39->1 39->7 39->11 39->30 39->30 39->50 40->1 40->36 40->36 41->1 41->37 41->37 42->1 42->31 42->31 42->43 43->24 43->32 43->32 43->38 43->48 44->1 44->1 44->49 44->52 47->1 47->42 47->42 49->1 49->1 49->1 49->53 49->55 49->55 49->57 49->57 49->58 49->59 49->65 49->66 50->1 50->11 50->44 50->44 50->59 51->1 51->50 51->50 53->1 53->1 53->1 53->54 54->1 54->12 54->22 54->37 55->1 55->1 55->53 55->53 55->56 55->59 56->1 56->1 56->53 56->53 57->1 58->1 59->1 59->11 59->50 59->56 59->56
>>>Token main ( ) { int ReplacementFor_n , ReplacementFor_x , ReplacementFor_y , ReplacementFor_pd , ReplacementFor_pg , ReplacementFor_ncases , ReplacementFor_cases , ReplacementFor_sol , ReplacementFor_p ; double ReplacementFor_r , ReplacementFor_d ; for ( scanf ( " \x25 \x64 " , & ReplacementFor_ncases ) , ReplacementFor_cases = ( 0xd58 + 5526 - 0x22ed ) ; ReplacementFor_cases <= ReplacementFor_ncases ; ReplacementFor_cases ++ ) { scanf ( " \x25 \x64 \x20 \x25 \x64 \x20 \x25 \x64 " , & ReplacementFor_n , & ReplacementFor_pd , & ReplacementFor_pg ) ; ReplacementFor_sol = ( 0x4cf + 1357 - 0xa1c ) ; for ( ReplacementFor_x = 100000 ; ReplacementFor_x > ( 0x3d5 + 5346 - 0x18b7 ) && ReplacementFor_sol == ( 0x50d + 4776 - 0x17b5 ) ; ReplacementFor_x -- ) { for ( ReplacementFor_y = ReplacementFor_min ( ReplacementFor_x , ReplacementFor_n ) ; ReplacementFor_y > ( 0x15b7 + 1211 - 0x1a72 ) && ReplacementFor_sol == ( 0xbe8 + 3156 - 0x183c ) ; ReplacementFor_y -- ) { ReplacementFor_r = ReplacementFor_y * ( ReplacementFor_pd / 100.0 ) ; ReplacementFor_p = ReplacementFor_y - ReplacementFor_r ; if ( ReplacementFor_r == ( int ) ReplacementFor_r ) { ReplacementFor_d = ReplacementFor_x * ( ReplacementFor_pg / 100.0 ) ; if ( ReplacementFor_d == ( int ) ReplacementFor_d ) { if ( ( int ) ReplacementFor_d >= ( int ) ReplacementFor_r && ReplacementFor_x - ReplacementFor_d >= ReplacementFor_p ) { ReplacementFor_sol ++ ; } } } } } printf ( " \x43 \x61 \x73 \x65 \x20 \x23 \x25 \x64 \x3a \x20 " , ReplacementFor_cases ) ; if ( ReplacementFor_sol == ( 0x2ea + 3979 - 0x1275 ) ) printf ( " \x42 \x72 \x6f \x6b \x65 \x6e " " \n " ) ; else printf ( " \x50 \x6f \x73 \x73 \x69 \x62 \x6c \x65 " " \n " ) ; } return ( 0x53f + 2964 - 0x10d3 ) ; }
>>>Func
METHOD main
METHOD_RETURN int
<operator>.assignment ReplacementFor_sum=(0x877+2649-0x12d0)
scanf scanf("\x25\x64",&ReplacementFor_n\012)
RETURN return(0x3e1+5886-0x1adf); return(0x3e1+5886-0x1adf);
<operator>.lessThan i<ReplacementFor_n
<operator>.postIncrement i++
<operator>.subtraction 0x3e1+5886-0x1adf
<operator>.subtraction 0x877+2649-0x12d0
<operator>.assignment i=(0x279+8340-0x230d)
scanf scanf("\x25\x64",&\012ReplacementFor_p)
scanf scanf("\x25\x64",&ReplacementFor_k)
scanf scanf("\x25\x64",&l)
qsort qsort(ReplacementFor_a l \012sizeof(int),ReplacementFor_Cmpdep)
<operator>.assignment m=l/ReplacementFor_k
<operator>.assignment ReplacementFor_j=\012(0x17b6+59-0x17f0)
printf printf(\012"\x43\x61\x73\x65\x20\x23\x25\x64\x3a\x20\x25\x2e\x30\x66" "\n" i+\012(0xa0+2713-0xb38),ReplacementFor_sum)
<operator>.assignment ReplacementFor_sum=(0xeb5+2117-0x16fa)
<operator>.addition 0x877+2649
<operator>.lessThan ReplacementFor_j<l
<operator>.postIncrement ReplacementFor_j++
<operator>.lessThan s<m
<operator>.postIncrement s++
<operator>.lessThan t<l
<operator>.postIncrement t++
<operator>.assignmentPlus ReplacementFor_sum+=ReplacementFor_a[t]*ReplacementFor_j
<operator>.addition 0x3e1+5886
<operator>.subtraction 0x279+8340-0x230d
<operator>.assignment ReplacementFor_j=(0x1ef7+1408-0x2477)
scanf scanf("\x25\x64",&ReplacementFor_a[ReplacementFor_j])
<operator>.sizeOf sizeof(int)
<operator>.division l/ReplacementFor_k
<operator>.subtraction 0x17b6+59-0x17f0
<operator>.assignment s=(0x1378+3134-0x1fb6)
<operator>.postIncrement ReplacementFor_j++
<operator>.assignment t=m*ReplacementFor_k
<operator>.addition i+\012(0xa0+2713-0xb38)
<operator>.subtraction 0xeb5+2117-0x16fa
<operator>.addition 0x279+8340
<operator>.addition 0x17b6+59
<operator>.lessThan ReplacementFor_pp<s*ReplacementFor_k+ReplacementFor_k
<operator>.postIncrement ReplacementFor_pp++
<operator>.assignmentPlus ReplacementFor_sum+=(ReplacementFor_a[ReplacementFor_pp]*\012ReplacementFor_j)
<operator>.multiplication ReplacementFor_a[t]*ReplacementFor_j
<operator>.subtraction 0xa0+2713-0xb38
<operator>.addition 0xeb5+2117
<operator>.subtraction 0x1ef7+1408-0x2477
<operator>.subtraction 0x1378+3134-0x1fb6
<operator>.assignment ReplacementFor_pp=s*\012ReplacementFor_k
<operator>.multiplication m*ReplacementFor_k
<operator>.addition 0xa0+2713
<operator>.addition 0x1ef7+1408
<operator>.addition 0x1378+3134
<operator>.addition s*ReplacementFor_k+ReplacementFor_k
<operator>.multiplication ReplacementFor_a[ReplacementFor_pp]*\012ReplacementFor_j
<operator>.multiplication s*\012ReplacementFor_k
<operator>.multiplication s*ReplacementFor_k
<operator>.addressOf &\012ReplacementFor_p
<operator>.addressOf &ReplacementFor_k
<operator>.addressOf &l
<operator>.addressOf &ReplacementFor_a[ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_a[t]
<operator>.indirectIndexAccess ReplacementFor_a[ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_a[ReplacementFor_pp]
>>>PDG&64 0->3 0->5 0->6 0->7 0->8 0->10 0->11 0->12 0->13 0->16 0->18 0->19 0->20 0->21 0->22 0->23 0->24 0->25 0->26 0->27 0->31 0->32 0->34 0->36 0->37 0->38 0->39 0->40 0->41 0->42 0->43 0->44 0->45 0->46 0->47 0->49 0->50 0->51 0->52 0->53 0->54 0->55 0->56 2->1 2->1 2->1 2->16 2->25 2->42 3->1 3->5 4->1 5->1 5->1 5->1 5->5 5->6 5->6 5->10 5->11 5->12 5->13 5->14 5->15 5->16 5->16 5->17 5->19 5->21 5->23 5->28 5->30 5->31 5->32 5->33 5->35 5->36 5->36 5->37 5->39 5->44 5->45 5->46 5->47 5->49 5->50 5->51 5->52 5->57 5->58 5->59 6->1 6->5 7->1 7->1 7->4 8->1 8->2 8->2 9->1 9->1 9->5 10->1 11->1 11->31 11->40 11->49 11->53 11->55 11->56 12->1 12->13 12->19 12->23 12->31 13->1 13->1 13->1 13->29 13->31 13->43 13->54 14->1 14->1 14->21 15->1 15->1 15->1 15->34 15->43 15->54 16->1 16->1 17->1 17->1 17->1 17->16 17->25 17->42 19->1 19->13 19->19 19->20 19->20 19->29 19->60 19->62 20->1 20->19 21->1 21->1 21->21 21->22 21->34 21->40 21->48 21->49 21->53 21->55 21->55 21->56 22->1 22->21 23->1 23->1 23->1 23->12 23->19 23->23 23->24 23->24 23->25 23->43 23->61 24->1 24->23 25->1 25->1 25->16 27->1 27->9 27->9 28->1 28->1 28->19 29->1 29->13 30->1 31->14 31->14 31->23 31->49 31->55 32->1 32->15 32->15 33->1 33->1 33->21 34->1 34->1 34->43 34->54 35->1 35->1 35->23 36->1 37->1 37->17 37->17 40->1 40->1 40->1 40->40 40->41 40->41 40->42 40->53 40->54 40->56 40->63 41->1 41->40 42->1 42->1 42->16 42->25 43->1 43->1 43->13 43->25 43->25 44->1 44->16 44->16 44->36 44->36 46->1 46->28 46->28 47->1 47->33 47->33 48->1 48->1 48->40 49->1 49->1 49->11 49->31 49->35 49->35 53->1 54->1 54->13 54->34 54->42 54->42 55->48 55->48 55->56 55->56 56->22 56->40 56->40 56->49 56->53 56->53 56->55
>>>Token int main ( ) { int ReplacementFor_n , ReplacementFor_p , ReplacementFor_k , l , ReplacementFor_a [ ( 0x23f5 + 73 - 0x2056 ) ] , m , t , s , i , ReplacementFor_j , ReplacementFor_pp ; double ReplacementFor_sum = ( 0x877 + 2649 - 0x12d0 ) ; scanf ( " \x25 \x64 " , & ReplacementFor_n ) ; for ( i = ( 0x279 + 8340 - 0x230d ) ; i < ReplacementFor_n ; i ++ ) { scanf ( " \x25 \x64 " , & ReplacementFor_p ) ; scanf ( " \x25 \x64 " , & ReplacementFor_k ) ; scanf ( " \x25 \x64 " , & l ) ; for ( ReplacementFor_j = ( 0x1ef7 + 1408 - 0x2477 ) ; ReplacementFor_j < l ; ReplacementFor_j ++ ) { scanf ( " \x25 \x64 " , & ReplacementFor_a [ ReplacementFor_j ] ) ; } qsort ( ReplacementFor_a , l , sizeof ( int ) , ReplacementFor_Cmpdep ) ; m = l / ReplacementFor_k ; ReplacementFor_j = ( 0x17b6 + 59 - 0x17f0 ) ; for ( s = ( 0x1378 + 3134 - 0x1fb6 ) ; s < m ; s ++ ) { for ( ReplacementFor_pp = s * ReplacementFor_k ; ReplacementFor_pp < s * ReplacementFor_k + ReplacementFor_k ; ReplacementFor_pp ++ ) ReplacementFor_sum += ( ReplacementFor_a [ ReplacementFor_pp ] * ReplacementFor_j ) ; ReplacementFor_j ++ ; } for ( t = m * ReplacementFor_k ; t < l ; t ++ ) ReplacementFor_sum += ReplacementFor_a [ t ] * ReplacementFor_j ; printf ( " \x43 \x61 \x73 \x65 \x20 \x23 \x25 \x64 \x3a \x20 \x25 \x2e \x30 \x66 " " \n " , i + ( 0xa0 + 2713 - 0xb38 ) , ReplacementFor_sum ) ; ReplacementFor_sum = ( 0xeb5 + 2117 - 0x16fa ) ; } return ( 0x3e1 + 5886 - 0x1adf ) ; }
>>>Func
METHOD ReplacementFor_unit_to_umax
METHOD_RETURN uintmax_t
PARAM char const*ReplacementFor_n_string
<operator>.assignment *\012ReplacementFor_c_string=ReplacementFor_n_string
<operator>.assignment *ReplacementFor_t_string=\012NULL
<operator>.assignment ReplacementFor_n_len=strlen(ReplacementFor_n_string)
<operator>.assignment *\012ReplacementFor_end=NULL
<operator>.assignment *\012ReplacementFor_suffixes="\x4b\x4d\x47\x54\x50\x45\x5a\x59"
<operator>.assignment ReplacementFor_s_err=\012ReplacementFor_xstrtoumax(ReplacementFor_c_string &ReplacementFor_end \012(0xbe8+1306-0x10f8),&ReplacementFor_n,ReplacementFor_suffixes)
free free(ReplacementFor_t_string)
RETURN return ReplacementFor_n; return ReplacementFor_n;
<operator>.logicalAnd ReplacementFor_n_len&&!ReplacementFor_c_isdigit(ReplacementFor_n_string[\012ReplacementFor_n_len-(0xcb7+4558-0x1e84)])
<operator>.logicalOr ReplacementFor_s_err!=ReplacementFor_LONGINT_OK||*ReplacementFor_end||\012ReplacementFor_n==(0x1a3b+2692-0x24bf)
IDENTIFIER ReplacementFor_n return ReplacementFor_n;
strlen strlen(ReplacementFor_n_string)
<operator>.assignment ReplacementFor_t_string=\012ReplacementFor_xmalloc(ReplacementFor_n_len+(0x6a8+4547-0x1869))
<operator>.assignment ReplacementFor_end=ReplacementFor_t_string+ReplacementFor_n_len-\012(0xb12+4748-0x1d9d)
memcpy memcpy(ReplacementFor_t_string,ReplacementFor_n_string,\012ReplacementFor_n_len)
<operator>.assignment ReplacementFor_c_string=ReplacementFor_t_string
ReplacementFor_xstrtoumax ReplacementFor_xstrtoumax(ReplacementFor_c_string &ReplacementFor_end \012(0xbe8+1306-0x10f8),&ReplacementFor_n,ReplacementFor_suffixes)
free free(ReplacementFor_t_string)
ReplacementFor_die ReplacementFor_die(EXIT_FAILURE (0x56a+3162-0x11c4) ReplacementFor__(\012"\x69\x6e\x76\x61\x6c\x69\x64\x20\x75\x6e\x69\x74\x20\x73\x69\x7a\x65\x3a\x20\x25\x73"\012) ReplacementFor_quote(ReplacementFor_n_string))
<operator>.logicalNot !ReplacementFor_c_isdigit(ReplacementFor_n_string[\012ReplacementFor_n_len-(0xcb7+4558-0x1e84)])
<operator>.logicalAnd *ReplacementFor_end==((char)(0x4ba+1968-0xc01))&&\012(0x1fa2+134-0x2026)<=ReplacementFor_n_len&&!ReplacementFor_c_isdigit(*(\012ReplacementFor_end-(0x3e2+4631-0x15f8)))
<operator>.subtraction 0xbe8+1306-0x10f8
<operator>.logicalOr ReplacementFor_s_err!=ReplacementFor_LONGINT_OK||*ReplacementFor_end
<operator>.equals ReplacementFor_n==(0x1a3b+2692-0x24bf)
ReplacementFor_c_isdigit ReplacementFor_c_isdigit(ReplacementFor_n_string[\012ReplacementFor_n_len-(0xcb7+4558-0x1e84)])
ReplacementFor_xmalloc ReplacementFor_xmalloc(ReplacementFor_n_len+(0x6a8+4547-0x1869))
<operator>.subtraction ReplacementFor_t_string+ReplacementFor_n_len-\012(0xb12+4748-0x1d9d)
<operator>.assignment *ReplacementFor_end='\0'
<operator>.addition 0xbe8+1306
<operator>.notEquals ReplacementFor_s_err!=ReplacementFor_LONGINT_OK
<operator>.subtraction 0x1a3b+2692-0x24bf
<operator>.subtraction 0x56a+3162-0x11c4
ReplacementFor__ ReplacementFor__(\012"\x69\x6e\x76\x61\x6c\x69\x64\x20\x75\x6e\x69\x74\x20\x73\x69\x7a\x65\x3a\x20\x25\x73"\012)
ReplacementFor_quote ReplacementFor_quote(ReplacementFor_n_string)
<operator>.addition ReplacementFor_n_len+(0x6a8+4547-0x1869)
<operator>.addition ReplacementFor_t_string+ReplacementFor_n_len
<operator>.subtraction 0xb12+4748-0x1d9d
<operator>.logicalAnd *ReplacementFor_end==((char)(0x4ba+1968-0xc01))&&\012(0x1fa2+134-0x2026)<=ReplacementFor_n_len
<operator>.logicalNot !ReplacementFor_c_isdigit(*(\012ReplacementFor_end-(0x3e2+4631-0x15f8)))
<operator>.assignment *++\012ReplacementFor_end=((char)(0x530+5268-0x1982))
<operator>.assignment *++ReplacementFor_end='\0'
<operator>.assignment ReplacementFor_suffixes="\x4b\x4d\x47\x54\x50\x45\x5a\x59\x30"
<operator>.addition 0x1a3b+2692
<operator>.addition 0x56a+3162
<operator>.subtraction ReplacementFor_n_len-(0xcb7+4558-0x1e84)
<operator>.subtraction 0x6a8+4547-0x1869
<operator>.addition 0xb12+4748
<operator>.equals *ReplacementFor_end==((char)(0x4ba+1968-0xc01))
<operator>.lessEqualsThan (0x1fa2+134-0x2026)<=ReplacementFor_n_len
ReplacementFor_c_isdigit ReplacementFor_c_isdigit(*(\012ReplacementFor_end-(0x3e2+4631-0x15f8)))
<operator>.subtraction 0xcb7+4558-0x1e84
<operator>.addition 0x6a8+4547
<operator>.cast (char)(0x4ba+1968-0xc01)
<operator>.subtraction 0x1fa2+134-0x2026
<operator>.cast (char)(0x530+5268-0x1982)
<operator>.addition 0xcb7+4558
<operator>.subtraction 0x4ba+1968-0xc01
<operator>.addition 0x1fa2+134
<operator>.subtraction ReplacementFor_end-(0x3e2+4631-0x15f8)
<operator>.preIncrement ++\012ReplacementFor_end
<operator>.subtraction 0x530+5268-0x1982
<operator>.preIncrement ++ReplacementFor_end
<operator>.addition 0x4ba+1968
<operator>.subtraction 0x3e2+4631-0x15f8
<operator>.addition 0x530+5268
<operator>.addition 0x3e2+4631
<operator>.indirection *ReplacementFor_end
<operator>.indirection *ReplacementFor_end
<operator>.indirection *ReplacementFor_end
<operator>.indirection *(\012ReplacementFor_end-(0x3e2+4631-0x15f8))
<operator>.indirection *++\012ReplacementFor_end
<operator>.indirection *++ReplacementFor_end
UNKNOWN char char
UNKNOWN char char
>>>PDG&77 0->2 0->3 0->4 0->6 0->7 0->9 0->11 0->13 0->14 0->17 0->18 0->19 0->20 0->21 0->24 0->26 0->28 0->29 0->30 0->31 0->32 0->33 0->34 0->35 0->36 0->37 0->38 0->39 0->43 0->44 0->45 0->46 0->47 0->48 0->49 0->51 0->53 0->54 0->56 0->58 0->59 0->60 0->61 0->62 0->63 0->64 0->65 0->66 0->67 0->68 2->3 2->14 3->1 3->19 4->1 4->9 4->20 5->1 5->1 5->11 5->47 6->1 6->1 6->1 6->19 7->1 7->19 8->1 8->1 8->32 9->1 10->1 11->1 11->1 11->1 11->15 11->16 11->17 11->17 11->18 11->23 11->28 11->28 11->29 11->29 11->37 11->37 11->38 11->38 11->39 11->40 11->48 11->49 11->50 11->54 11->55 11->59 11->65 11->71 11->75 12->1 12->1 12->1 12->20 12->21 12->34 12->35 12->36 12->46 13->10 14->1 14->5 14->17 14->27 14->36 15->1 15->1 15->17 15->29 15->38 16->1 16->1 16->1 16->19 16->61 16->62 17->1 17->1 17->1 17->9 17->18 17->20 17->36 17->51 18->1 18->19 19->1 19->1 19->1 19->1 19->1 19->8 19->8 19->8 19->8 19->8 19->13 19->26 20->9 21->1 21->1 21->1 21->1 21->1 22->1 22->11 23->1 23->1 23->1 23->30 23->42 23->43 23->44 23->57 23->62 23->63 23->64 23->67 23->70 23->73 23->74 23->76 24->1 24->19 24->19 25->1 25->1 25->12 25->12 25->26 25->33 25->45 26->1 26->1 26->12 26->12 26->13 27->1 27->17 27->22 27->36 28->1 28->15 29->1 29->1 29->16 29->16 30->1 30->19 30->25 32->1 32->1 32->25 32->25 32->69 33->1 33->26 33->26 34->1 34->21 34->21 35->21 36->1 36->21 37->1 39->1 39->29 39->29 40->1 40->1 40->23 40->23 40->41 40->52 40->61 40->66 40->68 40->72 41->1 41->23 42->1 42->1 42->1 43->1 43->1 44->1 44->19 47->1 47->11 48->1 48->28 48->28 48->37 48->37 50->1 50->19 50->25 50->40 50->40 50->51 50->56 50->60 50->61 50->62 50->64 51->1 51->1 51->40 51->40 52->1 52->41 53->1 53->47 53->47 55->1 56->1 56->51 56->51 57->1 59->1 59->50 59->50 59->55 59->55 61->1 61->1 61->19 61->62 62->64 63->1 63->42 63->42 63->57 63->57 64->1 64->19 66->1 66->61 66->61
>>>Token static uintmax_t ReplacementFor_unit_to_umax ( char const * ReplacementFor_n_string ) { ReplacementFor_strtol_error ReplacementFor_s_err ; char const * ReplacementFor_c_string = ReplacementFor_n_string ; char * ReplacementFor_t_string = NULL ; size_t ReplacementFor_n_len = strlen ( ReplacementFor_n_string ) ; char * ReplacementFor_end = NULL ; uintmax_t ReplacementFor_n ; char const * ReplacementFor_suffixes = " \x4b \x4d \x47 \x54 \x50 \x45 \x5a \x59 " ; if ( ReplacementFor_n_len && ! ReplacementFor_c_isdigit ( ReplacementFor_n_string [ ReplacementFor_n_len - ( 0xcb7 + 4558 - 0x1e84 ) ] ) ) { ReplacementFor_t_string = ReplacementFor_xmalloc ( ReplacementFor_n_len + ( 0x6a8 + 4547 - 0x1869 ) ) ; ReplacementFor_end = ReplacementFor_t_string + ReplacementFor_n_len - ( 0xb12 + 4748 - 0x1d9d ) ; memcpy ( ReplacementFor_t_string , ReplacementFor_n_string , ReplacementFor_n_len ) ; if ( * ReplacementFor_end == ( ( char ) ( 0x4ba + 1968 - 0xc01 ) ) && ( 0x1fa2 + 134 - 0x2026 ) <= ReplacementFor_n_len && ! ReplacementFor_c_isdigit ( * ( ReplacementFor_end - ( 0x3e2 + 4631 - 0x15f8 ) ) ) ) * ReplacementFor_end = ' \0 ' ; else { * ++ ReplacementFor_end = ( ( char ) ( 0x530 + 5268 - 0x1982 ) ) ; * ++ ReplacementFor_end = ' \0 ' ; ReplacementFor_suffixes = " \x4b \x4d \x47 \x54 \x50 \x45 \x5a \x59 \x30 " ; } ReplacementFor_c_string = ReplacementFor_t_string ; } ReplacementFor_s_err = ReplacementFor_xstrtoumax ( ReplacementFor_c_string , & ReplacementFor_end , ( 0xbe8 + 1306 - 0x10f8 ) , & ReplacementFor_n , ReplacementFor_suffixes ) ; if ( ReplacementFor_s_err != ReplacementFor_LONGINT_OK || * ReplacementFor_end || ReplacementFor_n == ( 0x1a3b + 2692 - 0x24bf ) ) { free ( ReplacementFor_t_string ) ; ReplacementFor_die ( EXIT_FAILURE , ( 0x56a + 3162 - 0x11c4 ) , ReplacementFor__ ( " \x69 \x6e \x76 \x61 \x6c \x69 \x64 \x20 \x75 \x6e \x69 \x74 \x20 \x73 \x69 \x7a \x65 \x3a \x20 \x25 \x73 " ) , ReplacementFor_quote ( ReplacementFor_n_string ) ) ; } free ( ReplacementFor_t_string ) ; return ReplacementFor_n ; }
>>>Func
METHOD ReplacementFor_key_name
METHOD_RETURN ANY
PARAM ReplacementFor_V ReplacementFor_a
PARAM ReplacementFor_V \012ReplacementFor_b
>>>PDG&4 0->2 0->3 2->1 3->1
>>>Token ReplacementFor_ATTRIBUTE_PURE static int  ReplacementFor_rev_strcmp_df_ ReplacementFor_key_name ( ReplacementFor_V ReplacementFor_a , ReplacementFor_V ReplacementFor_b ) { return < ReplacementFor_missing ( ( char ) ( 0x5dc + 7106 - 0x2163 ) ) > ReplacementFor_dirfirst_check < ReplacementFor_missing ( ( char ) ( 0x350 + 5038 - 0x16c3 ) ) > ( < ReplacementFor_missing ( ( char ) ( 0x1857 + 18 - 0x182e ) ) > ReplacementFor_a , ReplacementFor_b , ReplacementFor_rev_strcmp_ < ReplacementFor_missing ( ( char ) ( 0x1a01 + 679 - 0x1c6d ) ) > ReplacementFor_key_name ) ; }
>>>Func
METHOD main
METHOD_RETURN int
scanf scanf("\x25\x64",&\012ReplacementFor_ntest)
RETURN return(0xd51+60-0xd8d); return(0xd51+60-0xd8d);
<operator>.lessEqualsThan ReplacementFor_testno<=ReplacementFor_ntest
<operator>.postIncrement ReplacementFor_testno++
<operator>.subtraction 0xd51+60-0xd8d
<operator>.assignment ReplacementFor_testno=(0x17b6+3334-0x24bb)
<operator>.assignment ReplacementFor_res=\012(0x2194+280-0x22ac)
scanf scanf("\x25\x6c\x6c\x64\x25\x64\x25\x64",&ReplacementFor_N,&\012ReplacementFor_PD,&ReplacementFor_PG)
printf printf(\012"\x43\x61\x73\x65\x20\x23\x25\x64\x3a\x20\x25\x73" "\n",ReplacementFor_testno,\012ReplacementFor_res?"\x50\x6f\x73\x73\x69\x62\x6c\x65":"\x42\x72\x6f\x6b\x65\x6e"\012)
<operator>.logicalOr ReplacementFor_PG==(0x20a+8507-0x2345)\012||ReplacementFor_PG==(0x148+6093-0x18b1)
<operator>.addition 0xd51+60
<operator>.subtraction 0x17b6+3334-0x24bb
<operator>.subtraction 0x2194+280-0x22ac
<operator>.conditional ReplacementFor_res?"\x50\x6f\x73\x73\x69\x62\x6c\x65":"\x42\x72\x6f\x6b\x65\x6e"
<operator>.addition 0x17b6+3334
<operator>.addition 0x2194+280
<operator>.equals ReplacementFor_PG==(0x20a+8507-0x2345)
<operator>.equals ReplacementFor_PG==(0x148+6093-0x18b1)
<operator>.equals ReplacementFor_PD==\012ReplacementFor_PG
<operator>.assignment ReplacementFor_d=(long \012long)ReplacementFor_gcd(ReplacementFor_PD (0x26e5+119-0x26f8))
<operator>.subtraction 0x20a+8507-0x2345
<operator>.subtraction 0x148+6093-0x18b1
<operator>.assignment ReplacementFor_res=(0x113c+403-0x12ce)
<operator>.greaterEqualsThan ReplacementFor_N>=(long long)(0x552+6715-0x1f29)/ReplacementFor_d
<operator>.addition 0x20a+8507
<operator>.addition 0x148+6093
<operator>.assignment ReplacementFor_res=(0x8c0+737-0xba1)
<operator>.cast (long \012long)ReplacementFor_gcd(ReplacementFor_PD (0x26e5+119-0x26f8))
<operator>.assignment ReplacementFor_res=(0x1111+3920-0x2060)
<operator>.subtraction 0x113c+403-0x12ce
ReplacementFor_gcd ReplacementFor_gcd(ReplacementFor_PD (0x26e5+119-0x26f8))
<operator>.division (long long)(0x552+6715-0x1f29)/ReplacementFor_d
<operator>.assignment ReplacementFor_res=\012(0x1592+3260-0x224e)
<operator>.addition 0x113c+403
<operator>.subtraction 0x8c0+737-0xba1
<operator>.subtraction 0x26e5+119-0x26f8
<operator>.cast (long long)(0x552+6715-0x1f29)
<operator>.subtraction 0x1111+3920-0x2060
<operator>.addition 0x8c0+737
<operator>.addition 0x26e5+119
<operator>.subtraction 0x552+6715-0x1f29
<operator>.addition 0x1111+3920
<operator>.subtraction 0x1592+3260-0x224e
<operator>.addition 0x552+6715
<operator>.addition 0x1592+3260
<operator>.addressOf &ReplacementFor_N
<operator>.addressOf &\012ReplacementFor_PD
<operator>.addressOf &ReplacementFor_PG
UNKNOWN long \012long long \012long
UNKNOWN long long long long
>>>PDG&52 0->2 0->4 0->5 0->6 0->9 0->10 0->12 0->13 0->14 0->15 0->16 0->17 0->18 0->19 0->20 0->22 0->23 0->25 0->26 0->27 0->31 0->32 0->33 0->35 0->36 0->37 0->39 0->40 0->41 0->42 0->43 0->44 0->45 0->46 2->1 2->4 3->1 4->1 4->1 4->1 4->4 4->5 4->8 4->9 4->10 4->10 4->11 4->14 4->15 4->17 4->18 4->22 4->26 4->47 4->48 4->49 5->1 5->4 6->1 6->1 6->3 7->1 7->1 7->4 8->1 8->1 9->1 9->1 9->1 9->25 10->1 10->1 10->5 11->1 11->1 11->1 11->20 11->21 11->25 11->29 11->32 11->33 11->37 11->38 11->41 11->42 11->45 11->50 11->51 13->1 13->7 13->7 14->1 14->8 14->8 15->1 18->1 18->1 18->11 18->11 18->19 18->19 18->20 18->23 18->27 19->1 19->1 19->11 19->11 19->18 19->20 20->1 20->1 20->1 20->18 20->24 20->28 20->31 20->32 20->35 20->36 20->40 21->1 21->1 21->33 22->1 22->18 22->18 23->1 23->19 23->19 24->1 24->1 25->1 25->1 25->1 25->9 25->30 25->34 25->39 25->43 25->44 25->46 28->1 28->1 29->1 30->1 30->1 31->1 31->24 31->24 32->1 32->1 32->20 32->21 32->21 32->29 32->29 33->1 33->1 33->25 33->25 34->1 34->1 36->1 36->28 36->28 37->1 37->32 37->32 38->1 39->1 39->30 39->30 42->1 42->33 42->33 42->38 42->38 44->1 44->34 44->34
>>>Token int main ( ) { int ReplacementFor_ntest , ReplacementFor_testno ; scanf ( " \x25 \x64 " , & ReplacementFor_ntest ) ; for ( ReplacementFor_testno = ( 0x17b6 + 3334 - 0x24bb ) ; ReplacementFor_testno <= ReplacementFor_ntest ; ReplacementFor_testno ++ ) { long long ReplacementFor_N ; int ReplacementFor_PD , ReplacementFor_PG ; int ReplacementFor_res = ( 0x2194 + 280 - 0x22ac ) ; scanf ( " \x25 \x6c \x6c \x64 \x25 \x64 \x25 \x64 " , & ReplacementFor_N , & ReplacementFor_PD , & ReplacementFor_PG ) ; if ( ReplacementFor_PG == ( 0x20a + 8507 - 0x2345 ) || ReplacementFor_PG == ( 0x148 + 6093 - 0x18b1 ) ) { if ( ReplacementFor_PD == ReplacementFor_PG ) { ReplacementFor_res = ( 0x113c + 403 - 0x12ce ) ; } else { ReplacementFor_res = ( 0x8c0 + 737 - 0xba1 ) ; } } else { long long ReplacementFor_d = ( long long ) ReplacementFor_gcd ( ReplacementFor_PD , ( 0x26e5 + 119 - 0x26f8 ) ) ; if ( ReplacementFor_N >= ( long long ) ( 0x552 + 6715 - 0x1f29 ) / ReplacementFor_d ) { ReplacementFor_res = ( 0x1111 + 3920 - 0x2060 ) ; } else { ReplacementFor_res = ( 0x1592 + 3260 - 0x224e ) ; } } printf ( " \x43 \x61 \x73 \x65 \x20 \x23 \x25 \x64 \x3a \x20 \x25 \x73 " " \n " , ReplacementFor_testno , ReplacementFor_res ? " \x50 \x6f \x73 \x73 \x69 \x62 \x6c \x65 " : " \x42 \x72 \x6f \x6b \x65 \x6e " ) ; } return ( 0xd51 + 60 - 0xd8d ) ; }
>>>Func
METHOD ReplacementFor_eo
METHOD_RETURN void
PARAM char*ReplacementFor_msg
printf printf(ReplacementFor_msg)
fflush fflush(stdout)
exit exit(EXIT_FAILURE)
>>>PDG&6 0->2 0->3 0->4 0->5 2->3 3->1 3->1 4->1 4->1 5->1
>>>Token void ReplacementFor_eo ( char * ReplacementFor_msg ) { printf ( ReplacementFor_msg ) ; fflush ( stdout ) ; exit ( EXIT_FAILURE ) ; }
>>>Func
METHOD main
METHOD_RETURN int
ReplacementFor_test_adler32 ReplacementFor_test_adler32()
RETURN return(0x1fd0+217-0x20a9); return(0x1fd0+217-0x20a9);
<operator>.subtraction 0x1fd0+217-0x20a9
<operator>.addition 0x1fd0+217
>>>PDG&6 0->2 0->4 0->5 2->1 3->1 4->1 4->1 4->3
>>>Token int main ( ) { ReplacementFor_test_adler32 ( ) ; return ( 0x1fd0 + 217 - 0x20a9 ) ; }
>>>Func
METHOD ReplacementFor_removeElements
METHOD_RETURN struct ReplacementFor_ListNode
PARAM struct \012ReplacementFor_ListNode*ReplacementFor_head
PARAM int val
RETURN return ReplacementFor_head; return ReplacementFor_head;
<operator>.equals ReplacementFor_head==\012NULL
<operator>.equals ReplacementFor_head->val==val
IDENTIFIER ReplacementFor_head return ReplacementFor_head;
RETURN return NULL; return NULL;
RETURN return \012ReplacementFor_removeElements(ReplacementFor_head->next,val); return \012ReplacementFor_removeElements(ReplacementFor_head->next,val);
IDENTIFIER NULL return NULL;
ReplacementFor_removeElements ReplacementFor_removeElements(ReplacementFor_head->next,val)
<operator>.assignment ReplacementFor_head->next=ReplacementFor_removeElements(ReplacementFor_head->\012next,val)
ReplacementFor_removeElements ReplacementFor_removeElements(ReplacementFor_head->\012next,val)
<operator>.indirectFieldAccess ReplacementFor_head->val
FIELD_IDENTIFIER val val
<operator>.indirectFieldAccess ReplacementFor_head->next
<operator>.indirectFieldAccess ReplacementFor_head->next
FIELD_IDENTIFIER next next
FIELD_IDENTIFIER next next
<operator>.indirectFieldAccess ReplacementFor_head->\012next
FIELD_IDENTIFIER next next
>>>PDG&22 0->2 0->3 0->5 0->6 0->7 0->8 0->10 0->11 0->13 2->5 3->1 3->6 4->1 5->1 5->1 5->1 5->6 5->7 5->8 5->14 5->15 6->4 6->9 6->11 6->11 6->12 6->13 6->13 6->16 6->17 6->18 6->19 6->20 6->21 7->4 8->1 9->1 10->8 11->9 13->12 13->12
>>>Token struct ReplacementFor_ListNode * ReplacementFor_removeElements ( struct ReplacementFor_ListNode * ReplacementFor_head , int val ) { if ( ReplacementFor_head == NULL ) return NULL ; if ( ReplacementFor_head -> val == val ) { return ReplacementFor_removeElements ( ReplacementFor_head -> next , val ) ; } else { ReplacementFor_head -> next = ReplacementFor_removeElements ( ReplacementFor_head -> next , val ) ; } return ReplacementFor_head ; }
>>>Func
METHOD ReplacementFor_maxArea
METHOD_RETURN int
PARAM int*ReplacementFor_height
PARAM int \012ReplacementFor_heightSize
<operator>.assignment ReplacementFor_start=(0x1a33+692-0x1ce7)
<operator>.assignment ReplacementFor_end=ReplacementFor_heightSize-(0xbed+6331-0x24a7)
<operator>.assignment ReplacementFor_res=(0x314+146-0x3a6)
RETURN return ReplacementFor_res; return ReplacementFor_res;
<operator>.lessThan ReplacementFor_start<\012ReplacementFor_end
IDENTIFIER ReplacementFor_res return ReplacementFor_res;
<operator>.subtraction 0x1a33+692-0x1ce7
<operator>.subtraction ReplacementFor_heightSize-(0xbed+6331-0x24a7)
<operator>.subtraction 0x314+146-0x3a6
<operator>.assignment ReplacementFor_currArea=(ReplacementFor_end-\012ReplacementFor_start)*ReplacementFor_min(ReplacementFor_height[\012ReplacementFor_start],ReplacementFor_height[ReplacementFor_end])
<operator>.addition 0x1a33+692
<operator>.subtraction 0xbed+6331-0x24a7
<operator>.addition 0x314+146
<operator>.greaterThan ReplacementFor_currArea>ReplacementFor_res
<operator>.lessThan ReplacementFor_height[ReplacementFor_start]<\012ReplacementFor_height[ReplacementFor_end]
<operator>.addition 0xbed+6331
<operator>.multiplication (ReplacementFor_end-\012ReplacementFor_start)*ReplacementFor_min(ReplacementFor_height[\012ReplacementFor_start],ReplacementFor_height[ReplacementFor_end])
<operator>.assignment ReplacementFor_res=\012ReplacementFor_currArea
<operator>.assignment ReplacementFor_start=\012ReplacementFor_start+(0x1436+4177-0x2486)
<operator>.subtraction ReplacementFor_end-\012ReplacementFor_start
ReplacementFor_min ReplacementFor_min(ReplacementFor_height[\012ReplacementFor_start],ReplacementFor_height[ReplacementFor_end])
<operator>.assignment ReplacementFor_end=\012ReplacementFor_end-(0x10c6+138-0x114f)
<operator>.addition ReplacementFor_start+(0x1436+4177-0x2486)
<operator>.subtraction 0x1436+4177-0x2486
<operator>.subtraction ReplacementFor_end-(0x10c6+138-0x114f)
<operator>.addition 0x1436+4177
<operator>.subtraction 0x10c6+138-0x114f
<operator>.addition 0x10c6+138
<operator>.indirectIndexAccess ReplacementFor_height[ReplacementFor_start]
<operator>.indirectIndexAccess ReplacementFor_height[ReplacementFor_end]
<operator>.indirectIndexAccess ReplacementFor_height[\012ReplacementFor_start]
<operator>.indirectIndexAccess ReplacementFor_height[ReplacementFor_end]
>>>PDG&36 0->2 0->3 0->8 0->9 0->10 0->11 0->12 0->14 0->15 0->16 0->17 0->19 0->21 0->22 0->23 0->26 0->27 0->28 0->29 0->30 0->31 2->1 2->18 2->24 3->11 4->1 4->1 4->8 5->1 5->1 5->8 6->1 6->1 6->1 6->9 6->17 7->1 8->1 8->1 8->1 8->8 8->13 8->17 8->18 8->20 8->23 8->23 8->23 8->24 8->32 8->33 8->34 8->35 9->7 10->1 10->4 10->4 11->1 11->1 11->5 11->5 12->1 12->6 12->6 13->1 13->1 13->17 15->1 15->11 15->11 17->1 17->1 17->1 17->9 17->21 17->21 18->1 18->1 18->1 18->22 18->24 18->25 18->26 18->27 18->28 18->29 18->30 18->31 20->1 20->1 20->13 20->13 21->1 21->1 21->1 21->9 21->17 22->1 22->1 22->8 23->8 23->8 23->20 23->20 23->22 23->26 23->28 24->1 24->18 24->20 24->20 25->1 25->1 25->8 26->1 27->1 27->22 27->22 27->26 27->26 28->1 28->25 28->25 30->1 30->28 30->28
>>>Token int ReplacementFor_maxArea ( int * ReplacementFor_height , int ReplacementFor_heightSize ) { int ReplacementFor_start = ( 0x1a33 + 692 - 0x1ce7 ) ; int ReplacementFor_end = ReplacementFor_heightSize - ( 0xbed + 6331 - 0x24a7 ) ; int ReplacementFor_res = ( 0x314 + 146 - 0x3a6 ) ; while ( ReplacementFor_start < ReplacementFor_end ) { int ReplacementFor_currArea = ( ReplacementFor_end - ReplacementFor_start ) * ReplacementFor_min ( ReplacementFor_height [ ReplacementFor_start ] , ReplacementFor_height [ ReplacementFor_end ] ) ; if ( ReplacementFor_currArea > ReplacementFor_res ) ReplacementFor_res = ReplacementFor_currArea ; if ( ReplacementFor_height [ ReplacementFor_start ] < ReplacementFor_height [ ReplacementFor_end ] ) ReplacementFor_start = ReplacementFor_start + ( 0x1436 + 4177 - 0x2486 ) ; else ReplacementFor_end = ReplacementFor_end - ( 0x10c6 + 138 - 0x114f ) ; } return ReplacementFor_res ; }
>>>Func
METHOD main
METHOD_RETURN int
<operator>.assignment T=(0x1456+3662-0x22a4)
scanf scanf("\x25\x64",&T)
RETURN return(0x61c+8107-0x25c7); return(0x61c+8107-0x25c7);
<operator>.lessEqualsThan ReplacementFor_cz<=T
<operator>.postIncrement ReplacementFor_cz++
<operator>.subtraction 0x61c+8107-0x25c7
<operator>.subtraction 0x1456+3662-0x22a4
<operator>.assignment ReplacementFor_cz=(0xd5b+2342-0x1680)
scanf scanf("\x25\x64",&ReplacementFor_C)
scanf scanf("\x25\x64",&ReplacementFor_D)
scanf scanf("\x25\x64",&\012ReplacementFor_N)
scanf scanf("\x25\x73",Ns)
<operator>.assignment ReplacementFor_q=(0x6c5+4265-0x176e)
printf printf("\x43\x61\x73\x65\x20\x23\x25\x64\x3a\x20\x5b",ReplacementFor_cz)
printf printf("\x5d" "\n")
<operator>.addition 0x1456+3662
<operator>.lessThan i<ReplacementFor_C
<operator>.postIncrement i++
scanf scanf("\x25\x73",&ReplacementFor_Cs[i]\012)
<operator>.lessThan i<\012ReplacementFor_D
<operator>.postIncrement i++
scanf scanf("\x25\x73",&ReplacementFor_Ds[i])
<operator>.lessThan i<ReplacementFor_N
<operator>.postIncrement i++
<operator>.lessThan i<ReplacementFor_q
<operator>.postIncrement i++
<operator>.addition 0x61c+8107
<operator>.subtraction 0xd5b+2342-0x1680
<operator>.assignment i=\012(0x47d+1769-0xb66)
<operator>.assignment i=(0x1901+2597-0x2326)
<operator>.subtraction 0x6c5+4265-0x176e
<operator>.assignment i=(0x210+9298-0x2662)
<operator>.assignment ReplacementFor_Q[ReplacementFor_q\012++]=Ns[i]
<operator>.assignment ReplacementFor_q=ReplacementFor_doQ(ReplacementFor_Q,ReplacementFor_q)
<operator>.assignment i\012=(0x1010+3459-0x1d93)
printf printf("\x25\x63\x25\x73" \012ReplacementFor_Q[i] (i<ReplacementFor_q-(0x1c2d+976-0x1ffc))?"\x2c\x20":"")
<operator>.addition 0xd5b+2342
<operator>.addition 0x6c5+4265
<operator>.subtraction 0x47d+1769-0xb66
<operator>.subtraction 0x1901+2597-0x2326
<operator>.subtraction 0x210+9298-0x2662
ReplacementFor_doQ ReplacementFor_doQ(ReplacementFor_Q,ReplacementFor_q)
<operator>.subtraction 0x1010+3459-0x1d93
<operator>.conditional (i<ReplacementFor_q-(0x1c2d+976-0x1ffc))?"\x2c\x20":""
<operator>.addition 0x47d+1769
<operator>.addition 0x1901+2597
<operator>.addition 0x210+9298
<operator>.postIncrement ReplacementFor_q\012++
<operator>.addition 0x1010+3459
<operator>.lessThan i<ReplacementFor_q-(0x1c2d+976-0x1ffc)
<operator>.subtraction ReplacementFor_q-(0x1c2d+976-0x1ffc)
<operator>.subtraction 0x1c2d+976-0x1ffc
<operator>.addition 0x1c2d+976
<operator>.addressOf &ReplacementFor_C
<operator>.addressOf &ReplacementFor_D
<operator>.addressOf &\012ReplacementFor_N
<operator>.addressOf &ReplacementFor_Cs[i]
<operator>.addressOf &ReplacementFor_Ds[i]
<operator>.indirectIndexAccess ReplacementFor_Cs[i]
<operator>.indirectIndexAccess ReplacementFor_Ds[i]
<operator>.indirectIndexAccess ReplacementFor_Q[ReplacementFor_q\012++]
<operator>.indirectIndexAccess Ns[i]
<operator>.indirectIndexAccess ReplacementFor_Q[i]
>>>PDG&65 0->3 0->5 0->6 0->7 0->8 0->10 0->11 0->12 0->13 0->15 0->16 0->17 0->18 0->19 0->21 0->22 0->24 0->25 0->26 0->27 0->28 0->29 0->32 0->37 0->38 0->39 0->40 0->41 0->42 0->43 0->44 0->45 0->46 0->47 0->48 0->49 0->50 0->51 0->52 0->53 0->54 2->1 2->1 2->3 2->5 3->1 3->5 4->1 5->1 5->1 5->1 5->5 5->6 5->10 5->11 5->12 5->13 5->14 5->15 5->15 5->16 5->18 5->21 5->24 5->26 5->30 5->31 5->32 5->33 5->36 5->39 5->40 5->41 5->42 5->44 5->46 5->47 5->48 5->50 5->55 5->56 5->57 6->1 6->5 7->1 7->1 7->4 8->1 8->2 8->2 9->1 9->1 9->5 10->1 10->18 11->1 11->21 12->1 12->24 13->1 13->34 14->1 14->1 14->26 14->49 15->1 15->6 16->1 18->1 18->1 18->10 18->18 18->19 18->19 18->20 18->58 18->60 19->1 19->18 20->1 21->1 21->1 21->11 21->21 21->22 21->22 21->23 21->59 21->61 22->1 22->21 23->1 24->1 24->1 24->12 24->24 24->25 24->25 24->34 24->35 24->43 24->49 24->62 24->63 25->1 25->24 26->1 26->1 26->1 26->26 26->27 26->37 26->45 26->51 26->51 26->52 26->52 26->53 26->54 26->64 27->1 27->26 29->1 29->9 29->9 30->1 30->1 30->18 31->1 31->1 31->21 32->1 32->14 32->14 33->1 33->1 33->24 34->1 34->1 34->1 34->43 35->1 35->1 35->26 35->49 36->1 36->1 36->26 37->1 37->1 37->1 37->43 40->1 40->30 40->30 41->1 41->31 41->31 42->1 42->33 42->33 43->1 43->35 43->35 43->37 44->1 44->36 44->36 45->1 49->43 51->1 51->27 52->1 52->26 52->51 52->51 53->1 53->52 53->52
>>>Token int main ( ) { int T = ( 0x1456 + 3662 - 0x22a4 ) ; int ReplacementFor_cz ; scanf ( " \x25 \x64 " , & T ) ; for ( ReplacementFor_cz = ( 0xd5b + 2342 - 0x1680 ) ; ReplacementFor_cz <= T ; ReplacementFor_cz ++ ) { scanf ( " \x25 \x64 " , & ReplacementFor_C ) ; for ( i = ( 0x47d + 1769 - 0xb66 ) ; i < ReplacementFor_C ; i ++ ) scanf ( " \x25 \x73 " , & ReplacementFor_Cs [ i ] ) ; scanf ( " \x25 \x64 " , & ReplacementFor_D ) ; for ( i = ( 0x1901 + 2597 - 0x2326 ) ; i < ReplacementFor_D ; i ++ ) scanf ( " \x25 \x73 " , & ReplacementFor_Ds [ i ] ) ; scanf ( " \x25 \x64 " , & ReplacementFor_N ) ; scanf ( " \x25 \x73 " , Ns ) ; ReplacementFor_q = ( 0x6c5 + 4265 - 0x176e ) ; for ( i = ( 0x210 + 9298 - 0x2662 ) ; i < ReplacementFor_N ; i ++ ) { ReplacementFor_Q [ ReplacementFor_q ++ ] = Ns [ i ] ; ReplacementFor_q = ReplacementFor_doQ ( ReplacementFor_Q , ReplacementFor_q ) ; } printf ( " \x43 \x61 \x73 \x65 \x20 \x23 \x25 \x64 \x3a \x20 \x5b " , ReplacementFor_cz ) ; for ( i = ( 0x1010 + 3459 - 0x1d93 ) ; i < ReplacementFor_q ; i ++ ) { printf ( " \x25 \x63 \x25 \x73 " , ReplacementFor_Q [ i ] , ( i < ReplacementFor_q - ( 0x1c2d + 976 - 0x1ffc ) ) ? " \x2c \x20 " : " " ) ; } printf ( " \x5d " " \n " ) ; } return ( 0x61c + 8107 - 0x25c7 ) ; }
>>>Func
METHOD ReplacementFor_gcd
METHOD_RETURN int
PARAM int ReplacementFor_a
PARAM int ReplacementFor_b
RETURN return ReplacementFor_a; return ReplacementFor_a;
IDENTIFIER ReplacementFor_b while (ReplacementFor_b)
IDENTIFIER ReplacementFor_a return ReplacementFor_a;
<operators>.assignmentModulo ReplacementFor_a%=ReplacementFor_b
<operator>.lessThan ReplacementFor_a<ReplacementFor_b
<operator>.assignment ReplacementFor_c=ReplacementFor_a
<operator>.assignment ReplacementFor_a=ReplacementFor_b
<operator>.assignment ReplacementFor_b=ReplacementFor_c
>>>PDG&12 0->2 0->3 0->5 0->6 0->7 0->8 0->9 0->10 0->11 2->1 2->6 2->8 3->1 3->8 4->1 6->4 8->7 8->7 8->7 8->9 8->9 8->10 8->10 8->11 9->11
>>>Token int ReplacementFor_gcd ( int ReplacementFor_a , int ReplacementFor_b ) { int ReplacementFor_c ; while ( ReplacementFor_b ) { if ( ReplacementFor_a < ReplacementFor_b ) { ReplacementFor_c = ReplacementFor_a ; ReplacementFor_a = ReplacementFor_b ; ReplacementFor_b = ReplacementFor_c ; continue ; } ReplacementFor_a %= ReplacementFor_b ; } return ReplacementFor_a ; }
>>>Func
METHOD ReplacementFor_mod
METHOD_RETURN int
PARAM int ReplacementFor_x
RETURN return(ReplacementFor_x>=\012(0x8af+2446-0x123d)?ReplacementFor_x:((-(0x6cf+8079-0x265d))*ReplacementFor_x)); return(ReplacementFor_x>=\012(0x8af+2446-0x123d)?ReplacementFor_x:((-(0x6cf+8079-0x265d))*ReplacementFor_x));
<operator>.conditional ReplacementFor_x>=\012(0x8af+2446-0x123d)?ReplacementFor_x:((-(0x6cf+8079-0x265d))*ReplacementFor_x)
<operator>.greaterEqualsThan ReplacementFor_x>=\012(0x8af+2446-0x123d)
<operator>.multiplication (-(0x6cf+8079-0x265d))*ReplacementFor_x
<operator>.subtraction 0x8af+2446-0x123d
<operator>.minus -(0x6cf+8079-0x265d)
<operator>.addition 0x8af+2446
<operator>.subtraction 0x6cf+8079-0x265d
<operator>.addition 0x6cf+8079
>>>PDG&12 0->2 0->4 0->5 0->6 0->7 0->9 0->10 0->11 2->5 3->1 4->1 4->1 4->1 4->1 4->3 5->1 5->4 5->6 5->6 5->8 5->10 5->11 6->1 6->4 6->4 7->1 7->5 7->5 8->1 8->6 10->1 10->8 10->8
>>>Token int ReplacementFor_mod ( int ReplacementFor_x ) { return ( ReplacementFor_x >= ( 0x8af + 2446 - 0x123d ) ? ReplacementFor_x : ( ( - ( 0x6cf + 8079 - 0x265d ) ) * ReplacementFor_x ) ) ; }
>>>Func
METHOD ReplacementFor_enginenamecmp
METHOD_RETURN int
PARAM ReplacementFor_enginename*ReplacementFor_a
PARAM ReplacementFor_enginename*ReplacementFor_b
RETURN return memcmp(ReplacementFor_a->name\012 ReplacementFor_b->name sizeof(ReplacementFor_a->name)); return memcmp(ReplacementFor_a->name\012 ReplacementFor_b->name sizeof(ReplacementFor_a->name));
memcmp memcmp(ReplacementFor_a->name\012 ReplacementFor_b->name sizeof(ReplacementFor_a->name))
>>>PDG&6 0->2 0->3 2->1 3->1 4->1 5->1 5->1 5->1 5->4
>>>Token int ReplacementFor_enginenamecmp ( ReplacementFor_enginename * ReplacementFor_a , ReplacementFor_enginename * ReplacementFor_b ) { return memcmp ( ReplacementFor_a -> name , ReplacementFor_b -> name , sizeof ( ReplacementFor_a -> name ) ) ; }
>>>Func
METHOD main
METHOD_RETURN int
<operator>.assignment *ReplacementFor_inf=fopen("\x69\x6e\x70\x75\x74\x2e\x74\x78\x74",\012"\x72")
<operator>.assignment *ReplacementFor_outf=fopen(\012"\x6f\x75\x74\x70\x75\x74\x2e\x74\x78\x74","\x77")
<operator>.assignment ReplacementFor_number=\012(0x385+4481-0x1506)
fscanf fscanf(ReplacementFor_inf,"\x25\x64",&ReplacementFor_number)
printf printf(\012"\x6e\x75\x6d\x62\x65\x72\x20\x6f\x66\x20\x63\x61\x73\x65\x73\x20\x3d\x20\x25\x64" "\n"\012,ReplacementFor_number)
RETURN return(0x11cd+5035-0x2577); return(0x11cd+5035-0x2577);
<operator>.logicalNot !ReplacementFor_inf
<operator>.logicalNot !ReplacementFor_outf
<operator>.lessThan index<\012ReplacementFor_number
<operator>.postIncrement index++
<operator>.subtraction 0x11cd+5035-0x2577
fopen fopen("\x69\x6e\x70\x75\x74\x2e\x74\x78\x74",\012"\x72")
printf printf(\012"\x45\x72\x72\x6f\x72\x20\x6f\x70\x65\x6e\x69\x6e\x67\x20\x74\x68\x65\x20\x69\x6e\x70\x75\x74\x20\x66\x69\x6c\x65" "\n"\012)
RETURN return-(0x1cca+284-0x1de5); return-(0x1cca+284-0x1de5);
fopen fopen(\012"\x6f\x75\x74\x70\x75\x74\x2e\x74\x78\x74","\x77")
printf printf(\012"\x45\x72\x72\x6f\x72\x20\x6f\x70\x65\x6e\x69\x6e\x67\x20\x74\x68\x65\x20\x6f\x75\x74\x70\x75\x74\x20\x66\x69\x6c\x65" "\n"\012)
RETURN return-(0x42f+1275-0x929); return-(0x42f+1275-0x929);
<operator>.subtraction 0x385+4481-0x1506
<operator>.assignment index=(0x11c1+2482-0x1b73)
memset memset(ReplacementFor_element_list \012(0x97b+2315-0x1286),ReplacementFor_MAX_ELEMENTS)
memset memset(\012ReplacementFor_combinations (0x9eb+4500-0x1b7f),ReplacementFor_MAX_COMBS)
memset memset\012(ReplacementFor_oppositions (0x9d6+3366-0x16fc),ReplacementFor_MAX_OPPS)
<operator>.assignment ReplacementFor_list_index=(0x140d+271-0x151c)
<operator>.assignment ReplacementFor_element=\012ReplacementFor_temp='\0'
fscanf fscanf(ReplacementFor_inf,"\x25\x64",&\012ReplacementFor_num_comb)
fscanf fscanf(ReplacementFor_inf,\012"\x25\x63",&ReplacementFor_temp)
fscanf fscanf(ReplacementFor_inf,"\x25\x64",&\012ReplacementFor_num_opps)
fscanf fscanf(ReplacementFor_inf,\012"\x25\x63",&ReplacementFor_temp)
fscanf fscanf(ReplacementFor_inf,"\x25\x64",&\012ReplacementFor_num_seq)
printf printf(\012"\x6e\x75\x6d\x62\x65\x72\x20\x6f\x66\x20\x65\x6c\x65\x6d\x65\x6e\x74\x73\x20\x69\x6e\x20\x74\x68\x65\x20\x73\x65\x71\x75\x65\x6e\x63\x65\x20\x3d\x20\x25\x64" "\n"\012,ReplacementFor_num_seq)
fscanf fscanf(ReplacementFor_inf,"\x25\x63",&\012ReplacementFor_temp)
<operator>.assignment ReplacementFor_inner_index=(0x585+3625-0x13ae)
fprintf fprintf(ReplacementFor_outf "\x43\x61\x73\x65\x20\x23\x25\x64\x3a\x20\x5b" index\012+(0xe47+710-0x110c))
fprintf fprintf(ReplacementFor_outf,"\x5d" "\n")
<operator>.minus -(0x1cca+284-0x1de5)
<operator>.minus -(0x42f+1275-0x929)
<operator>.addition 0x385+4481
<operator>.lessThan ReplacementFor_inner_index<ReplacementFor_num_comb
<operator>.postIncrement ReplacementFor_inner_index++
<operator>.lessThan ReplacementFor_inner_index<ReplacementFor_num_opps
<operator>.postIncrement ReplacementFor_inner_index++
<operator>.lessThan ReplacementFor_inner_index<ReplacementFor_num_seq
<operator>.postIncrement ReplacementFor_inner_index++
<operator>.notEquals ReplacementFor_element_list[\012ReplacementFor_inner_index]!='\0'
<operator>.addition 0x11cd+5035
<operator>.subtraction 0x11c1+2482-0x1b73
<operator>.subtraction 0x97b+2315-0x1286
<operator>.subtraction 0x9eb+4500-0x1b7f
<operator>.subtraction 0x9d6+3366-0x16fc
<operator>.subtraction 0x140d+271-0x151c
<operator>.assignment ReplacementFor_temp='\0'
<operator>.assignment ReplacementFor_inner_index=(0x1d33+1263-0x2222)
fscanf fscanf(ReplacementFor_inf,"\x25\x63",&ReplacementFor_temp)
fscanf fscanf(\012ReplacementFor_inf "\x25\x63\x25\x63\x25\x63" &ReplacementFor_combinations[\012ReplacementFor_inner_index][(0x1429+2668-0x1e95)][(0xcab+3906-0x1bed)] &\012ReplacementFor_combinations[ReplacementFor_inner_index][(0x1498+3788-0x2364)][\012(0x1a0+2590-0xbbd)] &ReplacementFor_combinations[ReplacementFor_inner_index][\012(0x2d9+5259-0x1763)][(0x1086+4630-0x229b)])
printf printf(\012"\x63\x6f\x6d\x62\x69\x6e\x61\x74\x69\x6f\x6e\x73\x5b\x25\x64\x5d\x20\x3d\x20\x25\x63\x25\x63\x25\x63" "\n"\012 ReplacementFor_inner_index ReplacementFor_combinations[\012ReplacementFor_inner_index][(0x10f9+525-0x1306)][(0x51a+7690-0x2324)] \012ReplacementFor_combinations[ReplacementFor_inner_index][(0x6fd+4306-0x17cf)][\012(0x19e9+1600-0x2028)] ReplacementFor_combinations[ReplacementFor_inner_index][\012(0x492+8027-0x23ec)][(0x122d+2599-0x1c53)])
<operator>.assignment ReplacementFor_inner_index=(0xa0a+1723-0x10c5)
fscanf fscanf(ReplacementFor_inf,"\x25\x63",&ReplacementFor_temp)
fscanf fscanf(\012ReplacementFor_inf "\x25\x63\x25\x63" &ReplacementFor_oppositions[\012ReplacementFor_inner_index][(0x240a+569-0x2643)] &ReplacementFor_oppositions[\012ReplacementFor_inner_index][(0xe30+645-0x10b4)])
printf printf(\012"\x6f\x70\x70\x6f\x73\x69\x74\x69\x6f\x6e\x73\x5b\x25\x64\x5d\x20\x3d\x20\x25\x63\x25\x63" "\n"\012 ReplacementFor_inner_index ReplacementFor_oppositions[\012ReplacementFor_inner_index][(0x753+6675-0x2166)] ReplacementFor_oppositions[\012ReplacementFor_inner_index][(0x1c4+6514-0x1b35)])
<operator>.assignment ReplacementFor_inner_index=(0x1625+4246-0x26bb)
fscanf fscanf(ReplacementFor_inf,"\x25\x63",&ReplacementFor_element)
printf printf(\012"\x45\x6c\x65\x6d\x65\x6e\x74\x20\x72\x65\x61\x64\x20\x3d\x20\x25\x63" "\n",\012ReplacementFor_element)
<operator>.assignment ReplacementFor_opposed=(0x1f9+3456-0xf79)
<operator>.assignment ReplacementFor_combined=(0x580+7525-0x22e5)
<operator>.subtraction 0x585+3625-0x13ae
<operator>.addition index\012+(0xe47+710-0x110c)
fprintf fprintf(ReplacementFor_outf,"\x25\x63",\012ReplacementFor_element_list[ReplacementFor_inner_index])
<operator>.postIncrement ReplacementFor_inner_index++
<operator>.subtraction 0x1cca+284-0x1de5
<operator>.subtraction 0x42f+1275-0x929
<operator>.addition 0x11c1+2482
<operator>.addition 0x97b+2315
<operator>.addition 0x9eb+4500
<operator>.addition 0x9d6+3366
<operator>.addition 0x140d+271
<operator>.equals ReplacementFor_inner_index==(0xd00+1054-0x111e)
<operator>.addition 0x585+3625
<operator>.subtraction 0xe47+710-0x110c
<operator>.notEquals ReplacementFor_element_list[ReplacementFor_inner_index+(0x1b5+5749-0x1829)]!=\012'\0'
<operator>.addition 0x1cca+284
<operator>.addition 0x42f+1275
<operator>.subtraction 0x1d33+1263-0x2222
<operator>.subtraction 0xa0a+1723-0x10c5
<operator>.subtraction 0x1625+4246-0x26bb
<operator>.subtraction 0x1f9+3456-0xf79
<operator>.subtraction 0x580+7525-0x22e5
<operator>.assignment ReplacementFor_element_list[\012ReplacementFor_list_index]=ReplacementFor_element
printf printf(\012"\x65\x6c\x65\x6d\x65\x6e\x74\x5f\x6c\x69\x73\x74\x20\x3d\x20\x25\x73" "\n",\012ReplacementFor_element_list)
<operator>.assignmentPlus ReplacementFor_list_index+=(0x822+7080-0x23c9)
<operator>.addition 0xe47+710
fprintf fprintf(ReplacementFor_outf,"\x2c\x20")
<operator>.addition 0x1d33+1263
<operator>.subtraction 0x51a+7690-0x2324
<operator>.subtraction 0x19e9+1600-0x2028
<operator>.subtraction 0x122d+2599-0x1c53
<operator>.addition 0xa0a+1723
<operator>.subtraction 0x753+6675-0x2166
<operator>.subtraction 0x1c4+6514-0x1b35
<operator>.addition 0x1625+4246
<operator>.addition 0x1f9+3456
<operator>.addition 0x580+7525
<operator>.subtraction 0xd00+1054-0x111e
<operator>.assignment ReplacementFor_temp=ReplacementFor_element_list[ReplacementFor_list_index-\012(0x95c+6138-0x2155)]
printf printf(\012"\x65\x6c\x65\x6d\x65\x6e\x74\x5f\x6c\x69\x73\x74\x5b\x69\x6e\x64\x65\x78\x20\x2d\x20\x31\x5d\x20\x3d\x20\x25\x63" "\n"\012,ReplacementFor_temp)
<operator>.assignment ReplacementFor_comb_element=\012ReplacementFor_findCombinationElement(ReplacementFor_temp,ReplacementFor_element\012)
printf printf(\012"\x63\x6f\x6d\x62\x69\x6e\x61\x74\x69\x6f\x6e\x20\x65\x6c\x65\x6d\x65\x6e\x74\x20\x3d\x20\x25\x63" "\n"\012,ReplacementFor_comb_element)
<operator>.assignment ReplacementFor_opp_index\012=ReplacementFor_findOppositIndex(ReplacementFor_element)
printf printf(\012"\x6f\x70\x70\x6f\x73\x69\x74\x65\x20\x69\x6e\x64\x65\x78\x20\x3d\x20\x25\x64" "\n"\012,ReplacementFor_opp_index)
printf printf(\012"\x6f\x70\x70\x6f\x73\x65\x64\x20\x3d\x20\x25\x64\x2c\x20\x63\x6f\x6d\x62\x69\x6e\x65\x64\x20\x3d\x20\x25\x64" "\n"\012,ReplacementFor_opposed,ReplacementFor_combined)
printf printf(\012"\x65\x6c\x65\x6d\x65\x6e\x74\x20\x6c\x69\x73\x74\x20\x3d\x20\x25\x73" "\n",\012ReplacementFor_element_list)
<operator>.subtraction 0xcab+3906-0x1bed
<operator>.subtraction 0x1a0+2590-0xbbd
<operator>.subtraction 0x1086+4630-0x229b
<operator>.subtraction 0x10f9+525-0x1306
<operator>.addition 0x51a+7690
<operator>.subtraction 0x6fd+4306-0x17cf
<operator>.addition 0x19e9+1600
<operator>.subtraction 0x492+8027-0x23ec
<operator>.addition 0x122d+2599
<operator>.subtraction 0x240a+569-0x2643
<operator>.subtraction 0xe30+645-0x10b4
<operator>.addition 0x753+6675
<operator>.addition 0x1c4+6514
<operator>.addition 0xd00+1054
<operator>.subtraction 0x822+7080-0x23c9
<operator>.notEquals ReplacementFor_comb_element!='\0'
<operator>.notEquals ReplacementFor_opp_index!=-(0xb8b+6908-0x2686)
<operator>.logicalAnd !ReplacementFor_opposed&&!\012ReplacementFor_combined
<operator>.addition ReplacementFor_inner_index+(0x1b5+5749-0x1829)
<operator>.subtraction 0x1429+2668-0x1e95
<operator>.addition 0xcab+3906
<operator>.subtraction 0x1498+3788-0x2364
<operator>.addition 0x1a0+2590
<operator>.subtraction 0x2d9+5259-0x1763
<operator>.addition 0x1086+4630
<operator>.addition 0x10f9+525
<operator>.addition 0x6fd+4306
<operator>.addition 0x492+8027
<operator>.addition 0x240a+569
<operator>.addition 0xe30+645
<operator>.addition 0x822+7080
ReplacementFor_findCombinationElement ReplacementFor_findCombinationElement(ReplacementFor_temp,ReplacementFor_element\012)
<operator>.assignment ReplacementFor_element_list[ReplacementFor_list_index-(0x172b+2807-0x2221)]=\012ReplacementFor_comb_element
<operator>.assignment ReplacementFor_combined=(0xb8f+3613-0x19ab)
<operator>.assignment ReplacementFor_element=ReplacementFor_comb_element
ReplacementFor_findOppositIndex ReplacementFor_findOppositIndex(ReplacementFor_element)
<operator>.assignment ReplacementFor_opind=(0xb04+2250-0x13ce)
<operator>.assignment ReplacementFor_list_index=ReplacementFor_opp_index
<operator>.assignment ReplacementFor_opposed=\012(0x129a+2228-0x1b4d)
<operator>.assignment ReplacementFor_element_list[ReplacementFor_list_index]=\012ReplacementFor_element
<operator>.assignmentPlus ReplacementFor_list_index+=(0xf7+9581-0x2663)
<operator>.subtraction 0x1b5+5749-0x1829
<operator>.addition 0x1429+2668
<operator>.addition 0x1498+3788
<operator>.addition 0x2d9+5259
<operator>.subtraction ReplacementFor_list_index-\012(0x95c+6138-0x2155)
<operator>.minus -(0xb8b+6908-0x2686)
<operator>.lessThan ReplacementFor_opind<ReplacementFor_list_index
<operator>.postIncrement ReplacementFor_opind++
<operator>.logicalNot !ReplacementFor_opposed
<operator>.logicalNot !\012ReplacementFor_combined
<operator>.addition 0x1b5+5749
<operator>.subtraction 0x95c+6138-0x2155
<operator>.subtraction 0xb8f+3613-0x19ab
<operator>.subtraction 0xb8b+6908-0x2686
<operator>.subtraction 0xb04+2250-0x13ce
<operator>.assignment ReplacementFor_opind=\012ReplacementFor_opp_index
<operator>.assignment ReplacementFor_element_list[ReplacementFor_opind]='\0'
<operator>.subtraction 0x129a+2228-0x1b4d
<operator>.subtraction 0xf7+9581-0x2663
<operator>.addition 0x95c+6138
<operator>.subtraction ReplacementFor_list_index-(0x172b+2807-0x2221)
<operator>.addition 0xb8f+3613
<operator>.addition 0xb8b+6908
<operator>.addition 0xb04+2250
<operator>.addition 0x129a+2228
<operator>.addition 0xf7+9581
<operator>.subtraction 0x172b+2807-0x2221
<operator>.addition 0x172b+2807
<operator>.addressOf &ReplacementFor_number
<operator>.addressOf &\012ReplacementFor_num_comb
<operator>.addressOf &ReplacementFor_temp
<operator>.addressOf &\012ReplacementFor_num_opps
<operator>.addressOf &ReplacementFor_temp
<operator>.addressOf &\012ReplacementFor_num_seq
<operator>.addressOf &\012ReplacementFor_temp
<operator>.indirectIndexAccess ReplacementFor_element_list[\012ReplacementFor_inner_index]
<operator>.addressOf &ReplacementFor_temp
<operator>.addressOf &ReplacementFor_combinations[\012ReplacementFor_inner_index][(0x1429+2668-0x1e95)][(0xcab+3906-0x1bed)]
<operator>.addressOf &\012ReplacementFor_combinations[ReplacementFor_inner_index][(0x1498+3788-0x2364)][\012(0x1a0+2590-0xbbd)]
<operator>.addressOf &ReplacementFor_combinations[ReplacementFor_inner_index][\012(0x2d9+5259-0x1763)][(0x1086+4630-0x229b)]
<operator>.indirectIndexAccess ReplacementFor_combinations[\012ReplacementFor_inner_index][(0x10f9+525-0x1306)][(0x51a+7690-0x2324)]
<operator>.indirectIndexAccess ReplacementFor_combinations[ReplacementFor_inner_index][(0x6fd+4306-0x17cf)][\012(0x19e9+1600-0x2028)]
<operator>.indirectIndexAccess ReplacementFor_combinations[ReplacementFor_inner_index][\012(0x492+8027-0x23ec)][(0x122d+2599-0x1c53)]
<operator>.addressOf &ReplacementFor_temp
<operator>.addressOf &ReplacementFor_oppositions[\012ReplacementFor_inner_index][(0x240a+569-0x2643)]
<operator>.addressOf &ReplacementFor_oppositions[\012ReplacementFor_inner_index][(0xe30+645-0x10b4)]
<operator>.indirectIndexAccess ReplacementFor_oppositions[\012ReplacementFor_inner_index][(0x753+6675-0x2166)]
<operator>.indirectIndexAccess ReplacementFor_oppositions[\012ReplacementFor_inner_index][(0x1c4+6514-0x1b35)]
<operator>.addressOf &ReplacementFor_element
<operator>.indirectIndexAccess ReplacementFor_element_list[ReplacementFor_inner_index]
<operator>.indirectIndexAccess ReplacementFor_combinations[\012ReplacementFor_inner_index][(0x1429+2668-0x1e95)][(0xcab+3906-0x1bed)]
<operator>.indirectIndexAccess ReplacementFor_combinations[ReplacementFor_inner_index][(0x1498+3788-0x2364)][\012(0x1a0+2590-0xbbd)]
<operator>.indirectIndexAccess ReplacementFor_combinations[ReplacementFor_inner_index][\012(0x2d9+5259-0x1763)][(0x1086+4630-0x229b)]
<operator>.indirectIndexAccess ReplacementFor_combinations[\012ReplacementFor_inner_index][(0x10f9+525-0x1306)]
<operator>.indirectIndexAccess ReplacementFor_combinations[ReplacementFor_inner_index][(0x6fd+4306-0x17cf)]
<operator>.indirectIndexAccess ReplacementFor_combinations[ReplacementFor_inner_index][\012(0x492+8027-0x23ec)]
<operator>.indirectIndexAccess ReplacementFor_oppositions[\012ReplacementFor_inner_index][(0x240a+569-0x2643)]
<operator>.indirectIndexAccess ReplacementFor_oppositions[\012ReplacementFor_inner_index][(0xe30+645-0x10b4)]
<operator>.indirectIndexAccess ReplacementFor_oppositions[\012ReplacementFor_inner_index]
<operator>.indirectIndexAccess ReplacementFor_oppositions[\012ReplacementFor_inner_index]
<operator>.indirectIndexAccess ReplacementFor_element_list[ReplacementFor_inner_index+(0x1b5+5749-0x1829)]
<operator>.indirectIndexAccess ReplacementFor_combinations[\012ReplacementFor_inner_index][(0x1429+2668-0x1e95)]
<operator>.indirectIndexAccess ReplacementFor_combinations[ReplacementFor_inner_index][(0x1498+3788-0x2364)]
<operator>.indirectIndexAccess ReplacementFor_combinations[ReplacementFor_inner_index][\012(0x2d9+5259-0x1763)]
<operator>.indirectIndexAccess ReplacementFor_combinations[\012ReplacementFor_inner_index]
<operator>.indirectIndexAccess ReplacementFor_combinations[ReplacementFor_inner_index]
<operator>.indirectIndexAccess ReplacementFor_combinations[ReplacementFor_inner_index]
<operator>.indirectIndexAccess ReplacementFor_oppositions[\012ReplacementFor_inner_index]
<operator>.indirectIndexAccess ReplacementFor_oppositions[\012ReplacementFor_inner_index]
<operator>.indirectIndexAccess ReplacementFor_element_list[\012ReplacementFor_list_index]
<operator>.indirectIndexAccess ReplacementFor_combinations[\012ReplacementFor_inner_index]
<operator>.indirectIndexAccess ReplacementFor_combinations[ReplacementFor_inner_index]
<operator>.indirectIndexAccess ReplacementFor_combinations[ReplacementFor_inner_index]
<operator>.indirectIndexAccess ReplacementFor_element_list[ReplacementFor_list_index-\012(0x95c+6138-0x2155)]
<operator>.indirectIndexAccess ReplacementFor_element_list[ReplacementFor_list_index-(0x172b+2807-0x2221)]
<operator>.indirectIndexAccess ReplacementFor_element_list[ReplacementFor_list_index]
<operator>.indirectIndexAccess ReplacementFor_element_list[ReplacementFor_opind]
>>>PDG&230 0->5 0->6 0->8 0->9 0->10 0->11 0->12 0->13 0->14 0->16 0->17 0->19 0->21 0->22 0->23 0->25 0->26 0->27 0->28 0->29 0->30 0->31 0->32 0->34 0->35 0->38 0->39 0->40 0->41 0->42 0->43 0->44 0->45 0->46 0->47 0->48 0->49 0->50 0->51 0->52 0->54 0->55 0->56 0->58 0->59 0->60 0->62 0->63 0->66 0->67 0->68 0->69 0->70 0->71 0->72 0->73 0->74 0->75 0->76 0->77 0->78 0->79 0->80 0->81 0->82 0->83 0->84 0->85 0->86 0->87 0->88 0->89 0->90 0->91 0->92 0->93 0->94 0->95 0->96 0->97 0->98 0->99 0->100 0->101 0->102 0->103 0->105 0->107 0->109 0->110 0->111 0->112 0->113 0->114 0->115 0->116 0->117 0->118 0->119 0->120 0->121 0->122 0->123 0->124 0->125 0->126 0->127 0->128 0->130 0->131 0->132 0->133 0->134 0->135 0->136 0->137 0->138 0->139 0->140 0->141 0->142 0->143 0->144 0->146 0->147 0->149 0->151 0->152 0->153 0->154 0->155 0->156 0->157 0->159 0->160 0->161 0->162 0->163 0->164 0->165 0->166 0->167 0->168 0->169 0->170 0->171 0->172 0->173 0->174 0->175 0->176 0->177 0->178 0->179 0->180 2->1 2->1 2->8 3->9 4->5 4->6 5->6 5->10 5->26 6->10 7->1 8->1 8->1 8->3 8->5 8->9 8->14 8->15 8->16 8->36 8->70 8->81 9->4 9->5 9->6 9->7 9->10 9->12 9->17 9->18 9->19 9->20 9->34 9->37 9->38 9->46 9->47 9->71 9->72 9->82 9->181 10->10 10->11 10->11 10->21 10->22 10->23 10->24 10->25 10->26 10->27 10->28 10->29 10->30 10->31 10->32 10->33 10->34 10->34 10->35 10->39 10->41 10->43 10->45 10->48 10->49 10->50 10->51 10->52 10->53 10->57 10->61 10->66 10->67 10->67 10->73 10->74 10->75 10->76 10->78 10->79 10->83 10->84 10->85 10->91 10->93 10->97 10->100 10->182 10->183 10->184 10->185 10->186 10->187 10->188 11->10 12->7 13->2 13->2 14->1 15->1 16->3 16->3 18->1 19->4 19->4 20->10 21->1 21->45 21->68 21->80 21->89 21->104 21->111 22->1 23->1 24->90 24->157 25->62 25->63 26->27 26->39 26->54 27->28 27->29 27->32 27->58 28->29 28->41 28->58 29->27 29->30 29->32 29->54 29->58 29->105 29->143 30->31 30->32 30->43 31->43 32->26 32->27 32->29 32->54 32->58 32->62 32->105 32->143 33->69 33->130 34->35 34->68 35->34 36->1 36->1 36->15 37->18 39->26 39->39 39->40 39->54 39->55 39->56 39->56 39->94 39->95 39->96 39->112 39->113 39->114 39->115 39->116 39->117 39->118 39->119 39->120 39->131 39->132 39->133 39->134 39->135 39->136 39->137 39->138 39->139 39->154 39->155 39->156 39->189 39->190 39->191 39->192 39->193 39->194 39->195 39->203 39->204 39->205 39->206 39->207 39->208 39->214 39->215 39->216 39->217 39->218 39->219 39->223 39->224 39->225 40->39 41->28 41->41 41->42 41->58 41->59 41->60 41->60 41->98 41->99 41->121 41->122 41->123 41->124 41->140 41->141 41->196 41->197 41->198 41->199 41->200 41->209 41->210 41->211 41->212 41->220 41->221 42->41 43->30 43->31 43->43 43->44 43->62 43->63 43->64 43->65 43->77 43->77 43->86 43->87 43->101 43->102 43->103 43->125 43->201 44->43 45->21 45->45 45->68 45->69 45->80 45->89 45->111 45->130 45->153 45->163 45->188 45->202 45->213 47->20 47->20 48->21 48->21 49->22 49->22 50->23 50->23 51->24 51->24 52->25 52->27 52->29 52->32 52->54 52->58 53->39 54->27 54->29 54->32 54->55 54->58 55->27 55->54 56->40 57->41 58->29 58->32 58->59 59->29 59->58 60->42 61->43 62->26 62->63 62->88 62->143 62->147 62->151 63->62 63->88 63->143 64->110 65->110 66->33 66->33 68->21 68->35 68->89 68->92 68->111 69->130 70->1 70->36 70->36 71->37 71->37 77->44 77->88 77->89 77->90 77->104 77->105 77->106 77->107 77->108 77->109 77->110 77->111 77->126 77->127 77->128 77->129 77->142 77->143 77->147 77->157 77->158 77->161 77->164 77->166 77->172 77->175 77->222 77->226 79->34 79->34 79->67 79->67 80->21 80->89 80->92 80->111 83->53 83->53 84->57 84->57 85->61 85->61 86->64 86->64 87->65 87->65 88->21 88->89 88->111 89->21 89->45 89->68 89->80 89->104 89->111 90->157 92->35 92->68 103->77 103->77 104->105 105->143 106->107 107->127 108->109 109->128 110->161 110->162 111->21 111->45 111->68 111->80 111->89 111->104 126->90 126->90 127->144 127->144 127->145 127->146 127->146 127->165 127->173 127->174 127->179 127->180 127->227 128->148 128->149 128->149 128->150 128->159 128->167 128->168 128->168 128->170 128->176 128->177 129->151 129->152 129->171 129->178 129->228 143->106 143->106 143->147 144->21 144->89 144->111 145->110 146->147 147->62 147->63 147->108 147->151 149->90 149->152 149->157 150->110 151->21 151->89 151->111 152->90 152->157 153->130 153->130 157->90 157->152 157->159 157->173 158->128 159->159 159->160 159->160 159->169 159->229 160->159 161->129 161->162 162->129 164->157 164->157 165->145 165->145 166->158 166->158 167->148 167->148 168->159 169->21 169->89 169->111 170->150 170->150 171->152 171->152 173->90 173->152 173->157 173->159 179->173 179->173
>>>Token int main ( ) { FILE * ReplacementFor_inf = fopen ( " \x69 \x6e \x70 \x75 \x74 \x2e \x74 \x78 \x74 " , " \x72 " ) ; if ( ! ReplacementFor_inf ) { printf ( " \x45 \x72 \x72 \x6f \x72 \x20 \x6f \x70 \x65 \x6e \x69 \x6e \x67 \x20 \x74 \x68 \x65 \x20 \x69 \x6e \x70 \x75 \x74 \x20 \x66 \x69 \x6c \x65 " " \n " ) ; return - ( 0x1cca + 284 - 0x1de5 ) ; } FILE * ReplacementFor_outf = fopen ( " \x6f \x75 \x74 \x70 \x75 \x74 \x2e \x74 \x78 \x74 " , " \x77 " ) ; if ( ! ReplacementFor_outf ) { printf ( " \x45 \x72 \x72 \x6f \x72 \x20 \x6f \x70 \x65 \x6e \x69 \x6e \x67 \x20 \x74 \x68 \x65 \x20 \x6f \x75 \x74 \x70 \x75 \x74 \x20 \x66 \x69 \x6c \x65 " " \n " ) ; return - ( 0x42f + 1275 - 0x929 ) ; } int index ; int ReplacementFor_inner_index ; char ReplacementFor_temp ; char ReplacementFor_element ; int ReplacementFor_number = ( 0x385 + 4481 - 0x1506 ) ; fscanf ( ReplacementFor_inf , " \x25 \x64 " , & ReplacementFor_number ) ; printf ( " \x6e \x75 \x6d \x62 \x65 \x72 \x20 \x6f \x66 \x20 \x63 \x61 \x73 \x65 \x73 \x20 \x3d \x20 \x25 \x64 " " \n " , ReplacementFor_number ) ; for ( index = ( 0x11c1 + 2482 - 0x1b73 ) ; index < ReplacementFor_number ; index ++ ) { memset ( ReplacementFor_element_list , ( 0x97b + 2315 - 0x1286 ) , ReplacementFor_MAX_ELEMENTS ) ; memset ( ReplacementFor_combinations , ( 0x9eb + 4500 - 0x1b7f ) , ReplacementFor_MAX_COMBS ) ; memset ( ReplacementFor_oppositions , ( 0x9d6 + 3366 - 0x16fc ) , ReplacementFor_MAX_OPPS ) ; ReplacementFor_list_index = ( 0x140d + 271 - 0x151c ) ; ReplacementFor_element = ReplacementFor_temp = ' \0 ' ; fscanf ( ReplacementFor_inf , " \x25 \x64 " , & ReplacementFor_num_comb ) ; for ( ReplacementFor_inner_index = ( 0x1d33 + 1263 - 0x2222 ) ; ReplacementFor_inner_index < ReplacementFor_num_comb ; ReplacementFor_inner_index ++ ) { fscanf ( ReplacementFor_inf , " \x25 \x63 " , & ReplacementFor_temp ) ; fscanf ( ReplacementFor_inf , " \x25 \x63 \x25 \x63 \x25 \x63 " , & ReplacementFor_combinations [ ReplacementFor_inner_index ] [ ( 0x1429 + 2668 - 0x1e95 ) ] [ ( 0xcab + 3906 - 0x1bed ) ] , & ReplacementFor_combinations [ ReplacementFor_inner_index ] [ ( 0x1498 + 3788 - 0x2364 ) ] [ ( 0x1a0 + 2590 - 0xbbd ) ] , & ReplacementFor_combinations [ ReplacementFor_inner_index ] [ ( 0x2d9 + 5259 - 0x1763 ) ] [ ( 0x1086 + 4630 - 0x229b ) ] ) ; printf ( " \x63 \x6f \x6d \x62 \x69 \x6e \x61 \x74 \x69 \x6f \x6e \x73 \x5b \x25 \x64 \x5d \x20 \x3d \x20 \x25 \x63 \x25 \x63 \x25 \x63 " " \n " , ReplacementFor_inner_index , ReplacementFor_combinations [ ReplacementFor_inner_index ] [ ( 0x10f9 + 525 - 0x1306 ) ] [ ( 0x51a + 7690 - 0x2324 ) ] , ReplacementFor_combinations [ ReplacementFor_inner_index ] [ ( 0x6fd + 4306 - 0x17cf ) ] [ ( 0x19e9 + 1600 - 0x2028 ) ] , ReplacementFor_combinations [ ReplacementFor_inner_index ] [ ( 0x492 + 8027 - 0x23ec ) ] [ ( 0x122d + 2599 - 0x1c53 ) ] ) ; } fscanf ( ReplacementFor_inf , " \x25 \x63 " , & ReplacementFor_temp ) ; fscanf ( ReplacementFor_inf , " \x25 \x64 " , & ReplacementFor_num_opps ) ; for ( ReplacementFor_inner_index = ( 0xa0a + 1723 - 0x10c5 ) ; ReplacementFor_inner_index < ReplacementFor_num_opps ; ReplacementFor_inner_index ++ ) { fscanf ( ReplacementFor_inf , " \x25 \x63 " , & ReplacementFor_temp ) ; fscanf ( ReplacementFor_inf , " \x25 \x63 \x25 \x63 " , & ReplacementFor_oppositions [ ReplacementFor_inner_index ] [ ( 0x240a + 569 - 0x2643 ) ] , & ReplacementFor_oppositions [ ReplacementFor_inner_index ] [ ( 0xe30 + 645 - 0x10b4 ) ] ) ; printf ( " \x6f \x70 \x70 \x6f \x73 \x69 \x74 \x69 \x6f \x6e \x73 \x5b \x25 \x64 \x5d \x20 \x3d \x20 \x25 \x63 \x25 \x63 " " \n " , ReplacementFor_inner_index , ReplacementFor_oppositions [ ReplacementFor_inner_index ] [ ( 0x753 + 6675 - 0x2166 ) ] , ReplacementFor_oppositions [ ReplacementFor_inner_index ] [ ( 0x1c4 + 6514 - 0x1b35 ) ] ) ; } fscanf ( ReplacementFor_inf , " \x25 \x63 " , & ReplacementFor_temp ) ; fscanf ( ReplacementFor_inf , " \x25 \x64 " , & ReplacementFor_num_seq ) ; printf ( " \x6e \x75 \x6d \x62 \x65 \x72 \x20 \x6f \x66 \x20 \x65 \x6c \x65 \x6d \x65 \x6e \x74 \x73 \x20 \x69 \x6e \x20 \x74 \x68 \x65 \x20 \x73 \x65 \x71 \x75 \x65 \x6e \x63 \x65 \x20 \x3d \x20 \x25 \x64 " " \n " , ReplacementFor_num_seq ) ; fscanf ( ReplacementFor_inf , " \x25 \x63 " , & ReplacementFor_temp ) ; for ( ReplacementFor_inner_index = ( 0x1625 + 4246 - 0x26bb ) ; ReplacementFor_inner_index < ReplacementFor_num_seq ; ReplacementFor_inner_index ++ ) { fscanf ( ReplacementFor_inf , " \x25 \x63 " , & ReplacementFor_element ) ; printf ( " \x45 \x6c \x65 \x6d \x65 \x6e \x74 \x20 \x72 \x65 \x61 \x64 \x20 \x3d \x20 \x25 \x63 " " \n " , ReplacementFor_element ) ; int ReplacementFor_opposed = ( 0x1f9 + 3456 - 0xf79 ) ; int ReplacementFor_combined = ( 0x580 + 7525 - 0x22e5 ) ; char ReplacementFor_comb_element ; if ( ReplacementFor_inner_index == ( 0xd00 + 1054 - 0x111e ) ) { ReplacementFor_element_list [ ReplacementFor_list_index ] = ReplacementFor_element ; printf ( " \x65 \x6c \x65 \x6d \x65 \x6e \x74 \x5f \x6c \x69 \x73 \x74 \x20 \x3d \x20 \x25 \x73 " " \n " , ReplacementFor_element_list ) ; ReplacementFor_list_index += ( 0x822 + 7080 - 0x23c9 ) ; } else { ReplacementFor_temp = ReplacementFor_element_list [ ReplacementFor_list_index - ( 0x95c + 6138 - 0x2155 ) ] ; printf ( " \x65 \x6c \x65 \x6d \x65 \x6e \x74 \x5f \x6c \x69 \x73 \x74 \x5b \x69 \x6e \x64 \x65 \x78 \x20 \x2d \x20 \x31 \x5d \x20 \x3d \x20 \x25 \x63 " " \n " , ReplacementFor_temp ) ; ReplacementFor_comb_element = ReplacementFor_findCombinationElement ( ReplacementFor_temp , ReplacementFor_element ) ; printf ( " \x63 \x6f \x6d \x62 \x69 \x6e \x61 \x74 \x69 \x6f \x6e \x20 \x65 \x6c \x65 \x6d \x65 \x6e \x74 \x20 \x3d \x20 \x25 \x63 " " \n " , ReplacementFor_comb_element ) ; if ( ReplacementFor_comb_element != ' \0 ' ) { ReplacementFor_element_list [ ReplacementFor_list_index - ( 0x172b + 2807 - 0x2221 ) ] = ReplacementFor_comb_element ; ReplacementFor_combined = ( 0xb8f + 3613 - 0x19ab ) ; ReplacementFor_element = ReplacementFor_comb_element ; } int ReplacementFor_opp_index = ReplacementFor_findOppositIndex ( ReplacementFor_element ) ; printf ( " \x6f \x70 \x70 \x6f \x73 \x69 \x74 \x65 \x20 \x69 \x6e \x64 \x65 \x78 \x20 \x3d \x20 \x25 \x64 " " \n " , ReplacementFor_opp_index ) ; if ( ReplacementFor_opp_index != - ( 0xb8b + 6908 - 0x2686 ) ) { int ReplacementFor_opind = ( 0xb04 + 2250 - 0x13ce ) ; for ( ReplacementFor_opind = ReplacementFor_opp_index ; ReplacementFor_opind < ReplacementFor_list_index ; ReplacementFor_opind ++ ) { ReplacementFor_element_list [ ReplacementFor_opind ] = ' \0 ' ; } ReplacementFor_list_index = ReplacementFor_opp_index ; ReplacementFor_opposed = ( 0x129a + 2228 - 0x1b4d ) ; } printf ( " \x6f \x70 \x70 \x6f \x73 \x65 \x64 \x20 \x3d \x20 \x25 \x64 \x2c \x20 \x63 \x6f \x6d \x62 \x69 \x6e \x65 \x64 \x20 \x3d \x20 \x25 \x64 " " \n " , ReplacementFor_opposed , ReplacementFor_combined ) ; if ( ! ReplacementFor_opposed && ! ReplacementFor_combined ) { ReplacementFor_element_list [ ReplacementFor_list_index ] = ReplacementFor_element ; ReplacementFor_list_index += ( 0xf7 + 9581 - 0x2663 ) ; } printf ( " \x65 \x6c \x65 \x6d \x65 \x6e \x74 \x20 \x6c \x69 \x73 \x74 \x20 \x3d \x20 \x25 \x73 " " \n " , ReplacementFor_element_list ) ; } } ReplacementFor_inner_index = ( 0x585 + 3625 - 0x13ae ) ; fprintf ( ReplacementFor_outf , " \x43 \x61 \x73 \x65 \x20 \x23 \x25 \x64 \x3a \x20 \x5b " , index + ( 0xe47 + 710 - 0x110c ) ) ; while ( ReplacementFor_element_list [ ReplacementFor_inner_index ] != ' \0 ' ) { fprintf ( ReplacementFor_outf , " \x25 \x63 " , ReplacementFor_element_list [ ReplacementFor_inner_index ] ) ; if ( ReplacementFor_element_list [ ReplacementFor_inner_index + ( 0x1b5 + 5749 - 0x1829 ) ] != ' \0 ' ) fprintf ( ReplacementFor_outf , " \x2c \x20 " ) ; ReplacementFor_inner_index ++ ; } fprintf ( ReplacementFor_outf , " \x5d " " \n " ) ; } return ( 0x11cd + 5035 - 0x2577 ) ; }
>>>Func
METHOD main
METHOD_RETURN int
PARAM int ReplacementFor_argc
PARAM char**ReplacementFor_argv
<operator>.assignment *\012ReplacementFor_filename=ReplacementFor_argv[(0xa92+5111-0x1e88)]
<operator>.assignment *data=fopen\012(ReplacementFor_filename,"\x72")
<operator>.assignment *ReplacementFor_str_buf=(char*)malloc((\012ReplacementFor_MAX_LEN+(0x2431+147-0x24c3))*sizeof(char))
fgets fgets(\012ReplacementFor_str_buf,ReplacementFor_MAX_LEN,data)
<operator>.assignment ReplacementFor_N=atoi(\012ReplacementFor_str_buf)
RETURN return(0x9f8+6182-0x221e); return(0x9f8+6182-0x221e);
<operator>.lessThan ReplacementFor_n<ReplacementFor_N
<operator>.postIncrement ReplacementFor_n++
<operator>.subtraction 0x9f8+6182-0x221e
fopen fopen\012(ReplacementFor_filename,"\x72")
<operator>.cast (char*)malloc((\012ReplacementFor_MAX_LEN+(0x2431+147-0x24c3))*sizeof(char))
atoi atoi(\012ReplacementFor_str_buf)
<operator>.assignment ReplacementFor_n=(0x1518+3060-0x210c)
<operator>.assignment ReplacementFor_total=(0x10d+1524-0x701)
fgets fgets(\012ReplacementFor_str_buf,ReplacementFor_MAX_LEN,data)
<operator>.assignment ReplacementFor_P=atoi(strtok\012(ReplacementFor_str_buf,"\x20"))
<operator>.assignment ReplacementFor_K=atoi(strtok(NULL,"\x20"))
<operator>.assignment L=\012atoi(strtok(NULL,"\x20"))
<operator>.assignment *ReplacementFor_keys=malloc(L*sizeof(int))
fgets fgets(\012ReplacementFor_str_buf,ReplacementFor_MAX_LEN,data)
<operator>.assignment ReplacementFor_keys[\012(0xb36+5961-0x227f)]=atoi(strtok(ReplacementFor_str_buf,"\x20"))
<operator>.assignment ReplacementFor_keys=ReplacementFor_Sort(ReplacementFor_keys,L)
printf printf(\012"\x43\x61\x73\x65\x20\x23\x25\x69\x3a\x20\x25\x69" "\n" ReplacementFor_n+\012(0x2c5+3928-0x121c),ReplacementFor_total)
<operator>.subtraction 0xa92+5111-0x1e88
malloc malloc((\012ReplacementFor_MAX_LEN+(0x2431+147-0x24c3))*sizeof(char))
<operator>.lessThan l<L
<operator>.postIncrement l++
<operator>.lessThan l<(L+(0x3ec+4911-0x171a))
<operator>.postIncrement l++
<operator>.addition 0x9f8+6182
<operator>.addition 0xa92+5111
<operator>.multiplication (\012ReplacementFor_MAX_LEN+(0x2431+147-0x24c3))*sizeof(char)
<operator>.subtraction 0x1518+3060-0x210c
<operator>.subtraction 0x10d+1524-0x701
atoi atoi(strtok\012(ReplacementFor_str_buf,"\x20"))
atoi atoi(strtok(NULL,"\x20"))
atoi atoi(strtok(NULL,"\x20"))
malloc malloc(L*sizeof(int))
atoi atoi(strtok(ReplacementFor_str_buf,"\x20"))
<operator>.assignment l=\012(0xe29+2470-0x17ce)
<operator>.assignment ReplacementFor_keys[l]=atoi(strtok(NULL,"\x20"))
ReplacementFor_Sort ReplacementFor_Sort(ReplacementFor_keys,L)
<operator>.assignment l=\012(0x12bd+3929-0x2215)
<operator>.assignmentPlus ReplacementFor_total+=\012ReplacementFor_keys[L-l]*(ceil((l-(0x20c+5802-0x18b5))/ReplacementFor_K)+\012(0x5a4+4594-0x1795))
<operator>.addition ReplacementFor_n+\012(0x2c5+3928-0x121c)
<operator>.addition ReplacementFor_MAX_LEN+(0x2431+147-0x24c3)
<operator>.sizeOf sizeof(char)
<operator>.addition 0x1518+3060
<operator>.addition 0x10d+1524
strtok strtok\012(ReplacementFor_str_buf,"\x20")
strtok strtok(NULL,"\x20")
strtok strtok(NULL,"\x20")
<operator>.multiplication L*sizeof(int)
<operator>.subtraction 0xb36+5961-0x227f
strtok strtok(ReplacementFor_str_buf,"\x20")
<operator>.addition L+(0x3ec+4911-0x171a)
<operator>.subtraction 0x2c5+3928-0x121c
<operator>.subtraction 0x2431+147-0x24c3
<operator>.sizeOf sizeof(int)
<operator>.addition 0xb36+5961
<operator>.subtraction 0xe29+2470-0x17ce
atoi atoi(strtok(NULL,"\x20"))
<operator>.subtraction 0x12bd+3929-0x2215
<operator>.subtraction 0x3ec+4911-0x171a
<operator>.multiplication ReplacementFor_keys[L-l]*(ceil((l-(0x20c+5802-0x18b5))/ReplacementFor_K)+\012(0x5a4+4594-0x1795))
<operator>.addition 0x2c5+3928
<operator>.addition 0x2431+147
<operator>.addition 0xe29+2470
strtok strtok(NULL,"\x20")
<operator>.addition 0x12bd+3929
<operator>.addition 0x3ec+4911
<operator>.addition ceil((l-(0x20c+5802-0x18b5))/ReplacementFor_K)+\012(0x5a4+4594-0x1795)
<operator>.subtraction L-l
ceil ceil((l-(0x20c+5802-0x18b5))/ReplacementFor_K)
<operator>.subtraction 0x5a4+4594-0x1795
<operator>.division (l-(0x20c+5802-0x18b5))/ReplacementFor_K
<operator>.addition 0x5a4+4594
<operator>.subtraction l-(0x20c+5802-0x18b5)
<operator>.subtraction 0x20c+5802-0x18b5
<operator>.addition 0x20c+5802
<operator>.indirectIndexAccess ReplacementFor_keys[\012(0xb36+5961-0x227f)]
<operator>.indirectIndexAccess ReplacementFor_keys[l]
<operator>.indirectIndexAccess ReplacementFor_keys[L-l]
>>>PDG&87 0->2 0->3 0->7 0->10 0->11 0->12 0->13 0->15 0->18 0->23 0->26 0->27 0->29 0->30 0->31 0->32 0->33 0->34 0->35 0->36 0->37 0->45 0->47 0->48 0->49 0->51 0->52 0->53 0->54 0->55 0->56 0->57 0->58 0->59 0->60 0->61 0->63 0->64 0->66 0->67 0->69 0->70 0->71 0->72 0->73 0->74 0->76 0->78 0->79 0->80 0->81 0->82 0->83 2->1 3->1 3->4 4->1 4->1 4->13 5->1 5->1 5->7 6->1 6->1 6->7 7->1 7->1 7->1 7->15 7->18 7->18 8->1 8->1 8->10 9->1 10->1 10->1 10->1 10->10 10->11 10->11 10->17 10->18 10->19 10->20 10->21 10->22 10->23 10->24 10->25 10->26 10->26 10->29 10->31 10->37 10->38 10->39 10->40 10->41 10->42 10->43 10->45 10->46 10->48 10->48 10->52 10->53 10->54 10->55 10->56 10->57 10->58 10->59 10->60 10->62 10->63 10->64 10->66 10->67 10->69 10->71 10->73 10->74 10->84 11->1 11->10 12->1 12->1 12->9 13->1 13->5 13->5 14->1 15->1 15->8 15->18 16->1 16->1 16->10 17->1 17->1 17->26 17->47 18->23 18->23 18->53 19->1 19->1 19->1 20->1 20->1 20->79 21->1 21->1 21->56 22->1 22->1 22->45 23->1 23->1 23->1 23->18 23->18 23->58 24->1 24->1 24->1 24->45 25->1 25->1 25->1 25->68 26->1 26->1 26->1 27->1 28->1 28->6 28->14 29->1 29->29 29->30 29->30 29->44 29->45 29->65 29->72 29->85 30->1 30->29 31->1 31->1 31->1 31->31 31->32 31->47 31->59 31->67 31->68 31->74 31->75 31->76 31->76 31->77 31->78 31->79 31->80 31->81 31->82 31->83 31->86 32->1 32->31 35->1 35->28 36->1 36->16 36->16 37->1 37->17 37->17 38->1 38->19 39->20 40->1 40->21 41->1 41->22 42->1 42->24 43->1 43->1 43->29 44->1 44->1 44->1 44->45 45->25 45->25 45->31 45->59 45->76 46->1 46->1 46->31 47->1 47->1 47->26 48->1 49->1 50->1 53->23 53->38 53->38 54->39 54->39 54->55 55->1 55->40 55->40 55->54 55->72 56->29 56->41 57->1 58->1 58->18 58->42 58->42 59->1 59->1 60->1 60->26 60->26 60->48 60->48 61->1 61->35 61->35 61->49 61->49 62->1 64->1 64->43 64->43 65->1 65->44 66->1 66->46 66->46 67->1 67->31 67->31 67->59 67->59 68->1 68->1 68->45 68->47 68->47 72->1 72->54 72->65 72->65 75->1 76->31 76->59 76->81 77->1 77->75 78->1 78->68 78->68 78->75 78->75 79->1 79->1 79->77 79->77 81->1 81->32 81->79 81->79 82->1 82->81 82->81
>>>Token int main ( int ReplacementFor_argc , char * * ReplacementFor_argv ) { char * ReplacementFor_filename = ReplacementFor_argv [ ( 0xa92 + 5111 - 0x1e88 ) ] ; FILE * data = fopen ( ReplacementFor_filename , " \x72 " ) ; char * ReplacementFor_str_buf = ( char * ) malloc ( ( ReplacementFor_MAX_LEN + ( 0x2431 + 147 - 0x24c3 ) ) * sizeof ( char ) ) ; fgets ( ReplacementFor_str_buf , ReplacementFor_MAX_LEN , data ) ; int ReplacementFor_N = atoi ( ReplacementFor_str_buf ) ; int ReplacementFor_n , ReplacementFor_P , ReplacementFor_K , L , l ; for ( ReplacementFor_n = ( 0x1518 + 3060 - 0x210c ) ; ReplacementFor_n < ReplacementFor_N ; ReplacementFor_n ++ ) { int ReplacementFor_total = ( 0x10d + 1524 - 0x701 ) ; fgets ( ReplacementFor_str_buf , ReplacementFor_MAX_LEN , data ) ; ReplacementFor_P = atoi ( strtok ( ReplacementFor_str_buf , " \x20 " ) ) ; ReplacementFor_K = atoi ( strtok ( NULL , " \x20 " ) ) ; L = atoi ( strtok ( NULL , " \x20 " ) ) ; int * ReplacementFor_keys = malloc ( L * sizeof ( int ) ) ; fgets ( ReplacementFor_str_buf , ReplacementFor_MAX_LEN , data ) ; ReplacementFor_keys [ ( 0xb36 + 5961 - 0x227f ) ] = atoi ( strtok ( ReplacementFor_str_buf , " \x20 " ) ) ; for ( l = ( 0xe29 + 2470 - 0x17ce ) ; l < L ; l ++ ) { ReplacementFor_keys [ l ] = atoi ( strtok ( NULL , " \x20 " ) ) ; } ReplacementFor_keys = ReplacementFor_Sort ( ReplacementFor_keys , L ) ; for ( l = ( 0x12bd + 3929 - 0x2215 ) ; l < ( L + ( 0x3ec + 4911 - 0x171a ) ) ; l ++ ) { ReplacementFor_total += ReplacementFor_keys [ L - l ] * ( ceil ( ( l - ( 0x20c + 5802 - 0x18b5 ) ) / ReplacementFor_K ) + ( 0x5a4 + 4594 - 0x1795 ) ) ; } printf ( " \x43 \x61 \x73 \x65 \x20 \x23 \x25 \x69 \x3a \x20 \x25 \x69 " " \n " , ReplacementFor_n + ( 0x2c5 + 3928 - 0x121c ) , ReplacementFor_total ) ; } return ( 0x9f8 + 6182 - 0x221e ) ; }
>>>Func
METHOD Move
METHOD_RETURN void
PARAM int ReplacementFor_x
PARAM int ReplacementFor_y
PARAM int*ReplacementFor_nx
PARAM int*\012ReplacementFor_ny
PARAM int ReplacementFor_N
PARAM int M
<operator>.assignment (*ReplacementFor_nx)=((*ReplacementFor_nx)+\012ReplacementFor_N)%ReplacementFor_N
<operator>.assignment (*ReplacementFor_ny)=((*ReplacementFor_ny)+M)\012%M
<operator>.equals ReplacementFor_a[\012ReplacementFor_x][ReplacementFor_y]==((char)(0x174+5030-0x149e))
<operator>.modulo ((*ReplacementFor_nx)+\012ReplacementFor_N)%ReplacementFor_N
<operator>.modulo ((*ReplacementFor_ny)+M)\012%M
<operator>.cast (char)(0x174+5030-0x149e)
<operator>.addition (*ReplacementFor_nx)+\012ReplacementFor_N
<operator>.addition (*ReplacementFor_ny)+M
<operator>.subtraction 0x174+5030-0x149e
<operator>.assignment (*ReplacementFor_nx)=\012ReplacementFor_x-(0x12d6+3707-0x2150)
<operator>.assignment (*ReplacementFor_ny)=ReplacementFor_y
<operator>.equals ReplacementFor_a[ReplacementFor_x]\012[ReplacementFor_y]==((char)(0x471+663-0x6db))
<operator>.addition 0x174+5030
<operator>.assignment (*ReplacementFor_nx)=ReplacementFor_x+(0x3fd+8419-0x24df)
<operator>.assignment (*\012ReplacementFor_ny)=ReplacementFor_y
<operator>.subtraction ReplacementFor_x-(0x12d6+3707-0x2150)
<operator>.cast (char)(0x471+663-0x6db)
<operator>.subtraction 0x12d6+3707-0x2150
<operator>.addition ReplacementFor_x+(0x3fd+8419-0x24df)
<operator>.subtraction 0x471+663-0x6db
<operator>.assignment (*ReplacementFor_nx)=ReplacementFor_x
<operator>.assignment (*\012ReplacementFor_ny)=ReplacementFor_y-(0x5f8+2257-0xec8)
<operator>.equals ReplacementFor_a[ReplacementFor_x][ReplacementFor_y]==\012((char)(0x1a81+2672-0x24c2))
<operator>.addition 0x12d6+3707
<operator>.subtraction 0x3fd+8419-0x24df
<operator>.addition 0x471+663
<operator>.assignment (*ReplacementFor_nx\012)=ReplacementFor_x
<operator>.assignment (*ReplacementFor_ny)=ReplacementFor_y+(0x1736+3602-0x2547)
<operator>.addition 0x3fd+8419
<operator>.subtraction ReplacementFor_y-(0x5f8+2257-0xec8)
<operator>.cast (char)(0x1a81+2672-0x24c2)
<operator>.subtraction 0x5f8+2257-0xec8
<operator>.addition ReplacementFor_y+(0x1736+3602-0x2547)
<operator>.subtraction 0x1a81+2672-0x24c2
<operator>.assignment (*ReplacementFor_nx)=ReplacementFor_x-(0x832+7346-0x24e3)
<operator>.assignment (*\012ReplacementFor_ny)=ReplacementFor_y+(0x1932+2689-0x23b2)
<operator>.addition 0x5f8+2257
<operator>.subtraction 0x1736+3602-0x2547
<operator>.addition 0x1a81+2672
<operator>.assignment (*\012ReplacementFor_nx)=ReplacementFor_x+(0x45b+8122-0x2414)
<operator>.assignment (*ReplacementFor_ny)=\012ReplacementFor_y-(0xa76+990-0xe53)
<operator>.assignment (*ReplacementFor_nx)=ReplacementFor_x-(0x63b+6317-0x1ee7)
<operator>.assignment (*\012ReplacementFor_ny)=ReplacementFor_y-(0x92c+460-0xaf7)
<operator>.addition 0x1736+3602
<operator>.subtraction ReplacementFor_x-(0x832+7346-0x24e3)
<operator>.addition ReplacementFor_y+(0x1932+2689-0x23b2)
<operator>.assignment (*ReplacementFor_nx)\012=ReplacementFor_x+(0x538+8626-0x26e9)
<operator>.assignment (*ReplacementFor_ny)=ReplacementFor_y+\012(0x876+5573-0x1e3a)
<operator>.subtraction 0x832+7346-0x24e3
<operator>.subtraction 0x1932+2689-0x23b2
<operator>.addition ReplacementFor_x+(0x45b+8122-0x2414)
<operator>.subtraction ReplacementFor_y-(0xa76+990-0xe53)
<operator>.subtraction ReplacementFor_x-(0x63b+6317-0x1ee7)
<operator>.subtraction ReplacementFor_y-(0x92c+460-0xaf7)
<operator>.addition 0x832+7346
<operator>.addition 0x1932+2689
<operator>.subtraction 0x45b+8122-0x2414
<operator>.subtraction 0xa76+990-0xe53
<operator>.subtraction 0x63b+6317-0x1ee7
<operator>.subtraction 0x92c+460-0xaf7
<operator>.addition ReplacementFor_x+(0x538+8626-0x26e9)
<operator>.addition ReplacementFor_y+\012(0x876+5573-0x1e3a)
<operator>.addition 0x45b+8122
<operator>.addition 0xa76+990
<operator>.addition 0x63b+6317
<operator>.addition 0x92c+460
<operator>.subtraction 0x538+8626-0x26e9
<operator>.subtraction 0x876+5573-0x1e3a
<operator>.addition 0x538+8626
<operator>.addition 0x876+5573
<operator>.indirectIndexAccess ReplacementFor_d[ReplacementFor_x][ReplacementFor_y]
<operator>.indirectIndexAccess ReplacementFor_d[ReplacementFor_x]
<operator>.indirection *ReplacementFor_nx
<operator>.indirection *ReplacementFor_ny
<operator>.indirectIndexAccess ReplacementFor_a[ReplacementFor_x]\012[ReplacementFor_y]
<operator>.indirection *ReplacementFor_nx
<operator>.indirection *\012ReplacementFor_ny
<operator>.indirectIndexAccess ReplacementFor_a[ReplacementFor_x]
UNKNOWN char char
<operator>.indirectIndexAccess ReplacementFor_d[\012ReplacementFor_x][ReplacementFor_y]
<operator>.indirectIndexAccess ReplacementFor_d[\012ReplacementFor_x]
<operator>.indirection *ReplacementFor_nx
<operator>.indirection *\012ReplacementFor_ny
<operator>.indirectIndexAccess ReplacementFor_a[ReplacementFor_x][ReplacementFor_y]
<operator>.indirection *ReplacementFor_nx
<operator>.indirection *ReplacementFor_ny
<operator>.indirectIndexAccess ReplacementFor_a[ReplacementFor_x]
UNKNOWN char char
<operator>.indirectIndexAccess ReplacementFor_d[ReplacementFor_x][\012ReplacementFor_y]
<operator>.indirectIndexAccess ReplacementFor_d[ReplacementFor_x]
<operator>.indirectIndexAccess ReplacementFor_d[ReplacementFor_x][\012ReplacementFor_y]
<operator>.indirection *ReplacementFor_nx
<operator>.indirection *\012ReplacementFor_ny
<operator>.indirectIndexAccess ReplacementFor_d[ReplacementFor_x]
<operator>.indirection *\012ReplacementFor_nx
<operator>.indirection *ReplacementFor_ny
<operator>.indirection *ReplacementFor_nx
<operator>.indirection *\012ReplacementFor_ny
<operator>.indirection *ReplacementFor_nx
<operator>.indirection *ReplacementFor_ny
>>>PDG&108 0->2 0->3 0->4 0->5 0->6 0->7 0->11 0->12 0->14 0->15 0->16 0->18 0->20 0->21 0->22 0->23 0->25 0->26 0->27 0->28 0->31 0->32 0->33 0->34 0->35 0->36 0->37 0->39 0->40 0->41 0->43 0->44 0->45 0->46 0->47 0->51 0->52 0->53 0->54 0->55 0->56 0->57 0->58 0->59 0->60 0->61 0->62 0->63 0->64 0->65 0->66 0->67 0->68 0->69 0->70 0->71 0->72 0->73 0->74 0->75 0->76 0->77 2->21 2->23 2->26 2->28 2->34 2->47 2->52 2->54 2->58 2->60 2->68 3->18 3->22 3->35 3->37 3->40 3->43 3->53 3->55 3->59 3->61 3->69 4->1 5->1 6->11 6->14 7->12 7->15 8->1 8->1 8->1 9->1 9->1 9->1 10->1 10->1 10->1 10->19 10->24 10->27 10->33 10->78 10->79 10->82 10->85 10->86 11->1 11->1 11->8 11->8 12->1 12->1 12->9 12->9 13->1 16->1 16->10 16->10 16->13 16->13 17->1 17->1 17->11 17->14 18->1 18->1 18->12 18->15 19->1 19->1 19->1 19->30 19->38 19->41 19->46 19->87 19->88 19->91 19->94 19->95 21->1 21->1 21->11 21->14 22->1 22->1 22->1 22->12 22->15 23->1 23->1 23->17 23->17 24->1 25->1 25->23 25->23 26->1 26->1 27->1 27->19 27->19 27->24 27->24 28->1 28->1 28->11 28->14 29->1 29->1 29->1 29->12 29->15 30->1 30->1 30->1 30->96 30->97 30->98 30->101 32->1 32->21 32->21 32->26 32->26 34->1 34->1 34->11 34->14 35->1 35->1 35->12 35->15 37->1 37->1 37->29 37->29 38->1 39->1 39->37 39->37 40->1 40->1 41->1 41->30 41->30 41->38 41->38 42->1 42->1 42->11 42->14 43->1 43->1 43->1 43->12 43->15 45->1 45->35 45->35 45->40 45->40 47->1 47->1 47->1 47->11 47->14 48->1 48->1 48->12 48->15 49->1 49->1 49->11 49->14 50->1 50->1 50->1 50->12 50->15 52->1 52->1 52->42 52->42 53->1 53->1 54->1 54->1 54->11 54->14 55->1 55->1 55->12 55->15 56->1 56->52 56->52 57->1 57->43 57->43 57->53 57->53 58->1 58->1 59->1 59->1 59->48 59->48 60->1 60->1 60->49 60->49 61->1 61->1 61->50 61->50 64->1 64->47 64->47 64->58 64->58 65->1 65->59 65->59 66->1 66->60 66->60 67->1 67->61 67->61 68->1 68->1 69->1 69->1 74->1 74->54 74->54 74->68 74->68 75->1 75->55 75->55 75->69 75->69 78->17 78->18 78->21 78->22 78->23 78->25 78->26 78->31 78->32 78->36 78->80 78->81 78->83 78->84 87->28 87->29 87->34 87->35 87->37 87->39 87->40 87->44 87->45 87->51 87->89 87->90 87->92 87->93 96->42 96->43 96->47 96->48 96->52 96->53 96->56 96->57 96->58 96->59 96->62 96->63 96->64 96->65 96->70 96->71 96->99 96->100 96->102 96->103 98->49 98->50 98->54 98->55 98->60 98->61 98->66 98->67 98->68 98->69 98->72 98->73 98->74 98->75 98->76 98->77 98->104 98->105 98->106 98->107
>>>Token void Move ( int ReplacementFor_x , int ReplacementFor_y , int * ReplacementFor_nx , int * ReplacementFor_ny , int ReplacementFor_N , int M ) { if ( ReplacementFor_a [ ReplacementFor_x ] [ ReplacementFor_y ] == ( ( char ) ( 0x174 + 5030 - 0x149e ) ) ) { if ( ReplacementFor_d [ ReplacementFor_x ] [ ReplacementFor_y ] ) { ( * ReplacementFor_nx ) = ReplacementFor_x - ( 0x12d6 + 3707 - 0x2150 ) ; ( * ReplacementFor_ny ) = ReplacementFor_y ; } else { ( * ReplacementFor_nx ) = ReplacementFor_x + ( 0x3fd + 8419 - 0x24df ) ; ( * ReplacementFor_ny ) = ReplacementFor_y ; } } else if ( ReplacementFor_a [ ReplacementFor_x ] [ ReplacementFor_y ] == ( ( char ) ( 0x471 + 663 - 0x6db ) ) ) { if ( ReplacementFor_d [ ReplacementFor_x ] [ ReplacementFor_y ] ) { ( * ReplacementFor_nx ) = ReplacementFor_x ; ( * ReplacementFor_ny ) = ReplacementFor_y - ( 0x5f8 + 2257 - 0xec8 ) ; } else { ( * ReplacementFor_nx ) = ReplacementFor_x ; ( * ReplacementFor_ny ) = ReplacementFor_y + ( 0x1736 + 3602 - 0x2547 ) ; } } else if ( ReplacementFor_a [ ReplacementFor_x ] [ ReplacementFor_y ] == ( ( char ) ( 0x1a81 + 2672 - 0x24c2 ) ) ) { if ( ReplacementFor_d [ ReplacementFor_x ] [ ReplacementFor_y ] ) { ( * ReplacementFor_nx ) = ReplacementFor_x - ( 0x832 + 7346 - 0x24e3 ) ; ( * ReplacementFor_ny ) = ReplacementFor_y + ( 0x1932 + 2689 - 0x23b2 ) ; } else { ( * ReplacementFor_nx ) = ReplacementFor_x + ( 0x45b + 8122 - 0x2414 ) ; ( * ReplacementFor_ny ) = ReplacementFor_y - ( 0xa76 + 990 - 0xe53 ) ; } } else { if ( ReplacementFor_d [ ReplacementFor_x ] [ ReplacementFor_y ] ) { ( * ReplacementFor_nx ) = ReplacementFor_x - ( 0x63b + 6317 - 0x1ee7 ) ; ( * ReplacementFor_ny ) = ReplacementFor_y - ( 0x92c + 460 - 0xaf7 ) ; } else { ( * ReplacementFor_nx ) = ReplacementFor_x + ( 0x538 + 8626 - 0x26e9 ) ; ( * ReplacementFor_ny ) = ReplacementFor_y + ( 0x876 + 5573 - 0x1e3a ) ; } } ( * ReplacementFor_nx ) = ( ( * ReplacementFor_nx ) + ReplacementFor_N ) % ReplacementFor_N ; ( * ReplacementFor_ny ) = ( ( * ReplacementFor_ny ) + M ) % M ; }
>>>Func
METHOD ReplacementFor_get_time
METHOD_RETURN double
PARAM void
gettimeofday gettimeofday(&ReplacementFor_tv,NULL)
RETURN return ReplacementFor_tv.tv_sec+\012ReplacementFor_tv.tv_usec*1e-6; return ReplacementFor_tv.tv_sec+\012ReplacementFor_tv.tv_usec*1e-6;
<operator>.addition ReplacementFor_tv.tv_sec+\012ReplacementFor_tv.tv_usec*1e-6
<operator>.multiplication ReplacementFor_tv.tv_usec*1e-6
>>>PDG&7 0->2 0->3 0->5 0->6 2->1 3->1 3->1 3->1 4->1 5->1 5->1 5->1 5->4 6->1 6->5 6->5
>>>Token double ReplacementFor_get_time ( void ) { struct timeval ReplacementFor_tv ; gettimeofday ( & ReplacementFor_tv , NULL ) ; return ReplacementFor_tv . tv_sec + ReplacementFor_tv . tv_usec * 1e-6 ; }
>>>Func
METHOD main
METHOD_RETURN int
printf printf(\012"\x45\x6e\x74\x65\x72\x20\x74\x68\x65\x20\x6e\x75\x6d\x62\x65\x72\x20\x6f\x66\x20\x65\x6c\x65\x6d\x65\x6e\x74\x73\x3a\x20"\012)
scanf scanf("\x25\x64",&ReplacementFor_n)
printf printf(\012"\x45\x6e\x74\x65\x72\x20\x74\x68\x65\x20\x65\x6c\x65\x6d\x65\x6e\x74\x73\x3a" "\n"\012)
ReplacementFor_mergesort ReplacementFor_mergesort(ReplacementFor_x,ReplacementFor_n)
printf printf(\012"\x53\x6f\x72\x74\x65\x64\x20\x61\x72\x72\x61\x79\x20\x69\x73\x20\x61\x73\x20\x73\x68\x6f\x77\x6e\x3a" "\n"\012)
RETURN return(0x192c+1173-0x1dc1); return(0x192c+1173-0x1dc1);
<operator>.lessThan i<ReplacementFor_n
<operator>.postIncrement i++
scanf scanf("\x25\x64",&\012ReplacementFor_x[i])
<operator>.lessThan i<ReplacementFor_n
<operator>.postIncrement i++
printf printf("\x25\x64\x20",\012ReplacementFor_x[i])
<operator>.subtraction 0x192c+1173-0x1dc1
<operator>.assignment i=(0xd07+1006-0x10f5)
<operator>.assignment i=(0x1bfd+210-0x1ccf)
<operator>.addition 0x192c+1173
<operator>.subtraction 0xd07+1006-0x10f5
<operator>.subtraction 0x1bfd+210-0x1ccf
<operator>.addition 0xd07+1006
<operator>.addition 0x1bfd+210
<operator>.addressOf &\012ReplacementFor_x[i]
<operator>.indirectIndexAccess ReplacementFor_x[i]
<operator>.indirectIndexAccess ReplacementFor_x[i]
>>>PDG&25 0->2 0->3 0->4 0->5 0->6 0->8 0->9 0->11 0->12 0->13 0->14 0->17 0->18 0->19 0->20 0->21 2->1 3->1 3->5 3->8 3->11 4->1 5->1 5->1 5->11 5->13 6->1 7->1 8->5 8->8 8->9 8->9 8->10 8->22 8->24 9->1 9->8 10->1 10->5 10->13 11->1 11->1 11->1 11->11 11->12 11->12 11->13 11->23 12->1 12->11 13->1 13->1 14->1 14->1 14->7 15->1 15->1 15->8 16->1 16->1 16->11 18->1 18->15 18->15 19->1 19->16 19->16
>>>Token int main ( ) { int i , ReplacementFor_n , ReplacementFor_x [ ( 0x1c57 + 2017 - 0x2424 ) ] ; printf ( " \x45 \x6e \x74 \x65 \x72 \x20 \x74 \x68 \x65 \x20 \x6e \x75 \x6d \x62 \x65 \x72 \x20 \x6f \x66 \x20 \x65 \x6c \x65 \x6d \x65 \x6e \x74 \x73 \x3a \x20 " ) ; scanf ( " \x25 \x64 " , & ReplacementFor_n ) ; printf ( " \x45 \x6e \x74 \x65 \x72 \x20 \x74 \x68 \x65 \x20 \x65 \x6c \x65 \x6d \x65 \x6e \x74 \x73 \x3a " " \n " ) ; for ( i = ( 0xd07 + 1006 - 0x10f5 ) ; i < ReplacementFor_n ; i ++ ) scanf ( " \x25 \x64 " , & ReplacementFor_x [ i ] ) ; ReplacementFor_mergesort ( ReplacementFor_x , ReplacementFor_n ) ; printf ( " \x53 \x6f \x72 \x74 \x65 \x64 \x20 \x61 \x72 \x72 \x61 \x79 \x20 \x69 \x73 \x20 \x61 \x73 \x20 \x73 \x68 \x6f \x77 \x6e \x3a " " \n " ) ; for ( i = ( 0x1bfd + 210 - 0x1ccf ) ; i < ReplacementFor_n ; i ++ ) printf ( " \x25 \x64 \x20 " , ReplacementFor_x [ i ] ) ; return ( 0x192c + 1173 - 0x1dc1 ) ; }
>>>Func
METHOD main
METHOD_RETURN int
fscanf fscanf(ReplacementFor_test,"\x25\x64",&\012ReplacementFor_numOfcase)
<operator>.assignment ReplacementFor_baseElement[(0x480+8183-0x246f)]={\012((char)(0x10d4+2568-0x1a8b)) ((char)(0x1760+2619-0x2144)) \012((char)(0x888+3482-0x15dd)) ((char)(0x1e3a+500-0x1fdc)) \012((char)(0x635+7639-0x23cb)) ((char)(0x70d+5775-0x1d49)) \012((char)(0xaa3+4662-0x1c95)) ((char)(0x7b0+2517-0x113f))}
<operator>.assignment ReplacementFor_numOfcombinaison=(0x382+6249-0x1beb)
<operator>.assignment ReplacementFor_numberOfOppesed=(0x15fa+2009-0x1dd3)
<operator>.assignment ReplacementFor_numberOfElement=(0x1059+4862-0x2357)
<operator>.assignment ReplacementFor_indice=(0x14e9+1395-0x1a5c)
RETURN return(0x1691+2277-0x1f76); return(0x1691+2277-0x1f76);
<operator>.equals (\012ReplacementFor_test=fopen(\012"\x42\x2d\x73\x6d\x61\x6c\x6c\x2d\x61\x74\x74\x65\x6d\x70\x74\x38\x2e\x69\x6e",\012"\x72"))==NULL
<operator>.lessThan i<ReplacementFor_numOfcase
<operator>.postIncrement i++
<operator>.subtraction 0x1691+2277-0x1f76
printf printf(\012"\x66\x69\x6c\x65\x20\x63\x61\x6e\x20\x62\x65\x20\x6f\x70\x65\x6e\x65\x64\x21\x20" "\n"\012)
exit exit((0x169+8154-0x2142))
<operator>.arrayInitializer {\012((char)(0x10d4+2568-0x1a8b)) ((char)(0x1760+2619-0x2144)) \012((char)(0x888+3482-0x15dd)) ((char)(0x1e3a+500-0x1fdc)) \012((char)(0x635+7639-0x23cb)) ((char)(0x70d+5775-0x1d49)) \012((char)(0xaa3+4662-0x1c95)) ((char)(0x7b0+2517-0x113f))}
<operator>.subtraction 0x382+6249-0x1beb
<operator>.subtraction 0x15fa+2009-0x1dd3
<operator>.subtraction 0x1059+4862-0x2357
<operator>.subtraction 0x14e9+1395-0x1a5c
<operator>.assignment i=\012(0x62b+4691-0x187e)
fscanf fscanf(ReplacementFor_test,\012"\x25\x64",&ReplacementFor_numOfcombinaison)
fscanf fscanf(ReplacementFor_test,\012"\x25\x64",&ReplacementFor_numberOfOppesed)
fscanf fscanf(ReplacementFor_test,\012"\x25\x64",&ReplacementFor_numberOfElement)
printf printf(\012"\x43\x61\x73\x65\x20\x23\x25\x64\x3a\x20\x5b" i+(0x25f+4360-0x1366))
printf printf("\x5d" "\n")
<operator>.assignment ReplacementFor_test=fopen(\012"\x42\x2d\x73\x6d\x61\x6c\x6c\x2d\x61\x74\x74\x65\x6d\x70\x74\x38\x2e\x69\x6e",\012"\x72")
<operator>.cast (char)(0x10d4+2568-0x1a8b)
<operator>.cast (char)(0x1760+2619-0x2144)
<operator>.cast (char)(0x888+3482-0x15dd)
<operator>.cast (char)(0x1e3a+500-0x1fdc)
<operator>.cast (char)(0x635+7639-0x23cb)
<operator>.cast (char)(0x70d+5775-0x1d49)
<operator>.cast (char)(0xaa3+4662-0x1c95)
<operator>.cast (char)(0x7b0+2517-0x113f)
<operator>.addition 0x382+6249
<operator>.addition 0x15fa+2009
<operator>.addition 0x1059+4862
<operator>.addition 0x14e9+1395
<operator>.greaterThan ReplacementFor_numOfcombinaison>\012(0x1665+673-0x1906)
<operator>.greaterThan ReplacementFor_numberOfOppesed>\012(0xcd5+1905-0x1446)
<operator>.greaterThan ReplacementFor_numberOfElement>\012(0xadb+627-0xd4e)
<operator>.greaterEqualsThan ReplacementFor_numberOfElement>=(0xaab+1399-0x1020)
<operator>.lessThan m<ReplacementFor_indice+(0xe88+2903-0x19de)
<operator>.postIncrement m++
<operator>.addition 0x1691+2277
fopen fopen(\012"\x42\x2d\x73\x6d\x61\x6c\x6c\x2d\x61\x74\x74\x65\x6d\x70\x74\x38\x2e\x69\x6e",\012"\x72")
<operator>.subtraction 0x169+8154-0x2142
<operator>.subtraction 0x10d4+2568-0x1a8b
<operator>.subtraction 0x1760+2619-0x2144
<operator>.subtraction 0x888+3482-0x15dd
<operator>.subtraction 0x1e3a+500-0x1fdc
<operator>.subtraction 0x635+7639-0x23cb
<operator>.subtraction 0x70d+5775-0x1d49
<operator>.subtraction 0xaa3+4662-0x1c95
<operator>.subtraction 0x7b0+2517-0x113f
<operator>.subtraction 0x62b+4691-0x187e
fscanf fscanf(ReplacementFor_test,"\x25\x73",ReplacementFor_element)
<operator>.assignment ReplacementFor_newElement[\012(0x12bd+2897-0x1e0e)]=ReplacementFor_element[(0x608+1599-0xc47)]
<operator>.assignment ReplacementFor_indice=(0x343+5537-0x18e4)
<operator>.assignment ReplacementFor_newElement[ReplacementFor_indice+\012(0xd9a+431-0xf48)]='\0'
<operator>.addition i+(0x25f+4360-0x1366)
<operator>.assignment m=(0x999+2518-0x136f)
printf printf(\012"\x25\x63",ReplacementFor_newElement[m])
<operator>.addition 0x169+8154
<operator>.addition 0x10d4+2568
<operator>.addition 0x1760+2619
<operator>.addition 0x888+3482
<operator>.addition 0x1e3a+500
<operator>.addition 0x635+7639
<operator>.addition 0x70d+5775
<operator>.addition 0xaa3+4662
<operator>.addition 0x7b0+2517
<operator>.addition 0x62b+4691
<operator>.subtraction 0x1665+673-0x1906
<operator>.lessThan ReplacementFor_j<\012ReplacementFor_numOfcombinaison
<operator>.postIncrement ReplacementFor_j++
<operator>.subtraction 0xcd5+1905-0x1446
<operator>.lessThan ReplacementFor_j<\012ReplacementFor_numberOfOppesed
<operator>.postIncrement ReplacementFor_j++
<operator>.subtraction 0xadb+627-0xd4e
<operator>.subtraction 0xaab+1399-0x1020
<operator>.lessThan ReplacementFor_k<ReplacementFor_numberOfElement
<operator>.postIncrement ReplacementFor_k++
<operator>.assignment ReplacementFor_indice=\012ReplacementFor_numberOfElement-(0x22+4543-0x11e0)
ReplacementFor_stpcpy ReplacementFor_stpcpy(\012ReplacementFor_newElement,ReplacementFor_element)
<operator>.subtraction 0x25f+4360-0x1366
<operator>.addition ReplacementFor_indice+(0xe88+2903-0x19de)
<operator>.lessThan m<ReplacementFor_indice
<operator>.addition 0x1665+673
<operator>.assignment ReplacementFor_j=(0xfbf+1791-0x16be)
fscanf fscanf(ReplacementFor_test,\012"\x25\x63",&ReplacementFor_temp)
fscanf fscanf(ReplacementFor_test,"\x25\x63",&\012ReplacementFor_temp)
<operator>.assignment ReplacementFor_listOfCombinaison[ReplacementFor_j].\012ReplacementFor_first=ReplacementFor_temp
fscanf fscanf(ReplacementFor_test,"\x25\x63",&\012ReplacementFor_temp)
<operator>.assignment ReplacementFor_listOfCombinaison[ReplacementFor_j].\012ReplacementFor_seconde=ReplacementFor_temp
fscanf fscanf(ReplacementFor_test,"\x25\x63"\012,&ReplacementFor_temp)
<operator>.assignment ReplacementFor_listOfCombinaison[ReplacementFor_j].\012ReplacementFor_become=ReplacementFor_temp
<operator>.addition 0xcd5+1905
<operator>.assignment ReplacementFor_j=(0x24c+402-0x3de)
fscanf fscanf(ReplacementFor_test,\012"\x25\x63",&ReplacementFor_temp)
fscanf fscanf(ReplacementFor_test,"\x25\x63",&\012ReplacementFor_temp)
<operator>.assignment ReplacementFor_listOfopposed[ReplacementFor_j].\012ReplacementFor_oppose1=ReplacementFor_temp
fscanf fscanf(ReplacementFor_test,"\x25\x63"\012,&ReplacementFor_temp)
<operator>.assignment ReplacementFor_listOfopposed[ReplacementFor_j].\012ReplacementFor_oppose2=ReplacementFor_temp
<operator>.addition 0xadb+627
<operator>.addition 0xaab+1399
<operator>.subtraction 0x343+5537-0x18e4
<operator>.assignment ReplacementFor_k=\012(0x11af+4533-0x2363)
<operator>.assignment ReplacementFor_curentElement=ReplacementFor_element[\012ReplacementFor_k]
<operator>.assignment ReplacementFor_size=ReplacementFor_indice+(0x1971+2643-0x23c3)
<operator>.addition 0x25f+4360
<operator>.subtraction 0x999+2518-0x136f
<operator>.subtraction 0xe88+2903-0x19de
printf printf(\012"\x2c\x20")
<operator>.subtraction 0x12bd+2897-0x1e0e
<operator>.subtraction 0x608+1599-0xc47
<operator>.addition 0x343+5537
<operator>.equals ReplacementFor_indice==-(0x15d3+4302-0x26a0)
<operator>.equals ReplacementFor_numOfcombinaison==(0xe49+4257-0x1eea)
<operator>.equals ReplacementFor_numberOfOppesed==(0x12da+477-0x14b7)
<operator>.greaterEqualsThan ReplacementFor_size>=(0x793+3179-0x13fc)
<operator>.addition ReplacementFor_indice+\012(0xd9a+431-0xf48)
<operator>.subtraction ReplacementFor_numberOfElement-(0x22+4543-0x11e0)
<operator>.addition 0x999+2518
<operator>.addition 0xe88+2903
<operator>.subtraction 0xfbf+1791-0x16be
<operator>.subtraction 0x24c+402-0x3de
<operator>.addition 0x12bd+2897
<operator>.addition 0x608+1599
<operator>.subtraction 0x11af+4533-0x2363
<operator>.assignment ReplacementFor_newElement[(0x8ef+5163-0x1d1a)]='\0'
<operator>.assignment ReplacementFor_indice=\012(0x57+4274-0x1109)
<operator>.assignment ReplacementFor_newElement[(0x1588+1001-0x1970)]='\0'
<operator>.assignment ReplacementFor_newElement[ReplacementFor_indice]=ReplacementFor_curentElement
<operator>.postIncrement ReplacementFor_indice++
<operator>.assignment ReplacementFor_newElement[ReplacementFor_indice]=\012ReplacementFor_curentElement
<operator>.addition ReplacementFor_indice+(0x1971+2643-0x23c3)
<operator>.subtraction 0xd9a+431-0xf48
<operator>.subtraction 0x22+4543-0x11e0
<operator>.addition 0xfbf+1791
<operator>.addition 0x24c+402
<operator>.addition 0x11af+4533
<operator>.minus -(0x15d3+4302-0x26a0)
<operator>.subtraction 0xe49+4257-0x1eea
<operator>.subtraction 0x12da+477-0x14b7
<operator>.subtraction 0x1971+2643-0x23c3
<operator>.subtraction 0x793+3179-0x13fc
<operator>.lessThan ReplacementFor_j<ReplacementFor_numberOfOppesed
<operator>.postIncrement ReplacementFor_j++
<operator>.addition 0xd9a+431
<operator>.addition 0x22+4543
<operator>.subtraction 0x15d3+4302-0x26a0
<operator>.subtraction 0x57+4274-0x1109
<operator>.addition 0xe49+4257
<operator>.lessThan ReplacementFor_j<ReplacementFor_numOfcombinaison
<operator>.postIncrement ReplacementFor_j++
<operator>.addition 0x12da+477
<operator>.addition 0x1971+2643
<operator>.addition 0x793+3179
<operator>.assignment ReplacementFor_j=\012(0x15e6+576-0x1826)
<operator>.addition 0x15d3+4302
<operator>.subtraction 0x8ef+5163-0x1d1a
<operator>.addition 0x57+4274
<operator>.subtraction 0x1588+1001-0x1970
<operator>.assignment ReplacementFor_j=\012(0x2419+280-0x2531)
<operator>.postIncrement ReplacementFor_indice++
<operator>.assignment ReplacementFor_newElement[ReplacementFor_indice]=ReplacementFor_curentElement
<operator>.lessThan l<\012ReplacementFor_size
<operator>.postIncrement l++
<operator>.equals ReplacementFor_indice==-\012(0xdb9+1955-0x155b)
<operator>.addition 0x8ef+5163
<operator>.addition 0x1588+1001
<operator>.equals ReplacementFor_listOfCombinaison[ReplacementFor_j].\012ReplacementFor_first==ReplacementFor_curentElement
<operator>.equals ReplacementFor_listOfCombinaison[ReplacementFor_j].ReplacementFor_seconde==\012ReplacementFor_curentElement
<operator>.subtraction 0x15e6+576-0x1826
<operator>.assignment l=(0x3d5+1860-0xb19)
<operator>.subtraction 0x2419+280-0x2531
<operator>.addition 0x15e6+576
<operator>.equals ReplacementFor_newElement[l]==\012ReplacementFor_listOfopposed[ReplacementFor_j].ReplacementFor_oppose2
<operator>.equals ReplacementFor_indice==-(0x17da+1838-0x1f07)
<operator>.equals ReplacementFor_newElement[\012l]==ReplacementFor_listOfopposed[ReplacementFor_j].ReplacementFor_oppose1
<operator>.equals ReplacementFor_indice==-(0xa92+1581-0x10be)
<operator>.minus -\012(0xdb9+1955-0x155b)
<operator>.addition 0x2419+280
<operator>.equals ReplacementFor_listOfCombinaison[ReplacementFor_j].ReplacementFor_seconde==\012ReplacementFor_newElement[ReplacementFor_indice]
<operator>.equals ReplacementFor_listOfCombinaison[\012ReplacementFor_j].ReplacementFor_first==ReplacementFor_newElement[\012ReplacementFor_indice]
<operator>.subtraction 0x3d5+1860-0xb19
<operator>.subtraction 0xdb9+1955-0x155b
<operator>.assignment ReplacementFor_newElement[\012ReplacementFor_indice]=ReplacementFor_listOfCombinaison[ReplacementFor_j].\012ReplacementFor_become
<operator>.assignment ReplacementFor_curentElement=ReplacementFor_newElement[\012ReplacementFor_indice]
<operator>.postDecrement ReplacementFor_indice--
<operator>.assignment ReplacementFor_newElement[ReplacementFor_indice]=\012ReplacementFor_listOfCombinaison[ReplacementFor_j].ReplacementFor_become
<operator>.assignment ReplacementFor_curentElement=ReplacementFor_newElement[ReplacementFor_indice]
<operator>.postDecrement ReplacementFor_indice--
<operator>.addition 0x3d5+1860
<operator>.lessThan ReplacementFor_h<ReplacementFor_size
<operator>.postIncrement ReplacementFor_h++
<operator>.minus -(0x17da+1838-0x1f07)
<operator>.lessThan ReplacementFor_h<ReplacementFor_size
<operator>.postIncrement ReplacementFor_h++
<operator>.minus -(0xa92+1581-0x10be)
<operator>.addition 0xdb9+1955
<operator>.assignment ReplacementFor_h=l
<operator>.subtraction 0x17da+1838-0x1f07
<operator>.assignment ReplacementFor_h=l
<operator>.subtraction 0xa92+1581-0x10be
<operator>.equals ReplacementFor_newElement[ReplacementFor_h]==ReplacementFor_listOfopposed[\012ReplacementFor_j].ReplacementFor_oppose1
<operator>.addition 0x17da+1838
<operator>.equals ReplacementFor_newElement[ReplacementFor_h]==ReplacementFor_listOfopposed[\012ReplacementFor_j].ReplacementFor_oppose2
<operator>.addition 0xa92+1581
<operator>.assignment ReplacementFor_indice=-\012(0x22a6+945-0x2656)
<operator>.assignment ReplacementFor_size=(0x186a+3292-0x2546)
<operator>.assignment ReplacementFor_indice=-\012(0x1f34+1236-0x2407)
<operator>.assignment ReplacementFor_size=(0x1413+236-0x14ff)
<operator>.minus -\012(0x22a6+945-0x2656)
<operator>.subtraction 0x186a+3292-0x2546
<operator>.minus -\012(0x1f34+1236-0x2407)
<operator>.subtraction 0x1413+236-0x14ff
<operator>.subtraction 0x22a6+945-0x2656
<operator>.addition 0x186a+3292
<operator>.subtraction 0x1f34+1236-0x2407
<operator>.addition 0x1413+236
<operator>.addition 0x22a6+945
<operator>.addition 0x1f34+1236
<operator>.addressOf &ReplacementFor_numOfcombinaison
<operator>.addressOf &ReplacementFor_numberOfOppesed
<operator>.addressOf &ReplacementFor_numberOfElement
<operator>.indirectIndexAccess ReplacementFor_newElement[\012(0x12bd+2897-0x1e0e)]
<operator>.indirectIndexAccess ReplacementFor_element[(0x608+1599-0xc47)]
<operator>.indirectIndexAccess ReplacementFor_newElement[ReplacementFor_indice+\012(0xd9a+431-0xf48)]
<operator>.indirectIndexAccess ReplacementFor_newElement[m]
<operator>.addressOf &ReplacementFor_temp
<operator>.addressOf &\012ReplacementFor_temp
<operator>.fieldAccess ReplacementFor_listOfCombinaison[ReplacementFor_j].\012ReplacementFor_first
<operator>.addressOf &\012ReplacementFor_temp
<operator>.fieldAccess ReplacementFor_listOfCombinaison[ReplacementFor_j].\012ReplacementFor_seconde
<operator>.addressOf &ReplacementFor_temp
<operator>.fieldAccess ReplacementFor_listOfCombinaison[ReplacementFor_j].\012ReplacementFor_become
<operator>.addressOf &ReplacementFor_temp
<operator>.addressOf &\012ReplacementFor_temp
<operator>.fieldAccess ReplacementFor_listOfopposed[ReplacementFor_j].\012ReplacementFor_oppose1
<operator>.addressOf &ReplacementFor_temp
<operator>.fieldAccess ReplacementFor_listOfopposed[ReplacementFor_j].\012ReplacementFor_oppose2
<operator>.indirectIndexAccess ReplacementFor_element[\012ReplacementFor_k]
<operator>.indirectIndexAccess ReplacementFor_listOfCombinaison[ReplacementFor_j]
FIELD_IDENTIFIER ReplacementFor_first ReplacementFor_first
<operator>.indirectIndexAccess ReplacementFor_listOfCombinaison[ReplacementFor_j]
FIELD_IDENTIFIER ReplacementFor_seconde ReplacementFor_seconde
<operator>.indirectIndexAccess ReplacementFor_listOfCombinaison[ReplacementFor_j]
FIELD_IDENTIFIER ReplacementFor_become ReplacementFor_become
<operator>.indirectIndexAccess ReplacementFor_listOfopposed[ReplacementFor_j]
FIELD_IDENTIFIER ReplacementFor_oppose1 ReplacementFor_oppose1
<operator>.indirectIndexAccess ReplacementFor_listOfopposed[ReplacementFor_j]
FIELD_IDENTIFIER ReplacementFor_oppose2 ReplacementFor_oppose2
<operator>.indirectIndexAccess ReplacementFor_newElement[(0x8ef+5163-0x1d1a)]
<operator>.indirectIndexAccess ReplacementFor_newElement[(0x1588+1001-0x1970)]
<operator>.indirectIndexAccess ReplacementFor_newElement[ReplacementFor_indice]
<operator>.indirectIndexAccess ReplacementFor_newElement[ReplacementFor_indice]
<operator>.indirectIndexAccess ReplacementFor_newElement[ReplacementFor_indice]
<operator>.fieldAccess ReplacementFor_listOfCombinaison[ReplacementFor_j].\012ReplacementFor_first
<operator>.fieldAccess ReplacementFor_listOfCombinaison[ReplacementFor_j].ReplacementFor_seconde
<operator>.indirectIndexAccess ReplacementFor_listOfCombinaison[ReplacementFor_j]
FIELD_IDENTIFIER ReplacementFor_first ReplacementFor_first
<operator>.indirectIndexAccess ReplacementFor_listOfCombinaison[ReplacementFor_j]
FIELD_IDENTIFIER ReplacementFor_seconde ReplacementFor_seconde
<operator>.indirectIndexAccess ReplacementFor_newElement[l]
<operator>.fieldAccess ReplacementFor_listOfopposed[ReplacementFor_j].ReplacementFor_oppose2
<operator>.indirectIndexAccess ReplacementFor_newElement[\012l]
<operator>.fieldAccess ReplacementFor_listOfopposed[ReplacementFor_j].ReplacementFor_oppose1
<operator>.fieldAccess ReplacementFor_listOfCombinaison[ReplacementFor_j].ReplacementFor_seconde
<operator>.indirectIndexAccess ReplacementFor_newElement[ReplacementFor_indice]
<operator>.fieldAccess ReplacementFor_listOfCombinaison[\012ReplacementFor_j].ReplacementFor_first
<operator>.indirectIndexAccess ReplacementFor_newElement[\012ReplacementFor_indice]
<operator>.indirectIndexAccess ReplacementFor_listOfopposed[ReplacementFor_j]
FIELD_IDENTIFIER ReplacementFor_oppose2 ReplacementFor_oppose2
<operator>.indirectIndexAccess ReplacementFor_listOfopposed[ReplacementFor_j]
FIELD_IDENTIFIER ReplacementFor_oppose1 ReplacementFor_oppose1
<operator>.indirectIndexAccess ReplacementFor_listOfCombinaison[ReplacementFor_j]
FIELD_IDENTIFIER ReplacementFor_seconde ReplacementFor_seconde
<operator>.indirectIndexAccess ReplacementFor_newElement[\012ReplacementFor_indice]
<operator>.fieldAccess ReplacementFor_listOfCombinaison[ReplacementFor_j].\012ReplacementFor_become
<operator>.indirectIndexAccess ReplacementFor_newElement[\012ReplacementFor_indice]
<operator>.indirectIndexAccess ReplacementFor_listOfCombinaison[\012ReplacementFor_j]
FIELD_IDENTIFIER ReplacementFor_first ReplacementFor_first
<operator>.indirectIndexAccess ReplacementFor_newElement[ReplacementFor_indice]
<operator>.fieldAccess ReplacementFor_listOfCombinaison[ReplacementFor_j].ReplacementFor_become
<operator>.indirectIndexAccess ReplacementFor_newElement[ReplacementFor_indice]
<operator>.indirectIndexAccess ReplacementFor_listOfCombinaison[ReplacementFor_j]
FIELD_IDENTIFIER ReplacementFor_become ReplacementFor_become
<operator>.indirectIndexAccess ReplacementFor_listOfCombinaison[ReplacementFor_j]
FIELD_IDENTIFIER ReplacementFor_become ReplacementFor_become
<operator>.indirectIndexAccess ReplacementFor_newElement[ReplacementFor_h]
<operator>.fieldAccess ReplacementFor_listOfopposed[\012ReplacementFor_j].ReplacementFor_oppose1
<operator>.indirectIndexAccess ReplacementFor_newElement[ReplacementFor_h]
<operator>.fieldAccess ReplacementFor_listOfopposed[\012ReplacementFor_j].ReplacementFor_oppose2
<operator>.indirectIndexAccess ReplacementFor_listOfopposed[\012ReplacementFor_j]
FIELD_IDENTIFIER ReplacementFor_oppose1 ReplacementFor_oppose1
<operator>.indirectIndexAccess ReplacementFor_listOfopposed[\012ReplacementFor_j]
FIELD_IDENTIFIER ReplacementFor_oppose2 ReplacementFor_oppose2
>>>PDG&300 0->2 0->9 0->10 0->11 0->12 0->13 0->16 0->17 0->18 0->19 0->21 0->22 0->23 0->24 0->25 0->35 0->36 0->37 0->38 0->39 0->40 0->41 0->42 0->43 0->44 0->45 0->46 0->47 0->48 0->49 0->50 0->51 0->52 0->53 0->54 0->55 0->56 0->57 0->60 0->61 0->63 0->64 0->65 0->66 0->67 0->68 0->69 0->70 0->71 0->72 0->73 0->74 0->75 0->76 0->77 0->78 0->79 0->80 0->81 0->82 0->83 0->85 0->86 0->87 0->88 0->89 0->91 0->92 0->93 0->94 0->95 0->96 0->97 0->98 0->100 0->101 0->102 0->103 0->104 0->105 0->106 0->107 0->110 0->111 0->112 0->113 0->114 0->115 0->116 0->117 0->118 0->119 0->120 0->121 0->122 0->123 0->124 0->125 0->126 0->127 0->128 0->129 0->130 0->131 0->133 0->134 0->135 0->136 0->137 0->138 0->139 0->140 0->141 0->142 0->144 0->145 0->146 0->147 0->148 0->149 0->150 0->151 0->152 0->153 0->154 0->155 0->156 0->157 0->158 0->159 0->161 0->162 0->163 0->164 0->166 0->167 0->168 0->169 0->170 0->171 0->172 0->173 0->174 0->175 0->177 0->178 0->180 0->182 0->184 0->187 0->188 0->191 0->194 0->195 0->196 0->197 0->199 0->200 0->202 0->203 0->204 0->205 0->206 0->208 0->210 0->216 0->218 0->219 0->220 0->221 0->222 0->223 0->224 2->1 2->1 2->1 2->10 2->21 3->1 3->1 3->1 4->1 4->1 4->1 4->21 4->39 5->1 5->1 5->1 5->22 5->40 6->1 6->1 6->1 6->23 6->41 7->1 7->1 7->1 8->1 9->1 9->1 9->1 9->13 9->14 9->47 9->64 10->1 10->1 10->1 10->10 10->11 10->11 10->21 10->22 10->23 10->24 10->24 10->25 10->39 10->40 10->41 10->42 10->43 10->61 10->61 10->62 10->74 10->77 10->80 10->81 10->86 10->87 10->89 10->98 10->105 10->106 10->111 10->112 10->113 10->124 10->125 10->225 10->226 10->227 11->1 11->10 12->1 12->1 12->8 13->1 14->1 15->1 15->1 15->1 15->1 15->1 15->1 15->1 15->1 15->3 15->3 15->3 15->3 15->3 15->3 15->3 15->3 16->1 16->4 16->4 17->1 17->5 17->5 18->1 18->6 18->6 19->1 19->7 19->7 20->1 20->1 20->10 21->1 21->1 21->22 21->39 21->75 21->91 21->119 21->155 22->1 22->1 22->23 22->40 22->78 22->100 22->120 22->148 23->1 23->1 23->1 23->21 23->41 23->42 23->57 23->82 23->123 24->1 24->1 25->1 26->1 26->2 26->9 27->1 28->1 29->1 30->1 31->1 32->1 33->1 34->1 39->1 39->1 39->1 39->21 39->75 39->75 39->90 39->119 39->126 39->140 40->1 40->1 40->1 40->22 40->78 40->78 40->99 40->120 40->127 40->141 41->1 41->1 41->42 41->57 42->1 42->1 42->58 42->59 42->60 42->82 42->82 42->84 42->85 42->107 42->108 42->115 42->116 42->117 42->122 42->123 42->123 42->128 42->129 42->130 42->138 42->139 42->142 42->150 42->151 42->228 42->229 42->230 43->1 43->1 43->1 43->43 43->44 43->63 43->87 43->88 43->88 43->113 43->125 43->231 44->1 44->43 46->9 46->9 46->26 46->26 47->1 47->14 47->14 48->1 48->15 48->15 48->27 48->27 49->1 49->15 49->15 49->28 49->28 50->1 50->15 50->15 50->29 50->29 51->1 51->15 51->15 51->30 51->30 52->1 52->15 52->15 52->31 52->31 53->1 53->15 53->15 53->32 53->32 54->1 54->15 54->15 54->33 54->33 55->1 55->15 55->15 55->34 55->34 56->1 56->20 56->20 57->1 57->1 57->1 57->21 57->58 57->85 57->109 58->1 58->1 58->1 58->85 59->1 59->1 59->43 59->87 59->88 59->118 59->122 60->1 60->1 60->85 61->1 62->1 62->1 62->43 63->1 63->1 63->85 74->1 74->39 74->39 75->1 75->1 75->1 75->21 75->39 75->75 75->76 75->76 75->91 75->92 75->93 75->94 75->95 75->96 75->97 75->119 75->232 75->233 75->234 75->235 75->236 75->237 75->238 75->245 75->246 75->247 75->248 75->249 75->250 76->1 76->75 77->1 77->40 77->40 78->1 78->1 78->1 78->22 78->40 78->78 78->79 78->79 78->100 78->101 78->102 78->103 78->104 78->120 78->239 78->240 78->241 78->242 78->243 78->251 78->252 78->253 78->254 79->1 79->78 80->1 80->41 80->41 81->1 81->42 81->42 82->1 82->1 82->1 82->23 82->41 82->82 82->83 82->83 82->109 82->118 82->143 82->152 82->161 82->244 83->1 83->82 84->1 84->1 84->43 84->87 84->88 85->1 85->1 85->1 85->57 85->58 85->63 85->109 85->179 85->181 85->185 85->186 85->190 85->193 85->207 85->209 86->1 86->24 86->24 86->61 86->61 87->1 87->1 88->1 88->43 88->44 88->87 88->114 90->1 90->1 90->75 91->1 91->92 91->92 91->93 91->94 91->95 91->96 91->97 91->100 91->101 91->102 91->103 91->104 92->91 92->93 92->94 92->94 92->95 92->96 92->97 92->100 92->101 92->102 92->103 92->104 93->1 94->1 94->1 94->91 94->92 94->93 94->95 94->96 94->96 94->97 94->100 94->101 94->102 94->103 94->104 95->1 96->1 96->1 96->22 96->91 96->91 96->92 96->93 96->97 96->100 96->101 96->102 96->103 96->104 97->1 97->1 99->1 99->1 99->78 100->1 100->91 100->92 100->93 100->101 100->101 100->102 100->103 100->104 101->1 101->1 101->91 101->92 101->93 101->100 101->102 101->103 101->103 101->104 102->1 103->1 103->1 103->23 103->91 103->92 103->93 103->100 103->100 103->101 103->102 103->104 104->1 104->1 107->1 107->59 107->59 108->1 108->1 108->82 109->1 109->1 109->1 109->134 109->136 109->173 110->1 110->1 110->121 112->1 112->62 112->62 113->1 113->43 113->43 113->87 113->87 114->1 115->1 116->1 118->1 118->1 118->43 118->87 118->88 118->110 118->119 118->120 118->122 118->131 118->132 118->133 118->134 118->135 118->137 118->144 118->145 118->153 118->154 118->157 118->162 118->163 118->164 118->166 118->170 118->171 118->172 118->180 118->191 118->194 118->255 118->256 118->257 119->1 119->1 119->1 119->21 119->39 119->135 119->136 119->155 119->155 119->165 119->177 119->184 119->258 120->1 120->1 120->1 120->22 120->40 120->110 120->121 120->137 120->146 120->147 120->148 120->158 120->159 121->1 121->1 121->1 121->148 121->160 121->168 121->175 121->178 122->1 123->1 123->1 123->23 123->41 123->84 123->84 126->1 126->90 126->90 127->1 127->99 127->99 130->1 130->108 130->108 131->1 131->1 131->85 132->1 132->1 132->43 132->87 132->88 132->118 132->122 133->1 133->1 133->85 134->1 134->1 134->1 134->85 134->185 135->1 135->43 135->87 135->88 135->110 135->118 135->122 135->137 135->170 135->180 136->1 136->1 136->1 136->85 136->185 137->1 138->1 138->122 138->122 139->1 139->123 139->123 143->1 143->118 144->1 144->119 144->119 145->1 145->120 145->120 146->1 146->110 146->110 146->137 146->137 147->1 147->121 147->121 148->1 148->1 148->1 148->22 148->40 148->120 148->149 148->168 148->170 148->176 148->183 148->187 148->188 148->195 148->202 149->1 149->148 152->1 152->143 152->143 153->1 153->132 153->132 155->1 155->1 155->1 155->21 155->39 155->119 155->155 155->156 155->173 155->260 155->262 155->263 156->1 156->155 160->1 160->1 160->148 162->1 164->1 165->1 165->1 165->155 166->1 166->43 166->87 166->88 166->110 166->118 166->122 166->137 166->170 166->180 166->191 166->194 167->1 167->1 167->1 167->85 167->185 168->1 168->1 168->1 168->169 168->179 168->180 168->196 168->198 168->199 168->203 168->204 168->205 168->208 168->266 168->267 168->274 168->275 169->1 169->168 170->1 170->1 170->43 170->87 170->88 170->118 170->122 170->148 170->149 170->180 173->1 173->174 173->174 173->185 173->261 173->264 173->265 173->270 173->271 173->278 173->279 174->1 174->156 174->166 174->167 174->167 174->173 174->186 174->259 174->272 174->273 174->283 174->284 175->1 175->160 175->160 176->1 176->1 176->168 177->1 177->165 177->165 179->1 179->1 179->1 179->85 179->196 179->203 180->1 180->1 180->170 180->181 180->182 180->182 180->201 180->206 180->210 180->268 180->269 180->276 180->277 181->1 181->1 181->1 181->85 181->199 181->205 182->1 182->1 182->168 182->169 182->170 182->180 183->1 183->170 185->1 185->1 185->85 185->165 185->174 185->174 185->177 185->184 185->189 185->190 185->191 185->261 185->264 185->265 185->280 185->281 185->282 185->288 185->289 186->1 186->1 186->85 186->156 186->165 186->166 186->167 186->177 186->184 186->192 186->193 186->194 186->259 186->285 186->286 186->287 186->290 186->291 187->1 187->176 187->176 188->1 188->183 188->183 189->1 189->85 189->186 189->190 190->1 190->1 190->1 190->173 191->1 191->43 191->87 191->88 191->110 191->118 191->122 191->137 191->166 191->170 191->180 191->194 192->1 192->85 192->185 192->193 193->1 193->1 193->1 193->173 194->1 194->43 194->87 194->88 194->110 194->118 194->122 194->137 194->166 194->170 194->180 194->191 196->1 196->1 196->1 196->168 196->197 196->199 196->207 196->292 196->293 196->296 196->297 197->1 197->196 198->1 198->180 199->1 199->1 199->1 199->168 199->200 199->209 199->294 199->295 199->298 199->299 200->1 200->199 201->1 201->182 203->1 203->1 203->196 204->1 204->198 204->198 205->1 205->1 205->199 206->1 206->201 206->201 207->1 207->1 207->1 207->85 207->196 207->197 207->209 207->211 207->212 207->215 207->216 207->219 207->220 207->223 209->1 209->1 209->1 209->85 209->199 209->200 209->207 209->213 209->214 209->217 209->218 209->221 209->222 209->224 211->1 211->1 211->180 212->1 212->1 212->1 212->168 212->199 213->1 213->1 213->182 214->1 214->1 214->1 214->168 215->1 215->211 216->1 216->212 216->212 217->1 217->213 218->1 218->214 218->214 219->1 219->215 219->215 221->1 221->217 221->217
>>>Token int main ( ) { FILE * ReplacementFor_test ; int ReplacementFor_numOfcase ; if ( ( ReplacementFor_test = fopen ( " \x42 \x2d \x73 \x6d \x61 \x6c \x6c \x2d \x61 \x74 \x74 \x65 \x6d \x70 \x74 \x38 \x2e \x69 \x6e " , " \x72 " ) ) == NULL ) { printf ( " \x66 \x69 \x6c \x65 \x20 \x63 \x61 \x6e \x20 \x62 \x65 \x20 \x6f \x70 \x65 \x6e \x65 \x64 \x21 \x20 " " \n " ) ; exit ( ( 0x169 + 8154 - 0x2142 ) ) ; } fscanf ( ReplacementFor_test , " \x25 \x64 " , & ReplacementFor_numOfcase ) ; char ReplacementFor_baseElement [ ( 0x480 + 8183 - 0x246f ) ] = { ( ( char ) ( 0x10d4 + 2568 - 0x1a8b ) ) , ( ( char ) ( 0x1760 + 2619 - 0x2144 ) ) , ( ( char ) ( 0x888 + 3482 - 0x15dd ) ) , ( ( char ) ( 0x1e3a + 500 - 0x1fdc ) ) , ( ( char ) ( 0x635 + 7639 - 0x23cb ) ) , ( ( char ) ( 0x70d + 5775 - 0x1d49 ) ) , ( ( char ) ( 0xaa3 + 4662 - 0x1c95 ) ) , ( ( char ) ( 0x7b0 + 2517 - 0x113f ) ) } ; int ReplacementFor_numOfcombinaison = ( 0x382 + 6249 - 0x1beb ) , ReplacementFor_numberOfOppesed = ( 0x15fa + 2009 - 0x1dd3 ) , ReplacementFor_numberOfElement = ( 0x1059 + 4862 - 0x2357 ) , i , ReplacementFor_j , ReplacementFor_k ; char ReplacementFor_temp ; ReplacementFor_combinaison ReplacementFor_listOfCombinaison [ ( 0x111d + 5012 - 0x248d ) ] ; ReplacementFor_opposed ReplacementFor_listOfopposed [ ( 0x1c9a + 127 - 0x1cfd ) ] ; char ReplacementFor_element [ ( 0xb38 + 5550 - 0x2082 ) ] ; int ReplacementFor_indice = ( 0x14e9 + 1395 - 0x1a5c ) ; for ( i = ( 0x62b + 4691 - 0x187e ) ; i < ReplacementFor_numOfcase ; i ++ ) { fscanf ( ReplacementFor_test , " \x25 \x64 " , & ReplacementFor_numOfcombinaison ) ; if ( ReplacementFor_numOfcombinaison > ( 0x1665 + 673 - 0x1906 ) ) { for ( ReplacementFor_j = ( 0xfbf + 1791 - 0x16be ) ; ReplacementFor_j < ReplacementFor_numOfcombinaison ; ReplacementFor_j ++ ) { fscanf ( ReplacementFor_test , " \x25 \x63 " , & ReplacementFor_temp ) ; fscanf ( ReplacementFor_test , " \x25 \x63 " , & ReplacementFor_temp ) ; ReplacementFor_listOfCombinaison [ ReplacementFor_j ] . ReplacementFor_first = ReplacementFor_temp ; fscanf ( ReplacementFor_test , " \x25 \x63 " , & ReplacementFor_temp ) ; ReplacementFor_listOfCombinaison [ ReplacementFor_j ] . ReplacementFor_seconde = ReplacementFor_temp ; fscanf ( ReplacementFor_test , " \x25 \x63 " , & ReplacementFor_temp ) ; ReplacementFor_listOfCombinaison [ ReplacementFor_j ] . ReplacementFor_become = ReplacementFor_temp ; } } fscanf ( ReplacementFor_test , " \x25 \x64 " , & ReplacementFor_numberOfOppesed ) ; if ( ReplacementFor_numberOfOppesed > ( 0xcd5 + 1905 - 0x1446 ) ) { for ( ReplacementFor_j = ( 0x24c + 402 - 0x3de ) ; ReplacementFor_j < ReplacementFor_numberOfOppesed ; ReplacementFor_j ++ ) { fscanf ( ReplacementFor_test , " \x25 \x63 " , & ReplacementFor_temp ) ; fscanf ( ReplacementFor_test , " \x25 \x63 " , & ReplacementFor_temp ) ; ReplacementFor_listOfopposed [ ReplacementFor_j ] . ReplacementFor_oppose1 = ReplacementFor_temp ; fscanf ( ReplacementFor_test , " \x25 \x63 " , & ReplacementFor_temp ) ; ReplacementFor_listOfopposed [ ReplacementFor_j ] . ReplacementFor_oppose2 = ReplacementFor_temp ; } } fscanf ( ReplacementFor_test , " \x25 \x64 " , & ReplacementFor_numberOfElement ) ; if ( ReplacementFor_numberOfElement > ( 0xadb + 627 - 0xd4e ) ) { fscanf ( ReplacementFor_test , " \x25 \x73 " , ReplacementFor_element ) ; } char ReplacementFor_newElement [ ReplacementFor_numberOfElement ] ; if ( ReplacementFor_numberOfElement >= ( 0xaab + 1399 - 0x1020 ) ) { ReplacementFor_newElement [ ( 0x12bd + 2897 - 0x1e0e ) ] = ReplacementFor_element [ ( 0x608 + 1599 - 0xc47 ) ] ; ReplacementFor_indice = ( 0x343 + 5537 - 0x18e4 ) ; for ( ReplacementFor_k = ( 0x11af + 4533 - 0x2363 ) ; ReplacementFor_k < ReplacementFor_numberOfElement ; ReplacementFor_k ++ ) { char ReplacementFor_curentElement = ReplacementFor_element [ ReplacementFor_k ] ; if ( ReplacementFor_indice == - ( 0x15d3 + 4302 - 0x26a0 ) ) { ReplacementFor_newElement [ ( 0x8ef + 5163 - 0x1d1a ) ] = ' \0 ' ; ReplacementFor_indice = ( 0x57 + 4274 - 0x1109 ) ; ReplacementFor_newElement [ ( 0x1588 + 1001 - 0x1970 ) ] = ' \0 ' ; ReplacementFor_newElement [ ReplacementFor_indice ] = ReplacementFor_curentElement ; continue ; } if ( ReplacementFor_numOfcombinaison == ( 0xe49 + 4257 - 0x1eea ) ) { ReplacementFor_indice ++ ; ReplacementFor_newElement [ ReplacementFor_indice ] = ReplacementFor_curentElement ; } else { ReplacementFor_retry : for ( ReplacementFor_j = ( 0x2419 + 280 - 0x2531 ) ; ReplacementFor_j < ReplacementFor_numOfcombinaison ; ReplacementFor_j ++ ) { if ( ReplacementFor_listOfCombinaison [ ReplacementFor_j ] . ReplacementFor_first == ReplacementFor_curentElement ) { if ( ReplacementFor_listOfCombinaison [ ReplacementFor_j ] . ReplacementFor_seconde == ReplacementFor_newElement [ ReplacementFor_indice ] ) { ReplacementFor_newElement [ ReplacementFor_indice ] = ReplacementFor_listOfCombinaison [ ReplacementFor_j ] . ReplacementFor_become ; ReplacementFor_curentElement = ReplacementFor_newElement [ ReplacementFor_indice ] ; ReplacementFor_indice -- ; goto ReplacementFor_retry ; } } if ( ReplacementFor_listOfCombinaison [ ReplacementFor_j ] . ReplacementFor_seconde == ReplacementFor_curentElement ) { if ( ReplacementFor_listOfCombinaison [ ReplacementFor_j ] . ReplacementFor_first == ReplacementFor_newElement [ ReplacementFor_indice ] ) { ReplacementFor_newElement [ ReplacementFor_indice ] = ReplacementFor_listOfCombinaison [ ReplacementFor_j ] . ReplacementFor_become ; ReplacementFor_curentElement = ReplacementFor_newElement [ ReplacementFor_indice ] ; ReplacementFor_indice -- ; goto ReplacementFor_retry ; } } ReplacementFor_indice ++ ; ReplacementFor_newElement [ ReplacementFor_indice ] = ReplacementFor_curentElement ; } } if ( ReplacementFor_numberOfOppesed == ( 0x12da + 477 - 0x14b7 ) ) continue ; int ReplacementFor_size = ReplacementFor_indice + ( 0x1971 + 2643 - 0x23c3 ) ; if ( ReplacementFor_size >= ( 0x793 + 3179 - 0x13fc ) ) { for ( ReplacementFor_j = ( 0x15e6 + 576 - 0x1826 ) ; ReplacementFor_j < ReplacementFor_numberOfOppesed ; ReplacementFor_j ++ ) { int l , ReplacementFor_h ; for ( l = ( 0x3d5 + 1860 - 0xb19 ) ; l < ReplacementFor_size ; l ++ ) { if ( ReplacementFor_newElement [ l ] == ReplacementFor_listOfopposed [ ReplacementFor_j ] . ReplacementFor_oppose2 ) { for ( ReplacementFor_h = l ; ReplacementFor_h < ReplacementFor_size ; ReplacementFor_h ++ ) { if ( ReplacementFor_newElement [ ReplacementFor_h ] == ReplacementFor_listOfopposed [ ReplacementFor_j ] . ReplacementFor_oppose1 ) { ReplacementFor_indice = - ( 0x22a6 + 945 - 0x2656 ) ; ReplacementFor_size = ( 0x186a + 3292 - 0x2546 ) ; break ; } } } if ( ReplacementFor_indice == - ( 0x17da + 1838 - 0x1f07 ) ) break ; if ( ReplacementFor_newElement [ l ] == ReplacementFor_listOfopposed [ ReplacementFor_j ] . ReplacementFor_oppose1 ) { for ( ReplacementFor_h = l ; ReplacementFor_h < ReplacementFor_size ; ReplacementFor_h ++ ) { if ( ReplacementFor_newElement [ ReplacementFor_h ] == ReplacementFor_listOfopposed [ ReplacementFor_j ] . ReplacementFor_oppose2 ) { ReplacementFor_indice = - ( 0x1f34 + 1236 - 0x2407 ) ; ReplacementFor_size = ( 0x1413 + 236 - 0x14ff ) ; break ; } } } if ( ReplacementFor_indice == - ( 0xa92 + 1581 - 0x10be ) ) break ; } if ( ReplacementFor_indice == - ( 0xdb9 + 1955 - 0x155b ) ) break ; } } } ReplacementFor_newElement [ ReplacementFor_indice + ( 0xd9a + 431 - 0xf48 ) ] = ' \0 ' ; } else { ReplacementFor_indice = ReplacementFor_numberOfElement - ( 0x22 + 4543 - 0x11e0 ) ; ReplacementFor_stpcpy ( ReplacementFor_newElement , ReplacementFor_element ) ; } printf ( " \x43 \x61 \x73 \x65 \x20 \x23 \x25 \x64 \x3a \x20 \x5b " , i + ( 0x25f + 4360 - 0x1366 ) ) ; int m ; for ( m = ( 0x999 + 2518 - 0x136f ) ; m < ReplacementFor_indice + ( 0xe88 + 2903 - 0x19de ) ; m ++ ) { printf ( " \x25 \x63 " , ReplacementFor_newElement [ m ] ) ; if ( m < ReplacementFor_indice ) printf ( " \x2c \x20 " ) ; } printf ( " \x5d " " \n " ) ; } return ( 0x1691 + 2277 - 0x1f76 ) ; }
>>>Func
METHOD ReplacementFor_solve
METHOD_RETURN void
<operator>.assignment ns=(0x1c94+372-0x1e08)
printf printf("\x5b")
printf printf("\x5d" "\n")
<operator>.lessThan i<\012ReplacementFor_n
<operator>.postIncrement i++
<operator>.lessThan i<ns
<operator>.postIncrement i++
<operator>.subtraction 0x1c94+372-0x1e08
<operator>.assignment i=(0x1350+4611-0x2553)
<operator>.assignment s[ns++]=sequence[i]
<operator>.assignment i=(0x12d1+2291-0x1bc4)
printf printf("\x25\x63",s[i])
<operator>.addition 0x1c94+372
<operator>.logicalAnd ns>(0x1af8+77-0x1b44)&&\012ReplacementFor_combine[(int)s[ns-(0x2fc+2743-0xdb1)]][(int)s[ns-\012(0xca7+2696-0x172e)]]
<operator>.greaterThan i>(0xa5c+332-0xba8)
<operator>.subtraction 0x1350+4611-0x2553
<operator>.assignment s[ns-(0xe54+3949-0x1dbf)]=ReplacementFor_combine[(int)s[\012ns-(0x19ac+1016-0x1da2)]][(int)s[ns-(0x190a+3377-0x263a)]]
<operator>.postDecrement ns--
<operator>.subtraction 0x12d1+2291-0x1bc4
printf printf("\x2c\x20")
<operator>.addition 0x1350+4611
<operator>.postIncrement ns++
<operator>.greaterThan ns>(0x1af8+77-0x1b44)
<operator>.addition 0x12d1+2291
<operator>.subtraction 0xa5c+332-0xba8
<operator>.subtraction 0x1af8+77-0x1b44
<operator>.cast (int)s[ns-\012(0xca7+2696-0x172e)]
<operator>.lessThan ReplacementFor_j<ns-(0x2c1+514-0x4c2)
<operator>.postIncrement ReplacementFor_j++
<operator>.addition 0xa5c+332
<operator>.addition 0x1af8+77
<operator>.cast (int)s[ns-(0x2fc+2743-0xdb1)]
<operator>.subtraction ns-(0xe54+3949-0x1dbf)
<operator>.cast (int)s[ns-(0x190a+3377-0x263a)]
<operator>.assignment ReplacementFor_j=(0xc43+3519-0x1a02)
<operator>.subtraction ns-\012(0xca7+2696-0x172e)
<operator>.subtraction 0xe54+3949-0x1dbf
<operator>.cast (int)s[\012ns-(0x19ac+1016-0x1da2)]
<operator>.subtraction ns-(0x2c1+514-0x4c2)
<operator>.assignment ns=(0x1651+3613-0x246e)
<operator>.subtraction ns-(0x2fc+2743-0xdb1)
<operator>.subtraction 0xca7+2696-0x172e
<operator>.addition 0xe54+3949
<operator>.subtraction ns-(0x190a+3377-0x263a)
<operator>.subtraction 0xc43+3519-0x1a02
<operator>.subtraction 0x2c1+514-0x4c2
<operator>.cast (int)\012sequence[i]
<operator>.subtraction 0x2fc+2743-0xdb1
<operator>.addition 0xca7+2696
<operator>.subtraction ns-(0x19ac+1016-0x1da2)
<operator>.subtraction 0x190a+3377-0x263a
<operator>.addition 0xc43+3519
<operator>.addition 0x2c1+514
<operator>.cast (int)s[ReplacementFor_j]
<operator>.subtraction 0x1651+3613-0x246e
<operator>.addition 0x2fc+2743
<operator>.subtraction 0x19ac+1016-0x1da2
<operator>.addition 0x190a+3377
<operator>.addition 0x1651+3613
<operator>.addition 0x19ac+1016
<operator>.indirectIndexAccess s[ns++]
<operator>.indirectIndexAccess sequence[i]
<operator>.indirectIndexAccess s[i]
<operator>.indirectIndexAccess ReplacementFor_combine[(int)s[ns-(0x2fc+2743-0xdb1)]][(int)s[ns-\012(0xca7+2696-0x172e)]]
<operator>.indirectIndexAccess ReplacementFor_combine[(int)s[ns-(0x2fc+2743-0xdb1)]]
<operator>.indirectIndexAccess s[ns-(0xe54+3949-0x1dbf)]
<operator>.indirectIndexAccess ReplacementFor_combine[(int)s[\012ns-(0x19ac+1016-0x1da2)]][(int)s[ns-(0x190a+3377-0x263a)]]
UNKNOWN int int
<operator>.indirectIndexAccess s[ns-\012(0xca7+2696-0x172e)]
<operator>.indirectIndexAccess ReplacementFor_combine[(int)s[\012ns-(0x19ac+1016-0x1da2)]]
UNKNOWN int int
<operator>.indirectIndexAccess s[ns-(0x2fc+2743-0xdb1)]
UNKNOWN int int
<operator>.indirectIndexAccess s[ns-(0x190a+3377-0x263a)]
<operator>.indirectIndexAccess ReplacementFor_opposed[(int)s[ReplacementFor_j]][(int)\012sequence[i]]
UNKNOWN int int
<operator>.indirectIndexAccess s[\012ns-(0x19ac+1016-0x1da2)]
<operator>.indirectIndexAccess ReplacementFor_opposed[(int)s[ReplacementFor_j]]
UNKNOWN int int
<operator>.indirectIndexAccess sequence[i]
UNKNOWN int int
<operator>.indirectIndexAccess s[ReplacementFor_j]
>>>PDG&84 0->3 0->4 0->5 0->6 0->7 0->8 0->9 0->13 0->14 0->16 0->17 0->19 0->20 0->21 0->22 0->23 0->24 0->25 0->26 0->27 0->29 0->30 0->31 0->32 0->34 0->37 0->38 0->40 0->42 0->43 0->44 0->45 0->46 0->47 0->49 0->50 0->51 0->52 0->53 0->54 0->56 0->57 0->58 0->59 0->60 0->61 2->1 2->1 2->7 2->23 3->1 4->1 5->1 5->1 5->5 5->6 5->6 5->11 5->15 5->23 5->24 5->27 5->32 5->62 5->63 6->1 6->5 7->1 7->1 7->1 7->7 7->8 7->13 7->16 7->16 7->26 7->31 7->64 8->1 8->7 9->1 9->2 9->2 10->1 10->1 10->5 11->1 11->1 11->1 12->1 12->1 12->7 13->1 13->1 15->1 15->1 15->1 15->18 15->19 15->29 15->34 15->35 15->36 15->38 15->39 15->40 15->44 15->45 15->46 15->47 15->51 15->52 15->53 15->54 15->58 15->59 15->61 15->67 15->68 15->71 15->74 15->75 15->77 15->78 16->1 16->1 16->8 16->21 17->1 17->10 17->10 18->1 18->1 18->1 19->1 19->7 19->23 20->1 20->12 20->12 21->1 23->24 24->1 24->15 24->15 24->28 24->33 24->34 24->37 24->40 24->42 24->42 24->43 24->49 24->50 24->57 24->65 24->66 24->69 24->70 24->72 24->73 26->1 26->16 26->16 27->1 27->24 27->24 28->1 29->1 29->1 29->1 29->29 29->30 29->30 29->40 29->47 29->48 29->54 29->55 29->76 29->79 29->80 29->81 29->82 29->83 30->1 30->29 33->1 34->1 34->51 35->1 36->1 36->1 36->29 37->1 37->34 37->40 38->1 38->34 38->34 39->1 40->1 40->7 40->23 40->29 40->29 41->1 41->1 41->40 42->1 42->37 43->1 43->37 43->37 45->1 45->19 46->1 46->36 46->36 47->1 47->40 47->40 48->1 49->1 49->42 49->42 51->1 51->45 52->1 52->45 52->45 55->1 56->1 56->41 56->41 58->1 58->51 58->51 76->41 76->56 76->60
>>>Token void ReplacementFor_solve ( ) { int i , ReplacementFor_j , ns ; char s [ ReplacementFor_MAX_N ] ; ns = ( 0x1c94 + 372 - 0x1e08 ) ; for ( i = ( 0x1350 + 4611 - 0x2553 ) ; i < ReplacementFor_n ; i ++ ) { s [ ns ++ ] = sequence [ i ] ; if ( ns > ( 0x1af8 + 77 - 0x1b44 ) && ReplacementFor_combine [ ( int ) s [ ns - ( 0x2fc + 2743 - 0xdb1 ) ] ] [ ( int ) s [ ns - ( 0xca7 + 2696 - 0x172e ) ] ] ) { s [ ns - ( 0xe54 + 3949 - 0x1dbf ) ] = ReplacementFor_combine [ ( int ) s [ ns - ( 0x19ac + 1016 - 0x1da2 ) ] ] [ ( int ) s [ ns - ( 0x190a + 3377 - 0x263a ) ] ] ; ns -- ; } else { for ( ReplacementFor_j = ( 0xc43 + 3519 - 0x1a02 ) ; ReplacementFor_j < ns - ( 0x2c1 + 514 - 0x4c2 ) ; ReplacementFor_j ++ ) if ( ReplacementFor_opposed [ ( int ) s [ ReplacementFor_j ] ] [ ( int ) sequence [ i ] ] ) ns = ( 0x1651 + 3613 - 0x246e ) ; } } printf ( " \x5b " ) ; for ( i = ( 0x12d1 + 2291 - 0x1bc4 ) ; i < ns ; i ++ ) { if ( i > ( 0xa5c + 332 - 0xba8 ) ) printf ( " \x2c \x20 " ) ; printf ( " \x25 \x63 " , s [ i ] ) ; } printf ( " \x5d " " \n " ) ; }
>>>Func
METHOD ReplacementFor_time_diff
METHOD_RETURN double
PARAM int i
gettimeofday gettimeofday\012(&ReplacementFor_tv,NULL)
RETURN return ReplacementFor_tv.tv_sec+ReplacementFor_tv.\012tv_usec*1e-6-ReplacementFor__tls_time_laps[i]; return ReplacementFor_tv.tv_sec+ReplacementFor_tv.\012tv_usec*1e-6-ReplacementFor__tls_time_laps[i];
<operator>.logicalNot !(\012(0x16ac+3544-0x2484)<=i&&i<ReplacementFor_SYS_LAP_TIME_MAX)
<operator>.subtraction ReplacementFor_tv.tv_sec+ReplacementFor_tv.\012tv_usec*1e-6-ReplacementFor__tls_time_laps[i]
error error()
<operator>.logicalAnd (0x16ac+3544-0x2484)<=i&&i<ReplacementFor_SYS_LAP_TIME_MAX
<operator>.addition ReplacementFor_tv.tv_sec+ReplacementFor_tv.\012tv_usec*1e-6
<operator>.lessEqualsThan (0x16ac+3544-0x2484)<=i
<operator>.lessThan i<ReplacementFor_SYS_LAP_TIME_MAX
<operator>.multiplication ReplacementFor_tv.\012tv_usec*1e-6
<operator>.subtraction 0x16ac+3544-0x2484
<operator>.addition 0x16ac+3544
>>>PDG&15 0->2 0->3 0->6 0->7 0->9 0->10 0->11 0->12 0->13 0->14 2->10 3->1 3->1 3->1 4->1 5->1 5->1 5->7 6->1 6->1 6->1 6->4 7->1 8->1 8->1 8->5 8->5 9->1 9->1 10->1 10->1 10->8 10->8 10->11 10->11 11->1 11->1 11->8 11->8 12->1 12->6 12->6 12->9 12->9 13->1 13->10 13->10
>>>Token double ReplacementFor_time_diff ( int i ) { struct timeval ReplacementFor_tv ; if ( ! ( ( 0x16ac + 3544 - 0x2484 ) <= i && i < ReplacementFor_SYS_LAP_TIME_MAX ) ) error ( ) ; gettimeofday ( & ReplacementFor_tv , NULL ) ; return ReplacementFor_tv . tv_sec + ReplacementFor_tv . tv_usec * 1e-6 - ReplacementFor__tls_time_laps [ i ] ; }
>>>Func
METHOD ReplacementFor_set_other_types
METHOD_RETURN void
PARAM ReplacementFor_multi*m
<operator>.assignment *\012ReplacementFor_data_addr=ReplacementFor_str_addr(&m->s)
<operator>.assignment **\012ReplacementFor_failed_c=(0x3a8+2578-0xdba)
<operator>.assignment m->i=strtol(ReplacementFor_data_addr \012ReplacementFor_failed_c (0x244+3604-0x1058))
<operator>.assignment ReplacementFor_failed_c=(0x121a+18-0x122c)
<operator>.assignment m->\012ReplacementFor_d=strtod(ReplacementFor_data_addr,ReplacementFor_failed_c)
<operator>.notEquals ReplacementFor_failed_c!=\012(0x637+2624-0x1077)
<operator>.notEquals ReplacementFor_failed_c!=(0x3d0+4321-0x14b1)
ReplacementFor_str_addr ReplacementFor_str_addr(&m->s)
<operator>.subtraction 0x3a8+2578-0xdba
strtol strtol(ReplacementFor_data_addr \012ReplacementFor_failed_c (0x244+3604-0x1058))
<operator>.assignment m->i=INT_MIN
<operator>.subtraction 0x121a+18-0x122c
strtod strtod(ReplacementFor_data_addr,ReplacementFor_failed_c)
<operator>.assignment m->ReplacementFor_d=DBL_MIN
<operator>.addition 0x3a8+2578
<operator>.subtraction 0x244+3604-0x1058
<operator>.subtraction 0x637+2624-0x1077
<operator>.addition 0x121a+18
<operator>.subtraction 0x3d0+4321-0x14b1
<operator>.addition 0x244+3604
<operator>.addition 0x637+2624
<operator>.addition 0x3d0+4321
<operator>.indirectFieldAccess m->i
<operator>.indirectFieldAccess m->ReplacementFor_d
FIELD_IDENTIFIER i i
FIELD_IDENTIFIER ReplacementFor_d ReplacementFor_d
>>>PDG&29 0->2 0->8 0->9 0->11 0->12 0->13 0->14 0->15 0->16 0->17 0->18 0->19 0->20 0->21 0->22 0->23 0->24 2->1 3->1 3->1 3->12 4->1 4->1 4->12 5->1 5->1 5->1 6->1 6->1 6->15 7->1 7->1 7->1 8->1 8->1 8->13 8->25 8->27 9->1 9->1 9->1 9->16 9->26 9->28 10->1 10->3 11->1 11->4 11->4 12->1 12->5 12->5 12->5 12->8 12->15 13->1 13->1 13->1 14->1 14->6 14->6 15->1 15->7 15->7 15->9 16->1 16->1 16->1 18->1 18->12 18->12 19->1 19->8 19->8 21->1 21->9 21->9
>>>Token void ReplacementFor_set_other_types ( ReplacementFor_multi * m ) { char * ReplacementFor_data_addr = ReplacementFor_str_addr ( & m -> s ) ; char * * ReplacementFor_failed_c = ( 0x3a8 + 2578 - 0xdba ) ; m -> i = strtol ( ReplacementFor_data_addr , ReplacementFor_failed_c , ( 0x244 + 3604 - 0x1058 ) ) ; if ( ReplacementFor_failed_c != ( 0x637 + 2624 - 0x1077 ) ) m -> i = INT_MIN ; ReplacementFor_failed_c = ( 0x121a + 18 - 0x122c ) ; m -> ReplacementFor_d = strtod ( ReplacementFor_data_addr , ReplacementFor_failed_c ) ; if ( ReplacementFor_failed_c != ( 0x3d0 + 4321 - 0x14b1 ) ) m -> ReplacementFor_d = DBL_MIN ; }
>>>Func
METHOD ReplacementFor_present
METHOD_RETURN int
PARAM char ReplacementFor_c
RETURN return(0x4e4+3762-0x1396); return(0x4e4+3762-0x1396);
<operator>.lessEqualsThan i<=ReplacementFor_last
<operator>.postIncrement i++
<operator>.subtraction 0x4e4+3762-0x1396
<operator>.assignment i=(0xa4+8897-0x2365)
<operator>.equals ReplacementFor_result[i]==ReplacementFor_c
RETURN return\012(0x188a+1225-0x1d52); return\012(0x188a+1225-0x1d52);
<operator>.addition 0x4e4+3762
<operator>.subtraction 0xa4+8897-0x2365
<operator>.subtraction 0x188a+1225-0x1d52
<operator>.addition 0xa4+8897
<operator>.addition 0x188a+1225
<operator>.indirectIndexAccess ReplacementFor_result[i]
>>>PDG&16 0->2 0->4 0->5 0->6 0->8 0->10 0->11 0->12 0->13 0->14 2->8 3->1 4->1 4->1 4->1 4->3 4->5 4->6 4->8 4->10 4->15 5->1 5->4 6->3 7->1 7->1 7->4 8->1 8->1 8->1 8->4 8->5 8->9 8->12 8->14 9->1 11->1 11->7 11->7 12->1 12->1 12->9
>>>Token int ReplacementFor_present ( char ReplacementFor_c ) { int i ; for ( i = ( 0xa4 + 8897 - 0x2365 ) ; i <= ReplacementFor_last ; i ++ ) if ( ReplacementFor_result [ i ] == ReplacementFor_c ) return ( 0x188a + 1225 - 0x1d52 ) ; return ( 0x4e4 + 3762 - 0x1396 ) ; }
>>>Func
METHOD ReplacementFor_avl_tree_lookup_node
METHOD_RETURN ReplacementFor_AVLTreeNode
PARAM ReplacementFor_AVLTree*ReplacementFor_tree
PARAM ReplacementFor_AVLTreeKey key
<operator>.assignment ReplacementFor_node=ReplacementFor_tree->ReplacementFor_root_node
RETURN return NULL; return NULL;
<operator>.notEquals ReplacementFor_node!=NULL
IDENTIFIER NULL return NULL;
<operator>.assignment ReplacementFor_diff=ReplacementFor_tree->\012ReplacementFor_compare_func(key,ReplacementFor_node->key)
<operator>.equals ReplacementFor_diff\012==(0x1341+244-0x1435)
ReplacementFor_compare_func ReplacementFor_tree->\012ReplacementFor_compare_func(key,ReplacementFor_node->key)
RETURN return ReplacementFor_node; return ReplacementFor_node;
<operator>.subtraction 0x1341+244-0x1435
IDENTIFIER ReplacementFor_node return ReplacementFor_node;
<operator>.addition 0x1341+244
<operator>.lessThan ReplacementFor_diff<\012(0x120c+4316-0x22e8)
<operator>.assignment ReplacementFor_node=ReplacementFor_node->\012ReplacementFor_children[ReplacementFor_AVL_TREE_NODE_LEFT]
<operator>.subtraction 0x120c+4316-0x22e8
<operator>.assignment ReplacementFor_node=ReplacementFor_node->ReplacementFor_children[\012ReplacementFor_AVL_TREE_NODE_RIGHT]
<operator>.addition 0x120c+4316
<operator>.indirectFieldAccess ReplacementFor_tree->\012ReplacementFor_compare_func
<operator>.indirectFieldAccess ReplacementFor_node->key
FIELD_IDENTIFIER ReplacementFor_compare_func ReplacementFor_compare_func
FIELD_IDENTIFIER key key
<operator>.indirectIndexAccess ReplacementFor_node->\012ReplacementFor_children[ReplacementFor_AVL_TREE_NODE_LEFT]
<operator>.indirectFieldAccess ReplacementFor_node->\012ReplacementFor_children
<operator>.indirectIndexAccess ReplacementFor_node->ReplacementFor_children[\012ReplacementFor_AVL_TREE_NODE_RIGHT]
FIELD_IDENTIFIER ReplacementFor_children ReplacementFor_children
<operator>.indirectFieldAccess ReplacementFor_node->ReplacementFor_children
FIELD_IDENTIFIER ReplacementFor_children ReplacementFor_children
>>>PDG&30 0->2 0->3 0->5 0->6 0->7 0->9 0->10 0->12 0->13 0->14 0->15 0->17 0->19 2->1 3->10 4->1 4->1 4->6 5->1 6->1 6->1 6->1 6->5 6->8 6->9 6->10 6->12 6->13 6->14 6->20 6->21 6->22 6->23 7->5 8->1 8->1 8->9 9->1 9->1 9->1 9->6 9->11 9->15 9->15 9->17 9->19 10->1 10->1 10->1 10->8 10->8 10->8 11->1 12->1 12->9 12->9 13->11 15->1 15->1 15->16 15->18 15->24 15->25 15->26 15->27 15->28 15->29 16->1 16->1 16->6 17->1 17->15 17->15 18->1 18->1 18->6
>>>Token ReplacementFor_AVLTreeNode * ReplacementFor_avl_tree_lookup_node ( ReplacementFor_AVLTree * ReplacementFor_tree , ReplacementFor_AVLTreeKey key ) { ReplacementFor_AVLTreeNode * ReplacementFor_node ; int ReplacementFor_diff ; ReplacementFor_node = ReplacementFor_tree -> ReplacementFor_root_node ; while ( ReplacementFor_node != NULL ) { ReplacementFor_diff = ReplacementFor_tree -> ReplacementFor_compare_func ( key , ReplacementFor_node -> key ) ; if ( ReplacementFor_diff == ( 0x1341 + 244 - 0x1435 ) ) { return ReplacementFor_node ; } else if ( ReplacementFor_diff < ( 0x120c + 4316 - 0x22e8 ) ) { ReplacementFor_node = ReplacementFor_node -> ReplacementFor_children [ ReplacementFor_AVL_TREE_NODE_LEFT ] ; } else { ReplacementFor_node = ReplacementFor_node -> ReplacementFor_children [ ReplacementFor_AVL_TREE_NODE_RIGHT ] ; } } return NULL ; }
>>>Func
METHOD ReplacementFor_chkcombine
METHOD_RETURN char
PARAM char ReplacementFor_c
PARAM char ReplacementFor_prevc
PARAM struct ReplacementFor_combine*ReplacementFor_cb
PARAM int ReplacementFor_cb_cnt
RETURN return(0x2064+995-0x2447); return(0x2064+995-0x2447);
<operator>.lessThan i<ReplacementFor_cb_cnt
<operator>.expressionList i++ ReplacementFor_cb++
<operator>.subtraction 0x2064+995-0x2447
<operator>.assignment i=(0xb96+6777-0x260f)
<operator>.postIncrement i++
<operator>.postIncrement ReplacementFor_cb++
<operator>.logicalAnd (\012ReplacementFor_c==ReplacementFor_cb->ReplacementFor_a)&&(ReplacementFor_prevc==\012ReplacementFor_cb->ReplacementFor_b)
<operator>.addition 0x2064+995
<operator>.subtraction 0xb96+6777-0x260f
RETURN return ReplacementFor_cb->ReplacementFor_z\012; return ReplacementFor_cb->ReplacementFor_z\012;
<operator>.addition 0xb96+6777
<operator>.equals ReplacementFor_c==ReplacementFor_cb->ReplacementFor_a
<operator>.equals ReplacementFor_prevc==\012ReplacementFor_cb->ReplacementFor_b
<operator>.logicalAnd (ReplacementFor_c==ReplacementFor_cb->ReplacementFor_b)&&(\012ReplacementFor_prevc==ReplacementFor_cb->ReplacementFor_a)
RETURN return \012ReplacementFor_cb->ReplacementFor_z; return \012ReplacementFor_cb->ReplacementFor_z;
<operator>.equals ReplacementFor_c==ReplacementFor_cb->ReplacementFor_b
<operator>.equals ReplacementFor_prevc==ReplacementFor_cb->ReplacementFor_a
<operator>.indirectFieldAccess ReplacementFor_cb->ReplacementFor_a
<operator>.indirectFieldAccess ReplacementFor_cb->ReplacementFor_b
<operator>.indirectFieldAccess ReplacementFor_cb->ReplacementFor_z
FIELD_IDENTIFIER ReplacementFor_a ReplacementFor_a
FIELD_IDENTIFIER ReplacementFor_b ReplacementFor_b
FIELD_IDENTIFIER ReplacementFor_z ReplacementFor_z
<operator>.indirectFieldAccess ReplacementFor_cb->ReplacementFor_b
<operator>.indirectFieldAccess ReplacementFor_cb->ReplacementFor_a
<operator>.indirectFieldAccess ReplacementFor_cb->ReplacementFor_z
FIELD_IDENTIFIER ReplacementFor_b ReplacementFor_b
FIELD_IDENTIFIER ReplacementFor_a ReplacementFor_a
FIELD_IDENTIFIER ReplacementFor_z ReplacementFor_z
>>>PDG&36 0->2 0->3 0->4 0->5 0->7 0->9 0->11 0->12 0->14 0->15 0->16 0->17 0->18 0->19 0->21 0->22 0->23 2->18 3->1 3->19 3->23 4->1 4->12 5->7 6->1 7->1 7->1 7->1 7->6 7->9 7->11 7->13 7->14 7->18 7->24 7->27 8->1 8->1 8->1 9->6 10->1 10->1 10->7 11->7 11->8 12->1 12->8 13->1 13->1 13->1 13->16 13->20 13->22 13->26 13->29 13->30 13->33 15->1 15->10 15->10 16->1 18->1 18->1 18->13 18->13 18->19 18->22 18->23 18->25 18->28 19->1 19->1 19->13 19->13 19->22 19->23 20->1 20->1 20->1 20->7 20->8 20->11 20->12 20->21 20->32 20->35 21->1 22->1 22->18 22->19 22->20 22->20 22->23 22->31 22->34 23->1 23->18 23->19 23->20 23->20
>>>Token char ReplacementFor_chkcombine ( char ReplacementFor_c , char ReplacementFor_prevc , struct ReplacementFor_combine * ReplacementFor_cb , int ReplacementFor_cb_cnt ) { int i ; for ( i = ( 0xb96 + 6777 - 0x260f ) ; i < ReplacementFor_cb_cnt ; i ++ , ReplacementFor_cb ++ ) { if ( ( ReplacementFor_c == ReplacementFor_cb -> ReplacementFor_a ) && ( ReplacementFor_prevc == ReplacementFor_cb -> ReplacementFor_b ) ) { return ReplacementFor_cb -> ReplacementFor_z ; } else if ( ( ReplacementFor_c == ReplacementFor_cb -> ReplacementFor_b ) && ( ReplacementFor_prevc == ReplacementFor_cb -> ReplacementFor_a ) ) { return ReplacementFor_cb -> ReplacementFor_z ; } } return ( 0x2064 + 995 - 0x2447 ) ; }
>>>Func
METHOD ReplacementFor_has_capability_cache
METHOD_RETURN bool
PARAM char const*ReplacementFor_file
PARAM struct ReplacementFor_fileinfo*ReplacementFor_f
<operator>.assignment ReplacementFor_b=ReplacementFor_has_capability(\012ReplacementFor_file)
RETURN return \012ReplacementFor_b; return \012ReplacementFor_b;
<operator>.equals ReplacementFor_f->stat.st_dev==\012ReplacementFor_unsupported_device
<operator>.logicalAnd !ReplacementFor_b&&ReplacementFor_errno_unsupported(\012errno)
IDENTIFIER ReplacementFor_b return \012ReplacementFor_b;
<operator>.assignment errno=ReplacementFor_ENOTSUP
RETURN return\012(0x1929+1667-0x1fac); return\012(0x1929+1667-0x1fac);
ReplacementFor_has_capability ReplacementFor_has_capability(\012ReplacementFor_file)
<operator>.assignment ReplacementFor_unsupported_device=ReplacementFor_f->stat.st_dev
<operator>.subtraction 0x1929+1667-0x1fac
<operator>.logicalNot !ReplacementFor_b
ReplacementFor_errno_unsupported ReplacementFor_errno_unsupported(\012errno)
<operator>.addition 0x1929+1667
<operator>.fieldAccess ReplacementFor_f->stat.st_dev
<operator>.indirectFieldAccess ReplacementFor_f->stat
FIELD_IDENTIFIER st_dev st_dev
FIELD_IDENTIFIER stat stat
>>>PDG&21 0->2 0->3 0->6 0->8 0->9 0->11 0->13 0->14 0->15 0->16 2->1 2->11 3->1 4->14 5->1 6->1 6->1 6->1 6->4 6->5 6->7 6->9 6->10 6->11 6->12 6->13 6->14 6->16 7->12 7->17 7->18 7->19 7->20 8->5 9->1 9->1 9->1 10->1 11->4 13->1 13->1 13->10 14->7 14->8 14->15 15->7
>>>Token static bool ReplacementFor_has_capability_cache ( char const * ReplacementFor_file , struct ReplacementFor_fileinfo * ReplacementFor_f ) { static dev_t ReplacementFor_unsupported_device ; if ( ReplacementFor_f -> stat . st_dev == ReplacementFor_unsupported_device ) { errno = ReplacementFor_ENOTSUP ; return ( 0x1929 + 1667 - 0x1fac ) ; } bool ReplacementFor_b = ReplacementFor_has_capability ( ReplacementFor_file ) ; if ( ! ReplacementFor_b && ReplacementFor_errno_unsupported ( errno ) ) ReplacementFor_unsupported_device = ReplacementFor_f -> stat . st_dev ; return ReplacementFor_b ; }
>>>Func
METHOD main
METHOD_RETURN int
<operator>.assignment ReplacementFor_stk=\012ReplacementFor_Stack_init()
ReplacementFor_Stack_push ReplacementFor_Stack_push(ReplacementFor_stk (int*)\012(0x4a1+6108-0x1c7c))
ReplacementFor_Stack_push ReplacementFor_Stack_push(ReplacementFor_stk (int*)\012(0xac2+1052-0xedc))
ReplacementFor_Stack_push ReplacementFor_Stack_push(ReplacementFor_stk (int*)\012(0x1167+2312-0x1a6c))
ReplacementFor_Stack_push ReplacementFor_Stack_push(ReplacementFor_stk (int*)\012(0x3f6+8701-0x25ef))
printf printf("\x53\x69\x7a\x65\x3a\x20\x25\x64" "\n" \012ReplacementFor_Stack_size(ReplacementFor_stk))
ReplacementFor_Stack_print ReplacementFor_Stack_print(\012ReplacementFor_stk)
ReplacementFor_Stack_pop ReplacementFor_Stack_pop(ReplacementFor_stk)
printf printf(\012"\x53\x74\x61\x63\x6b\x20\x61\x66\x74\x65\x72\x20\x70\x6f\x70\x70\x69\x6e\x67\x3a\x20" "\n"\012)
ReplacementFor_Stack_print ReplacementFor_Stack_print(ReplacementFor_stk)
ReplacementFor_Stack_pop ReplacementFor_Stack_pop(\012ReplacementFor_stk)
printf printf(\012"\x53\x74\x61\x63\x6b\x20\x61\x66\x74\x65\x72\x20\x70\x6f\x70\x70\x69\x6e\x67\x3a\x20" "\n"\012)
ReplacementFor_Stack_print ReplacementFor_Stack_print(ReplacementFor_stk)
RETURN return(0x40+3483-0xddb); return(0x40+3483-0xddb);
<operator>.subtraction 0x40+3483-0xddb
<operator>.cast (int*)\012(0x4a1+6108-0x1c7c)
<operator>.cast (int*)\012(0xac2+1052-0xedc)
<operator>.cast (int*)\012(0x1167+2312-0x1a6c)
<operator>.cast (int*)\012(0x3f6+8701-0x25ef)
ReplacementFor_Stack_size ReplacementFor_Stack_size(ReplacementFor_stk)
<operator>.subtraction 0x4a1+6108-0x1c7c
<operator>.subtraction 0xac2+1052-0xedc
<operator>.subtraction 0x1167+2312-0x1a6c
<operator>.subtraction 0x3f6+8701-0x25ef
<operator>.addition 0x40+3483
<operator>.addition 0x4a1+6108
<operator>.addition 0xac2+1052
<operator>.addition 0x1167+2312
<operator>.addition 0x3f6+8701
>>>PDG&31 0->2 0->3 0->4 0->5 0->6 0->7 0->8 0->9 0->10 0->11 0->12 0->13 0->14 0->16 0->21 0->22 0->23 0->24 0->25 0->26 0->27 0->28 0->29 0->30 2->1 2->1 2->3 3->1 3->1 3->4 4->1 4->1 4->5 5->1 5->1 5->6 6->1 6->1 6->21 7->1 7->1 8->1 8->9 9->1 9->11 11->12 12->1 12->14 13->1 14->1 14->1 15->1 16->1 16->1 16->15 17->1 18->1 19->1 20->1 21->7 21->8 22->1 22->3 22->3 22->17 22->17 23->1 23->4 23->4 23->18 23->18 24->1 24->5 24->5 24->19 24->19 25->1 25->6 25->6 25->20 25->20
>>>Token int main ( ) { Stack_T ReplacementFor_stk ; ReplacementFor_stk = ReplacementFor_Stack_init ( ) ; ReplacementFor_Stack_push ( ReplacementFor_stk , ( int * ) ( 0x4a1 + 6108 - 0x1c7c ) ) ; ReplacementFor_Stack_push ( ReplacementFor_stk , ( int * ) ( 0xac2 + 1052 - 0xedc ) ) ; ReplacementFor_Stack_push ( ReplacementFor_stk , ( int * ) ( 0x1167 + 2312 - 0x1a6c ) ) ; ReplacementFor_Stack_push ( ReplacementFor_stk , ( int * ) ( 0x3f6 + 8701 - 0x25ef ) ) ; printf ( " \x53 \x69 \x7a \x65 \x3a \x20 \x25 \x64 " " \n " , ReplacementFor_Stack_size ( ReplacementFor_stk ) ) ; ReplacementFor_Stack_print ( ReplacementFor_stk ) ; ReplacementFor_Stack_pop ( ReplacementFor_stk ) ; printf ( " \x53 \x74 \x61 \x63 \x6b \x20 \x61 \x66 \x74 \x65 \x72 \x20 \x70 \x6f \x70 \x70 \x69 \x6e \x67 \x3a \x20 " " \n " ) ; ReplacementFor_Stack_print ( ReplacementFor_stk ) ; ReplacementFor_Stack_pop ( ReplacementFor_stk ) ; printf ( " \x53 \x74 \x61 \x63 \x6b \x20 \x61 \x66 \x74 \x65 \x72 \x20 \x70 \x6f \x70 \x70 \x69 \x6e \x67 \x3a \x20 " " \n " ) ; ReplacementFor_Stack_print ( ReplacementFor_stk ) ; return ( 0x40 + 3483 - 0xddb ) ; }
>>>Func
METHOD ReplacementFor_time_ref
METHOD_RETURN double
PARAM int i
RETURN return ReplacementFor__tls_time_laps[i]\012; return ReplacementFor__tls_time_laps[i]\012;
<operator>.logicalNot !((0x1367+1920-0x1ae7)<=i&&i<\012ReplacementFor_SYS_LAP_TIME_MAX)
error error()
<operator>.logicalAnd (0x1367+1920-0x1ae7)<=i&&i<\012ReplacementFor_SYS_LAP_TIME_MAX
<operator>.lessEqualsThan (0x1367+1920-0x1ae7)<=i
<operator>.lessThan i<\012ReplacementFor_SYS_LAP_TIME_MAX
<operator>.subtraction 0x1367+1920-0x1ae7
<operator>.addition 0x1367+1920
>>>PDG&11 0->2 0->3 0->5 0->7 0->8 0->9 0->10 2->7 3->1 4->1 4->1 4->5 5->1 6->1 6->1 6->4 6->4 7->1 7->1 7->6 7->6 7->8 7->8 8->1 8->1 8->6 8->6 9->1 9->7 9->7
>>>Token double ReplacementFor_time_ref ( int i ) { if ( ! ( ( 0x1367 + 1920 - 0x1ae7 ) <= i && i < ReplacementFor_SYS_LAP_TIME_MAX ) ) error ( ) ; return ReplacementFor__tls_time_laps [ i ] ; }
>>>Func
METHOD ReplacementFor_adjacent
METHOD_RETURN bool
PARAM ReplacementFor_Graph ReplacementFor_g
PARAM ReplacementFor_Vertex ReplacementFor_v
PARAM ReplacementFor_Vertex ReplacementFor_w
ReplacementFor_assert ReplacementFor_assert(ReplacementFor_g!=NULL&&ReplacementFor_validV(\012ReplacementFor_g,ReplacementFor_v)&&ReplacementFor_validV(ReplacementFor_g,\012ReplacementFor_w))
RETURN return(ReplacementFor_g->ReplacementFor_edges[\012ReplacementFor_v][ReplacementFor_w]!=(0x11d6+4635-0x23f1)); return(ReplacementFor_g->ReplacementFor_edges[\012ReplacementFor_v][ReplacementFor_w]!=(0x11d6+4635-0x23f1));
<operator>.notEquals ReplacementFor_g->ReplacementFor_edges[\012ReplacementFor_v][ReplacementFor_w]!=(0x11d6+4635-0x23f1)
<operator>.logicalAnd ReplacementFor_g!=NULL&&ReplacementFor_validV(\012ReplacementFor_g,ReplacementFor_v)&&ReplacementFor_validV(ReplacementFor_g,\012ReplacementFor_w)
<operator>.logicalAnd ReplacementFor_g!=NULL&&ReplacementFor_validV(\012ReplacementFor_g,ReplacementFor_v)
ReplacementFor_validV ReplacementFor_validV(ReplacementFor_g,\012ReplacementFor_w)
<operator>.subtraction 0x11d6+4635-0x23f1
<operator>.notEquals ReplacementFor_g!=NULL
ReplacementFor_validV ReplacementFor_validV(\012ReplacementFor_g,ReplacementFor_v)
<operator>.addition 0x11d6+4635
>>>PDG&15 0->2 0->3 0->4 0->10 0->11 0->12 0->13 0->14 2->12 3->1 3->13 4->1 4->10 5->1 5->1 6->1 7->1 7->1 7->1 7->6 8->1 8->1 8->5 8->5 9->1 9->1 9->8 9->8 9->10 10->1 10->1 10->8 10->8 11->1 11->7 11->7 12->1 12->1 12->9 12->9 12->10 12->13 12->13 13->1 13->1 13->9 13->9 13->10
>>>Token bool ReplacementFor_adjacent ( ReplacementFor_Graph ReplacementFor_g , ReplacementFor_Vertex ReplacementFor_v , ReplacementFor_Vertex ReplacementFor_w ) { ReplacementFor_assert ( ReplacementFor_g != NULL && ReplacementFor_validV ( ReplacementFor_g , ReplacementFor_v ) && ReplacementFor_validV ( ReplacementFor_g , ReplacementFor_w ) ) ; return ( ReplacementFor_g -> ReplacementFor_edges [ ReplacementFor_v ] [ ReplacementFor_w ] != ( 0x11d6 + 4635 - 0x23f1 ) ) ; }
>>>Func
METHOD main
METHOD_RETURN int
PARAM int ReplacementFor_argc
PARAM char*ReplacementFor_argv[]
<operator>.assignment m=(int)ReplacementFor_argv[ReplacementFor_argc-\012(0x1e65+1735-0x252b)][(0x1dad+244-0x1ea1)]
<operator>.expressionList l=(0x2cd+329-0x416) ReplacementFor_u=\012ReplacementFor_argc-(0x1a9a+529-0x1ca9)
<operator>.assignment ReplacementFor_c=ReplacementFor_binary(\012ReplacementFor_a ReplacementFor_argc-(0x1729+560-0x1958),m,l,ReplacementFor_u)
RETURN return\012(0x8a5+1204-0xd59); return\012(0x8a5+1204-0xd59);
<operator>.lessThan ReplacementFor_argc<(0x10bd+2381-0x19fe)
<operator>.lessThan i<ReplacementFor_argc-(0x145d+2251-0x1d27)
<operator>.postIncrement i++
<operator>.assignment ReplacementFor_a[i-(0x69c+1595-0xcd6)]=ReplacementFor_argv[i][\012(0x9b6+5113-0x1daf)]
<operator>.equals ReplacementFor_c==(0x34c+2193-0xbdd)
<operator>.subtraction 0x8a5+1204-0xd59
RETURN return(0x1730+3719-0x25b6); return(0x1730+3719-0x25b6);
<operator>.assignment i=(0x9af+6967-0x24e5)
<operator>.assignment l=(0x2cd+329-0x416)
<operator>.assignment ReplacementFor_u=\012ReplacementFor_argc-(0x1a9a+529-0x1ca9)
ReplacementFor_binary ReplacementFor_binary(\012ReplacementFor_a ReplacementFor_argc-(0x1729+560-0x1958),m,l,ReplacementFor_u)
printf printf(\012"\x4e\x75\x6d\x62\x65\x72\x20\x69\x73\x20\x6e\x6f\x74\x20\x66\x6f\x75\x6e\x64\x2e" "\n"\012)
<operator>.subtraction 0x10bd+2381-0x19fe
<operator>.subtraction 0x1730+3719-0x25b6
<operator>.subtraction ReplacementFor_argc-(0x145d+2251-0x1d27)
<operator>.subtraction 0x2cd+329-0x416
<operator>.subtraction ReplacementFor_argc-(0x1a9a+529-0x1ca9)
<operator>.subtraction ReplacementFor_argc-(0x1729+560-0x1958)
<operator>.subtraction 0x34c+2193-0xbdd
printf printf(\012"\x4e\x75\x6d\x62\x65\x72\x20\x69\x73\x20\x66\x6f\x75\x6e\x64\x2e" "\n")
<operator>.addition 0x8a5+1204
<operator>.addition 0x10bd+2381
<operator>.subtraction 0x9af+6967-0x24e5
<operator>.subtraction 0x145d+2251-0x1d27
<operator>.subtraction i-(0x69c+1595-0xcd6)
<operator>.subtraction 0x9b6+5113-0x1daf
<operator>.subtraction 0x1dad+244-0x1ea1
<operator>.addition 0x2cd+329
<operator>.subtraction 0x1a9a+529-0x1ca9
<operator>.subtraction 0x1729+560-0x1958
<operator>.addition 0x34c+2193
<operator>.addition 0x1730+3719
<operator>.addition 0x9af+6967
<operator>.addition 0x145d+2251
<operator>.subtraction 0x69c+1595-0xcd6
<operator>.addition 0x9b6+5113
<operator>.subtraction ReplacementFor_argc-\012(0x1e65+1735-0x252b)
<operator>.addition 0x1dad+244
<operator>.addition 0x1a9a+529
<operator>.addition 0x1729+560
<operator>.addition 0x69c+1595
<operator>.subtraction 0x1e65+1735-0x252b
<operator>.addition 0x1e65+1735
<operator>.cast (int)ReplacementFor_argv[ReplacementFor_argc-\012(0x1e65+1735-0x252b)][(0x1dad+244-0x1ea1)]
<operator>.indirectIndexAccess ReplacementFor_a[i-(0x69c+1595-0xcd6)]
<operator>.indirectIndexAccess ReplacementFor_argv[i][\012(0x9b6+5113-0x1daf)]
UNKNOWN int int
<operator>.indirectIndexAccess ReplacementFor_argv[ReplacementFor_argc-\012(0x1e65+1735-0x252b)][(0x1dad+244-0x1ea1)]
<operator>.indirectIndexAccess ReplacementFor_argv[i]
<operator>.indirectIndexAccess ReplacementFor_argv[ReplacementFor_argc-\012(0x1e65+1735-0x252b)]
>>>PDG&58 0->2 0->3 0->8 0->9 0->10 0->12 0->13 0->18 0->19 0->20 0->21 0->22 0->23 0->24 0->25 0->26 0->27 0->28 0->29 0->30 0->31 0->32 0->33 0->34 0->35 0->36 0->37 0->38 0->39 0->40 0->41 0->42 0->43 0->44 0->45 0->46 0->47 0->48 0->49 0->50 2->8 3->1 4->18 6->12 7->1 8->1 8->1 8->1 8->4 8->5 8->6 8->7 8->9 8->12 8->13 8->14 8->15 8->16 8->17 8->18 8->21 8->22 8->22 8->23 8->24 8->25 8->26 8->28 8->30 8->31 8->34 8->35 8->36 8->37 8->38 8->39 8->40 8->41 8->44 8->45 8->46 8->47 8->49 8->50 8->51 8->54 8->55 8->57 9->9 9->10 9->11 9->22 9->31 9->32 9->32 9->33 9->41 9->42 9->43 9->48 9->52 9->53 9->56 10->9 11->18 12->19 12->27 13->7 14->1 15->9 16->5 16->18 17->5 17->18 18->6 18->6 18->6 18->6 18->6 20->1 20->8 20->8 21->1 21->1 21->14 22->9 22->9 22->44 23->5 23->5 23->16 23->16 24->5 24->5 24->17 24->17 24->25 25->18 25->18 26->12 26->12 30->15 30->15 31->22 31->22 32->10 36->24 36->24 37->25 37->25 42->32 42->32 44->24 49->44 49->44
>>>Token int main ( int ReplacementFor_argc , char * ReplacementFor_argv [ ] ) { if ( ReplacementFor_argc < ( 0x10bd + 2381 - 0x19fe ) ) return ( 0x1730 + 3719 - 0x25b6 ) ; int ReplacementFor_a [ ( 0x802 + 3711 - 0x1677 ) ] , i , m , ReplacementFor_c , l , ReplacementFor_u ; for ( i = ( 0x9af + 6967 - 0x24e5 ) ; i < ReplacementFor_argc - ( 0x145d + 2251 - 0x1d27 ) ; i ++ ) ReplacementFor_a [ i - ( 0x69c + 1595 - 0xcd6 ) ] = ReplacementFor_argv [ i ] [ ( 0x9b6 + 5113 - 0x1daf ) ] ; m = ( int ) ReplacementFor_argv [ ReplacementFor_argc - ( 0x1e65 + 1735 - 0x252b ) ] [ ( 0x1dad + 244 - 0x1ea1 ) ] ; l = ( 0x2cd + 329 - 0x416 ) , ReplacementFor_u = ReplacementFor_argc - ( 0x1a9a + 529 - 0x1ca9 ) ; ReplacementFor_c = ReplacementFor_binary ( ReplacementFor_a , ReplacementFor_argc - ( 0x1729 + 560 - 0x1958 ) , m , l , ReplacementFor_u ) ; if ( ReplacementFor_c == ( 0x34c + 2193 - 0xbdd ) ) printf ( " \x4e \x75 \x6d \x62 \x65 \x72 \x20 \x69 \x73 \x20 \x6e \x6f \x74 \x20 \x66 \x6f \x75 \x6e \x64 \x2e " " \n " ) ; else printf ( " \x4e \x75 \x6d \x62 \x65 \x72 \x20 \x69 \x73 \x20 \x66 \x6f \x75 \x6e \x64 \x2e " " \n " ) ; return ( 0x8a5 + 1204 - 0xd59 ) ; }
>>>Func
METHOD ReplacementFor_readmoreinput
METHOD_RETURN int
PARAM int ReplacementFor_numlines
PARAM FILE*\012ReplacementFor_fp
PARAM char ReplacementFor_myArr[][(0x12a2+107-0x12a7)]
RETURN return\012(0xa04+3849-0x190d); return\012(0xa04+3849-0x190d);
<operator>.lessThan i<ReplacementFor_numlines
<operator>.postIncrement i++
<operator>.subtraction 0xa04+3849-0x190d
<operator>.assignment i=\012(0x1fb+7751-0x2042)
fgets fgets(ReplacementFor_myArr[i]\012 sizeof(ReplacementFor_myArr[i]),ReplacementFor_fp)
<operator>.assignment ReplacementFor_myArr[i][\012strlen(ReplacementFor_myArr[i])-(0xf16+5056-0x22d5)]='\0'
<operator>.addition 0xa04+3849
<operator>.subtraction 0x1fb+7751-0x2042
<operator>.addition 0x1fb+7751
<operator>.subtraction strlen(ReplacementFor_myArr[i])-(0xf16+5056-0x22d5)
strlen strlen(ReplacementFor_myArr[i])
<operator>.subtraction 0xf16+5056-0x22d5
<operator>.addition 0xf16+5056
<operator>.indirectIndexAccess ReplacementFor_myArr[i]
<operator>.sizeOf sizeof(ReplacementFor_myArr[i])
<operator>.indirectIndexAccess ReplacementFor_myArr[i][\012strlen(ReplacementFor_myArr[i])-(0xf16+5056-0x22d5)]
<operator>.indirectIndexAccess ReplacementFor_myArr[i]
<operator>.indirectIndexAccess ReplacementFor_myArr[i]
<operator>.indirectIndexAccess ReplacementFor_myArr[i]
>>>PDG&25 0->2 0->3 0->4 0->6 0->7 0->8 0->10 0->11 0->12 0->13 0->14 0->17 0->18 2->6 3->1 3->10 4->1 4->10 4->16 5->1 6->1 6->1 6->1 6->6 6->7 6->7 6->10 6->11 6->15 6->16 6->17 6->18 6->19 6->20 6->21 6->22 6->23 6->24 7->1 7->6 8->1 8->1 8->5 9->1 9->1 9->6 10->1 10->1 10->16 11->1 11->1 11->10 11->16 13->1 13->9 13->9 15->1 15->1 16->1 16->15 17->1 17->15 17->15
>>>Token int ReplacementFor_readmoreinput ( int ReplacementFor_numlines , FILE * ReplacementFor_fp , char ReplacementFor_myArr [ ] [ ( 0x12a2 + 107 - 0x12a7 ) ] ) { int i ; for ( i = ( 0x1fb + 7751 - 0x2042 ) ; i < ReplacementFor_numlines ; i ++ ) { fgets ( ReplacementFor_myArr [ i ] , sizeof ( ReplacementFor_myArr [ i ] ) , ReplacementFor_fp ) ; ReplacementFor_myArr [ i ] [ strlen ( ReplacementFor_myArr [ i ] ) - ( 0xf16 + 5056 - 0x22d5 ) ] = ' \0 ' ; } return ( 0xa04 + 3849 - 0x190d ) ; }
>>>Func
METHOD ReplacementFor_mrand_resume
METHOD_RETURN void
PARAM int8_t*buf
<operator>.assignment offset=(0x3f4+650-0x67e)
<operator>.assignment ReplacementFor_size=sizeof(int8_t)
memcpy memcpy(&\012ReplacementFor__tls_mrand_init_flag,buf+offset,ReplacementFor_size)
<operator>.assignmentPlus offset+=\012ReplacementFor_size
<operator>.assignment ReplacementFor_size=sizeof(int32_t)
memcpy memcpy(&\012ReplacementFor__tls_mrand_cur,buf+offset,ReplacementFor_size)
<operator>.assignmentPlus offset+=\012ReplacementFor_size
<operator>.assignment ReplacementFor_size=sizeof(int32_t)
memcpy memcpy(&\012ReplacementFor__tls_mrand_cur2,buf+offset,ReplacementFor_size)
<operator>.assignmentPlus offset+=\012ReplacementFor_size
<operator>.assignment ReplacementFor_size=(0x137c+2663-0x1bda)*sizeof(uint32_t)
memcpy memcpy(ReplacementFor__tls_mrand_x,buf+offset,ReplacementFor_size)
<operator>.assignmentPlus offset+=\012ReplacementFor_size
RETURN return; return;
<operator>.subtraction 0x3f4+650-0x67e
<operator>.sizeOf sizeof(int8_t)
<operator>.addition buf+offset
<operator>.addition buf+offset
<operator>.sizeOf sizeof(int32_t)
<operator>.addition buf+offset
<operator>.multiplication (0x137c+2663-0x1bda)*sizeof(uint32_t)
<operator>.addition buf+offset
<operator>.addition 0x3f4+650
<operator>.subtraction 0x137c+2663-0x1bda
<operator>.sizeOf sizeof(uint32_t)
<operator>.addition 0x137c+2663
>>>PDG&29 0->2 0->5 0->6 0->8 0->9 0->11 0->12 0->14 0->15 0->16 0->17 0->19 0->20 0->22 0->24 0->25 0->26 0->28 2->5 2->8 2->11 2->14 2->19 2->20 2->22 2->24 3->1 3->1 3->5 3->6 3->19 4->1 4->5 5->1 5->1 5->6 6->8 6->9 6->20 7->8 8->1 8->1 8->9 9->11 9->12 9->22 10->1 10->11 11->1 11->1 11->12 12->14 12->15 12->24 13->1 13->1 13->14 14->1 14->1 14->1 14->15 15->1 15->1 15->1 16->1 17->1 17->3 17->3 18->1 21->1 23->1 23->13 24->1 26->1 26->23 26->23 27->1
>>>Token void ReplacementFor_mrand_resume ( int8_t * buf ) { int32_t offset , ReplacementFor_size ; offset = ( 0x3f4 + 650 - 0x67e ) ; ReplacementFor_size = sizeof ( int8_t ) ; memcpy ( & ReplacementFor__tls_mrand_init_flag , buf + offset , ReplacementFor_size ) ; offset += ReplacementFor_size ; ReplacementFor_size = sizeof ( int32_t ) ; memcpy ( & ReplacementFor__tls_mrand_cur , buf + offset , ReplacementFor_size ) ; offset += ReplacementFor_size ; ReplacementFor_size = sizeof ( int32_t ) ; memcpy ( & ReplacementFor__tls_mrand_cur2 , buf + offset , ReplacementFor_size ) ; offset += ReplacementFor_size ; ReplacementFor_size = ( 0x137c + 2663 - 0x1bda ) * sizeof ( uint32_t ) ; memcpy ( ReplacementFor__tls_mrand_x , buf + offset , ReplacementFor_size ) ; offset += ReplacementFor_size ; return ; }
>>>Func
METHOD ReplacementFor_test2
METHOD_RETURN void
<operator>.assignment ReplacementFor_size=1000000L
<operator>.assignment *ReplacementFor_observations=(\012ReplacementFor_observation*)malloc(sizeof(ReplacementFor_observation)*\012ReplacementFor_size)
<operator>.assignment ReplacementFor_maxRadius=20.00
<operator>.assignment ReplacementFor_radius=(0xa0+3821-0xf8d)
<operator>.assignment ReplacementFor_ang=\012(0x78a+5824-0x1e4a)
<operator>.assignment i=(0x19f+499-0x392)
<operator>.assignment ReplacementFor_k=\012(0xe72+5593-0x2440)
<operator>.assignment *ReplacementFor_clusters=\012ReplacementFor_kMeans(ReplacementFor_observations,ReplacementFor_size,\012ReplacementFor_k)
ReplacementFor_printEPS ReplacementFor_printEPS(ReplacementFor_observations,\012ReplacementFor_size,ReplacementFor_clusters,ReplacementFor_k)
free free(\012ReplacementFor_observations)
free free(ReplacementFor_clusters)
<operator>.lessThan i<ReplacementFor_size
<operator>.postIncrement i++
<operator>.cast (\012ReplacementFor_observation*)malloc(sizeof(ReplacementFor_observation)*\012ReplacementFor_size)
<operator>.subtraction 0xa0+3821-0xf8d
<operator>.subtraction 0x78a+5824-0x1e4a
<operator>.subtraction 0x19f+499-0x392
<operator>.assignment ReplacementFor_radius=ReplacementFor_maxRadius*((double)rand()/RAND_MAX)
<operator>.assignment ReplacementFor_ang=(0x30b+8562-0x247b)*M_PI*((double)rand()/RAND_MAX)
<operator>.assignment ReplacementFor_observations[i].ReplacementFor_x=ReplacementFor_radius*cos(\012ReplacementFor_ang)
<operator>.assignment ReplacementFor_observations[i].ReplacementFor_y=\012ReplacementFor_radius*sin(ReplacementFor_ang)
<operator>.subtraction 0xe72+5593-0x2440
ReplacementFor_kMeans ReplacementFor_kMeans(ReplacementFor_observations,ReplacementFor_size,\012ReplacementFor_k)
malloc malloc(sizeof(ReplacementFor_observation)*\012ReplacementFor_size)
<operator>.addition 0xa0+3821
<operator>.addition 0x78a+5824
<operator>.addition 0x19f+499
<operator>.addition 0xe72+5593
<operator>.multiplication sizeof(ReplacementFor_observation)*\012ReplacementFor_size
<operator>.multiplication ReplacementFor_maxRadius*((double)rand()/RAND_MAX)
<operator>.multiplication (0x30b+8562-0x247b)*M_PI*((double)rand()/RAND_MAX)
<operator>.multiplication ReplacementFor_radius*cos(\012ReplacementFor_ang)
<operator>.multiplication ReplacementFor_radius*sin(ReplacementFor_ang)
<operator>.sizeOf sizeof(ReplacementFor_observation)
<operator>.division (double)rand()/RAND_MAX
<operator>.multiplication (0x30b+8562-0x247b)*M_PI
<operator>.division (double)rand()/RAND_MAX
cos cos(\012ReplacementFor_ang)
sin sin(ReplacementFor_ang)
<operator>.cast (double)rand()
<operator>.subtraction 0x30b+8562-0x247b
<operator>.cast (double)rand()
<operator>.addition 0x30b+8562
<operator>.fieldAccess ReplacementFor_observations[i].ReplacementFor_x
<operator>.fieldAccess ReplacementFor_observations[i].ReplacementFor_y
<operator>.indirectIndexAccess ReplacementFor_observations[i]
FIELD_IDENTIFIER ReplacementFor_x ReplacementFor_x
<operator>.indirectIndexAccess ReplacementFor_observations[i]
FIELD_IDENTIFIER ReplacementFor_y ReplacementFor_y
UNKNOWN double double
rand rand()
UNKNOWN double double
rand rand()
>>>PDG&55 0->2 0->4 0->10 0->11 0->12 0->13 0->14 0->16 0->17 0->18 0->23 0->24 0->26 0->27 0->28 0->29 0->30 0->31 0->33 0->34 0->36 0->37 0->38 0->39 0->40 0->41 0->42 0->43 0->44 2->1 2->30 3->1 3->1 3->24 4->1 4->1 4->31 5->1 5->1 5->1 6->1 6->1 6->1 7->1 7->1 7->13 8->1 8->1 8->24 9->1 9->1 9->10 10->1 10->1 10->1 10->11 10->12 11->1 12->1 13->1 13->1 13->13 13->14 13->14 13->19 13->20 13->21 13->22 13->24 13->31 13->32 13->33 13->34 13->36 13->37 13->38 13->39 13->40 13->41 13->42 13->43 13->44 13->45 13->46 13->47 13->48 13->49 13->50 13->51 13->52 13->53 13->54 14->1 14->13 15->1 16->1 16->5 16->5 17->1 17->6 17->6 18->1 18->7 18->7 19->1 19->1 19->33 20->1 20->1 20->39 21->1 21->1 22->1 22->1 23->1 23->8 23->8 24->9 24->9 24->9 24->10 24->10 24->10 25->1 25->3 25->15 30->13 30->25 31->1 31->19 31->19 32->1 32->1 32->20 32->20 33->1 33->21 33->21 33->34 34->1 34->1 34->22 34->22 35->1 36->31 36->31 36->38 37->1 37->1 37->32 37->32 38->1 38->1 38->32 38->32 38->36 39->33 39->40 40->1 40->34 42->1 42->37 42->37 43->1
>>>Token void ReplacementFor_test2 ( ) { size_t ReplacementFor_size = 1000000L ; ReplacementFor_observation * ReplacementFor_observations = ( ReplacementFor_observation * ) malloc ( sizeof ( ReplacementFor_observation ) * ReplacementFor_size ) ; double ReplacementFor_maxRadius = 20.00 ; double ReplacementFor_radius = ( 0xa0 + 3821 - 0xf8d ) ; double ReplacementFor_ang = ( 0x78a + 5824 - 0x1e4a ) ; size_t i = ( 0x19f + 499 - 0x392 ) ; for ( ; i < ReplacementFor_size ; i ++ ) { ReplacementFor_radius = ReplacementFor_maxRadius * ( ( double ) rand ( ) / RAND_MAX ) ; ReplacementFor_ang = ( 0x30b + 8562 - 0x247b ) * M_PI * ( ( double ) rand ( ) / RAND_MAX ) ; ReplacementFor_observations [ i ] . ReplacementFor_x = ReplacementFor_radius * cos ( ReplacementFor_ang ) ; ReplacementFor_observations [ i ] . ReplacementFor_y = ReplacementFor_radius * sin ( ReplacementFor_ang ) ; } int ReplacementFor_k = ( 0xe72 + 5593 - 0x2440 ) ; ReplacementFor_cluster * ReplacementFor_clusters = ReplacementFor_kMeans ( ReplacementFor_observations , ReplacementFor_size , ReplacementFor_k ) ; ReplacementFor_printEPS ( ReplacementFor_observations , ReplacementFor_size , ReplacementFor_clusters , ReplacementFor_k ) ; free ( ReplacementFor_observations ) ; free ( ReplacementFor_clusters ) ; }
>>>Func
METHOD main
METHOD_RETURN int
printf printf(\012"\x45\x6e\x74\x65\x72\x20\x69\x6e\x66\x69\x78\x20\x65\x78\x70\x72\x65\x73\x73\x69\x6f\x6e\x3a\x20"\012)
scanf scanf("\x25\x73",ReplacementFor_infix)
ReplacementFor_convert ReplacementFor_convert(\012ReplacementFor_infix,ReplacementFor_postfix)
printf printf(\012"\x50\x6f\x73\x74\x66\x69\x78\x20\x65\x78\x70\x72\x65\x73\x73\x69\x6f\x6e\x20\x69\x73\x20\x25\x73"\012,ReplacementFor_postfix)
RETURN return(0x179f+135-0x1826); return(0x179f+135-0x1826);
<operator>.subtraction 0x179f+135-0x1826
<operator>.addition 0x179f+135
>>>PDG&9 0->2 0->3 0->4 0->5 0->7 0->8 2->1 3->4 4->1 4->1 4->5 5->1 5->1 6->1 7->1 7->1 7->6
>>>Token int main ( ) { char ReplacementFor_infix [ ( 0xe0d + 5803 - 0x24a4 ) ] , ReplacementFor_postfix [ ( 0x6b8 + 5572 - 0x1c68 ) ] ; printf ( " \x45 \x6e \x74 \x65 \x72 \x20 \x69 \x6e \x66 \x69 \x78 \x20 \x65 \x78 \x70 \x72 \x65 \x73 \x73 \x69 \x6f \x6e \x3a \x20 " ) ; scanf ( " \x25 \x73 " , ReplacementFor_infix ) ; ReplacementFor_convert ( ReplacementFor_infix , ReplacementFor_postfix ) ; printf ( " \x50 \x6f \x73 \x74 \x66 \x69 \x78 \x20 \x65 \x78 \x70 \x72 \x65 \x73 \x73 \x69 \x6f \x6e \x20 \x69 \x73 \x20 \x25 \x73 " , ReplacementFor_postfix ) ; return ( 0x179f + 135 - 0x1826 ) ; }
>>>Func
METHOD ReplacementFor_nextv
METHOD_RETURN int
PARAM int i
PARAM int ReplacementFor_j
<operator>.assignment ReplacementFor_a=ReplacementFor_csearch(&ReplacementFor_sousedi[ReplacementFor_j\012][(0x26d+1281-0x76e)],ReplacementFor_deg[ReplacementFor_j],i)
ReplacementFor_assert ReplacementFor_assert(ReplacementFor_sousedi[ReplacementFor_j][ReplacementFor_a]\012==i)
RETURN return ReplacementFor_sousedi[ReplacementFor_j][ReplacementFor_a>\012(0x784+5265-0x1c15)?ReplacementFor_a-(0x67c+6873-0x2154):ReplacementFor_deg[\012ReplacementFor_j]-(0xf14+4786-0x21c5)]; return ReplacementFor_sousedi[ReplacementFor_j][ReplacementFor_a>\012(0x784+5265-0x1c15)?ReplacementFor_a-(0x67c+6873-0x2154):ReplacementFor_deg[\012ReplacementFor_j]-(0xf14+4786-0x21c5)];
ReplacementFor_csearch ReplacementFor_csearch(&ReplacementFor_sousedi[ReplacementFor_j\012][(0x26d+1281-0x76e)],ReplacementFor_deg[ReplacementFor_j],i)
<operator>.equals ReplacementFor_sousedi[ReplacementFor_j][ReplacementFor_a]\012==i
<operator>.conditional ReplacementFor_a>\012(0x784+5265-0x1c15)?ReplacementFor_a-(0x67c+6873-0x2154):ReplacementFor_deg[\012ReplacementFor_j]-(0xf14+4786-0x21c5)
<operator>.greaterThan ReplacementFor_a>\012(0x784+5265-0x1c15)
<operator>.subtraction ReplacementFor_a-(0x67c+6873-0x2154)
<operator>.subtraction ReplacementFor_deg[\012ReplacementFor_j]-(0xf14+4786-0x21c5)
<operator>.subtraction 0x26d+1281-0x76e
<operator>.subtraction 0x784+5265-0x1c15
<operator>.subtraction 0x67c+6873-0x2154
<operator>.subtraction 0xf14+4786-0x21c5
<operator>.addition 0x26d+1281
<operator>.addition 0x784+5265
<operator>.addition 0x67c+6873
<operator>.addition 0xf14+4786
<operator>.indirectIndexAccess ReplacementFor_deg[\012ReplacementFor_j]
>>>PDG&22 0->2 0->3 0->6 0->7 0->8 0->10 0->11 0->13 0->14 0->15 0->16 0->17 0->18 0->19 0->20 2->7 3->1 4->1 4->1 4->10 5->1 5->1 6->1 7->1 7->1 7->4 7->4 7->4 7->8 8->1 8->1 8->5 8->5 9->1 9->1 9->1 10->1 10->1 10->11 10->11 10->12 10->15 10->16 10->19 10->20 10->21 11->1 11->1 11->9 11->9 12->1 12->1 12->9 12->9 13->1 14->1 14->10 14->10 15->1 15->11 15->11 16->1 16->12 16->12
>>>Token int ReplacementFor_nextv ( int i , int ReplacementFor_j ) { int ReplacementFor_a ; ReplacementFor_a = ReplacementFor_csearch ( & ReplacementFor_sousedi [ ReplacementFor_j ] [ ( 0x26d + 1281 - 0x76e ) ] , ReplacementFor_deg [ ReplacementFor_j ] , i ) ; ReplacementFor_assert ( ReplacementFor_sousedi [ ReplacementFor_j ] [ ReplacementFor_a ] == i ) ; return ReplacementFor_sousedi [ ReplacementFor_j ] [ ReplacementFor_a > ( 0x784 + 5265 - 0x1c15 ) ? ReplacementFor_a - ( 0x67c + 6873 - 0x2154 ) : ReplacementFor_deg [ ReplacementFor_j ] - ( 0xf14 + 4786 - 0x21c5 ) ] ; }
>>>Func
METHOD main
METHOD_RETURN int
PARAM int ReplacementFor_argc
PARAM char*ReplacementFor_argv[]
ReplacementFor_ParseInput ReplacementFor_ParseInput(ReplacementFor_argv[(0x6af+7984-0x25de)])
<operator>.notEquals (0xa49+5857-0x2128)!=ReplacementFor_argc
printf printf(\012"\x50\x72\x6f\x67\x72\x61\x6d\x20\x65\x78\x70\x65\x63\x74\x73\x20\x69\x6e\x70\x75\x74\x20\x66\x69\x6c\x65\x20\x61\x73\x20\x61\x72\x67\x75\x6d\x65\x6e\x74\x2e" "\n"\012)
RETURN return(0x5fa+5689-0x1c33); return(0x5fa+5689-0x1c33);
<operator>.subtraction 0xa49+5857-0x2128
<operator>.subtraction 0x5fa+5689-0x1c33
<operator>.subtraction 0x6af+7984-0x25de
<operator>.addition 0xa49+5857
<operator>.addition 0x6af+7984
<operator>.addition 0x5fa+5689
<operator>.indirectIndexAccess ReplacementFor_argv[(0x6af+7984-0x25de)]
>>>PDG&15 0->2 0->3 0->5 0->6 0->8 0->9 0->10 0->11 0->12 0->13 2->5 3->1 3->4 5->1 5->1 5->1 5->4 5->6 5->7 5->9 5->10 5->12 5->13 5->14 6->1 7->1 8->1 8->5 8->5 9->1 9->1 9->7
>>>Token int main ( int ReplacementFor_argc , char * ReplacementFor_argv [ ] ) { if ( ( 0xa49 + 5857 - 0x2128 ) != ReplacementFor_argc ) { printf ( " \x50 \x72 \x6f \x67 \x72 \x61 \x6d \x20 \x65 \x78 \x70 \x65 \x63 \x74 \x73 \x20 \x69 \x6e \x70 \x75 \x74 \x20 \x66 \x69 \x6c \x65 \x20 \x61 \x73 \x20 \x61 \x72 \x67 \x75 \x6d \x65 \x6e \x74 \x2e " " \n " ) ; return ( 0x5fa + 5689 - 0x1c33 ) ; } int ReplacementFor_SequenceLen ; ReplacementFor_ParseInput ( ReplacementFor_argv [ ( 0x6af + 7984 - 0x25de ) ] ) ; }
>>>Func
METHOD ReplacementFor_midpoint_euler_step
METHOD_RETURN void
PARAM double ReplacementFor_dx
PARAM double*\012ReplacementFor_x
PARAM double*ReplacementFor_y
PARAM double*ReplacementFor_dy
ReplacementFor_problem ReplacementFor_problem(ReplacementFor_x,ReplacementFor_y,ReplacementFor_dy)
<operator>.assignment ReplacementFor_tmp_x=(*ReplacementFor_x)+0.5*ReplacementFor_dx
ReplacementFor_problem ReplacementFor_problem(&ReplacementFor_tmp_x,ReplacementFor_tmp_y,\012ReplacementFor_dy)
<operator>.lessThan ReplacementFor_o<ReplacementFor_order
<operator>.postIncrement ReplacementFor_o++
<operator>.assignment ReplacementFor_tmp_y[ReplacementFor_o]=ReplacementFor_y[\012ReplacementFor_o]+0.5*ReplacementFor_dx*ReplacementFor_dy[ReplacementFor_o]
<operator>.lessThan ReplacementFor_o<\012ReplacementFor_order
<operator>.postIncrement ReplacementFor_o++
<operator>.assignmentPlus ReplacementFor_y[ReplacementFor_o]+=\012ReplacementFor_dx*ReplacementFor_dy[ReplacementFor_o]
<operator>.addition (*ReplacementFor_x)+0.5*ReplacementFor_dx
<operator>.assignment ReplacementFor_o=(0xfa7+3655-0x1dee)
<operator>.assignment ReplacementFor_o=(0x479+6248-0x1ce1)
<operator>.multiplication 0.5*ReplacementFor_dx
<operator>.addition ReplacementFor_y[\012ReplacementFor_o]+0.5*ReplacementFor_dx*ReplacementFor_dy[ReplacementFor_o]
<operator>.multiplication ReplacementFor_dx*ReplacementFor_dy[ReplacementFor_o]
<operator>.subtraction 0xfa7+3655-0x1dee
<operator>.multiplication 0.5*ReplacementFor_dx*ReplacementFor_dy[ReplacementFor_o]
<operator>.subtraction 0x479+6248-0x1ce1
<operator>.addition 0xfa7+3655
<operator>.multiplication 0.5*ReplacementFor_dx
<operator>.addition 0x479+6248
<operator>.indirectIndexAccess ReplacementFor_tmp_y[ReplacementFor_o]
<operator>.indirectIndexAccess ReplacementFor_y[ReplacementFor_o]
<operator>.indirectIndexAccess ReplacementFor_y[\012ReplacementFor_o]
<operator>.indirectIndexAccess ReplacementFor_dy[ReplacementFor_o]
<operator>.indirectIndexAccess ReplacementFor_dy[ReplacementFor_o]
>>>PDG&32 0->2 0->3 0->4 0->5 0->6 0->8 0->9 0->10 0->12 0->13 0->18 0->20 0->21 0->23 0->24 0->25 0->26 2->18 3->6 4->6 5->6 6->1 6->1 6->1 6->8 6->11 6->14 6->19 6->22 7->1 7->1 7->1 7->8 8->1 8->1 8->1 8->1 8->20 9->1 9->9 9->10 9->10 9->11 9->12 9->19 9->22 9->25 9->27 9->29 9->31 10->1 10->9 11->8 12->1 12->1 12->1 12->12 12->13 12->13 12->14 12->20 12->28 12->30 13->1 13->12 15->1 15->1 16->1 16->1 16->9 17->1 17->1 17->12 18->1 18->7 18->7 18->15 18->15 18->20 18->25 20->14 20->14 21->1 21->16 21->16 22->8 22->11 22->11 22->19 22->19 22->20 23->1 23->17 23->17 25->20 25->22 25->22
>>>Token void ReplacementFor_midpoint_euler_step ( double ReplacementFor_dx , double * ReplacementFor_x , double * ReplacementFor_y , double * ReplacementFor_dy ) { ReplacementFor_problem ( ReplacementFor_x , ReplacementFor_y , ReplacementFor_dy ) ; double ReplacementFor_tmp_x = ( * ReplacementFor_x ) + 0.5 * ReplacementFor_dx ; double ReplacementFor_tmp_y [ ReplacementFor_order ] ; int ReplacementFor_o ; for ( ReplacementFor_o = ( 0xfa7 + 3655 - 0x1dee ) ; ReplacementFor_o < ReplacementFor_order ; ReplacementFor_o ++ ) ReplacementFor_tmp_y [ ReplacementFor_o ] = ReplacementFor_y [ ReplacementFor_o ] + 0.5 * ReplacementFor_dx * ReplacementFor_dy [ ReplacementFor_o ] ; ReplacementFor_problem ( & ReplacementFor_tmp_x , ReplacementFor_tmp_y , ReplacementFor_dy ) ; for ( ReplacementFor_o = ( 0x479 + 6248 - 0x1ce1 ) ; ReplacementFor_o < ReplacementFor_order ; ReplacementFor_o ++ ) ReplacementFor_y [ ReplacementFor_o ] += ReplacementFor_dx * ReplacementFor_dy [ ReplacementFor_o ] ; }
>>>Func
METHOD ReplacementFor_bloom_filter_insert
METHOD_RETURN void
PARAM ReplacementFor_BloomFilter*\012ReplacementFor_bloomfilter
PARAM ReplacementFor_BloomFilterValue value
<operator>.assignment ReplacementFor_hash=\012ReplacementFor_bloomfilter->ReplacementFor_hash_func(value)
<operator>.lessThan i<ReplacementFor_bloomfilter->ReplacementFor_num_functions
<operator>.preIncrement ++i
ReplacementFor_hash_func ReplacementFor_bloomfilter->ReplacementFor_hash_func(value)
<operator>.assignment i=\012(0x9a4+5667-0x1fc7)
<operator>.assignment ReplacementFor_subhash=ReplacementFor_hash^ReplacementFor_salts[i]
<operator>.assignment index=\012ReplacementFor_subhash%ReplacementFor_bloomfilter->ReplacementFor_table_size
<operator>.assignment ReplacementFor_b=(unsigned char)((0x24e5+12-0x24f0)<<(index%(0xd6f+2331-0x1682))\012)
<operators>.assignmentOr ReplacementFor_bloomfilter->ReplacementFor_table[index/(0x5c9+1756-0xc9d)]|=\012ReplacementFor_b
<operator>.subtraction 0x9a4+5667-0x1fc7
<operator>.xor ReplacementFor_hash^ReplacementFor_salts[i]
<operator>.modulo ReplacementFor_subhash%ReplacementFor_bloomfilter->ReplacementFor_table_size
<operator>.cast (unsigned char)((0x24e5+12-0x24f0)<<(index%(0xd6f+2331-0x1682))\012)
<operator>.addition 0x9a4+5667
<operator>.shiftLeft (0x24e5+12-0x24f0)<<(index%(0xd6f+2331-0x1682))
<operator>.division index/(0x5c9+1756-0xc9d)
<operator>.subtraction 0x24e5+12-0x24f0
<operator>.modulo index%(0xd6f+2331-0x1682)
<operator>.subtraction 0x5c9+1756-0xc9d
<operator>.addition 0x24e5+12
<operator>.subtraction 0xd6f+2331-0x1682
<operator>.addition 0x5c9+1756
<operator>.addition 0xd6f+2331
<operator>.indirectFieldAccess ReplacementFor_bloomfilter->ReplacementFor_num_functions
FIELD_IDENTIFIER ReplacementFor_num_functions ReplacementFor_num_functions
<operator>.indirectIndexAccess ReplacementFor_bloomfilter->ReplacementFor_table[index/(0x5c9+1756-0xc9d)]
<operator>.indirectIndexAccess ReplacementFor_salts[i]
<operator>.indirectFieldAccess ReplacementFor_bloomfilter->ReplacementFor_table_size
UNKNOWN unsigned char unsigned char
<operator>.indirectFieldAccess ReplacementFor_bloomfilter->ReplacementFor_table
FIELD_IDENTIFIER ReplacementFor_table_size ReplacementFor_table_size
FIELD_IDENTIFIER ReplacementFor_table ReplacementFor_table
>>>PDG&36 0->2 0->3 0->5 0->6 0->7 0->12 0->13 0->14 0->15 0->17 0->19 0->20 0->21 0->22 0->23 0->24 0->25 0->26 2->1 3->7 4->1 4->1 4->1 4->14 5->1 5->1 5->1 5->5 5->6 5->6 5->9 5->10 5->11 5->12 5->14 5->15 5->16 5->18 5->19 5->20 5->21 5->22 5->23 5->24 5->25 5->26 5->27 5->28 5->29 5->30 5->31 5->32 5->33 5->34 5->35 6->1 6->5 7->1 7->1 7->4 7->4 8->1 8->1 8->5 9->15 10->21 11->12 13->1 13->8 13->8 14->9 14->9 15->10 15->10 18->11 18->11 18->16 18->16 20->18 20->18 21->18 21->18 21->19 22->19 22->19 24->21 24->21
>>>Token void ReplacementFor_bloom_filter_insert ( ReplacementFor_BloomFilter * ReplacementFor_bloomfilter , ReplacementFor_BloomFilterValue value ) { unsigned int ReplacementFor_hash ; unsigned int ReplacementFor_subhash ; unsigned int index ; unsigned int i ; unsigned char ReplacementFor_b ; ReplacementFor_hash = ReplacementFor_bloomfilter -> ReplacementFor_hash_func ( value ) ; for ( i = ( 0x9a4 + 5667 - 0x1fc7 ) ; i < ReplacementFor_bloomfilter -> ReplacementFor_num_functions ; ++ i ) { ReplacementFor_subhash = ReplacementFor_hash ^ ReplacementFor_salts [ i ] ; index = ReplacementFor_subhash % ReplacementFor_bloomfilter -> ReplacementFor_table_size ; ReplacementFor_b = ( unsigned char ) ( ( 0x24e5 + 12 - 0x24f0 ) << ( index % ( 0xd6f + 2331 - 0x1682 ) ) ) ; ReplacementFor_bloomfilter -> ReplacementFor_table [ index / ( 0x5c9 + 1756 - 0xc9d ) ] |= ReplacementFor_b ; } }
>>>Func
METHOD main
METHOD_RETURN void
<operator>.assignment ReplacementFor_nres=(0x1ea1+350-0x1fff)
scanf scanf("\x25\x64",&\012ReplacementFor_ntests)
getchar getchar()
getchar getchar()
RETURN return; return;
<operator>.lessThan ReplacementFor_k\012<ReplacementFor_ntests
<operator>.postIncrement ReplacementFor_k++
<operator>.subtraction 0x1ea1+350-0x1fff
<operator>.assignment ReplacementFor_k=(0xed0+3035-0x1aab)
<operator>.assignment ReplacementFor_nres=\012(0x15b8+3436-0x2324)
scanf scanf("\x25\x64",&ReplacementFor_c)
scanf scanf("\x25\x63",&\012ReplacementFor_c1)
scanf scanf("\x25\x64",&ReplacementFor_d)
scanf scanf("\x25\x63",&\012ReplacementFor_c1)
scanf scanf("\x25\x64",&ReplacementFor_n)
scanf scanf("\x25\x63",&ReplacementFor_c1)
printf printf(\012"\x43\x61\x73\x65\x20\x23\x25\x64\x3a\x20\x5b" ReplacementFor_k+\012(0x20c4+770-0x23c5))
printf printf(\012"\x5d" "\n")
<operator>.addition 0x1ea1+350
<operator>.lessThan ReplacementFor_j<\012(0x37c+6482-0x1c4e)
<operator>.postIncrement ReplacementFor_j++
<operator>.greaterThan ReplacementFor_c>(0x6c3+6783-0x2142)
<operator>.greaterThan ReplacementFor_d>(0x14f5+2844-0x2011)
<operator>.lessThan i<ReplacementFor_n
<operator>.postIncrement i++
<operator>.lessThan i<ReplacementFor_nres
<operator>.postIncrement i++
<operator>.subtraction 0xed0+3035-0x1aab
<operator>.subtraction 0x15b8+3436-0x2324
<operator>.assignment ReplacementFor_j=(0xcfc+3759-0x1bab)
<operator>.lessThan i<\012(0x1b3d+1804-0x21c9)
<operator>.postIncrement i++
<operator>.assignment i=\012(0x178b+1274-0x1c85)
scanf scanf("\x25\x63",&ReplacementFor_c1\012)
<operator>.assignment ReplacementFor_res[\012ReplacementFor_nres++]=ReplacementFor_c1
<operator>.addition ReplacementFor_k+\012(0x20c4+770-0x23c5)
<operator>.assignment i=(0x1c6+2629-0xc0b)
<operator>.addition 0xed0+3035
<operator>.addition 0x15b8+3436
<operator>.subtraction 0x37c+6482-0x1c4e
<operator>.assignment i=(0x16bd+2798-0x21ab)
<operator>.assignment ReplacementFor_combine[ReplacementFor_j][i]=\012(0x1854+2592-0x2274)
<operator>.assignment ReplacementFor_oppose[ReplacementFor_j][i]=\012(0x675+1122-0xad7)
<operator>.subtraction 0x6c3+6783-0x2142
<operator>.lessThan i<ReplacementFor_c
<operator>.postIncrement i++
<operator>.subtraction 0x14f5+2844-0x2011
<operator>.lessThan i<ReplacementFor_d
<operator>.postIncrement i++
<operator>.greaterThan ReplacementFor_nres>(0x961+692-0xc15)
<operator>.subtraction 0x20c4+770-0x23c5
<operator>.notEquals i!=\012ReplacementFor_nres-(0x5e7+1417-0xb6f)
<operator>.subtraction 0xcfc+3759-0x1bab
<operator>.addition 0x37c+6482
<operator>.subtraction 0x1b3d+1804-0x21c9
<operator>.addition 0x6c3+6783
<operator>.assignment i=\012(0x187+6613-0x1b5c)
scanf scanf("\x25\x63\x25\x63\x25\x63",&\012ReplacementFor_c1,&ReplacementFor_c2,&ReplacementFor_c3)
<operator>.assignment ReplacementFor_combine[\012ReplacementFor_c1][ReplacementFor_c2]=ReplacementFor_c3
<operator>.assignment ReplacementFor_combine[\012ReplacementFor_c2][ReplacementFor_c1]=ReplacementFor_c3
scanf scanf("\x25\x63",&\012ReplacementFor_c1)
<operator>.addition 0x14f5+2844
<operator>.assignment i=\012(0xcb5+3353-0x19ce)
scanf scanf("\x25\x63\x25\x63",&\012ReplacementFor_c1,&ReplacementFor_c2)
<operator>.assignment ReplacementFor_oppose[ReplacementFor_c1][\012ReplacementFor_c2]=(0x110b+5184-0x254a)
<operator>.assignment ReplacementFor_oppose[ReplacementFor_c2]\012[ReplacementFor_c1]=(0x1d23+470-0x1ef8)
scanf scanf("\x25\x63",&ReplacementFor_c1)
<operator>.subtraction 0x178b+1274-0x1c85
<operator>.addition 0x20c4+770
<operator>.subtraction 0x1c6+2629-0xc0b
printf printf("\x25\x63\x2c\x20",\012ReplacementFor_res[i])
<operator>.addition 0xcfc+3759
<operator>.subtraction 0x16bd+2798-0x21ab
<operator>.addition 0x1b3d+1804
<operator>.subtraction 0x1854+2592-0x2274
<operator>.subtraction 0x675+1122-0xad7
<operator>.addition 0x178b+1274
<operator>.subtraction 0x961+692-0xc15
<operator>.notEquals ReplacementFor_combine[\012ReplacementFor_res[ReplacementFor_nres-(0xc60+6562-0x2601)]][ReplacementFor_c1]\012!=(0x9ba+7493-0x26ff)
<operator>.lessThan ReplacementFor_j<ReplacementFor_nres
<operator>.postIncrement ReplacementFor_j++
<operator>.lessThan ReplacementFor_j<ReplacementFor_nres
<operator>.postIncrement ReplacementFor_nres++
<operator>.addition 0x1c6+2629
<operator>.subtraction ReplacementFor_nres-(0x5e7+1417-0xb6f)
printf printf("\x25\x63",ReplacementFor_res[i])
<operator>.addition 0x16bd+2798
<operator>.addition 0x1854+2592
<operator>.addition 0x675+1122
<operator>.subtraction 0x187+6613-0x1b5c
<operator>.subtraction 0xcb5+3353-0x19ce
<operator>.subtraction 0x110b+5184-0x254a
<operator>.subtraction 0x1d23+470-0x1ef8
<operator>.addition 0x961+692
<operator>.assignment ReplacementFor_res[ReplacementFor_nres-\012(0x1076+2169-0x18ee)]=ReplacementFor_combine[ReplacementFor_res[\012ReplacementFor_nres-(0x1c62+1456-0x2211)]][ReplacementFor_c1]
<operator>.assignment ReplacementFor_j=(0xb02+4822-0x1dd8)
<operator>.assignment ReplacementFor_nres=(0x689+2324-0xf9d)
<operator>.subtraction 0x5e7+1417-0xb6f
<operator>.addition 0x187+6613
<operator>.addition 0xcb5+3353
<operator>.addition 0x110b+5184
<operator>.addition 0x1d23+470
<operator>.subtraction 0x9ba+7493-0x26ff
<operator>.addition 0x5e7+1417
<operator>.addition 0x9ba+7493
<operator>.subtraction 0xb02+4822-0x1dd8
<operator>.subtraction 0x689+2324-0xf9d
<operator>.subtraction ReplacementFor_nres-\012(0x1076+2169-0x18ee)
<operator>.addition 0xb02+4822
<operator>.addition 0x689+2324
<operator>.subtraction ReplacementFor_nres-(0xc60+6562-0x2601)
<operator>.subtraction 0x1076+2169-0x18ee
<operator>.subtraction 0xc60+6562-0x2601
<operator>.addition 0x1076+2169
<operator>.subtraction ReplacementFor_nres-(0x1c62+1456-0x2211)
<operator>.addition 0xc60+6562
<operator>.subtraction 0x1c62+1456-0x2211
<operator>.addition 0x1c62+1456
<operator>.addressOf &ReplacementFor_c
<operator>.addressOf &\012ReplacementFor_c1
<operator>.addressOf &ReplacementFor_d
<operator>.addressOf &\012ReplacementFor_c1
<operator>.addressOf &ReplacementFor_n
<operator>.addressOf &ReplacementFor_c1
<operator>.addressOf &ReplacementFor_c1
<operator>.indirectIndexAccess ReplacementFor_res[\012ReplacementFor_nres++]
<operator>.indirectIndexAccess ReplacementFor_combine[ReplacementFor_j][i]
<operator>.indirectIndexAccess ReplacementFor_oppose[ReplacementFor_j][i]
<operator>.indirectIndexAccess ReplacementFor_combine[ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_oppose[ReplacementFor_j]
<operator>.addressOf &\012ReplacementFor_c1
<operator>.addressOf &ReplacementFor_c2
<operator>.addressOf &ReplacementFor_c3
<operator>.indirectIndexAccess ReplacementFor_combine[\012ReplacementFor_c1][ReplacementFor_c2]
<operator>.indirectIndexAccess ReplacementFor_combine[\012ReplacementFor_c2][ReplacementFor_c1]
<operator>.addressOf &\012ReplacementFor_c1
<operator>.addressOf &\012ReplacementFor_c1
<operator>.addressOf &ReplacementFor_c2
<operator>.indirectIndexAccess ReplacementFor_oppose[ReplacementFor_c1][\012ReplacementFor_c2]
<operator>.indirectIndexAccess ReplacementFor_oppose[ReplacementFor_c2]\012[ReplacementFor_c1]
<operator>.addressOf &ReplacementFor_c1
<operator>.indirectIndexAccess ReplacementFor_res[i]
<operator>.indirectIndexAccess ReplacementFor_combine[\012ReplacementFor_c1]
<operator>.indirectIndexAccess ReplacementFor_combine[\012ReplacementFor_c2]
<operator>.indirectIndexAccess ReplacementFor_oppose[ReplacementFor_c1]
<operator>.indirectIndexAccess ReplacementFor_oppose[ReplacementFor_c2]
<operator>.indirectIndexAccess ReplacementFor_combine[\012ReplacementFor_res[ReplacementFor_nres-(0xc60+6562-0x2601)]][ReplacementFor_c1]
<operator>.indirectIndexAccess ReplacementFor_oppose[ReplacementFor_res[ReplacementFor_j]\012][ReplacementFor_c1]
<operator>.indirectIndexAccess ReplacementFor_res[i]
<operator>.indirectIndexAccess ReplacementFor_combine[\012ReplacementFor_res[ReplacementFor_nres-(0xc60+6562-0x2601)]]
<operator>.indirectIndexAccess ReplacementFor_res[ReplacementFor_nres-\012(0x1076+2169-0x18ee)]
<operator>.indirectIndexAccess ReplacementFor_combine[ReplacementFor_res[\012ReplacementFor_nres-(0x1c62+1456-0x2211)]][ReplacementFor_c1]
<operator>.indirectIndexAccess ReplacementFor_oppose[ReplacementFor_res[ReplacementFor_j]\012]
<operator>.indirectIndexAccess ReplacementFor_res[ReplacementFor_nres-(0xc60+6562-0x2601)]
<operator>.indirectIndexAccess ReplacementFor_combine[ReplacementFor_res[\012ReplacementFor_nres-(0x1c62+1456-0x2211)]]
<operator>.indirectIndexAccess ReplacementFor_res[ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_res[\012ReplacementFor_nres-(0x1c62+1456-0x2211)]
>>>PDG&159 0->3 0->4 0->5 0->6 0->7 0->8 0->9 0->12 0->13 0->14 0->15 0->16 0->17 0->18 0->19 0->20 0->21 0->22 0->23 0->24 0->25 0->26 0->27 0->28 0->29 0->30 0->32 0->33 0->35 0->36 0->37 0->39 0->40 0->41 0->45 0->46 0->47 0->48 0->49 0->50 0->51 0->52 0->53 0->54 0->55 0->56 0->57 0->59 0->60 0->61 0->62 0->63 0->65 0->68 0->69 0->70 0->71 0->72 0->73 0->74 0->75 0->76 0->77 0->78 0->79 0->81 0->82 0->83 0->84 0->85 0->86 0->87 0->88 0->89 0->90 0->91 0->92 0->93 0->94 0->95 0->99 0->100 0->101 0->102 0->103 0->104 0->105 0->106 0->107 0->108 0->109 0->110 0->111 0->112 0->113 0->114 0->115 0->116 0->117 0->118 0->119 2->1 2->1 2->1 3->1 3->7 5->1 6->1 7->1 7->1 7->1 7->7 7->8 7->8 7->11 7->12 7->13 7->14 7->15 7->16 7->17 7->18 7->18 7->19 7->21 7->23 7->24 7->25 7->27 7->30 7->31 7->34 7->37 7->37 7->38 7->40 7->41 7->45 7->48 7->52 7->54 7->55 7->57 7->63 7->69 7->70 7->71 7->73 7->78 7->85 7->120 7->121 7->122 7->123 7->124 7->125 8->1 8->7 9->1 9->2 9->2 10->1 10->1 10->7 11->1 11->1 11->27 11->51 12->1 12->23 12->46 13->15 13->17 13->35 13->36 13->59 13->65 13->68 14->1 14->24 14->49 15->1 15->13 15->17 15->35 15->36 15->65 16->1 16->25 17->1 17->13 17->15 17->35 17->36 17->59 17->62 17->65 17->68 18->1 18->1 19->1 21->1 21->1 21->1 21->21 21->22 21->22 21->32 21->41 21->42 21->55 21->56 21->74 21->75 21->88 22->1 22->21 23->1 23->1 23->1 23->12 23->46 23->46 23->58 23->91 23->100 24->1 24->1 24->1 24->14 24->49 24->49 24->64 24->92 24->101 25->1 25->1 25->16 25->25 25->26 25->26 25->35 25->51 25->79 25->95 25->126 26->1 26->25 27->1 27->1 27->1 27->27 27->28 27->53 27->53 27->86 27->86 27->99 27->105 28->1 28->27 29->1 29->10 29->10 30->1 30->11 30->11 31->1 31->1 31->21 32->1 32->1 32->32 32->33 32->33 32->43 32->44 32->56 32->75 32->76 32->77 32->89 32->90 32->128 32->129 32->130 32->131 33->1 33->32 34->1 34->1 34->25 35->1 35->13 35->15 35->17 35->36 35->59 35->62 35->65 35->68 36->1 36->1 36->1 37->1 38->1 38->1 38->27 41->1 41->21 41->21 42->1 42->1 42->32 43->1 43->1 43->1 44->1 44->1 44->1 45->1 45->23 45->23 46->1 46->1 46->12 46->23 46->46 46->47 46->47 46->59 46->60 46->61 46->62 46->132 46->133 46->134 46->135 46->136 46->137 46->144 46->145 47->1 47->46 48->1 48->24 48->24 49->1 49->1 49->14 49->24 49->49 49->50 49->50 49->65 49->66 49->67 49->68 49->93 49->94 49->102 49->103 49->138 49->139 49->140 49->141 49->142 49->146 49->147 50->1 50->49 51->1 51->1 51->36 51->80 51->84 51->84 51->104 51->106 51->112 51->112 51->114 51->117 51->127 51->148 51->151 51->155 52->1 52->18 52->18 52->37 52->37 53->1 53->1 53->28 53->72 53->87 53->143 53->150 54->1 54->31 54->31 56->1 56->32 56->32 58->1 58->1 58->46 59->1 59->1 59->13 59->15 59->17 59->35 59->36 59->62 59->65 59->68 60->1 60->1 61->1 61->1 61->1 62->13 62->15 62->17 62->35 62->36 62->59 62->65 62->68 64->1 64->1 64->49 65->1 65->1 65->13 65->15 65->17 65->35 65->36 65->68 66->1 66->1 66->1 67->1 67->1 67->1 68->13 68->15 68->17 68->35 68->36 68->65 69->1 69->34 69->34 71->1 71->38 71->38 72->1 72->1 72->87 74->1 74->42 74->42 76->1 76->43 76->43 77->1 77->44 77->44 79->1 79->51 79->51 80->1 80->1 80->1 80->81 80->83 80->96 80->97 80->107 80->109 80->110 80->113 80->115 80->116 80->118 80->119 80->152 80->153 80->156 80->158 81->82 81->83 81->83 81->149 81->154 81->157 82->1 82->81 83->1 83->1 83->36 83->84 83->84 83->98 83->108 83->111 83->127 84->27 84->51 86->1 86->27 86->53 86->53 87->1 87->1 87->72 91->1 91->58 91->58 92->1 92->64 92->64 93->1 93->66 93->66 94->1 94->67 94->67 96->1 96->1 96->1 97->1 97->1 97->81 98->1 98->1 98->27 98->51 99->1 99->86 99->86 104->1 104->80 104->80 107->1 107->97 107->97 108->1 108->98 108->98 109->1 109->116 112->1 112->81 112->109 113->1 113->109 113->109 114->1 114->112 114->112 116->1 116->27 116->51 118->1 118->116 118->116 149->81 149->82
>>>Token void main ( ) { int ReplacementFor_ntests , ReplacementFor_c , ReplacementFor_d , ReplacementFor_n ; char ReplacementFor_c1 , ReplacementFor_c2 , ReplacementFor_c3 ; int i , ReplacementFor_j , ReplacementFor_k ; char ReplacementFor_res [ ( 0xe44 + 2109 - 0x161d ) ] ; int ReplacementFor_nres = ( 0x1ea1 + 350 - 0x1fff ) ; scanf ( " \x25 \x64 " , & ReplacementFor_ntests ) ; for ( ReplacementFor_k = ( 0xed0 + 3035 - 0x1aab ) ; ReplacementFor_k < ReplacementFor_ntests ; ReplacementFor_k ++ ) { ReplacementFor_nres = ( 0x15b8 + 3436 - 0x2324 ) ; for ( ReplacementFor_j = ( 0xcfc + 3759 - 0x1bab ) ; ReplacementFor_j < ( 0x37c + 6482 - 0x1c4e ) ; ReplacementFor_j ++ ) for ( i = ( 0x16bd + 2798 - 0x21ab ) ; i < ( 0x1b3d + 1804 - 0x21c9 ) ; i ++ ) { ReplacementFor_combine [ ReplacementFor_j ] [ i ] = ( 0x1854 + 2592 - 0x2274 ) ; ReplacementFor_oppose [ ReplacementFor_j ] [ i ] = ( 0x675 + 1122 - 0xad7 ) ; } scanf ( " \x25 \x64 " , & ReplacementFor_c ) ; scanf ( " \x25 \x63 " , & ReplacementFor_c1 ) ; if ( ReplacementFor_c > ( 0x6c3 + 6783 - 0x2142 ) ) { for ( i = ( 0x187 + 6613 - 0x1b5c ) ; i < ReplacementFor_c ; i ++ ) { scanf ( " \x25 \x63 \x25 \x63 \x25 \x63 " , & ReplacementFor_c1 , & ReplacementFor_c2 , & ReplacementFor_c3 ) ; ReplacementFor_combine [ ReplacementFor_c1 ] [ ReplacementFor_c2 ] = ReplacementFor_c3 ; ReplacementFor_combine [ ReplacementFor_c2 ] [ ReplacementFor_c1 ] = ReplacementFor_c3 ; scanf ( " \x25 \x63 " , & ReplacementFor_c1 ) ; } } scanf ( " \x25 \x64 " , & ReplacementFor_d ) ; scanf ( " \x25 \x63 " , & ReplacementFor_c1 ) ; if ( ReplacementFor_d > ( 0x14f5 + 2844 - 0x2011 ) ) { for ( i = ( 0xcb5 + 3353 - 0x19ce ) ; i < ReplacementFor_d ; i ++ ) { scanf ( " \x25 \x63 \x25 \x63 " , & ReplacementFor_c1 , & ReplacementFor_c2 ) ; ReplacementFor_oppose [ ReplacementFor_c1 ] [ ReplacementFor_c2 ] = ( 0x110b + 5184 - 0x254a ) ; ReplacementFor_oppose [ ReplacementFor_c2 ] [ ReplacementFor_c1 ] = ( 0x1d23 + 470 - 0x1ef8 ) ; scanf ( " \x25 \x63 " , & ReplacementFor_c1 ) ; } } scanf ( " \x25 \x64 " , & ReplacementFor_n ) ; scanf ( " \x25 \x63 " , & ReplacementFor_c1 ) ; for ( i = ( 0x178b + 1274 - 0x1c85 ) ; i < ReplacementFor_n ; i ++ ) { scanf ( " \x25 \x63 " , & ReplacementFor_c1 ) ; if ( ReplacementFor_nres > ( 0x961 + 692 - 0xc15 ) ) { if ( ReplacementFor_combine [ ReplacementFor_res [ ReplacementFor_nres - ( 0xc60 + 6562 - 0x2601 ) ] ] [ ReplacementFor_c1 ] != ( 0x9ba + 7493 - 0x26ff ) ) { ReplacementFor_res [ ReplacementFor_nres - ( 0x1076 + 2169 - 0x18ee ) ] = ReplacementFor_combine [ ReplacementFor_res [ ReplacementFor_nres - ( 0x1c62 + 1456 - 0x2211 ) ] ] [ ReplacementFor_c1 ] ; continue ; } for ( ReplacementFor_j = ( 0xb02 + 4822 - 0x1dd8 ) ; ReplacementFor_j < ReplacementFor_nres ; ReplacementFor_j ++ ) if ( ReplacementFor_oppose [ ReplacementFor_res [ ReplacementFor_j ] ] [ ReplacementFor_c1 ] ) break ; if ( ReplacementFor_j < ReplacementFor_nres ) { ReplacementFor_nres = ( 0x689 + 2324 - 0xf9d ) ; continue ; } } ReplacementFor_res [ ReplacementFor_nres ++ ] = ReplacementFor_c1 ; } printf ( " \x43 \x61 \x73 \x65 \x20 \x23 \x25 \x64 \x3a \x20 \x5b " , ReplacementFor_k + ( 0x20c4 + 770 - 0x23c5 ) ) ; for ( i = ( 0x1c6 + 2629 - 0xc0b ) ; i < ReplacementFor_nres ; i ++ ) { if ( i != ReplacementFor_nres - ( 0x5e7 + 1417 - 0xb6f ) ) printf ( " \x25 \x63 \x2c \x20 " , ReplacementFor_res [ i ] ) ; else printf ( " \x25 \x63 " , ReplacementFor_res [ i ] ) ; } printf ( " \x5d " " \n " ) ; } getchar ( ) ; getchar ( ) ; return ; }
>>>Func
METHOD ReplacementFor_print_table_row
METHOD_RETURN ANY
PARAM int ReplacementFor_num_width
PARAM int \012ReplacementFor_signum
PARAM int ReplacementFor_name_width
PARAM char const*\012ReplacementFor_signame
>>>PDG&6 0->2 0->3 0->4 0->5 2->1 3->1 4->1 5->1
>>>Token ( ReplacementFor_HAVE_DECL_STRSIGNAL || defined ReplacementFor_strsignal ) ! < ReplacementFor_missing ( ( char ) ( 0x18a8 + 2174 - 0x20ab ) ) > < ReplacementFor_missing ( ( char ) ( 0x120b + 1351 - 0x1717 ) ) > ( < ReplacementFor_missing ( ( char ) ( 0x26b + 5035 - 0x15db ) ) > ReplacementFor_HAVE_DECL_SYS_SIGLIST || defined < ReplacementFor_missing ( ( char ) ( 0x6e6 + 1252 - 0xb8f ) ) > ReplacementFor_sys_siglist )  ReplacementFor_HAVE_DECL__SYS_SIGLIST || defined < ReplacementFor_missing ( ( char ) ( 0xe83 + 2200 - 0x16e0 ) ) > ReplacementFor__sys_siglist  ReplacementFor_lif ReplacementFor_HAVE_DECL___SYS_SIGLIST || defined < ReplacementFor_missing ( ( char ) ( 0x918 +4334 -0x19cb ) ) > ReplacementFor___sys_siglist ReplacementFor_ndif ReplacementFor_ndif ReplacementFor_HAVE_DECL_SYS_SIGLIST || defined < ReplacementFor_missing ( ( char ) ( 0x122 +6945 -0x1c08 ) ) > ReplacementFor_sys_siglist ? ReplacementFor_sys_siglist [ ReplacementFor_signum ] : ( 0x1d71 +1001 -0x215a ) ) ReplacementFor_ndif ReplacementFor_ndef ReplacementFor_strsignal ReplacementFor_ndif ReplacementFor_ndif  static char const ReplacementFor_short_options [ ] = " \x30 \x3a \x3a \x31 \x3a \x3a \x32 \x3a \x3a \x33 \x3a \x3a \x34 \x3a \x3a \x35 \x3a \x3a \x36 \x3a \x3a \x37 \x3a \x3a \x38 \x3a \x3a \x39 \x3a \x3a " " \x41 \x3a \x3a \x42 \x3a \x3a \x43 \x3a \x3a \x44 \x3a \x3a \x45 \x3a \x3a \x46 \x3a \x3a \x47 \x3a \x3a \x48 \x3a \x3a \x49 \x3a \x3a \x4a \x3a \x3a \x4b \x3a \x3a \x4d \x3a \x3a " " \x4e \x3a \x3a \x4f \x3a \x3a \x50 \x3a \x3a \x51 \x3a \x3a \x52 \x3a \x3a \x53 \x3a \x3a \x54 \x3a \x3a \x55 \x3a \x3a \x56 \x3a \x3a \x57 \x3a \x3a \x58 \x3a \x3a \x59 \x3a \x3a \x5a \x3a \x3a " " \x4c \x6c \x6e \x3a \x73 \x3a \x74 " ; static struct ReplacementFor_option const ReplacementFor_long_options [ ] = { { " \x6c \x69 \x73 \x74 " , ReplacementFor_no_argument , NULL , ( ( char ) ( 0x58f + 2510 - 0xef1 ) ) } , { " \x73 \x69 \x67 \x6e \x61 \x6c " , ReplacementFor_required_argument , NULL , ( ( char ) ( 0x13f0 + 382 - 0x14fb ) ) } , { " \x74 \x61 \x62 \x6c \x65 " , ReplacementFor_no_argument , NULL , ( ( char ) ( 0x8d6 + 4920 - 0x1b9a ) ) } , { ReplacementFor_GETOPT_HELP_OPTION_DECL } , { ReplacementFor_GETOPT_VERSION_OPTION_DECL } , { NULL , ( 0x1a2c + 1580 - 0x2058 ) , NULL , ( 0x10e1 + 4949 - 0x2436 ) } } ; void ReplacementFor_usage ( int status ) < ReplacementFor_missing ( ( char ) ( 0x1022 +5654 -0x25fd ) ) > { if ( status != EXIT_SUCCESS ) ReplacementFor_emit_try_help ( ) ; else { printf ( ReplacementFor__ ( " \ " ) , ReplacementFor_program_name , ReplacementFor_program_name , ReplacementFor_program_name ) ; fputs ( ReplacementFor__ ( " \ " ) , stdout ) ; ReplacementFor_emit_mandatory_arg_note ( ) ; fputs ( ReplacementFor__ ( " \
>>>Func
METHOD ReplacementFor_test1
METHOD_RETURN void
<operator>.assignment ReplacementFor_N=\012(0x3af+4779-0x152e)
<operator>.assignment ReplacementFor_features=(0x894+3653-0x16d7)
<operator>.assignment ReplacementFor_num_out=(0x1185+4213-0x21dc)
<operator>.assignment **ReplacementFor_X=(double**)\012malloc(ReplacementFor_N*sizeof(double*))
<operator>.assignment ReplacementFor_W.ReplacementFor_dim1=ReplacementFor_num_out
<operator>.assignment ReplacementFor_W.ReplacementFor_dim2=ReplacementFor_num_out
<operator>.assignment ReplacementFor_W.\012ReplacementFor_dim3=ReplacementFor_features
<operator>.assignment ReplacementFor_W.data=(double*)\012malloc(ReplacementFor_num_out*ReplacementFor_num_out*ReplacementFor_features*\012sizeof(double))
ReplacementFor_test_2d_classes ReplacementFor_test_2d_classes(ReplacementFor_X,ReplacementFor_N)
ReplacementFor_save_2d_data ReplacementFor_save_2d_data("\x74\x65\x73\x74\x31\x2e\x63\x73\x76",\012ReplacementFor_X,ReplacementFor_N,ReplacementFor_features)
ReplacementFor_save_u_matrix ReplacementFor_save_u_matrix("\x77\x31\x31\x2e\x63\x73\x76",&ReplacementFor_W)
ReplacementFor_kohonen_som ReplacementFor_kohonen_som(ReplacementFor_X,&ReplacementFor_W,ReplacementFor_N,\012ReplacementFor_features,ReplacementFor_num_out,1e-4)
ReplacementFor_save_u_matrix ReplacementFor_save_u_matrix("\x77\x31\x32\x2e\x63\x73\x76",&ReplacementFor_W)
free free(ReplacementFor_X)
free free(ReplacementFor_W.data)
<operator>.lessThan i<ReplacementFor_max(\012ReplacementFor_num_out,ReplacementFor_N)
<operator>.postIncrement i++
<operator>.lessThan i<ReplacementFor_N
<operator>.postIncrement i++
free free(ReplacementFor_X[i])
<operator>.subtraction 0x3af+4779-0x152e
<operator>.subtraction 0x894+3653-0x16d7
<operator>.subtraction 0x1185+4213-0x21dc
<operator>.cast (double**)\012malloc(ReplacementFor_N*sizeof(double*))
<operator>.cast (double*)\012malloc(ReplacementFor_num_out*ReplacementFor_num_out*ReplacementFor_features*\012sizeof(double))
<operator>.assignment i=(0x277+1409-0x7f8)
<operator>.assignment i=(0x426+4178-0x1478)
<operator>.addition 0x3af+4779
<operator>.addition 0x894+3653
<operator>.addition 0x1185+4213
malloc malloc(ReplacementFor_N*sizeof(double*))
malloc malloc(ReplacementFor_num_out*ReplacementFor_num_out*ReplacementFor_features*\012sizeof(double))
ReplacementFor_max ReplacementFor_max(\012ReplacementFor_num_out,ReplacementFor_N)
<operator>.lessThan i<ReplacementFor_N
<operator>.lessThan i\012<ReplacementFor_num_out
<operator>.multiplication ReplacementFor_N*sizeof(double*)
<operator>.multiplication ReplacementFor_num_out*ReplacementFor_num_out*ReplacementFor_features*\012sizeof(double)
<operator>.subtraction 0x277+1409-0x7f8
<operator>.assignment ReplacementFor_X[i]=(double*)malloc(ReplacementFor_features*sizeof(double))
<operator>.subtraction 0x426+4178-0x1478
<operator>.multiplication ReplacementFor_num_out*ReplacementFor_num_out*ReplacementFor_features
<operator>.sizeOf sizeof(double)
<operator>.addition 0x277+1409
<operator>.lessThan ReplacementFor_k<ReplacementFor_num_out
<operator>.postIncrement ReplacementFor_k++
<operator>.addition 0x426+4178
<operator>.multiplication ReplacementFor_num_out*ReplacementFor_num_out
<operator>.cast (double*)malloc(ReplacementFor_features*sizeof(double))
<operator>.assignment ReplacementFor_k=(0x451+3113-0x107a)
IDENTIFIER ReplacementFor_ndif <empty>
malloc malloc(ReplacementFor_features*sizeof(double))
<operator>.lessThan ReplacementFor_j<ReplacementFor_features
<operator>.postIncrement ReplacementFor_j++
<operator>.multiplication ReplacementFor_features*sizeof(double)
<operator>.subtraction 0x451+3113-0x107a
<operator>.greaterEqualsThan ReplacementFor_j<\012ReplacementFor_missing((char)(0x350+8514-0x2469))>=(0x15f4+2891-0x213f)
<operator>.assignment *\012ReplacementFor_w=ReplacementFor_kohonen_data_3d(&ReplacementFor_W,i,\012ReplacementFor_k,ReplacementFor_j)
<operator>.assignment ReplacementFor_w[(0x1616+115-0x1689)]=\012ReplacementFor__random(-(0x181b+3496-0x25be) (0x6a+3282-0xd37))
<operator>.sizeOf sizeof(double)
<operator>.addition 0x451+3113
<operator>.lessThan ReplacementFor_j<\012ReplacementFor_missing((char)(0x350+8514-0x2469))
<operator>.subtraction 0x15f4+2891-0x213f
ReplacementFor_kohonen_data_3d ReplacementFor_kohonen_data_3d(&ReplacementFor_W,i,\012ReplacementFor_k,ReplacementFor_j)
ReplacementFor__random ReplacementFor__random(-(0x181b+3496-0x25be) (0x6a+3282-0xd37))
ReplacementFor_missing ReplacementFor_missing((char)(0x350+8514-0x2469))
<operator>.addition 0x15f4+2891
<operator>.subtraction 0x1616+115-0x1689
<operator>.minus -(0x181b+3496-0x25be)
<operator>.subtraction 0x6a+3282-0xd37
<operator>.cast (char)(0x350+8514-0x2469)
<operator>.addition 0x1616+115
<operator>.subtraction 0x181b+3496-0x25be
<operator>.addition 0x6a+3282
<operator>.subtraction 0x350+8514-0x2469
<operator>.addition 0x181b+3496
<operator>.addition 0x350+8514
<operator>.indirectIndexAccess ReplacementFor_X[i]
<operator>.indirectIndexAccess ReplacementFor_X[i]
UNKNOWN double* double*
UNKNOWN P P
UNKNOWN f f
<operator>.indirectIndexAccess ReplacementFor_w[(0x1616+115-0x1689)]
<operator>.addressOf &ReplacementFor_W
UNKNOWN char char
>>>PDG&86 0->6 0->7 0->8 0->10 0->11 0->12 0->13 0->14 0->15 0->16 0->17 0->18 0->19 0->20 0->22 0->23 0->24 0->29 0->30 0->31 0->34 0->35 0->36 0->37 0->39 0->41 0->42 0->44 0->45 0->46 0->47 0->48 0->51 0->53 0->54 0->55 0->56 0->61 0->62 0->63 0->64 0->67 0->68 0->70 0->72 0->73 0->74 0->75 0->76 0->77 2->1 2->1 2->37 3->1 3->1 3->8 3->42 4->1 4->1 4->6 4->7 4->48 5->1 5->1 5->10 6->1 6->1 6->12 6->13 6->14 6->16 6->64 7->1 7->1 7->12 7->13 7->14 7->16 7->64 8->1 8->1 8->12 8->13 8->14 8->16 8->64 9->1 9->1 9->12 9->13 9->14 9->16 9->64 10->1 10->11 10->11 11->1 11->13 11->13 11->13 12->1 12->13 12->14 12->16 13->1 13->1 13->1 13->14 13->15 13->16 13->19 13->21 14->1 14->1 15->1 16->1 17->1 17->1 17->17 17->18 17->34 17->35 17->35 17->36 18->1 18->17 19->1 19->1 19->1 19->19 19->20 19->20 19->21 19->78 20->1 20->19 21->1 21->15 22->1 22->2 22->2 23->1 23->3 23->3 24->1 24->4 24->4 25->1 26->1 27->1 27->1 27->17 28->1 28->1 28->19 32->1 32->5 32->25 33->1 33->9 33->26 34->10 34->13 34->17 34->17 34->35 34->36 35->34 35->36 35->40 35->49 35->52 35->55 35->60 35->79 35->80 36->1 36->18 36->34 36->45 36->45 36->50 36->56 36->61 36->64 37->32 37->34 38->1 38->33 39->1 39->27 39->27 40->1 40->1 40->1 40->10 40->11 40->13 40->15 40->21 41->1 41->28 41->28 42->1 42->11 42->38 42->38 42->53 42->55 43->1 45->1 45->1 45->34 45->45 45->46 45->46 45->53 45->57 45->62 45->63 45->64 45->66 45->67 45->71 45->75 45->77 45->81 45->82 45->85 46->1 46->45 48->34 48->42 49->1 50->1 50->1 50->45 52->1 52->40 52->49 53->1 53->1 53->11 53->53 53->54 53->55 53->58 53->59 53->62 53->64 53->64 53->65 53->68 53->69 53->70 53->72 53->73 53->74 53->76 53->83 53->84 54->1 54->53 55->11 55->52 55->53 56->1 56->50 56->50 57->1 57->1 57->1 58->1 58->1 58->1 59->1 59->1 59->1 60->1 62->1 62->53 62->57 62->57 63->1 63->57 63->57 64->12 64->13 64->14 64->16 64->18 64->46 64->54 64->58 64->58 64->58 64->58 65->1 65->1 65->59 65->59 66->1 66->62 68->1 69->1 69->65 70->1 70->65 70->65 71->1 73->1 73->69 73->69 75->1 75->66 75->66 75->71 75->71
>>>Token void ReplacementFor_test1 ( ) { int ReplacementFor_j , ReplacementFor_N = ( 0x3af + 4779 - 0x152e ) ; int ReplacementFor_features = ( 0x894 + 3653 - 0x16d7 ) ; int ReplacementFor_num_out = ( 0x1185 + 4213 - 0x21dc ) ; double * * ReplacementFor_X = ( double * * ) malloc ( ReplacementFor_N * sizeof ( double * ) ) ; struct ReplacementFor_kohonen_array_3d ReplacementFor_W ; ReplacementFor_W . ReplacementFor_dim1 = ReplacementFor_num_out ; ReplacementFor_W . ReplacementFor_dim2 = ReplacementFor_num_out ; ReplacementFor_W . ReplacementFor_dim3 = ReplacementFor_features ; ReplacementFor_W . data = ( double * ) malloc ( ReplacementFor_num_out * ReplacementFor_num_out * ReplacementFor_features * sizeof ( double ) ) ; for ( int i = ( 0x277 + 1409 - 0x7f8 ) ; i < ReplacementFor_max ( ReplacementFor_num_out , ReplacementFor_N ) ; i ++ ) { if ( i < ReplacementFor_N ) ReplacementFor_X [ i ] = ( double * ) malloc ( ReplacementFor_features * sizeof ( double ) ) ; if ( i < ReplacementFor_num_out ) { for ( int ReplacementFor_k = ( 0x451 + 3113 - 0x107a ) ; ReplacementFor_k < ReplacementFor_num_out ; ReplacementFor_k ++ ) { ReplacementFor_def ReplacementFor__OPENMP  ReplacementFor_ndif for ( ReplacementFor_j < ReplacementFor_missing ( ( char ) ( 0x350 +8514 -0x2469 ) ) >= ( 0x15f4 +2891 -0x213f ) ; ReplacementFor_j < ReplacementFor_features ; ReplacementFor_j ++ ) { double * ReplacementFor_w = ReplacementFor_kohonen_data_3d ( & ReplacementFor_W , i , ReplacementFor_k , ReplacementFor_j ) ; ReplacementFor_w [ ( 0x1616 + 115 - 0x1689 ) ] = ReplacementFor__random ( - ( 0x181b + 3496 - 0x25be ) , ( 0x6a + 3282 - 0xd37 ) ) ; } } } } ReplacementFor_test_2d_classes ( ReplacementFor_X , ReplacementFor_N ) ; ReplacementFor_save_2d_data ( " \x74 \x65 \x73 \x74 \x31 \x2e \x63 \x73 \x76 " , ReplacementFor_X , ReplacementFor_N , ReplacementFor_features ) ; ReplacementFor_save_u_matrix ( " \x77 \x31 \x31 \x2e \x63 \x73 \x76 " , & ReplacementFor_W ) ; ReplacementFor_kohonen_som ( ReplacementFor_X , & ReplacementFor_W , ReplacementFor_N , ReplacementFor_features , ReplacementFor_num_out , 1e-4 ) ; ReplacementFor_save_u_matrix ( " \x77 \x31 \x32 \x2e \x63 \x73 \x76 " , & ReplacementFor_W ) ; for ( int i = ( 0x426 + 4178 - 0x1478 ) ; i < ReplacementFor_N ; i ++ ) free ( ReplacementFor_X [ i ] ) ; free ( ReplacementFor_X ) ; free ( ReplacementFor_W . data ) ; }
>>>Func
METHOD ReplacementFor_readFile
METHOD_RETURN char*
PARAM char*name
<operator>.assignment ReplacementFor_inputFile=fopen(name,"\x72")
fseek fseek(ReplacementFor_inputFile,0L,\012SEEK_END)
<operator>.assignment ReplacementFor_fileLen=ftell(ReplacementFor_inputFile)
rewind rewind(\012ReplacementFor_inputFile)
<operator>.assignment ReplacementFor_stringFile=(char*)malloc(sizeof(char)*\012ReplacementFor_fileLen)
fclose fclose(ReplacementFor_inputFile)
RETURN return ReplacementFor_stringFile; return ReplacementFor_stringFile;
<operator>.equals ReplacementFor_inputFile==NULL
<operator>.notEquals (ReplacementFor_readLen=fread(\012ReplacementFor_stringFile (0x7bd+1315-0xcdf),ReplacementFor_fileLen,\012ReplacementFor_inputFile))!=ReplacementFor_fileLen
IDENTIFIER ReplacementFor_stringFile return ReplacementFor_stringFile;
fopen fopen(name,"\x72")
fprintf fprintf(stderr \012"\x45\x72\x72\x6f\x72\x20\x6f\x70\x65\x6e\x69\x6e\x67\x20\x25\x73\x3a\x20\x25\x73\x20\x28\x25\x75\x29" "\n"\012 name strerror(errno),errno)
RETURN return NULL; return NULL;
ftell ftell(ReplacementFor_inputFile)
<operator>.cast (char*)malloc(sizeof(char)*\012ReplacementFor_fileLen)
fprintf fprintf(stderr,\012"\x52\x65\x61\x64\x20\x25\x6c\x64\x20\x6f\x66\x20\x25\x6c\x64" "\n",\012ReplacementFor_readLen,ReplacementFor_fileLen)
fclose fclose(ReplacementFor_inputFile)
RETURN return NULL; return NULL;
IDENTIFIER NULL return NULL;
malloc malloc(sizeof(char)*\012ReplacementFor_fileLen)
<operator>.assignment ReplacementFor_readLen=fread(\012ReplacementFor_stringFile (0x7bd+1315-0xcdf),ReplacementFor_fileLen,\012ReplacementFor_inputFile)
IDENTIFIER NULL return NULL;
strerror strerror(errno)
<operator>.multiplication sizeof(char)*\012ReplacementFor_fileLen
fread fread(\012ReplacementFor_stringFile (0x7bd+1315-0xcdf),ReplacementFor_fileLen,\012ReplacementFor_inputFile)
<operator>.sizeOf sizeof(char)
<operator>.subtraction 0x7bd+1315-0xcdf
<operator>.addition 0x7bd+1315
UNKNOWN char* char*
>>>PDG&32 0->2 0->4 0->6 0->8 0->10 0->11 0->12 0->13 0->14 0->15 0->16 0->18 0->19 0->20 0->21 0->24 0->25 0->26 0->27 0->29 0->30 2->13 3->1 3->1 3->10 4->1 4->16 5->26 6->27 7->27 9->1 10->1 10->1 10->1 10->4 10->4 10->5 10->6 10->7 10->11 10->14 10->15 10->16 10->17 10->22 10->23 10->25 10->26 10->27 10->28 10->29 10->30 10->31 11->8 11->9 11->18 11->18 11->19 11->20 12->9 13->3 13->3 13->14 14->1 14->1 14->1 14->1 14->1 15->1 16->5 16->6 20->1 21->15 22->7 22->17 23->11 23->18 24->20 25->14 26->22 26->27 27->8 27->11 27->11 27->11 27->11 27->12 27->19 27->23 27->23 27->23 27->23 28->1 29->27 29->27
>>>Token char * ReplacementFor_readFile ( char * name ) { FILE * ReplacementFor_inputFile ; long ReplacementFor_fileLen ; long ReplacementFor_readLen ; char * ReplacementFor_stringFile ; ReplacementFor_inputFile = fopen ( name , " \x72 " ) ; if ( ReplacementFor_inputFile == NULL ) { fprintf ( stderr , " \x45 \x72 \x72 \x6f \x72 \x20 \x6f \x70 \x65 \x6e \x69 \x6e \x67 \x20 \x25 \x73 \x3a \x20 \x25 \x73 \x20 \x28 \x25 \x75 \x29 " " \n " , name , strerror ( errno ) , errno ) ; return NULL ; } fseek ( ReplacementFor_inputFile , 0L , SEEK_END ) ; ReplacementFor_fileLen = ftell ( ReplacementFor_inputFile ) ; rewind ( ReplacementFor_inputFile ) ; ReplacementFor_stringFile = ( char * ) malloc ( sizeof ( char ) * ReplacementFor_fileLen ) ; if ( ( ReplacementFor_readLen = fread ( ReplacementFor_stringFile , ( 0x7bd + 1315 - 0xcdf ) , ReplacementFor_fileLen , ReplacementFor_inputFile ) ) != ReplacementFor_fileLen ) { fprintf ( stderr , " \x52 \x65 \x61 \x64 \x20 \x25 \x6c \x64 \x20 \x6f \x66 \x20 \x25 \x6c \x64 " " \n " , ReplacementFor_readLen , ReplacementFor_fileLen ) ; fclose ( ReplacementFor_inputFile ) ; return NULL ; } fclose ( ReplacementFor_inputFile ) ; return ReplacementFor_stringFile ; }
>>>Func
METHOD ReplacementFor_getString
METHOD_RETURN char*
PARAM size_t T
<operator>.assignment *\012ReplacementFor_Z=malloc(sizeof(char)*T)
<operator>.assignment ReplacementFor_Z[\012(0xad1+1472-0x1091)]=ReplacementFor_C
RETURN return \012ReplacementFor_Z; return \012ReplacementFor_Z;
<operator>.equals ReplacementFor_C==((char)(0x9a5+3656-0x17cd))
<operator>.lessThan t<T
<operator>.preIncrement ++t
IDENTIFIER ReplacementFor_Z return \012ReplacementFor_Z;
malloc malloc(sizeof(char)*T)
<operator>.assignment ReplacementFor_C=getChar()
<operator>.assignment t=(0x61a+2270-0xef7)
<operator>.assignment ReplacementFor_C=getChar()
<operator>.assignment ReplacementFor_Z[t]=ReplacementFor_C
<operator>.multiplication sizeof(char)*T
<operator>.cast (char)(0x9a5+3656-0x17cd)
<operator>.subtraction 0xad1+1472-0x1091
<operator>.sizeOf sizeof(char)
<operator>.subtraction 0x9a5+3656-0x17cd
<operator>.addition 0xad1+1472
<operator>.subtraction 0x61a+2270-0xef7
<operator>.addition 0x9a5+3656
<operator>.addition 0x61a+2270
getChar getChar()
UNKNOWN char char
getChar getChar()
<operator>.indirectIndexAccess ReplacementFor_Z[t]
>>>PDG&28 0->2 0->4 0->6 0->7 0->8 0->9 0->11 0->13 0->14 0->15 0->17 0->19 0->20 0->21 0->22 0->23 2->15 3->1 3->1 3->1 3->9 4->1 4->1 4->1 4->9 5->1 6->1 6->1 6->4 6->6 6->11 6->16 6->19 6->22 6->24 6->25 7->1 7->1 7->1 7->7 7->8 7->8 7->13 7->14 7->26 7->27 8->1 8->7 9->5 10->1 10->3 11->1 11->1 11->6 12->1 12->1 12->7 13->1 13->1 13->14 14->1 14->1 14->1 14->9 15->7 15->10 16->1 17->1 18->1 19->1 19->6 19->6 19->16 19->16 21->1 21->12 21->12
>>>Token char * ReplacementFor_getString ( size_t T ) { char ReplacementFor_C ; char * ReplacementFor_Z = malloc ( sizeof ( char ) * T ) ; do { ReplacementFor_C = getChar ( ) ; } while ( ReplacementFor_C == ( ( char ) ( 0x9a5 + 3656 - 0x17cd ) ) ) ; ReplacementFor_Z [ ( 0xad1 + 1472 - 0x1091 ) ] = ReplacementFor_C ; for ( int t = ( 0x61a + 2270 - 0xef7 ) ; t < T ; ++ t ) { ReplacementFor_C = getChar ( ) ; ReplacementFor_Z [ t ] = ReplacementFor_C ; } return ReplacementFor_Z ; }
>>>Func
METHOD ReplacementFor_avl_tree_free
METHOD_RETURN void
PARAM ReplacementFor_AVLTree*ReplacementFor_tree
ReplacementFor_avl_tree_free_subtree ReplacementFor_avl_tree_free_subtree(ReplacementFor_tree,ReplacementFor_tree->\012ReplacementFor_root_node)
free free(ReplacementFor_tree)
>>>PDG&5 0->2 0->3 0->4 2->3 3->1 3->1 3->4 4->1
>>>Token void ReplacementFor_avl_tree_free ( ReplacementFor_AVLTree * ReplacementFor_tree ) { ReplacementFor_avl_tree_free_subtree ( ReplacementFor_tree , ReplacementFor_tree -> ReplacementFor_root_node ) ; free ( ReplacementFor_tree ) ; }
>>>Func
METHOD ReplacementFor_isintrio
METHOD_RETURN char
PARAM char ReplacementFor_a
PARAM char ReplacementFor_b
PARAM ReplacementFor_trio ReplacementFor_trios[(0x213f+1260-0x2607)]
PARAM int \012ReplacementFor_n
RETURN return((char)(0xc4c+4473-0x1da4)); return((char)(0xc4c+4473-0x1da4));
<operator>.lessThan i<ReplacementFor_n
<operator>.postIncrement i++
<operator>.cast (char)(0xc4c+4473-0x1da4)
<operator>.assignment i=(0x1b95+1680-0x2225)
printf printf("\x41\x4e\x54\x45\x53\x20\x52\x45\x54\x4f\x52\x4e\x4f\x3a\x20\x25\x63" \012ReplacementFor_trios[i][(0xb0c+710-0xdd1)] ReplacementFor_trios[i][\012(0x95c+1152-0xddc)])
<operator>.logicalOr ((ReplacementFor_a==ReplacementFor_trios[i][\012(0x59d+3489-0x133e)])&&(ReplacementFor_b==ReplacementFor_trios[i][\012(0x256+9295-0x26a4)]))||((ReplacementFor_a==ReplacementFor_trios[i][\012(0x1544+1845-0x1c78)])&&(ReplacementFor_b==ReplacementFor_trios[i][\012(0x12da+1802-0x19e4)]))
<operator>.subtraction 0xc4c+4473-0x1da4
<operator>.subtraction 0x1b95+1680-0x2225
printf printf("\x52\x45\x54\x4f\x52\x4e\x4f\x3a\x20\x25\x63" \012ReplacementFor_trios[i][(0x902+131-0x983)])
RETURN return ReplacementFor_trios[i][\012(0x62d+2579-0x103e)]; return ReplacementFor_trios[i][\012(0x62d+2579-0x103e)];
<operator>.addition 0xc4c+4473
<operator>.addition 0x1b95+1680
<operator>.subtraction 0xb0c+710-0xdd1
<operator>.subtraction 0x95c+1152-0xddc
<operator>.logicalAnd (ReplacementFor_a==ReplacementFor_trios[i][\012(0x59d+3489-0x133e)])&&(ReplacementFor_b==ReplacementFor_trios[i][\012(0x256+9295-0x26a4)])
<operator>.logicalAnd (ReplacementFor_a==ReplacementFor_trios[i][\012(0x1544+1845-0x1c78)])&&(ReplacementFor_b==ReplacementFor_trios[i][\012(0x12da+1802-0x19e4)])
<operator>.addition 0xb0c+710
<operator>.addition 0x95c+1152
<operator>.equals ReplacementFor_a==ReplacementFor_trios[i][\012(0x59d+3489-0x133e)]
<operator>.equals ReplacementFor_b==ReplacementFor_trios[i][\012(0x256+9295-0x26a4)]
<operator>.equals ReplacementFor_a==ReplacementFor_trios[i][\012(0x1544+1845-0x1c78)]
<operator>.equals ReplacementFor_b==ReplacementFor_trios[i][\012(0x12da+1802-0x19e4)]
<operator>.subtraction 0x902+131-0x983
<operator>.subtraction 0x62d+2579-0x103e
<operator>.subtraction 0x59d+3489-0x133e
<operator>.subtraction 0x256+9295-0x26a4
<operator>.subtraction 0x1544+1845-0x1c78
<operator>.subtraction 0x12da+1802-0x19e4
<operator>.addition 0x902+131
<operator>.addition 0x62d+2579
<operator>.addition 0x59d+3489
<operator>.addition 0x256+9295
<operator>.addition 0x1544+1845
<operator>.addition 0x12da+1802
UNKNOWN char char
<operator>.indirectIndexAccess ReplacementFor_trios[i][(0xb0c+710-0xdd1)]
<operator>.indirectIndexAccess ReplacementFor_trios[i][\012(0x95c+1152-0xddc)]
<operator>.indirectIndexAccess ReplacementFor_trios[i]
<operator>.indirectIndexAccess ReplacementFor_trios[i]
<operator>.indirectIndexAccess ReplacementFor_trios[i][(0x902+131-0x983)]
<operator>.indirectIndexAccess ReplacementFor_trios[i][\012(0x62d+2579-0x103e)]
<operator>.indirectIndexAccess ReplacementFor_trios[i][\012(0x59d+3489-0x133e)]
<operator>.indirectIndexAccess ReplacementFor_trios[i][\012(0x256+9295-0x26a4)]
<operator>.indirectIndexAccess ReplacementFor_trios[i][\012(0x1544+1845-0x1c78)]
<operator>.indirectIndexAccess ReplacementFor_trios[i][\012(0x12da+1802-0x19e4)]
<operator>.indirectIndexAccess ReplacementFor_trios[i]
<operator>.indirectIndexAccess ReplacementFor_trios[i]
<operator>.indirectIndexAccess ReplacementFor_trios[i]
<operator>.indirectIndexAccess ReplacementFor_trios[i]
<operator>.indirectIndexAccess ReplacementFor_trios[i]
<operator>.indirectIndexAccess ReplacementFor_trios[i]
>>>PDG&58 0->2 0->3 0->4 0->5 0->7 0->8 0->11 0->13 0->14 0->15 0->16 0->17 0->18 0->19 0->20 0->23 0->24 0->25 0->26 0->27 0->28 0->29 0->30 0->31 0->32 0->33 0->34 0->35 0->36 0->37 0->38 0->39 0->40 2->25 3->1 3->26 3->28 4->1 5->7 6->1 7->1 7->1 7->1 7->6 7->8 7->9 7->11 7->12 7->13 7->17 7->19 7->20 7->21 7->23 7->24 7->25 7->31 7->37 7->41 7->42 7->43 7->44 7->45 7->48 7->54 8->1 8->7 9->6 10->1 10->1 10->7 11->1 11->1 11->1 12->1 12->1 12->1 12->7 12->8 12->15 12->16 12->29 12->30 12->35 12->36 12->46 12->47 12->52 12->53 13->9 13->9 14->1 14->10 14->10 15->1 15->1 16->1 19->1 20->1 21->1 21->1 21->12 21->12 21->22 21->27 21->33 21->39 21->50 21->56 22->1 22->1 22->12 22->12 25->1 25->1 25->21 25->21 25->26 25->27 25->32 25->38 25->49 25->55 26->1 26->1 26->21 26->21 26->28 27->1 27->1 27->22 27->22 27->25 27->28 27->34 27->40 27->51 27->57 28->1 28->1 28->22 28->22 28->26 29->1 30->1 31->1 32->1 33->1 34->1
>>>Token char ReplacementFor_isintrio ( char ReplacementFor_a , char ReplacementFor_b , ReplacementFor_trio ReplacementFor_trios [ ( 0x213f + 1260 - 0x2607 ) ] , int ReplacementFor_n ) { int i ; for ( i = ( 0x1b95 + 1680 - 0x2225 ) ; i < ReplacementFor_n ; i ++ ) { printf ( " \x41 \x4e \x54 \x45 \x53 \x20 \x52 \x45 \x54 \x4f \x52 \x4e \x4f \x3a \x20 \x25 \x63 " , ReplacementFor_trios [ i ] [ ( 0xb0c + 710 - 0xdd1 ) ] , ReplacementFor_trios [ i ] [ ( 0x95c + 1152 - 0xddc ) ] ) ; if ( ( ( ReplacementFor_a == ReplacementFor_trios [ i ] [ ( 0x59d + 3489 - 0x133e ) ] ) && ( ReplacementFor_b == ReplacementFor_trios [ i ] [ ( 0x256 + 9295 - 0x26a4 ) ] ) ) || ( ( ReplacementFor_a == ReplacementFor_trios [ i ] [ ( 0x1544 + 1845 - 0x1c78 ) ] ) && ( ReplacementFor_b == ReplacementFor_trios [ i ] [ ( 0x12da + 1802 - 0x19e4 ) ] ) ) ) { printf ( " \x52 \x45 \x54 \x4f \x52 \x4e \x4f \x3a \x20 \x25 \x63 " , ReplacementFor_trios [ i ] [ ( 0x902 + 131 - 0x983 ) ] ) ; return ReplacementFor_trios [ i ] [ ( 0x62d + 2579 - 0x103e ) ] ; } } return ( ( char ) ( 0xc4c + 4473 - 0x1da4 ) ) ; }
>>>Func
METHOD ReplacementFor_addOpposite
METHOD_RETURN void
PARAM char e
ReplacementFor_sumOpposite ReplacementFor_sumOpposite(e \012(0x1094+2074-0x18ad))
<operator>.subtraction 0x1094+2074-0x18ad
<operator>.addition 0x1094+2074
>>>PDG&6 0->2 0->3 0->4 0->5 2->3 3->1 3->1 3->1 4->1 4->3 4->3
>>>Token void ReplacementFor_addOpposite ( char e ) { ReplacementFor_sumOpposite ( e , ( 0x1094 + 2074 - 0x18ad ) ) ; }
>>>Func
METHOD ReplacementFor_reverse
METHOD_RETURN struct ReplacementFor_ListNode
PARAM struct \012ReplacementFor_ListNode*ReplacementFor_head
<operator>.assignment *\012ReplacementFor_res=NULL
RETURN return \012ReplacementFor_res; return \012ReplacementFor_res;
IDENTIFIER ReplacementFor_head while (ReplacementFor_head)
IDENTIFIER ReplacementFor_res return \012ReplacementFor_res;
<operator>.assignment *ReplacementFor_pre_node=ReplacementFor_head
<operator>.assignment ReplacementFor_head=ReplacementFor_head->next
<operator>.assignment ReplacementFor_pre_node->next=\012ReplacementFor_res
<operator>.assignment ReplacementFor_res=ReplacementFor_pre_node
>>>PDG&11 0->2 0->3 0->5 0->6 0->7 0->9 0->10 2->1 2->7 3->1 3->1 3->1 3->6 3->9 4->1 6->4 7->1 7->10 8->1 8->1 8->1 8->7 9->1 9->1 10->1 10->1 10->1 10->6 10->9
>>>Token struct ReplacementFor_ListNode * ReplacementFor_reverse ( struct ReplacementFor_ListNode * ReplacementFor_head ) { struct ReplacementFor_ListNode * ReplacementFor_res = NULL ; while ( ReplacementFor_head ) { struct ReplacementFor_ListNode * ReplacementFor_pre_node = ReplacementFor_head ; ReplacementFor_head = ReplacementFor_head -> next ; ReplacementFor_pre_node -> next = ReplacementFor_res ; ReplacementFor_res = ReplacementFor_pre_node ; } return ReplacementFor_res ; }
>>>Func
METHOD ReplacementFor_arraylist_remove_range
METHOD_RETURN void
PARAM ReplacementFor_ArrayList*\012ReplacementFor_arraylist
PARAM unsigned int index
PARAM unsigned int ReplacementFor_length
memmove memmove(&ReplacementFor_arraylist->data[index] &ReplacementFor_arraylist->data[\012index+ReplacementFor_length] (ReplacementFor_arraylist->ReplacementFor_length-(\012index+ReplacementFor_length))*sizeof(ReplacementFor_ArrayListValue))
<operator>.assignmentMinus ReplacementFor_arraylist->ReplacementFor_length-=ReplacementFor_length
<operator>.logicalOr index>ReplacementFor_arraylist->ReplacementFor_length||index+\012ReplacementFor_length>ReplacementFor_arraylist->ReplacementFor_length
RETURN return; return;
<operator>.multiplication (ReplacementFor_arraylist->ReplacementFor_length-(\012index+ReplacementFor_length))*sizeof(ReplacementFor_ArrayListValue)
<operator>.greaterThan index>ReplacementFor_arraylist->ReplacementFor_length
<operator>.greaterThan index+\012ReplacementFor_length>ReplacementFor_arraylist->ReplacementFor_length
<operator>.subtraction ReplacementFor_arraylist->ReplacementFor_length-(\012index+ReplacementFor_length)
<operator>.sizeOf sizeof(ReplacementFor_ArrayListValue)
<operator>.addition index+\012ReplacementFor_length
<operator>.addition index+ReplacementFor_length
<operator>.addition index+ReplacementFor_length
<operator>.addressOf &ReplacementFor_arraylist->data[index]
<operator>.addressOf &ReplacementFor_arraylist->data[\012index+ReplacementFor_length]
<operator>.indirectFieldAccess ReplacementFor_arraylist->ReplacementFor_length
<operator>.indirectIndexAccess ReplacementFor_arraylist->data[index]
<operator>.indirectIndexAccess ReplacementFor_arraylist->data[\012index+ReplacementFor_length]
FIELD_IDENTIFIER ReplacementFor_length ReplacementFor_length
<operator>.indirectFieldAccess ReplacementFor_arraylist->ReplacementFor_length
<operator>.indirectFieldAccess ReplacementFor_arraylist->data
<operator>.indirectFieldAccess ReplacementFor_arraylist->data
<operator>.indirectFieldAccess ReplacementFor_arraylist->ReplacementFor_length
FIELD_IDENTIFIER ReplacementFor_length ReplacementFor_length
FIELD_IDENTIFIER data data
FIELD_IDENTIFIER data data
FIELD_IDENTIFIER ReplacementFor_length ReplacementFor_length
>>>PDG&31 0->2 0->3 0->4 0->6 0->8 0->10 0->11 0->12 0->14 0->15 0->16 2->1 3->10 4->1 4->6 4->11 4->12 4->14 4->15 4->16 7->1 7->1 7->1 7->5 7->6 7->8 7->9 7->12 7->13 7->15 7->16 7->17 7->18 7->19 7->20 7->21 7->22 7->24 7->25 7->26 7->28 7->29 7->30 8->1 9->5 10->1 10->1 10->7 10->7 10->11 10->11 10->11 10->12 10->12 10->14 10->14 10->15 10->16 10->23 10->27 11->1 11->1 11->7 11->7 11->12 12->6 12->9 12->9 13->1 14->1 14->1
>>>Token void ReplacementFor_arraylist_remove_range ( ReplacementFor_ArrayList * ReplacementFor_arraylist , unsigned int index , unsigned int ReplacementFor_length ) { if ( index > ReplacementFor_arraylist -> ReplacementFor_length || index + ReplacementFor_length > ReplacementFor_arraylist -> ReplacementFor_length ) { return ; } memmove ( & ReplacementFor_arraylist -> data [ index ] , & ReplacementFor_arraylist -> data [ index + ReplacementFor_length ] , ( ReplacementFor_arraylist -> ReplacementFor_length - ( index + ReplacementFor_length ) ) * sizeof ( ReplacementFor_ArrayListValue ) ) ; ReplacementFor_arraylist -> ReplacementFor_length -= ReplacementFor_length ; }
>>>Func
>>>PDG&0
>>>Token static inline int ReplacementFor_Rint ( ) { struct ReplacementFor_X { int ReplacementFor_dig [ ( 0xa87 + 35 - 0x9aa ) ] ; ReplacementFor_X < ReplacementFor_missing ( ( char ) ( 0x581 +4932 -0x1848 ) ) > < ReplacementFor_missing ( ( char ) ( 0x7af +7137 -0x2355 ) ) > < ReplacementFor_missing ( ( char ) ( 0x914 +6847 -0x2398 ) ) > ( ) < ReplacementFor_missing ( ( char ) ( 0x104 +8834 -0x234b ) ) > { for ( int i = ( ( char ) ( 0x1839 +2544 -0x21f9 ) ) ; i <= ( ( char ) ( 0x19d0 +3150 -0x25e5 ) ) ; ++ i ) ReplacementFor_dig [ i ] = ( 0xd02 +125 -0xd7e ) ; ReplacementFor_dig  [ ( ( char ) ( 0xcd0 + 3121 - 0x18d4 ) ) ] = ( 0x172b +2398 -0x2088 ) ; }  }
>>>Func
METHOD ReplacementFor_test
METHOD_RETURN void
<operator>.assignment *ReplacementFor_ret=NULL
<operator>.assignment *\012ReplacementFor_reference=NULL
<operator>.assignment ReplacementFor_reference="\x30"
<operator>.assignment ReplacementFor_ret\012=ReplacementFor_decimal_to_anybase((0x89+10-0x93),\012"\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39")
<operator>.assignment ReplacementFor_reference=\012"\x31\x38\x34\x34\x36\x37\x34\x34\x30\x37\x33\x37\x30\x39\x35\x35\x31\x36\x31\x35"
<operator>.assignment ReplacementFor_ret=ReplacementFor_decimal_to_anybase(18446744073709551615,\012"\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39")
<operator>.assignment ReplacementFor_reference=\012"\x31\x38\x34\x34\x36\x37\x34\x34\x30\x37\x33\x37\x30\x39\x35\x35\x31\x36\x31\x35"
<operator>.assignment ReplacementFor_ret=ReplacementFor_decimal_to_anybase(-(0x8fb+1130-0xd64),\012"\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39")
<operator>.assignment ReplacementFor_reference=\012"\x31\x30\x31\x30\x31\x30"
<operator>.assignment ReplacementFor_ret=ReplacementFor_decimal_to_anybase(\012(0xb53+2604-0x1555),"\x30\x31")
<operator>.assignment ReplacementFor_reference=\012"\x35\x32"
<operator>.assignment ReplacementFor_ret=ReplacementFor_decimal_to_anybase(\012(0x322+715-0x5c3),"\x30\x31\x32\x33\x34\x35\x36\x37")
<operator>.assignment ReplacementFor_reference="\x32\x41"
<operator>.assignment ReplacementFor_ret=\012ReplacementFor_decimal_to_anybase((0xd2c+2676-0x1776),\012"\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39\x41\x42\x43\x44\x45\x46")
printf printf(\012"\x5b\x2b\x5d\x20\x41\x6c\x6c\x20\x74\x65\x73\x74\x73\x20\x68\x61\x76\x65\x20\x73\x75\x63\x63\x65\x73\x73\x66\x75\x6c\x6c\x79\x20\x70\x61\x73\x73\x65\x64\x21" "\n"\012)
<operator>.logicalAnd i<\012strlen(ReplacementFor_reference)&&i<strlen(ReplacementFor_ret)
<operator>.postIncrement i++
<operator>.notEquals ReplacementFor_ret!=NULL
<operator>.logicalAnd i<\012strlen(ReplacementFor_reference)&&i<strlen(ReplacementFor_ret)
<operator>.postIncrement i++
<operator>.notEquals ReplacementFor_ret!=NULL
<operator>.logicalAnd i<\012strlen(ReplacementFor_reference)&&i<strlen(ReplacementFor_ret)
<operator>.postIncrement i++
<operator>.notEquals ReplacementFor_ret!=NULL
<operator>.logicalAnd i<strlen(\012ReplacementFor_reference)&&i<strlen(ReplacementFor_ret)
<operator>.postIncrement i++
<operator>.notEquals ReplacementFor_ret!=NULL
<operator>.logicalAnd i<strlen(ReplacementFor_reference)&&i<strlen(\012ReplacementFor_ret)
<operator>.postIncrement i++
<operator>.notEquals ReplacementFor_ret!=NULL
<operator>.logicalAnd i<strlen(ReplacementFor_reference)&&i<strlen(\012ReplacementFor_ret)
<operator>.postIncrement i++
<operator>.notEquals ReplacementFor_ret!=NULL
ReplacementFor_decimal_to_anybase ReplacementFor_decimal_to_anybase((0x89+10-0x93),\012"\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39")
<operator>.assignment i=(0x1857+1339-0x1d92)
ReplacementFor_assert ReplacementFor_assert(ReplacementFor_ret[i]==ReplacementFor_reference[i])
free free(ReplacementFor_ret)
ReplacementFor_decimal_to_anybase ReplacementFor_decimal_to_anybase(18446744073709551615,\012"\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39")
<operator>.assignment i=(0x199+5527-0x1730)
ReplacementFor_assert ReplacementFor_assert(ReplacementFor_ret[i]==ReplacementFor_reference[i])
free free(ReplacementFor_ret)
ReplacementFor_decimal_to_anybase ReplacementFor_decimal_to_anybase(-(0x8fb+1130-0xd64),\012"\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39")
<operator>.assignment i=(0x1b4f+1368-0x20a7)
ReplacementFor_assert ReplacementFor_assert(ReplacementFor_ret[i]==ReplacementFor_reference[i])
free free(ReplacementFor_ret)
ReplacementFor_decimal_to_anybase ReplacementFor_decimal_to_anybase(\012(0xb53+2604-0x1555),"\x30\x31")
<operator>.assignment i=(0x1066+1424-0x15f6)
ReplacementFor_assert ReplacementFor_assert(ReplacementFor_ret[i]==ReplacementFor_reference[i])
free free(ReplacementFor_ret)
ReplacementFor_decimal_to_anybase ReplacementFor_decimal_to_anybase(\012(0x322+715-0x5c3),"\x30\x31\x32\x33\x34\x35\x36\x37")
<operator>.assignment i=\012(0x441+5718-0x1a97)
ReplacementFor_assert ReplacementFor_assert(ReplacementFor_ret[i]==\012ReplacementFor_reference[i])
free free(\012ReplacementFor_ret)
ReplacementFor_decimal_to_anybase ReplacementFor_decimal_to_anybase((0xd2c+2676-0x1776),\012"\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39\x41\x42\x43\x44\x45\x46")
<operator>.assignment i=\012(0x395+4220-0x1411)
ReplacementFor_assert ReplacementFor_assert(ReplacementFor_ret[i]==\012ReplacementFor_reference[i])
free free(\012ReplacementFor_ret)
<operator>.subtraction 0x89+10-0x93
<operator>.lessThan i<\012strlen(ReplacementFor_reference)
<operator>.lessThan i<strlen(ReplacementFor_ret)
<operator>.lessThan i<\012strlen(ReplacementFor_reference)
<operator>.lessThan i<strlen(ReplacementFor_ret)
<operator>.minus -(0x8fb+1130-0xd64)
<operator>.lessThan i<\012strlen(ReplacementFor_reference)
<operator>.lessThan i<strlen(ReplacementFor_ret)
<operator>.subtraction 0xb53+2604-0x1555
<operator>.lessThan i<strlen(\012ReplacementFor_reference)
<operator>.lessThan i<strlen(ReplacementFor_ret)
<operator>.subtraction 0x322+715-0x5c3
<operator>.lessThan i<strlen(ReplacementFor_reference)
<operator>.lessThan i<strlen(\012ReplacementFor_ret)
<operator>.subtraction 0xd2c+2676-0x1776
<operator>.lessThan i<strlen(ReplacementFor_reference)
<operator>.lessThan i<strlen(\012ReplacementFor_ret)
<operator>.addition 0x89+10
<operator>.subtraction 0x1857+1339-0x1d92
strlen strlen(ReplacementFor_reference)
strlen strlen(ReplacementFor_ret)
<operator>.equals ReplacementFor_ret[i]==ReplacementFor_reference[i]
<operator>.subtraction 0x199+5527-0x1730
strlen strlen(ReplacementFor_reference)
strlen strlen(ReplacementFor_ret)
<operator>.equals ReplacementFor_ret[i]==ReplacementFor_reference[i]
<operator>.subtraction 0x8fb+1130-0xd64
<operator>.subtraction 0x1b4f+1368-0x20a7
strlen strlen(ReplacementFor_reference)
strlen strlen(ReplacementFor_ret)
<operator>.equals ReplacementFor_ret[i]==ReplacementFor_reference[i]
<operator>.addition 0xb53+2604
<operator>.subtraction 0x1066+1424-0x15f6
strlen strlen(\012ReplacementFor_reference)
strlen strlen(ReplacementFor_ret)
<operator>.equals ReplacementFor_ret[i]==ReplacementFor_reference[i]
<operator>.addition 0x322+715
<operator>.subtraction 0x441+5718-0x1a97
strlen strlen(ReplacementFor_reference)
strlen strlen(\012ReplacementFor_ret)
<operator>.equals ReplacementFor_ret[i]==\012ReplacementFor_reference[i]
<operator>.addition 0xd2c+2676
<operator>.subtraction 0x395+4220-0x1411
strlen strlen(ReplacementFor_reference)
strlen strlen(\012ReplacementFor_ret)
<operator>.equals ReplacementFor_ret[i]==\012ReplacementFor_reference[i]
<operator>.addition 0x1857+1339
<operator>.addition 0x199+5527
<operator>.addition 0x8fb+1130
<operator>.addition 0x1b4f+1368
<operator>.addition 0x1066+1424
<operator>.addition 0x441+5718
<operator>.addition 0x395+4220
<operator>.indirectIndexAccess ReplacementFor_ret[i]
<operator>.indirectIndexAccess ReplacementFor_reference[i]
<operator>.indirectIndexAccess ReplacementFor_ret[i]
<operator>.indirectIndexAccess ReplacementFor_reference[i]
<operator>.indirectIndexAccess ReplacementFor_ret[i]
<operator>.indirectIndexAccess ReplacementFor_reference[i]
<operator>.indirectIndexAccess ReplacementFor_ret[i]
<operator>.indirectIndexAccess ReplacementFor_reference[i]
<operator>.indirectIndexAccess ReplacementFor_ret[i]
<operator>.indirectIndexAccess ReplacementFor_reference[i]
<operator>.indirectIndexAccess ReplacementFor_ret[i]
<operator>.indirectIndexAccess ReplacementFor_reference[i]
>>>PDG&124 0->2 0->3 0->4 0->6 0->8 0->10 0->12 0->14 0->16 0->18 0->19 0->21 0->22 0->24 0->25 0->27 0->28 0->30 0->31 0->33 0->34 0->35 0->38 0->39 0->42 0->43 0->46 0->47 0->50 0->51 0->54 0->55 0->58 0->59 0->60 0->61 0->62 0->63 0->65 0->66 0->67 0->68 0->69 0->70 0->71 0->72 0->73 0->74 0->75 0->76 0->77 0->78 0->79 0->81 0->82 0->83 0->85 0->86 0->87 0->88 0->90 0->91 0->92 0->93 0->95 0->96 0->97 0->98 0->100 0->101 0->102 0->103 0->105 0->106 0->107 0->108 0->109 0->110 0->111 2->1 3->1 4->1 4->78 5->1 5->1 5->19 5->79 5->80 6->82 7->1 7->1 7->22 7->83 7->84 8->1 8->87 9->1 9->1 9->25 9->88 9->89 10->1 10->92 11->1 11->1 11->28 11->93 11->94 12->1 12->97 13->1 13->1 13->31 13->98 13->99 14->1 14->102 15->1 15->1 15->34 15->103 15->104 16->1 17->17 17->18 17->20 17->37 17->60 17->78 17->80 17->112 17->113 18->1 18->60 19->22 19->38 19->38 20->20 20->21 20->23 20->41 20->62 20->82 20->84 20->114 20->115 21->1 21->62 22->25 22->42 22->42 23->1 23->1 23->23 23->24 23->26 23->45 23->65 23->87 23->89 23->116 23->117 24->1 24->65 25->28 25->46 25->46 26->1 26->1 26->1 26->26 26->27 26->49 26->68 26->92 26->94 26->118 26->119 27->1 27->68 28->31 28->50 28->50 29->29 29->30 29->32 29->53 29->71 29->97 29->99 29->120 29->121 30->1 30->71 31->34 31->54 31->54 32->1 32->1 32->1 32->32 32->33 32->57 32->74 32->102 32->104 32->122 32->123 33->1 33->74 34->1 34->1 34->1 34->58 34->58 35->1 35->5 35->5 36->1 36->1 36->60 37->1 37->1 39->7 39->7 40->1 40->1 40->62 41->1 41->1 43->1 43->9 43->9 44->1 44->1 44->65 45->1 45->1 47->1 47->11 47->11 48->1 48->1 48->68 49->1 49->1 51->1 51->13 51->13 52->1 52->1 52->71 53->1 53->1 55->1 55->15 55->15 56->1 56->1 56->74 57->1 57->1 58->1 59->1 59->35 59->35 60->17 60->17 60->18 60->61 60->61 60->79 61->1 61->17 61->17 61->18 62->20 62->20 62->21 62->63 62->63 62->83 63->1 63->20 63->20 63->21 64->1 64->43 65->23 65->23 65->24 65->66 65->66 65->88 66->1 66->23 66->23 66->24 67->1 67->47 67->47 68->1 68->26 68->26 68->27 68->69 68->69 68->93 69->1 69->26 69->26 69->27 70->1 70->51 70->51 71->29 71->29 71->30 71->72 71->72 71->98 72->1 72->29 72->29 72->30 73->1 73->55 73->55 74->1 74->1 74->32 74->32 74->33 74->75 74->75 74->103 75->1 75->1 75->32 75->32 75->33 77->1 77->36 77->36 78->60 78->80 79->19 79->61 79->80 80->1 80->1 80->19 80->22 80->25 80->28 80->31 80->34 80->37 80->37 80->38 80->42 80->46 80->50 80->54 80->58 80->78 80->79 80->82 80->83 80->84 80->84 80->87 80->88 80->89 80->89 80->92 80->93 80->94 80->94 80->97 80->98 80->99 80->99 80->102 80->103 80->104 80->104 81->1 81->40 81->40 82->62 82->84 83->22 83->63 83->84 84->1 84->1 84->22 84->25 84->28 84->31 84->34 84->41 84->41 84->42 84->46 84->50 84->54 84->58 84->82 84->83 84->87 84->88 84->89 84->89 84->92 84->93 84->94 84->94 84->97 84->98 84->99 84->99 84->102 84->103 84->104 84->104 85->1 85->64 85->64 86->1 86->44 86->44 87->65 87->89 88->25 88->66 88->89 89->1 89->1 89->25 89->28 89->31 89->34 89->45 89->45 89->46 89->50 89->54 89->58 89->87 89->88 89->92 89->93 89->94 89->94 89->97 89->98 89->99 89->99 89->102 89->103 89->104 89->104 91->1 91->48 91->48 92->68 92->94 93->28 93->69 93->94 94->1 94->1 94->28 94->31 94->34 94->49 94->49 94->50 94->54 94->58 94->92 94->93 94->97 94->98 94->99 94->99 94->102 94->103 94->104 94->104 96->1 96->52 96->52 97->71 97->99 98->31 98->72 98->99 99->1 99->1 99->31 99->34 99->53 99->53 99->54 99->58 99->97 99->98 99->102 99->103 99->104 99->104 101->1 101->56 101->56 102->1 102->74 102->104 103->34 103->75 103->104 104->1 104->1 104->34 104->57 104->57 104->58 104->102 104->103
>>>Token static void ReplacementFor_test ( ) { char * ReplacementFor_ret = NULL ; char * ReplacementFor_reference = NULL ; ReplacementFor_reference = " \x30 " ; ReplacementFor_ret = ReplacementFor_decimal_to_anybase ( ( 0x89 + 10 - 0x93 ) , " \x30 \x31 \x32 \x33 \x34 \x35 \x36 \x37 \x38 \x39 " ) ; for ( int i = ( 0x1857 + 1339 - 0x1d92 ) ; i < strlen ( ReplacementFor_reference ) && i < strlen ( ReplacementFor_ret ) ; i ++ ) { ReplacementFor_assert ( ReplacementFor_ret [ i ] == ReplacementFor_reference [ i ] ) ; } if ( ReplacementFor_ret != NULL ) { free ( ReplacementFor_ret ) ; } ReplacementFor_reference = " \x31 \x38 \x34 \x34 \x36 \x37 \x34 \x34 \x30 \x37 \x33 \x37 \x30 \x39 \x35 \x35 \x31 \x36 \x31 \x35 " ; ReplacementFor_ret = ReplacementFor_decimal_to_anybase ( 18446744073709551615 , " \x30 \x31 \x32 \x33 \x34 \x35 \x36 \x37 \x38 \x39 " ) ; for ( int i = ( 0x199 + 5527 - 0x1730 ) ; i < strlen ( ReplacementFor_reference ) && i < strlen ( ReplacementFor_ret ) ; i ++ ) { ReplacementFor_assert ( ReplacementFor_ret [ i ] == ReplacementFor_reference [ i ] ) ; } if ( ReplacementFor_ret != NULL ) { free ( ReplacementFor_ret ) ; } ReplacementFor_reference = " \x31 \x38 \x34 \x34 \x36 \x37 \x34 \x34 \x30 \x37 \x33 \x37 \x30 \x39 \x35 \x35 \x31 \x36 \x31 \x35 " ; ReplacementFor_ret = ReplacementFor_decimal_to_anybase ( - ( 0x8fb + 1130 - 0xd64 ) , " \x30 \x31 \x32 \x33 \x34 \x35 \x36 \x37 \x38 \x39 " ) ; for ( int i = ( 0x1b4f + 1368 - 0x20a7 ) ; i < strlen ( ReplacementFor_reference ) && i < strlen ( ReplacementFor_ret ) ; i ++ ) { ReplacementFor_assert ( ReplacementFor_ret [ i ] == ReplacementFor_reference [ i ] ) ; } if ( ReplacementFor_ret != NULL ) { free ( ReplacementFor_ret ) ; } ReplacementFor_reference = " \x31 \x30 \x31 \x30 \x31 \x30 " ; ReplacementFor_ret = ReplacementFor_decimal_to_anybase ( ( 0xb53 + 2604 - 0x1555 ) , " \x30 \x31 " ) ; for ( int i = ( 0x1066 + 1424 - 0x15f6 ) ; i < strlen ( ReplacementFor_reference ) && i < strlen ( ReplacementFor_ret ) ; i ++ ) { ReplacementFor_assert ( ReplacementFor_ret [ i ] == ReplacementFor_reference [ i ] ) ; } if ( ReplacementFor_ret != NULL ) { free ( ReplacementFor_ret ) ; } ReplacementFor_reference = " \x35 \x32 " ; ReplacementFor_ret = ReplacementFor_decimal_to_anybase ( ( 0x322 + 715 - 0x5c3 ) , " \x30 \x31 \x32 \x33 \x34 \x35 \x36 \x37 " ) ; for ( int i = ( 0x441 + 5718 - 0x1a97 ) ; i < strlen ( ReplacementFor_reference ) && i < strlen ( ReplacementFor_ret ) ; i ++ ) { ReplacementFor_assert ( ReplacementFor_ret [ i ] == ReplacementFor_reference [ i ] ) ; } if ( ReplacementFor_ret != NULL ) { free ( ReplacementFor_ret ) ; } ReplacementFor_reference = " \x32 \x41 " ; ReplacementFor_ret = ReplacementFor_decimal_to_anybase ( ( 0xd2c + 2676 - 0x1776 ) , " \x30 \x31 \x32 \x33 \x34 \x35 \x36 \x37 \x38 \x39 \x41 \x42 \x43 \x44 \x45 \x46 " ) ; for ( int i = ( 0x395 + 4220 - 0x1411 ) ; i < strlen ( ReplacementFor_reference ) && i < strlen ( ReplacementFor_ret ) ; i ++ ) { ReplacementFor_assert ( ReplacementFor_ret [ i ] == ReplacementFor_reference [ i ] ) ; } if ( ReplacementFor_ret != NULL ) { free ( ReplacementFor_ret ) ; } printf ( " \x5b \x2b \x5d \x20 \x41 \x6c \x6c \x20 \x74 \x65 \x73 \x74 \x73 \x20 \x68 \x61 \x76 \x65 \x20 \x73 \x75 \x63 \x63 \x65 \x73 \x73 \x66 \x75 \x6c \x6c \x79 \x20 \x70 \x61 \x73 \x73 \x65 \x64 \x21 " " \n " ) ; }
>>>Func
METHOD main
METHOD_RETURN int
<operator>.assignment i=\012(0x446+4029-0x1403)
<operator>.assignment ReplacementFor_dontclear=\012(0x529+6236-0x1d85)
scanf scanf("\x25\x69",&T)
RETURN return(0x6d8+6011-0x1e53); return(0x6d8+6011-0x1e53);
<operator>.lessThan m<(0x1428+2254-0x1c92)
<operator>.postIncrement m++
<operator>.lessThan m<(0x405+3790-0x126f)
<operator>.postIncrement m\012++
<operator>.lessThan m<(0xc00+27-0xbf7)
<operator>.postIncrement m++
<operator>.lessThan m<(0x219b+1342-0x26bd)
<operator>.postIncrement m++
<operator>.lessThan i<T
<operator>.lessThan ReplacementFor_j<T
<operator>.postIncrement ReplacementFor_j++
<operator>.subtraction 0x6d8+6011-0x1e53
<operator>.subtraction 0x446+4029-0x1403
<operator>.subtraction 0x529+6236-0x1d85
<operator>.assignment m=(0xbd5+1740-0x12a1)
<operator>.assignment m=(0x1579+3996-0x2515)
<operator>.assignment ReplacementFor_stri[m]=((char)(0x1b49+1024-0x1f28))
<operator>.assignment m=\012(0xe75+3663-0x1cc4)
<operator>.assignment m=\012(0x1351+930-0x16f3)
scanf scanf("\x25\x69",&ReplacementFor_C)
scanf scanf("\x25\x69",&ReplacementFor_D)
scanf scanf("\x25\x69",&\012ReplacementFor_N)
<operator>.postIncrement i++
<operator>.assignment ReplacementFor_j=(0xee5+5596-0x24c1)
printf printf(\012"\n" "\x43\x61\x73\x65\x20\x23\x25\x69\x3a\x20\x5b" (ReplacementFor_j+\012(0x55+5911-0x176b)))
printf printf("\x5d")
<operator>.addition 0x446+4029
<operator>.addition 0x529+6236
<operator>.subtraction 0x1428+2254-0x1c92
<operator>.lessThan ReplacementFor_j<(0x133c+543-0x14f7)
<operator>.postIncrement ReplacementFor_j++
<operator>.subtraction 0x405+3790-0x126f
<operator>.subtraction 0xc00+27-0xbf7
<operator>.lessThan ReplacementFor_j<(0x1865+2333-0x217f)
<operator>.postIncrement ReplacementFor_j++
<operator>.subtraction 0x219b+1342-0x26bd
<operator>.lessThan ReplacementFor_j<(0xda2+4858-0x209a)
<operator>.postIncrement ReplacementFor_j++
<operator>.lessThan m<\012ReplacementFor_C
<operator>.postIncrement m++
<operator>.lessThan m<ReplacementFor_D
<operator>.postIncrement m++
<operator>.lessThan m<ReplacementFor_N
<operator>.postIncrement m++
<operator>.lessThan m<\012ReplacementFor_N
<operator>.postIncrement m++
<operator>.lessThan ReplacementFor_xx<ReplacementFor_N
<operator>.postIncrement ReplacementFor_xx++
<operator>.greaterThan ReplacementFor_dd>(0x132+522-0x33c)
<operator>.postDecrement ReplacementFor_dd--
<operator>.lessThan ReplacementFor_xx<\012ReplacementFor_fin
<operator>.postIncrement ReplacementFor_xx++
<operator>.addition 0x6d8+6011
<operator>.subtraction 0xbd5+1740-0x12a1
<operator>.addition 0x1428+2254
<operator>.assignment ReplacementFor_j=(0xb1a+2343-0x1441)
<operator>.assignment ReplacementFor_result[m][ReplacementFor_j]=\012((char)(0xfbb+441-0x1153))
<operator>.subtraction 0x1579+3996-0x2515
<operator>.addition 0x405+3790
<operator>.cast (char)(0x1b49+1024-0x1f28)
<operator>.subtraction 0xe75+3663-0x1cc4
<operator>.addition 0xc00+27
<operator>.assignment ReplacementFor_j=\012(0x240+5313-0x1701)
<operator>.assignment ReplacementFor_merge[m][ReplacementFor_j]=((char)(0x409+1308-0x904))
<operator>.subtraction 0x1351+930-0x16f3
<operator>.addition 0x219b+1342
<operator>.assignment ReplacementFor_j=\012(0x80a+2668-0x1276)
<operator>.assignment clear[m][ReplacementFor_j]=((char)(0x534+8190-0x2511))
<operator>.assignment m=(0x725+6077-0x1ee2)
<operator>.assignment m=(0xce8+2742-0x179e)
<operator>.assignment m=(0x1c36+1111-0x208d)
scanf scanf(\012"\x20\x25\x63",&ReplacementFor_stri[m])
<operator>.assignment m=(0x71c+2844-0x1237)
<operator>.assignment ReplacementFor_dontclear=(0x245f+286-0x257d)
<operator>.assignment ReplacementFor_xx=\012(0xed2+1402-0x144c)
<operator>.assignment ReplacementFor_result[i][ReplacementFor_xx]=ReplacementFor_stri[\012ReplacementFor_xx]
<operator>.subtraction 0xee5+5596-0x24c1
<operator>.assignment ReplacementFor_dd=\012(0x117a+3964-0x2092)
<operator>.addition ReplacementFor_j+\012(0x55+5911-0x176b)
<operator>.assignment ReplacementFor_xx=(0x843+1094-0xc89)
<operator>.addition 0xbd5+1740
<operator>.subtraction 0x133c+543-0x14f7
<operator>.addition 0x1579+3996
<operator>.subtraction 0x1b49+1024-0x1f28
<operator>.addition 0xe75+3663
<operator>.subtraction 0x1865+2333-0x217f
<operator>.addition 0x1351+930
<operator>.subtraction 0xda2+4858-0x209a
<operator>.lessThan ReplacementFor_j<\012(0x157c+4190-0x25d7)
<operator>.postIncrement ReplacementFor_j++
<operator>.lessThan ReplacementFor_j<(0x131d+1072-0x174b)
<operator>.postIncrement ReplacementFor_j++
<operator>.lessThan ReplacementFor_j<ReplacementFor_C
<operator>.postIncrement ReplacementFor_j++
<operator>.equals ReplacementFor_dontclear==(0x747+4999-0x1ace)
<operator>.addition 0xee5+5596
<operator>.subtraction 0x132+522-0x33c
<operator>.notEquals ReplacementFor_result[ReplacementFor_j][ReplacementFor_dd-(0x21ed+331-0x2337)]\012!=((char)(0x2333+509-0x250f))
<operator>.subtraction 0x55+5911-0x176b
<operator>.notEquals ReplacementFor_result[\012ReplacementFor_j][ReplacementFor_xx]!=((char)(0x10f2+3516-0x1e8d))
<operator>.subtraction 0xb1a+2343-0x1441
<operator>.addition 0x133c+543
<operator>.cast (char)(0xfbb+441-0x1153)
<operator>.addition 0x1b49+1024
<operator>.subtraction 0x240+5313-0x1701
<operator>.addition 0x1865+2333
<operator>.cast (char)(0x409+1308-0x904)
<operator>.subtraction 0x80a+2668-0x1276
<operator>.addition 0xda2+4858
<operator>.cast (char)(0x534+8190-0x2511)
<operator>.subtraction 0x725+6077-0x1ee2
<operator>.assignment ReplacementFor_j=(0x2b1+1427-0x844)
scanf scanf("\x20\x25\x63",&\012ReplacementFor_merge[m][ReplacementFor_j])
<operator>.subtraction 0xce8+2742-0x179e
<operator>.assignment ReplacementFor_j=\012(0x1437+1389-0x19a4)
scanf scanf("\x20\x25\x63",&clear[m][ReplacementFor_j])
<operator>.subtraction 0x1c36+1111-0x208d
<operator>.subtraction 0x71c+2844-0x1237
<operator>.subtraction 0x245f+286-0x257d
<operator>.assignment ReplacementFor_j=(0xc3+7730-0x1ef5)
<operator>.subtraction 0xed2+1402-0x144c
<operator>.subtraction 0x117a+3964-0x2092
<operator>.addition 0x132+522
<operator>.assignment ReplacementFor_fin=ReplacementFor_dd
<operator>.addition 0x55+5911
<operator>.subtraction 0x843+1094-0xc89
<operator>.addition 0xb1a+2343
<operator>.subtraction 0xfbb+441-0x1153
<operator>.addition 0x240+5313
<operator>.subtraction 0x409+1308-0x904
<operator>.addition 0x80a+2668
<operator>.subtraction 0x534+8190-0x2511
<operator>.addition 0x725+6077
<operator>.subtraction 0x157c+4190-0x25d7
<operator>.addition 0xce8+2742
<operator>.subtraction 0x131d+1072-0x174b
<operator>.addition 0x1c36+1111
<operator>.addition 0x71c+2844
<operator>.addition 0x245f+286
<operator>.equals ReplacementFor_stri[m]==ReplacementFor_merge[\012ReplacementFor_j][(0x606+8208-0x2616)]
<operator>.equals ReplacementFor_stri[m]==ReplacementFor_merge[ReplacementFor_j][(0x54a+318-0x687)\012]
<operator>.subtraction 0x747+4999-0x1ace
<operator>.lessThan ReplacementFor_j<ReplacementFor_D
<operator>.postIncrement ReplacementFor_j++
<operator>.addition 0xed2+1402
<operator>.addition 0x117a+3964
<operator>.cast (char)(0x2333+509-0x250f)
<operator>.assignment ReplacementFor_fin=(ReplacementFor_dd-(0xf11+4682-0x215a))
<operator>.addition 0x843+1094
<operator>.cast (char)(0x10f2+3516-0x1e8d)
<operator>.notEquals (\012ReplacementFor_xx+(0x1c70+2090-0x2499))!=ReplacementFor_fin
<operator>.addition 0xfbb+441
<operator>.addition 0x409+1308
<operator>.addition 0x534+8190
<operator>.subtraction 0x2b1+1427-0x844
<operator>.addition 0x157c+4190
<operator>.subtraction 0x1437+1389-0x19a4
<operator>.addition 0x131d+1072
<operator>.subtraction 0xc3+7730-0x1ef5
<operator>.addition 0x747+4999
<operator>.assignment ReplacementFor_j=\012(0xdd4+2965-0x1969)
<operator>.subtraction ReplacementFor_dd-(0x21ed+331-0x2337)
<operator>.subtraction 0x2333+509-0x250f
<operator>.subtraction 0x10f2+3516-0x1e8d
printf printf(\012"\x25\x63\x2c\x20",ReplacementFor_result[ReplacementFor_j][ReplacementFor_xx])
<operator>.addition 0x2b1+1427
<operator>.addition 0x1437+1389
<operator>.addition 0xc3+7730
<operator>.equals ReplacementFor_stri[m-\012(0x499+5213-0x18f5)]==ReplacementFor_merge[ReplacementFor_j][(0xb00+526-0xd0d)]
<operator>.equals ReplacementFor_stri[m-(0x9e4+6006-0x2159)]==ReplacementFor_merge[\012ReplacementFor_j][(0x19c1+529-0x1bd2)]
<operator>.equals ReplacementFor_stri[m]==clear[ReplacementFor_j][(0x395+7303-0x201c)]
<operator>.equals ReplacementFor_stri\012[m]==clear[ReplacementFor_j][(0xb1+248-0x1a8)]
<operator>.subtraction 0x21ed+331-0x2337
<operator>.addition 0x2333+509
<operator>.subtraction ReplacementFor_dd-(0xf11+4682-0x215a)
<operator>.addition 0x10f2+3516
<operator>.addition ReplacementFor_xx+(0x1c70+2090-0x2499)
printf printf("\x25\x63",ReplacementFor_result[ReplacementFor_j][ReplacementFor_xx\012])
<operator>.subtraction 0x606+8208-0x2616
<operator>.assignment ReplacementFor_stri[m-(0x1223+2329-0x1b3b)]=((char)(0xa64+3671-0x189a))
<operator>.assignment ReplacementFor_stri[m]=ReplacementFor_merge[ReplacementFor_j][\012(0xeba+2875-0x19f3)]
<operator>.assignment ReplacementFor_dontclear=(0x3c7+5778-0x1a58)
<operator>.subtraction 0x54a+318-0x687
<operator>.assignment ReplacementFor_stri[m-\012(0xfa6+3850-0x1eaf)]=((char)(0xecf+5306-0x2368))
<operator>.assignment ReplacementFor_stri[m]=\012ReplacementFor_merge[ReplacementFor_j][(0x3c6+4596-0x15b8)]
<operator>.assignment ReplacementFor_dontclear=(0x1476+1325-0x19a2)
<operator>.subtraction 0xdd4+2965-0x1969
<operator>.addition 0x21ed+331
<operator>.subtraction 0xf11+4682-0x215a
<operator>.subtraction 0x1c70+2090-0x2499
<operator>.addition 0x606+8208
<operator>.addition 0x54a+318
<operator>.addition 0xdd4+2965
<operator>.greaterThan ReplacementFor_tt>-(0x8dd+4299-0x19a7)
<operator>.postDecrement ReplacementFor_tt--
<operator>.greaterThan ReplacementFor_tt>-(0xd4+3473-0xe64)
<operator>.postDecrement ReplacementFor_tt--
<operator>.addition 0xf11+4682
<operator>.addition 0x1c70+2090
<operator>.subtraction m-\012(0x499+5213-0x18f5)
<operator>.subtraction 0xb00+526-0xd0d
<operator>.cast (char)(0xa64+3671-0x189a)
<operator>.subtraction 0x3c7+5778-0x1a58
<operator>.subtraction m-(0x9e4+6006-0x2159)
<operator>.subtraction 0x19c1+529-0x1bd2
<operator>.cast (char)(0xecf+5306-0x2368)
<operator>.subtraction 0x1476+1325-0x19a2
<operator>.subtraction 0x395+7303-0x201c
<operator>.assignment ReplacementFor_tt=(m-(0x860+6649-0x2258))
<operator>.subtraction 0xb1+248-0x1a8
<operator>.assignment ReplacementFor_tt=(m-\012(0x1087+4467-0x21f9))
<operator>.subtraction 0x499+5213-0x18f5
<operator>.addition 0xb00+526
<operator>.subtraction m-(0x1223+2329-0x1b3b)
<operator>.subtraction 0xa64+3671-0x189a
<operator>.subtraction 0xeba+2875-0x19f3
<operator>.addition 0x3c7+5778
<operator>.subtraction 0x9e4+6006-0x2159
<operator>.addition 0x19c1+529
<operator>.subtraction m-\012(0xfa6+3850-0x1eaf)
<operator>.subtraction 0xecf+5306-0x2368
<operator>.subtraction 0x3c6+4596-0x15b8
<operator>.addition 0x1476+1325
<operator>.addition 0x395+7303
<operator>.minus -(0x8dd+4299-0x19a7)
<operator>.equals ReplacementFor_stri[ReplacementFor_tt]==clear[\012ReplacementFor_j][(0x3b5+7861-0x2269)]
<operator>.addition 0xb1+248
<operator>.minus -(0xd4+3473-0xe64)
<operator>.equals ReplacementFor_stri[ReplacementFor_tt]==clear[ReplacementFor_j][\012(0xbc4+1691-0x125f)]
<operator>.addition 0x499+5213
<operator>.subtraction 0x1223+2329-0x1b3b
<operator>.addition 0xa64+3671
<operator>.addition 0xeba+2875
<operator>.addition 0x9e4+6006
<operator>.subtraction 0xfa6+3850-0x1eaf
<operator>.addition 0xecf+5306
<operator>.addition 0x3c6+4596
<operator>.subtraction m-(0x860+6649-0x2258)
<operator>.subtraction 0x8dd+4299-0x19a7
<operator>.assignment ReplacementFor_tt=-\012(0x30b+276-0x41d)
<operator>.assignment ReplacementFor_j=(0x3c0+5910-0x1a16)
<operator>.subtraction m-\012(0x1087+4467-0x21f9)
<operator>.subtraction 0xd4+3473-0xe64
<operator>.assignment ReplacementFor_tt=-(0xffc+2388-0x194e)
<operator>.assignment ReplacementFor_j=(0xbb4+4069-0x1ad9)
<operator>.addition 0x1223+2329
<operator>.addition 0xfa6+3850
<operator>.subtraction 0x860+6649-0x2258
<operator>.addition 0x8dd+4299
<operator>.greaterThan ReplacementFor_xx>-(0x157f+2076-0x1d9a)
<operator>.postDecrement ReplacementFor_xx--
<operator>.subtraction 0x1087+4467-0x21f9
<operator>.addition 0xd4+3473
<operator>.greaterThan ReplacementFor_xx>-\012(0xdfa+4476-0x1f75)
<operator>.postDecrement ReplacementFor_xx--
<operator>.addition 0x860+6649
<operator>.subtraction 0x3b5+7861-0x2269
<operator>.assignment ReplacementFor_xx=m
<operator>.assignment ReplacementFor_stri\012[ReplacementFor_xx]=((char)(0x676+5302-0x1b0b))
<operator>.minus -\012(0x30b+276-0x41d)
<operator>.subtraction 0x3c0+5910-0x1a16
<operator>.addition 0x1087+4467
<operator>.subtraction 0xbc4+1691-0x125f
<operator>.assignment ReplacementFor_xx=m
<operator>.assignment ReplacementFor_stri[ReplacementFor_xx]=\012((char)(0xe1d+845-0x1149))
<operator>.minus -(0xffc+2388-0x194e)
<operator>.subtraction 0xbb4+4069-0x1ad9
<operator>.addition 0x3b5+7861
<operator>.minus -(0x157f+2076-0x1d9a)
<operator>.subtraction 0x30b+276-0x41d
<operator>.addition 0x3c0+5910
<operator>.addition 0xbc4+1691
<operator>.minus -\012(0xdfa+4476-0x1f75)
<operator>.subtraction 0xffc+2388-0x194e
<operator>.addition 0xbb4+4069
<operator>.subtraction 0x157f+2076-0x1d9a
<operator>.cast (char)(0x676+5302-0x1b0b)
<operator>.addition 0x30b+276
<operator>.subtraction 0xdfa+4476-0x1f75
<operator>.cast (char)(0xe1d+845-0x1149)
<operator>.addition 0xffc+2388
<operator>.addition 0x157f+2076
<operator>.subtraction 0x676+5302-0x1b0b
<operator>.addition 0xdfa+4476
<operator>.subtraction 0xe1d+845-0x1149
<operator>.addition 0x676+5302
<operator>.addition 0xe1d+845
<operator>.indirectIndexAccess ReplacementFor_stri[m]
<operator>.addressOf &ReplacementFor_C
<operator>.addressOf &ReplacementFor_D
<operator>.addressOf &\012ReplacementFor_N
UNKNOWN char char
<operator>.indirectIndexAccess ReplacementFor_result[m][ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_merge[m][ReplacementFor_j]
<operator>.indirectIndexAccess clear[m][ReplacementFor_j]
<operator>.addressOf &ReplacementFor_stri[m]
<operator>.indirectIndexAccess ReplacementFor_result[i][ReplacementFor_xx]
<operator>.indirectIndexAccess ReplacementFor_stri[\012ReplacementFor_xx]
<operator>.indirectIndexAccess ReplacementFor_result[m]
UNKNOWN char char
<operator>.indirectIndexAccess ReplacementFor_merge[m]
UNKNOWN char char
<operator>.indirectIndexAccess clear[m]
UNKNOWN char char
<operator>.indirectIndexAccess ReplacementFor_stri[m]
<operator>.indirectIndexAccess ReplacementFor_result[i]
<operator>.indirectIndexAccess ReplacementFor_result[ReplacementFor_j][ReplacementFor_dd-(0x21ed+331-0x2337)]
<operator>.indirectIndexAccess ReplacementFor_result[\012ReplacementFor_j][ReplacementFor_xx]
<operator>.addressOf &\012ReplacementFor_merge[m][ReplacementFor_j]
<operator>.addressOf &clear[m][ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_result[ReplacementFor_j]
UNKNOWN char char
<operator>.indirectIndexAccess ReplacementFor_result[\012ReplacementFor_j]
UNKNOWN char char
<operator>.indirectIndexAccess ReplacementFor_merge[m][ReplacementFor_j]
<operator>.indirectIndexAccess clear[m][ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_stri[m]
<operator>.indirectIndexAccess ReplacementFor_merge[\012ReplacementFor_j][(0x606+8208-0x2616)]
<operator>.indirectIndexAccess ReplacementFor_stri[m]
<operator>.indirectIndexAccess ReplacementFor_merge[ReplacementFor_j][(0x54a+318-0x687)\012]
<operator>.indirectIndexAccess ReplacementFor_merge[m]
<operator>.indirectIndexAccess clear[m]
<operator>.indirectIndexAccess ReplacementFor_merge[\012ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_merge[ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_result[ReplacementFor_j][ReplacementFor_xx]
<operator>.indirectIndexAccess ReplacementFor_stri[m-\012(0x499+5213-0x18f5)]
<operator>.indirectIndexAccess ReplacementFor_merge[ReplacementFor_j][(0xb00+526-0xd0d)]
<operator>.indirectIndexAccess ReplacementFor_stri[m-(0x9e4+6006-0x2159)]
<operator>.indirectIndexAccess ReplacementFor_merge[\012ReplacementFor_j][(0x19c1+529-0x1bd2)]
<operator>.indirectIndexAccess ReplacementFor_stri[m]
<operator>.indirectIndexAccess clear[ReplacementFor_j][(0x395+7303-0x201c)]
<operator>.indirectIndexAccess ReplacementFor_stri\012[m]
<operator>.indirectIndexAccess clear[ReplacementFor_j][(0xb1+248-0x1a8)]
<operator>.indirectIndexAccess ReplacementFor_result[ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_result[ReplacementFor_j][ReplacementFor_xx\012]
<operator>.indirectIndexAccess ReplacementFor_merge[ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_stri[m-(0x1223+2329-0x1b3b)]
<operator>.indirectIndexAccess ReplacementFor_stri[m]
<operator>.indirectIndexAccess ReplacementFor_merge[ReplacementFor_j][\012(0xeba+2875-0x19f3)]
<operator>.indirectIndexAccess ReplacementFor_merge[\012ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_stri[m-\012(0xfa6+3850-0x1eaf)]
<operator>.indirectIndexAccess ReplacementFor_stri[m]
<operator>.indirectIndexAccess ReplacementFor_merge[ReplacementFor_j][(0x3c6+4596-0x15b8)]
<operator>.indirectIndexAccess clear[ReplacementFor_j]
<operator>.indirectIndexAccess clear[ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_result[ReplacementFor_j]
UNKNOWN char char
<operator>.indirectIndexAccess ReplacementFor_merge[ReplacementFor_j]
UNKNOWN char char
<operator>.indirectIndexAccess ReplacementFor_merge[ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_stri[ReplacementFor_tt]
<operator>.indirectIndexAccess clear[\012ReplacementFor_j][(0x3b5+7861-0x2269)]
<operator>.indirectIndexAccess ReplacementFor_stri[ReplacementFor_tt]
<operator>.indirectIndexAccess clear[ReplacementFor_j][\012(0xbc4+1691-0x125f)]
<operator>.indirectIndexAccess clear[\012ReplacementFor_j]
<operator>.indirectIndexAccess clear[ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_stri\012[ReplacementFor_xx]
<operator>.indirectIndexAccess ReplacementFor_stri[ReplacementFor_xx]
UNKNOWN char char
UNKNOWN char char
>>>PDG&366 0->4 0->6 0->7 0->8 0->9 0->10 0->11 0->12 0->13 0->14 0->15 0->16 0->17 0->18 0->19 0->25 0->26 0->27 0->28 0->30 0->31 0->32 0->33 0->34 0->35 0->36 0->37 0->38 0->39 0->40 0->41 0->42 0->43 0->44 0->45 0->46 0->47 0->48 0->49 0->50 0->51 0->52 0->53 0->54 0->55 0->56 0->57 0->58 0->59 0->60 0->63 0->64 0->66 0->67 0->70 0->71 0->82 0->84 0->86 0->87 0->88 0->89 0->90 0->91 0->92 0->93 0->94 0->95 0->96 0->97 0->98 0->99 0->100 0->101 0->102 0->104 0->106 0->107 0->109 0->110 0->111 0->113 0->114 0->116 0->119 0->122 0->123 0->124 0->126 0->127 0->128 0->129 0->130 0->131 0->132 0->133 0->134 0->135 0->136 0->137 0->138 0->139 0->140 0->141 0->142 0->143 0->144 0->147 0->148 0->149 0->150 0->151 0->154 0->156 0->157 0->158 0->159 0->160 0->161 0->162 0->163 0->164 0->165 0->167 0->168 0->169 0->170 0->171 0->172 0->173 0->178 0->179 0->180 0->181 0->182 0->183 0->184 0->188 0->192 0->193 0->194 0->195 0->196 0->197 0->198 0->199 0->200 0->201 0->202 0->203 0->204 0->205 0->206 0->208 0->209 0->210 0->212 0->213 0->215 0->217 0->218 0->219 0->220 0->221 0->222 0->223 0->224 0->225 0->226 0->227 0->228 0->229 0->232 0->235 0->236 0->237 0->238 0->239 0->240 0->241 0->242 0->243 0->244 0->247 0->248 0->251 0->252 0->253 0->254 0->255 0->256 0->257 0->258 0->259 0->260 0->261 0->262 0->263 0->266 0->267 0->268 0->269 0->272 0->273 0->275 0->276 0->277 0->279 0->280 0->281 0->283 0->284 0->286 0->287 0->288 0->289 0->290 0->291 0->292 2->1 2->1 2->14 3->1 3->1 3->1 4->1 4->14 4->15 5->1 6->1 6->1 6->6 6->7 6->7 6->34 6->35 6->60 6->61 6->87 6->106 6->107 6->132 7->1 7->6 8->1 8->1 8->8 8->9 8->9 8->22 8->37 8->64 8->65 8->89 8->109 8->293 8->297 9->1 9->8 10->1 10->1 10->10 10->11 10->11 10->38 10->39 10->67 10->68 10->91 10->110 10->111 10->134 11->1 11->10 12->1 12->1 12->1 12->12 12->13 12->13 12->41 12->42 12->71 12->72 12->93 12->113 12->114 12->136 13->1 13->12 14->1 14->1 14->14 14->15 14->25 14->26 14->27 14->28 14->28 14->44 14->46 14->48 14->50 14->52 14->74 14->75 14->76 14->78 14->80 14->116 14->119 14->122 14->123 14->126 14->138 14->140 14->142 14->143 14->150 14->294 14->295 14->296 15->1 15->1 15->1 15->15 15->16 15->16 15->30 15->30 15->31 15->54 15->56 15->83 15->84 15->84 15->85 15->102 15->104 15->127 15->128 15->130 15->131 15->151 15->154 16->1 16->15 17->1 17->1 17->5 18->1 18->2 18->2 19->1 19->3 19->3 20->1 20->1 20->6 21->1 21->1 21->8 22->1 22->1 22->1 22->77 22->145 22->176 23->1 23->1 23->10 24->1 24->1 24->12 25->1 25->44 25->98 26->1 26->46 26->148 27->1 27->48 27->50 27->52 28->1 28->14 29->1 29->1 29->15 30->1 30->1 31->1 34->1 34->6 34->6 35->1 35->1 35->35 35->36 35->36 35->62 35->87 35->107 35->108 35->133 35->157 35->298 35->304 35->305 36->1 36->35 37->1 37->8 37->8 38->1 38->10 38->10 39->1 39->1 39->39 39->40 39->40 39->69 39->91 39->111 39->112 39->135 39->158 39->299 39->306 39->307 40->1 40->39 41->1 41->12 41->12 42->1 42->1 42->42 42->43 42->43 42->73 42->93 42->114 42->115 42->137 42->159 42->300 42->308 42->309 43->1 43->42 44->1 44->1 44->25 44->44 44->45 44->45 44->94 44->98 44->117 44->139 44->160 44->161 44->171 45->1 45->44 46->1 46->1 46->26 46->46 46->47 46->47 46->96 46->120 46->141 46->148 46->162 46->163 46->172 47->1 47->46 48->1 48->48 48->49 48->49 48->50 48->77 48->301 48->310 49->1 49->48 50->1 50->1 50->50 50->51 50->51 50->52 50->79 50->98 50->100 50->124 50->125 50->144 50->147 50->164 50->165 50->173 50->205 50->209 50->243 50->247 51->1 51->50 52->1 52->1 52->1 52->27 52->48 52->52 52->53 52->53 52->81 52->302 52->303 52->311 53->1 53->52 54->1 54->1 54->1 54->103 54->152 54->167 54->167 54->168 54->178 54->179 54->193 54->312 54->316 54->317 55->1 55->54 56->1 56->1 56->1 56->56 56->57 56->57 56->105 56->155 56->156 56->156 56->169 56->181 56->182 56->313 56->318 56->319 57->1 57->56 59->1 59->20 59->20 61->1 61->1 61->35 62->1 62->1 62->1 63->1 63->21 63->21 65->1 66->1 66->23 66->23 68->1 68->1 68->39 69->1 69->1 69->1 69->118 70->1 70->24 70->24 72->1 72->1 72->42 73->1 73->1 73->1 73->121 74->1 74->1 74->44 75->1 75->1 75->46 76->1 76->1 76->48 77->1 77->145 77->146 77->176 78->1 78->1 78->50 79->1 79->1 79->100 80->1 80->1 80->52 81->1 81->1 81->1 82->1 82->29 82->29 83->1 83->1 83->54 84->1 85->1 85->1 85->56 87->1 87->35 87->35 89->1 89->22 89->22 89->65 89->65 91->1 91->39 91->39 93->1 93->42 93->42 94->1 94->1 94->94 94->95 94->95 94->118 94->139 94->161 94->314 94->320 94->326 95->1 95->94 96->1 96->1 96->96 96->97 96->97 96->121 96->141 96->163 96->315 96->321 96->327 97->1 97->96 98->1 98->1 98->25 98->44 98->99 98->145 98->184 98->196 98->322 98->323 98->328 99->1 99->98 100->1 100->1 100->1 100->148 100->166 100->192 100->198 102->1 102->54 102->54 103->1 103->1 103->1 103->54 103->55 103->102 103->128 103->129 103->153 103->180 103->194 103->203 104->1 104->30 104->30 104->84 104->84 105->1 105->1 105->1 105->156 105->182 105->195 105->204 106->1 106->61 106->61 108->1 110->1 110->68 110->68 112->1 113->1 113->72 113->72 115->1 116->1 116->74 116->74 117->1 117->1 117->94 118->1 119->1 119->75 119->75 120->1 120->1 120->96 121->1 122->1 122->76 122->76 123->1 123->78 123->78 124->1 124->79 124->79 125->1 125->1 125->98 126->1 126->80 126->80 127->1 127->83 127->83 129->1 129->1 129->56 131->1 131->85 131->85 133->1 133->62 133->62 133->108 133->108 135->1 135->69 135->69 135->112 135->112 137->1 137->73 137->73 137->115 137->115 139->1 139->94 139->94 141->1 141->96 141->96 145->1 145->1 145->146 145->146 145->174 145->188 145->197 145->205 145->206 145->217 145->218 145->235 145->324 145->325 145->329 145->331 145->332 145->341 146->1 146->1 146->1 146->77 146->98 146->99 146->145 146->175 146->176 146->209 146->210 146->223 146->224 146->239 146->333 146->334 146->345 147->1 147->100 147->100 148->1 148->1 148->26 148->46 148->148 148->149 148->149 148->176 148->177 148->213 148->215 148->229 148->232 148->335 148->336 148->337 148->338 148->349 148->350 149->1 149->148 152->1 153->1 153->1 153->56 155->1 156->1 156->1 156->56 156->170 156->183 156->330 156->339 156->340 156->351 160->1 160->117 160->117 162->1 162->120 162->120 164->1 164->125 164->125 166->1 166->1 166->148 167->1 167->129 167->180 168->1 168->103 168->103 168->152 168->152 169->1 169->105 169->105 169->155 169->155 170->1 170->1 174->1 174->1 174->1 174->146 174->185 174->186 174->187 174->188 174->197 174->207 174->208 174->219 174->220 174->221 174->222 174->236 174->237 174->238 174->251 174->324 174->325 174->329 174->342 174->343 174->344 174->352 174->353 175->1 175->1 175->1 175->98 175->99 175->189 175->190 175->191 175->211 175->212 175->225 175->226 175->227 175->228 175->240 175->241 175->242 175->252 175->346 175->347 175->348 175->354 175->355 176->1 176->1 176->1 176->77 176->145 176->199 176->214 176->230 176->243 176->244 176->253 176->254 176->261 177->1 177->1 177->1 177->201 177->216 177->233 177->247 177->248 177->257 177->258 177->267 178->1 178->167 178->167 180->1 180->55 180->153 180->153 182->1 183->1 183->1 184->1 185->1 185->1 185->1 186->1 186->1 186->1 186->77 186->145 186->176 187->1 187->1 187->100 188->1 189->1 189->1 189->1 190->1 190->1 190->1 190->77 190->145 190->176 191->1 191->1 191->100 192->1 192->166 192->166 194->1 194->180 194->180 195->1 195->156 195->156 195->182 195->182 199->1 199->1 199->1 199->199 199->200 199->200 199->230 199->231 199->244 199->254 199->262 199->273 199->356 199->357 199->360 200->1 200->199 201->1 201->1 201->1 201->201 201->202 201->202 201->233 201->234 201->248 201->258 201->268 201->277 201->358 201->359 201->361 202->1 202->201 205->1 205->51 205->209 205->219 205->243 205->247 206->1 207->1 208->1 208->187 208->187 209->1 209->51 209->205 209->225 209->243 209->247 210->1 211->1 212->1 212->191 212->191 213->1 214->1 214->1 214->199 215->1 216->1 216->1 216->201 217->1 217->205 217->205 219->1 219->51 219->243 219->247 220->1 220->185 220->185 220->207 220->207 221->1 223->1 223->209 223->209 225->1 225->51 225->243 225->247 226->1 226->189 226->189 226->211 226->211 227->1 230->1 230->199 231->1 231->1 231->1 231->234 231->245 231->246 231->255 231->263 231->265 231->266 231->274 231->275 231->276 231->281 231->283 231->287 233->1 233->201 234->1 234->1 234->1 234->231 234->249 234->250 234->259 234->269 234->271 234->272 234->278 234->279 234->280 234->284 234->286 234->289 236->1 236->219 236->219 240->1 240->225 240->225 243->1 243->51 243->214 243->214 243->247 243->263 244->1 244->230 244->230 245->1 245->1 245->200 246->1 246->1 246->149 247->1 247->51 247->216 247->216 247->243 247->269 248->1 248->233 248->233 249->1 249->1 249->202 250->1 250->1 250->149 253->1 253->243 253->243 255->1 255->1 255->255 255->256 255->256 255->264 255->274 255->281 255->282 255->287 255->288 255->291 255->362 255->364 256->1 256->255 257->1 257->247 257->247 259->1 259->1 259->259 259->260 259->260 259->270 259->278 259->284 259->285 259->289 259->290 259->292 259->363 259->365 260->1 260->259 262->1 263->1 263->255 264->1 264->1 264->1 265->1 265->245 266->1 266->246 266->246 268->1 269->1 269->259 270->1 270->1 270->1 271->1 271->249 272->1 272->250 272->250 274->1 274->255 275->1 275->265 275->265 278->1 278->259 279->1 279->271 279->271 281->1 281->274 281->274 282->1 284->1 284->278 284->278 285->1 288->1 288->264 288->264 288->282 288->282 290->1 290->270 290->270 290->285 290->285
>>>Token int main ( ) { char ReplacementFor_merge [ ( 0x12bc + 4591 - 0x2487 ) ] [ ( 0x41f + 7711 - 0x223b ) ] , clear [ ( 0x91a + 1948 - 0x109a ) ] [ ( 0xe65 + 3569 - 0x1c54 ) ] , ReplacementFor_stri [ ( 0xa74 + 681 - 0xcb9 ) ] , ReplacementFor_result [ ( 0x4a6 + 3372 - 0x116e ) ] [ ( 0x1237 + 776 - 0x14db ) ] ; int T , ReplacementFor_C , ReplacementFor_N , ReplacementFor_D , i = ( 0x446 + 4029 - 0x1403 ) , ReplacementFor_j , m , ReplacementFor_dontclear = ( 0x529 + 6236 - 0x1d85 ) , ReplacementFor_tt , ReplacementFor_xx , ReplacementFor_fin , ReplacementFor_dd ; for ( m = ( 0xbd5 + 1740 - 0x12a1 ) ; m < ( 0x1428 + 2254 - 0x1c92 ) ; m ++ ) { for ( ReplacementFor_j = ( 0xb1a + 2343 - 0x1441 ) ; ReplacementFor_j < ( 0x133c + 543 - 0x14f7 ) ; ReplacementFor_j ++ ) { ReplacementFor_result [ m ] [ ReplacementFor_j ] = ( ( char ) ( 0xfbb + 441 - 0x1153 ) ) ; } } for ( m = ( 0x1579 + 3996 - 0x2515 ) ; m < ( 0x405 + 3790 - 0x126f ) ; m ++ ) { ReplacementFor_stri [ m ] = ( ( char ) ( 0x1b49 + 1024 - 0x1f28 ) ) ; } for ( m = ( 0xe75 + 3663 - 0x1cc4 ) ; m < ( 0xc00 + 27 - 0xbf7 ) ; m ++ ) { for ( ReplacementFor_j = ( 0x240 + 5313 - 0x1701 ) ; ReplacementFor_j < ( 0x1865 + 2333 - 0x217f ) ; ReplacementFor_j ++ ) { ReplacementFor_merge [ m ] [ ReplacementFor_j ] = ( ( char ) ( 0x409 + 1308 - 0x904 ) ) ; } } for ( m = ( 0x1351 + 930 - 0x16f3 ) ; m < ( 0x219b + 1342 - 0x26bd ) ; m ++ ) { for ( ReplacementFor_j = ( 0x80a + 2668 - 0x1276 ) ; ReplacementFor_j < ( 0xda2 + 4858 - 0x209a ) ; ReplacementFor_j ++ ) { clear [ m ] [ ReplacementFor_j ] = ( ( char ) ( 0x534 + 8190 - 0x2511 ) ) ; } } scanf ( " \x25 \x69 " , & T ) ; while ( i < T ) { scanf ( " \x25 \x69 " , & ReplacementFor_C ) ; for ( m = ( 0x725 + 6077 - 0x1ee2 ) ; m < ReplacementFor_C ; m ++ ) { for ( ReplacementFor_j = ( 0x2b1 + 1427 - 0x844 ) ; ReplacementFor_j < ( 0x157c + 4190 - 0x25d7 ) ; ReplacementFor_j ++ ) { scanf ( " \x20 \x25 \x63 " , & ReplacementFor_merge [ m ] [ ReplacementFor_j ] ) ; } } scanf ( " \x25 \x69 " , & ReplacementFor_D ) ; for ( m = ( 0xce8 + 2742 - 0x179e ) ; m < ReplacementFor_D ; m ++ ) { for ( ReplacementFor_j = ( 0x1437 + 1389 - 0x19a4 ) ; ReplacementFor_j < ( 0x131d + 1072 - 0x174b ) ; ReplacementFor_j ++ ) { scanf ( " \x20 \x25 \x63 " , & clear [ m ] [ ReplacementFor_j ] ) ; } } scanf ( " \x25 \x69 " , & ReplacementFor_N ) ; for ( m = ( 0x1c36 + 1111 - 0x208d ) ; m < ReplacementFor_N ; m ++ ) { scanf ( " \x20 \x25 \x63 " , & ReplacementFor_stri [ m ] ) ; } for ( m = ( 0x71c + 2844 - 0x1237 ) ; m < ReplacementFor_N ; m ++ ) { ReplacementFor_dontclear = ( 0x245f + 286 - 0x257d ) ; for ( ReplacementFor_j = ( 0xc3 + 7730 - 0x1ef5 ) ; ReplacementFor_j < ReplacementFor_C ; ReplacementFor_j ++ ) { if ( ReplacementFor_stri [ m ] == ReplacementFor_merge [ ReplacementFor_j ] [ ( 0x606 + 8208 - 0x2616 ) ] ) { if ( ReplacementFor_stri [ m - ( 0x499 + 5213 - 0x18f5 ) ] == ReplacementFor_merge [ ReplacementFor_j ] [ ( 0xb00 + 526 - 0xd0d ) ] ) { ReplacementFor_stri [ m - ( 0x1223 + 2329 - 0x1b3b ) ] = ( ( char ) ( 0xa64 + 3671 - 0x189a ) ) ; ReplacementFor_stri [ m ] = ReplacementFor_merge [ ReplacementFor_j ] [ ( 0xeba + 2875 - 0x19f3 ) ] ; ReplacementFor_dontclear = ( 0x3c7 + 5778 - 0x1a58 ) ; break ; } } if ( ReplacementFor_stri [ m ] == ReplacementFor_merge [ ReplacementFor_j ] [ ( 0x54a + 318 - 0x687 ) ] ) { if ( ReplacementFor_stri [ m - ( 0x9e4 + 6006 - 0x2159 ) ] == ReplacementFor_merge [ ReplacementFor_j ] [ ( 0x19c1 + 529 - 0x1bd2 ) ] ) { ReplacementFor_stri [ m - ( 0xfa6 + 3850 - 0x1eaf ) ] = ( ( char ) ( 0xecf + 5306 - 0x2368 ) ) ; ReplacementFor_stri [ m ] = ReplacementFor_merge [ ReplacementFor_j ] [ ( 0x3c6 + 4596 - 0x15b8 ) ] ; ReplacementFor_dontclear = ( 0x1476 + 1325 - 0x19a2 ) ; break ; } } } if ( ReplacementFor_dontclear == ( 0x747 + 4999 - 0x1ace ) ) { for ( ReplacementFor_j = ( 0xdd4 + 2965 - 0x1969 ) ; ReplacementFor_j < ReplacementFor_D ; ReplacementFor_j ++ ) { if ( ReplacementFor_stri [ m ] == clear [ ReplacementFor_j ] [ ( 0x395 + 7303 - 0x201c ) ] ) { for ( ReplacementFor_tt = ( m - ( 0x860 + 6649 - 0x2258 ) ) ; ReplacementFor_tt > - ( 0x8dd + 4299 - 0x19a7 ) ; ReplacementFor_tt -- ) { if ( ReplacementFor_stri [ ReplacementFor_tt ] == clear [ ReplacementFor_j ] [ ( 0x3b5 + 7861 - 0x2269 ) ] ) { for ( ReplacementFor_xx = m ; ReplacementFor_xx > - ( 0x157f + 2076 - 0x1d9a ) ; ReplacementFor_xx -- ) { ReplacementFor_stri [ ReplacementFor_xx ] = ( ( char ) ( 0x676 + 5302 - 0x1b0b ) ) ; } ReplacementFor_tt = - ( 0x30b + 276 - 0x41d ) ; ReplacementFor_j = ( 0x3c0 + 5910 - 0x1a16 ) ; } } } if ( ReplacementFor_stri [ m ] == clear [ ReplacementFor_j ] [ ( 0xb1 + 248 - 0x1a8 ) ] ) { for ( ReplacementFor_tt = ( m - ( 0x1087 + 4467 - 0x21f9 ) ) ; ReplacementFor_tt > - ( 0xd4 + 3473 - 0xe64 ) ; ReplacementFor_tt -- ) { if ( ReplacementFor_stri [ ReplacementFor_tt ] == clear [ ReplacementFor_j ] [ ( 0xbc4 + 1691 - 0x125f ) ] ) { for ( ReplacementFor_xx = m ; ReplacementFor_xx > - ( 0xdfa + 4476 - 0x1f75 ) ; ReplacementFor_xx -- ) { ReplacementFor_stri [ ReplacementFor_xx ] = ( ( char ) ( 0xe1d + 845 - 0x1149 ) ) ; } ReplacementFor_tt = - ( 0xffc + 2388 - 0x194e ) ; ReplacementFor_j = ( 0xbb4 + 4069 - 0x1ad9 ) ; } } } } } } for ( ReplacementFor_xx = ( 0xed2 + 1402 - 0x144c ) ; ReplacementFor_xx < ReplacementFor_N ; ReplacementFor_xx ++ ) { ReplacementFor_result [ i ] [ ReplacementFor_xx ] = ReplacementFor_stri [ ReplacementFor_xx ] ; } i ++ ; } for ( ReplacementFor_j = ( 0xee5 + 5596 - 0x24c1 ) ; ReplacementFor_j < T ; ReplacementFor_j ++ ) { for ( ReplacementFor_dd = ( 0x117a + 3964 - 0x2092 ) ; ReplacementFor_dd > ( 0x132 + 522 - 0x33c ) ; ReplacementFor_dd -- ) { if ( ReplacementFor_result [ ReplacementFor_j ] [ ReplacementFor_dd - ( 0x21ed + 331 - 0x2337 ) ] != ( ( char ) ( 0x2333 + 509 - 0x250f ) ) ) { ReplacementFor_fin = ReplacementFor_dd ; break ; } else ReplacementFor_fin = ( ReplacementFor_dd - ( 0xf11 + 4682 - 0x215a ) ) ; } printf ( " \n " " \x43 \x61 \x73 \x65 \x20 \x23 \x25 \x69 \x3a \x20 \x5b " , ( ReplacementFor_j + ( 0x55 + 5911 - 0x176b ) ) ) ; for ( ReplacementFor_xx = ( 0x843 + 1094 - 0xc89 ) ; ReplacementFor_xx < ReplacementFor_fin ; ReplacementFor_xx ++ ) { if ( ReplacementFor_result [ ReplacementFor_j ] [ ReplacementFor_xx ] != ( ( char ) ( 0x10f2 + 3516 - 0x1e8d ) ) ) { if ( ( ReplacementFor_xx + ( 0x1c70 + 2090 - 0x2499 ) ) != ReplacementFor_fin ) printf ( " \x25 \x63 \x2c \x20 " , ReplacementFor_result [ ReplacementFor_j ] [ ReplacementFor_xx ] ) ; else printf ( " \x25 \x63 " , ReplacementFor_result [ ReplacementFor_j ] [ ReplacementFor_xx ] ) ; } } printf ( " \x5d " ) ; } return ( 0x6d8 + 6011 - 0x1e53 ) ; }
>>>Func
METHOD ReplacementFor_problem
METHOD_RETURN void
PARAM const double*ReplacementFor_x
PARAM double*\012ReplacementFor_y
PARAM double*ReplacementFor_dy
<operator>.assignment ReplacementFor_omega=1.F
<operator>.assignment ReplacementFor_dy[(0x91d+4234-0x19a7)]=ReplacementFor_y[(0x709+4980-0x1a7c)]
<operator>.assignment ReplacementFor_dy[(0x1108+2174-0x1985)]=-ReplacementFor_omega*\012ReplacementFor_omega*ReplacementFor_y[(0x677+5228-0x1ae3)]
<operator>.multiplication -ReplacementFor_omega*\012ReplacementFor_omega*ReplacementFor_y[(0x677+5228-0x1ae3)]
<operator>.subtraction 0x91d+4234-0x19a7
<operator>.subtraction 0x709+4980-0x1a7c
<operator>.subtraction 0x1108+2174-0x1985
<operator>.multiplication -ReplacementFor_omega*\012ReplacementFor_omega
<operator>.addition 0x91d+4234
<operator>.addition 0x709+4980
<operator>.addition 0x1108+2174
<operator>.minus -ReplacementFor_omega
<operator>.subtraction 0x677+5228-0x1ae3
<operator>.addition 0x677+5228
>>>PDG&19 0->2 0->3 0->4 0->5 0->9 0->10 0->11 0->12 0->13 0->14 0->15 0->16 0->17 0->18 2->1 3->1 3->6 3->8 4->1 5->1 5->16 6->1 6->1 6->1 7->1 7->1 7->1 8->1 8->1 8->7 8->7 9->1 10->1 11->1 12->1 12->1 12->8 12->8 16->12 17->1
>>>Token void ReplacementFor_problem ( const double * ReplacementFor_x , double * ReplacementFor_y , double * ReplacementFor_dy ) { const double ReplacementFor_omega = 1.F ; ReplacementFor_dy [ ( 0x91d + 4234 - 0x19a7 ) ] = ReplacementFor_y [ ( 0x709 + 4980 - 0x1a7c ) ] ; ReplacementFor_dy [ ( 0x1108 + 2174 - 0x1985 ) ] = - ReplacementFor_omega * ReplacementFor_omega * ReplacementFor_y [ ( 0x677 + 5228 - 0x1ae3 ) ] ; }
>>>Func
METHOD ReplacementFor_printEPS
METHOD_RETURN void
PARAM ReplacementFor_observation ReplacementFor_pts[]
PARAM size_t len
PARAM ReplacementFor_cluster ReplacementFor_cent[]
PARAM int ReplacementFor_k
<operator>.assignment ReplacementFor_W=(0x844+1626-0xd0e)
<operator>.assignment ReplacementFor_H=(0x87c+3251-0x139f)
<operator>.assignment ReplacementFor_min_x=DBL_MAX
<operator>.assignment ReplacementFor_max_x=DBL_MIN
<operator>.assignment ReplacementFor_min_y=DBL_MAX
<operator>.assignment ReplacementFor_max_y=DBL_MIN
<operator>.assignment ReplacementFor_scale=(0xc6a+3935-0x1bc9)
<operator>.assignment ReplacementFor_cx=(0x8e7+7273-0x2550)
<operator>.assignment ReplacementFor_cy=(0x8c1+3579-0x16bc)
<operator>.assignment *ReplacementFor_colors=(double*)\012malloc(sizeof(double)*(ReplacementFor_k*(0x1dc+5179-0x1614)))
<operator>.assignment ReplacementFor_kd=ReplacementFor_k*1.0
<operator>.assignment ReplacementFor_scale=ReplacementFor_W/(ReplacementFor_max_x-\012ReplacementFor_min_x)
<operator>.assignment ReplacementFor_cx\012=(ReplacementFor_max_x+ReplacementFor_min_x)/(0x28c+6124-0x1a76)
<operator>.assignment ReplacementFor_cy=(ReplacementFor_max_y+ReplacementFor_min_y)/\012(0xfb7+4749-0x2242)
printf printf(\012"\x25\x25\x21\x50\x53\x2d\x41\x64\x6f\x62\x65\x2d\x33\x2e\x30\x20\x45\x50\x53\x46\x2d\x33\x2e\x30" "\n" "\x25\x25\x25\x25\x42\x6f\x75\x6e\x64\x69\x6e\x67\x42\x6f\x78\x3a\x20\x2d\x35\x20\x2d\x35\x20\x25\x64\x20\x25\x64" "\n"\012 ReplacementFor_W+(0xa2a+2860-0x154c) ReplacementFor_H+(0x1673+1501-0x1c46))
printf printf(\012"\x2f\x6c\x20\x7b\x72\x6c\x69\x6e\x65\x74\x6f\x7d\x20\x64\x65\x66\x20\x2f\x6d\x20\x7b\x72\x6d\x6f\x76\x65\x74\x6f\x7d\x20\x64\x65\x66" "\n"\012"\x2f\x63\x20\x7b\x20\x2e\x32\x35\x20\x73\x75\x62\x20\x65\x78\x63\x68\x20\x2e\x32\x35\x20\x73\x75\x62\x20\x65\x78\x63\x68\x20\x2e\x35\x20\x30\x20\x33\x36\x30\x20\x61\x72\x63\x20\x66\x69\x6c\x6c\x20\x7d\x20\x64\x65\x66" "\n"\012"\x2f\x73\x20\x7b\x20\x6d\x6f\x76\x65\x74\x6f\x20\x2d\x32\x20\x30\x20\x6d\x20\x32\x20\x32\x20\x6c\x20\x32\x20\x2d\x32\x20\x6c\x20\x2d\x32\x20\x2d\x32\x20\x6c\x20\x63\x6c\x6f\x73\x65\x70\x61\x74\x68\x20"\012"\x09\x67\x73\x61\x76\x65\x20\x31\x20\x73\x65\x74\x67\x72\x61\x79\x20\x66\x69\x6c\x6c\x20\x67\x72\x65\x73\x74\x6f\x72\x65\x20\x67\x73\x61\x76\x65\x20\x33\x20\x73\x65\x74\x6c\x69\x6e\x65\x77\x69\x64\x74\x68"\012"\x20\x31\x20\x73\x65\x74\x67\x72\x61\x79\x20\x73\x74\x72\x6f\x6b\x65\x20\x67\x72\x65\x73\x74\x6f\x72\x65\x20\x30\x20\x73\x65\x74\x67\x72\x61\x79\x20\x73\x74\x72\x6f\x6b\x65\x20\x7d\x64\x65\x66" "\n"\012)
printf printf("\n" "\x25\x25\x25\x25\x45\x4f\x46")
free free(\012ReplacementFor_colors)
<operator>.lessThan i<ReplacementFor_k
<operator>.postIncrement i++
<operator>.lessThan ReplacementFor_j<len
<operator>.postIncrement ReplacementFor_j\012++
<operator>.greaterThan ReplacementFor_scale>(ReplacementFor_H/(\012ReplacementFor_max_y-ReplacementFor_min_y))
<operator>.lessThan i<ReplacementFor_k
<operator>.postIncrement i++
<operator>.subtraction 0x844+1626-0xd0e
<operator>.subtraction 0x87c+3251-0x139f
<operator>.subtraction 0xc6a+3935-0x1bc9
<operator>.subtraction 0x8e7+7273-0x2550
<operator>.subtraction 0x8c1+3579-0x16bc
<operator>.cast (double*)\012malloc(sizeof(double)*(ReplacementFor_k*(0x1dc+5179-0x1614)))
<operator>.multiplication ReplacementFor_k*1.0
<operator>.assignment i=\012(0x12fa+908-0x1686)
<operator>.assignment *(ReplacementFor_colors+\012(0x233+7117-0x1dfd)*i)=((0xcda+399-0xe66)*(i+(0x8f5+6366-0x21d2))%\012ReplacementFor_k)/ReplacementFor_kd
<operator>.assignment *(ReplacementFor_colors+(0x26f+7830-0x2102)*\012i+(0x1a7b+294-0x1ba0))=((0x1349+2820-0x1e46)*i%ReplacementFor_k)/\012ReplacementFor_kd
<operator>.assignment *(ReplacementFor_colors+(0x5d+6523-0x19d5)*i+\012(0x1c65+998-0x2049))=((0x13ab+2821-0x1ea7)*i%ReplacementFor_k)/ReplacementFor_kd
<operator>.assignment ReplacementFor_j=(0xf1c+4243-0x1faf)
<operator>.division ReplacementFor_W/(ReplacementFor_max_x-\012ReplacementFor_min_x)
<operator>.assignment ReplacementFor_scale=\012ReplacementFor_H/(ReplacementFor_max_y-ReplacementFor_min_y)
<operator>.division (ReplacementFor_max_x+ReplacementFor_min_x)/(0x28c+6124-0x1a76)
<operator>.division (ReplacementFor_max_y+ReplacementFor_min_y)/\012(0xfb7+4749-0x2242)
<operator>.addition ReplacementFor_W+(0xa2a+2860-0x154c)
<operator>.addition ReplacementFor_H+(0x1673+1501-0x1c46)
<operator>.assignment i=(0x3e6+4409-0x151f)
printf printf(\012"\x25\x67\x20\x25\x67\x20\x25\x67\x20\x73\x65\x74\x72\x67\x62\x63\x6f\x6c\x6f\x72" "\n"\012 *(ReplacementFor_colors+(0x185b+3346-0x256a)*i) *(ReplacementFor_colors+\012(0xb5d+5827-0x221d)*i+(0x38d+929-0x72d)) *(ReplacementFor_colors+\012(0x629+8178-0x2618)*i+(0x1590+3499-0x2339)))
printf printf(\012"\n" "\x30\x20\x73\x65\x74\x67\x72\x61\x79\x20\x25\x67\x20\x25\x67\x20\x73" "\n"\012 (ReplacementFor_cent[i].ReplacementFor_x-ReplacementFor_cx)*\012ReplacementFor_scale+ReplacementFor_W/(0x3c3+3280-0x1091) (ReplacementFor_cent[i\012].ReplacementFor_y-ReplacementFor_cy)*ReplacementFor_scale+ReplacementFor_H/\012(0x4cc+5871-0x1bb9))
<operator>.addition 0x844+1626
<operator>.addition 0x87c+3251
<operator>.addition 0xc6a+3935
<operator>.addition 0x8e7+7273
<operator>.addition 0x8c1+3579
malloc malloc(sizeof(double)*(ReplacementFor_k*(0x1dc+5179-0x1614)))
<operator>.lessThan ReplacementFor_max_x<ReplacementFor_pts[ReplacementFor_j].\012ReplacementFor_x
<operator>.greaterThan ReplacementFor_min_x>ReplacementFor_pts[ReplacementFor_j].\012ReplacementFor_x
<operator>.lessThan ReplacementFor_max_y<ReplacementFor_pts[ReplacementFor_j].\012ReplacementFor_y
<operator>.greaterThan ReplacementFor_min_y>ReplacementFor_pts[ReplacementFor_j].\012ReplacementFor_y
<operator>.subtraction ReplacementFor_max_x-\012ReplacementFor_min_x
<operator>.division ReplacementFor_H/(\012ReplacementFor_max_y-ReplacementFor_min_y)
<operator>.addition ReplacementFor_max_x+ReplacementFor_min_x
<operator>.subtraction 0x28c+6124-0x1a76
<operator>.addition ReplacementFor_max_y+ReplacementFor_min_y
<operator>.subtraction 0xfb7+4749-0x2242
<operator>.subtraction 0xa2a+2860-0x154c
<operator>.subtraction 0x1673+1501-0x1c46
<operator>.lessThan ReplacementFor_j<len
<operator>.postIncrement ReplacementFor_j++
<operator>.multiplication sizeof(double)*(ReplacementFor_k*(0x1dc+5179-0x1614))
<operator>.subtraction 0x12fa+908-0x1686
<operator>.division ((0xcda+399-0xe66)*(i+(0x8f5+6366-0x21d2))%\012ReplacementFor_k)/ReplacementFor_kd
<operator>.division ((0x1349+2820-0x1e46)*i%ReplacementFor_k)/\012ReplacementFor_kd
<operator>.division ((0x13ab+2821-0x1ea7)*i%ReplacementFor_k)/ReplacementFor_kd
<operator>.subtraction 0xf1c+4243-0x1faf
<operator>.assignment ReplacementFor_max_x=ReplacementFor_pts[ReplacementFor_j].\012ReplacementFor_x
<operator>.assignment ReplacementFor_min_x=ReplacementFor_pts[ReplacementFor_j].\012ReplacementFor_x
<operator>.assignment ReplacementFor_max_y=ReplacementFor_pts[ReplacementFor_j].\012ReplacementFor_y
<operator>.assignment ReplacementFor_min_y=ReplacementFor_pts[ReplacementFor_j].\012ReplacementFor_y
<operator>.subtraction ReplacementFor_max_y-ReplacementFor_min_y
<operator>.division ReplacementFor_H/(ReplacementFor_max_y-ReplacementFor_min_y)
<operator>.addition 0x28c+6124
<operator>.addition 0xfb7+4749
<operator>.addition 0xa2a+2860
<operator>.addition 0x1673+1501
<operator>.subtraction 0x3e6+4409-0x151f
<operator>.assignment ReplacementFor_j=\012(0x71c+456-0x8e4)
printf printf(\012"\x25\x2e\x33\x66\x20\x25\x2e\x33\x66\x20\x63" "\n" (ReplacementFor_pts[\012ReplacementFor_j].ReplacementFor_x-ReplacementFor_cx)*ReplacementFor_scale+\012ReplacementFor_W/(0x789+2164-0xffb) (ReplacementFor_pts[ReplacementFor_j].\012ReplacementFor_y-ReplacementFor_cy)*ReplacementFor_scale+ReplacementFor_H/\012(0x3f5+1560-0xa0b))
<operator>.addition (ReplacementFor_cent[i].ReplacementFor_x-ReplacementFor_cx)*\012ReplacementFor_scale+ReplacementFor_W/(0x3c3+3280-0x1091)
<operator>.addition (ReplacementFor_cent[i\012].ReplacementFor_y-ReplacementFor_cy)*ReplacementFor_scale+ReplacementFor_H/\012(0x4cc+5871-0x1bb9)
<operator>.sizeOf sizeof(double)
<operator>.multiplication ReplacementFor_k*(0x1dc+5179-0x1614)
<operator>.addition 0x12fa+908
<operator>.addition ReplacementFor_colors+\012(0x233+7117-0x1dfd)*i
<operator>.modulo (0xcda+399-0xe66)*(i+(0x8f5+6366-0x21d2))%\012ReplacementFor_k
<operator>.addition ReplacementFor_colors+(0x26f+7830-0x2102)*\012i+(0x1a7b+294-0x1ba0)
<operator>.modulo (0x1349+2820-0x1e46)*i%ReplacementFor_k
<operator>.addition ReplacementFor_colors+(0x5d+6523-0x19d5)*i+\012(0x1c65+998-0x2049)
<operator>.modulo (0x13ab+2821-0x1ea7)*i%ReplacementFor_k
<operator>.addition 0xf1c+4243
<operator>.subtraction ReplacementFor_max_y-ReplacementFor_min_y
<operator>.addition 0x3e6+4409
<operator>.addition ReplacementFor_colors+(0x185b+3346-0x256a)*i
<operator>.addition ReplacementFor_colors+\012(0xb5d+5827-0x221d)*i+(0x38d+929-0x72d)
<operator>.addition ReplacementFor_colors+\012(0x629+8178-0x2618)*i+(0x1590+3499-0x2339)
<operator>.notEquals ReplacementFor_pts\012[ReplacementFor_j].group!=i
<operator>.multiplication (ReplacementFor_cent[i].ReplacementFor_x-ReplacementFor_cx)*\012ReplacementFor_scale
<operator>.division ReplacementFor_W/(0x3c3+3280-0x1091)
<operator>.multiplication (ReplacementFor_cent[i\012].ReplacementFor_y-ReplacementFor_cy)*ReplacementFor_scale
<operator>.division ReplacementFor_H/\012(0x4cc+5871-0x1bb9)
<operator>.subtraction 0x1dc+5179-0x1614
<operator>.multiplication (0x233+7117-0x1dfd)*i
<operator>.multiplication (0xcda+399-0xe66)*(i+(0x8f5+6366-0x21d2))
<operator>.addition ReplacementFor_colors+(0x26f+7830-0x2102)*\012i
<operator>.subtraction 0x1a7b+294-0x1ba0
<operator>.multiplication (0x1349+2820-0x1e46)*i
<operator>.addition ReplacementFor_colors+(0x5d+6523-0x19d5)*i
<operator>.subtraction 0x1c65+998-0x2049
<operator>.multiplication (0x13ab+2821-0x1ea7)*i
<operator>.multiplication (0x185b+3346-0x256a)*i
<operator>.addition ReplacementFor_colors+\012(0xb5d+5827-0x221d)*i
<operator>.subtraction 0x38d+929-0x72d
<operator>.addition ReplacementFor_colors+\012(0x629+8178-0x2618)*i
<operator>.subtraction 0x1590+3499-0x2339
<operator>.subtraction 0x71c+456-0x8e4
<operator>.addition (ReplacementFor_pts[\012ReplacementFor_j].ReplacementFor_x-ReplacementFor_cx)*ReplacementFor_scale+\012ReplacementFor_W/(0x789+2164-0xffb)
<operator>.addition (ReplacementFor_pts[ReplacementFor_j].\012ReplacementFor_y-ReplacementFor_cy)*ReplacementFor_scale+ReplacementFor_H/\012(0x3f5+1560-0xa0b)
<operator>.subtraction ReplacementFor_cent[i].ReplacementFor_x-ReplacementFor_cx
<operator>.subtraction 0x3c3+3280-0x1091
<operator>.subtraction ReplacementFor_cent[i\012].ReplacementFor_y-ReplacementFor_cy
<operator>.subtraction 0x4cc+5871-0x1bb9
<operator>.addition 0x1dc+5179
<operator>.subtraction 0x233+7117-0x1dfd
<operator>.subtraction 0xcda+399-0xe66
<operator>.addition i+(0x8f5+6366-0x21d2)
<operator>.multiplication (0x26f+7830-0x2102)*\012i
<operator>.addition 0x1a7b+294
<operator>.subtraction 0x1349+2820-0x1e46
<operator>.multiplication (0x5d+6523-0x19d5)*i
<operator>.addition 0x1c65+998
<operator>.subtraction 0x13ab+2821-0x1ea7
<operator>.subtraction 0x185b+3346-0x256a
<operator>.multiplication (0xb5d+5827-0x221d)*i
<operator>.addition 0x38d+929
<operator>.multiplication (0x629+8178-0x2618)*i
<operator>.addition 0x1590+3499
<operator>.addition 0x71c+456
<operator>.multiplication (ReplacementFor_pts[\012ReplacementFor_j].ReplacementFor_x-ReplacementFor_cx)*ReplacementFor_scale
<operator>.division ReplacementFor_W/(0x789+2164-0xffb)
<operator>.multiplication (ReplacementFor_pts[ReplacementFor_j].\012ReplacementFor_y-ReplacementFor_cy)*ReplacementFor_scale
<operator>.division ReplacementFor_H/\012(0x3f5+1560-0xa0b)
<operator>.addition 0x3c3+3280
<operator>.addition 0x4cc+5871
<operator>.addition 0x233+7117
<operator>.addition 0xcda+399
<operator>.subtraction 0x8f5+6366-0x21d2
<operator>.subtraction 0x26f+7830-0x2102
<operator>.addition 0x1349+2820
<operator>.subtraction 0x5d+6523-0x19d5
<operator>.addition 0x13ab+2821
<operator>.addition 0x185b+3346
<operator>.subtraction 0xb5d+5827-0x221d
<operator>.subtraction 0x629+8178-0x2618
<operator>.subtraction ReplacementFor_pts[\012ReplacementFor_j].ReplacementFor_x-ReplacementFor_cx
<operator>.subtraction 0x789+2164-0xffb
<operator>.subtraction ReplacementFor_pts[ReplacementFor_j].\012ReplacementFor_y-ReplacementFor_cy
<operator>.subtraction 0x3f5+1560-0xa0b
<operator>.addition 0x8f5+6366
<operator>.addition 0x26f+7830
<operator>.addition 0x5d+6523
<operator>.addition 0xb5d+5827
<operator>.addition 0x629+8178
<operator>.addition 0x789+2164
<operator>.addition 0x3f5+1560
<operator>.indirection *(ReplacementFor_colors+\012(0x233+7117-0x1dfd)*i)
<operator>.indirection *(ReplacementFor_colors+(0x26f+7830-0x2102)*\012i+(0x1a7b+294-0x1ba0))
<operator>.indirection *(ReplacementFor_colors+(0x5d+6523-0x19d5)*i+\012(0x1c65+998-0x2049))
<operator>.indirection *(ReplacementFor_colors+(0x185b+3346-0x256a)*i)
<operator>.indirection *(ReplacementFor_colors+\012(0xb5d+5827-0x221d)*i+(0x38d+929-0x72d))
<operator>.indirection *(ReplacementFor_colors+\012(0x629+8178-0x2618)*i+(0x1590+3499-0x2339))
<operator>.fieldAccess ReplacementFor_pts[ReplacementFor_j].\012ReplacementFor_x
<operator>.fieldAccess ReplacementFor_pts[ReplacementFor_j].\012ReplacementFor_x
<operator>.fieldAccess ReplacementFor_pts[ReplacementFor_j].\012ReplacementFor_y
<operator>.fieldAccess ReplacementFor_pts[ReplacementFor_j].\012ReplacementFor_y
<operator>.indirectIndexAccess ReplacementFor_pts[ReplacementFor_j]
FIELD_IDENTIFIER ReplacementFor_x ReplacementFor_x
<operator>.fieldAccess ReplacementFor_pts[ReplacementFor_j].\012ReplacementFor_x
<operator>.indirectIndexAccess ReplacementFor_pts[ReplacementFor_j]
FIELD_IDENTIFIER ReplacementFor_x ReplacementFor_x
<operator>.fieldAccess ReplacementFor_pts[ReplacementFor_j].\012ReplacementFor_x
<operator>.indirectIndexAccess ReplacementFor_pts[ReplacementFor_j]
FIELD_IDENTIFIER ReplacementFor_y ReplacementFor_y
<operator>.fieldAccess ReplacementFor_pts[ReplacementFor_j].\012ReplacementFor_y
<operator>.indirectIndexAccess ReplacementFor_pts[ReplacementFor_j]
FIELD_IDENTIFIER ReplacementFor_y ReplacementFor_y
<operator>.fieldAccess ReplacementFor_pts[ReplacementFor_j].\012ReplacementFor_y
<operator>.indirectIndexAccess ReplacementFor_pts[ReplacementFor_j]
FIELD_IDENTIFIER ReplacementFor_x ReplacementFor_x
<operator>.indirectIndexAccess ReplacementFor_pts[ReplacementFor_j]
FIELD_IDENTIFIER ReplacementFor_x ReplacementFor_x
<operator>.indirectIndexAccess ReplacementFor_pts[ReplacementFor_j]
FIELD_IDENTIFIER ReplacementFor_y ReplacementFor_y
<operator>.indirectIndexAccess ReplacementFor_pts[ReplacementFor_j]
FIELD_IDENTIFIER ReplacementFor_y ReplacementFor_y
<operator>.fieldAccess ReplacementFor_pts\012[ReplacementFor_j].group
<operator>.fieldAccess ReplacementFor_cent[i].ReplacementFor_x
<operator>.fieldAccess ReplacementFor_cent[i\012].ReplacementFor_y
<operator>.indirectIndexAccess ReplacementFor_pts\012[ReplacementFor_j]
FIELD_IDENTIFIER group group
<operator>.indirectIndexAccess ReplacementFor_cent[i]
FIELD_IDENTIFIER ReplacementFor_x ReplacementFor_x
<operator>.indirectIndexAccess ReplacementFor_cent[i\012]
FIELD_IDENTIFIER ReplacementFor_y ReplacementFor_y
<operator>.fieldAccess ReplacementFor_pts[\012ReplacementFor_j].ReplacementFor_x
<operator>.fieldAccess ReplacementFor_pts[ReplacementFor_j].\012ReplacementFor_y
<operator>.indirectIndexAccess ReplacementFor_pts[\012ReplacementFor_j]
FIELD_IDENTIFIER ReplacementFor_x ReplacementFor_x
<operator>.indirectIndexAccess ReplacementFor_pts[ReplacementFor_j]
FIELD_IDENTIFIER ReplacementFor_y ReplacementFor_y
>>>PDG&222 0->2 0->3 0->4 0->5 0->8 0->9 0->10 0->11 0->20 0->21 0->22 0->23 0->24 0->25 0->26 0->27 0->28 0->29 0->30 0->31 0->32 0->33 0->34 0->35 0->37 0->43 0->45 0->46 0->47 0->48 0->50 0->51 0->52 0->53 0->54 0->55 0->56 0->58 0->59 0->60 0->61 0->62 0->63 0->64 0->65 0->66 0->67 0->68 0->69 0->70 0->71 0->73 0->74 0->75 0->76 0->77 0->82 0->83 0->84 0->85 0->86 0->87 0->88 0->90 0->94 0->95 0->96 0->97 0->98 0->99 0->100 0->101 0->102 0->103 0->104 0->105 0->106 0->107 0->108 0->109 0->110 0->111 0->112 0->113 0->114 0->115 0->116 0->117 0->118 0->119 0->120 0->121 0->122 0->123 0->124 0->125 0->126 0->127 0->130 0->131 0->132 0->133 0->134 0->135 0->136 0->137 0->138 0->139 0->140 0->141 0->142 0->143 0->144 0->145 0->146 0->147 0->148 0->149 0->150 0->151 0->152 0->153 0->154 0->155 0->156 0->157 0->158 0->159 0->160 0->161 0->162 0->163 0->164 0->165 0->166 0->167 0->168 0->169 0->170 0->171 0->172 0->173 0->174 0->175 0->176 2->1 3->26 4->1 5->94 6->1 6->1 6->43 7->1 7->1 7->63 8->1 8->59 8->62 9->1 9->58 9->62 10->1 10->1 10->61 10->82 11->1 11->1 11->60 11->82 12->1 12->1 13->1 13->1 14->1 14->1 15->1 15->1 15->23 15->96 15->98 15->100 15->105 15->106 15->107 15->116 15->119 15->123 15->125 16->1 16->1 16->1 16->74 17->1 17->1 17->28 18->1 18->1 18->1 18->130 18->166 19->1 19->1 19->1 19->132 19->168 20->1 20->1 20->1 21->1 22->1 23->1 24->24 24->25 24->29 24->39 24->40 24->41 24->74 24->75 24->76 24->96 24->97 24->97 24->98 24->99 24->100 24->101 24->114 24->114 24->115 24->116 24->117 24->118 24->119 24->120 24->121 24->135 24->136 24->137 24->138 24->139 24->140 24->141 24->142 24->143 24->156 24->157 24->158 24->159 24->160 24->161 24->162 24->170 24->171 24->172 24->177 24->178 24->179 25->1 25->24 26->1 26->1 26->1 26->26 26->27 26->27 26->58 26->59 26->60 26->61 26->70 26->183 26->184 26->185 26->186 26->187 26->188 26->190 26->191 26->193 26->194 26->196 26->197 27->1 27->26 28->1 28->1 28->1 28->44 28->83 28->103 28->109 28->150 29->1 29->1 29->1 29->29 29->30 29->50 29->51 29->70 29->89 29->91 29->92 29->105 29->106 29->107 29->109 29->110 29->111 29->112 29->122 29->122 29->123 29->124 29->125 29->126 29->127 29->130 29->131 29->132 29->133 29->144 29->145 29->146 29->147 29->148 29->149 29->154 29->155 29->163 29->164 29->165 29->173 29->174 29->180 29->181 29->182 29->208 29->209 29->212 29->213 29->214 29->215 30->1 30->29 31->1 31->6 31->6 32->1 32->7 32->7 33->1 33->12 33->12 34->1 34->13 34->13 35->1 35->14 35->14 36->1 37->16 37->16 37->24 38->1 38->1 38->24 39->1 39->1 39->1 40->1 40->1 40->1 41->1 41->1 41->1 42->1 42->1 42->26 43->1 43->17 43->17 43->20 43->47 43->110 43->151 44->1 44->1 44->1 44->109 44->150 45->1 45->1 45->18 45->18 46->1 46->1 46->19 46->19 47->1 47->1 48->1 48->1 49->1 49->1 49->29 50->1 50->1 50->1 50->1 51->1 51->1 51->1 57->1 57->15 57->36 58->1 58->59 58->62 58->78 58->78 58->189 58->199 58->200 59->1 59->62 59->79 59->79 59->192 59->201 59->202 60->1 60->61 60->80 60->80 60->82 60->195 60->203 60->204 61->1 61->81 61->81 61->82 61->198 61->205 61->206 62->43 62->43 62->45 62->45 62->64 62->64 63->1 63->20 63->28 63->28 63->48 63->83 63->112 63->153 64->1 64->1 65->1 65->45 65->45 66->1 66->1 67->1 67->46 67->46 68->1 68->20 68->20 68->47 68->47 69->1 69->20 69->20 69->48 69->48 70->1 70->1 70->1 70->70 70->71 70->71 70->108 70->207 70->210 70->211 71->1 71->70 72->1 72->57 73->1 73->38 73->38 74->1 74->39 74->39 74->75 75->1 75->40 75->40 75->76 76->1 76->1 76->41 76->41 76->74 77->1 77->42 77->42 78->1 78->58 78->62 79->1 79->59 79->62 80->1 80->60 80->82 81->1 81->61 81->82 82->46 82->46 82->63 82->63 82->66 82->66 82->103 82->103 83->1 83->20 83->44 83->44 83->48 83->112 83->153 88->1 88->49 88->49 89->1 89->1 89->70 90->1 90->1 90->1 91->1 91->1 92->1 92->1 93->1 94->1 94->37 94->72 94->72 96->1 97->1 97->74 97->74 97->99 98->1 98->1 99->1 99->75 99->75 99->101 100->1 100->1 101->1 101->24 101->76 101->76 103->46 103->46 103->66 103->66 103->83 103->83 105->1 106->1 106->1 107->1 107->1 108->1 108->30 108->90 108->128 108->129 108->150 108->151 108->152 108->153 108->166 108->167 108->168 108->169 108->175 108->176 108->216 108->217 108->218 108->219 108->220 108->221 109->1 109->51 109->51 109->91 109->91 109->111 110->1 110->1 110->51 110->51 110->91 110->91 110->151 111->1 111->1 111->51 111->51 111->92 111->92 111->109 111->150 112->1 112->1 112->51 112->51 112->92 112->92 112->153 113->1 113->94 113->94 114->1 114->96 114->96 114->115 114->137 114->138 115->1 115->1 115->97 115->97 116->1 117->1 117->98 117->98 118->1 118->99 118->99 118->141 119->1 120->1 120->100 120->100 121->1 121->25 121->101 121->101 122->1 122->105 122->105 122->145 123->1 124->1 124->106 124->106 125->1 126->1 126->107 126->107 127->1 127->89 127->89 128->1 128->1 129->1 129->1 130->1 130->109 130->109 130->166 131->1 131->110 131->110 132->1 132->111 132->111 132->168 133->1 133->112 133->112 135->1 135->114 135->114 136->1 136->115 136->115 137->1 138->1 138->98 138->98 138->116 138->116 138->118 140->1 140->118 140->118 141->1 141->100 141->100 141->119 141->119 141->121 143->1 143->121 143->121 144->1 144->122 144->122 145->1 145->106 145->106 145->123 145->123 145->147 147->1 147->30 147->107 147->107 147->108 147->125 147->125 150->1 150->90 150->90 150->128 150->128 150->152 151->1 151->90 151->90 151->110 151->128 151->128 152->1 152->90 152->90 152->109 152->129 152->129 152->150 153->1 153->90 153->90 153->112 153->129 153->129 158->1 158->115 158->115 158->137 158->137 159->1 159->138 159->138 161->1 161->141 161->141 164->1 164->145 164->145 165->1 165->147 165->147 166->130 166->150 166->150 167->1 167->151 167->151 168->132 168->152 168->152 169->1 169->153 169->153
>>>Token void ReplacementFor_printEPS ( ReplacementFor_observation ReplacementFor_pts [ ] , size_t len , ReplacementFor_cluster ReplacementFor_cent [ ] , int ReplacementFor_k ) { int ReplacementFor_W = ( 0x844 + 1626 - 0xd0e ) , ReplacementFor_H = ( 0x87c + 3251 - 0x139f ) ; double ReplacementFor_min_x = DBL_MAX , ReplacementFor_max_x = DBL_MIN , ReplacementFor_min_y = DBL_MAX , ReplacementFor_max_y = DBL_MIN ; double ReplacementFor_scale = ( 0xc6a + 3935 - 0x1bc9 ) , ReplacementFor_cx = ( 0x8e7 + 7273 - 0x2550 ) , ReplacementFor_cy = ( 0x8c1 + 3579 - 0x16bc ) ; double * ReplacementFor_colors = ( double * ) malloc ( sizeof ( double ) * ( ReplacementFor_k * ( 0x1dc + 5179 - 0x1614 ) ) ) ; int i ; size_t ReplacementFor_j ; double ReplacementFor_kd = ReplacementFor_k * 1.0 ; for ( i = ( 0x12fa + 908 - 0x1686 ) ; i < ReplacementFor_k ; i ++ ) { * ( ReplacementFor_colors + ( 0x233 + 7117 - 0x1dfd ) * i ) = ( ( 0xcda + 399 - 0xe66 ) * ( i + ( 0x8f5 + 6366 - 0x21d2 ) ) % ReplacementFor_k ) / ReplacementFor_kd ; * ( ReplacementFor_colors + ( 0x26f + 7830 - 0x2102 ) * i + ( 0x1a7b + 294 - 0x1ba0 ) ) = ( ( 0x1349 + 2820 - 0x1e46 ) * i % ReplacementFor_k ) / ReplacementFor_kd ; * ( ReplacementFor_colors + ( 0x5d + 6523 - 0x19d5 ) * i + ( 0x1c65 + 998 - 0x2049 ) ) = ( ( 0x13ab + 2821 - 0x1ea7 ) * i % ReplacementFor_k ) / ReplacementFor_kd ; } for ( ReplacementFor_j = ( 0xf1c + 4243 - 0x1faf ) ; ReplacementFor_j < len ; ReplacementFor_j ++ ) { if ( ReplacementFor_max_x < ReplacementFor_pts [ ReplacementFor_j ] . ReplacementFor_x ) { ReplacementFor_max_x = ReplacementFor_pts [ ReplacementFor_j ] . ReplacementFor_x ; } if ( ReplacementFor_min_x > ReplacementFor_pts [ ReplacementFor_j ] . ReplacementFor_x ) { ReplacementFor_min_x = ReplacementFor_pts [ ReplacementFor_j ] . ReplacementFor_x ; } if ( ReplacementFor_max_y < ReplacementFor_pts [ ReplacementFor_j ] . ReplacementFor_y ) { ReplacementFor_max_y = ReplacementFor_pts [ ReplacementFor_j ] . ReplacementFor_y ; } if ( ReplacementFor_min_y > ReplacementFor_pts [ ReplacementFor_j ] . ReplacementFor_y ) { ReplacementFor_min_y = ReplacementFor_pts [ ReplacementFor_j ] . ReplacementFor_y ; } } ReplacementFor_scale = ReplacementFor_W / ( ReplacementFor_max_x - ReplacementFor_min_x ) ; if ( ReplacementFor_scale > ( ReplacementFor_H / ( ReplacementFor_max_y - ReplacementFor_min_y ) ) ) { ReplacementFor_scale = ReplacementFor_H / ( ReplacementFor_max_y - ReplacementFor_min_y ) ; } ; ReplacementFor_cx = ( ReplacementFor_max_x + ReplacementFor_min_x ) / ( 0x28c + 6124 - 0x1a76 ) ; ReplacementFor_cy = ( ReplacementFor_max_y + ReplacementFor_min_y ) / ( 0xfb7 + 4749 - 0x2242 ) ; printf ( " \x25 \x25 \x21 \x50 \x53 \x2d \x41 \x64 \x6f \x62 \x65 \x2d \x33 \x2e \x30 \x20 \x45 \x50 \x53 \x46 \x2d \x33 \x2e \x30 " " \n " " \x25 \x25 \x25 \x25 \x42 \x6f \x75 \x6e \x64 \x69 \x6e \x67 \x42 \x6f \x78 \x3a \x20 \x2d \x35 \x20 \x2d \x35 \x20 \x25 \x64 \x20 \x25 \x64 " " \n " , ReplacementFor_W + ( 0xa2a + 2860 - 0x154c ) , ReplacementFor_H + ( 0x1673 + 1501 - 0x1c46 ) ) ; printf ( " \x2f \x6c \x20 \x7b \x72 \x6c \x69 \x6e \x65 \x74 \x6f \x7d \x20 \x64 \x65 \x66 \x20 \x2f \x6d \x20 \x7b \x72 \x6d \x6f \x76 \x65 \x74 \x6f \x7d \x20 \x64 \x65 \x66 " " \n " " \x2f \x63 \x20 \x7b \x20 \x2e \x32 \x35 \x20 \x73 \x75 \x62 \x20 \x65 \x78 \x63 \x68 \x20 \x2e \x32 \x35 \x20 \x73 \x75 \x62 \x20 \x65 \x78 \x63 \x68 \x20 \x2e \x35 \x20 \x30 \x20 \x33 \x36 \x30 \x20 \x61 \x72 \x63 \x20 \x66 \x69 \x6c \x6c \x20 \x7d \x20 \x64 \x65 \x66 " " \n " " \x2f \x73 \x20 \x7b \x20 \x6d \x6f \x76 \x65 \x74 \x6f \x20 \x2d \x32 \x20 \x30 \x20 \x6d \x20 \x32 \x20 \x32 \x20 \x6c \x20 \x32 \x20 \x2d \x32 \x20 \x6c \x20 \x2d \x32 \x20 \x2d \x32 \x20 \x6c \x20 \x63 \x6c \x6f \x73 \x65 \x70 \x61 \x74 \x68 \x20 " " \x09 \x67 \x73 \x61 \x76 \x65 \x20 \x31 \x20 \x73 \x65 \x74 \x67 \x72 \x61 \x79 \x20 \x66 \x69 \x6c \x6c \x20 \x67 \x72 \x65 \x73 \x74 \x6f \x72 \x65 \x20 \x67 \x73 \x61 \x76 \x65 \x20 \x33 \x20 \x73 \x65 \x74 \x6c \x69 \x6e \x65 \x77 \x69 \x64 \x74 \x68 " " \x20 \x31 \x20 \x73 \x65 \x74 \x67 \x72 \x61 \x79 \x20 \x73 \x74 \x72 \x6f \x6b \x65 \x20 \x67 \x72 \x65 \x73 \x74 \x6f \x72 \x65 \x20 \x30 \x20 \x73 \x65 \x74 \x67 \x72 \x61 \x79 \x20 \x73 \x74 \x72 \x6f \x6b \x65 \x20 \x7d \x64 \x65 \x66 " " \n " ) ; for ( int i = ( 0x3e6 + 4409 - 0x151f ) ; i < ReplacementFor_k ; i ++ ) { printf ( " \x25 \x67 \x20 \x25 \x67 \x20 \x25 \x67 \x20 \x73 \x65 \x74 \x72 \x67 \x62 \x63 \x6f \x6c \x6f \x72 " " \n " , * ( ReplacementFor_colors + ( 0x185b + 3346 - 0x256a ) * i ) , * ( ReplacementFor_colors + ( 0xb5d + 5827 - 0x221d ) * i + ( 0x38d + 929 - 0x72d ) ) , * ( ReplacementFor_colors + ( 0x629 + 8178 - 0x2618 ) * i + ( 0x1590 + 3499 - 0x2339 ) ) ) ; for ( ReplacementFor_j = ( 0x71c + 456 - 0x8e4 ) ; ReplacementFor_j < len ; ReplacementFor_j ++ ) { if ( ReplacementFor_pts [ ReplacementFor_j ] . group != i ) { continue ; } printf ( " \x25 \x2e \x33 \x66 \x20 \x25 \x2e \x33 \x66 \x20 \x63 " " \n " , ( ReplacementFor_pts [ ReplacementFor_j ] . ReplacementFor_x - ReplacementFor_cx ) * ReplacementFor_scale + ReplacementFor_W / ( 0x789 + 2164 - 0xffb ) , ( ReplacementFor_pts [ ReplacementFor_j ] . ReplacementFor_y - ReplacementFor_cy ) * ReplacementFor_scale + ReplacementFor_H / ( 0x3f5 + 1560 - 0xa0b ) ) ; } printf ( " \n " " \x30 \x20 \x73 \x65 \x74 \x67 \x72 \x61 \x79 \x20 \x25 \x67 \x20 \x25 \x67 \x20 \x73 " " \n " , ( ReplacementFor_cent [ i ] . ReplacementFor_x - ReplacementFor_cx ) * ReplacementFor_scale + ReplacementFor_W / ( 0x3c3 + 3280 - 0x1091 ) , ( ReplacementFor_cent [ i ] . ReplacementFor_y - ReplacementFor_cy ) * ReplacementFor_scale + ReplacementFor_H / ( 0x4cc + 5871 - 0x1bb9 ) ) ; } printf ( " \n " " \x25 \x25 \x25 \x25 \x45 \x4f \x46 " ) ; free ( ReplacementFor_colors ) ; }
>>>Func
METHOD ReplacementFor_fill_numbers
METHOD_RETURN void
PARAM void
<operator>.lessEqualsThan ReplacementFor_b<=(0x574+1063-0x991)
<operator>.preIncrement ++ReplacementFor_b
<operator>.assignment ReplacementFor_b\012=(0x1f42+766-0x223e)
fprintf fprintf(stderr,"\x62\x61\x73\x65\x20\x3d\x20\x25\x64" "\n",ReplacementFor_b)
ReplacementFor_fill_happy ReplacementFor_fill_happy(ReplacementFor_b)
<operator>.assignment m=(0x1034+2051-0x1836)<<(\012ReplacementFor_b-(0x31d+249-0x414))
<operator>.subtraction 0x574+1063-0x991
<operator>.lessEqualsThan i<=ReplacementFor_N
<operator>.preIncrement ++i
<operator>.subtraction 0x1f42+766-0x223e
<operator>.addition 0x574+1063
<operator>.shiftLeft (0x1034+2051-0x1836)<<(\012ReplacementFor_b-(0x31d+249-0x414))
<operator>.assignment i=(0x83b+318-0x978)
<operator>.equals ReplacementFor_happy[i]==(0xb+6743-0x1a61)
<operator>.addition 0x1f42+766
<operator>.subtraction 0x1034+2051-0x1836
<operator>.subtraction ReplacementFor_b-(0x31d+249-0x414)
<operators>.assignmentOr ReplacementFor_numbers[i]|=m
<operator>.addition 0x1034+2051
<operator>.subtraction 0x31d+249-0x414
<operator>.subtraction 0x83b+318-0x978
<operator>.subtraction 0xb+6743-0x1a61
<operator>.addition 0x31d+249
<operator>.addition 0x83b+318
<operator>.addition 0xb+6743
<operator>.indirectIndexAccess ReplacementFor_happy[i]
<operator>.indirectIndexAccess ReplacementFor_numbers[i]
>>>PDG&30 0->2 0->3 0->4 0->6 0->7 0->9 0->10 0->11 0->12 0->13 0->17 0->18 0->19 0->20 0->21 0->22 0->23 0->24 0->25 0->26 0->27 2->1 3->1 3->1 3->1 3->3 3->4 3->6 3->6 3->7 3->8 3->9 3->10 3->13 3->14 3->15 3->18 3->19 3->21 3->22 3->23 3->25 3->26 4->1 4->3 5->1 5->1 5->3 6->1 6->7 7->19 8->20 9->1 9->3 9->3 10->1 10->10 10->11 10->11 10->16 10->24 10->27 10->28 11->10 12->1 12->5 12->5 14->8 14->8 15->10 16->20 16->29 18->14 18->14 19->4 19->14 19->14 22->19 22->19 23->15 23->15 24->16 24->16
>>>Token void ReplacementFor_fill_numbers ( void ) { int ReplacementFor_b ; for ( ReplacementFor_b = ( 0x1f42 + 766 - 0x223e ) ; ReplacementFor_b <= ( 0x574 + 1063 - 0x991 ) ; ++ ReplacementFor_b ) { fprintf ( stderr , " \x62 \x61 \x73 \x65 \x20 \x3d \x20 \x25 \x64 " " \n " , ReplacementFor_b ) ; ReplacementFor_fill_happy ( ReplacementFor_b ) ; int i , m = ( 0x1034 + 2051 - 0x1836 ) << ( ReplacementFor_b - ( 0x31d + 249 - 0x414 ) ) ; for ( i = ( 0x83b + 318 - 0x978 ) ; i <= ReplacementFor_N ; ++ i ) if ( ReplacementFor_happy [ i ] == ( 0xb + 6743 - 0x1a61 ) ) ReplacementFor_numbers [ i ] |= m ; } }
>>>Func
METHOD ReplacementFor_decimal_to_binary
METHOD_RETURN int
PARAM unsigned int ReplacementFor_number
RETURN return \012ReplacementFor_number==(0xa1b+2931-0x158e)?(0x708+4680-0x1950):\012ReplacementFor_number%(0x376+7803-0x21ef)+(0x870+556-0xa92)*\012ReplacementFor_decimal_to_binary(ReplacementFor_number/(0x11c6+1708-0x1870)); return \012ReplacementFor_number==(0xa1b+2931-0x158e)?(0x708+4680-0x1950):\012ReplacementFor_number%(0x376+7803-0x21ef)+(0x870+556-0xa92)*\012ReplacementFor_decimal_to_binary(ReplacementFor_number/(0x11c6+1708-0x1870));
<operator>.conditional ReplacementFor_number==(0xa1b+2931-0x158e)?(0x708+4680-0x1950):\012ReplacementFor_number%(0x376+7803-0x21ef)+(0x870+556-0xa92)*\012ReplacementFor_decimal_to_binary(ReplacementFor_number/(0x11c6+1708-0x1870))
<operator>.equals ReplacementFor_number==(0xa1b+2931-0x158e)
<operator>.subtraction 0x708+4680-0x1950
<operator>.addition ReplacementFor_number%(0x376+7803-0x21ef)+(0x870+556-0xa92)*\012ReplacementFor_decimal_to_binary(ReplacementFor_number/(0x11c6+1708-0x1870))
<operator>.subtraction 0xa1b+2931-0x158e
<operator>.addition 0x708+4680
<operator>.modulo ReplacementFor_number%(0x376+7803-0x21ef)
<operator>.multiplication (0x870+556-0xa92)*\012ReplacementFor_decimal_to_binary(ReplacementFor_number/(0x11c6+1708-0x1870))
<operator>.addition 0xa1b+2931
<operator>.subtraction 0x376+7803-0x21ef
<operator>.subtraction 0x870+556-0xa92
ReplacementFor_decimal_to_binary ReplacementFor_decimal_to_binary(ReplacementFor_number/(0x11c6+1708-0x1870))
<operator>.addition 0x376+7803
<operator>.addition 0x870+556
<operator>.division ReplacementFor_number/(0x11c6+1708-0x1870)
<operator>.subtraction 0x11c6+1708-0x1870
<operator>.addition 0x11c6+1708
>>>PDG&21 0->2 0->5 0->6 0->8 0->9 0->10 0->12 0->13 0->14 0->16 0->17 0->18 0->19 0->20 2->5 3->1 4->1 4->1 4->1 4->1 4->3 5->1 5->1 5->6 5->7 5->9 5->10 5->10 5->11 5->13 5->14 5->15 5->16 5->17 5->18 5->19 5->20 6->1 6->4 6->4 7->1 7->1 8->1 8->5 8->5 10->1 10->4 10->4 10->7 10->7 10->18 11->1 11->1 11->4 11->4 11->7 11->7 13->1 13->10 13->10 14->1 14->11 14->11 15->1 15->11 18->1 18->1 18->15 18->15 19->1 19->18 19->18
>>>Token int ReplacementFor_decimal_to_binary ( unsigned int ReplacementFor_number ) { return ReplacementFor_number == ( 0xa1b + 2931 - 0x158e ) ? ( 0x708 + 4680 - 0x1950 ) : ReplacementFor_number % ( 0x376 + 7803 - 0x21ef ) + ( 0x870 + 556 - 0xa92 ) * ReplacementFor_decimal_to_binary ( ReplacementFor_number / ( 0x11c6 + 1708 - 0x1870 ) ) ; }
>>>Func
METHOD ReplacementFor_isUnivalTree
METHOD_RETURN bool
PARAM struct ReplacementFor_TreeNode*\012ReplacementFor_root
RETURN return ReplacementFor_isUnivalTree(ReplacementFor_root->ReplacementFor_left)&&\012ReplacementFor_isUnivalTree(ReplacementFor_root->ReplacementFor_right); return ReplacementFor_isUnivalTree(ReplacementFor_root->ReplacementFor_left)&&\012ReplacementFor_isUnivalTree(ReplacementFor_root->ReplacementFor_right);
<operator>.equals ReplacementFor_root==NULL
<operator>.logicalAnd ReplacementFor_isUnivalTree(ReplacementFor_root->ReplacementFor_left)&&\012ReplacementFor_isUnivalTree(ReplacementFor_root->ReplacementFor_right)
RETURN return(0x1378+2861-0x1ea4); return(0x1378+2861-0x1ea4);
<operator>.subtraction 0x1378+2861-0x1ea4
<operator>.notEquals ReplacementFor_root->\012ReplacementFor_left->val!=ReplacementFor_root->val
<operator>.notEquals ReplacementFor_root->\012ReplacementFor_right->val!=ReplacementFor_root->val
ReplacementFor_isUnivalTree ReplacementFor_isUnivalTree(ReplacementFor_root->ReplacementFor_left)
ReplacementFor_isUnivalTree ReplacementFor_isUnivalTree(ReplacementFor_root->ReplacementFor_right)
RETURN return(0x991+5843-0x2064); return(0x991+5843-0x2064);
RETURN return(0xcc5+6345-0x258e); return(0xcc5+6345-0x258e);
<operator>.addition 0x1378+2861
<operator>.subtraction 0x991+5843-0x2064
<operator>.subtraction 0xcc5+6345-0x258e
<operator>.addition 0x991+5843
<operator>.addition 0xcc5+6345
<operator>.indirectFieldAccess ReplacementFor_root->ReplacementFor_left
<operator>.indirectFieldAccess ReplacementFor_root->ReplacementFor_right
FIELD_IDENTIFIER ReplacementFor_left ReplacementFor_left
FIELD_IDENTIFIER ReplacementFor_right ReplacementFor_right
<operator>.indirectFieldAccess ReplacementFor_root->ReplacementFor_left
<operator>.indirectFieldAccess ReplacementFor_root->ReplacementFor_right
<operator>.indirectFieldAccess ReplacementFor_root->\012ReplacementFor_left->val
<operator>.indirectFieldAccess ReplacementFor_root->val
<operator>.indirectFieldAccess ReplacementFor_root->\012ReplacementFor_right->val
<operator>.indirectFieldAccess ReplacementFor_root->val
FIELD_IDENTIFIER ReplacementFor_left ReplacementFor_left
FIELD_IDENTIFIER ReplacementFor_right ReplacementFor_right
<operator>.indirectFieldAccess ReplacementFor_root->\012ReplacementFor_left
FIELD_IDENTIFIER val val
FIELD_IDENTIFIER val val
<operator>.indirectFieldAccess ReplacementFor_root->\012ReplacementFor_right
FIELD_IDENTIFIER val val
FIELD_IDENTIFIER val val
FIELD_IDENTIFIER ReplacementFor_left ReplacementFor_left
FIELD_IDENTIFIER ReplacementFor_right ReplacementFor_right
>>>PDG&39 0->2 0->4 0->7 0->14 0->15 0->16 0->17 0->18 2->4 3->1 4->1 4->1 4->1 4->6 4->7 4->14 4->19 4->21 5->3 6->1 7->1 7->1 7->6 8->9 8->12 8->15 8->17 8->20 8->22 9->3 9->5 9->10 9->13 9->16 9->18 9->23 9->29 10->5 10->11 10->24 10->30 11->5 12->1 13->1 15->12 16->13 19->8 19->20 19->22 19->25 19->26 19->31 19->32 19->33 19->37 20->3 20->5 20->9 20->10 20->23 20->27 20->28 20->29 20->34 20->35 20->36 20->38
>>>Token bool ReplacementFor_isUnivalTree ( struct ReplacementFor_TreeNode * ReplacementFor_root ) { if ( ReplacementFor_root == NULL ) return ( 0x1378 + 2861 - 0x1ea4 ) ; if ( ReplacementFor_root -> ReplacementFor_left ) { if ( ReplacementFor_root -> ReplacementFor_left -> val != ReplacementFor_root -> val ) return ( 0x991 + 5843 - 0x2064 ) ; } if ( ReplacementFor_root -> ReplacementFor_right ) { if ( ReplacementFor_root -> ReplacementFor_right -> val != ReplacementFor_root -> val ) return ( 0xcc5 + 6345 - 0x258e ) ; } return ReplacementFor_isUnivalTree ( ReplacementFor_root -> ReplacementFor_left ) && ReplacementFor_isUnivalTree ( ReplacementFor_root -> ReplacementFor_right ) ; }
>>>Func
METHOD ReplacementFor_deletenode
METHOD_RETURN void
PARAM int ReplacementFor_k
<operator>.assignment ReplacementFor_p=ReplacementFor_first
<operator>.assignment ReplacementFor_follow=NULL
<operator>.notEquals ReplacementFor_follow!=ReplacementFor_last
<operator>.equals ReplacementFor_follow==ReplacementFor_last
<operator>.assignment ReplacementFor_follow=\012ReplacementFor_p
<operator>.assignment ReplacementFor_p=ReplacementFor_p->next
printf printf(\012"\x52\x65\x71\x75\x69\x72\x65\x64\x20\x6e\x6f\x64\x65\x20\x6e\x6f\x74\x20\x66\x6f\x75\x6e\x64\x2e" "\n"\012)
<operator>.equals ReplacementFor_p->data==ReplacementFor_k
free free(ReplacementFor_p)
<operator>.logicalAnd ReplacementFor_p==ReplacementFor_first&&ReplacementFor_p==\012ReplacementFor_last
<operator>.assignment ReplacementFor_first=ReplacementFor_last=NULL
<operator>.equals ReplacementFor_p==ReplacementFor_first
<operator>.equals ReplacementFor_p==\012ReplacementFor_last
<operator>.assignment ReplacementFor_last=NULL
<operator>.equals ReplacementFor_p==ReplacementFor_first
<operator>.assignment ReplacementFor_first=\012ReplacementFor_first->next
<operator>.assignment ReplacementFor_last->next=ReplacementFor_first
<operator>.equals ReplacementFor_p==ReplacementFor_last
<operator>.assignment ReplacementFor_last=\012ReplacementFor_follow
<operator>.assignment ReplacementFor_last->next=ReplacementFor_first
<operator>.assignment ReplacementFor_follow->next=ReplacementFor_p->next
<operator>.indirectFieldAccess ReplacementFor_p->next
<operator>.indirectFieldAccess ReplacementFor_p->data
FIELD_IDENTIFIER next next
FIELD_IDENTIFIER data data
<operator>.indirectFieldAccess ReplacementFor_first->next
<operator>.indirectFieldAccess ReplacementFor_last->next
FIELD_IDENTIFIER next next
FIELD_IDENTIFIER next next
<operator>.indirectFieldAccess ReplacementFor_last->next
FIELD_IDENTIFIER next next
<operator>.indirectFieldAccess ReplacementFor_follow->next
<operator>.indirectFieldAccess ReplacementFor_p->next
FIELD_IDENTIFIER next next
FIELD_IDENTIFIER next next
>>>PDG&38 0->2 0->3 0->4 0->5 0->6 0->7 0->9 0->10 0->11 0->13 0->14 0->15 0->16 0->17 0->19 0->20 0->21 0->22 2->1 2->10 3->1 3->1 3->1 3->7 3->14 4->1 4->1 4->5 5->1 5->6 5->6 5->10 5->25 5->27 6->1 6->1 6->1 6->9 6->11 6->12 6->14 6->15 6->20 6->21 7->1 7->5 8->1 8->1 8->1 8->7 8->14 9->1 10->1 10->1 10->1 10->5 10->7 10->8 10->24 10->26 12->13 12->16 12->17 14->11 14->12 14->12 14->15 14->15 14->17 14->17 15->11 15->12 15->12 15->17 15->20 16->13 17->11 17->18 17->19 17->20 17->20 17->22 17->28 17->29 17->30 17->31 18->19 20->11 20->21 20->22 20->23 20->32 20->33 20->34 20->35 20->36 20->37
>>>Token void ReplacementFor_deletenode ( int ReplacementFor_k ) { struct ReplacementFor_node * ReplacementFor_p , * ReplacementFor_follow ; ReplacementFor_p = ReplacementFor_first ; ReplacementFor_follow = NULL ; while ( ReplacementFor_follow != ReplacementFor_last ) { if ( ReplacementFor_p -> data == ReplacementFor_k ) break ; ReplacementFor_follow = ReplacementFor_p ; ReplacementFor_p = ReplacementFor_p -> next ; } if ( ReplacementFor_follow == ReplacementFor_last ) printf ( " \x52 \x65 \x71 \x75 \x69 \x72 \x65 \x64 \x20 \x6e \x6f \x64 \x65 \x20 \x6e \x6f \x74 \x20 \x66 \x6f \x75 \x6e \x64 \x2e " " \n " ) ; else { if ( ReplacementFor_p == ReplacementFor_first && ReplacementFor_p == ReplacementFor_last ) ReplacementFor_first = ReplacementFor_last = NULL ; else if ( ReplacementFor_p == ReplacementFor_first ) { ReplacementFor_first = ReplacementFor_first -> next ; ReplacementFor_last -> next = ReplacementFor_first ; } else if ( ReplacementFor_p == ReplacementFor_last ) { ReplacementFor_last = ReplacementFor_follow ; ReplacementFor_last -> next = ReplacementFor_first ; } else ReplacementFor_follow -> next = ReplacementFor_p -> next ; free ( ReplacementFor_p ) ; } }
>>>Func
METHOD ReplacementFor_gcd
METHOD_RETURN int
PARAM int ReplacementFor_a
PARAM int ReplacementFor_b
RETURN return \012ReplacementFor_a; return \012ReplacementFor_a;
<operator>.logicalNot !\012ReplacementFor_a
<operator>.notEquals ReplacementFor_b!=\012(0x59f+3815-0x1486)
IDENTIFIER ReplacementFor_a return \012ReplacementFor_a;
RETURN return ReplacementFor_b; return ReplacementFor_b;
IDENTIFIER ReplacementFor_b return ReplacementFor_b;
<operator>.subtraction 0x59f+3815-0x1486
<operator>.greaterThan ReplacementFor_a>ReplacementFor_b
<operator>.addition 0x59f+3815
<operator>.assignmentMinus ReplacementFor_a-=\012ReplacementFor_b
<operator>.assignmentMinus ReplacementFor_b-=ReplacementFor_a
>>>PDG&15 0->2 0->3 0->5 0->6 0->7 0->9 0->10 0->11 0->12 0->13 0->14 2->5 3->1 3->6 3->9 4->1 5->1 5->1 5->4 5->6 5->7 5->8 5->10 5->11 5->12 6->6 6->10 6->11 6->11 6->12 7->4 8->1 9->8 10->6 10->6 11->6 11->7 11->13 11->13 11->13 11->14 11->14 11->14 13->7 13->11 14->6
>>>Token int ReplacementFor_gcd ( int ReplacementFor_a , int ReplacementFor_b ) { if ( ! ReplacementFor_a ) return ReplacementFor_b ; while ( ReplacementFor_b != ( 0x59f + 3815 - 0x1486 ) ) { if ( ReplacementFor_a > ReplacementFor_b ) ReplacementFor_a -= ReplacementFor_b ; else ReplacementFor_b -= ReplacementFor_a ; } return ReplacementFor_a ; }
>>>Func
METHOD main
METHOD_RETURN int
ReplacementFor_init ReplacementFor_init()
scanf scanf("\x25\x64",&t)
RETURN return(0x40d+6062-0x1bbb); return(0x40d+6062-0x1bbb);
<operator>.lessThan i<t
<operator>.preIncrement ++i
<operator>.subtraction 0x40d+6062-0x1bbb
<operator>.assignment i=\012(0x10a3+5647-0x26b2)
scanf scanf("\x25\x64",&ReplacementFor_c)
<operator>.assignment ReplacementFor_length=(0x6f7+627-0x96a)
scanf scanf("\x25\x64",&ReplacementFor_d)
scanf scanf("\x25\x64",&\012ReplacementFor_n)
scanf scanf("\x25\x73",ReplacementFor_str)
printf printf("\x43\x61\x73\x65\x20\x23\x25\x64\x3a\x20" i+(0x5df+2778-0x10b8))
printf printf("\x5b")
printf printf("\x5d" "\n")
<operator>.lessThan ReplacementFor_j<\012ReplacementFor_c
<operator>.preIncrement ++ReplacementFor_j
<operator>.lessThan ReplacementFor_k<ReplacementFor_d
<operator>.preIncrement ++ReplacementFor_k
<operator>.lessThan ReplacementFor_j<ReplacementFor_n
<operator>.preIncrement ++ReplacementFor_j
<operator>.lessThan l<ReplacementFor_length
<operator>.preIncrement ++l
<operator>.addition 0x40d+6062
<operator>.subtraction 0x10a3+5647-0x26b2
<operator>.subtraction 0x6f7+627-0x96a
<operator>.assignment ReplacementFor_j=(0x6ad+1656-0xd25)
scanf scanf("\x25\x73",ReplacementFor_str1[\012ReplacementFor_j])
<operator>.assignment ReplacementFor_k=\012(0x13f4+2802-0x1ee6)
scanf scanf\012("\x25\x73",ReplacementFor_str2[ReplacementFor_k])
<operator>.assignment ReplacementFor_j=\012(0x22d2+549-0x24f7)
<operator>.assignment ReplacementFor_res[ReplacementFor_length]=ReplacementFor_str[ReplacementFor_j]
<operator>.preIncrement ++ReplacementFor_length
<operator>.addition i+(0x5df+2778-0x10b8)
<operator>.assignment l=(0xd2+1614-0x720)
printf printf("\x25\x63",ReplacementFor_res[l]\012)
<operator>.addition 0x10a3+5647
<operator>.addition 0x6f7+627
<operator>.subtraction 0x1f97+1117-0x23f3
<operator>.subtraction 0x5df+2778-0x10b8
<operator>.notEquals l!=\012(0x236+5706-0x1880)
<operator>.subtraction 0x6ad+1656-0xd25
<operator>.subtraction 0x13f4+2802-0x1ee6
<operator>.subtraction 0x22d2+549-0x24f7
<operator>.assignment ReplacementFor_flag=(0x96a+4036-0x192e)
<operator>.addition 0x5df+2778
<operator>.subtraction 0xd2+1614-0x720
printf printf("\x2c\x20")
<operator>.addition 0x6ad+1656
<operator>.addition 0x13f4+2802
<operator>.addition 0x22d2+549
<operator>.addition 0x1f97+1117
<operator>.lessThan ReplacementFor_length<\012(0x51f+7138-0x20ff)
<operator>.lessThan ReplacementFor_k<ReplacementFor_c
<operator>.preIncrement ++\012ReplacementFor_k
IDENTIFIER ReplacementFor_flag if (ReplacementFor_flag)
<operator>.lessThan l<ReplacementFor_length-(0xab3+1207-0xf69)
<operator>.preIncrement ++l
<operator>.logicalNot !ReplacementFor_flag
<operator>.addition 0xd2+1614
<operator>.subtraction 0x236+5706-0x1880
<operator>.subtraction 0x96a+4036-0x192e
<operator>.assignment ReplacementFor_k=(0x18a6+1872-0x1ff6)
<operator>.assignment l=\012(0x1f9+7205-0x1e1e)
<operator>.addition 0x236+5706
<operator>.subtraction 0x51f+7138-0x20ff
<operator>.addition 0x96a+4036
<operator>.logicalOr (ReplacementFor_str1[ReplacementFor_k][(0x1dd5+1933-0x2562)\012]==ReplacementFor_res[ReplacementFor_length-(0xec4+5647-0x24d2)]&&\012ReplacementFor_str1[ReplacementFor_k][(0x1da8+2180-0x262b)]==ReplacementFor_res[\012ReplacementFor_length-(0xdfb+4549-0x1fbe)])||(ReplacementFor_str1[\012ReplacementFor_k][(0xb9b+483-0xd7d)]==ReplacementFor_res[ReplacementFor_length-\012(0x12f6+1767-0x19dc)]&&ReplacementFor_str1[ReplacementFor_k][\012(0x1be1+2271-0x24c0)]==ReplacementFor_res[ReplacementFor_length-\012(0xa59+6041-0x21f0)])
<operator>.subtraction ReplacementFor_length-(0xab3+1207-0xf69)
<operator>.lessThan ReplacementFor_k<ReplacementFor_d
<operator>.preIncrement ++\012ReplacementFor_k
IDENTIFIER ReplacementFor_flag if (ReplacementFor_flag)
<operator>.addition 0x51f+7138
<operator>.subtraction 0x18a6+1872-0x1ff6
<operator>.assignment ReplacementFor_flag=(0xae6+3581-0x18e2)
<operator>.assignment ReplacementFor_res[ReplacementFor_length-(0xe16+6003-0x2587)]=\012ReplacementFor_str1[ReplacementFor_k][(0x2c5+1809-0x9d4)]
<operator>.preDecrement --\012ReplacementFor_length
<operator>.subtraction 0x1f9+7205-0x1e1e
<operator>.subtraction 0xab3+1207-0xf69
<operator>.assignment ReplacementFor_k=(0x308+8872-0x25b0)
<operator>.assignment ReplacementFor_length=(0x13c6+546-0x15e8)
<operator>.addition 0x18a6+1872
<operator>.logicalAnd ReplacementFor_str1[ReplacementFor_k][(0x1dd5+1933-0x2562)\012]==ReplacementFor_res[ReplacementFor_length-(0xec4+5647-0x24d2)]&&\012ReplacementFor_str1[ReplacementFor_k][(0x1da8+2180-0x262b)]==ReplacementFor_res[\012ReplacementFor_length-(0xdfb+4549-0x1fbe)]
<operator>.logicalAnd ReplacementFor_str1[\012ReplacementFor_k][(0xb9b+483-0xd7d)]==ReplacementFor_res[ReplacementFor_length-\012(0x12f6+1767-0x19dc)]&&ReplacementFor_str1[ReplacementFor_k][\012(0x1be1+2271-0x24c0)]==ReplacementFor_res[ReplacementFor_length-\012(0xa59+6041-0x21f0)]
<operator>.addition 0x1f9+7205
<operator>.addition 0xab3+1207
<operator>.logicalOr (ReplacementFor_str2[ReplacementFor_k][(0x213+4776-0x14bb)]\012==ReplacementFor_res[ReplacementFor_length-(0x16b8+2404-0x201b)]&&\012ReplacementFor_str2[ReplacementFor_k][(0x10c0+3632-0x1eef)]==ReplacementFor_res[\012l])||(ReplacementFor_str2[ReplacementFor_k][(0x69d+4587-0x1887)]==\012ReplacementFor_res[ReplacementFor_length-(0x250+8102-0x21f5)]&&\012ReplacementFor_str2[ReplacementFor_k][(0xf51+3695-0x1dc0)]==ReplacementFor_res[l\012])
<operator>.equals ReplacementFor_str1[ReplacementFor_k][(0x1dd5+1933-0x2562)\012]==ReplacementFor_res[ReplacementFor_length-(0xec4+5647-0x24d2)]
<operator>.equals ReplacementFor_str1[ReplacementFor_k][(0x1da8+2180-0x262b)]==ReplacementFor_res[\012ReplacementFor_length-(0xdfb+4549-0x1fbe)]
<operator>.equals ReplacementFor_str1[\012ReplacementFor_k][(0xb9b+483-0xd7d)]==ReplacementFor_res[ReplacementFor_length-\012(0x12f6+1767-0x19dc)]
<operator>.equals ReplacementFor_str1[ReplacementFor_k][\012(0x1be1+2271-0x24c0)]==ReplacementFor_res[ReplacementFor_length-\012(0xa59+6041-0x21f0)]
<operator>.subtraction 0xae6+3581-0x18e2
<operator>.subtraction 0x308+8872-0x25b0
<operator>.assignment ReplacementFor_flag=(0x70f+1973-0xec3)
<operator>.subtraction 0x13c6+546-0x15e8
<operator>.addition 0xae6+3581
<operator>.subtraction ReplacementFor_length-(0xe16+6003-0x2587)
<operator>.subtraction 0x2c5+1809-0x9d4
<operator>.addition 0x308+8872
<operator>.logicalAnd ReplacementFor_str2[ReplacementFor_k][(0x213+4776-0x14bb)]\012==ReplacementFor_res[ReplacementFor_length-(0x16b8+2404-0x201b)]&&\012ReplacementFor_str2[ReplacementFor_k][(0x10c0+3632-0x1eef)]==ReplacementFor_res[\012l]
<operator>.logicalAnd ReplacementFor_str2[ReplacementFor_k][(0x69d+4587-0x1887)]==\012ReplacementFor_res[ReplacementFor_length-(0x250+8102-0x21f5)]&&\012ReplacementFor_str2[ReplacementFor_k][(0xf51+3695-0x1dc0)]==ReplacementFor_res[l\012]
<operator>.addition 0x13c6+546
<operator>.subtraction 0x1dd5+1933-0x2562
<operator>.subtraction ReplacementFor_length-(0xec4+5647-0x24d2)
<operator>.subtraction 0x1da8+2180-0x262b
<operator>.subtraction ReplacementFor_length-(0xdfb+4549-0x1fbe)
<operator>.subtraction 0xb9b+483-0xd7d
<operator>.subtraction ReplacementFor_length-\012(0x12f6+1767-0x19dc)
<operator>.subtraction 0x1be1+2271-0x24c0
<operator>.subtraction ReplacementFor_length-\012(0xa59+6041-0x21f0)
<operator>.subtraction 0xe16+6003-0x2587
<operator>.addition 0x2c5+1809
<operator>.equals ReplacementFor_str2[ReplacementFor_k][(0x213+4776-0x14bb)]\012==ReplacementFor_res[ReplacementFor_length-(0x16b8+2404-0x201b)]
<operator>.equals ReplacementFor_str2[ReplacementFor_k][(0x10c0+3632-0x1eef)]==ReplacementFor_res[\012l]
<operator>.equals ReplacementFor_str2[ReplacementFor_k][(0x69d+4587-0x1887)]==\012ReplacementFor_res[ReplacementFor_length-(0x250+8102-0x21f5)]
<operator>.equals ReplacementFor_str2[ReplacementFor_k][(0xf51+3695-0x1dc0)]==ReplacementFor_res[l\012]
<operator>.subtraction 0x70f+1973-0xec3
<operator>.addition 0x1dd5+1933
<operator>.subtraction 0xec4+5647-0x24d2
<operator>.addition 0x1da8+2180
<operator>.subtraction 0xdfb+4549-0x1fbe
<operator>.addition 0xb9b+483
<operator>.subtraction 0x12f6+1767-0x19dc
<operator>.addition 0x1be1+2271
<operator>.subtraction 0xa59+6041-0x21f0
<operator>.addition 0xe16+6003
<operator>.addition 0x70f+1973
<operator>.addition 0xec4+5647
<operator>.addition 0xdfb+4549
<operator>.addition 0x12f6+1767
<operator>.addition 0xa59+6041
<operator>.subtraction 0x213+4776-0x14bb
<operator>.subtraction ReplacementFor_length-(0x16b8+2404-0x201b)
<operator>.subtraction 0x10c0+3632-0x1eef
<operator>.subtraction 0x69d+4587-0x1887
<operator>.subtraction ReplacementFor_length-(0x250+8102-0x21f5)
<operator>.subtraction 0xf51+3695-0x1dc0
<operator>.addition 0x213+4776
<operator>.subtraction 0x16b8+2404-0x201b
<operator>.addition 0x10c0+3632
<operator>.addition 0x69d+4587
<operator>.subtraction 0x250+8102-0x21f5
<operator>.addition 0xf51+3695
<operator>.addition 0x16b8+2404
<operator>.addition 0x250+8102
<operator>.addressOf &ReplacementFor_c
<operator>.addressOf &ReplacementFor_d
<operator>.addressOf &\012ReplacementFor_n
<operator>.indirectIndexAccess ReplacementFor_str1[\012ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_str2[ReplacementFor_k]
<operator>.indirectIndexAccess ReplacementFor_res[ReplacementFor_length]
<operator>.indirectIndexAccess ReplacementFor_str[ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_res[l]
<operator>.indirectIndexAccess ReplacementFor_res[ReplacementFor_length-(0xe16+6003-0x2587)]
<operator>.indirectIndexAccess ReplacementFor_str1[ReplacementFor_k][(0x2c5+1809-0x9d4)]
<operator>.indirectIndexAccess ReplacementFor_str1[ReplacementFor_k][(0x1dd5+1933-0x2562)\012]
<operator>.indirectIndexAccess ReplacementFor_res[ReplacementFor_length-(0xec4+5647-0x24d2)]
<operator>.indirectIndexAccess ReplacementFor_str1[ReplacementFor_k][(0x1da8+2180-0x262b)]
<operator>.indirectIndexAccess ReplacementFor_res[\012ReplacementFor_length-(0xdfb+4549-0x1fbe)]
<operator>.indirectIndexAccess ReplacementFor_str1[\012ReplacementFor_k][(0xb9b+483-0xd7d)]
<operator>.indirectIndexAccess ReplacementFor_res[ReplacementFor_length-\012(0x12f6+1767-0x19dc)]
<operator>.indirectIndexAccess ReplacementFor_str1[ReplacementFor_k][\012(0x1be1+2271-0x24c0)]
<operator>.indirectIndexAccess ReplacementFor_res[ReplacementFor_length-\012(0xa59+6041-0x21f0)]
<operator>.indirectIndexAccess ReplacementFor_str1[ReplacementFor_k]
<operator>.indirectIndexAccess ReplacementFor_str1[ReplacementFor_k]
<operator>.indirectIndexAccess ReplacementFor_str1[ReplacementFor_k]
<operator>.indirectIndexAccess ReplacementFor_str1[\012ReplacementFor_k]
<operator>.indirectIndexAccess ReplacementFor_str1[ReplacementFor_k]
<operator>.indirectIndexAccess ReplacementFor_str2[ReplacementFor_k][(0x213+4776-0x14bb)]
<operator>.indirectIndexAccess ReplacementFor_res[ReplacementFor_length-(0x16b8+2404-0x201b)]
<operator>.indirectIndexAccess ReplacementFor_str2[ReplacementFor_k][(0x10c0+3632-0x1eef)]
<operator>.indirectIndexAccess ReplacementFor_res[\012l]
<operator>.indirectIndexAccess ReplacementFor_str2[ReplacementFor_k][(0x69d+4587-0x1887)]
<operator>.indirectIndexAccess ReplacementFor_res[ReplacementFor_length-(0x250+8102-0x21f5)]
<operator>.indirectIndexAccess ReplacementFor_str2[ReplacementFor_k][(0xf51+3695-0x1dc0)]
<operator>.indirectIndexAccess ReplacementFor_res[l\012]
<operator>.indirectIndexAccess ReplacementFor_str2[ReplacementFor_k]
<operator>.indirectIndexAccess ReplacementFor_str2[ReplacementFor_k]
<operator>.indirectIndexAccess ReplacementFor_str2[ReplacementFor_k]
<operator>.indirectIndexAccess ReplacementFor_str2[ReplacementFor_k]
>>>PDG&182 0->2 0->3 0->5 0->6 0->7 0->9 0->11 0->12 0->13 0->14 0->15 0->16 0->17 0->18 0->19 0->20 0->21 0->22 0->23 0->24 0->25 0->26 0->27 0->34 0->35 0->37 0->38 0->39 0->40 0->41 0->42 0->43 0->44 0->45 0->47 0->48 0->49 0->50 0->51 0->52 0->53 0->54 0->55 0->56 0->57 0->58 0->59 0->60 0->61 0->62 0->63 0->66 0->67 0->68 0->70 0->71 0->72 0->73 0->74 0->75 0->78 0->79 0->80 0->83 0->86 0->87 0->93 0->94 0->96 0->97 0->98 0->99 0->100 0->103 0->104 0->105 0->106 0->107 0->108 0->109 0->110 0->111 0->112 0->113 0->118 0->119 0->120 0->121 0->122 0->123 0->124 0->125 0->126 0->127 0->128 0->129 0->130 0->131 0->132 0->133 0->134 0->135 0->136 0->137 0->138 0->139 0->140 0->141 0->142 0->143 0->144 0->145 0->146 2->1 3->1 3->5 4->1 5->1 5->1 5->1 5->5 5->6 5->6 5->9 5->10 5->11 5->12 5->13 5->14 5->14 5->15 5->16 5->17 5->19 5->21 5->23 5->27 5->28 5->30 5->32 5->35 5->35 5->36 5->39 5->41 5->43 5->44 5->45 5->47 5->48 5->50 5->51 5->52 5->61 5->147 5->148 5->149 6->1 6->5 7->1 7->1 7->4 8->1 8->1 8->5 9->1 9->17 9->55 10->1 10->1 10->23 10->34 11->1 11->19 11->71 12->1 12->21 13->1 13->33 14->1 14->1 15->1 16->1 17->1 17->1 17->9 17->17 17->18 17->18 17->29 17->55 17->150 18->1 18->17 19->1 19->1 19->1 19->11 19->19 19->20 19->20 19->31 19->71 19->151 20->1 20->19 21->1 21->1 21->1 21->12 21->21 21->22 21->22 21->33 21->34 21->40 21->53 21->152 21->153 22->1 22->21 23->1 23->1 23->1 23->23 23->24 23->37 23->42 23->42 23->62 23->66 23->154 24->1 24->23 26->1 26->8 26->8 27->1 27->10 27->10 28->1 28->1 28->17 29->1 30->1 30->1 30->19 31->1 32->1 32->1 32->21 33->1 33->1 33->1 34->1 34->23 34->54 35->1 36->1 36->1 36->23 37->1 37->1 40->1 40->1 40->54 40->67 40->74 41->1 41->14 41->14 41->35 41->35 42->1 42->1 42->24 42->49 43->1 43->28 43->28 44->1 44->30 44->30 45->1 45->32 45->32 46->1 46->1 46->1 46->60 48->1 48->36 48->36 49->1 54->1 54->1 54->23 54->34 54->40 54->46 54->53 54->55 54->58 54->60 54->63 54->64 54->65 54->68 54->70 54->70 54->75 54->79 54->80 54->83 54->86 54->87 54->105 55->1 55->1 55->1 55->9 55->17 55->56 55->69 55->84 55->89 55->104 55->105 55->119 55->120 55->129 55->157 55->158 55->166 56->1 56->55 58->1 58->1 58->58 58->59 58->59 58->70 58->71 58->80 58->81 58->82 58->87 58->94 58->96 58->100 58->103 59->1 59->58 60->1 60->1 60->40 60->53 62->1 62->42 62->42 63->1 63->46 63->46 64->1 64->1 64->55 65->1 65->1 65->58 67->1 67->54 67->54 69->1 69->1 69->1 69->55 69->56 69->76 69->77 69->78 69->93 69->97 69->98 69->99 69->112 69->113 69->127 69->155 69->156 69->165 70->1 70->23 70->34 70->54 70->58 70->58 70->134 71->1 71->1 71->1 71->11 71->19 71->72 71->88 71->101 71->114 71->133 71->134 71->139 71->140 71->145 71->170 71->171 71->178 72->1 72->71 75->1 75->64 75->64 76->1 76->1 76->1 76->60 77->1 77->1 77->1 78->1 78->23 78->34 78->54 78->70 79->1 79->65 79->65 80->1 80->70 80->70 81->1 81->1 81->71 82->1 82->1 82->23 82->34 82->54 84->1 84->1 84->69 84->69 84->85 84->91 84->108 84->109 84->123 84->124 84->131 84->161 84->162 84->168 85->1 85->1 85->69 85->69 88->1 88->1 88->1 88->71 88->72 88->95 88->118 88->128 89->1 89->1 89->84 89->84 89->90 89->106 89->107 89->121 89->122 89->130 89->159 89->160 89->167 90->1 90->1 90->84 90->84 91->1 91->1 91->85 91->85 91->92 91->110 91->111 91->125 91->126 91->132 91->163 91->164 91->169 92->1 92->1 92->85 92->85 93->1 93->76 93->76 94->1 94->81 94->81 95->1 95->1 95->60 96->1 96->82 96->82 98->1 98->78 99->1 101->1 101->1 101->88 101->88 101->102 101->116 101->136 101->137 101->142 101->143 101->146 101->174 101->175 101->180 102->1 102->1 102->88 102->88 104->1 105->1 105->23 105->34 105->54 105->70 105->98 105->107 105->109 106->1 107->1 107->23 107->34 107->54 107->70 107->98 107->105 107->109 108->1 109->1 109->23 109->34 109->54 109->70 109->98 109->105 109->111 110->1 111->1 111->23 111->34 111->54 111->70 111->98 111->105 112->1 112->98 112->98 114->1 114->1 114->31 114->101 114->101 114->115 114->135 114->141 114->172 114->173 114->179 115->1 115->1 115->31 115->101 115->101 116->1 116->1 116->31 116->102 116->102 116->117 116->138 116->144 116->176 116->177 116->181 117->1 117->1 117->31 117->102 117->102 118->1 118->95 118->95 120->1 120->105 120->105 122->1 122->107 122->107 124->1 124->109 124->109 126->1 126->111 126->111 133->1 134->1 134->70 134->137 135->1 136->1 137->1 137->70 137->134 138->1 140->1 140->134 140->134 143->1 143->137 143->137
>>>Token int main ( ) { ReplacementFor_init ( ) ; int t , i , ReplacementFor_j , ReplacementFor_k , l , ReplacementFor_c , ReplacementFor_d , ReplacementFor_n ; scanf ( " \x25 \x64 " , & t ) ; for ( i = ( 0x10a3 + 5647 - 0x26b2 ) ; i < t ; ++ i ) { scanf ( " \x25 \x64 " , & ReplacementFor_c ) ; char ReplacementFor_str1 [ ( 0x249 + 6007 - 0x1998 ) ] [ ( 0x773 + 2914 - 0x12d1 ) ] ; char ReplacementFor_str2 [ ( 0x1179 + 4468 - 0x22cf ) ] [ ( 0x222b + 311 - 0x235f ) ] ; char ReplacementFor_str [ ( 0x1e70 + 1279 - 0x230a ) ] ; char ReplacementFor_res [ ( 0x769 + 605 - 0x961 ) ] ; int ReplacementFor_length = ( 0x6f7 + 627 - 0x96a ) ; int ReplacementFor_flag ; for ( ReplacementFor_j = ( 0x6ad + 1656 - 0xd25 ) ; ReplacementFor_j < ReplacementFor_c ; ++ ReplacementFor_j ) { scanf ( " \x25 \x73 " , ReplacementFor_str1 [ ReplacementFor_j ] ) ; } scanf ( " \x25 \x64 " , & ReplacementFor_d ) ; for ( ReplacementFor_k = ( 0x13f4 + 2802 - 0x1ee6 ) ; ReplacementFor_k < ReplacementFor_d ; ++ ReplacementFor_k ) { scanf ( " \x25 \x73 " , ReplacementFor_str2 [ ReplacementFor_k ] ) ; } scanf ( " \x25 \x64 " , & ReplacementFor_n ) ; scanf ( " \x25 \x73 " , ReplacementFor_str ) ; for ( ReplacementFor_j = ( 0x22d2 + 549 - 0x24f7 ) ; ReplacementFor_j < ReplacementFor_n ; ++ ReplacementFor_j ) { ReplacementFor_res [ ReplacementFor_length ] = ReplacementFor_str [ ReplacementFor_j ] ; ++ ReplacementFor_length ; while ( ( 0x1f97 + 1117 - 0x23f3 ) ) { if ( ReplacementFor_length < ( 0x51f + 7138 - 0x20ff ) ) { break ; } ReplacementFor_flag = ( 0x96a + 4036 - 0x192e ) ; for ( ReplacementFor_k = ( 0x18a6 + 1872 - 0x1ff6 ) ; ReplacementFor_k < ReplacementFor_c ; ++ ReplacementFor_k ) { if ( ( ReplacementFor_str1 [ ReplacementFor_k ] [ ( 0x1dd5 + 1933 - 0x2562 ) ] == ReplacementFor_res [ ReplacementFor_length - ( 0xec4 + 5647 - 0x24d2 ) ] && ReplacementFor_str1 [ ReplacementFor_k ] [ ( 0x1da8 + 2180 - 0x262b ) ] == ReplacementFor_res [ ReplacementFor_length - ( 0xdfb + 4549 - 0x1fbe ) ] ) || ( ReplacementFor_str1 [ ReplacementFor_k ] [ ( 0xb9b + 483 - 0xd7d ) ] == ReplacementFor_res [ ReplacementFor_length - ( 0x12f6 + 1767 - 0x19dc ) ] && ReplacementFor_str1 [ ReplacementFor_k ] [ ( 0x1be1 + 2271 - 0x24c0 ) ] == ReplacementFor_res [ ReplacementFor_length - ( 0xa59 + 6041 - 0x21f0 ) ] ) ) { ReplacementFor_flag = ( 0xae6 + 3581 - 0x18e2 ) ; ReplacementFor_res [ ReplacementFor_length - ( 0xe16 + 6003 - 0x2587 ) ] = ReplacementFor_str1 [ ReplacementFor_k ] [ ( 0x2c5 + 1809 - 0x9d4 ) ] ; -- ReplacementFor_length ; break ; } } if ( ReplacementFor_flag ) { continue ; } for ( l = ( 0x1f9 + 7205 - 0x1e1e ) ; l < ReplacementFor_length - ( 0xab3 + 1207 - 0xf69 ) ; ++ l ) { for ( ReplacementFor_k = ( 0x308 + 8872 - 0x25b0 ) ; ReplacementFor_k < ReplacementFor_d ; ++ ReplacementFor_k ) { if ( ( ReplacementFor_str2 [ ReplacementFor_k ] [ ( 0x213 + 4776 - 0x14bb ) ] == ReplacementFor_res [ ReplacementFor_length - ( 0x16b8 + 2404 - 0x201b ) ] && ReplacementFor_str2 [ ReplacementFor_k ] [ ( 0x10c0 + 3632 - 0x1eef ) ] == ReplacementFor_res [ l ] ) || ( ReplacementFor_str2 [ ReplacementFor_k ] [ ( 0x69d + 4587 - 0x1887 ) ] == ReplacementFor_res [ ReplacementFor_length - ( 0x250 + 8102 - 0x21f5 ) ] && ReplacementFor_str2 [ ReplacementFor_k ] [ ( 0xf51 + 3695 - 0x1dc0 ) ] == ReplacementFor_res [ l ] ) ) { ReplacementFor_flag = ( 0x70f + 1973 - 0xec3 ) ; break ; } } if ( ReplacementFor_flag ) { ReplacementFor_length = ( 0x13c6 + 546 - 0x15e8 ) ; break ; } } if ( ! ReplacementFor_flag ) { break ; } } } printf ( " \x43 \x61 \x73 \x65 \x20 \x23 \x25 \x64 \x3a \x20 " , i + ( 0x5df + 2778 - 0x10b8 ) ) ; printf ( " \x5b " ) ; for ( l = ( 0xd2 + 1614 - 0x720 ) ; l < ReplacementFor_length ; ++ l ) { if ( l != ( 0x236 + 5706 - 0x1880 ) ) { printf ( " \x2c \x20 " ) ; } printf ( " \x25 \x63 " , ReplacementFor_res [ l ] ) ; } printf ( " \x5d " " \n " ) ; } return ( 0x40d + 6062 - 0x1bbb ) ; }
>>>Func
METHOD ReplacementFor_DJBHash
METHOD_RETURN unsigned int
PARAM char*ReplacementFor_str
PARAM unsigned int len
<operator>.assignment ReplacementFor_hash=(0x1a2f+5964-0x1c76)
<operator>.assignment i=\012(0xa28+2187-0x12b3)
RETURN return ReplacementFor_hash; return ReplacementFor_hash;
<operator>.lessThan i<len
<operator>.expressionList ReplacementFor_str++ i++
IDENTIFIER ReplacementFor_hash return ReplacementFor_hash;
<operator>.subtraction 0x1a2f+5964-0x1c76
<operator>.subtraction 0xa28+2187-0x12b3
<operator>.assignment i=(0x1141+2831-0x1c50)
<operator>.assignment ReplacementFor_hash=((ReplacementFor_hash<<(0xb74+2359-0x14a6))+\012ReplacementFor_hash)+(*ReplacementFor_str)
<operator>.addition 0x1a2f+5964
<operator>.addition 0xa28+2187
<operator>.postIncrement ReplacementFor_str++
<operator>.postIncrement i++
<operator>.subtraction 0x1141+2831-0x1c50
<operator>.addition ((ReplacementFor_hash<<(0xb74+2359-0x14a6))+\012ReplacementFor_hash)+(*ReplacementFor_str)
<operator>.addition 0x1141+2831
<operator>.addition (ReplacementFor_hash<<(0xb74+2359-0x14a6))+\012ReplacementFor_hash
<operator>.shiftLeft ReplacementFor_hash<<(0xb74+2359-0x14a6)
<operator>.subtraction 0xb74+2359-0x14a6
<operator>.addition 0xb74+2359
<operator>.indirection *ReplacementFor_str
>>>PDG&26 0->2 0->3 0->7 0->9 0->10 0->11 0->13 0->14 0->15 0->16 0->17 0->18 0->19 0->20 0->21 0->22 0->23 0->24 2->1 2->16 3->7 4->1 4->1 4->1 4->9 4->22 5->1 5->1 6->1 7->1 7->1 7->1 7->7 7->8 7->13 7->16 7->17 7->17 7->19 7->21 7->22 7->23 7->24 7->25 8->1 8->1 8->1 9->6 10->1 10->4 10->4 11->1 11->5 11->5 12->1 12->1 12->7 13->1 13->1 13->1 13->9 13->22 16->1 16->8 17->7 17->8 18->1 18->12 18->12 19->1 19->1 21->1 22->1 22->13 22->13 22->19 22->19 22->21 22->21 23->1 23->22 23->22
>>>Token unsigned int ReplacementFor_DJBHash ( char * ReplacementFor_str , unsigned int len ) { unsigned int ReplacementFor_hash = ( 0x1a2f + 5964 - 0x1c76 ) ; unsigned int i = ( 0xa28 + 2187 - 0x12b3 ) ; for ( i = ( 0x1141 + 2831 - 0x1c50 ) ; i < len ; ReplacementFor_str ++ , i ++ ) { ReplacementFor_hash = ( ( ReplacementFor_hash << ( 0xb74 + 2359 - 0x14a6 ) ) + ReplacementFor_hash ) + ( * ReplacementFor_str ) ; } return ReplacementFor_hash ; }
>>>Func
METHOD main
METHOD_RETURN int
PARAM void
freopen freopen(\012"\x42\x2d\x73\x6d\x61\x6c\x6c\x2d\x61\x74\x74\x65\x6d\x70\x74\x30\x2e\x69\x6e",\012"\x72",stdin)
freopen freopen("\x67\x63\x6a\x5f\x32\x2e\x6f\x75\x74","\x77",stdout)
scanf scanf("\x25\x64",&t)
RETURN return(0x1a5d+1044-0x1e71); return(0x1a5d+1044-0x1e71);
<operator>.lessEqualsThan i<=t
<operator>.postIncrement i++
<operator>.subtraction 0x1a5d+1044-0x1e71
<operator>.assignment i=(0xa8d+6873-0x2565)
scanf scanf("\x25\x64",&ReplacementFor_c)
scanf scanf("\x25\x64",&ReplacementFor_d)
scanf scanf(\012"\x25\x64",&ReplacementFor_n)
scanf scanf("\x25\x73",ReplacementFor_str)
printf printf(\012"\x43\x61\x73\x65\x20\x23\x25\x64\x3a\x20",i)
ReplacementFor_work ReplacementFor_work()
<operator>.greaterThan (0x22ad+777-0x25b6)<ReplacementFor_missing((char)(0xa57+436-0xbd0))>printf(\012"\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d" "\n"\012)
printf printf(\012"\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d" "\n"\012)
IDENTIFIER ReplacementFor_ndif <empty>
<operator>.lessThan ReplacementFor_j<ReplacementFor_c
<operator>.postIncrement ReplacementFor_j++
scanf scanf("\x25\x73",\012ReplacementFor_com[ReplacementFor_j])
<operator>.lessThan ReplacementFor_j<ReplacementFor_d
<operator>.postIncrement ReplacementFor_j++
scanf scanf("\x25\x73",ReplacementFor_opp[ReplacementFor_j])
<operator>.lessThan ReplacementFor_j<ReplacementFor_c
<operator>.postIncrement ReplacementFor_j++
printf printf("\x25\x73" "\n",ReplacementFor_com[ReplacementFor_j])
<operator>.lessThan ReplacementFor_j<ReplacementFor_d
<operator>.postIncrement ReplacementFor_j++
printf printf("\x25\x73" "\n",ReplacementFor_opp[ReplacementFor_j])
<operator>.addition 0x1a5d+1044
<operator>.subtraction 0xa8d+6873-0x2565
<operator>.assignment ReplacementFor_j=(0x8a5+6500-0x2209)
<operator>.assignment ReplacementFor_j=(0x813+7669-0x2608)
<operator>.lessThan (0x22ad+777-0x25b6)<ReplacementFor_missing((char)(0xa57+436-0xbd0))
printf printf(\012"\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d" "\n"\012)
<operator>.assignment ReplacementFor_j=(0x40d+8835-0x2690)
<operator>.assignment ReplacementFor_j=(0xff+4504-0x1297)
<operator>.addition 0xa8d+6873
<operator>.subtraction 0x22ad+777-0x25b6
ReplacementFor_missing ReplacementFor_missing((char)(0xa57+436-0xbd0))
<operator>.subtraction 0x8a5+6500-0x2209
<operator>.subtraction 0x813+7669-0x2608
<operator>.addition 0x22ad+777
<operator>.cast (char)(0xa57+436-0xbd0)
<operator>.subtraction 0x40d+8835-0x2690
<operator>.subtraction 0xff+4504-0x1297
<operator>.addition 0x8a5+6500
<operator>.addition 0x813+7669
<operator>.subtraction 0xa57+436-0xbd0
<operator>.addition 0x40d+8835
<operator>.addition 0xff+4504
<operator>.addition 0xa57+436
UNKNOWN f f
<operator>.addressOf &ReplacementFor_c
<operator>.addressOf &ReplacementFor_d
<operator>.addressOf &ReplacementFor_n
<operator>.indirectIndexAccess ReplacementFor_com[ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_opp[ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_com[ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_opp[ReplacementFor_j]
UNKNOWN char char
>>>PDG&64 0->2 0->3 0->4 0->5 0->7 0->8 0->9 0->11 0->12 0->13 0->14 0->15 0->16 0->18 0->19 0->20 0->21 0->23 0->24 0->26 0->27 0->28 0->29 0->30 0->31 0->32 0->33 0->37 0->40 0->41 0->43 0->44 0->45 0->47 0->48 0->49 0->50 0->51 0->52 0->53 0->54 2->1 3->1 3->1 4->1 4->1 5->1 5->7 6->1 7->1 7->1 7->1 7->7 7->8 7->11 7->12 7->13 7->14 7->15 7->15 7->16 7->17 7->18 7->20 7->23 7->26 7->29 7->34 7->35 7->36 7->37 7->38 7->39 7->41 7->42 7->43 7->44 7->45 7->46 7->47 7->48 7->49 7->50 7->51 7->52 7->53 7->54 7->55 7->56 7->57 7->58 7->63 8->1 8->7 9->1 9->1 9->6 10->1 10->1 10->7 11->1 11->20 11->26 12->1 12->23 12->29 13->1 14->1 15->1 15->8 16->1 17->1 17->1 18->1 20->20 20->21 20->21 20->22 20->26 20->59 21->1 21->20 22->1 22->28 23->23 23->24 23->24 23->25 23->29 23->60 24->1 24->23 25->1 25->31 26->1 26->1 26->11 26->20 26->26 26->27 26->27 26->28 26->61 27->1 27->26 28->1 28->1 28->22 29->1 29->1 29->1 29->12 29->23 29->29 29->30 29->30 29->31 29->62 30->1 30->29 31->1 31->1 31->25 33->1 33->10 33->10 34->1 34->1 34->20 35->1 35->1 35->23 36->1 36->1 36->17 36->17 37->17 38->1 38->1 38->26 39->1 39->1 39->29 41->1 41->36 41->36 42->1 42->36 43->1 43->34 43->34 44->1 44->35 44->35 46->1 47->1 47->38 47->38 48->1 48->39 48->39 51->1 51->42 51->42 51->46 51->46
>>>Token int main ( void ) { freopen ( " \x42 \x2d \x73 \x6d \x61 \x6c \x6c \x2d \x61 \x74 \x74 \x65 \x6d \x70 \x74 \x30 \x2e \x69 \x6e " , " \x72 " , stdin ) ; freopen ( " \x67 \x63 \x6a \x5f \x32 \x2e \x6f \x75 \x74 " , " \x77 " , stdout ) ; int t , i , ReplacementFor_j ; scanf ( " \x25 \x64 " , & t ) ; for ( i = ( 0xa8d + 6873 - 0x2565 ) ; i <= t ; i ++ ) { scanf ( " \x25 \x64 " , & ReplacementFor_c ) ; for ( ReplacementFor_j = ( 0x8a5 + 6500 - 0x2209 ) ; ReplacementFor_j < ReplacementFor_c ; ReplacementFor_j ++ ) scanf ( " \x25 \x73 " , ReplacementFor_com [ ReplacementFor_j ] ) ; scanf ( " \x25 \x64 " , & ReplacementFor_d ) ; for ( ReplacementFor_j = ( 0x813 + 7669 - 0x2608 ) ; ReplacementFor_j < ReplacementFor_d ; ReplacementFor_j ++ ) scanf ( " \x25 \x73 " , ReplacementFor_opp [ ReplacementFor_j ] ) ; scanf ( " \x25 \x64 " , & ReplacementFor_n ) ; scanf ( " \x25 \x73 " , ReplacementFor_str ) ; printf ( " \x43 \x61 \x73 \x65 \x20 \x23 \x25 \x64 \x3a \x20 " , i ) ; ReplacementFor_work ( ) ; ( 0x22ad + 777 - 0x25b6 ) < ReplacementFor_missing ( ( char ) ( 0xa57 + 436 - 0xbd0 ) ) > printf ( " \x3d \x3d \x3d \x3d \x3d \x3d \x3d \x3d \x3d \x3d \x3d \x3d \x3d \x3d \x3d \x3d \x3d \x3d \x3d \x3d \x3d \x3d " " \n " ) ; for ( ReplacementFor_j = ( 0x40d + 8835 - 0x2690 ) ; ReplacementFor_j < ReplacementFor_c ; ReplacementFor_j ++ ) printf ( " \x25 \x73 " " \n " , ReplacementFor_com [ ReplacementFor_j ] ) ; for ( ReplacementFor_j = ( 0xff + 4504 - 0x1297 ) ; ReplacementFor_j < ReplacementFor_d ; ReplacementFor_j ++ ) printf ( " \x25 \x73 " " \n " , ReplacementFor_opp [ ReplacementFor_j ] ) ; printf ( " \x3d \x3d \x3d \x3d \x3d \x3d \x3d \x3d \x3d \x3d \x3d \x3d \x3d \x3d \x3d \x3d \x3d \x3d \x3d \x3d \x3d \x3d " " \n " ) ; ReplacementFor_ndif  } return ( 0x1a5d + 1044 - 0x1e71 ) ; }
>>>Func
METHOD main
METHOD_RETURN int
scanf scanf("\x25\x64",&t)
RETURN return(0x14ac+1399-0x1a23); return(0x14ac+1399-0x1a23);
<operator>.lessThan i<t
<operator>.postIncrement i++
<operator>.subtraction 0x14ac+1399-0x1a23
<operator>.assignment i=(0x720+4370-0x1832)
<operator>.assignment ReplacementFor_p=(0xfc5+66-0x1007)
scanf scanf("\x25\x64",&ReplacementFor_c)
scanf scanf(\012"\x25\x64",&ReplacementFor_d)
scanf scanf("\x25\x64",&ReplacementFor_n)
scanf scanf(\012"\x25\x73",s)
printf printf("\x43\x61\x73\x65\x20\x23\x25\x64\x3a\x20\x5b" i+\012(0x183b+731-0x1b15))
printf printf("\x5d" "\n")
<operator>.lessThan ReplacementFor_j<ReplacementFor_c
<operator>.postIncrement ReplacementFor_j++
scanf scanf("\x25\x73",ReplacementFor_s1[ReplacementFor_j])
<operator>.lessThan ReplacementFor_j<ReplacementFor_d
<operator>.postIncrement ReplacementFor_j++
scanf scanf("\x25\x73",\012ReplacementFor_s2[ReplacementFor_j])
<operator>.lessThan ReplacementFor_j<\012ReplacementFor_n
<operator>.postIncrement ReplacementFor_j++
<operator>.lessThan ReplacementFor_j<\012ReplacementFor_p
<operator>.postIncrement ReplacementFor_j++
<operator>.addition 0x14ac+1399
<operator>.subtraction 0x720+4370-0x1832
<operator>.subtraction 0xfc5+66-0x1007
<operator>.assignment ReplacementFor_j=(0x1c14+448-0x1dd4)
<operator>.assignment ReplacementFor_j=(0xc78+4168-0x1cc0)
<operator>.assignment ReplacementFor_j=(0x1e5+5048-0x159d)
<operator>.assignment ReplacementFor_f=(0x23f+875-0x5aa)
<operator>.assignment ReplacementFor_ans[ReplacementFor_p]=s[ReplacementFor_j]
<operator>.addition i+\012(0x183b+731-0x1b15)
<operator>.assignment ReplacementFor_j=(0xd62+3618-0x1b84)
printf printf("\x25\x63",ReplacementFor_ans[\012ReplacementFor_j])
<operator>.addition 0x720+4370
<operator>.addition 0xfc5+66
<operator>.lessThan ReplacementFor_k<ReplacementFor_c
<operator>.postIncrement ReplacementFor_k++
<operator>.equals ReplacementFor_f==(0x1232+2898-0x1d84)
<operator>.equals ReplacementFor_f==(0x1288+266-0x1392)
<operator>.subtraction 0x183b+731-0x1b15
<operator>.lessThan ReplacementFor_j<ReplacementFor_p-(0xd9d+1574-0x13c2)
<operator>.subtraction 0x1c14+448-0x1dd4
<operator>.subtraction 0xc78+4168-0x1cc0
<operator>.subtraction 0x1e5+5048-0x159d
<operator>.subtraction 0x23f+875-0x5aa
<operator>.assignment ReplacementFor_k=\012(0x2b6+5399-0x17cd)
<operator>.postIncrement ReplacementFor_p++
<operator>.addition 0x183b+731
<operator>.subtraction 0xd62+3618-0x1b84
printf printf("\x2c\x20")
<operator>.addition 0x1c14+448
<operator>.addition 0xc78+4168
<operator>.addition 0x1e5+5048
<operator>.addition 0x23f+875
<operator>.equals ReplacementFor_s1[ReplacementFor_k][(0x71d+3966-0x169b)]==ReplacementFor_ans[\012ReplacementFor_p]
<operator>.subtraction 0x1232+2898-0x1d84
<operator>.lessThan ReplacementFor_k<ReplacementFor_d
<operator>.postIncrement ReplacementFor_k++
<operator>.subtraction 0x1288+266-0x1392
<operator>.addition 0xd62+3618
<operator>.subtraction ReplacementFor_p-(0xd9d+1574-0x13c2)
<operator>.subtraction 0x2b6+5399-0x17cd
<operator>.addition 0x1232+2898
<operator>.assignment ReplacementFor_k=(0x904+1283-0xe07)
<operator>.addition 0x1288+266
<operator>.subtraction 0xd9d+1574-0x13c2
<operator>.addition 0x2b6+5399
<operator>.logicalAnd ReplacementFor_p>(0x8f0+622-0xb5e)&&ReplacementFor_s1[\012ReplacementFor_k][(0x1db+3836-0x10d6)]==ReplacementFor_ans[ReplacementFor_p-\012(0x2f0+458-0x4b9)]
<operator>.equals ReplacementFor_s2[\012ReplacementFor_k][(0x624+46-0x652)]==ReplacementFor_ans[ReplacementFor_p]
<operator>.addition 0xd9d+1574
<operator>.subtraction 0x71d+3966-0x169b
<operator>.assignment ReplacementFor_ans[ReplacementFor_p-(0x1189+4667-0x23c3)]=\012ReplacementFor_s1[ReplacementFor_k][(0x1bfd+210-0x1ccd)]
<operator>.assignment ReplacementFor_f=\012(0xec+6419-0x19fe)
<operator>.equals ReplacementFor_s1[ReplacementFor_k][\012(0x4b7+4720-0x1726)]==ReplacementFor_ans[ReplacementFor_p]
<operator>.subtraction 0x904+1283-0xe07
<operator>.addition 0x71d+3966
<operator>.greaterThan ReplacementFor_p>(0x8f0+622-0xb5e)
<operator>.equals ReplacementFor_s1[\012ReplacementFor_k][(0x1db+3836-0x10d6)]==ReplacementFor_ans[ReplacementFor_p-\012(0x2f0+458-0x4b9)]
<operator>.addition 0x904+1283
<operator>.lessThan l<ReplacementFor_p
<operator>.postIncrement l++
<operator>.subtraction 0x8f0+622-0xb5e
<operator>.subtraction 0xec+6419-0x19fe
<operator>.logicalAnd ReplacementFor_p>\012(0x564+3125-0x1199)&&ReplacementFor_s1[ReplacementFor_k][(0xa12+2432-0x1392)]==\012ReplacementFor_ans[ReplacementFor_p-(0x82c+4520-0x19d3)]
<operator>.subtraction 0x624+46-0x652
<operator>.assignment l\012=(0x208c+314-0x21c6)
<operator>.equals ReplacementFor_s2[ReplacementFor_k][\012(0x165+2429-0xae1)]==ReplacementFor_ans[ReplacementFor_p]
<operator>.addition 0x8f0+622
<operator>.subtraction 0x1db+3836-0x10d6
<operator>.subtraction ReplacementFor_p-\012(0x2f0+458-0x4b9)
<operator>.subtraction ReplacementFor_p-(0x1189+4667-0x23c3)
<operator>.subtraction 0x1bfd+210-0x1ccd
<operator>.addition 0xec+6419
<operator>.subtraction 0x4b7+4720-0x1726
<operator>.assignment ReplacementFor_ans[\012ReplacementFor_p-(0xef5+5527-0x248b)]=ReplacementFor_s1[ReplacementFor_k][\012(0x1a72+2994-0x2622)]
<operator>.assignment ReplacementFor_f=(0x25a+5186-0x169b)
<operator>.addition 0x624+46
<operator>.equals ReplacementFor_s2[\012ReplacementFor_k][(0x5b1+8242-0x25e2)]==ReplacementFor_ans[l]
<operator>.addition 0x1db+3836
<operator>.subtraction 0x2f0+458-0x4b9
<operator>.subtraction 0x1189+4667-0x23c3
<operator>.addition 0x1bfd+210
<operator>.addition 0x4b7+4720
<operator>.greaterThan ReplacementFor_p>\012(0x564+3125-0x1199)
<operator>.equals ReplacementFor_s1[ReplacementFor_k][(0xa12+2432-0x1392)]==\012ReplacementFor_ans[ReplacementFor_p-(0x82c+4520-0x19d3)]
<operator>.subtraction 0x208c+314-0x21c6
<operator>.assignment ReplacementFor_p=\012(0x16a+4979-0x14dd)
<operator>.assignment ReplacementFor_k=ReplacementFor_d
<operator>.assignment ReplacementFor_f=\012(0x15fc+3518-0x23b9)
<operator>.lessThan l<ReplacementFor_p
<operator>.postIncrement l++
<operator>.addition 0x2f0+458
<operator>.addition 0x1189+4667
<operator>.subtraction 0x564+3125-0x1199
<operator>.subtraction 0x25a+5186-0x169b
<operator>.addition 0x208c+314
<operator>.subtraction 0x165+2429-0xae1
<operator>.assignment l=\012(0x2169+1295-0x2678)
<operator>.addition 0x564+3125
<operator>.subtraction 0xa12+2432-0x1392
<operator>.subtraction ReplacementFor_p-(0x82c+4520-0x19d3)
<operator>.subtraction ReplacementFor_p-(0xef5+5527-0x248b)
<operator>.subtraction 0x1a72+2994-0x2622
<operator>.addition 0x25a+5186
<operator>.subtraction 0x5b1+8242-0x25e2
<operator>.subtraction 0x16a+4979-0x14dd
<operator>.subtraction 0x15fc+3518-0x23b9
<operator>.addition 0x165+2429
<operator>.equals ReplacementFor_s2[\012ReplacementFor_k][(0x1c2+7553-0x1f43)]==ReplacementFor_ans[l]
<operator>.addition 0xa12+2432
<operator>.subtraction 0x82c+4520-0x19d3
<operator>.subtraction 0xef5+5527-0x248b
<operator>.addition 0x1a72+2994
<operator>.addition 0x5b1+8242
<operator>.addition 0x16a+4979
<operator>.addition 0x15fc+3518
<operator>.subtraction 0x2169+1295-0x2678
<operator>.assignment ReplacementFor_p=\012(0x359+742-0x63f)
<operator>.assignment ReplacementFor_k=ReplacementFor_d
<operator>.assignment ReplacementFor_f=\012(0xbc4+4932-0x1f07)
<operator>.addition 0x82c+4520
<operator>.addition 0xef5+5527
<operator>.addition 0x2169+1295
<operator>.subtraction 0x1c2+7553-0x1f43
<operator>.subtraction 0x359+742-0x63f
<operator>.subtraction 0xbc4+4932-0x1f07
<operator>.addition 0x1c2+7553
<operator>.addition 0x359+742
<operator>.addition 0xbc4+4932
<operator>.addressOf &ReplacementFor_c
<operator>.addressOf &ReplacementFor_d
<operator>.addressOf &ReplacementFor_n
<operator>.indirectIndexAccess ReplacementFor_s1[ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_s2[ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_ans[ReplacementFor_p]
<operator>.indirectIndexAccess s[ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_ans[\012ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_s1[ReplacementFor_k][(0x71d+3966-0x169b)]
<operator>.indirectIndexAccess ReplacementFor_ans[\012ReplacementFor_p]
<operator>.indirectIndexAccess ReplacementFor_s1[ReplacementFor_k]
<operator>.indirectIndexAccess ReplacementFor_s2[\012ReplacementFor_k][(0x624+46-0x652)]
<operator>.indirectIndexAccess ReplacementFor_ans[ReplacementFor_p]
<operator>.indirectIndexAccess ReplacementFor_s1[\012ReplacementFor_k][(0x1db+3836-0x10d6)]
<operator>.indirectIndexAccess ReplacementFor_ans[ReplacementFor_p-\012(0x2f0+458-0x4b9)]
<operator>.indirectIndexAccess ReplacementFor_ans[ReplacementFor_p-(0x1189+4667-0x23c3)]
<operator>.indirectIndexAccess ReplacementFor_s1[ReplacementFor_k][(0x1bfd+210-0x1ccd)]
<operator>.indirectIndexAccess ReplacementFor_s1[ReplacementFor_k][\012(0x4b7+4720-0x1726)]
<operator>.indirectIndexAccess ReplacementFor_ans[ReplacementFor_p]
<operator>.indirectIndexAccess ReplacementFor_s2[\012ReplacementFor_k]
<operator>.indirectIndexAccess ReplacementFor_s1[\012ReplacementFor_k]
<operator>.indirectIndexAccess ReplacementFor_s1[ReplacementFor_k]
<operator>.indirectIndexAccess ReplacementFor_s1[ReplacementFor_k]
<operator>.indirectIndexAccess ReplacementFor_s2[ReplacementFor_k][\012(0x165+2429-0xae1)]
<operator>.indirectIndexAccess ReplacementFor_ans[ReplacementFor_p]
<operator>.indirectIndexAccess ReplacementFor_s1[ReplacementFor_k][(0xa12+2432-0x1392)]
<operator>.indirectIndexAccess ReplacementFor_ans[ReplacementFor_p-(0x82c+4520-0x19d3)]
<operator>.indirectIndexAccess ReplacementFor_ans[\012ReplacementFor_p-(0xef5+5527-0x248b)]
<operator>.indirectIndexAccess ReplacementFor_s1[ReplacementFor_k][\012(0x1a72+2994-0x2622)]
<operator>.indirectIndexAccess ReplacementFor_s2[\012ReplacementFor_k][(0x5b1+8242-0x25e2)]
<operator>.indirectIndexAccess ReplacementFor_ans[l]
<operator>.indirectIndexAccess ReplacementFor_s2[ReplacementFor_k]
<operator>.indirectIndexAccess ReplacementFor_s1[ReplacementFor_k]
<operator>.indirectIndexAccess ReplacementFor_s1[ReplacementFor_k]
<operator>.indirectIndexAccess ReplacementFor_s2[\012ReplacementFor_k]
<operator>.indirectIndexAccess ReplacementFor_s2[\012ReplacementFor_k][(0x1c2+7553-0x1f43)]
<operator>.indirectIndexAccess ReplacementFor_ans[l]
<operator>.indirectIndexAccess ReplacementFor_s2[\012ReplacementFor_k]
>>>PDG&190 0->2 0->4 0->5 0->6 0->9 0->10 0->11 0->12 0->13 0->14 0->15 0->16 0->18 0->19 0->21 0->22 0->23 0->24 0->25 0->26 0->27 0->33 0->35 0->36 0->37 0->38 0->39 0->40 0->41 0->42 0->43 0->44 0->45 0->46 0->47 0->49 0->50 0->51 0->52 0->53 0->54 0->55 0->56 0->58 0->59 0->60 0->61 0->62 0->63 0->64 0->65 0->67 0->68 0->69 0->72 0->73 0->77 0->78 0->79 0->81 0->82 0->83 0->84 0->85 0->87 0->90 0->91 0->92 0->93 0->94 0->95 0->96 0->99 0->101 0->102 0->103 0->104 0->105 0->106 0->108 0->110 0->112 0->113 0->114 0->115 0->116 0->117 0->118 0->119 0->121 0->122 0->123 0->124 0->125 0->126 0->127 0->128 0->129 0->130 0->132 0->133 0->134 0->135 0->136 0->137 0->138 0->139 0->141 0->143 0->144 0->145 0->146 0->147 0->148 0->149 0->150 0->151 2->1 2->4 3->1 4->1 4->1 4->1 4->4 4->5 4->5 4->8 4->9 4->10 4->11 4->12 4->13 4->13 4->14 4->15 4->18 4->21 4->23 4->27 4->28 4->29 4->30 4->33 4->33 4->34 4->37 4->42 4->44 4->45 4->46 4->50 4->51 4->53 4->54 4->55 4->62 4->152 4->153 4->154 5->1 5->4 6->1 6->1 6->3 7->1 7->1 7->4 8->1 8->1 8->23 8->49 8->79 8->82 8->106 8->112 9->1 9->15 9->38 10->1 10->18 10->59 10->110 10->141 11->1 11->21 12->1 12->32 13->1 13->1 14->1 15->1 15->1 15->9 15->15 15->16 15->16 15->17 15->38 15->155 16->1 16->15 17->1 18->1 18->1 18->10 18->18 18->19 18->19 18->20 18->59 18->156 19->1 19->18 20->1 21->1 21->1 21->11 21->21 21->22 21->22 21->31 21->32 21->38 21->40 21->41 21->47 21->48 21->56 21->58 21->61 21->64 21->65 21->67 21->69 21->157 21->158 22->1 22->21 23->1 23->1 23->1 23->23 23->24 23->35 23->43 23->43 23->63 23->63 23->68 23->72 23->159 24->1 24->23 26->1 26->7 26->7 27->1 27->8 27->8 28->1 28->1 28->15 29->1 29->1 29->18 30->1 30->1 30->21 31->1 31->1 31->40 32->1 32->1 32->1 32->71 32->76 33->1 34->1 34->1 34->23 35->1 35->1 38->1 38->1 38->1 38->9 38->15 38->39 38->57 38->73 38->78 38->160 38->161 38->162 39->1 39->38 40->1 40->1 40->41 40->59 40->66 40->77 40->81 41->1 41->1 41->1 41->49 42->1 42->13 42->13 42->33 42->33 43->1 43->1 43->24 43->52 44->1 44->28 44->28 45->1 45->29 45->29 46->1 46->30 46->30 47->1 47->31 47->31 48->1 48->1 48->38 49->1 49->23 49->79 49->82 49->106 49->112 51->1 51->34 51->34 52->1 57->1 57->1 57->1 57->70 57->76 57->79 57->84 57->90 57->96 57->105 57->169 57->170 57->174 58->1 58->40 58->40 59->1 59->1 59->1 59->10 59->18 59->59 59->60 59->60 59->71 59->87 59->99 59->110 59->141 59->163 59->164 59->171 60->1 60->59 61->1 61->41 61->41 63->1 63->23 63->43 63->43 64->1 64->48 64->48 66->1 66->1 66->59 68->1 68->63 68->63 70->1 70->1 70->1 70->38 70->39 70->74 70->75 70->85 70->93 70->94 70->95 70->103 70->104 70->115 70->167 70->168 70->173 71->1 71->1 71->1 71->82 71->88 71->89 71->89 71->108 71->118 71->119 71->130 71->175 71->176 71->183 73->1 74->1 74->1 74->1 75->1 75->1 75->40 76->1 76->1 76->1 76->38 76->39 76->71 76->86 76->106 76->116 76->121 77->1 77->66 77->66 79->1 79->23 79->49 79->70 79->70 79->80 79->82 79->91 79->92 79->92 79->93 79->101 79->102 79->106 79->112 79->114 79->165 79->166 79->172 80->1 80->1 80->70 80->70 82->1 82->1 82->23 82->49 82->79 82->83 82->100 82->106 82->112 82->127 82->136 82->181 82->182 82->186 83->1 83->82 84->1 84->79 84->79 85->1 85->75 85->75 86->1 86->1 86->1 86->38 86->39 86->97 86->98 86->117 86->124 86->125 86->126 86->134 86->135 86->144 86->179 86->180 86->185 87->1 88->1 88->1 88->82 89->1 89->1 89->1 89->71 89->112 89->120 89->139 89->145 91->1 92->1 92->23 92->49 92->79 92->82 92->93 92->106 92->112 93->1 93->23 93->49 93->79 93->82 93->106 93->112 94->1 96->1 97->1 97->1 97->1 98->1 98->1 98->40 100->1 100->1 100->1 100->82 100->83 100->109 100->110 100->111 100->128 100->129 100->131 100->137 100->138 102->1 102->92 102->92 103->1 103->93 103->93 106->1 106->23 106->49 106->79 106->82 106->86 106->86 106->107 106->112 106->122 106->123 106->123 106->124 106->132 106->133 106->143 106->177 106->178 106->184 107->1 107->1 107->86 107->86 108->1 108->88 108->88 109->1 109->1 109->23 109->49 109->79 109->82 109->106 109->112 110->1 110->60 111->1 111->1 111->41 112->1 112->1 112->23 112->49 112->79 112->82 112->106 112->113 112->131 112->146 112->149 112->187 112->188 112->189 113->1 113->112 116->1 116->106 116->106 117->1 117->98 117->98 119->1 120->1 120->1 120->112 122->1 123->1 123->23 123->49 123->79 123->82 123->106 123->112 123->124 124->1 124->23 124->49 124->79 124->82 124->106 124->112 125->1 127->1 128->1 128->109 128->109 129->1 129->111 129->111 131->1 131->1 131->1 131->100 131->112 131->113 131->140 131->141 131->142 131->147 131->148 131->150 131->151 133->1 133->123 133->123 134->1 134->124 134->124 139->1 139->120 139->120 140->1 140->1 140->23 140->49 140->79 140->82 140->106 140->112 141->1 141->60 142->1 142->1 142->41 146->1 147->1 147->140 147->140 148->1 148->142 148->142
>>>Token int main ( ) { int t , i , ReplacementFor_j , ReplacementFor_k , l ; scanf ( " \x25 \x64 " , & t ) ; for ( i = ( 0x720 + 4370 - 0x1832 ) ; i < t ; i ++ ) { int ReplacementFor_c , ReplacementFor_d , ReplacementFor_n , ReplacementFor_p = ( 0xfc5 + 66 - 0x1007 ) ; char s [ ( 0x1b48 + 24 - 0x1afb ) ] ; char ReplacementFor_s1 [ ( 0x134 + 6893 - 0x1bfd ) ] [ ( 0x401 + 1335 - 0x934 ) ] , ReplacementFor_s2 [ ( 0x6ac + 7351 - 0x2347 ) ] [ ( 0x4e5 + 1279 - 0x9e1 ) ] ; char ReplacementFor_ans [ ( 0xd11 + 2669 - 0x1719 ) ] ; scanf ( " \x25 \x64 " , & ReplacementFor_c ) ; for ( ReplacementFor_j = ( 0x1c14 + 448 - 0x1dd4 ) ; ReplacementFor_j < ReplacementFor_c ; ReplacementFor_j ++ ) scanf ( " \x25 \x73 " , ReplacementFor_s1 [ ReplacementFor_j ] ) ; scanf ( " \x25 \x64 " , & ReplacementFor_d ) ; for ( ReplacementFor_j = ( 0xc78 + 4168 - 0x1cc0 ) ; ReplacementFor_j < ReplacementFor_d ; ReplacementFor_j ++ ) scanf ( " \x25 \x73 " , ReplacementFor_s2 [ ReplacementFor_j ] ) ; scanf ( " \x25 \x64 " , & ReplacementFor_n ) ; scanf ( " \x25 \x73 " , s ) ; for ( ReplacementFor_j = ( 0x1e5 + 5048 - 0x159d ) ; ReplacementFor_j < ReplacementFor_n ; ReplacementFor_j ++ ) { int ReplacementFor_f = ( 0x23f + 875 - 0x5aa ) ; ReplacementFor_ans [ ReplacementFor_p ] = s [ ReplacementFor_j ] ; for ( ReplacementFor_k = ( 0x2b6 + 5399 - 0x17cd ) ; ReplacementFor_k < ReplacementFor_c ; ReplacementFor_k ++ ) { if ( ReplacementFor_s1 [ ReplacementFor_k ] [ ( 0x71d + 3966 - 0x169b ) ] == ReplacementFor_ans [ ReplacementFor_p ] ) { if ( ReplacementFor_p > ( 0x8f0 + 622 - 0xb5e ) && ReplacementFor_s1 [ ReplacementFor_k ] [ ( 0x1db + 3836 - 0x10d6 ) ] == ReplacementFor_ans [ ReplacementFor_p - ( 0x2f0 + 458 - 0x4b9 ) ] ) { ReplacementFor_ans [ ReplacementFor_p - ( 0x1189 + 4667 - 0x23c3 ) ] = ReplacementFor_s1 [ ReplacementFor_k ] [ ( 0x1bfd + 210 - 0x1ccd ) ] ; ReplacementFor_f = ( 0xec + 6419 - 0x19fe ) ; break ; } } else if ( ReplacementFor_s1 [ ReplacementFor_k ] [ ( 0x4b7 + 4720 - 0x1726 ) ] == ReplacementFor_ans [ ReplacementFor_p ] ) { if ( ReplacementFor_p > ( 0x564 + 3125 - 0x1199 ) && ReplacementFor_s1 [ ReplacementFor_k ] [ ( 0xa12 + 2432 - 0x1392 ) ] == ReplacementFor_ans [ ReplacementFor_p - ( 0x82c + 4520 - 0x19d3 ) ] ) { ReplacementFor_ans [ ReplacementFor_p - ( 0xef5 + 5527 - 0x248b ) ] = ReplacementFor_s1 [ ReplacementFor_k ] [ ( 0x1a72 + 2994 - 0x2622 ) ] ; ReplacementFor_f = ( 0x25a + 5186 - 0x169b ) ; break ; } } } if ( ReplacementFor_f == ( 0x1232 + 2898 - 0x1d84 ) ) { for ( ReplacementFor_k = ( 0x904 + 1283 - 0xe07 ) ; ReplacementFor_k < ReplacementFor_d ; ReplacementFor_k ++ ) { if ( ReplacementFor_s2 [ ReplacementFor_k ] [ ( 0x624 + 46 - 0x652 ) ] == ReplacementFor_ans [ ReplacementFor_p ] ) { for ( l = ( 0x208c + 314 - 0x21c6 ) ; l < ReplacementFor_p ; l ++ ) { if ( ReplacementFor_s2 [ ReplacementFor_k ] [ ( 0x5b1 + 8242 - 0x25e2 ) ] == ReplacementFor_ans [ l ] ) { ReplacementFor_p = ( 0x16a + 4979 - 0x14dd ) ; ReplacementFor_k = ReplacementFor_d ; ReplacementFor_f = ( 0x15fc + 3518 - 0x23b9 ) ; break ; } } } else if ( ReplacementFor_s2 [ ReplacementFor_k ] [ ( 0x165 + 2429 - 0xae1 ) ] == ReplacementFor_ans [ ReplacementFor_p ] ) { for ( l = ( 0x2169 + 1295 - 0x2678 ) ; l < ReplacementFor_p ; l ++ ) { if ( ReplacementFor_s2 [ ReplacementFor_k ] [ ( 0x1c2 + 7553 - 0x1f43 ) ] == ReplacementFor_ans [ l ] ) { ReplacementFor_p = ( 0x359 + 742 - 0x63f ) ; ReplacementFor_k = ReplacementFor_d ; ReplacementFor_f = ( 0xbc4 + 4932 - 0x1f07 ) ; break ; } } } } } if ( ReplacementFor_f == ( 0x1288 + 266 - 0x1392 ) ) ReplacementFor_p ++ ; } printf ( " \x43 \x61 \x73 \x65 \x20 \x23 \x25 \x64 \x3a \x20 \x5b " , i + ( 0x183b + 731 - 0x1b15 ) ) ; for ( ReplacementFor_j = ( 0xd62 + 3618 - 0x1b84 ) ; ReplacementFor_j < ReplacementFor_p ; ReplacementFor_j ++ ) { printf ( " \x25 \x63 " , ReplacementFor_ans [ ReplacementFor_j ] ) ; if ( ReplacementFor_j < ReplacementFor_p - ( 0xd9d + 1574 - 0x13c2 ) ) printf ( " \x2c \x20 " ) ; } printf ( " \x5d " " \n " ) ; } return ( 0x14ac + 1399 - 0x1a23 ) ; }
>>>Func
METHOD main
METHOD_RETURN ANY
<operator>.assignment *ReplacementFor_fin=fopen("\x61\x2e\x69\x6e","\x72")
<operator>.assignment *\012ReplacementFor_fout=fopen("\x61\x2e\x6f\x75\x74","\x77")
fscanf fscanf(ReplacementFor_fin,\012"\x25\x6c\x64",&ReplacementFor_b)
RETURN return(0x1df2+1930-0x257c); return(0x1df2+1930-0x257c);
<operator>.lessEqualsThan ReplacementFor_x<=ReplacementFor_b
<operator>.assignment ReplacementFor_x=ReplacementFor_x+\012(0xca2+2475-0x164c)
<operator>.subtraction 0x1df2+1930-0x257c
fopen fopen("\x61\x2e\x69\x6e","\x72")
fopen fopen("\x61\x2e\x6f\x75\x74","\x77")
<operator>.assignment ReplacementFor_x=(0x2c0+436-0x473)
fscanf fscanf(ReplacementFor_fin,"\x25\x6c\x64",&ReplacementFor_c)
fscanf fscanf(ReplacementFor_fin,"\x25\x6c\x64",&ReplacementFor_d)
fscanf fscanf(ReplacementFor_fin,\012"\x25\x6c\x64\x20\x25\x73",&e,&ReplacementFor_a)
fprintf fprintf(ReplacementFor_fout,\012"\x43\x61\x73\x65\x20\x23\x25\x6c\x64\x3a\x20\x5b",ReplacementFor_x)
<operator>.assignment ReplacementFor_z=(0x130f+299-0x143a)
fprintf fprintf(\012ReplacementFor_fout,"\x5d" "\n")
<operator>.addition ReplacementFor_x+\012(0xca2+2475-0x164c)
<operator>.greaterThan ReplacementFor_c>(0x1da2+2047-0x25a1)
<operator>.greaterThan ReplacementFor_d>(0x7a4+5022-0x1b42)
<operator>.lessEqualsThan ReplacementFor_z<=(0x63d+7993-0x2512)
<operator>.assignment ReplacementFor_z=\012ReplacementFor_z+(0x22fd+4-0x2300)
<operator>.lessThan ReplacementFor_y<e
<operator>.assignment ReplacementFor_y=\012ReplacementFor_y+(0x420+2971-0xfba)
<operator>.lessThan ReplacementFor_y<e
<operator>.assignment ReplacementFor_y=ReplacementFor_y+(0x1c74+530-0x1e85)
<operator>.addition 0x1df2+1930
<operator>.subtraction 0x2c0+436-0x473
<operator>.subtraction 0xca2+2475-0x164c
<operator>.assignment ReplacementFor_z=\012(0xa1f+533-0xc34)
<operator>.assignment l[ReplacementFor_z]=(0x1e3a+1846-0x256f)
<operator>.assignment ReplacementFor_y=(0x1ad3+2756-0x2597)
<operator>.subtraction 0x130f+299-0x143a
<operator>.assignment ReplacementFor_y=(0x1b2+3898-0x10ec)
<operator>.addition 0x2c0+436
<operator>.addition 0xca2+2475
<operator>.subtraction 0x1da2+2047-0x25a1
<operator>.lessThan ReplacementFor_y<ReplacementFor_c
<operator>.assignment ReplacementFor_y=\012ReplacementFor_y+(0x181b+504-0x1a12)
<operator>.subtraction 0x7a4+5022-0x1b42
<operator>.lessThan ReplacementFor_y<ReplacementFor_d
<operator>.assignment ReplacementFor_y=\012ReplacementFor_y+(0x8d0+2563-0x12d2)
<operator>.subtraction 0x63d+7993-0x2512
<operator>.addition ReplacementFor_z+(0x22fd+4-0x2300)
<operator>.addition ReplacementFor_y+(0x420+2971-0xfba)
<operator>.logicalAnd ReplacementFor_y>(0x849+6727-0x2290)&&l[\012ReplacementFor_y]==(0xb4c+6917-0x2650)
<operator>.addition 0x130f+299
<operator>.addition ReplacementFor_y+(0x1c74+530-0x1e85)
<operator>.equals l[\012ReplacementFor_y]==(0xe40+906-0x11c9)
<operator>.addition 0x1da2+2047
<operator>.assignment ReplacementFor_y=\012(0x7c1+5280-0x1c61)
fscanf fscanf(ReplacementFor_fin,"\x25\x73",&m[\012ReplacementFor_y])
<operator>.addition 0x7a4+5022
<operator>.assignment ReplacementFor_y=\012(0x876+6163-0x2089)
fscanf fscanf(ReplacementFor_fin,"\x25\x73",&\012ReplacementFor_n[ReplacementFor_y])
<operator>.subtraction 0xa1f+533-0xc34
<operator>.addition 0x63d+7993
<operator>.subtraction 0x22fd+4-0x2300
<operator>.subtraction 0x1e3a+1846-0x256f
<operator>.subtraction 0x1ad3+2756-0x2597
<operator>.subtraction 0x420+2971-0xfba
<operator>.subtraction 0x1b2+3898-0x10ec
<operator>.subtraction 0x1c74+530-0x1e85
fprintf fprintf(ReplacementFor_fout,"\x25\x63",\012ReplacementFor_a[ReplacementFor_y])
<operator>.postIncrement ReplacementFor_z++
<operator>.addition ReplacementFor_y+(0x181b+504-0x1a12)
<operator>.addition ReplacementFor_y+(0x8d0+2563-0x12d2)
<operator>.addition 0xa1f+533
<operator>.addition 0x22fd+4
<operator>.addition 0x1e3a+1846
<operator>.addition 0x1ad3+2756
<operator>.addition 0x420+2971
<operator>.greaterThan ReplacementFor_y>(0x849+6727-0x2290)
<operator>.equals l[\012ReplacementFor_y]==(0xb4c+6917-0x2650)
<operator>.greaterThan ReplacementFor_c>(0x1fe2+572-0x221e)
<operator>.greaterThan ReplacementFor_d>\012(0x1722+583-0x1969)
<operator>.addition 0x1b2+3898
<operator>.addition 0x1c74+530
<operator>.subtraction 0xe40+906-0x11c9
<operator>.greaterThan ReplacementFor_z>(0xf47+2274-0x1829)
<operator>.subtraction 0x7c1+5280-0x1c61
<operator>.subtraction 0x181b+504-0x1a12
<operator>.subtraction 0x876+6163-0x2089
<operator>.subtraction 0x8d0+2563-0x12d2
<operator>.subtraction 0x849+6727-0x2290
<operator>.subtraction 0xb4c+6917-0x2650
<operator>.addition 0xe40+906
fprintf fprintf(ReplacementFor_fout,"\x2c\x20")
<operator>.addition 0x7c1+5280
<operator>.addition 0x181b+504
<operator>.addition 0x876+6163
<operator>.addition 0x8d0+2563
<operator>.addition 0x849+6727
<operator>.addition 0xb4c+6917
<operator>.subtraction 0x1fe2+572-0x221e
<operator>.lessThan ReplacementFor_z<ReplacementFor_c
<operator>.assignment ReplacementFor_z=ReplacementFor_z+(0xc6b+6545-0x25fb)
<operator>.subtraction 0x1722+583-0x1969
<operator>.lessThan ReplacementFor_z<\012ReplacementFor_d
<operator>.assignment ReplacementFor_z=ReplacementFor_z+(0x1d4+1688-0x86b)
<operator>.subtraction 0xf47+2274-0x1829
<operator>.addition 0x1fe2+572
<operator>.assignment ReplacementFor_z=(0xf93+244-0x1087)
<operator>.addition 0x1722+583
<operator>.assignment ReplacementFor_z=(0x71d+4792-0x19d5)
<operator>.addition 0xf47+2274
<operator>.addition ReplacementFor_z+(0xc6b+6545-0x25fb)
<operator>.equals m[ReplacementFor_z][\012(0x14a+2615-0xb81)]==ReplacementFor_a[ReplacementFor_y]
<operator>.addition ReplacementFor_z+(0x1d4+1688-0x86b)
<operator>.equals ReplacementFor_n[ReplacementFor_z][(0xd9c+4477-0x1f19)]==ReplacementFor_a[\012ReplacementFor_y]
<operator>.subtraction 0xf93+244-0x1087
<operator>.subtraction 0xc6b+6545-0x25fb
<operator>.assignment ReplacementFor_h=\012ReplacementFor_y-(0x114a+2215-0x19f0)
<operator>.subtraction 0x71d+4792-0x19d5
<operator>.subtraction 0x1d4+1688-0x86b
<operator>.addition 0xf93+244
<operator>.addition 0xc6b+6545
<operator>.logicalAnd l[ReplacementFor_h]==\012(0x1bc6+1412-0x214a)&&ReplacementFor_h>=(0x128+5715-0x177b)
<operator>.logicalAnd ReplacementFor_h>=(0xe2b+2591-0x184a)&&ReplacementFor_a[ReplacementFor_h]==m\012[ReplacementFor_z][(0x51c+6225-0x1d6c)]&&l[ReplacementFor_h]==\012(0x736+4728-0x19ad)
<operator>.addition 0x71d+4792
<operator>.addition 0x1d4+1688
<operator>.lessThan ReplacementFor_g<\012ReplacementFor_y
<operator>.assignment ReplacementFor_g=ReplacementFor_g+(0xbdc+5618-0x21cd)
<operator>.subtraction 0x14a+2615-0xb81
<operator>.subtraction ReplacementFor_y-(0x114a+2215-0x19f0)
<operator>.postDecrement ReplacementFor_h--
<operator>.assignment l[ReplacementFor_h]=(0x14d+3603-0xf60)
<operator>.assignment ReplacementFor_a[\012ReplacementFor_y]=m[ReplacementFor_z][(0x1713+4040-0x26d9)]
<operator>.equals m[\012ReplacementFor_z][(0x628+5881-0x1d20)]==ReplacementFor_a[ReplacementFor_y]
<operator>.subtraction 0xd9c+4477-0x1f19
<operator>.assignment ReplacementFor_g=(0x178a+626-0x19fc)
<operator>.equals ReplacementFor_n[ReplacementFor_z][\012(0x366+6251-0x1bd0)]==ReplacementFor_a[ReplacementFor_y]
<operator>.addition 0x14a+2615
<operator>.subtraction 0x114a+2215-0x19f0
<operator>.equals l[ReplacementFor_h]==\012(0x1bc6+1412-0x214a)
<operator>.greaterEqualsThan ReplacementFor_h>=(0x128+5715-0x177b)
<operator>.logicalAnd ReplacementFor_h>=(0xe2b+2591-0x184a)&&ReplacementFor_a[ReplacementFor_h]==m\012[ReplacementFor_z][(0x51c+6225-0x1d6c)]
<operator>.equals l[ReplacementFor_h]==\012(0x736+4728-0x19ad)
<operator>.assignment ReplacementFor_h=ReplacementFor_y-(0x1063+2165-0x18d7)
<operator>.addition 0xd9c+4477
<operator>.addition ReplacementFor_g+(0xbdc+5618-0x21cd)
<operator>.logicalAnd ReplacementFor_a[ReplacementFor_g]==ReplacementFor_n[ReplacementFor_z][\012(0xb2d+2162-0x139e)]&&l[ReplacementFor_g]==(0x13e9+903-0x176f)
<operator>.addition 0x114a+2215
<operator>.subtraction 0x1bc6+1412-0x214a
<operator>.subtraction 0x128+5715-0x177b
<operator>.greaterEqualsThan ReplacementFor_h>=(0xe2b+2591-0x184a)
<operator>.equals ReplacementFor_a[ReplacementFor_h]==m\012[ReplacementFor_z][(0x51c+6225-0x1d6c)]
<operator>.subtraction 0x736+4728-0x19ad
<operator>.subtraction 0x14d+3603-0xf60
<operator>.logicalAnd l[ReplacementFor_h]\012==(0x245a+7-0x2461)&&ReplacementFor_h>=(0xb26+5602-0x2108)
<operator>.logicalAnd ReplacementFor_h>=(0x191f+1984-0x20df)&&ReplacementFor_a[ReplacementFor_h]==m\012[ReplacementFor_z][(0x2071+1047-0x2488)]&&l[ReplacementFor_h]==(0x2f6+487-0x4dc)
<operator>.subtraction 0x178a+626-0x19fc
<operator>.subtraction 0xbdc+5618-0x21cd
<operator>.lessThan ReplacementFor_g<ReplacementFor_y
<operator>.assignment ReplacementFor_g=\012ReplacementFor_g+(0x16df+373-0x1853)
<operator>.addition 0x1bc6+1412
<operator>.addition 0x128+5715
<operator>.subtraction 0xe2b+2591-0x184a
<operator>.addition 0x736+4728
<operator>.addition 0x14d+3603
<operator>.subtraction 0x1713+4040-0x26d9
<operator>.subtraction 0x628+5881-0x1d20
<operator>.subtraction ReplacementFor_y-(0x1063+2165-0x18d7)
<operator>.postDecrement ReplacementFor_h--
<operator>.assignment l[ReplacementFor_h]=(0x11d5+1685-0x186a)
<operator>.assignment ReplacementFor_a[ReplacementFor_y]=m[\012ReplacementFor_z][(0x13ed+4320-0x24cb)]
<operator>.addition 0x178a+626
<operator>.addition 0xbdc+5618
<operator>.equals ReplacementFor_a[ReplacementFor_g]==ReplacementFor_n[ReplacementFor_z][\012(0xb2d+2162-0x139e)]
<operator>.equals l[ReplacementFor_g]==(0x13e9+903-0x176f)
<operator>.lessEqualsThan ReplacementFor_h<=ReplacementFor_y
<operator>.assignment ReplacementFor_h=ReplacementFor_h+(0x7ad+3236-0x1450)
<operator>.subtraction 0x366+6251-0x1bd0
<operator>.assignment ReplacementFor_g=\012(0xa96+5978-0x21f0)
<operator>.addition 0xe2b+2591
<operator>.subtraction 0x51c+6225-0x1d6c
<operator>.addition 0x1713+4040
<operator>.addition 0x628+5881
<operator>.subtraction 0x1063+2165-0x18d7
<operator>.equals l[ReplacementFor_h]\012==(0x245a+7-0x2461)
<operator>.greaterEqualsThan ReplacementFor_h>=(0xb26+5602-0x2108)
<operator>.logicalAnd ReplacementFor_h>=(0x191f+1984-0x20df)&&ReplacementFor_a[ReplacementFor_h]==m\012[ReplacementFor_z][(0x2071+1047-0x2488)]
<operator>.equals l[ReplacementFor_h]==(0x2f6+487-0x4dc)
<operator>.subtraction 0x13e9+903-0x176f
<operator>.assignment ReplacementFor_h=(0x173c+3875-0x265f)
<operator>.assignment l[ReplacementFor_h]=\012(0x643+3630-0x1471)
<operator>.addition 0x366+6251
<operator>.addition ReplacementFor_g+(0x16df+373-0x1853)
<operator>.logicalAnd ReplacementFor_a[ReplacementFor_g]==\012ReplacementFor_n[ReplacementFor_z][(0x1992+595-0x1be5)]&&l[ReplacementFor_g]==\012(0x459+6766-0x1ec6)
<operator>.addition 0x51c+6225
<operator>.addition 0x1063+2165
<operator>.subtraction 0x245a+7-0x2461
<operator>.subtraction 0xb26+5602-0x2108
<operator>.greaterEqualsThan ReplacementFor_h>=(0x191f+1984-0x20df)
<operator>.equals ReplacementFor_a[ReplacementFor_h]==m\012[ReplacementFor_z][(0x2071+1047-0x2488)]
<operator>.subtraction 0x2f6+487-0x4dc
<operator>.subtraction 0x11d5+1685-0x186a
<operator>.subtraction 0xb2d+2162-0x139e
<operator>.addition 0x13e9+903
<operator>.addition ReplacementFor_h+(0x7ad+3236-0x1450)
<operator>.subtraction 0xa96+5978-0x21f0
<operator>.subtraction 0x16df+373-0x1853
<operator>.addition 0x245a+7
<operator>.addition 0xb26+5602
<operator>.subtraction 0x191f+1984-0x20df
<operator>.addition 0x2f6+487
<operator>.addition 0x11d5+1685
<operator>.subtraction 0x13ed+4320-0x24cb
<operator>.addition 0xb2d+2162
<operator>.subtraction 0x173c+3875-0x265f
<operator>.subtraction 0x7ad+3236-0x1450
<operator>.subtraction 0x643+3630-0x1471
<operator>.addition 0xa96+5978
<operator>.addition 0x16df+373
<operator>.equals ReplacementFor_a[ReplacementFor_g]==\012ReplacementFor_n[ReplacementFor_z][(0x1992+595-0x1be5)]
<operator>.equals l[ReplacementFor_g]==\012(0x459+6766-0x1ec6)
<operator>.lessEqualsThan ReplacementFor_h<=\012ReplacementFor_y
<operator>.assignment ReplacementFor_h=ReplacementFor_h+(0x32d+3565-0x1119)
<operator>.addition 0x191f+1984
<operator>.subtraction 0x2071+1047-0x2488
<operator>.addition 0x13ed+4320
<operator>.addition 0x173c+3875
<operator>.addition 0x7ad+3236
<operator>.addition 0x643+3630
<operator>.subtraction 0x459+6766-0x1ec6
<operator>.assignment ReplacementFor_h=(0x287+2184-0xb0f)
<operator>.assignment l[\012ReplacementFor_h]=(0x4a3+5195-0x18ee)
<operator>.addition 0x2071+1047
<operator>.subtraction 0x1992+595-0x1be5
<operator>.addition 0x459+6766
<operator>.addition ReplacementFor_h+(0x32d+3565-0x1119)
<operator>.addition 0x1992+595
<operator>.subtraction 0x287+2184-0xb0f
<operator>.subtraction 0x32d+3565-0x1119
<operator>.subtraction 0x4a3+5195-0x18ee
<operator>.addition 0x287+2184
<operator>.addition 0x32d+3565
<operator>.addition 0x4a3+5195
<operator>.addressOf &ReplacementFor_c
<operator>.addressOf &ReplacementFor_d
<operator>.addressOf &e
<operator>.addressOf &ReplacementFor_a
<operator>.indirectIndexAccess l[ReplacementFor_z]
<operator>.indirectIndexAccess l[\012ReplacementFor_y]
<operator>.addressOf &m[\012ReplacementFor_y]
<operator>.addressOf &\012ReplacementFor_n[ReplacementFor_y]
<operator>.indirectIndexAccess l[\012ReplacementFor_y]
<operator>.indirectIndexAccess ReplacementFor_a[ReplacementFor_y]
<operator>.indirectIndexAccess m[\012ReplacementFor_y]
<operator>.indirectIndexAccess ReplacementFor_n[ReplacementFor_y]
<operator>.indirectIndexAccess m[ReplacementFor_z][\012(0x14a+2615-0xb81)]
<operator>.indirectIndexAccess ReplacementFor_a[ReplacementFor_y]
<operator>.indirectIndexAccess ReplacementFor_n[ReplacementFor_z][(0xd9c+4477-0x1f19)]
<operator>.indirectIndexAccess ReplacementFor_a[\012ReplacementFor_y]
<operator>.indirectIndexAccess m[ReplacementFor_z]
<operator>.indirectIndexAccess ReplacementFor_n[ReplacementFor_z]
<operator>.indirectIndexAccess l[ReplacementFor_h]
<operator>.indirectIndexAccess l[ReplacementFor_h]
<operator>.indirectIndexAccess l[ReplacementFor_h]
<operator>.indirectIndexAccess ReplacementFor_a[\012ReplacementFor_y]
<operator>.indirectIndexAccess m[ReplacementFor_z][(0x1713+4040-0x26d9)]
<operator>.indirectIndexAccess m[\012ReplacementFor_z][(0x628+5881-0x1d20)]
<operator>.indirectIndexAccess ReplacementFor_a[ReplacementFor_y]
<operator>.indirectIndexAccess ReplacementFor_n[ReplacementFor_z][\012(0x366+6251-0x1bd0)]
<operator>.indirectIndexAccess ReplacementFor_a[ReplacementFor_y]
<operator>.indirectIndexAccess ReplacementFor_a[ReplacementFor_h]
<operator>.indirectIndexAccess m\012[ReplacementFor_z][(0x51c+6225-0x1d6c)]
<operator>.indirectIndexAccess m[ReplacementFor_z]
<operator>.indirectIndexAccess m[\012ReplacementFor_z]
<operator>.indirectIndexAccess ReplacementFor_n[ReplacementFor_z]
<operator>.indirectIndexAccess m\012[ReplacementFor_z]
<operator>.indirectIndexAccess ReplacementFor_a[ReplacementFor_g]
<operator>.indirectIndexAccess ReplacementFor_n[ReplacementFor_z][\012(0xb2d+2162-0x139e)]
<operator>.indirectIndexAccess l[ReplacementFor_g]
<operator>.indirectIndexAccess l[ReplacementFor_h]
<operator>.indirectIndexAccess l[ReplacementFor_h]
<operator>.indirectIndexAccess l[ReplacementFor_h]
<operator>.indirectIndexAccess ReplacementFor_a[ReplacementFor_y]
<operator>.indirectIndexAccess m[\012ReplacementFor_z][(0x13ed+4320-0x24cb)]
<operator>.indirectIndexAccess ReplacementFor_n[ReplacementFor_z]
<operator>.indirectIndexAccess ReplacementFor_a[ReplacementFor_h]
<operator>.indirectIndexAccess m\012[ReplacementFor_z][(0x2071+1047-0x2488)]
<operator>.indirectIndexAccess m[\012ReplacementFor_z]
<operator>.indirectIndexAccess l[ReplacementFor_h]
<operator>.indirectIndexAccess m\012[ReplacementFor_z]
<operator>.indirectIndexAccess ReplacementFor_a[ReplacementFor_g]
<operator>.indirectIndexAccess ReplacementFor_n[ReplacementFor_z][(0x1992+595-0x1be5)]
<operator>.indirectIndexAccess l[ReplacementFor_g]
<operator>.indirectIndexAccess ReplacementFor_n[ReplacementFor_z]
<operator>.indirectIndexAccess l[\012ReplacementFor_h]
>>>PDG&291 0->4 0->6 0->7 0->8 0->9 0->10 0->12 0->13 0->14 0->15 0->17 0->18 0->19 0->20 0->21 0->22 0->23 0->24 0->25 0->26 0->27 0->28 0->29 0->33 0->35 0->36 0->37 0->38 0->39 0->40 0->41 0->42 0->43 0->44 0->45 0->47 0->48 0->50 0->52 0->53 0->55 0->56 0->57 0->58 0->59 0->60 0->61 0->62 0->63 0->64 0->65 0->66 0->67 0->68 0->69 0->70 0->71 0->72 0->73 0->75 0->76 0->77 0->78 0->79 0->80 0->81 0->82 0->83 0->84 0->85 0->86 0->87 0->88 0->89 0->90 0->91 0->92 0->93 0->94 0->95 0->96 0->97 0->98 0->99 0->100 0->101 0->102 0->104 0->106 0->107 0->108 0->109 0->110 0->111 0->112 0->114 0->115 0->116 0->117 0->120 0->121 0->122 0->123 0->124 0->125 0->126 0->129 0->130 0->132 0->133 0->134 0->136 0->140 0->141 0->143 0->144 0->145 0->146 0->147 0->148 0->149 0->152 0->153 0->154 0->155 0->156 0->157 0->158 0->159 0->160 0->161 0->162 0->163 0->164 0->167 0->168 0->169 0->171 0->172 0->173 0->175 0->176 0->177 0->178 0->179 0->181 0->184 0->187 0->188 0->190 0->191 0->192 0->193 0->194 0->195 0->196 0->197 0->198 0->199 0->200 0->201 0->202 0->203 0->204 0->205 0->206 0->207 0->208 0->209 0->210 0->211 0->212 0->213 0->214 0->215 0->217 0->218 0->219 0->220 0->221 0->222 0->223 0->224 0->225 0->228 0->229 0->230 0->231 0->232 0->233 0->234 0->235 0->236 0->237 0->238 2->1 2->1 2->4 3->1 3->1 3->1 3->15 4->1 4->1 4->1 4->6 4->12 5->1 6->1 6->1 6->1 6->6 6->7 6->12 6->13 6->14 6->15 6->15 6->16 6->17 6->18 6->19 6->20 6->21 6->23 6->25 6->29 6->30 6->32 6->33 6->34 6->36 6->37 6->40 6->43 6->47 6->50 6->53 6->56 6->57 6->60 6->62 6->68 6->71 6->77 6->239 6->240 6->241 6->242 7->1 7->1 7->6 8->1 8->1 8->5 9->2 9->2 10->3 10->3 11->1 11->1 11->6 12->1 12->1 12->13 12->19 12->38 12->52 12->75 12->96 13->1 13->1 13->14 13->20 13->41 13->55 13->76 13->99 14->1 14->1 14->1 14->1 14->12 14->23 14->25 14->64 14->108 14->110 14->129 14->132 14->147 14->169 14->195 14->215 15->1 15->7 15->17 15->18 15->64 15->88 16->1 16->1 16->1 16->80 17->1 17->1 17->15 18->1 19->1 19->1 19->1 19->12 19->38 19->38 19->51 19->75 19->81 19->89 20->1 20->1 20->1 20->13 20->41 20->41 20->54 20->76 20->83 20->91 21->1 21->1 21->21 21->22 21->22 21->31 21->43 21->44 21->44 21->57 21->58 21->59 21->69 21->70 21->243 22->1 22->1 22->21 23->23 23->24 23->25 23->45 23->46 23->61 23->72 23->73 23->73 23->85 23->93 24->1 24->1 24->23 25->1 25->1 25->1 25->14 25->23 25->25 25->26 25->26 25->48 25->48 25->49 25->63 25->78 25->79 25->87 25->244 26->1 26->1 26->25 28->1 28->11 28->11 29->1 29->7 29->7 29->18 29->18 30->1 30->1 30->21 31->1 31->1 31->1 32->1 32->1 32->23 33->1 33->16 33->16 34->1 34->1 34->25 37->1 37->19 37->19 38->1 38->1 38->12 38->19 38->38 38->39 38->39 38->52 38->66 38->66 38->75 38->82 38->90 38->245 38->249 39->1 39->1 39->38 40->1 40->20 40->20 41->1 41->1 41->13 41->20 41->41 41->42 41->42 41->55 41->67 41->67 41->76 41->84 41->92 41->246 41->250 42->1 42->1 42->41 43->1 43->21 43->21 44->1 45->1 46->1 46->1 46->1 46->75 46->76 46->95 46->98 46->102 46->104 48->1 49->1 49->1 49->1 49->64 49->65 49->74 49->80 49->101 49->106 49->248 51->1 51->1 51->38 52->1 52->1 52->13 54->1 54->1 54->41 55->1 55->1 55->14 56->1 56->30 56->30 58->1 58->22 58->22 58->44 58->44 59->1 59->31 59->31 60->1 60->32 60->32 61->1 61->24 61->24 61->45 61->45 62->1 62->34 62->34 63->1 63->26 63->26 63->48 63->48 64->1 64->1 64->14 64->17 64->88 64->108 64->110 64->129 64->132 64->147 64->169 64->195 64->215 65->1 65->1 65->80 66->1 67->1 73->1 73->24 73->45 73->46 73->46 73->74 73->86 73->94 73->122 73->125 73->154 73->163 73->247 74->1 74->1 74->46 74->46 74->49 75->1 75->1 75->1 75->12 75->19 75->96 75->96 75->103 75->111 75->116 76->1 76->1 76->1 76->13 76->20 76->99 76->99 76->105 76->114 76->120 79->1 79->49 79->49 80->1 80->1 80->65 80->88 81->1 81->51 81->51 82->1 82->39 82->39 82->66 82->66 83->1 83->54 83->54 84->1 84->42 84->42 84->67 84->67 85->1 85->73 85->73 86->1 86->74 86->74 88->1 88->64 95->1 95->75 95->75 96->1 96->1 96->12 96->19 96->75 96->96 96->97 96->97 96->107 96->107 96->108 96->112 96->117 96->124 96->133 96->251 96->252 96->255 97->1 97->1 97->96 98->1 98->76 98->76 99->1 99->1 99->13 99->20 99->76 99->99 99->100 99->100 99->109 99->109 99->110 99->115 99->121 99->130 99->140 99->253 99->254 99->256 100->1 100->1 100->99 101->1 101->80 101->80 103->1 103->1 103->96 105->1 105->1 105->99 107->1 108->1 108->1 108->1 108->14 108->64 108->110 108->113 108->118 108->119 108->125 108->129 108->129 108->132 108->134 108->135 108->137 108->143 108->144 108->146 108->147 108->156 108->158 108->162 108->169 108->175 108->178 108->195 108->215 108->257 108->262 108->263 108->269 109->1 110->1 110->1 110->1 110->14 110->64 110->108 110->122 110->129 110->131 110->132 110->132 110->147 110->152 110->167 110->169 110->173 110->187 110->195 110->215 110->264 110->265 110->270 111->1 111->103 111->103 112->1 112->97 112->97 112->107 112->107 113->1 113->1 113->126 113->136 113->146 114->1 114->105 114->105 115->1 115->100 115->100 115->109 115->109 118->1 118->1 118->1 118->118 118->126 118->135 118->144 118->156 118->257 119->1 119->1 119->1 119->127 119->128 119->149 119->160 119->161 119->177 119->259 119->260 119->261 119->268 122->1 122->1 122->24 122->45 122->123 122->141 122->142 122->154 122->169 122->171 122->198 122->209 122->272 122->273 122->280 123->1 123->1 123->122 124->1 125->1 125->24 125->45 125->113 125->113 125->122 125->154 125->163 126->1 126->136 126->146 127->1 127->1 127->1 127->135 127->180 128->1 128->1 128->1 128->14 128->64 128->108 128->110 128->129 128->132 128->147 128->169 128->195 128->215 129->1 129->1 129->1 129->14 129->64 129->108 129->110 129->132 129->139 129->147 129->150 129->151 129->163 129->169 129->179 129->180 129->182 129->191 129->192 129->194 129->195 129->203 129->205 129->215 129->219 129->275 130->1 131->1 131->1 131->122 132->1 132->1 132->1 132->14 132->64 132->108 132->110 132->129 132->147 132->154 132->169 132->174 132->195 132->201 132->213 132->215 134->1 134->125 134->125 135->1 135->1 135->118 135->118 135->136 135->138 135->145 135->157 135->180 136->1 136->118 136->118 136->126 136->146 137->1 137->1 137->119 137->119 137->138 137->148 137->159 137->258 138->1 138->1 138->119 138->119 138->135 138->180 139->1 139->1 139->164 139->181 139->194 141->1 142->1 142->1 142->1 142->122 142->123 142->141 142->153 142->168 142->171 142->185 142->210 142->222 144->1 144->135 144->135 145->1 145->136 145->136 146->1 146->1 146->137 146->137 146->147 146->176 146->190 146->266 146->267 146->271 147->1 147->1 147->14 147->64 147->108 147->110 147->129 147->132 147->137 147->137 147->169 147->195 147->215 148->1 148->138 148->138 149->1 149->127 149->127 150->1 150->1 150->1 150->150 150->164 150->180 150->192 150->203 150->275 151->1 151->1 151->1 151->165 151->166 151->197 151->207 151->208 151->221 151->277 151->278 151->279 151->283 152->1 152->131 152->131 153->1 153->123 153->123 153->141 153->141 154->1 154->1 154->24 154->45 154->122 154->155 154->188 154->189 154->215 154->217 154->229 154->232 154->286 154->287 154->289 155->1 155->1 155->154 158->1 158->146 158->146 161->1 162->1 163->1 163->24 163->45 163->122 163->125 163->139 163->139 163->154 164->1 164->181 164->194 165->1 165->1 165->1 165->135 165->180 166->1 166->1 166->1 166->14 166->64 166->108 166->110 166->129 166->132 166->147 166->169 166->195 166->215 169->1 169->1 169->14 169->64 169->108 169->110 169->129 169->132 169->142 169->142 169->147 169->170 169->184 169->195 169->199 169->215 169->274 170->1 170->1 170->142 170->142 170->216 171->1 171->1 171->24 171->45 171->122 171->154 171->171 171->172 171->172 171->186 171->200 171->200 171->211 171->212 171->223 171->224 171->284 172->1 172->1 172->171 173->1 174->1 174->1 174->154 176->1 179->1 179->163 179->163 180->1 180->1 180->135 180->150 180->150 180->181 180->183 180->193 180->204 181->1 181->150 181->150 181->164 181->194 182->1 182->1 182->151 182->151 182->183 182->196 182->206 182->276 183->1 183->1 183->135 183->151 183->151 183->180 184->1 184->170 184->170 185->1 185->1 185->171 186->1 186->1 186->1 186->135 186->180 188->1 189->1 189->1 189->1 189->154 189->155 189->188 189->202 189->214 189->217 189->226 189->233 189->236 192->1 192->180 192->180 193->1 193->181 193->181 194->1 194->1 194->182 194->182 194->195 194->220 194->228 194->281 194->282 194->285 195->1 195->1 195->14 195->64 195->108 195->110 195->129 195->132 195->147 195->169 195->182 195->182 195->215 196->1 196->183 196->183 197->1 197->165 197->165 198->1 200->1 201->1 201->174 201->174 202->1 202->155 202->155 202->188 202->188 205->1 205->194 205->194 208->1 210->1 210->185 210->185 211->1 211->172 211->172 211->200 211->200 212->1 212->186 212->186 215->1 215->1 215->14 215->64 215->108 215->110 215->129 215->132 215->147 215->169 215->189 215->189 215->195 215->216 215->225 215->230 215->288 216->1 216->1 216->170 216->189 216->189 217->1 217->1 217->24 217->45 217->122 217->154 217->217 217->218 217->218 217->227 217->231 217->231 217->234 217->235 217->237 217->238 217->290 218->1 218->1 218->217 220->1 225->1 225->216 225->216 226->1 226->1 226->217 227->1 227->1 227->1 229->1 231->1 233->1 233->226 233->226 234->1 234->218 234->218 234->231 234->231 235->1 235->227 235->227
>>>Token main ( ) { FILE * ReplacementFor_fin = fopen ( " \x61 \x2e \x69 \x6e " , " \x72 " ) ; FILE * ReplacementFor_fout = fopen ( " \x61 \x2e \x6f \x75 \x74 " , " \x77 " ) ; long int ReplacementFor_b , ReplacementFor_d , e , ReplacementFor_f , ReplacementFor_c , ReplacementFor_g , ReplacementFor_h , ReplacementFor_x , ReplacementFor_y , ReplacementFor_z ; char ReplacementFor_a [ ( 0x9cc + 2781 - 0x1444 ) ] , m [ ( 0xc55 + 2112 - 0x1470 ) ] [ ( 0x150 + 9268 - 0x2580 ) ] , ReplacementFor_n [ ( 0x612 + 7847 - 0x249c ) ] [ ( 0x141d + 1507 - 0x19fc ) ] ; long int l [ ( 0x30d + 2455 - 0xc3f ) ] ; fscanf ( ReplacementFor_fin , " \x25 \x6c \x64 " , & ReplacementFor_b ) ; for ( ReplacementFor_x = ( 0x2c0 + 436 - 0x473 ) ; ReplacementFor_x <= ReplacementFor_b ; ReplacementFor_x = ReplacementFor_x + ( 0xca2 + 2475 - 0x164c ) ) { fscanf ( ReplacementFor_fin , " \x25 \x6c \x64 " , & ReplacementFor_c ) ; if ( ReplacementFor_c > ( 0x1da2 + 2047 - 0x25a1 ) ) { for ( ReplacementFor_y = ( 0x7c1 + 5280 - 0x1c61 ) ; ReplacementFor_y < ReplacementFor_c ; ReplacementFor_y = ReplacementFor_y + ( 0x181b + 504 - 0x1a12 ) ) { fscanf ( ReplacementFor_fin , " \x25 \x73 " , & m [ ReplacementFor_y ] ) ; } } fscanf ( ReplacementFor_fin , " \x25 \x6c \x64 " , & ReplacementFor_d ) ; if ( ReplacementFor_d > ( 0x7a4 + 5022 - 0x1b42 ) ) { for ( ReplacementFor_y = ( 0x876 + 6163 - 0x2089 ) ; ReplacementFor_y < ReplacementFor_d ; ReplacementFor_y = ReplacementFor_y + ( 0x8d0 + 2563 - 0x12d2 ) ) { fscanf ( ReplacementFor_fin , " \x25 \x73 " , & ReplacementFor_n [ ReplacementFor_y ] ) ; } } fscanf ( ReplacementFor_fin , " \x25 \x6c \x64 \x20 \x25 \x73 " , & e , & ReplacementFor_a ) ; for ( ReplacementFor_z = ( 0xa1f + 533 - 0xc34 ) ; ReplacementFor_z <= ( 0x63d + 7993 - 0x2512 ) ; ReplacementFor_z = ReplacementFor_z + ( 0x22fd + 4 - 0x2300 ) ) { l [ ReplacementFor_z ] = ( 0x1e3a + 1846 - 0x256f ) ; } for ( ReplacementFor_y = ( 0x1ad3 + 2756 - 0x2597 ) ; ReplacementFor_y < e ; ReplacementFor_y = ReplacementFor_y + ( 0x420 + 2971 - 0xfba ) ) { if ( ReplacementFor_y > ( 0x849 + 6727 - 0x2290 ) && l [ ReplacementFor_y ] == ( 0xb4c + 6917 - 0x2650 ) ) { if ( ReplacementFor_c > ( 0x1fe2 + 572 - 0x221e ) ) { for ( ReplacementFor_z = ( 0xf93 + 244 - 0x1087 ) ; ReplacementFor_z < ReplacementFor_c ; ReplacementFor_z = ReplacementFor_z + ( 0xc6b + 6545 - 0x25fb ) ) { if ( m [ ReplacementFor_z ] [ ( 0x14a + 2615 - 0xb81 ) ] == ReplacementFor_a [ ReplacementFor_y ] ) { ReplacementFor_h = ReplacementFor_y - ( 0x114a + 2215 - 0x19f0 ) ; while ( l [ ReplacementFor_h ] == ( 0x1bc6 + 1412 - 0x214a ) && ReplacementFor_h >= ( 0x128 + 5715 - 0x177b ) ) { ReplacementFor_h -- ; } if ( ReplacementFor_h >= ( 0xe2b + 2591 - 0x184a ) && ReplacementFor_a [ ReplacementFor_h ] == m [ ReplacementFor_z ] [ ( 0x51c + 6225 - 0x1d6c ) ] && l [ ReplacementFor_h ] == ( 0x736 + 4728 - 0x19ad ) ) { l [ ReplacementFor_h ] = ( 0x14d + 3603 - 0xf60 ) ; ReplacementFor_a [ ReplacementFor_y ] = m [ ReplacementFor_z ] [ ( 0x1713 + 4040 - 0x26d9 ) ] ; } } else if ( m [ ReplacementFor_z ] [ ( 0x628 + 5881 - 0x1d20 ) ] == ReplacementFor_a [ ReplacementFor_y ] ) { ReplacementFor_h = ReplacementFor_y - ( 0x1063 + 2165 - 0x18d7 ) ; while ( l [ ReplacementFor_h ] == ( 0x245a + 7 - 0x2461 ) && ReplacementFor_h >= ( 0xb26 + 5602 - 0x2108 ) ) { ReplacementFor_h -- ; } if ( ReplacementFor_h >= ( 0x191f + 1984 - 0x20df ) && ReplacementFor_a [ ReplacementFor_h ] == m [ ReplacementFor_z ] [ ( 0x2071 + 1047 - 0x2488 ) ] && l [ ReplacementFor_h ] == ( 0x2f6 + 487 - 0x4dc ) ) { l [ ReplacementFor_h ] = ( 0x11d5 + 1685 - 0x186a ) ; ReplacementFor_a [ ReplacementFor_y ] = m [ ReplacementFor_z ] [ ( 0x13ed + 4320 - 0x24cb ) ] ; } } } } if ( ReplacementFor_d > ( 0x1722 + 583 - 0x1969 ) ) { for ( ReplacementFor_z = ( 0x71d + 4792 - 0x19d5 ) ; ReplacementFor_z < ReplacementFor_d ; ReplacementFor_z = ReplacementFor_z + ( 0x1d4 + 1688 - 0x86b ) ) { if ( ReplacementFor_n [ ReplacementFor_z ] [ ( 0xd9c + 4477 - 0x1f19 ) ] == ReplacementFor_a [ ReplacementFor_y ] ) { for ( ReplacementFor_g = ( 0x178a + 626 - 0x19fc ) ; ReplacementFor_g < ReplacementFor_y ; ReplacementFor_g = ReplacementFor_g + ( 0xbdc + 5618 - 0x21cd ) ) { if ( ReplacementFor_a [ ReplacementFor_g ] == ReplacementFor_n [ ReplacementFor_z ] [ ( 0xb2d + 2162 - 0x139e ) ] && l [ ReplacementFor_g ] == ( 0x13e9 + 903 - 0x176f ) ) { for ( ReplacementFor_h = ( 0x173c + 3875 - 0x265f ) ; ReplacementFor_h <= ReplacementFor_y ; ReplacementFor_h = ReplacementFor_h + ( 0x7ad + 3236 - 0x1450 ) ) { l [ ReplacementFor_h ] = ( 0x643 + 3630 - 0x1471 ) ; } break ; } } } else if ( ReplacementFor_n [ ReplacementFor_z ] [ ( 0x366 + 6251 - 0x1bd0 ) ] == ReplacementFor_a [ ReplacementFor_y ] ) { for ( ReplacementFor_g = ( 0xa96 + 5978 - 0x21f0 ) ; ReplacementFor_g < ReplacementFor_y ; ReplacementFor_g = ReplacementFor_g + ( 0x16df + 373 - 0x1853 ) ) { if ( ReplacementFor_a [ ReplacementFor_g ] == ReplacementFor_n [ ReplacementFor_z ] [ ( 0x1992 + 595 - 0x1be5 ) ] && l [ ReplacementFor_g ] == ( 0x459 + 6766 - 0x1ec6 ) ) { for ( ReplacementFor_h = ( 0x287 + 2184 - 0xb0f ) ; ReplacementFor_h <= ReplacementFor_y ; ReplacementFor_h = ReplacementFor_h + ( 0x32d + 3565 - 0x1119 ) ) { l [ ReplacementFor_h ] = ( 0x4a3 + 5195 - 0x18ee ) ; } break ; } } } } } } } fprintf ( ReplacementFor_fout , " \x43 \x61 \x73 \x65 \x20 \x23 \x25 \x6c \x64 \x3a \x20 \x5b " , ReplacementFor_x ) ; ReplacementFor_z = ( 0x130f + 299 - 0x143a ) ; for ( ReplacementFor_y = ( 0x1b2 + 3898 - 0x10ec ) ; ReplacementFor_y < e ; ReplacementFor_y = ReplacementFor_y + ( 0x1c74 + 530 - 0x1e85 ) ) { if ( l [ ReplacementFor_y ] == ( 0xe40 + 906 - 0x11c9 ) ) { if ( ReplacementFor_z > ( 0xf47 + 2274 - 0x1829 ) ) { fprintf ( ReplacementFor_fout , " \x2c \x20 " ) ; } fprintf ( ReplacementFor_fout , " \x25 \x63 " , ReplacementFor_a [ ReplacementFor_y ] ) ; ReplacementFor_z ++ ; } } fprintf ( ReplacementFor_fout , " \x5d " " \n " ) ; } return ( 0x1df2 + 1930 - 0x257c ) ; }
>>>Func
METHOD ReplacementFor_CheckForPairs
METHOD_RETURN int
PARAM ReplacementFor_Node**ReplacementFor_pHead
PARAM ReplacementFor_Node**ReplacementFor_pTail
<operator>.assignment *ReplacementFor_pNav=*ReplacementFor_pHead
RETURN return-(0x8c3+1167-0xd51); return-(0x8c3+1167-0xd51);
<operator>.logicalOr NULL==ReplacementFor_pHead||\012NULL==ReplacementFor_pTail
<operator>.logicalOr NULL==*\012ReplacementFor_pHead||NULL==*ReplacementFor_pTail
<operator>.lessThan ReplacementFor_NodeCount<(0x206c+910-0x23f8)
<operator>.notEquals ReplacementFor_pNav->next!=(*ReplacementFor_pTail)
<operator>.assignment ReplacementFor_pNav=\012ReplacementFor_pNav->next
<operator>.lessThan i<ReplacementFor_iCntPairs
<operator>.preIncrement ++i
<operator>.minus -(0x8c3+1167-0xd51)
RETURN return-(0x4f0+8097-0x2490); return-(0x4f0+8097-0x2490);
RETURN return-(0x3c5+6231-0x1c1b); return-(0x3c5+6231-0x1c1b);
RETURN return-(0x11c0+3230-0x1e5d); return-(0x11c0+3230-0x1e5d);
<operator>.assignment i=(0x1da3+987-0x217e)
<operator>.equals NULL==ReplacementFor_pHead
<operator>.equals NULL==ReplacementFor_pTail
<operator>.minus -(0x4f0+8097-0x2490)
<operator>.equals NULL==*\012ReplacementFor_pHead
<operator>.equals NULL==*ReplacementFor_pTail
<operator>.minus -(0x3c5+6231-0x1c1b)
<operator>.subtraction 0x206c+910-0x23f8
<operator>.minus -(0x11c0+3230-0x1e5d)
<operator>.logicalOr (ReplacementFor_Pairs[i][(0x393+5757-0x1a10)]==ReplacementFor_pNav->data\012&&ReplacementFor_Pairs[i][(0x77f+7103-0x233d)]==(*ReplacementFor_pTail)->data)||\012(ReplacementFor_Pairs[i][(0x826+3232-0x14c5)]==ReplacementFor_pNav->data&&\012ReplacementFor_Pairs[i][(0x126f+182-0x1325)]==(*ReplacementFor_pTail)->data)
<operator>.subtraction 0x8c3+1167-0xd51
<operator>.addition 0x206c+910
<operator>.subtraction 0x1da3+987-0x217e
ReplacementFor_DeleteLastNode ReplacementFor_DeleteLastNode(ReplacementFor_pHead,ReplacementFor_pTail)
ReplacementFor_DeleteLastNode ReplacementFor_DeleteLastNode(ReplacementFor_pHead,ReplacementFor_pTail)
ReplacementFor_Append ReplacementFor_Append(ReplacementFor_pHead ReplacementFor_pTail \012ReplacementFor_Pairs[i][(0xdb8+2311-0x16bd)])
RETURN return(0x1ccb+2537-0x26b4); return(0x1ccb+2537-0x26b4);
<operator>.addition 0x8c3+1167
<operator>.subtraction 0x4f0+8097-0x2490
<operator>.subtraction 0x3c5+6231-0x1c1b
<operator>.subtraction 0x11c0+3230-0x1e5d
<operator>.addition 0x1da3+987
<operator>.logicalAnd ReplacementFor_Pairs[i][(0x393+5757-0x1a10)]==ReplacementFor_pNav->data\012&&ReplacementFor_Pairs[i][(0x77f+7103-0x233d)]==(*ReplacementFor_pTail)->data
<operator>.logicalAnd ReplacementFor_Pairs[i][(0x826+3232-0x14c5)]==ReplacementFor_pNav->data&&\012ReplacementFor_Pairs[i][(0x126f+182-0x1325)]==(*ReplacementFor_pTail)->data
<operator>.subtraction 0x1ccb+2537-0x26b4
<operator>.addition 0x4f0+8097
<operator>.addition 0x3c5+6231
<operator>.addition 0x11c0+3230
<operator>.equals ReplacementFor_Pairs[i][(0x393+5757-0x1a10)]==ReplacementFor_pNav->data
<operator>.equals ReplacementFor_Pairs[i][(0x77f+7103-0x233d)]==(*ReplacementFor_pTail)->data
<operator>.equals ReplacementFor_Pairs[i][(0x826+3232-0x14c5)]==ReplacementFor_pNav->data
<operator>.equals ReplacementFor_Pairs[i][(0x126f+182-0x1325)]==(*ReplacementFor_pTail)->data
<operator>.subtraction 0xdb8+2311-0x16bd
<operator>.addition 0x1ccb+2537
<operator>.subtraction 0x393+5757-0x1a10
<operator>.subtraction 0x77f+7103-0x233d
<operator>.subtraction 0x826+3232-0x14c5
<operator>.subtraction 0x126f+182-0x1325
<operator>.addition 0xdb8+2311
<operator>.addition 0x393+5757
<operator>.addition 0x77f+7103
<operator>.addition 0x826+3232
<operator>.addition 0x126f+182
<operator>.indirection *ReplacementFor_pHead
<operator>.indirectFieldAccess ReplacementFor_pNav->next
<operator>.indirection *ReplacementFor_pTail
<operator>.indirectFieldAccess ReplacementFor_pNav->next
<operator>.indirection *\012ReplacementFor_pHead
<operator>.indirection *ReplacementFor_pTail
FIELD_IDENTIFIER next next
FIELD_IDENTIFIER next next
<operator>.indirectIndexAccess ReplacementFor_Pairs[i][(0xdb8+2311-0x16bd)]
<operator>.indirectIndexAccess ReplacementFor_Pairs[i][(0x393+5757-0x1a10)]
<operator>.indirectFieldAccess ReplacementFor_pNav->data
<operator>.indirectIndexAccess ReplacementFor_Pairs[i][(0x77f+7103-0x233d)]
<operator>.indirectFieldAccess (*ReplacementFor_pTail)->data
<operator>.indirectIndexAccess ReplacementFor_Pairs[i][(0x826+3232-0x14c5)]
<operator>.indirectFieldAccess ReplacementFor_pNav->data
<operator>.indirectIndexAccess ReplacementFor_Pairs[i][(0x126f+182-0x1325)]
<operator>.indirectFieldAccess (*ReplacementFor_pTail)->data
<operator>.indirectIndexAccess ReplacementFor_Pairs[i]
<operator>.indirectIndexAccess ReplacementFor_Pairs[i]
FIELD_IDENTIFIER data data
<operator>.indirectIndexAccess ReplacementFor_Pairs[i]
<operator>.indirection *ReplacementFor_pTail
FIELD_IDENTIFIER data data
<operator>.indirectIndexAccess ReplacementFor_Pairs[i]
FIELD_IDENTIFIER data data
<operator>.indirectIndexAccess ReplacementFor_Pairs[i]
<operator>.indirection *ReplacementFor_pTail
FIELD_IDENTIFIER data data
>>>PDG&88 0->2 0->3 0->8 0->11 0->12 0->18 0->19 0->21 0->22 0->24 0->27 0->28 0->29 0->30 0->31 0->32 0->34 0->35 0->36 0->37 0->38 0->41 0->42 0->43 0->44 0->49 0->50 0->51 0->52 0->53 0->54 0->55 0->56 0->57 0->58 0->59 2->18 3->1 3->19 3->30 5->1 6->1 6->1 6->1 6->7 6->14 6->20 6->21 6->35 6->42 6->64 7->8 7->15 7->23 7->24 7->28 7->36 7->43 8->1 8->4 8->9 8->11 8->16 8->17 8->25 8->29 8->37 8->38 8->44 8->60 8->61 8->62 8->66 9->9 9->10 9->10 9->30 9->31 9->32 9->61 9->62 9->63 9->66 9->67 11->1 11->5 11->12 11->13 11->26 11->27 11->34 11->39 11->45 11->51 11->56 11->69 11->70 11->78 11->79 12->11 13->5 14->1 15->1 16->1 17->11 18->1 18->1 18->6 18->6 18->19 18->19 18->21 18->30 19->1 19->1 19->6 19->6 19->21 19->30 20->1 20->1 20->14 21->4 21->7 21->7 21->22 21->22 21->30 21->31 21->32 21->65 22->7 22->7 22->9 23->15 24->8 24->8 25->16 26->11 26->12 26->30 26->31 26->32 26->33 26->41 26->49 26->50 26->55 26->68 26->77 27->13 27->13 29->17 29->17 30->31 30->31 31->32 31->32 33->1 35->1 35->20 35->20 36->23 36->23 37->25 37->25 39->26 39->26 39->40 39->47 39->53 39->58 39->73 39->74 39->83 39->84 40->26 40->26 41->33 45->39 45->39 45->46 45->47 45->52 45->57 45->71 45->72 45->80 45->81 45->82 46->39 46->39 46->48 47->40 47->40 47->45 47->48 47->54 47->59 47->75 47->76 47->85 47->86 47->87 48->40 48->40 48->46
>>>Token int ReplacementFor_CheckForPairs ( ReplacementFor_Node * * ReplacementFor_pHead , ReplacementFor_Node * * ReplacementFor_pTail ) { int i ; if ( NULL == ReplacementFor_pHead || NULL == ReplacementFor_pTail ) return - ( 0x4f0 + 8097 - 0x2490 ) ; if ( NULL == * ReplacementFor_pHead || NULL == * ReplacementFor_pTail ) return - ( 0x3c5 + 6231 - 0x1c1b ) ; if ( ReplacementFor_NodeCount < ( 0x206c + 910 - 0x23f8 ) ) return - ( 0x11c0 + 3230 - 0x1e5d ) ; ReplacementFor_Node * ReplacementFor_pNav = * ReplacementFor_pHead ; while ( ReplacementFor_pNav -> next != ( * ReplacementFor_pTail ) ) ReplacementFor_pNav = ReplacementFor_pNav -> next ; for ( i = ( 0x1da3 + 987 - 0x217e ) ; i < ReplacementFor_iCntPairs ; ++ i ) { if ( ( ReplacementFor_Pairs [ i ] [ ( 0x393 + 5757 - 0x1a10 ) ] == ReplacementFor_pNav -> data && ReplacementFor_Pairs [ i ] [ ( 0x77f + 7103 - 0x233d ) ] == ( * ReplacementFor_pTail ) -> data ) || ( ReplacementFor_Pairs [ i ] [ ( 0x826 + 3232 - 0x14c5 ) ] == ReplacementFor_pNav -> data && ReplacementFor_Pairs [ i ] [ ( 0x126f + 182 - 0x1325 ) ] == ( * ReplacementFor_pTail ) -> data ) ) { ReplacementFor_DeleteLastNode ( ReplacementFor_pHead , ReplacementFor_pTail ) ; ReplacementFor_DeleteLastNode ( ReplacementFor_pHead , ReplacementFor_pTail ) ; ReplacementFor_Append ( ReplacementFor_pHead , ReplacementFor_pTail , ReplacementFor_Pairs [ i ] [ ( 0xdb8 + 2311 - 0x16bd ) ] ) ; return ( 0x1ccb + 2537 - 0x26b4 ) ; } } return - ( 0x8c3 + 1167 - 0xd51 ) ; }
>>>Func
METHOD ReplacementFor_seek_equiv
METHOD_RETURN char
PARAM char ReplacementFor_A
PARAM char ReplacementFor_B
PARAM int \012ReplacementFor_eqc
RETURN return(0xba7+2461-0x1544); return(0xba7+2461-0x1544);
<operator>.lessThan i<ReplacementFor_eqc
<operator>.postIncrement i++
<operator>.subtraction 0xba7+2461-0x1544
<operator>.assignment i=(0x1c46+1228-0x2112)
<operator>.logicalOr (ReplacementFor_A==ReplacementFor_equiv[i][(0x1409+3483-0x21a4)]&&\012ReplacementFor_B==ReplacementFor_equiv[i][(0x302+6001-0x1a72)])||(\012ReplacementFor_A==ReplacementFor_equiv[i][(0xb58+2152-0x13bf)]&&ReplacementFor_B\012==ReplacementFor_equiv[i][(0x604+2126-0xe52)])
<operator>.addition 0xba7+2461
<operator>.subtraction 0x1c46+1228-0x2112
RETURN return ReplacementFor_equiv[i][\012(0x91a+4080-0x1908)]; return ReplacementFor_equiv[i][\012(0x91a+4080-0x1908)];
<operator>.addition 0x1c46+1228
<operator>.logicalAnd ReplacementFor_A==ReplacementFor_equiv[i][(0x1409+3483-0x21a4)]&&\012ReplacementFor_B==ReplacementFor_equiv[i][(0x302+6001-0x1a72)]
<operator>.logicalAnd ReplacementFor_A==ReplacementFor_equiv[i][(0xb58+2152-0x13bf)]&&ReplacementFor_B\012==ReplacementFor_equiv[i][(0x604+2126-0xe52)]
<operator>.equals ReplacementFor_A==ReplacementFor_equiv[i][(0x1409+3483-0x21a4)]
<operator>.equals ReplacementFor_B==ReplacementFor_equiv[i][(0x302+6001-0x1a72)]
<operator>.equals ReplacementFor_A==ReplacementFor_equiv[i][(0xb58+2152-0x13bf)]
<operator>.equals ReplacementFor_B\012==ReplacementFor_equiv[i][(0x604+2126-0xe52)]
<operator>.subtraction 0x91a+4080-0x1908
<operator>.subtraction 0x1409+3483-0x21a4
<operator>.subtraction 0x302+6001-0x1a72
<operator>.subtraction 0xb58+2152-0x13bf
<operator>.subtraction 0x604+2126-0xe52
<operator>.addition 0x91a+4080
<operator>.addition 0x1409+3483
<operator>.addition 0x302+6001
<operator>.addition 0xb58+2152
<operator>.addition 0x604+2126
<operator>.indirectIndexAccess ReplacementFor_equiv[i][\012(0x91a+4080-0x1908)]
<operator>.indirectIndexAccess ReplacementFor_equiv[i][(0x1409+3483-0x21a4)]
<operator>.indirectIndexAccess ReplacementFor_equiv[i][(0x302+6001-0x1a72)]
<operator>.indirectIndexAccess ReplacementFor_equiv[i][(0xb58+2152-0x13bf)]
<operator>.indirectIndexAccess ReplacementFor_equiv[i][(0x604+2126-0xe52)]
<operator>.indirectIndexAccess ReplacementFor_equiv[i]
<operator>.indirectIndexAccess ReplacementFor_equiv[i]
<operator>.indirectIndexAccess ReplacementFor_equiv[i]
<operator>.indirectIndexAccess ReplacementFor_equiv[i]
<operator>.indirectIndexAccess ReplacementFor_equiv[i]
>>>PDG&41 0->2 0->3 0->4 0->6 0->7 0->8 0->11 0->12 0->13 0->14 0->17 0->18 0->19 0->20 0->21 0->22 0->23 0->24 0->25 0->26 0->27 0->28 0->29 0->30 2->17 3->1 3->18 3->20 4->6 5->1 6->1 6->1 6->1 6->5 6->7 6->8 6->10 6->11 6->15 6->17 6->22 6->27 6->32 6->37 7->1 7->6 8->5 9->1 9->1 9->6 10->1 10->1 10->1 10->6 10->7 10->13 10->21 10->26 10->31 10->36 12->1 12->9 12->9 13->1 15->1 15->1 15->10 15->10 15->16 15->19 15->24 15->29 15->34 15->39 16->1 16->1 16->10 16->10 17->1 17->1 17->15 17->15 17->18 17->19 17->23 17->28 17->33 17->38 18->1 18->1 18->15 18->15 18->20 19->1 19->1 19->16 19->16 19->17 19->20 19->25 19->30 19->35 19->40 20->1 20->1 20->16 20->16 20->18 21->1 22->1 23->1 24->1 25->1
>>>Token char ReplacementFor_seek_equiv ( char ReplacementFor_A , char ReplacementFor_B , int ReplacementFor_eqc ) { int i ; for ( i = ( 0x1c46 + 1228 - 0x2112 ) ; i < ReplacementFor_eqc ; i ++ ) { if ( ( ReplacementFor_A == ReplacementFor_equiv [ i ] [ ( 0x1409 + 3483 - 0x21a4 ) ] && ReplacementFor_B == ReplacementFor_equiv [ i ] [ ( 0x302 + 6001 - 0x1a72 ) ] ) || ( ReplacementFor_A == ReplacementFor_equiv [ i ] [ ( 0xb58 + 2152 - 0x13bf ) ] && ReplacementFor_B == ReplacementFor_equiv [ i ] [ ( 0x604 + 2126 - 0xe52 ) ] ) ) return ReplacementFor_equiv [ i ] [ ( 0x91a + 4080 - 0x1908 ) ] ; } return ( 0xba7 + 2461 - 0x1544 ) ; }
>>>Func
METHOD ReplacementFor_errno_unsupported
METHOD_RETURN bool
PARAM int ReplacementFor_err
RETURN return \012ReplacementFor_err==ReplacementFor_ENOTSUP||ReplacementFor_err==\012ReplacementFor_ENODATA; return \012ReplacementFor_err==ReplacementFor_ENOTSUP||ReplacementFor_err==\012ReplacementFor_ENODATA;
<operator>.logicalOr ReplacementFor_err==ReplacementFor_ENOTSUP||ReplacementFor_err==\012ReplacementFor_ENODATA
<operator>.equals ReplacementFor_err==ReplacementFor_ENOTSUP
<operator>.equals ReplacementFor_err==\012ReplacementFor_ENODATA
>>>PDG&7 0->2 0->5 0->6 2->5 3->1 4->1 4->1 4->1 4->3 5->1 5->1 5->4 5->4 5->6 5->6 6->1 6->1 6->4 6->4
>>>Token static bool ReplacementFor_errno_unsupported ( int ReplacementFor_err ) { return ReplacementFor_err == ReplacementFor_ENOTSUP || ReplacementFor_err == ReplacementFor_ENODATA ; }
>>>Func
METHOD ReplacementFor_gcd
METHOD_RETURN int
PARAM int ReplacementFor_a
PARAM int ReplacementFor_b
RETURN return \012ReplacementFor_b?ReplacementFor_gcd(ReplacementFor_b,ReplacementFor_a%\012ReplacementFor_b):ReplacementFor_a; return \012ReplacementFor_b?ReplacementFor_gcd(ReplacementFor_b,ReplacementFor_a%\012ReplacementFor_b):ReplacementFor_a;
<operator>.conditional ReplacementFor_b?ReplacementFor_gcd(ReplacementFor_b,ReplacementFor_a%\012ReplacementFor_b):ReplacementFor_a
ReplacementFor_gcd ReplacementFor_gcd(ReplacementFor_b,ReplacementFor_a%\012ReplacementFor_b)
<operator>.modulo ReplacementFor_a%\012ReplacementFor_b
>>>PDG&8 0->2 0->3 0->5 0->6 0->7 2->5 2->7 3->7 4->1 5->1 5->1 5->1 5->1 5->4 6->1 6->5 6->5 7->5 7->6 7->6
>>>Token int ReplacementFor_gcd ( int ReplacementFor_a , int ReplacementFor_b ) { return ReplacementFor_b ? ReplacementFor_gcd ( ReplacementFor_b , ReplacementFor_a % ReplacementFor_b ) : ReplacementFor_a ; }
>>>Func
METHOD ReplacementFor_ccw
METHOD_RETURN int
PARAM double ReplacementFor_x0
PARAM double y0
PARAM double \012ReplacementFor_x1
PARAM double y1
PARAM double ReplacementFor_x2
PARAM double ReplacementFor_y2
<operator>.assignment t=ReplacementFor_cross(ReplacementFor_x0,y0,ReplacementFor_x1,y1,\012ReplacementFor_x2,ReplacementFor_y2)
RETURN return(fabs(t)<=ReplacementFor_EPS?\012(0x592+819-0x8c5):(t<(0x5ca+6680-0x1fe2)?-(0x166f+3390-0x23ac):\012(0x3ff+2142-0xc5c))); return(fabs(t)<=ReplacementFor_EPS?\012(0x592+819-0x8c5):(t<(0x5ca+6680-0x1fe2)?-(0x166f+3390-0x23ac):\012(0x3ff+2142-0xc5c)));
<operator>.conditional fabs(t)<=ReplacementFor_EPS?\012(0x592+819-0x8c5):(t<(0x5ca+6680-0x1fe2)?-(0x166f+3390-0x23ac):\012(0x3ff+2142-0xc5c))
ReplacementFor_cross ReplacementFor_cross(ReplacementFor_x0,y0,ReplacementFor_x1,y1,\012ReplacementFor_x2,ReplacementFor_y2)
<operator>.lessEqualsThan fabs(t)<=ReplacementFor_EPS
<operator>.subtraction 0x592+819-0x8c5
<operator>.conditional t<(0x5ca+6680-0x1fe2)?-(0x166f+3390-0x23ac):\012(0x3ff+2142-0xc5c)
fabs fabs(t)
<operator>.addition 0x592+819
<operator>.lessThan t<(0x5ca+6680-0x1fe2)
<operator>.minus -(0x166f+3390-0x23ac)
<operator>.subtraction 0x3ff+2142-0xc5c
<operator>.subtraction 0x5ca+6680-0x1fe2
<operator>.subtraction 0x166f+3390-0x23ac
<operator>.addition 0x3ff+2142
<operator>.addition 0x5ca+6680
<operator>.addition 0x166f+3390
>>>PDG&25 0->2 0->3 0->4 0->5 0->6 0->7 0->11 0->12 0->13 0->15 0->16 0->17 0->19 0->20 0->21 0->22 0->23 0->24 2->11 3->11 4->11 5->11 6->11 7->11 8->1 8->1 8->12 8->15 8->17 9->1 10->1 10->1 10->1 10->1 10->9 11->1 11->1 11->1 11->1 11->1 11->1 11->8 11->8 11->8 11->8 11->8 11->8 12->1 12->1 12->13 12->14 12->16 12->17 12->20 12->23 13->1 13->10 13->10 14->1 14->1 14->1 15->1 17->1 17->1 17->18 17->19 17->21 17->22 17->24 18->1 18->10 18->14 19->1 19->10 19->10 19->14 19->14 20->1 20->17 20->17 21->1 21->18 21->18
>>>Token int ReplacementFor_ccw ( double ReplacementFor_x0 , double y0 , double ReplacementFor_x1 , double y1 , double ReplacementFor_x2 , double ReplacementFor_y2 ) { double t = ReplacementFor_cross ( ReplacementFor_x0 , y0 , ReplacementFor_x1 , y1 , ReplacementFor_x2 , ReplacementFor_y2 ) ; return ( fabs ( t ) <= ReplacementFor_EPS ? ( 0x592 + 819 - 0x8c5 ) : ( t < ( 0x5ca + 6680 - 0x1fe2 ) ? - ( 0x166f + 3390 - 0x23ac ) : ( 0x3ff + 2142 - 0xc5c ) ) ) ; }
>>>Func
METHOD main
METHOD_RETURN int
PARAM void
<operator>.assignment ReplacementFor_warn=(0x55+8858-0x22ef)
<operator>.assignment t=\012(0x1d9+5006-0x1567)
<operator>.assignment ReplacementFor_warn=scanf("\x25\x64" "\n",&t)
RETURN return((0x811+7510-0x2567)); return((0x811+7510-0x2567));
<operator>.lessThan i<t
<operator>.postIncrement i++
<operator>.subtraction 0x811+7510-0x2567
<operator>.subtraction 0x55+8858-0x22ef
<operator>.subtraction 0x1d9+5006-0x1567
scanf scanf("\x25\x64" "\n",&t)
<operator>.assignment i=\012(0x1439+957-0x17f6)
<operator>.assignment ReplacementFor_n=(0xea1+1163-0x132c)
<operator>.assignment ReplacementFor_warn=scanf("\x25\x64" "\n",&ReplacementFor_n)
printf printf(\012"\x43\x61\x73\x65\x20\x23\x25\x64\x3a" "\n" i+(0x15f6+2076-0x1e11))
ReplacementFor_solve ReplacementFor_solve(ReplacementFor_n)
<operator>.addition 0x55+8858
<operator>.addition 0x1d9+5006
<operator>.lessThan ReplacementFor_j<ReplacementFor_n
<operator>.postIncrement ReplacementFor_j++
<operator>.addition 0x811+7510
<operator>.subtraction 0x1439+957-0x17f6
<operator>.subtraction 0xea1+1163-0x132c
scanf scanf("\x25\x64" "\n",&ReplacementFor_n)
<operator>.assignment ReplacementFor_j=(0x113d+3196-0x1db9)
<operator>.assignment ReplacementFor_win[ReplacementFor_j]=ReplacementFor_play[\012ReplacementFor_j]=(0x1d09+2512-0x26d9)
<operator>.assignment ReplacementFor_warn=getchar()
<operator>.addition i+(0x15f6+2076-0x1e11)
<operator>.addition 0x1439+957
<operator>.addition 0xea1+1163
<operator>.lessThan ReplacementFor_k<ReplacementFor_n
<operator>.postIncrement ReplacementFor_k++
<operator>.subtraction 0x15f6+2076-0x1e11
<operator>.subtraction 0x113d+3196-0x1db9
<operator>.assignment ReplacementFor_play[\012ReplacementFor_j]=(0x1d09+2512-0x26d9)
<operator>.assignment ReplacementFor_k=\012(0xb7+3985-0x1048)
<operator>.assignment ReplacementFor_c=getchar()
<operator>.addition 0x15f6+2076
<operator>.addition 0x113d+3196
<operator>.subtraction 0x1d09+2512-0x26d9
<operator>.equals ReplacementFor_c==((char)(0x221+8757-0x2425))
<operator>.addition 0x1d09+2512
<operator>.subtraction 0xb7+3985-0x1048
<operator>.expressionList ReplacementFor_team[ReplacementFor_j][ReplacementFor_k]=(0x148+7858-0x1ff9) \012ReplacementFor_win[ReplacementFor_j]++ ReplacementFor_play[ReplacementFor_j]++
<operator>.addition 0xb7+3985
<operator>.cast (char)(0x221+8757-0x2425)
<operator>.subtraction 0x221+8757-0x2425
<operator>.assignment ReplacementFor_team[ReplacementFor_j][ReplacementFor_k]=(0x148+7858-0x1ff9)
<operator>.postIncrement ReplacementFor_win[ReplacementFor_j]++
<operator>.postIncrement ReplacementFor_play[ReplacementFor_j]++
<operator>.equals ReplacementFor_c==((char)(0x409+1353-0x922))
<operator>.addition 0x221+8757
<operator>.subtraction 0x148+7858-0x1ff9
<operator>.expressionList ReplacementFor_team[\012ReplacementFor_j][ReplacementFor_k]=(0xe27+5816-0x24df) ReplacementFor_play[\012ReplacementFor_j]++
<operator>.addition 0x148+7858
<operator>.cast (char)(0x409+1353-0x922)
<operator>.assignment ReplacementFor_team[ReplacementFor_j][ReplacementFor_k]\012=-(0x16f6+2762-0x21bf)
<operator>.subtraction 0x409+1353-0x922
<operator>.assignment ReplacementFor_team[\012ReplacementFor_j][ReplacementFor_k]=(0xe27+5816-0x24df)
<operator>.postIncrement ReplacementFor_play[\012ReplacementFor_j]++
<operator>.addition 0x409+1353
<operator>.subtraction 0xe27+5816-0x24df
<operator>.minus -(0x16f6+2762-0x21bf)
<operator>.addition 0xe27+5816
<operator>.subtraction 0x16f6+2762-0x21bf
<operator>.addition 0x16f6+2762
<operator>.addressOf &ReplacementFor_n
<operator>.indirectIndexAccess ReplacementFor_win[ReplacementFor_j]
getchar getchar()
<operator>.indirectIndexAccess ReplacementFor_play[\012ReplacementFor_j]
getchar getchar()
UNKNOWN char char
<operator>.indirectIndexAccess ReplacementFor_team[ReplacementFor_j][ReplacementFor_k]
<operator>.indirectIndexAccess ReplacementFor_win[ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_play[ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_team[ReplacementFor_j]
UNKNOWN char char
<operator>.indirectIndexAccess ReplacementFor_team[\012ReplacementFor_j][ReplacementFor_k]
<operator>.indirectIndexAccess ReplacementFor_play[\012ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_team[ReplacementFor_j][ReplacementFor_k]
<operator>.indirectIndexAccess ReplacementFor_team[\012ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_team[ReplacementFor_j]
>>>PDG&84 0->2 0->7 0->8 0->9 0->10 0->11 0->12 0->16 0->17 0->18 0->19 0->20 0->21 0->22 0->23 0->24 0->25 0->28 0->29 0->30 0->31 0->32 0->33 0->34 0->35 0->38 0->39 0->40 0->41 0->42 0->43 0->44 0->46 0->48 0->52 0->53 0->54 0->56 0->59 0->62 0->63 0->65 0->66 0->67 2->1 3->1 3->1 4->1 4->1 4->7 4->12 5->1 5->1 6->1 7->1 7->1 7->1 7->7 7->8 7->8 7->14 7->15 7->16 7->16 7->17 7->20 7->24 7->25 7->26 7->29 7->29 7->31 7->34 7->35 7->39 7->40 7->68 8->1 8->7 9->1 9->1 9->6 10->1 10->3 10->3 11->1 11->4 11->4 12->1 12->5 12->7 13->1 13->1 13->7 14->1 14->1 14->20 14->25 15->1 15->1 16->1 16->1 17->1 17->1 20->1 20->1 20->17 20->20 20->21 20->21 20->27 20->28 20->32 20->32 20->36 20->37 20->41 20->43 20->44 20->46 20->69 20->70 20->71 21->1 21->20 23->1 23->13 23->13 24->1 24->14 24->14 25->1 25->15 25->17 25->20 25->32 26->1 26->1 26->20 27->1 27->1 27->1 27->50 28->1 28->1 28->1 29->1 32->1 32->1 32->20 32->32 32->33 32->33 32->38 32->42 32->47 32->48 32->53 32->72 32->73 33->1 33->32 34->1 34->16 34->16 34->29 34->29 35->1 35->26 35->26 36->1 36->1 36->27 36->61 37->1 37->1 37->32 38->1 38->42 41->1 41->27 41->27 41->36 41->36 42->1 42->1 42->1 42->45 42->49 42->50 42->51 42->52 42->52 42->54 42->56 42->57 42->59 42->62 42->74 42->75 42->76 42->77 42->78 44->1 44->37 44->37 45->1 45->1 45->1 45->1 47->1 48->1 48->42 48->42 48->47 48->47 49->1 49->1 49->45 50->1 50->45 51->1 51->45 52->1 52->1 52->1 52->55 52->58 52->60 52->61 52->63 52->64 52->65 52->66 52->67 52->79 52->80 52->81 52->82 52->83 54->1 54->45 54->45 54->49 54->49 55->1 55->1 55->1 57->1 58->1 58->1 58->1 59->1 59->52 59->52 59->57 59->57 60->1 60->1 60->55 61->1 61->55 63->1 63->55 63->55 63->60 63->60 64->1 64->58 66->1 66->64 66->64
>>>Token int main ( void ) { int ReplacementFor_warn = ( 0x55 + 8858 - 0x22ef ) ; int t = ( 0x1d9 + 5006 - 0x1567 ) ; ReplacementFor_warn = scanf ( " \x25 \x64 " " \n " , & t ) ; for ( int i = ( 0x1439 + 957 - 0x17f6 ) ; i < t ; i ++ ) { int ReplacementFor_n = ( 0xea1 + 1163 - 0x132c ) ; ReplacementFor_warn = scanf ( " \x25 \x64 " " \n " , & ReplacementFor_n ) ; for ( int ReplacementFor_j = ( 0x113d + 3196 - 0x1db9 ) ; ReplacementFor_j < ReplacementFor_n ; ReplacementFor_j ++ ) { ReplacementFor_win [ ReplacementFor_j ] = ReplacementFor_play [ ReplacementFor_j ] = ( 0x1d09 + 2512 - 0x26d9 ) ; for ( int ReplacementFor_k = ( 0xb7 + 3985 - 0x1048 ) ; ReplacementFor_k < ReplacementFor_n ; ReplacementFor_k ++ ) { int ReplacementFor_c = getchar ( ) ; if ( ReplacementFor_c == ( ( char ) ( 0x221 + 8757 - 0x2425 ) ) ) ReplacementFor_team [ ReplacementFor_j ] [ ReplacementFor_k ] = ( 0x148 + 7858 - 0x1ff9 ) , ReplacementFor_win [ ReplacementFor_j ] ++ , ReplacementFor_play [ ReplacementFor_j ] ++ ; else if ( ReplacementFor_c == ( ( char ) ( 0x409 + 1353 - 0x922 ) ) ) ReplacementFor_team [ ReplacementFor_j ] [ ReplacementFor_k ] = ( 0xe27 + 5816 - 0x24df ) , ReplacementFor_play [ ReplacementFor_j ] ++ ; else ReplacementFor_team [ ReplacementFor_j ] [ ReplacementFor_k ] = - ( 0x16f6 + 2762 - 0x21bf ) ; } ReplacementFor_warn = getchar ( ) ; } printf ( " \x43 \x61 \x73 \x65 \x20 \x23 \x25 \x64 \x3a " " \n " , i + ( 0x15f6 + 2076 - 0x1e11 ) ) ; ReplacementFor_solve ( ReplacementFor_n ) ; } return ( ( 0x811 + 7510 - 0x2567 ) ) ; }
>>>Func
METHOD main
METHOD_RETURN int
PARAM void
scanf scanf("\x25\x64",&\012ReplacementFor_n)
RETURN return(0x997+6282-0x2221); return(0x997+6282-0x2221);
<operator>.lessThan i<ReplacementFor_n
<operator>.postIncrement i++
<operator>.subtraction 0x997+6282-0x2221
<operator>.assignment i=(0xfe8+2456-0x1980)
<operator>.assignment ReplacementFor_result=ReplacementFor_solve()
IDENTIFIER ReplacementFor_result if (ReplacementFor_result)
<operator>.addition 0x997+6282
<operator>.subtraction 0xfe8+2456-0x1980
printf printf(\012"\x43\x61\x73\x65\x20\x23\x25\x64\x3a\x20\x50\x6f\x73\x73\x69\x62\x6c\x65" "\n" \012i+(0xaed+3573-0x18e1))
<operator>.addition 0xfe8+2456
printf printf(\012"\x43\x61\x73\x65\x20\x23\x25\x64\x3a\x20\x42\x72\x6f\x6b\x65\x6e" "\n" i+\012(0x15b8+2755-0x207a))
<operator>.addition i+(0xaed+3573-0x18e1)
<operator>.subtraction 0xaed+3573-0x18e1
<operator>.addition i+\012(0x15b8+2755-0x207a)
<operator>.addition 0xaed+3573
<operator>.subtraction 0x15b8+2755-0x207a
<operator>.addition 0x15b8+2755
ReplacementFor_solve ReplacementFor_solve()
>>>PDG&23 0->2 0->3 0->5 0->6 0->7 0->9 0->10 0->11 0->12 0->13 0->14 0->15 0->16 0->17 0->18 0->19 0->20 0->21 2->1 3->1 3->5 4->1 5->1 5->1 5->1 5->5 5->6 5->6 5->9 5->13 5->13 5->15 5->15 5->16 5->16 5->17 5->18 5->18 5->19 5->20 5->21 5->22 6->1 6->5 7->1 7->1 7->4 8->1 8->1 8->5 9->1 9->1 9->1 12->1 12->8 12->8 13->1 13->1 15->1 15->1 16->1 17->1 17->13 17->13 17->16 17->16 18->1 20->1 20->15 20->15 20->18 20->18
>>>Token int main ( void ) { int i , ReplacementFor_n , ReplacementFor_result ; scanf ( " \x25 \x64 " , & ReplacementFor_n ) ; for ( i = ( 0xfe8 + 2456 - 0x1980 ) ; i < ReplacementFor_n ; i ++ ) { ReplacementFor_result = ReplacementFor_solve ( ) ; if ( ReplacementFor_result ) printf ( " \x43 \x61 \x73 \x65 \x20 \x23 \x25 \x64 \x3a \x20 \x50 \x6f \x73 \x73 \x69 \x62 \x6c \x65 " " \n " , i + ( 0xaed + 3573 - 0x18e1 ) ) ; else printf ( " \x43 \x61 \x73 \x65 \x20 \x23 \x25 \x64 \x3a \x20 \x42 \x72 \x6f \x6b \x65 \x6e " " \n " , i + ( 0x15b8 + 2755 - 0x207a ) ) ; } return ( 0x997 + 6282 - 0x2221 ) ; }
>>>Func
METHOD ReplacementFor_iscom
METHOD_RETURN char
PARAM char ReplacementFor_a
PARAM char ReplacementFor_b
<operator>.assignmentMinus ReplacementFor_a-=((char)(0x270+7279-0x1e9e))
<operator>.assignmentMinus ReplacementFor_b-=\012((char)(0xec+5929-0x17d4))
RETURN return ReplacementFor_com[ReplacementFor_a][\012ReplacementFor_b]; return ReplacementFor_com[ReplacementFor_a][\012ReplacementFor_b];
<operator>.cast (char)(0x270+7279-0x1e9e)
<operator>.cast (char)(0xec+5929-0x17d4)
<operator>.subtraction 0x270+7279-0x1e9e
<operator>.subtraction 0xec+5929-0x17d4
<operator>.addition 0x270+7279
<operator>.addition 0xec+5929
>>>PDG&13 0->2 0->3 0->4 0->5 0->6 0->9 0->10 0->11 0->12 2->4 3->5 4->1 4->1 4->1 5->1 5->1 5->1 6->1 7->1 8->1 9->1 9->4 9->4 9->7 9->7 10->1 10->5 10->5 10->8 10->8
>>>Token char ReplacementFor_iscom ( char ReplacementFor_a , char ReplacementFor_b ) { ReplacementFor_a -= ( ( char ) ( 0x270 + 7279 - 0x1e9e ) ) ; ReplacementFor_b -= ( ( char ) ( 0xec + 5929 - 0x17d4 ) ) ; return ReplacementFor_com [ ReplacementFor_a ] [ ReplacementFor_b ] ; }
>>>Func
METHOD main
METHOD_RETURN int
PARAM int ReplacementFor_argc
PARAM char**ReplacementFor_argv
ReplacementFor_test_c_atoi ReplacementFor_test_c_atoi()
printf printf(\012"\x77\x72\x6f\x6e\x67\x20\x6e\x75\x6d\x62\x65\x72\x20\x6f\x66\x20\x70\x61\x72\x6d\x65\x74\x65\x72\x73" "\n"\012)
RETURN return((0xa56+6485-0x23aa)); return((0xa56+6485-0x23aa));
<operator>.equals ReplacementFor_argc==(0x6f0+6005-0x1e63)
<operator>.subtraction 0xa56+6485-0x23aa
printf printf\012(\012"\x59\x6f\x75\x72\x20\x6e\x75\x6d\x62\x65\x72\x20\x2b\x20\x35\x20\x69\x73\x20\x25\x64" "\n"\012 ReplacementFor_c_atoi(ReplacementFor_argv[(0x731+3075-0x1333)])+\012(0x1502+832-0x183d))
RETURN return((0x35f+673-0x600)); return((0x35f+673-0x600));
<operator>.subtraction 0x6f0+6005-0x1e63
<operator>.subtraction 0x35f+673-0x600
<operator>.addition 0xa56+6485
<operator>.addition 0x6f0+6005
<operator>.addition ReplacementFor_c_atoi(ReplacementFor_argv[(0x731+3075-0x1333)])+\012(0x1502+832-0x183d)
ReplacementFor_c_atoi ReplacementFor_c_atoi(ReplacementFor_argv[(0x731+3075-0x1333)])
<operator>.subtraction 0x1502+832-0x183d
<operator>.addition 0x35f+673
<operator>.addition 0x1502+832
<operator>.subtraction 0x731+3075-0x1333
<operator>.addition 0x731+3075
<operator>.indirectIndexAccess ReplacementFor_argv[(0x731+3075-0x1333)]
>>>PDG&23 0->2 0->3 0->4 0->5 0->7 0->8 0->9 0->11 0->12 0->13 0->14 0->17 0->18 0->19 0->20 0->21 2->7 3->1 3->16 4->1 6->1 7->1 7->1 7->1 7->5 7->6 7->8 7->9 7->10 7->12 7->13 7->15 7->16 7->17 7->18 7->19 7->20 7->21 7->22 8->6 9->1 9->1 10->1 11->1 11->7 11->7 12->1 12->1 12->10 15->1 15->1 16->1 16->9 16->15 17->1 17->9 17->9 17->15 17->15 20->1
>>>Token int main ( int ReplacementFor_argc , char * * ReplacementFor_argv ) { ReplacementFor_test_c_atoi ( ) ; if ( ReplacementFor_argc == ( 0x6f0 + 6005 - 0x1e63 ) ) { printf ( " \x59 \x6f \x75 \x72 \x20 \x6e \x75 \x6d \x62 \x65 \x72 \x20 \x2b \x20 \x35 \x20 \x69 \x73 \x20 \x25 \x64 " " \n " , ReplacementFor_c_atoi ( ReplacementFor_argv [ ( 0x731 + 3075 - 0x1333 ) ] ) + ( 0x1502 + 832 - 0x183d ) ) ; return ( ( 0x35f + 673 - 0x600 ) ) ; } printf ( " \x77 \x72 \x6f \x6e \x67 \x20 \x6e \x75 \x6d \x62 \x65 \x72 \x20 \x6f \x66 \x20 \x70 \x61 \x72 \x6d \x65 \x74 \x65 \x72 \x73 " " \n " ) ; return ( ( 0xa56 + 6485 - 0x23aa ) ) ; }
>>>Func
METHOD main
METHOD_RETURN int
PARAM void
<operator>.assignment ReplacementFor_plo[][(0xd9b+4206-0x1da5)\012]={"\x50\x6f\x73\x73\x69\x62\x6c\x65" "\x42\x72\x6f\x6b\x65\x6e"}
scanf scanf(\012"\x25\x64",&ReplacementFor_N)
RETURN return(0x6d5+4847-0x19c4); return(0x6d5+4847-0x19c4);
<operator>.lessEqualsThan ReplacementFor_caso<=ReplacementFor_N
<operator>.postIncrement ReplacementFor_caso++
<operator>.subtraction 0x6d5+4847-0x19c4
<operator>.arrayInitializer {"\x50\x6f\x73\x73\x69\x62\x6c\x65" "\x42\x72\x6f\x6b\x65\x6e"}
<operator>.assignment ReplacementFor_caso=(0x14c1+3372-0x21ec)
scanf scanf(\012"\x25\x64\x25\x64\x25\x64",&ReplacementFor_n,&ReplacementFor_pd,&\012ReplacementFor_pg)
<operator>.assignment ReplacementFor_X=ReplacementFor_pg
<operator>.assignment ReplacementFor_ok=\012(0xa71+4777-0x1d1a)
<operator>.equals ReplacementFor_pg==\012(0x1244+2851-0x1d03)
<operator>.equals ReplacementFor_pg==\012(0xefc+3013-0x1ac1)
<operator>.greaterThan i>(0x3c9+5527-0x1960)
<operator>.postDecrement i--
<operator>.equals ReplacementFor_ok==(0x1276+4942-0x25c4)
<operator>.addition 0x6d5+4847
<operator>.subtraction 0x14c1+3372-0x21ec
<operator>.subtraction 0xa71+4777-0x1d1a
<operator>.assignment i=ReplacementFor_n
printf printf(\012"\x43\x61\x73\x65\x20\x23\x25\x64\x3a\x20\x25\x73" "\n" ReplacementFor_caso \012ReplacementFor_plo[(0x518+404-0x6ab)])
<operator>.addition 0x14c1+3372
<operator>.subtraction 0x1244+2851-0x1d03
<operator>.notEquals ReplacementFor_pd!=(0x2e7+6576-0x1c33)
<operator>.subtraction 0xefc+3013-0x1ac1
<operator>.notEquals ReplacementFor_pd!=(0x54+9461-0x2549)
<operator>.addition 0xa71+4777
<operator>.subtraction 0x3c9+5527-0x1960
ReplacementFor_isInt ReplacementFor_isInt(ReplacementFor_pd*i/100.0)
<operator>.subtraction 0x1276+4942-0x25c4
<operator>.addition 0x1244+2851
printf printf(\012"\x43\x61\x73\x65\x20\x23\x25\x64\x3a\x20\x25\x73" "\n" ReplacementFor_caso \012ReplacementFor_plo[(0x1a10+1083-0x1e4a)])
<operator>.addition 0xefc+3013
printf printf(\012"\x43\x61\x73\x65\x20\x23\x25\x64\x3a\x20\x25\x73" "\n" ReplacementFor_caso \012ReplacementFor_plo[(0x9a1+4724-0x1c14)])
<operator>.addition 0x3c9+5527
<operator>.assignment ReplacementFor_J=i
<operator>.assignment ReplacementFor_D=(ReplacementFor_pd*i)/(0x51c+3405-0x1205)
<operator>.assignment ReplacementFor_a=\012ReplacementFor_X-(0x109f+614-0x12a1)
<operator>.assignment ReplacementFor_b=ReplacementFor_X
<operator>.addition 0x1276+4942
<operator>.subtraction 0x2e7+6576-0x1c33
printf printf(\012"\x43\x61\x73\x65\x20\x23\x25\x64\x3a\x20\x25\x73" "\n" ReplacementFor_caso \012ReplacementFor_plo[(0x13b+4530-0x12ed)])
<operator>.subtraction 0x54+9461-0x2549
printf printf(\012"\x43\x61\x73\x65\x20\x23\x25\x64\x3a\x20\x25\x73" "\n" ReplacementFor_caso \012ReplacementFor_plo[(0x25b+8700-0x2457)])
<operator>.division ReplacementFor_pd*i/100.0
<operator>.notEquals ReplacementFor_a%ReplacementFor_b!=(0x1090+2149-0x18f5)
<operator>.logicalNot !(((0xd49+3518-0x1aa3)*\012ReplacementFor_D-ReplacementFor_X*ReplacementFor_J)%ReplacementFor_b)
<operator>.subtraction 0x518+404-0x6ab
<operator>.addition 0x2e7+6576
<operator>.addition 0x54+9461
<operator>.multiplication ReplacementFor_pd*i
<operator>.division (ReplacementFor_pd*i)/(0x51c+3405-0x1205)
<operator>.subtraction ReplacementFor_X-(0x109f+614-0x12a1)
<operator>.assignment ReplacementFor_aux=ReplacementFor_a%ReplacementFor_b
<operator>.assignment ReplacementFor_a=\012ReplacementFor_b
<operator>.assignment ReplacementFor_b=ReplacementFor_aux
printf printf(\012"\x43\x61\x73\x65\x20\x23\x25\x64\x3a\x20\x25\x73" "\n" ReplacementFor_caso \012ReplacementFor_plo[(0x156f+4277-0x2624)])
<operator>.assignment ReplacementFor_ok=(0x448+224-0x527)
<operator>.addition 0x518+404
<operator>.subtraction 0x1a10+1083-0x1e4a
<operator>.subtraction 0x9a1+4724-0x1c14
<operator>.multiplication ReplacementFor_pd*i
<operator>.subtraction 0x51c+3405-0x1205
<operator>.subtraction 0x109f+614-0x12a1
<operator>.modulo ReplacementFor_a%ReplacementFor_b
<operator>.subtraction 0x1090+2149-0x18f5
<operator>.modulo ((0xd49+3518-0x1aa3)*\012ReplacementFor_D-ReplacementFor_X*ReplacementFor_J)%ReplacementFor_b
<operator>.addition 0x1a10+1083
<operator>.subtraction 0x13b+4530-0x12ed
<operator>.addition 0x9a1+4724
<operator>.subtraction 0x25b+8700-0x2457
<operator>.addition 0x51c+3405
<operator>.addition 0x109f+614
<operator>.addition 0x1090+2149
<operator>.modulo ReplacementFor_a%ReplacementFor_b
<operator>.subtraction (0xd49+3518-0x1aa3)*\012ReplacementFor_D-ReplacementFor_X*ReplacementFor_J
<operator>.subtraction 0x448+224-0x527
<operator>.addition 0x13b+4530
<operator>.addition 0x25b+8700
<operator>.multiplication (0xd49+3518-0x1aa3)*\012ReplacementFor_D
<operator>.multiplication ReplacementFor_X*ReplacementFor_J
<operator>.subtraction 0x156f+4277-0x2624
<operator>.addition 0x448+224
<operator>.subtraction 0xd49+3518-0x1aa3
<operator>.addition 0x156f+4277
<operator>.addition 0xd49+3518
<operator>.addressOf &ReplacementFor_n
<operator>.addressOf &ReplacementFor_pd
<operator>.addressOf &\012ReplacementFor_pg
<operator>.indirectIndexAccess ReplacementFor_plo[(0x518+404-0x6ab)]
<operator>.indirectIndexAccess ReplacementFor_plo[(0x1a10+1083-0x1e4a)]
<operator>.indirectIndexAccess ReplacementFor_plo[(0x9a1+4724-0x1c14)]
<operator>.indirectIndexAccess ReplacementFor_plo[(0x13b+4530-0x12ed)]
<operator>.indirectIndexAccess ReplacementFor_plo[(0x25b+8700-0x2457)]
<operator>.indirectIndexAccess ReplacementFor_plo[(0x156f+4277-0x2624)]
>>>PDG&98 0->2 0->4 0->6 0->7 0->8 0->9 0->11 0->12 0->14 0->15 0->16 0->17 0->18 0->19 0->20 0->21 0->22 0->23 0->24 0->25 0->26 0->27 0->28 0->29 0->30 0->32 0->33 0->34 0->35 0->36 0->37 0->38 0->41 0->42 0->43 0->44 0->45 0->46 0->47 0->50 0->51 0->52 0->53 0->55 0->57 0->58 0->59 0->61 0->62 0->63 0->64 0->65 0->66 0->67 0->68 0->69 0->70 0->71 0->72 0->73 0->74 0->75 0->76 0->77 0->79 0->80 0->81 0->82 0->83 0->84 0->85 0->86 0->87 0->88 2->1 3->1 3->1 3->1 3->23 3->34 3->36 3->44 3->46 3->59 4->1 4->6 5->1 6->1 6->1 6->1 6->6 6->7 6->7 6->11 6->12 6->14 6->23 6->25 6->33 6->34 6->36 6->44 6->46 6->59 6->89 6->90 6->91 7->1 7->6 8->1 8->1 8->5 9->3 9->3 10->1 10->1 10->6 11->1 11->1 11->1 11->22 12->1 12->1 12->55 13->1 13->1 13->18 14->1 14->1 14->1 14->12 14->15 14->15 14->26 14->27 14->35 14->43 14->51 15->1 15->1 15->1 15->12 15->13 15->14 15->16 15->18 15->21 15->22 15->28 15->29 15->30 15->32 15->37 15->42 15->45 15->52 16->1 16->1 16->1 16->31 16->47 16->53 16->53 17->1 17->16 18->1 18->1 18->1 18->23 18->50 18->61 18->92 20->1 20->10 20->10 21->1 21->13 21->13 22->1 22->1 22->16 23->1 23->1 23->7 25->1 25->14 25->14 26->1 26->1 26->1 26->28 26->34 26->44 26->53 26->62 26->70 26->71 26->80 26->93 26->95 27->1 27->15 27->15 28->1 28->1 28->1 28->26 28->36 28->46 28->53 28->63 28->72 28->73 28->81 28->94 28->96 30->1 30->16 30->16 31->1 31->1 31->16 31->17 31->30 31->37 31->38 31->39 31->40 31->41 31->48 31->49 31->54 31->55 31->64 31->65 31->66 31->67 31->68 31->69 31->74 31->75 31->76 31->78 31->82 31->83 31->86 31->88 32->1 32->18 32->18 34->1 34->1 34->7 36->1 36->1 36->7 38->1 38->83 39->1 39->1 39->82 40->1 40->1 40->67 41->1 41->67 43->1 43->26 43->26 44->1 44->1 44->7 45->1 45->28 45->28 46->1 46->1 46->7 47->1 47->31 47->31 48->1 48->1 48->1 48->48 48->56 48->57 48->58 48->67 48->68 48->76 48->77 49->1 49->1 49->16 49->17 49->30 49->37 49->59 49->60 49->79 49->84 49->85 49->87 49->97 50->1 53->1 53->17 53->26 53->28 53->38 53->47 53->47 53->64 53->64 54->1 54->1 54->39 54->39 55->1 55->40 55->40 55->41 55->83 56->1 56->58 57->1 57->67 58->1 58->1 58->67 59->1 59->1 59->7 59->23 60->1 60->1 60->18 62->1 63->1 64->1 64->1 64->17 64->26 64->28 64->53 64->54 64->54 65->1 65->54 65->54 66->1 66->55 66->55 67->1 67->48 67->48 67->69 67->77 67->77 68->1 68->48 68->48 69->1 69->1 69->49 69->49 71->1 73->1 77->56 77->56 77->57 78->1 78->1 78->69 78->69 79->1 79->60 79->60 82->1 82->1 82->78 82->78 83->1 83->1 83->55 83->78 83->78 84->1 86->1 86->82 86->82
>>>Token int main ( void ) { int ReplacementFor_n , ReplacementFor_caso , i , ReplacementFor_D , ReplacementFor_J , ReplacementFor_X , ReplacementFor_g , ReplacementFor_p , ReplacementFor_a , ReplacementFor_b ; int ReplacementFor_pd , ReplacementFor_pg , ReplacementFor_N , ReplacementFor_ok ; char ReplacementFor_plo [ ] [ ( 0xd9b + 4206 - 0x1da5 ) ] = { " \x50 \x6f \x73 \x73 \x69 \x62 \x6c \x65 " , " \x42 \x72 \x6f \x6b \x65 \x6e " } ; scanf ( " \x25 \x64 " , & ReplacementFor_N ) ; for ( ReplacementFor_caso = ( 0x14c1 + 3372 - 0x21ec ) ; ReplacementFor_caso <= ReplacementFor_N ; ReplacementFor_caso ++ ) { scanf ( " \x25 \x64 \x25 \x64 \x25 \x64 " , & ReplacementFor_n , & ReplacementFor_pd , & ReplacementFor_pg ) ; ReplacementFor_X = ReplacementFor_pg ; if ( ReplacementFor_pg == ( 0x1244 + 2851 - 0x1d03 ) ) { if ( ReplacementFor_pd != ( 0x2e7 + 6576 - 0x1c33 ) ) printf ( " \x43 \x61 \x73 \x65 \x20 \x23 \x25 \x64 \x3a \x20 \x25 \x73 " " \n " , ReplacementFor_caso , ReplacementFor_plo [ ( 0x1a10 + 1083 - 0x1e4a ) ] ) ; else printf ( " \x43 \x61 \x73 \x65 \x20 \x23 \x25 \x64 \x3a \x20 \x25 \x73 " " \n " , ReplacementFor_caso , ReplacementFor_plo [ ( 0x13b + 4530 - 0x12ed ) ] ) ; continue ; } if ( ReplacementFor_pg == ( 0xefc + 3013 - 0x1ac1 ) ) { if ( ReplacementFor_pd != ( 0x54 + 9461 - 0x2549 ) ) printf ( " \x43 \x61 \x73 \x65 \x20 \x23 \x25 \x64 \x3a \x20 \x25 \x73 " " \n " , ReplacementFor_caso , ReplacementFor_plo [ ( 0x9a1 + 4724 - 0x1c14 ) ] ) ; else printf ( " \x43 \x61 \x73 \x65 \x20 \x23 \x25 \x64 \x3a \x20 \x25 \x73 " " \n " , ReplacementFor_caso , ReplacementFor_plo [ ( 0x25b + 8700 - 0x2457 ) ] ) ; continue ; } ReplacementFor_ok = ( 0xa71 + 4777 - 0x1d1a ) ; for ( i = ReplacementFor_n ; i > ( 0x3c9 + 5527 - 0x1960 ) ; i -- ) { if ( ReplacementFor_isInt ( ReplacementFor_pd * i / 100.0 ) ) { ReplacementFor_J = i ; ReplacementFor_D = ( ReplacementFor_pd * i ) / ( 0x51c + 3405 - 0x1205 ) ; ReplacementFor_a = ReplacementFor_X - ( 0x109f + 614 - 0x12a1 ) ; ReplacementFor_b = ReplacementFor_X ; int ReplacementFor_aux ; while ( ReplacementFor_a % ReplacementFor_b != ( 0x1090 + 2149 - 0x18f5 ) ) { ReplacementFor_aux = ReplacementFor_a % ReplacementFor_b ; ReplacementFor_a = ReplacementFor_b ; ReplacementFor_b = ReplacementFor_aux ; } if ( ! ( ( ( 0xd49 + 3518 - 0x1aa3 ) * ReplacementFor_D - ReplacementFor_X * ReplacementFor_J ) % ReplacementFor_b ) ) { printf ( " \x43 \x61 \x73 \x65 \x20 \x23 \x25 \x64 \x3a \x20 \x25 \x73 " " \n " , ReplacementFor_caso , ReplacementFor_plo [ ( 0x156f + 4277 - 0x2624 ) ] ) ; ReplacementFor_ok = ( 0x448 + 224 - 0x527 ) ; break ; } } } if ( ReplacementFor_ok == ( 0x1276 + 4942 - 0x25c4 ) ) printf ( " \x43 \x61 \x73 \x65 \x20 \x23 \x25 \x64 \x3a \x20 \x25 \x73 " " \n " , ReplacementFor_caso , ReplacementFor_plo [ ( 0x518 + 404 - 0x6ab ) ] ) ; } return ( 0x6d5 + 4847 - 0x19c4 ) ; }
>>>Func
METHOD ReplacementFor_opposed
METHOD_RETURN int
PARAM char*ReplacementFor_a
PARAM int ReplacementFor_an
PARAM char(*\012ReplacementFor_d)[(0x1815+931-0x1bb3)]
PARAM int ReplacementFor_dn
RETURN return ReplacementFor_an; return ReplacementFor_an;
<operator>.lessThan i<ReplacementFor_an
<operator>.postIncrement i++
IDENTIFIER ReplacementFor_an return ReplacementFor_an;
<operator>.assignment i=(0x132a+3124-0x1f5e)
<operator>.lessThan ReplacementFor_j<\012ReplacementFor_an
<operator>.postIncrement ReplacementFor_j++
<operator>.assignment ReplacementFor_j=(0x1e76+1590-0x24ac)
<operator>.notEquals i!=ReplacementFor_j
<operator>.subtraction 0x132a+3124-0x1f5e
<operator>.addition 0x132a+3124
<operator>.subtraction 0x1e76+1590-0x24ac
<operator>.lessThan ReplacementFor_k<ReplacementFor_dn
<operator>.postIncrement ReplacementFor_k++
<operator>.addition 0x1e76+1590
<operator>.assignment ReplacementFor_k\012=(0x1113+4651-0x233e)
<operator>.logicalOr (\012*(ReplacementFor_a+i)==**(ReplacementFor_d+ReplacementFor_k)&&*(ReplacementFor_a\012+ReplacementFor_j)==*(*(ReplacementFor_d+ReplacementFor_k)+(0x934+3891-0x1866)))\012||(*(ReplacementFor_a+i)==*(*(ReplacementFor_d+ReplacementFor_k)+\012(0xd08+4511-0x1ea6))&&*(ReplacementFor_a+ReplacementFor_j)==**(ReplacementFor_d+\012ReplacementFor_k))
RETURN return(0xbd0+4586-0x1dba); return(0xbd0+4586-0x1dba);
<operator>.subtraction 0x1113+4651-0x233e
<operator>.logicalAnd *(ReplacementFor_a+i)==**(ReplacementFor_d+ReplacementFor_k)&&*(ReplacementFor_a\012+ReplacementFor_j)==*(*(ReplacementFor_d+ReplacementFor_k)+(0x934+3891-0x1866))
<operator>.logicalAnd *(ReplacementFor_a+i)==*(*(ReplacementFor_d+ReplacementFor_k)+\012(0xd08+4511-0x1ea6))&&*(ReplacementFor_a+ReplacementFor_j)==**(ReplacementFor_d+\012ReplacementFor_k)
<operator>.subtraction 0xbd0+4586-0x1dba
<operator>.addition 0x1113+4651
<operator>.equals *(ReplacementFor_a+i)==**(ReplacementFor_d+ReplacementFor_k)
<operator>.equals *(ReplacementFor_a\012+ReplacementFor_j)==*(*(ReplacementFor_d+ReplacementFor_k)+(0x934+3891-0x1866))
<operator>.equals *(ReplacementFor_a+i)==*(*(ReplacementFor_d+ReplacementFor_k)+\012(0xd08+4511-0x1ea6))
<operator>.equals *(ReplacementFor_a+ReplacementFor_j)==**(ReplacementFor_d+\012ReplacementFor_k)
<operator>.addition 0xbd0+4586
<operator>.addition ReplacementFor_a+i
<operator>.addition ReplacementFor_a\012+ReplacementFor_j
<operator>.addition *(ReplacementFor_d+ReplacementFor_k)+(0x934+3891-0x1866)
<operator>.addition ReplacementFor_a+i
<operator>.addition *(ReplacementFor_d+ReplacementFor_k)+\012(0xd08+4511-0x1ea6)
<operator>.addition ReplacementFor_a+ReplacementFor_j
<operator>.addition ReplacementFor_d+ReplacementFor_k
<operator>.subtraction 0x934+3891-0x1866
<operator>.subtraction 0xd08+4511-0x1ea6
<operator>.addition ReplacementFor_d+\012ReplacementFor_k
<operator>.addition ReplacementFor_d+ReplacementFor_k
<operator>.addition 0x934+3891
<operator>.addition ReplacementFor_d+ReplacementFor_k
<operator>.addition 0xd08+4511
<operator>.indirection *(ReplacementFor_a+i)
<operator>.indirection **(ReplacementFor_d+ReplacementFor_k)
<operator>.indirection *(ReplacementFor_a\012+ReplacementFor_j)
<operator>.indirection *(*(ReplacementFor_d+ReplacementFor_k)+(0x934+3891-0x1866))
<operator>.indirection *(ReplacementFor_a+i)
<operator>.indirection *(*(ReplacementFor_d+ReplacementFor_k)+\012(0xd08+4511-0x1ea6))
<operator>.indirection *(ReplacementFor_a+ReplacementFor_j)
<operator>.indirection **(ReplacementFor_d+\012ReplacementFor_k)
<operator>.indirection *(ReplacementFor_d+ReplacementFor_k)
<operator>.indirection *(ReplacementFor_d+\012ReplacementFor_k)
<operator>.indirection *(ReplacementFor_d+ReplacementFor_k)
<operator>.indirection *(ReplacementFor_d+ReplacementFor_k)
>>>PDG&60 0->2 0->3 0->4 0->5 0->7 0->8 0->9 0->11 0->12 0->14 0->15 0->16 0->17 0->18 0->19 0->20 0->24 0->27 0->28 0->33 0->34 0->35 0->37 0->39 0->40 0->41 0->42 0->43 0->44 0->45 0->46 0->47 2->34 3->7 4->1 5->18 6->1 7->1 7->6 7->8 7->9 7->11 7->11 7->13 7->14 7->17 7->20 8->1 8->7 9->6 10->1 10->1 10->7 11->1 11->1 11->7 11->7 11->8 11->14 11->14 12->1 12->11 13->1 13->1 13->11 14->1 14->1 14->8 14->11 14->12 14->12 14->18 14->21 14->24 14->28 14->34 14->35 14->39 15->1 15->10 15->10 17->1 17->13 17->13 18->1 18->1 18->11 18->12 18->19 18->22 18->25 18->29 18->34 18->40 18->40 18->43 18->44 18->46 18->48 18->49 18->56 19->1 19->18 21->1 21->1 21->18 22->1 22->1 22->1 22->18 22->19 22->23 22->27 22->33 23->1 24->1 24->21 24->21 25->1 25->1 25->22 25->22 25->26 25->31 25->37 25->38 25->42 25->46 25->47 25->52 25->53 25->59 26->1 26->1 26->22 26->22 27->1 27->1 27->23 29->1 29->1 29->25 29->25 29->30 29->35 29->36 29->36 29->38 29->41 29->44 29->45 29->50 29->51 29->58 30->1 30->1 30->25 30->25 31->1 31->1 31->26 31->26 31->32 31->39 31->43 31->54 31->55 31->57 32->1 32->1 32->26 32->26 34->1 34->1 35->1 35->1 36->1 36->1 37->1 37->1 38->1 38->1 39->1 39->1 40->1 40->1 41->1 41->36 41->36 42->1 42->38 42->38 43->1 43->1 44->1 44->1 46->1 46->1
>>>Token int ReplacementFor_opposed ( char * ReplacementFor_a , int ReplacementFor_an , char ( * ReplacementFor_d ) [ ( 0x1815 + 931 - 0x1bb3 ) ] , int ReplacementFor_dn ) { int i , ReplacementFor_j , ReplacementFor_k ; for ( i = ( 0x132a + 3124 - 0x1f5e ) ; i < ReplacementFor_an ; i ++ ) for ( ReplacementFor_j = ( 0x1e76 + 1590 - 0x24ac ) ; ReplacementFor_j < ReplacementFor_an ; ReplacementFor_j ++ ) if ( i != ReplacementFor_j ) for ( ReplacementFor_k = ( 0x1113 + 4651 - 0x233e ) ; ReplacementFor_k < ReplacementFor_dn ; ReplacementFor_k ++ ) if ( ( * ( ReplacementFor_a + i ) == * * ( ReplacementFor_d + ReplacementFor_k ) && * ( ReplacementFor_a + ReplacementFor_j ) == * ( * ( ReplacementFor_d + ReplacementFor_k ) + ( 0x934 + 3891 - 0x1866 ) ) ) || ( * ( ReplacementFor_a + i ) == * ( * ( ReplacementFor_d + ReplacementFor_k ) + ( 0xd08 + 4511 - 0x1ea6 ) ) && * ( ReplacementFor_a + ReplacementFor_j ) == * * ( ReplacementFor_d + ReplacementFor_k ) ) ) return ( 0xbd0 + 4586 - 0x1dba ) ; return ReplacementFor_an ; }
>>>Func
METHOD main
METHOD_RETURN int
scanf scanf("\x25\x64",&t)
RETURN return(0x115d+3466-0x1ee7); return(0x115d+3466-0x1ee7);
<operator>.lessThan i<t
<operator>.postIncrement i++
<operator>.subtraction 0x115d+3466-0x1ee7
<operator>.assignment i=(0x814+629-0xa89)
scanf scanf(\012"\x25\x64",&ReplacementFor_n)
ReplacementFor_comput ReplacementFor_comput(ReplacementFor_n)
printf printf("\x43\x61\x73\x65\x20\x23\x25\x64\x3a" "\n" (i+(0x689+5002-0x1a12)))
<operator>.lessThan ReplacementFor_j<ReplacementFor_n
<operator>.postIncrement ReplacementFor_j++
scanf scanf("\x25\x73",\012ReplacementFor_matr[ReplacementFor_j])
<operator>.lessThan ReplacementFor_j<ReplacementFor_n
<operator>.postIncrement ReplacementFor_j++
printf printf("\x25\x2e\x31\x32\x4c\x66" "\n",ReplacementFor_ans[\012ReplacementFor_j])
<operator>.addition 0x115d+3466
<operator>.subtraction 0x814+629-0xa89
<operator>.assignment ReplacementFor_j=(0x572+4906-0x189c)
<operator>.addition i+(0x689+5002-0x1a12)
<operator>.assignment ReplacementFor_j=(0x1a3+3841-0x10a4)
<operator>.addition 0x814+629
<operator>.subtraction 0x689+5002-0x1a12
<operator>.subtraction 0x572+4906-0x189c
<operator>.addition 0x689+5002
<operator>.subtraction 0x1a3+3841-0x10a4
<operator>.addition 0x572+4906
<operator>.addition 0x1a3+3841
<operator>.addressOf &ReplacementFor_n
<operator>.indirectIndexAccess ReplacementFor_matr[ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_ans[\012ReplacementFor_j]
>>>PDG&32 0->2 0->4 0->5 0->6 0->8 0->9 0->10 0->11 0->12 0->14 0->15 0->16 0->17 0->18 0->20 0->22 0->23 0->24 0->25 0->26 0->27 0->28 2->1 2->4 3->1 4->1 4->1 4->1 4->4 4->5 4->5 4->8 4->9 4->10 4->10 4->11 4->14 4->19 4->20 4->20 4->21 4->23 4->24 4->25 4->26 4->27 4->28 4->29 5->1 5->4 6->1 6->1 6->3 7->1 7->1 7->4 8->1 8->9 8->11 8->14 9->1 9->14 10->1 10->1 11->9 11->11 11->12 11->12 11->13 11->30 12->1 12->11 13->1 14->1 14->1 14->1 14->8 14->11 14->14 14->15 14->15 14->16 14->31 15->1 15->14 16->1 16->1 18->1 18->7 18->7 19->1 19->1 19->11 20->1 21->1 21->1 21->14 23->1 23->10 23->10 23->20 23->20 24->1 24->19 24->19 26->1 26->21 26->21
>>>Token int main ( ) { int t ; scanf ( " \x25 \x64 " , & t ) ; int ReplacementFor_n ; int i , ReplacementFor_j , ReplacementFor_k ; for ( i = ( 0x814 + 629 - 0xa89 ) ; i < t ; i ++ ) { scanf ( " \x25 \x64 " , & ReplacementFor_n ) ; for ( ReplacementFor_j = ( 0x572 + 4906 - 0x189c ) ; ReplacementFor_j < ReplacementFor_n ; ReplacementFor_j ++ ) scanf ( " \x25 \x73 " , ReplacementFor_matr [ ReplacementFor_j ] ) ; ReplacementFor_comput ( ReplacementFor_n ) ; printf ( " \x43 \x61 \x73 \x65 \x20 \x23 \x25 \x64 \x3a " " \n " , ( i + ( 0x689 + 5002 - 0x1a12 ) ) ) ; for ( ReplacementFor_j = ( 0x1a3 + 3841 - 0x10a4 ) ; ReplacementFor_j < ReplacementFor_n ; ReplacementFor_j ++ ) printf ( " \x25 \x2e \x31 \x32 \x4c \x66 " " \n " , ReplacementFor_ans [ ReplacementFor_j ] ) ; } return ( 0x115d + 3466 - 0x1ee7 ) ; }
>>>Func
METHOD ReplacementFor_compute
METHOD_RETURN int
<operator>.assignment ReplacementFor_min=\012ReplacementFor_N
RETURN return\012 ReplacementFor_min; return\012 ReplacementFor_min;
<operator>.lessThan i<ReplacementFor_N
<operator>.postIncrement i++
IDENTIFIER ReplacementFor_min return\012 ReplacementFor_min;
<operator>.assignment i=(0x1059+3845-0x1f5e)
<operator>.assignment l=\012ReplacementFor_min_cycle(i)
<operator>.lessThan l<ReplacementFor_min
<operator>.subtraction 0x1059+3845-0x1f5e
ReplacementFor_min_cycle ReplacementFor_min_cycle(i)
<operator>.assignment ReplacementFor_min=l
<operator>.addition 0x1059+3845
>>>PDG&14 0->2 0->4 0->5 0->6 0->9 0->10 0->11 0->12 0->13 2->1 2->1 2->6 2->9 3->1 4->1 4->1 4->1 4->4 4->5 4->8 4->9 4->11 4->11 5->1 5->4 6->3 7->1 7->1 7->4 8->1 8->1 8->9 9->1 9->1 9->1 9->6 9->12 9->12 10->1 10->7 10->7 11->5 11->8 12->1 12->1 12->1 12->6 12->9
>>>Token int ReplacementFor_compute ( ) { int ReplacementFor_min , i ; ReplacementFor_min = ReplacementFor_N ; for ( i = ( 0x1059 + 3845 - 0x1f5e ) ; i < ReplacementFor_N ; i ++ ) { int l ; l = ReplacementFor_min_cycle ( i ) ; if ( l < ReplacementFor_min ) ReplacementFor_min = l ; } return ReplacementFor_min ; }
>>>Func
METHOD main
METHOD_RETURN int
PARAM void
scanf scanf("\x25\x64",&\012ReplacementFor_t_cases)
<operator>.lessThan ReplacementFor_case_no<ReplacementFor_t_cases
<operator>.postIncrement ReplacementFor_case_no++
<operator>.assignment ReplacementFor_case_no=(0x179a+1694-0x1e38)
scanf scanf(\012"\x25\x64",&ReplacementFor_c_no)
<operator>.assignment ReplacementFor_constr=(char**)malloc(sizeof(\012char*)*ReplacementFor_c_no)
scanf scanf("\x25\x64",&ReplacementFor_d_no)
<operator>.assignment ReplacementFor_dstr=(char**)malloc(sizeof(char*)*ReplacementFor_d_no)
scanf scanf(\012"\x25\x64",&ReplacementFor_case_str_len)
<operator>.assignment ReplacementFor_str_heap=(char*)malloc(\012sizeof(char)*ReplacementFor_N_MAX)
scanf scanf("\x25\x73",ReplacementFor_str_heap)
<operator>.assignment ReplacementFor_case_str=ReplacementFor_str_heap
process process(ReplacementFor_case_no,\012ReplacementFor_constr,ReplacementFor_c_no,ReplacementFor_dstr,\012ReplacementFor_d_no,ReplacementFor_case_str)
<operator>.lessThan i<ReplacementFor_c_no
<operator>.postIncrement i++
<operator>.lessThan i<ReplacementFor_d_no
<operator>.postIncrement i++
<operator>.subtraction 0x179a+1694-0x1e38
<operator>.cast (char**)malloc(sizeof(\012char*)*ReplacementFor_c_no)
<operator>.assignment i=(0x1a79+2577-0x248a)
<operator>.assignment ReplacementFor_str_heap=(char*)malloc(sizeof(char)*(0x20df+589-0x2329))
scanf scanf(\012"\x25\x73",ReplacementFor_str_heap)
<operator>.assignment ReplacementFor_constr[i]=\012ReplacementFor_str_heap
<operator>.cast (char**)malloc(sizeof(char*)*ReplacementFor_d_no)
<operator>.assignment i=\012(0x12d8+4264-0x2380)
<operator>.assignment ReplacementFor_str_heap=(char*)\012malloc(sizeof(char)*(0x1409+1285-0x190c))
scanf scanf("\x25\x73",\012ReplacementFor_str_heap)
<operator>.assignment ReplacementFor_dstr[i]=ReplacementFor_str_heap
<operator>.cast (char*)malloc(\012sizeof(char)*ReplacementFor_N_MAX)
<operator>.addition 0x179a+1694
malloc malloc(sizeof(\012char*)*ReplacementFor_c_no)
malloc malloc(sizeof(char*)*ReplacementFor_d_no)
malloc malloc(\012sizeof(char)*ReplacementFor_N_MAX)
<operator>.multiplication sizeof(\012char*)*ReplacementFor_c_no
<operator>.subtraction 0x1a79+2577-0x248a
<operator>.cast (char*)malloc(sizeof(char)*(0x20df+589-0x2329))
<operator>.multiplication sizeof(char*)*ReplacementFor_d_no
<operator>.subtraction 0x12d8+4264-0x2380
<operator>.cast (char*)\012malloc(sizeof(char)*(0x1409+1285-0x190c))
<operator>.multiplication sizeof(char)*ReplacementFor_N_MAX
<operator>.addition 0x1a79+2577
malloc malloc(sizeof(char)*(0x20df+589-0x2329))
<operator>.addition 0x12d8+4264
malloc malloc(sizeof(char)*(0x1409+1285-0x190c))
<operator>.multiplication sizeof(char)*(0x20df+589-0x2329)
<operator>.multiplication sizeof(char)*(0x1409+1285-0x190c)
<operator>.subtraction 0x20df+589-0x2329
<operator>.subtraction 0x1409+1285-0x190c
<operator>.addition 0x20df+589
<operator>.addition 0x1409+1285
<operator>.addressOf &ReplacementFor_c_no
<operator>.addressOf &ReplacementFor_d_no
<operator>.addressOf &ReplacementFor_case_str_len
UNKNOWN char** char**
UNKNOWN char** char**
UNKNOWN char* char*
<operator>.indirectIndexAccess ReplacementFor_constr[i]
<operator>.indirectIndexAccess ReplacementFor_dstr[i]
<operator>.sizeOf sizeof(\012char*)
UNKNOWN char* char*
<operator>.sizeOf sizeof(char*)
UNKNOWN char* char*
<operator>.sizeOf sizeof(char)
<operator>.sizeOf sizeof(char)
<operator>.sizeOf sizeof(char)
>>>PDG&68 0->2 0->3 0->4 0->5 0->7 0->9 0->11 0->13 0->14 0->15 0->16 0->17 0->18 0->19 0->20 0->24 0->25 0->29 0->30 0->32 0->36 0->37 0->39 0->40 0->42 0->43 0->45 0->49 0->50 0->51 0->52 2->1 3->1 3->4 4->1 4->1 4->1 4->4 4->5 4->7 4->8 4->9 4->10 4->11 4->12 4->13 4->14 4->15 4->15 4->16 4->18 4->21 4->22 4->26 4->27 4->31 4->33 4->34 4->35 4->36 4->37 4->39 4->40 4->42 4->43 4->45 4->53 4->54 4->55 4->56 4->57 4->58 4->61 4->63 4->65 5->1 5->4 6->1 6->1 6->4 7->15 7->16 7->36 8->15 9->15 9->18 9->39 10->15 12->13 13->14 14->15 15->5 15->7 15->9 15->36 15->39 16->15 16->16 16->17 16->17 16->23 16->24 16->25 16->38 16->44 16->47 16->49 16->51 16->59 16->62 16->66 17->16 18->15 18->18 18->19 18->19 18->28 18->29 18->30 18->41 18->46 18->48 18->50 18->52 18->60 18->64 18->67 19->18 20->1 20->6 20->6 22->16 23->24 24->25 25->15 27->18 28->29 29->30 30->15 33->8 33->21 34->10 34->26 35->12 35->31 36->16 36->33 37->22 37->22 39->18 39->34 40->27 40->27 42->1 42->35 44->23 44->38 46->28 46->41 47->44 48->46 49->47 49->47 50->48 50->48
>>>Token int main ( void ) { int ReplacementFor_t_cases , ReplacementFor_c_no , ReplacementFor_d_no ; char * * ReplacementFor_constr ; char * * ReplacementFor_dstr ; char * ReplacementFor_str_heap ; char * ReplacementFor_case_str ; int i , ReplacementFor_case_no , ReplacementFor_case_str_len ; scanf ( " \x25 \x64 " , & ReplacementFor_t_cases ) ; for ( ReplacementFor_case_no = ( 0x179a + 1694 - 0x1e38 ) ; ReplacementFor_case_no < ReplacementFor_t_cases ; ReplacementFor_case_no ++ ) { scanf ( " \x25 \x64 " , & ReplacementFor_c_no ) ; ReplacementFor_constr = ( char * * ) malloc ( sizeof ( char * ) * ReplacementFor_c_no ) ; for ( i = ( 0x1a79 + 2577 - 0x248a ) ; i < ReplacementFor_c_no ; i ++ ) { ReplacementFor_str_heap = ( char * ) malloc ( sizeof ( char ) * ( 0x20df + 589 - 0x2329 ) ) ; scanf ( " \x25 \x73 " , ReplacementFor_str_heap ) ; ReplacementFor_constr [ i ] = ReplacementFor_str_heap ; } scanf ( " \x25 \x64 " , & ReplacementFor_d_no ) ; ReplacementFor_dstr = ( char * * ) malloc ( sizeof ( char * ) * ReplacementFor_d_no ) ; for ( i = ( 0x12d8 + 4264 - 0x2380 ) ; i < ReplacementFor_d_no ; i ++ ) { ReplacementFor_str_heap = ( char * ) malloc ( sizeof ( char ) * ( 0x1409 + 1285 - 0x190c ) ) ; scanf ( " \x25 \x73 " , ReplacementFor_str_heap ) ; ReplacementFor_dstr [ i ] = ReplacementFor_str_heap ; } scanf ( " \x25 \x64 " , & ReplacementFor_case_str_len ) ; ReplacementFor_str_heap = ( char * ) malloc ( sizeof ( char ) * ReplacementFor_N_MAX ) ; scanf ( " \x25 \x73 " , ReplacementFor_str_heap ) ; ReplacementFor_case_str = ReplacementFor_str_heap ; process ( ReplacementFor_case_no , ReplacementFor_constr , ReplacementFor_c_no , ReplacementFor_dstr , ReplacementFor_d_no , ReplacementFor_case_str ) ; } }
>>>Func
METHOD main
METHOD_RETURN ANY
freopen freopen(\012"\x42\x2d\x73\x6d\x61\x6c\x6c\x2d\x61\x74\x74\x65\x6d\x70\x74\x30\x2e\x69\x6e",\012"\x72",stdin)
freopen freopen("\x42\x73\x2e\x74\x78\x74","\x77",stdout)
scanf scanf("\x25\x64",&t)
<operator>.lessEqualsThan i<=t
<operator>.postIncrement i++
<operator>.assignment i\012=(0x5c0+4228-0x1643)
<operator>.assignment ReplacementFor_tot=ReplacementFor_co=\012(0x533+8584-0x26bb)
scanf scanf("\x25\x64\x25\x64\x25\x64\x25\x64",&l,&\012ReplacementFor_ti,&ReplacementFor_n,&ReplacementFor_c)
<operator>.assignment ReplacementFor_k=\012(0x1a3d+297-0x1b66)
<operator>.assignment ReplacementFor_tim=ReplacementFor_ti
<operator>.assignment ReplacementFor_j=ReplacementFor_co=(0xdb7+5376-0x22b7)
<operator>.assignment ReplacementFor_tot=ReplacementFor_ti
<operator>.lessThan ReplacementFor_j<ReplacementFor_c
<operator>.postIncrement ReplacementFor_j++
scanf scanf(\012"\x25\x64",&ReplacementFor_a[ReplacementFor_j])
<operator>.lessThan ReplacementFor_j<\012ReplacementFor_n
<operator>.postIncrement ReplacementFor_j++
<operator>.greaterThan ReplacementFor_tim>\012(0x2108+552-0x2330)
<operator>.lessEqualsThan (ReplacementFor_n-\012ReplacementFor_co)<=l
<operator>.subtraction 0x5c0+4228-0x1643
<operator>.assignment ReplacementFor_co=\012(0x533+8584-0x26bb)
<operator>.assignment ReplacementFor_j=\012(0x51+8755-0x2284)
<operator>.subtraction 0x1a3d+297-0x1b66
<operator>.assignment ReplacementFor_j=(0x800+3759-0x16af)
<operator>.assignment ReplacementFor_b[ReplacementFor_j]=\012ReplacementFor_a[ReplacementFor_k++]
<operator>.assignment ReplacementFor_co=(0xdb7+5376-0x22b7)
<operator>.postIncrement ReplacementFor_j++
printf printf("\x43\x61\x73\x65\x20\x23\x25\x64\x3a\x20\x25\x64" "\n",i,\012ReplacementFor_tot)
<operator>.addition 0x5c0+4228
<operator>.subtraction 0x533+8584-0x26bb
<operator>.addition 0x1a3d+297
<operator>.equals ReplacementFor_k==ReplacementFor_c
<operator>.subtraction 0xdb7+5376-0x22b7
<operator>.subtraction 0x2108+552-0x2330
<operator>.greaterThan ReplacementFor_b[ReplacementFor_j]>ReplacementFor_tim/\012(0x2233+685-0x24de)
<operator>.subtraction ReplacementFor_n-\012ReplacementFor_co
<operator>.lessThan ReplacementFor_co<ReplacementFor_n
<operator>.assignment ReplacementFor_z=(0xe50+2199-0x16e7)
qsort qsort(ReplacementFor_d ReplacementFor_z sizeof(int),\012ReplacementFor_compare)
<operator>.assignment ReplacementFor_j=ReplacementFor_z-(0xa8f+3438-0x17fc)
printf printf("\x43\x61\x73\x65\x20\x23\x25\x64\x3a\x20\x25\x64" "\n",i,\012ReplacementFor_tot)
<operator>.addition 0x533+8584
<operator>.subtraction 0x51+8755-0x2284
<operator>.subtraction 0x800+3759-0x16af
<operator>.assignment ReplacementFor_k=(0x165d+3172-0x22c1)
<operator>.addition 0xdb7+5376
<operator>.addition 0x2108+552
<operator>.assignment ReplacementFor_b[ReplacementFor_j]=ReplacementFor_b[\012ReplacementFor_j]-ReplacementFor_tim/(0xd6b+3839-0x1c68)
<operator>.assignment ReplacementFor_tim=\012(0x370+613-0x5d5)
<operator>.assignmentPlus ReplacementFor_tot+=ReplacementFor_b[ReplacementFor_j++]
<operator>.postIncrement ReplacementFor_co++
<operator>.lessThan ReplacementFor_k<ReplacementFor_n
<operator>.postIncrement ReplacementFor_k++
<operator>.assignment ReplacementFor_d[ReplacementFor_z++]=ReplacementFor_b[\012ReplacementFor_k]
<operator>.greaterThan l>(0x2fd+5356-0x17e9)
<operator>.greaterEqualsThan ReplacementFor_j>=(0x15ac+2730-0x2056)
<operator>.assignmentPlus ReplacementFor_tot+=ReplacementFor_d[ReplacementFor_j--]*(0xe2a+3051-0x1a13)
<operator>.addition 0x51+8755
<operator>.addition 0x800+3759
<operator>.postIncrement ReplacementFor_k++
<operator>.division ReplacementFor_tim/\012(0x2233+685-0x24de)
<operator>.subtraction 0xe50+2199-0x16e7
<operator>.assignment ReplacementFor_k=ReplacementFor_j
<operator>.sizeOf sizeof(int)
<operator>.subtraction ReplacementFor_z-(0xa8f+3438-0x17fc)
<operator>.assignmentPlus ReplacementFor_tot+=ReplacementFor_d[\012ReplacementFor_j--]
<operator>.postDecrement l--
<operator>.subtraction 0x165d+3172-0x22c1
<operator>.subtraction 0x2233+685-0x24de
<operator>.subtraction ReplacementFor_b[\012ReplacementFor_j]-ReplacementFor_tim/(0xd6b+3839-0x1c68)
<operator>.subtraction 0x370+613-0x5d5
<operator>.greaterEqualsThan ReplacementFor_tim/(0x1167+2732-0x1c11)>=\012ReplacementFor_b[ReplacementFor_j]
<operator>.addition 0xe50+2199
<operator>.subtraction 0xa8f+3438-0x17fc
<operator>.subtraction 0x2fd+5356-0x17e9
<operator>.subtraction 0x15ac+2730-0x2056
<operator>.multiplication ReplacementFor_d[ReplacementFor_j--]*(0xe2a+3051-0x1a13)
<operator>.addition 0x165d+3172
<operator>.addition 0x2233+685
<operator>.division ReplacementFor_tim/(0xd6b+3839-0x1c68)
<operator>.addition 0x370+613
<operator>.assignment ReplacementFor_tim=ReplacementFor_tim-\012ReplacementFor_b[ReplacementFor_j]*(0xe88+2687-0x1905)
<operator>.postIncrement ReplacementFor_co++
<operator>.postIncrement ReplacementFor_j++
<operator>.postIncrement ReplacementFor_z++
<operator>.addition 0xa8f+3438
<operator>.addition 0x2fd+5356
<operator>.addition 0x15ac+2730
<operator>.subtraction 0xe2a+3051-0x1a13
<operator>.subtraction 0xd6b+3839-0x1c68
<operator>.division ReplacementFor_tim/(0x1167+2732-0x1c11)
<operator>.postDecrement ReplacementFor_j--
<operator>.postDecrement ReplacementFor_j--
<operator>.addition 0xe2a+3051
<operator>.addition 0xd6b+3839
<operator>.subtraction 0x1167+2732-0x1c11
<operator>.subtraction ReplacementFor_tim-\012ReplacementFor_b[ReplacementFor_j]*(0xe88+2687-0x1905)
<operator>.addition 0x1167+2732
<operator>.multiplication ReplacementFor_b[ReplacementFor_j]*(0xe88+2687-0x1905)
<operator>.subtraction 0xe88+2687-0x1905
<operator>.addition 0xe88+2687
<operator>.addressOf &l
<operator>.addressOf &\012ReplacementFor_ti
<operator>.addressOf &ReplacementFor_n
<operator>.addressOf &ReplacementFor_c
<operator>.addressOf &ReplacementFor_a[ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_a[ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_b[ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_a[ReplacementFor_k++]
<operator>.indirectIndexAccess ReplacementFor_b[ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_b[ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_b[ReplacementFor_j++]
<operator>.indirectIndexAccess ReplacementFor_d[ReplacementFor_z++]
<operator>.indirectIndexAccess ReplacementFor_b[\012ReplacementFor_k]
<operator>.indirectIndexAccess ReplacementFor_b[\012ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_d[\012ReplacementFor_j--]
<operator>.indirectIndexAccess ReplacementFor_d[ReplacementFor_j--]
<operator>.indirectIndexAccess ReplacementFor_b[ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_b[ReplacementFor_j]
>>>PDG&121 0->2 0->3 0->4 0->5 0->6 0->9 0->11 0->13 0->14 0->15 0->17 0->18 0->19 0->20 0->21 0->24 0->28 0->29 0->30 0->31 0->32 0->33 0->34 0->35 0->37 0->38 0->40 0->42 0->43 0->44 0->45 0->47 0->48 0->51 0->52 0->53 0->54 0->56 0->57 0->58 0->59 0->60 0->61 0->62 0->63 0->64 0->66 0->67 0->68 0->69 0->70 0->72 0->74 0->75 0->76 0->77 0->79 0->80 0->81 0->82 0->84 0->85 0->86 0->87 0->88 0->89 0->90 0->91 0->92 0->93 0->94 0->95 0->96 0->97 0->98 0->99 0->101 0->102 2->1 2->1 3->1 3->1 4->1 4->5 5->1 5->1 5->1 5->5 5->6 5->8 5->9 5->10 5->11 5->12 5->13 5->14 5->17 5->19 5->20 5->22 5->23 5->24 5->25 5->27 5->29 5->31 5->32 5->34 5->35 5->37 5->42 5->43 5->44 5->45 5->47 5->48 5->59 5->60 5->103 5->104 5->105 5->106 6->1 6->5 7->1 7->1 7->5 8->1 8->1 9->1 9->1 9->1 9->1 9->20 9->56 9->68 10->1 10->1 10->1 10->61 11->1 11->19 12->1 12->1 12->1 12->28 12->64 12->85 13->1 13->1 13->29 13->42 13->51 13->58 13->67 14->1 14->1 14->14 14->15 14->15 14->16 14->33 14->107 14->108 15->1 15->14 16->1 17->1 17->17 17->18 17->18 17->26 17->33 17->37 17->61 17->109 17->110 18->1 18->17 19->1 19->1 19->1 19->36 19->62 19->62 19->70 19->80 19->111 20->1 20->1 20->1 20->9 20->29 20->38 20->39 20->40 20->41 20->42 20->53 20->56 20->56 20->57 20->63 20->64 20->65 20->66 20->74 20->75 20->76 20->77 20->87 20->88 20->89 21->1 21->7 21->7 22->1 22->8 23->1 23->1 23->14 24->1 24->10 24->10 25->1 25->1 25->17 26->1 26->1 26->1 26->36 27->1 27->12 27->37 27->84 28->1 28->1 28->64 28->85 29->1 29->1 29->6 31->1 31->8 31->8 31->22 31->22 33->1 33->1 33->1 33->14 33->46 33->61 33->69 33->79 34->1 34->12 34->12 34->27 34->27 35->1 35->19 35->19 36->1 36->1 36->19 36->28 36->35 36->48 36->49 36->50 36->71 36->72 36->73 36->73 36->81 36->82 36->91 36->92 36->96 36->97 36->99 36->112 36->116 36->119 37->1 37->20 37->20 37->38 37->38 37->53 38->1 38->1 38->1 38->17 38->38 38->51 38->52 38->52 38->85 38->113 39->1 39->1 39->40 39->86 40->1 40->1 40->1 40->66 40->67 40->78 41->1 41->1 41->57 41->93 42->1 42->1 42->6 44->1 44->23 44->23 45->1 45->25 45->25 46->1 46->1 46->1 46->61 49->1 49->1 49->1 49->36 50->1 50->1 50->1 51->1 51->1 51->29 52->1 52->38 53->1 53->1 53->1 53->17 53->53 53->54 53->54 53->55 53->86 53->114 53->115 54->1 54->53 55->1 55->1 55->1 55->40 56->1 56->1 56->1 56->9 56->20 56->56 56->67 56->68 56->68 56->76 56->88 56->93 56->117 57->1 57->1 57->1 57->57 57->58 57->77 57->78 57->89 57->90 57->94 57->94 57->95 57->118 58->1 58->1 58->42 61->33 62->1 62->36 62->36 62->81 62->92 63->1 63->39 63->39 64->1 64->53 65->1 66->1 66->1 66->41 66->41 67->1 67->1 67->42 67->58 68->1 68->56 69->1 69->46 69->46 70->1 70->62 70->62 71->1 71->1 71->49 71->49 72->1 72->50 72->50 73->1 73->1 73->1 73->36 73->83 73->84 73->98 73->100 73->100 73->101 73->102 73->120 75->1 75->66 75->66 76->1 76->56 76->56 77->1 77->57 77->57 78->1 78->1 78->40 78->58 78->58 81->1 81->71 81->71 83->1 83->1 83->19 84->1 84->37 85->1 86->40 90->1 90->78 90->78 91->1 91->81 91->81 92->1 92->19 92->73 92->73 92->98 93->57 94->57 97->1 97->92 97->92 98->1 98->83 98->83 100->1 100->1 100->36 100->98 100->98 101->1 101->100 101->100
>>>Token main ( ) { freopen ( " \x42 \x2d \x73 \x6d \x61 \x6c \x6c \x2d \x61 \x74 \x74 \x65 \x6d \x70 \x74 \x30 \x2e \x69 \x6e " , " \x72 " , stdin ) ; freopen ( " \x42 \x73 \x2e \x74 \x78 \x74 " , " \x77 " , stdout ) ; int t , ReplacementFor_n , l , ReplacementFor_c , ReplacementFor_ti , i , ReplacementFor_j , ReplacementFor_a [ ( 0x6ff + 933 - 0x6bc ) ] , ReplacementFor_tot , ReplacementFor_tim , ReplacementFor_co , ReplacementFor_b [ ( 0x528 + 7494 - 0x1e86 ) ] , ReplacementFor_d [ ( 0x3ed + 1528 - 0x5fd ) ] , ReplacementFor_k , ReplacementFor_z ; scanf ( " \x25 \x64 " , & t ) ; for ( i = ( 0x5c0 + 4228 - 0x1643 ) ; i <= t ; i ++ ) { ReplacementFor_tot = ReplacementFor_co = ( 0x533 + 8584 - 0x26bb ) ; scanf ( " \x25 \x64 \x25 \x64 \x25 \x64 \x25 \x64 " , & l , & ReplacementFor_ti , & ReplacementFor_n , & ReplacementFor_c ) ; for ( ReplacementFor_j = ( 0x51 + 8755 - 0x2284 ) ; ReplacementFor_j < ReplacementFor_c ; ReplacementFor_j ++ ) scanf ( " \x25 \x64 " , & ReplacementFor_a [ ReplacementFor_j ] ) ; ReplacementFor_k = ( 0x1a3d + 297 - 0x1b66 ) ; for ( ReplacementFor_j = ( 0x800 + 3759 - 0x16af ) ; ReplacementFor_j < ReplacementFor_n ; ReplacementFor_j ++ ) { ReplacementFor_b [ ReplacementFor_j ] = ReplacementFor_a [ ReplacementFor_k ++ ] ; if ( ReplacementFor_k == ReplacementFor_c ) ReplacementFor_k = ( 0x165d + 3172 - 0x22c1 ) ; } ReplacementFor_tim = ReplacementFor_ti ; ReplacementFor_j = ReplacementFor_co = ( 0xdb7 + 5376 - 0x22b7 ) ; while ( ReplacementFor_tim > ( 0x2108 + 552 - 0x2330 ) ) { if ( ReplacementFor_b [ ReplacementFor_j ] > ReplacementFor_tim / ( 0x2233 + 685 - 0x24de ) ) { ReplacementFor_b [ ReplacementFor_j ] = ReplacementFor_b [ ReplacementFor_j ] - ReplacementFor_tim / ( 0xd6b + 3839 - 0x1c68 ) ; ReplacementFor_tim = ( 0x370 + 613 - 0x5d5 ) ; break ; } else if ( ReplacementFor_tim / ( 0x1167 + 2732 - 0x1c11 ) >= ReplacementFor_b [ ReplacementFor_j ] ) { ReplacementFor_tim = ReplacementFor_tim - ReplacementFor_b [ ReplacementFor_j ] * ( 0xe88 + 2687 - 0x1905 ) ; ReplacementFor_co ++ ; } ReplacementFor_j ++ ; } ReplacementFor_tot = ReplacementFor_ti ; if ( ( ReplacementFor_n - ReplacementFor_co ) <= l ) { while ( ReplacementFor_co < ReplacementFor_n ) { ReplacementFor_tot += ReplacementFor_b [ ReplacementFor_j ++ ] ; ReplacementFor_co ++ ; } printf ( " \x43 \x61 \x73 \x65 \x20 \x23 \x25 \x64 \x3a \x20 \x25 \x64 " " \n " , i , ReplacementFor_tot ) ; } else { ReplacementFor_z = ( 0xe50 + 2199 - 0x16e7 ) ; for ( ReplacementFor_k = ReplacementFor_j ; ReplacementFor_k < ReplacementFor_n ; ReplacementFor_k ++ ) ReplacementFor_d [ ReplacementFor_z ++ ] = ReplacementFor_b [ ReplacementFor_k ] ; qsort ( ReplacementFor_d , ReplacementFor_z , sizeof ( int ) , ReplacementFor_compare ) ; ReplacementFor_j = ReplacementFor_z - ( 0xa8f + 3438 - 0x17fc ) ; while ( l > ( 0x2fd + 5356 - 0x17e9 ) ) { ReplacementFor_tot += ReplacementFor_d [ ReplacementFor_j -- ] ; l -- ; } while ( ReplacementFor_j >= ( 0x15ac + 2730 - 0x2056 ) ) ReplacementFor_tot += ReplacementFor_d [ ReplacementFor_j -- ] * ( 0xe2a + 3051 - 0x1a13 ) ; printf ( " \x43 \x61 \x73 \x65 \x20 \x23 \x25 \x64 \x3a \x20 \x25 \x64 " " \n " , i , ReplacementFor_tot ) ; } } }
>>>Func
METHOD ReplacementFor_try_link
METHOD_RETURN int
PARAM char*ReplacementFor_dest
PARAM void*\012ReplacementFor_arg
<operator>.assignment *ReplacementFor_a=\012ReplacementFor_arg
RETURN return ReplacementFor_linkat(ReplacementFor_a->\012ReplacementFor_srcdir,ReplacementFor_a->ReplacementFor_srcname,ReplacementFor_a\012->ReplacementFor_dstdir,ReplacementFor_dest,ReplacementFor_a->flags); return ReplacementFor_linkat(ReplacementFor_a->\012ReplacementFor_srcdir,ReplacementFor_a->ReplacementFor_srcname,ReplacementFor_a\012->ReplacementFor_dstdir,ReplacementFor_dest,ReplacementFor_a->flags);
ReplacementFor_linkat ReplacementFor_linkat(ReplacementFor_a->\012ReplacementFor_srcdir,ReplacementFor_a->ReplacementFor_srcname,ReplacementFor_a\012->ReplacementFor_dstdir,ReplacementFor_dest,ReplacementFor_a->flags)
>>>PDG&7 0->2 0->3 0->4 0->6 2->6 3->4 4->1 4->1 4->1 5->1 6->1 6->1 6->1 6->1 6->1 6->1 6->5
>>>Token static int ReplacementFor_try_link ( char * ReplacementFor_dest , void * ReplacementFor_arg ) { struct ReplacementFor_link_arg * ReplacementFor_a = ReplacementFor_arg ; return ReplacementFor_linkat ( ReplacementFor_a -> ReplacementFor_srcdir , ReplacementFor_a -> ReplacementFor_srcname , ReplacementFor_a -> ReplacementFor_dstdir , ReplacementFor_dest , ReplacementFor_a -> flags ) ; }
>>>Func
METHOD ReplacementFor_ARGMATCH_VERIFY
METHOD_RETURN ANY
PARAM ReplacementFor_time_spec_string
PARAM ReplacementFor_time_spec
>>>PDG&4 0->2 0->3 2->1 3->1
>>>Token ReplacementFor_ARGMATCH_VERIFY ( ReplacementFor_time_spec_string , ReplacementFor_time_spec ) ; static char const ReplacementFor_rfc_email_format [ ] = " \x25 \x61 \x2c \x20 \x25 \x64 \x20 \x25 \x62 \x20 \x25 \x59 \x20 \x25 \x48 \x3a \x25 \x4d \x3a \x25 \x53 \x20 \x25 \x7a " ; enum { ReplacementFor_DEBUG_DATE_PARSING_OPTION = CHAR_MAX + ( 0x1c89 + 2460 - 0x2624 ) , ReplacementFor_RESOLUTION_OPTION , ReplacementFor_RFC_3339_OPTION } ; static char const ReplacementFor_short_options [ ] = " \x64 \x3a \x66 \x3a \x49 \x3a \x3a \x72 \x3a \x52 \x73 \x3a \x75 " ; static struct ReplacementFor_option const ReplacementFor_long_options [ ] = { { " \x64 \x61 \x74 \x65 " , ReplacementFor_required_argument , NULL , ( ( char ) ( 0x18ca + 3058 - 0x2458 ) ) } , { " \x64 \x65 \x62 \x75 \x67 " , ReplacementFor_no_argument , NULL , ReplacementFor_DEBUG_DATE_PARSING_OPTION } , { " \x66 \x69 \x6c \x65 " , ReplacementFor_required_argument , NULL , ( ( char ) ( 0xf0f + 1442 - 0x144b ) ) } , { " \x69 \x73 \x6f \x2d \x38 \x36 \x30 \x31 " , ReplacementFor_optional_argument , NULL , ( ( char ) ( 0x687 + 7500 - 0x238a ) ) } , { " \x72 \x65 \x66 \x65 \x72 \x65 \x6e \x63 \x65 " , ReplacementFor_required_argument , NULL , ( ( char ) ( 0xb3c + 6109 - 0x22a7 ) ) } , { " \x72 \x65 \x73 \x6f \x6c \x75 \x74 \x69 \x6f \x6e " , ReplacementFor_no_argument , NULL , ReplacementFor_RESOLUTION_OPTION } , { " \x72 \x66 \x63 \x2d \x65 \x6d \x61 \x69 \x6c " , ReplacementFor_no_argument , NULL , ( ( char ) ( 0x8a9 + 884 - 0xbcb ) ) } , { " \x72 \x66 \x63 \x2d \x38 \x32 \x32 " , ReplacementFor_no_argument , NULL , ( ( char ) ( 0x1459 + 2891 - 0x1f52 ) ) } , { " \x72 \x66 \x63 \x2d \x32 \x38 \x32 \x32 " , ReplacementFor_no_argument , NULL , ( ( char ) ( 0xbbc + 839 - 0xeb1 ) ) } , { " \x72 \x66 \x63 \x2d \x33 \x33 \x33 \x39 " , ReplacementFor_required_argument , NULL , ReplacementFor_RFC_3339_OPTION } , { " \x73 \x65 \x74 " , ReplacementFor_required_argument , NULL , ( ( char ) ( 0x195c + 2500 - 0x22ad ) ) } , { " \x75 \x63 \x74 " , ReplacementFor_no_argument , NULL , ( ( char ) ( 0xc69 + 5733 - 0x2259 ) ) } , { " \x75 \x74 \x63 " , ReplacementFor_no_argument , NULL , ( ( char ) ( 0x1981 + 514 - 0x1b0e ) ) } , { " \x75 \x6e \x69 \x76 \x65 \x72 \x73 \x61 \x6c " , ReplacementFor_no_argument , NULL , ( ( char ) ( 0x643 + 5619 - 0x1bc1 ) ) } , { ReplacementFor_GETOPT_HELP_OPTION_DECL } , { ReplacementFor_GETOPT_VERSION_OPTION_DECL } , { NULL , ( 0xa96 + 5937 - 0x21c7 ) , NULL , ( 0x127a + 2832 - 0x1d8a ) } } ; static unsigned int ReplacementFor_parse_datetime_flags ; ReplacementFor_LOCALTIME_CACHE ReplacementFor_lse  ReplacementFor_ndif ReplacementFor_def  ReplacementFor__DATE_FMT ReplacementFor_lse  ReplacementFor_ndif void ReplacementFor_usage ( int status ) < ReplacementFor_missing ( ( char ) ( 0x1382 +1340 -0x1883 ) ) > { if ( status != EXIT_SUCCESS ) ReplacementFor_emit_try_help ( ) ; else { printf ( ReplacementFor__ ( " \ " ) , ReplacementFor_program_name , ReplacementFor_program_name ) ; fputs ( ReplacementFor__ ( " \ " ) , stdout ) ; ReplacementFor_emit_mandatory_arg_note ( ) ; fputs ( ReplacementFor__ ( " \ " ) , stdout ) ; fputs ( ReplacementFor__ ( " \ " ) , stdout ) ; fputs ( ReplacementFor__ ( " \ " ) , stdout ) ; fputs ( ReplacementFor__ ( " \ " ) , stdout ) ; fputs ( ReplacementFor__ ( " \ " ) , stdout ) ; fputs ( ReplacementFor__ ( " \ " ) , stdout ) ; fputs ( ReplacementFor__ ( " \ " ) , stdout ) ; fputs ( ReplacementFor__ ( " \ " ) , stdout ) ; fputs ( ReplacementFor__ ( " \ " ) , stdout ) ; fputs ( ReplacementFor_HELP_OPTION_DESCRIPTION , stdout ) ; fputs ( ReplacementFor_VERSION_OPTION_DESCRIPTION , stdout ) ; fputs ( ReplacementFor__ ( " \ " ) , stdout ) ; fputs ( ReplacementFor__ ( " \ " ) , stdout ) ; fputs ( ReplacementFor__ ( " \ " ) , stdout ) ; fputs ( ReplacementFor__ ( " \ " ) , stdout ) ; fputs ( ReplacementFor__ ( " \ " ) , stdout ) ; fputs ( ReplacementFor__ ( " \ " ) , stdout ) ; fputs ( ReplacementFor__ ( " \ " ) , stdout ) ; fputs ( ReplacementFor__ ( " \ " ) , stdout ) ; fputs ( ReplacementFor__ ( " \ " ) , stdout ) ; fputs ( ReplacementFor__ ( " \ " ) , stdout ) ; fputs ( ReplacementFor__ ( " \ " ) , stdout ) ; fputs ( ReplacementFor__ ( " \ " ) , stdout ) ; fputs ( ReplacementFor__ ( " \ " ) , stdout ) ; fputs ( ReplacementFor__ ( " \ " ) , stdout ) ; fputs ( ReplacementFor__ ( " \ " ) , stdout ) ; ReplacementFor_emit_ancillary_info ( ReplacementFor_PROGRAM_NAME ) ; } exit ( status ) ; }
>>>Func
METHOD ReplacementFor_WP
METHOD_RETURN double
PARAM int ReplacementFor_j
PARAM int ReplacementFor_n
<operator>.assignment ReplacementFor_tot=(0x930+609-0xb91)
<operator>.assignment ReplacementFor_win=(0x756+1852-0xe92)
RETURN return((double)(ReplacementFor_win))/((double)(\012ReplacementFor_tot)); return((double)(ReplacementFor_win))/((double)(\012ReplacementFor_tot));
<operator>.lessThan i<ReplacementFor_n
<operator>.postIncrement i++
<operator>.division ((double)(ReplacementFor_win))/((double)(\012ReplacementFor_tot))
<operator>.subtraction 0x930+609-0xb91
<operator>.subtraction 0x756+1852-0xe92
<operator>.assignment i\012=(0x580+4970-0x18ea)
<operator>.logicalOr ReplacementFor_fix[\012ReplacementFor_j][i]==((char)(0xab6+5421-0x1fb2))||ReplacementFor_fix[\012ReplacementFor_j][i]==((char)(0xc3b+2144-0x146b))
<operator>.addition 0x930+609
<operator>.addition 0x756+1852
<operator>.postIncrement ReplacementFor_tot++
<operator>.cast (double)(ReplacementFor_win)
<operator>.cast (double)(\012ReplacementFor_tot)
<operator>.subtraction 0x580+4970-0x18ea
<operator>.equals ReplacementFor_fix[\012ReplacementFor_j][i]==((char)(0xab6+5421-0x1fb2))
<operator>.equals ReplacementFor_fix[\012ReplacementFor_j][i]==((char)(0xc3b+2144-0x146b))
<operator>.equals ReplacementFor_fix[ReplacementFor_j][i]==((char)(0x4c7+1095-0x8dd))
<operator>.addition 0x580+4970
<operator>.cast (char)(0xab6+5421-0x1fb2)
<operator>.cast (char)(0xc3b+2144-0x146b)
<operator>.postIncrement ReplacementFor_win++
<operator>.subtraction 0xab6+5421-0x1fb2
<operator>.subtraction 0xc3b+2144-0x146b
<operator>.cast (char)(0x4c7+1095-0x8dd)
<operator>.addition 0xab6+5421
<operator>.addition 0xc3b+2144
<operator>.subtraction 0x4c7+1095-0x8dd
<operator>.addition 0x4c7+1095
<operator>.indirectIndexAccess ReplacementFor_fix[\012ReplacementFor_j][i]
<operator>.indirectIndexAccess ReplacementFor_fix[\012ReplacementFor_j][i]
<operator>.indirectIndexAccess ReplacementFor_fix[\012ReplacementFor_j]
UNKNOWN char char
<operator>.indirectIndexAccess ReplacementFor_fix[\012ReplacementFor_j]
UNKNOWN char char
<operator>.indirectIndexAccess ReplacementFor_fix[ReplacementFor_j][i]
<operator>.indirectIndexAccess ReplacementFor_fix[ReplacementFor_j]
UNKNOWN char char
>>>PDG&43 0->2 0->3 0->7 0->8 0->9 0->10 0->11 0->14 0->15 0->16 0->17 0->18 0->19 0->23 0->26 0->27 0->28 0->30 0->31 0->32 0->33 2->1 3->7 4->1 4->1 4->9 4->16 4->18 5->1 5->1 5->9 5->17 5->26 6->1 7->1 7->1 7->1 7->7 7->8 7->8 7->13 7->20 7->24 7->27 7->30 7->34 7->36 7->37 8->1 8->7 9->1 9->1 9->1 9->6 10->1 10->4 10->4 11->1 11->5 11->5 12->1 12->1 12->7 13->1 13->1 13->1 13->16 13->22 13->29 13->32 13->33 13->40 13->41 13->42 16->1 16->9 16->18 17->1 18->1 19->1 19->12 19->12 20->1 20->1 20->13 20->13 20->21 20->21 20->25 20->28 20->31 20->35 20->38 20->39 21->1 21->1 21->13 21->13 21->20 22->1 22->1 22->1 22->26 24->1 25->1 26->1 26->9 26->17 27->1 27->20 27->20 27->24 27->24 28->1 28->21 28->21 28->25 28->25 29->1 32->1 32->22 32->22 32->29 32->29
>>>Token double ReplacementFor_WP ( int ReplacementFor_j , int ReplacementFor_n ) { int i , ReplacementFor_tot = ( 0x930 + 609 - 0xb91 ) , ReplacementFor_win = ( 0x756 + 1852 - 0xe92 ) ; for ( i = ( 0x580 + 4970 - 0x18ea ) ; i < ReplacementFor_n ; i ++ ) if ( ReplacementFor_fix [ ReplacementFor_j ] [ i ] == ( ( char ) ( 0xab6 + 5421 - 0x1fb2 ) ) || ReplacementFor_fix [ ReplacementFor_j ] [ i ] == ( ( char ) ( 0xc3b + 2144 - 0x146b ) ) ) { ReplacementFor_tot ++ ; if ( ReplacementFor_fix [ ReplacementFor_j ] [ i ] == ( ( char ) ( 0x4c7 + 1095 - 0x8dd ) ) ) ReplacementFor_win ++ ; } return ( ( double ) ( ReplacementFor_win ) ) / ( ( double ) ( ReplacementFor_tot ) ) ; }
>>>Func
METHOD ReplacementFor_replace
METHOD_RETURN void
PARAM char*ReplacementFor_str
PARAM int*ReplacementFor_elp
PARAM int \012ReplacementFor_c
PARAM char**ReplacementFor_cl
<operator>.assignment ReplacementFor_replaced=\012(0x31b+9095-0x26a2)
<operator>.assignment ReplacementFor_el=*ReplacementFor_elp
<operator>.greaterThan ReplacementFor_el>(0xb56+3354-0x186f)
<operator>.subtraction 0x31b+9095-0x26a2
<operator>.addition 0x31b+9095
<operator>.subtraction 0xb56+3354-0x186f
<operator>.lessThan ReplacementFor_j<ReplacementFor_c
<operator>.postIncrement ReplacementFor_j++
IDENTIFIER ReplacementFor_replaced if (ReplacementFor_replaced)
<operator>.addition 0xb56+3354
<operator>.assignment ReplacementFor_j\012=(0x1162+1-0x1163)
ReplacementFor_replace ReplacementFor_replace(ReplacementFor_str,\012ReplacementFor_elp,ReplacementFor_c,ReplacementFor_cl)
<operator>.logicalOr (\012ReplacementFor_str[ReplacementFor_el-(0x1259+2620-0x1c94)]==ReplacementFor_cl[\012ReplacementFor_j][(0x12a1+1224-0x1769)]&&ReplacementFor_str[ReplacementFor_el-\012(0x537+40-0x55d)]==ReplacementFor_cl[ReplacementFor_j][(0xf07+3296-0x1be6)])||(\012ReplacementFor_str[ReplacementFor_el-(0x820+7319-0x24b6)]==ReplacementFor_cl[\012ReplacementFor_j][(0x1b99+1404-0x2114)]&&ReplacementFor_str[ReplacementFor_el-\012(0x462+4029-0x141d)]==ReplacementFor_cl[ReplacementFor_j][(0xcbf+5101-0x20ac)])
<operator>.subtraction 0x1162+1-0x1163
<operator>.assignment ReplacementFor_str[ReplacementFor_el-(0x1ad5+2700-0x255f)]=ReplacementFor_cl[\012ReplacementFor_j][(0xc1c+4854-0x1f10)]
<operator>.assignment ReplacementFor_str[ReplacementFor_el-\012(0xbc0+3758-0x1a6d)]='\0'
<operator>.assignment *ReplacementFor_elp=ReplacementFor_el-\012(0x1ab8+2159-0x2326)
<operator>.assignment ReplacementFor_replaced=(0xd23+3830-0x1c18)
<operator>.addition 0x1162+1
<operator>.logicalAnd ReplacementFor_str[ReplacementFor_el-(0x1259+2620-0x1c94)]==ReplacementFor_cl[\012ReplacementFor_j][(0x12a1+1224-0x1769)]&&ReplacementFor_str[ReplacementFor_el-\012(0x537+40-0x55d)]==ReplacementFor_cl[ReplacementFor_j][(0xf07+3296-0x1be6)]
<operator>.logicalAnd ReplacementFor_str[ReplacementFor_el-(0x820+7319-0x24b6)]==ReplacementFor_cl[\012ReplacementFor_j][(0x1b99+1404-0x2114)]&&ReplacementFor_str[ReplacementFor_el-\012(0x462+4029-0x141d)]==ReplacementFor_cl[ReplacementFor_j][(0xcbf+5101-0x20ac)]
<operator>.equals ReplacementFor_str[ReplacementFor_el-(0x1259+2620-0x1c94)]==ReplacementFor_cl[\012ReplacementFor_j][(0x12a1+1224-0x1769)]
<operator>.equals ReplacementFor_str[ReplacementFor_el-\012(0x537+40-0x55d)]==ReplacementFor_cl[ReplacementFor_j][(0xf07+3296-0x1be6)]
<operator>.equals ReplacementFor_str[ReplacementFor_el-(0x820+7319-0x24b6)]==ReplacementFor_cl[\012ReplacementFor_j][(0x1b99+1404-0x2114)]
<operator>.equals ReplacementFor_str[ReplacementFor_el-\012(0x462+4029-0x141d)]==ReplacementFor_cl[ReplacementFor_j][(0xcbf+5101-0x20ac)]
<operator>.subtraction ReplacementFor_el-\012(0x1ab8+2159-0x2326)
<operator>.subtraction 0xd23+3830-0x1c18
<operator>.subtraction ReplacementFor_el-(0x1ad5+2700-0x255f)
<operator>.subtraction 0xc1c+4854-0x1f10
<operator>.subtraction ReplacementFor_el-\012(0xbc0+3758-0x1a6d)
<operator>.subtraction 0x1ab8+2159-0x2326
<operator>.addition 0xd23+3830
<operator>.subtraction ReplacementFor_el-(0x1259+2620-0x1c94)
<operator>.subtraction 0x12a1+1224-0x1769
<operator>.subtraction ReplacementFor_el-\012(0x537+40-0x55d)
<operator>.subtraction 0xf07+3296-0x1be6
<operator>.subtraction ReplacementFor_el-(0x820+7319-0x24b6)
<operator>.subtraction 0x1b99+1404-0x2114
<operator>.subtraction ReplacementFor_el-\012(0x462+4029-0x141d)
<operator>.subtraction 0xcbf+5101-0x20ac
<operator>.subtraction 0x1ad5+2700-0x255f
<operator>.addition 0xc1c+4854
<operator>.subtraction 0xbc0+3758-0x1a6d
<operator>.addition 0x1ab8+2159
<operator>.subtraction 0x1259+2620-0x1c94
<operator>.addition 0x12a1+1224
<operator>.subtraction 0x537+40-0x55d
<operator>.addition 0xf07+3296
<operator>.subtraction 0x820+7319-0x24b6
<operator>.addition 0x1b99+1404
<operator>.subtraction 0x462+4029-0x141d
<operator>.addition 0xcbf+5101
<operator>.addition 0x1ad5+2700
<operator>.addition 0xbc0+3758
<operator>.addition 0x1259+2620
<operator>.addition 0x537+40
<operator>.addition 0x820+7319
<operator>.addition 0x462+4029
<operator>.indirectIndexAccess ReplacementFor_str[ReplacementFor_el-(0x1ad5+2700-0x255f)]
<operator>.indirectIndexAccess ReplacementFor_cl[\012ReplacementFor_j][(0xc1c+4854-0x1f10)]
<operator>.indirectIndexAccess ReplacementFor_str[ReplacementFor_el-\012(0xbc0+3758-0x1a6d)]
<operator>.indirection *ReplacementFor_elp
<operator>.indirectIndexAccess ReplacementFor_str[ReplacementFor_el-(0x1259+2620-0x1c94)]
<operator>.indirectIndexAccess ReplacementFor_cl[\012ReplacementFor_j][(0x12a1+1224-0x1769)]
<operator>.indirectIndexAccess ReplacementFor_str[ReplacementFor_el-\012(0x537+40-0x55d)]
<operator>.indirectIndexAccess ReplacementFor_cl[ReplacementFor_j][(0xf07+3296-0x1be6)]
<operator>.indirectIndexAccess ReplacementFor_str[ReplacementFor_el-(0x820+7319-0x24b6)]
<operator>.indirectIndexAccess ReplacementFor_cl[\012ReplacementFor_j][(0x1b99+1404-0x2114)]
<operator>.indirectIndexAccess ReplacementFor_str[ReplacementFor_el-\012(0x462+4029-0x141d)]
<operator>.indirectIndexAccess ReplacementFor_cl[ReplacementFor_j][(0xcbf+5101-0x20ac)]
<operator>.indirectIndexAccess ReplacementFor_cl[\012ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_cl[\012ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_cl[ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_cl[\012ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_cl[ReplacementFor_j]
>>>PDG&81 0->2 0->3 0->4 0->5 0->8 0->9 0->10 0->11 0->12 0->13 0->14 0->15 0->17 0->19 0->21 0->24 0->31 0->32 0->33 0->34 0->35 0->36 0->37 0->38 0->39 0->40 0->41 0->42 0->43 0->44 0->45 0->46 0->47 0->48 0->49 0->50 0->51 0->52 0->53 0->54 0->55 0->56 0->57 0->58 0->59 0->60 0->61 0->62 0->63 2->17 2->27 2->28 2->29 2->30 3->17 4->12 5->17 6->1 6->1 6->1 7->1 7->1 7->8 8->1 8->1 8->1 8->12 8->16 8->17 8->19 8->24 8->38 9->1 9->6 9->6 11->1 11->8 11->8 12->1 12->1 12->13 12->17 12->18 12->25 12->27 12->38 12->39 12->50 12->51 12->60 12->68 12->69 12->77 13->1 13->12 16->1 16->1 16->12 17->1 17->1 17->1 17->1 17->1 18->1 18->1 18->1 18->12 18->13 18->20 18->21 18->22 18->23 18->31 18->32 18->33 18->34 18->35 18->36 18->37 18->46 18->47 18->48 18->49 18->58 18->59 18->64 18->65 18->66 18->67 18->76 19->1 19->16 19->16 20->1 20->1 20->1 20->17 21->1 21->1 21->17 22->1 22->1 22->1 22->17 23->1 23->1 23->1 25->1 25->1 25->18 25->18 25->26 25->29 25->42 25->43 25->54 25->55 25->62 25->72 25->73 25->79 26->1 26->1 26->18 26->18 27->1 27->1 27->17 27->25 27->25 27->28 27->40 27->41 27->52 27->53 27->61 27->70 27->71 27->78 28->1 28->1 28->17 28->25 28->25 29->1 29->1 29->17 29->26 29->26 29->30 29->44 29->45 29->56 29->57 29->63 29->74 29->75 29->80 30->1 30->1 30->17 30->26 30->26 31->1 31->1 31->22 31->22 32->1 32->23 32->23 33->1 33->35 34->1 35->1 35->31 36->1 36->31 36->31 38->1 38->1 38->33 38->40 38->42 39->1 40->1 40->1 40->33 40->38 40->42 41->1 42->1 42->1 42->33 42->38 42->44 43->1 44->1 44->1 44->33 44->38 45->1 46->1 46->33 46->33 48->1 48->35 48->35 50->1 50->38 50->38 52->1 52->40 52->40 54->1 54->42 54->42 56->1 56->44 56->44
>>>Token void ReplacementFor_replace ( char * ReplacementFor_str , int * ReplacementFor_elp , int ReplacementFor_c , char * * ReplacementFor_cl ) { int ReplacementFor_replaced = ( 0x31b + 9095 - 0x26a2 ) ; int ReplacementFor_el = * ReplacementFor_elp ; if ( ReplacementFor_el > ( 0xb56 + 3354 - 0x186f ) ) { int ReplacementFor_j ; for ( ReplacementFor_j = ( 0x1162 + 1 - 0x1163 ) ; ReplacementFor_j < ReplacementFor_c ; ReplacementFor_j ++ ) { if ( ( ReplacementFor_str [ ReplacementFor_el - ( 0x1259 + 2620 - 0x1c94 ) ] == ReplacementFor_cl [ ReplacementFor_j ] [ ( 0x12a1 + 1224 - 0x1769 ) ] && ReplacementFor_str [ ReplacementFor_el - ( 0x537 + 40 - 0x55d ) ] == ReplacementFor_cl [ ReplacementFor_j ] [ ( 0xf07 + 3296 - 0x1be6 ) ] ) || ( ReplacementFor_str [ ReplacementFor_el - ( 0x820 + 7319 - 0x24b6 ) ] == ReplacementFor_cl [ ReplacementFor_j ] [ ( 0x1b99 + 1404 - 0x2114 ) ] && ReplacementFor_str [ ReplacementFor_el - ( 0x462 + 4029 - 0x141d ) ] == ReplacementFor_cl [ ReplacementFor_j ] [ ( 0xcbf + 5101 - 0x20ac ) ] ) ) { ReplacementFor_str [ ReplacementFor_el - ( 0x1ad5 + 2700 - 0x255f ) ] = ReplacementFor_cl [ ReplacementFor_j ] [ ( 0xc1c + 4854 - 0x1f10 ) ] ; ReplacementFor_str [ ReplacementFor_el - ( 0xbc0 + 3758 - 0x1a6d ) ] = ' \0 ' ; * ReplacementFor_elp = ReplacementFor_el - ( 0x1ab8 + 2159 - 0x2326 ) ; ReplacementFor_replaced = ( 0xd23 + 3830 - 0x1c18 ) ; break ; } } if ( ReplacementFor_replaced ) ReplacementFor_replace ( ReplacementFor_str , ReplacementFor_elp , ReplacementFor_c , ReplacementFor_cl ) ; } }
>>>Func
METHOD main
METHOD_RETURN int
<operator>.assignment *ReplacementFor_p=fopen("\x69\x6e\x2e\x69\x6e","\x72")
<operator>.assignment *\012ReplacementFor_q=fopen("\x6f\x75\x74\x2e\x74\x78\x74","\x77")
fscanf fscanf(ReplacementFor_p,"\x25\x64",\012&ReplacementFor_numT)
RETURN return(0x1754+3460-0x24d8); return(0x1754+3460-0x24d8);
<operator>.lessThan i<ReplacementFor_numT
<operator>.postIncrement i++
<operator>.subtraction 0x1754+3460-0x24d8
fopen fopen("\x69\x6e\x2e\x69\x6e","\x72")
fopen fopen("\x6f\x75\x74\x2e\x74\x78\x74","\x77")
<operator>.assignment i=(0x193a+774-0x1c40)
fscanf fscanf(ReplacementFor_p,"\x25\x64",&ReplacementFor_numC)
fscanf fscanf(ReplacementFor_p,"\x25\x64",&ReplacementFor_numD)
<operator>.assignment ReplacementFor_k=(0x364+7472-0x2094)
<operator>.assignment ReplacementFor_temp[ReplacementFor_k]='\0'
<operator>.assignment ReplacementFor_j=(0x835+2396-0x1191)
fprintf fprintf(ReplacementFor_q "\x43\x61\x73\x65\x20\x23\x25\x64\x3a\x20\x5b" i+\012(0xa6d+1298-0xf7e))
fprintf fprintf(ReplacementFor_q,"\x5d" "\n")
<operator>.notEquals ReplacementFor_numC\012!=(0x15c3+4329-0x26ac)
<operator>.notEquals ReplacementFor_numD!=(0x22c+5838-0x18fa)
fscanf fscanf(\012ReplacementFor_p,"\x25\x64",&ReplacementFor_numN)
<operator>.lessThan ReplacementFor_j<ReplacementFor_numN
<operator>.postIncrement ReplacementFor_j++
<operator>.equals ReplacementFor_temp[ReplacementFor_j]=='\0'
<operator>.notEquals ReplacementFor_temp[\012ReplacementFor_j]!='\0'
<operator>.addition 0x1754+3460
<operator>.subtraction 0x193a+774-0x1c40
<operator>.assignment ReplacementFor_c=fgetc(\012ReplacementFor_p)
<operator>.subtraction 0x364+7472-0x2094
<operator>.assignment ReplacementFor_j=(0xa6d+4389-0x1b92)
<operator>.assignment ReplacementFor_temp[ReplacementFor_k]=ReplacementFor_recN[\012ReplacementFor_j]
<operator>.assignment ReplacementFor_comb=(0x89b+3770-0x1755)
<operator>.assignment ReplacementFor_oppo=\012(0x1673+3509-0x2428)
<operator>.postIncrement ReplacementFor_k++
<operator>.subtraction 0x835+2396-0x1191
<operator>.addition i+\012(0xa6d+1298-0xf7e)
fprintf fprintf(\012ReplacementFor_q,"\x5d" "\n")
fprintf fprintf(ReplacementFor_q,"\x2c\x20\x25\x63",\012ReplacementFor_temp[ReplacementFor_j++])
<operator>.addition 0x193a+774
<operator>.subtraction 0x15c3+4329-0x26ac
<operator>.lessThan ReplacementFor_j<ReplacementFor_numC
<operator>.postIncrement ReplacementFor_j++
<operator>.subtraction 0x22c+5838-0x18fa
<operator>.lessThan ReplacementFor_j<ReplacementFor_numD
<operator>.postIncrement ReplacementFor_j++
<operator>.lessThan ReplacementFor_j<\012ReplacementFor_numN
<operator>.postIncrement ReplacementFor_j++
<operator>.addition 0x364+7472
<operator>.lessThan m<\012ReplacementFor_k
<operator>.postIncrement m++
<operator>.equals ReplacementFor_comb==(0xd58+1649-0x13c9)
<operator>.addition 0x835+2396
<operator>.subtraction 0xa6d+1298-0xf7e
fprintf fprintf(ReplacementFor_q,"\x25\x63"\012,ReplacementFor_temp[ReplacementFor_j++])
<operator>.addition 0x15c3+4329
<operator>.assignment ReplacementFor_j=(0x66f+4620-0x187b)
<operator>.assignment ReplacementFor_c=fgetc(\012ReplacementFor_p)
<operator>.addition 0x22c+5838
<operator>.assignment ReplacementFor_j=\012(0xe45+4325-0x1f2a)
<operator>.assignment ReplacementFor_c=fgetc(ReplacementFor_p)
fgetc fgetc(\012ReplacementFor_p)
<operator>.assignment ReplacementFor_j=(0x295+859-0x5f0)
<operator>.assignment ReplacementFor_recN[ReplacementFor_j]=\012fgetc(ReplacementFor_p)
<operator>.subtraction 0xa6d+4389-0x1b92
<operator>.subtraction 0x89b+3770-0x1755
<operator>.subtraction 0x1673+3509-0x2428
<operator>.assignment m=ReplacementFor_k-(0x73f+2397-0x109b)
<operator>.addition 0xa6d+1298
<operator>.equals ReplacementFor_c==((char)(0x1b7d+393-0x1ce6))
<operator>.assignment ReplacementFor_c=fgetc(ReplacementFor_p)
<operator>.lessThan ReplacementFor_k<(0x16d6+3290-0x23ad)
<operator>.postIncrement ReplacementFor_k++
<operator>.equals ReplacementFor_c==\012((char)(0x7da+6462-0x20f8))
<operator>.assignment ReplacementFor_c=fgetc(ReplacementFor_p)
<operator>.lessThan ReplacementFor_k<(0x12cf+4346-0x23c7)
<operator>.postIncrement ReplacementFor_k++
<operator>.addition 0xa6d+4389
<operator>.addition 0x89b+3770
<operator>.addition 0x1673+3509
<operator>.lessThan ReplacementFor_n<\012ReplacementFor_numC
<operator>.postIncrement ReplacementFor_n++
<operator>.equals ReplacementFor_comb==\012(0x367+8546-0x24c8)
<operator>.subtraction 0xd58+1649-0x13c9
<operator>.lessThan m<ReplacementFor_k
<operator>.postIncrement m++
<operator>.postIncrement ReplacementFor_j++
<operator>.subtraction 0x66f+4620-0x187b
fgetc fgetc(\012ReplacementFor_p)
<operator>.assignment ReplacementFor_k=(0xc84+531-0xe97)
<operator>.assignment ReplacementFor_recC[\012ReplacementFor_j][ReplacementFor_k]=ReplacementFor_c
<operator>.assignment ReplacementFor_c=fgetc(\012ReplacementFor_p)
<operator>.subtraction 0xe45+4325-0x1f2a
fgetc fgetc(ReplacementFor_p)
<operator>.assignment ReplacementFor_k=(0x8bf+4472-0x1a37)
<operator>.assignment ReplacementFor_recD[ReplacementFor_j][ReplacementFor_k]=\012ReplacementFor_c
<operator>.assignment ReplacementFor_c=fgetc(ReplacementFor_p)
<operator>.subtraction 0x295+859-0x5f0
fgetc fgetc(ReplacementFor_p)
<operator>.subtraction ReplacementFor_k-(0x73f+2397-0x109b)
<operator>.assignment ReplacementFor_n=(0xac3+2068-0x12d7)
<operator>.addition 0xd58+1649
<operator>.assignment m=\012(0x34f+53-0x384)
<operator>.postIncrement ReplacementFor_j++
<operator>.addition 0x66f+4620
<operator>.cast (char)(0x1b7d+393-0x1ce6)
fgetc fgetc(ReplacementFor_p)
<operator>.subtraction 0x16d6+3290-0x23ad
<operator>.addition 0xe45+4325
<operator>.cast (char)(0x7da+6462-0x20f8)
fgetc fgetc(ReplacementFor_p)
<operator>.subtraction 0x12cf+4346-0x23c7
<operator>.addition 0x295+859
<operator>.subtraction 0x73f+2397-0x109b
<operator>.logicalOr (ReplacementFor_recC[ReplacementFor_n\012][(0x260+8022-0x21b5)]==ReplacementFor_temp[ReplacementFor_k]&&\012ReplacementFor_recC[ReplacementFor_n][(0xb2+8734-0x22d0)]==ReplacementFor_temp[m\012])||(ReplacementFor_recC[ReplacementFor_n][(0x27d+2396-0xbd9)]==\012ReplacementFor_temp[ReplacementFor_k]&&ReplacementFor_recC[ReplacementFor_n][\012(0xd26+725-0xffa)]==ReplacementFor_temp[m])
<operator>.subtraction 0x367+8546-0x24c8
<operator>.lessThan ReplacementFor_n<ReplacementFor_numD
<operator>.postIncrement ReplacementFor_n++
<operator>.equals ReplacementFor_oppo==(0x18e4+863-0x1c42)
<operator>.subtraction 0x1b7d+393-0x1ce6
<operator>.subtraction 0xc84+531-0xe97
<operator>.addition 0x16d6+3290
fgetc fgetc(\012ReplacementFor_p)
<operator>.subtraction 0x7da+6462-0x20f8
<operator>.subtraction 0x8bf+4472-0x1a37
<operator>.addition 0x12cf+4346
fgetc fgetc(ReplacementFor_p)
<operator>.addition 0x73f+2397
<operator>.subtraction 0xac3+2068-0x12d7
<operator>.assignment ReplacementFor_temp[m]=\012ReplacementFor_recC[ReplacementFor_n][(0x742+3837-0x163d)]
<operator>.assignment ReplacementFor_k=m
<operator>.assignment ReplacementFor_comb=(0x3a2+5150-0x17bf)
<operator>.addition 0x367+8546
<operator>.subtraction 0x34f+53-0x384
<operator>.assignment ReplacementFor_n=\012(0x1d28+458-0x1ef2)
<operator>.addition 0x1b7d+393
<operator>.addition 0xc84+531
<operator>.addition 0x7da+6462
<operator>.addition 0x8bf+4472
<operator>.addition 0xac3+2068
<operator>.logicalAnd ReplacementFor_recC[ReplacementFor_n\012][(0x260+8022-0x21b5)]==ReplacementFor_temp[ReplacementFor_k]&&\012ReplacementFor_recC[ReplacementFor_n][(0xb2+8734-0x22d0)]==ReplacementFor_temp[m\012]
<operator>.logicalAnd ReplacementFor_recC[ReplacementFor_n][(0x27d+2396-0xbd9)]==\012ReplacementFor_temp[ReplacementFor_k]&&ReplacementFor_recC[ReplacementFor_n][\012(0xd26+725-0xffa)]==ReplacementFor_temp[m]
<operator>.addition 0x34f+53
<operator>.logicalOr (ReplacementFor_recD[ReplacementFor_n][(0x99+1822-0x7b7)]==ReplacementFor_temp[\012ReplacementFor_k]&&ReplacementFor_recD[ReplacementFor_n][(0x1ed4+1866-0x261d)]==\012ReplacementFor_temp[m])||(ReplacementFor_recD[ReplacementFor_n][\012(0x191+8088-0x2128)]==ReplacementFor_temp[ReplacementFor_k]&&ReplacementFor_recD\012[ReplacementFor_n][(0x1c97+1850-0x23d1)]==ReplacementFor_temp[m])
<operator>.subtraction 0x18e4+863-0x1c42
<operator>.equals ReplacementFor_recC[ReplacementFor_n\012][(0x260+8022-0x21b5)]==ReplacementFor_temp[ReplacementFor_k]
<operator>.equals ReplacementFor_recC[ReplacementFor_n][(0xb2+8734-0x22d0)]==ReplacementFor_temp[m\012]
<operator>.equals ReplacementFor_recC[ReplacementFor_n][(0x27d+2396-0xbd9)]==\012ReplacementFor_temp[ReplacementFor_k]
<operator>.equals ReplacementFor_recC[ReplacementFor_n][\012(0xd26+725-0xffa)]==ReplacementFor_temp[m]
<operator>.subtraction 0x3a2+5150-0x17bf
<operator>.subtraction 0x1d28+458-0x1ef2
<operator>.assignment ReplacementFor_k=-(0x1007+3675-0x1e61)
<operator>.assignment ReplacementFor_oppo=(0x913+1519-0xf01)
<operator>.addition 0x18e4+863
<operator>.subtraction 0x742+3837-0x163d
<operator>.addition 0x3a2+5150
<operator>.addition 0x1d28+458
<operator>.logicalAnd ReplacementFor_recD[ReplacementFor_n][(0x99+1822-0x7b7)]==ReplacementFor_temp[\012ReplacementFor_k]&&ReplacementFor_recD[ReplacementFor_n][(0x1ed4+1866-0x261d)]==\012ReplacementFor_temp[m]
<operator>.logicalAnd ReplacementFor_recD[ReplacementFor_n][\012(0x191+8088-0x2128)]==ReplacementFor_temp[ReplacementFor_k]&&ReplacementFor_recD\012[ReplacementFor_n][(0x1c97+1850-0x23d1)]==ReplacementFor_temp[m]
<operator>.subtraction 0x260+8022-0x21b5
<operator>.subtraction 0xb2+8734-0x22d0
<operator>.subtraction 0x27d+2396-0xbd9
<operator>.subtraction 0xd26+725-0xffa
<operator>.addition 0x742+3837
<operator>.equals ReplacementFor_recD[ReplacementFor_n][(0x99+1822-0x7b7)]==ReplacementFor_temp[\012ReplacementFor_k]
<operator>.equals ReplacementFor_recD[ReplacementFor_n][(0x1ed4+1866-0x261d)]==\012ReplacementFor_temp[m]
<operator>.equals ReplacementFor_recD[ReplacementFor_n][\012(0x191+8088-0x2128)]==ReplacementFor_temp[ReplacementFor_k]
<operator>.equals ReplacementFor_recD\012[ReplacementFor_n][(0x1c97+1850-0x23d1)]==ReplacementFor_temp[m]
<operator>.minus -(0x1007+3675-0x1e61)
<operator>.subtraction 0x913+1519-0xf01
<operator>.addition 0x260+8022
<operator>.addition 0xb2+8734
<operator>.addition 0x27d+2396
<operator>.addition 0xd26+725
<operator>.subtraction 0x1007+3675-0x1e61
<operator>.addition 0x913+1519
<operator>.subtraction 0x99+1822-0x7b7
<operator>.subtraction 0x1ed4+1866-0x261d
<operator>.subtraction 0x191+8088-0x2128
<operator>.subtraction 0x1c97+1850-0x23d1
<operator>.addition 0x1007+3675
<operator>.addition 0x99+1822
<operator>.addition 0x1ed4+1866
<operator>.addition 0x191+8088
<operator>.addition 0x1c97+1850
<operator>.addressOf &ReplacementFor_numC
<operator>.addressOf &ReplacementFor_numD
<operator>.indirectIndexAccess ReplacementFor_temp[ReplacementFor_k]
<operator>.addressOf &ReplacementFor_numN
<operator>.indirectIndexAccess ReplacementFor_temp[ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_temp[\012ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_temp[ReplacementFor_k]
<operator>.indirectIndexAccess ReplacementFor_recN[\012ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_temp[ReplacementFor_j++]
<operator>.indirectIndexAccess ReplacementFor_temp[ReplacementFor_j++]
<operator>.indirectIndexAccess ReplacementFor_recN[ReplacementFor_j]
UNKNOWN char char
<operator>.indirectIndexAccess ReplacementFor_recC[\012ReplacementFor_j][ReplacementFor_k]
UNKNOWN char char
<operator>.indirectIndexAccess ReplacementFor_recD[ReplacementFor_j][ReplacementFor_k]
<operator>.indirectIndexAccess ReplacementFor_recC[\012ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_recD[ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_temp[m]
<operator>.indirectIndexAccess ReplacementFor_recC[ReplacementFor_n][(0x742+3837-0x163d)]
<operator>.indirectIndexAccess ReplacementFor_recC[ReplacementFor_n\012][(0x260+8022-0x21b5)]
<operator>.indirectIndexAccess ReplacementFor_temp[ReplacementFor_k]
<operator>.indirectIndexAccess ReplacementFor_recC[ReplacementFor_n][(0xb2+8734-0x22d0)]
<operator>.indirectIndexAccess ReplacementFor_temp[m\012]
<operator>.indirectIndexAccess ReplacementFor_recC[ReplacementFor_n][(0x27d+2396-0xbd9)]
<operator>.indirectIndexAccess ReplacementFor_temp[ReplacementFor_k]
<operator>.indirectIndexAccess ReplacementFor_recC[ReplacementFor_n][\012(0xd26+725-0xffa)]
<operator>.indirectIndexAccess ReplacementFor_temp[m]
<operator>.indirectIndexAccess ReplacementFor_recC[ReplacementFor_n]
<operator>.indirectIndexAccess ReplacementFor_recC[ReplacementFor_n\012]
<operator>.indirectIndexAccess ReplacementFor_recC[ReplacementFor_n]
<operator>.indirectIndexAccess ReplacementFor_recC[ReplacementFor_n]
<operator>.indirectIndexAccess ReplacementFor_recC[ReplacementFor_n]
<operator>.indirectIndexAccess ReplacementFor_recD[ReplacementFor_n][(0x99+1822-0x7b7)]
<operator>.indirectIndexAccess ReplacementFor_temp[\012ReplacementFor_k]
<operator>.indirectIndexAccess ReplacementFor_recD[ReplacementFor_n][(0x1ed4+1866-0x261d)]
<operator>.indirectIndexAccess ReplacementFor_temp[m]
<operator>.indirectIndexAccess ReplacementFor_recD[ReplacementFor_n][\012(0x191+8088-0x2128)]
<operator>.indirectIndexAccess ReplacementFor_temp[ReplacementFor_k]
<operator>.indirectIndexAccess ReplacementFor_recD\012[ReplacementFor_n][(0x1c97+1850-0x23d1)]
<operator>.indirectIndexAccess ReplacementFor_temp[m]
<operator>.indirectIndexAccess ReplacementFor_recD[ReplacementFor_n]
<operator>.indirectIndexAccess ReplacementFor_recD[ReplacementFor_n]
<operator>.indirectIndexAccess ReplacementFor_recD[ReplacementFor_n]
<operator>.indirectIndexAccess ReplacementFor_recD\012[ReplacementFor_n]
>>>PDG&229 0->4 0->6 0->7 0->8 0->9 0->10 0->12 0->13 0->15 0->17 0->18 0->19 0->20 0->21 0->22 0->23 0->24 0->25 0->26 0->27 0->29 0->34 0->35 0->36 0->37 0->38 0->39 0->40 0->41 0->42 0->43 0->44 0->45 0->46 0->47 0->48 0->49 0->50 0->51 0->52 0->53 0->54 0->55 0->58 0->61 0->64 0->65 0->66 0->68 0->69 0->71 0->72 0->73 0->75 0->76 0->77 0->78 0->79 0->80 0->81 0->82 0->83 0->84 0->85 0->86 0->87 0->88 0->90 0->92 0->93 0->95 0->97 0->98 0->99 0->101 0->103 0->104 0->106 0->107 0->108 0->110 0->111 0->112 0->113 0->115 0->116 0->117 0->118 0->119 0->120 0->121 0->122 0->123 0->124 0->125 0->126 0->127 0->128 0->130 0->132 0->133 0->135 0->136 0->137 0->138 0->139 0->142 0->144 0->149 0->150 0->153 0->154 0->155 0->156 0->159 0->160 0->161 0->162 0->163 0->169 0->170 0->171 0->172 0->173 0->174 0->175 0->176 0->177 0->178 0->179 0->180 0->181 0->182 0->183 0->184 2->1 2->1 2->4 3->1 3->1 3->1 3->17 4->1 4->1 4->1 4->6 4->12 5->1 6->1 6->1 6->1 6->6 6->7 6->7 6->12 6->13 6->14 6->15 6->16 6->17 6->17 6->19 6->20 6->21 6->22 6->24 6->29 6->30 6->35 6->36 6->36 6->40 6->43 6->48 6->52 6->53 6->55 6->58 6->64 6->68 6->77 6->185 6->186 6->187 6->188 6->189 7->1 7->6 8->1 8->1 8->5 9->2 9->2 10->3 10->3 11->1 11->1 11->6 12->1 12->1 12->13 12->19 12->41 12->80 12->88 13->1 13->1 13->20 13->21 13->44 13->93 13->116 14->1 14->1 14->1 14->99 15->1 15->1 16->1 16->1 16->1 16->103 17->1 17->1 17->37 17->54 18->1 18->1 18->17 19->1 19->1 19->1 19->12 19->41 19->41 19->56 19->80 19->87 19->104 20->1 20->1 20->1 20->13 20->44 20->44 20->59 20->92 20->108 20->116 21->1 21->1 21->1 21->12 21->22 21->28 21->46 21->46 21->61 21->61 21->62 21->97 21->112 22->1 22->1 22->21 22->22 22->23 22->23 22->31 22->32 22->33 22->34 22->46 22->49 22->51 22->65 22->66 22->67 22->78 22->79 22->83 22->99 22->101 22->113 22->127 22->191 22->192 23->1 23->22 24->1 24->1 24->18 24->25 24->37 24->54 24->103 24->190 24->194 25->1 25->1 25->25 25->38 25->86 25->190 25->193 27->1 27->11 27->11 28->1 28->1 28->1 29->1 29->14 29->14 30->1 30->1 30->22 31->1 31->1 31->145 31->166 32->1 32->1 32->51 32->82 33->1 33->1 33->1 33->118 34->1 34->1 34->99 35->1 35->16 35->16 36->1 37->1 37->1 37->17 38->1 38->1 38->18 38->54 40->1 40->19 40->19 41->1 41->1 41->12 41->19 41->41 41->42 41->42 41->57 41->69 41->71 41->80 41->88 41->89 41->105 41->107 41->119 41->120 41->121 41->135 41->136 41->196 42->1 42->41 43->1 43->20 43->20 44->1 44->1 44->13 44->20 44->44 44->45 44->45 44->60 44->73 44->75 44->93 44->94 44->109 44->111 44->116 44->123 44->124 44->125 44->137 44->138 44->198 45->1 45->44 46->1 46->22 46->46 46->47 46->47 46->63 46->98 46->195 47->1 47->46 49->1 49->1 49->34 49->50 49->80 49->82 49->84 49->100 49->115 49->128 49->130 49->132 49->139 50->1 50->49 51->1 51->1 51->1 51->84 51->102 51->133 51->142 53->1 53->17 53->17 53->36 53->36 54->1 54->1 54->18 54->38 54->38 56->1 56->1 56->41 57->1 57->1 57->69 59->1 59->1 59->44 60->1 60->1 60->73 61->1 61->12 61->28 61->98 62->1 62->1 62->46 63->1 63->1 63->1 64->1 64->30 64->30 65->1 65->32 65->32 66->1 66->33 66->33 67->1 67->1 67->49 69->1 69->1 69->1 69->69 69->70 69->90 69->105 69->106 69->119 69->135 69->196 70->1 70->1 70->69 71->1 71->1 71->71 71->72 71->72 71->90 71->91 71->107 71->121 71->122 71->197 71->200 72->1 72->71 73->1 73->1 73->1 73->73 73->74 73->95 73->109 73->110 73->123 73->137 73->198 74->1 74->1 74->73 75->1 75->1 75->75 75->76 75->76 75->95 75->96 75->111 75->125 75->126 75->199 75->201 76->1 76->75 80->1 80->1 80->1 80->12 80->19 80->81 80->114 80->140 80->145 80->159 80->170 80->204 80->205 80->213 81->1 81->80 82->1 82->1 82->49 82->50 82->51 83->1 83->51 83->51 84->1 84->1 84->34 84->85 84->116 84->118 84->134 84->144 84->150 84->153 84->156 85->1 85->84 86->1 87->1 87->56 87->56 88->13 88->57 88->106 88->122 89->1 89->1 89->71 90->1 90->1 91->1 91->1 91->1 91->90 92->1 92->59 92->59 93->21 93->60 93->110 93->126 94->1 94->1 94->75 95->1 95->1 96->1 96->1 96->1 96->95 97->1 97->62 97->62 98->1 98->12 98->63 99->1 99->49 99->67 99->67 100->1 100->1 100->80 102->1 102->1 102->84 103->1 103->86 105->1 106->13 106->70 106->88 106->122 107->1 107->71 107->71 109->1 110->21 110->74 110->93 110->126 111->1 111->75 111->75 113->1 113->99 113->99 114->1 114->1 114->1 114->80 114->81 114->129 114->130 114->131 114->149 114->154 114->155 114->163 114->202 114->203 114->212 115->1 115->82 115->82 116->1 116->1 116->1 116->13 116->20 116->117 116->143 116->157 116->164 116->176 116->181 116->217 116->218 116->225 117->1 117->116 118->1 118->1 118->1 118->84 118->85 119->1 119->69 119->69 119->105 119->105 120->1 120->89 120->89 122->13 122->88 122->91 123->1 123->73 123->73 123->109 123->109 124->1 124->94 124->94 126->21 126->93 126->96 128->1 128->100 128->100 129->1 129->1 129->1 129->148 129->165 129->167 130->1 130->1 130->34 130->49 130->84 131->1 131->1 131->82 133->1 133->102 133->102 134->1 134->1 134->116 140->1 140->1 140->114 140->114 140->141 140->147 140->161 140->172 140->208 140->209 140->215 141->1 141->1 141->114 141->114 143->1 143->1 143->1 143->116 143->117 143->151 143->152 143->168 143->169 143->174 143->175 143->180 144->1 144->118 144->118 145->1 145->140 145->140 145->146 145->147 145->160 145->166 145->171 145->206 145->207 145->214 146->1 146->1 146->140 146->140 147->1 147->141 147->141 147->145 147->148 147->162 147->166 147->173 147->210 147->211 147->216 148->1 148->1 148->141 148->141 148->165 148->167 149->1 149->131 149->131 150->1 150->134 150->134 151->1 151->1 151->34 151->84 152->1 152->1 152->118 154->1 157->1 157->1 157->143 157->143 157->158 157->166 157->178 157->183 157->221 157->222 157->227 158->1 158->1 158->143 158->143 159->1 160->1 161->1 162->1 164->1 164->1 164->157 164->157 164->165 164->177 164->182 164->219 164->220 164->226 165->1 165->1 165->148 165->157 165->157 165->167 166->1 166->158 166->158 166->167 166->179 166->184 166->223 166->224 166->228 167->1 167->1 167->148 167->158 167->158 167->165 168->1 168->151 169->1 169->152 169->152 174->1 174->168 174->168 176->1 177->1 178->1 179->1
>>>Token int main ( ) { FILE * ReplacementFor_p = fopen ( " \x69 \x6e \x2e \x69 \x6e " , " \x72 " ) ; FILE * ReplacementFor_q = fopen ( " \x6f \x75 \x74 \x2e \x74 \x78 \x74 " , " \x77 " ) ; int i , ReplacementFor_j , ReplacementFor_k , m , ReplacementFor_n ; int ReplacementFor_numT , ReplacementFor_numC , ReplacementFor_numD , ReplacementFor_numN ; char ReplacementFor_c ; char ReplacementFor_recC [ ReplacementFor_C ] [ ( 0xb9f + 47 - 0xbcb ) ] ; char ReplacementFor_recD [ ReplacementFor_D ] [ ( 0xc38 + 3127 - 0x186c ) ] ; char ReplacementFor_recN [ ReplacementFor_N ] ; char ReplacementFor_temp [ ReplacementFor_N ] ; int ReplacementFor_comb , ReplacementFor_oppo ; fscanf ( ReplacementFor_p , " \x25 \x64 " , & ReplacementFor_numT ) ; for ( i = ( 0x193a + 774 - 0x1c40 ) ; i < ReplacementFor_numT ; i ++ ) { fscanf ( ReplacementFor_p , " \x25 \x64 " , & ReplacementFor_numC ) ; if ( ReplacementFor_numC != ( 0x15c3 + 4329 - 0x26ac ) ) { for ( ReplacementFor_j = ( 0x66f + 4620 - 0x187b ) ; ReplacementFor_j < ReplacementFor_numC ; ReplacementFor_j ++ ) { ReplacementFor_c = fgetc ( ReplacementFor_p ) ; while ( ReplacementFor_c == ( ( char ) ( 0x1b7d + 393 - 0x1ce6 ) ) ) ReplacementFor_c = fgetc ( ReplacementFor_p ) ; for ( ReplacementFor_k = ( 0xc84 + 531 - 0xe97 ) ; ReplacementFor_k < ( 0x16d6 + 3290 - 0x23ad ) ; ReplacementFor_k ++ ) { ReplacementFor_recC [ ReplacementFor_j ] [ ReplacementFor_k ] = ReplacementFor_c ; ReplacementFor_c = fgetc ( ReplacementFor_p ) ; } } } fscanf ( ReplacementFor_p , " \x25 \x64 " , & ReplacementFor_numD ) ; if ( ReplacementFor_numD != ( 0x22c + 5838 - 0x18fa ) ) { for ( ReplacementFor_j = ( 0xe45 + 4325 - 0x1f2a ) ; ReplacementFor_j < ReplacementFor_numD ; ReplacementFor_j ++ ) { ReplacementFor_c = fgetc ( ReplacementFor_p ) ; while ( ReplacementFor_c == ( ( char ) ( 0x7da + 6462 - 0x20f8 ) ) ) ReplacementFor_c = fgetc ( ReplacementFor_p ) ; for ( ReplacementFor_k = ( 0x8bf + 4472 - 0x1a37 ) ; ReplacementFor_k < ( 0x12cf + 4346 - 0x23c7 ) ; ReplacementFor_k ++ ) { ReplacementFor_recD [ ReplacementFor_j ] [ ReplacementFor_k ] = ReplacementFor_c ; ReplacementFor_c = fgetc ( ReplacementFor_p ) ; } } } if ( fscanf ( ReplacementFor_p , " \x25 \x64 " , & ReplacementFor_numN ) ) { ReplacementFor_c = fgetc ( ReplacementFor_p ) ; for ( ReplacementFor_j = ( 0x295 + 859 - 0x5f0 ) ; ReplacementFor_j < ReplacementFor_numN ; ReplacementFor_j ++ ) { ReplacementFor_recN [ ReplacementFor_j ] = fgetc ( ReplacementFor_p ) ; } } ReplacementFor_k = ( 0x364 + 7472 - 0x2094 ) ; for ( ReplacementFor_j = ( 0xa6d + 4389 - 0x1b92 ) ; ReplacementFor_j < ReplacementFor_numN ; ReplacementFor_j ++ ) { ReplacementFor_temp [ ReplacementFor_k ] = ReplacementFor_recN [ ReplacementFor_j ] ; ReplacementFor_comb = ( 0x89b + 3770 - 0x1755 ) ; ReplacementFor_oppo = ( 0x1673 + 3509 - 0x2428 ) ; for ( m = ReplacementFor_k - ( 0x73f + 2397 - 0x109b ) ; m < ReplacementFor_k ; m ++ ) { for ( ReplacementFor_n = ( 0xac3 + 2068 - 0x12d7 ) ; ReplacementFor_n < ReplacementFor_numC ; ReplacementFor_n ++ ) { if ( ( ReplacementFor_recC [ ReplacementFor_n ] [ ( 0x260 + 8022 - 0x21b5 ) ] == ReplacementFor_temp [ ReplacementFor_k ] && ReplacementFor_recC [ ReplacementFor_n ] [ ( 0xb2 + 8734 - 0x22d0 ) ] == ReplacementFor_temp [ m ] ) || ( ReplacementFor_recC [ ReplacementFor_n ] [ ( 0x27d + 2396 - 0xbd9 ) ] == ReplacementFor_temp [ ReplacementFor_k ] && ReplacementFor_recC [ ReplacementFor_n ] [ ( 0xd26 + 725 - 0xffa ) ] == ReplacementFor_temp [ m ] ) ) { ReplacementFor_temp [ m ] = ReplacementFor_recC [ ReplacementFor_n ] [ ( 0x742 + 3837 - 0x163d ) ] ; ReplacementFor_k = m ; ReplacementFor_comb = ( 0x3a2 + 5150 - 0x17bf ) ; break ; } } if ( ReplacementFor_comb == ( 0x367 + 8546 - 0x24c8 ) ) break ; } if ( ReplacementFor_comb == ( 0xd58 + 1649 - 0x13c9 ) ) { for ( m = ( 0x34f + 53 - 0x384 ) ; m < ReplacementFor_k ; m ++ ) { for ( ReplacementFor_n = ( 0x1d28 + 458 - 0x1ef2 ) ; ReplacementFor_n < ReplacementFor_numD ; ReplacementFor_n ++ ) { if ( ( ReplacementFor_recD [ ReplacementFor_n ] [ ( 0x99 + 1822 - 0x7b7 ) ] == ReplacementFor_temp [ ReplacementFor_k ] && ReplacementFor_recD [ ReplacementFor_n ] [ ( 0x1ed4 + 1866 - 0x261d ) ] == ReplacementFor_temp [ m ] ) || ( ReplacementFor_recD [ ReplacementFor_n ] [ ( 0x191 + 8088 - 0x2128 ) ] == ReplacementFor_temp [ ReplacementFor_k ] && ReplacementFor_recD [ ReplacementFor_n ] [ ( 0x1c97 + 1850 - 0x23d1 ) ] == ReplacementFor_temp [ m ] ) ) { ReplacementFor_k = - ( 0x1007 + 3675 - 0x1e61 ) ; ReplacementFor_oppo = ( 0x913 + 1519 - 0xf01 ) ; break ; } } if ( ReplacementFor_oppo == ( 0x18e4 + 863 - 0x1c42 ) ) break ; } } ReplacementFor_k ++ ; } ReplacementFor_temp [ ReplacementFor_k ] = ' \0 ' ; ReplacementFor_j = ( 0x835 + 2396 - 0x1191 ) ; fprintf ( ReplacementFor_q , " \x43 \x61 \x73 \x65 \x20 \x23 \x25 \x64 \x3a \x20 \x5b " , i + ( 0xa6d + 1298 - 0xf7e ) ) ; if ( ReplacementFor_temp [ ReplacementFor_j ] == ' \0 ' ) { fprintf ( ReplacementFor_q , " \x5d " " \n " ) ; continue ; } else fprintf ( ReplacementFor_q , " \x25 \x63 " , ReplacementFor_temp [ ReplacementFor_j ++ ] ) ; while ( ReplacementFor_temp [ ReplacementFor_j ] != ' \0 ' ) { fprintf ( ReplacementFor_q , " \x2c \x20 \x25 \x63 " , ReplacementFor_temp [ ReplacementFor_j ++ ] ) ; } fprintf ( ReplacementFor_q , " \x5d " " \n " ) ; } return ( 0x1754 + 3460 - 0x24d8 ) ; }
>>>Func
METHOD ReplacementFor_invoke
METHOD_RETURN void
PARAM int ReplacementFor_combine[][\012(0x1df4+2226-0x268c)]
PARAM int ReplacementFor_oppose[][(0x1add+1614-0x2111)]
PARAM int \012ReplacementFor_invokeNum
<operator>.assignment ReplacementFor_eIdx=-(0x1905+1736-0x1fcc)
<operator>.lessThan i<\012ReplacementFor_invokeNum
<operator>.postIncrement i++
<operator>.lessEqualsThan i<=ReplacementFor_eIdx
<operator>.postIncrement i++
<operator>.minus -(0x1905+1736-0x1fcc)
<operator>.assignment i=(0x760+1406-0xcde)
scanf scanf("\x25\x63",&\012ReplacementFor_tmp)
<operator>.assignment ReplacementFor_element[++ReplacementFor_eIdx]=\012ReplacementFor_tmp-((char)(0x324+8595-0x2476))
<operator>.assignment i=(0x217d+125-0x21fa)
<operator>.subtraction 0x1905+1736-0x1fcc
<operator>.equals ReplacementFor_eIdx==\012(0x230f+1018-0x2709)
<operator>.lessThan i<ReplacementFor_eIdx
<operator>.addition 0x1905+1736
<operator>.subtraction 0x760+1406-0xcde
<operator>.subtraction ReplacementFor_tmp-((char)(0x324+8595-0x2476))
<operator>.subtraction 0x217d+125-0x21fa
printf printf("\x25\x63\x2c\x20" ReplacementFor_element[\012i]+((char)(0x107+632-0x33e)))
<operator>.addition 0x760+1406
<operator>.preIncrement ++ReplacementFor_eIdx
<operator>.cast (char)(0x324+8595-0x2476)
<operator>.subtraction 0x230f+1018-0x2709
<operator>.assignment ReplacementFor_now=\012ReplacementFor_element[ReplacementFor_eIdx]
<operator>.assignment ReplacementFor_prev=\012ReplacementFor_element[ReplacementFor_eIdx-(0x11f8+1502-0x17d5)]
<operator>.addition 0x217d+125
printf printf("\x25\x63" ReplacementFor_element[i]+\012((char)(0x1199+2492-0x1b14)))
<operator>.subtraction 0x324+8595-0x2476
<operator>.addition 0x230f+1018
<operator>.logicalOr ReplacementFor_combine[ReplacementFor_now][ReplacementFor_prev]>(0xb+142-0x99)||\012ReplacementFor_combine[ReplacementFor_prev][ReplacementFor_now]>\012(0x1389+1205-0x183e)
<operator>.addition ReplacementFor_element[\012i]+((char)(0x107+632-0x33e))
<operator>.addition 0x324+8595
<operator>.assignment ReplacementFor_element[ReplacementFor_eIdx-\012(0xea6+194-0xf67)]=ReplacementFor_combine[ReplacementFor_now][\012ReplacementFor_prev]
<operator>.postDecrement ReplacementFor_eIdx--
<operator>.cast (char)(0x107+632-0x33e)
<operator>.addition ReplacementFor_element[i]+\012((char)(0x1199+2492-0x1b14))
<operator>.subtraction ReplacementFor_eIdx-(0x11f8+1502-0x17d5)
<operator>.greaterThan ReplacementFor_combine[ReplacementFor_now][ReplacementFor_prev]>(0xb+142-0x99)
<operator>.greaterThan ReplacementFor_combine[ReplacementFor_prev][ReplacementFor_now]>\012(0x1389+1205-0x183e)
<operator>.subtraction 0x107+632-0x33e
<operator>.cast (char)(0x1199+2492-0x1b14)
<operator>.subtraction 0x11f8+1502-0x17d5
<operator>.subtraction 0xb+142-0x99
<operator>.subtraction 0x1389+1205-0x183e
<operator>.lessThan ReplacementFor_j<ReplacementFor_eIdx
<operator>.postIncrement ReplacementFor_j++
<operator>.addition 0x107+632
<operator>.subtraction 0x1199+2492-0x1b14
<operator>.addition 0x11f8+1502
<operator>.addition 0xb+142
<operator>.addition 0x1389+1205
<operator>.subtraction ReplacementFor_eIdx-\012(0xea6+194-0xf67)
<operator>.assignment ReplacementFor_j=(0x857+6795-0x22e2)
<operator>.addition 0x1199+2492
<operator>.subtraction 0xea6+194-0xf67
<operator>.logicalOr ReplacementFor_oppose[ReplacementFor_now][\012ReplacementFor_element[ReplacementFor_j]]>(0x12ba+518-0x14c0)||\012ReplacementFor_oppose[ReplacementFor_element[ReplacementFor_j]][\012ReplacementFor_now]>(0x10a0+2403-0x1a03)
<operator>.addition 0xea6+194
<operator>.subtraction 0x857+6795-0x22e2
<operator>.assignment ReplacementFor_eIdx=-\012(0x1117+2054-0x191c)
<operator>.addition 0x857+6795
<operator>.greaterThan ReplacementFor_oppose[ReplacementFor_now][\012ReplacementFor_element[ReplacementFor_j]]>(0x12ba+518-0x14c0)
<operator>.greaterThan ReplacementFor_oppose[ReplacementFor_element[ReplacementFor_j]][\012ReplacementFor_now]>(0x10a0+2403-0x1a03)
<operator>.subtraction 0x12ba+518-0x14c0
<operator>.subtraction 0x10a0+2403-0x1a03
<operator>.minus -\012(0x1117+2054-0x191c)
<operator>.addition 0x12ba+518
<operator>.addition 0x10a0+2403
<operator>.subtraction 0x1117+2054-0x191c
<operator>.addition 0x1117+2054
<operator>.addressOf &\012ReplacementFor_tmp
<operator>.indirectIndexAccess ReplacementFor_element[++ReplacementFor_eIdx]
UNKNOWN char char
<operator>.indirectIndexAccess ReplacementFor_element[ReplacementFor_eIdx]
<operator>.indirectIndexAccess ReplacementFor_element[ReplacementFor_eIdx-(0x11f8+1502-0x17d5)]
<operator>.indirectIndexAccess ReplacementFor_element[\012i]
UNKNOWN char char
<operator>.indirectIndexAccess ReplacementFor_element[i]
<operator>.indirectIndexAccess ReplacementFor_combine[ReplacementFor_now][ReplacementFor_prev]
<operator>.indirectIndexAccess ReplacementFor_combine[ReplacementFor_prev][ReplacementFor_now]
<operator>.indirectIndexAccess ReplacementFor_element[ReplacementFor_eIdx-\012(0xea6+194-0xf67)]
<operator>.indirectIndexAccess ReplacementFor_combine[ReplacementFor_now][\012ReplacementFor_prev]
UNKNOWN char char
<operator>.indirectIndexAccess ReplacementFor_combine[ReplacementFor_now]
<operator>.indirectIndexAccess ReplacementFor_combine[ReplacementFor_prev]
<operator>.indirectIndexAccess ReplacementFor_combine[ReplacementFor_now]
<operator>.indirectIndexAccess ReplacementFor_oppose[ReplacementFor_now][\012ReplacementFor_element[ReplacementFor_j]]
<operator>.indirectIndexAccess ReplacementFor_oppose[ReplacementFor_element[ReplacementFor_j]][\012ReplacementFor_now]
<operator>.indirectIndexAccess ReplacementFor_oppose[ReplacementFor_now]
<operator>.indirectIndexAccess ReplacementFor_element[ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_oppose[ReplacementFor_element[ReplacementFor_j]]
<operator>.indirectIndexAccess ReplacementFor_element[ReplacementFor_j]
>>>PDG&95 0->2 0->3 0->4 0->6 0->7 0->8 0->9 0->12 0->15 0->16 0->17 0->18 0->19 0->20 0->21 0->22 0->23 0->24 0->26 0->29 0->30 0->31 0->32 0->35 0->37 0->40 0->43 0->45 0->46 0->47 0->48 0->49 0->50 0->51 0->52 0->53 0->54 0->55 0->57 0->58 0->60 0->61 0->63 0->66 0->67 0->69 0->70 0->71 0->72 2->1 3->1 4->6 5->1 5->1 5->8 5->24 6->1 6->1 6->6 6->7 6->7 6->12 6->13 6->16 6->20 6->24 6->25 6->26 6->31 6->32 6->35 6->73 6->74 6->75 7->1 7->6 8->1 8->1 8->1 8->8 8->9 8->17 8->17 8->17 9->1 9->8 10->1 10->5 11->1 11->1 11->6 12->20 14->1 14->1 14->8 15->1 15->10 15->10 16->8 16->24 16->27 16->28 16->33 16->40 16->40 16->41 16->45 16->46 16->52 16->53 16->76 16->77 16->81 16->86 17->8 17->9 17->22 17->30 17->34 17->38 17->39 17->43 17->44 17->50 17->51 17->57 17->78 17->79 17->80 17->85 19->1 19->11 19->11 20->12 20->13 20->13 21->1 21->14 21->14 24->16 26->16 26->16 31->20 31->20 31->25 31->25 33->36 33->37 33->48 33->55 33->56 33->58 33->60 33->61 33->63 33->83 33->84 33->88 37->8 37->24 40->48 40->55 41->33 41->33 41->42 41->47 41->54 41->82 41->87 42->33 42->33 43->22 43->22 43->34 43->34 43->38 43->38 45->40 45->40 46->41 46->41 47->42 47->42 48->8 48->24 48->49 48->59 48->64 48->66 48->69 48->89 48->91 48->92 49->48 51->30 51->30 51->39 51->39 51->44 51->44 55->37 56->48 58->55 58->55 59->48 59->49 59->62 59->68 59->71 59->72 61->56 61->56 62->8 62->24 64->59 64->59 64->65 64->67 64->70 64->90 64->93 64->94 65->59 65->59 66->64 66->64 67->65 67->65 68->62 71->68 71->68
>>>Token static void ReplacementFor_invoke ( int ReplacementFor_combine [ ] [ ( 0x1df4 + 2226 - 0x268c ) ] , int ReplacementFor_oppose [ ] [ ( 0x1add + 1614 - 0x2111 ) ] , int ReplacementFor_invokeNum ) { int i ; int ReplacementFor_element [ ( 0x1338 + 2095 - 0x1b03 ) ] , ReplacementFor_eIdx = - ( 0x1905 + 1736 - 0x1fcc ) ; for ( i = ( 0x760 + 1406 - 0xcde ) ; i < ReplacementFor_invokeNum ; i ++ ) { char ReplacementFor_tmp ; scanf ( " \x25 \x63 " , & ReplacementFor_tmp ) ; ReplacementFor_element [ ++ ReplacementFor_eIdx ] = ReplacementFor_tmp - ( ( char ) ( 0x324 + 8595 - 0x2476 ) ) ; if ( ReplacementFor_eIdx == ( 0x230f + 1018 - 0x2709 ) ) { continue ; } else { int ReplacementFor_now = ReplacementFor_element [ ReplacementFor_eIdx ] ; int ReplacementFor_prev = ReplacementFor_element [ ReplacementFor_eIdx - ( 0x11f8 + 1502 - 0x17d5 ) ] ; if ( ReplacementFor_combine [ ReplacementFor_now ] [ ReplacementFor_prev ] > ( 0xb + 142 - 0x99 ) || ReplacementFor_combine [ ReplacementFor_prev ] [ ReplacementFor_now ] > ( 0x1389 + 1205 - 0x183e ) ) { ReplacementFor_element [ ReplacementFor_eIdx - ( 0xea6 + 194 - 0xf67 ) ] = ReplacementFor_combine [ ReplacementFor_now ] [ ReplacementFor_prev ] ; ReplacementFor_eIdx -- ; } else { int ReplacementFor_j ; for ( ReplacementFor_j = ( 0x857 + 6795 - 0x22e2 ) ; ReplacementFor_j < ReplacementFor_eIdx ; ReplacementFor_j ++ ) { if ( ReplacementFor_oppose [ ReplacementFor_now ] [ ReplacementFor_element [ ReplacementFor_j ] ] > ( 0x12ba + 518 - 0x14c0 ) || ReplacementFor_oppose [ ReplacementFor_element [ ReplacementFor_j ] ] [ ReplacementFor_now ] > ( 0x10a0 + 2403 - 0x1a03 ) ) { ReplacementFor_eIdx = - ( 0x1117 + 2054 - 0x191c ) ; break ; } } } } } for ( i = ( 0x217d + 125 - 0x21fa ) ; i <= ReplacementFor_eIdx ; i ++ ) { if ( i < ReplacementFor_eIdx ) printf ( " \x25 \x63 \x2c \x20 " , ReplacementFor_element [ i ] + ( ( char ) ( 0x107 + 632 - 0x33e ) ) ) ; else printf ( " \x25 \x63 " , ReplacementFor_element [ i ] + ( ( char ) ( 0x1199 + 2492 - 0x1b14 ) ) ) ; } }
>>>Func
METHOD main
METHOD_RETURN int
scanf scanf("\x25\x6c\x64",&T)
RETURN return\012(0x1710+3136-0x2350); return\012(0x1710+3136-0x2350);
<operator>.lessThan ReplacementFor_c<T
<operator>.postIncrement ReplacementFor_c++
<operator>.subtraction 0x1710+3136-0x2350
<operator>.assignment ReplacementFor_c=(0x13b2+3983-0x2341)
scanf scanf("\x25\x6c\x6c\x64",&ReplacementFor_N)
scanf scanf("\x25\x6c\x6c\x64",&\012ReplacementFor_pd)
scanf scanf("\x25\x6c\x6c\x64",&ReplacementFor_pg)
<operator>.assignment ReplacementFor_denom=(0x1f7a+1840-0x2646)
<operator>.assignment ReplacementFor_x=ReplacementFor_pd
<operator>.assignment ReplacementFor_denomok=(\012ReplacementFor_denom<=ReplacementFor_N)
<operator>.assignment ReplacementFor_rangeok=\012(0x18a7+498-0x1a98)
printf printf(\012"\x43\x61\x73\x65\x20\x23\x25\x64\x3a\x20\x25\x73" "\n" ReplacementFor_c+\012(0x353+1675-0x9dd) (ReplacementFor_denomok&&ReplacementFor_rangeok)?\012"\x50\x6f\x73\x73\x69\x62\x6c\x65":"\x42\x72\x6f\x6b\x65\x6e")
<operator>.logicalAnd ReplacementFor_x%(0x1a82+2056-0x2288)==(0x97c+2270-0x125a)&&\012ReplacementFor_denom%(0x135c+4493-0x24e7)==(0xc33+11-0xc3e)
<operator>.logicalAnd ReplacementFor_x%(0xf18+935-0x12ba)==(0xfdd+3242-0x1c87)&&ReplacementFor_denom%\012(0x65f+6068-0x1e0e)==(0x46c+4955-0x17c7)
<operator>.logicalAnd ReplacementFor_pg==(0x3d2+488-0x556)&&ReplacementFor_pd<\012(0x1aa+5611-0x1731)
<operator>.logicalAnd ReplacementFor_pg==(0x832+5604-0x1e16)&&ReplacementFor_pd>(0x47+7001-0x1ba0)
<operator>.addition 0x1710+3136
<operator>.subtraction 0x13b2+3983-0x2341
<operator>.subtraction 0x1f7a+1840-0x2646
<operator>.assignmentDivision ReplacementFor_x/=\012(0x15af+1234-0x1a7f)
<operator>.assignmentDivision ReplacementFor_denom/=(0x23b+2195-0xacc)
<operator>.assignmentDivision ReplacementFor_x/=(0x1735+2861-0x225d)
<operator>.assignmentDivision ReplacementFor_denom/=(0xb9b+1877-0x12eb)
<operator>.lessEqualsThan ReplacementFor_denom<=ReplacementFor_N
<operator>.subtraction 0x18a7+498-0x1a98
<operator>.assignment ReplacementFor_rangeok=(0x533+3890-0x1465)
<operator>.assignment ReplacementFor_rangeok=(0x1419+3373-0x2146)
<operator>.addition ReplacementFor_c+\012(0x353+1675-0x9dd)
<operator>.conditional (ReplacementFor_denomok&&ReplacementFor_rangeok)?\012"\x50\x6f\x73\x73\x69\x62\x6c\x65":"\x42\x72\x6f\x6b\x65\x6e"
<operator>.addition 0x13b2+3983
<operator>.addition 0x1f7a+1840
<operator>.equals ReplacementFor_x%(0x1a82+2056-0x2288)==(0x97c+2270-0x125a)
<operator>.equals ReplacementFor_denom%(0x135c+4493-0x24e7)==(0xc33+11-0xc3e)
<operator>.equals ReplacementFor_x%(0xf18+935-0x12ba)==(0xfdd+3242-0x1c87)
<operator>.equals ReplacementFor_denom%\012(0x65f+6068-0x1e0e)==(0x46c+4955-0x17c7)
<operator>.addition 0x18a7+498
<operator>.equals ReplacementFor_pg==(0x3d2+488-0x556)
<operator>.lessThan ReplacementFor_pd<\012(0x1aa+5611-0x1731)
<operator>.equals ReplacementFor_pg==(0x832+5604-0x1e16)
<operator>.greaterThan ReplacementFor_pd>(0x47+7001-0x1ba0)
<operator>.subtraction 0x353+1675-0x9dd
<operator>.logicalAnd ReplacementFor_denomok&&ReplacementFor_rangeok
<operator>.modulo ReplacementFor_x%(0x1a82+2056-0x2288)
<operator>.subtraction 0x97c+2270-0x125a
<operator>.modulo ReplacementFor_denom%(0x135c+4493-0x24e7)
<operator>.subtraction 0xc33+11-0xc3e
<operator>.subtraction 0x15af+1234-0x1a7f
<operator>.subtraction 0x23b+2195-0xacc
<operator>.modulo ReplacementFor_x%(0xf18+935-0x12ba)
<operator>.subtraction 0xfdd+3242-0x1c87
<operator>.modulo ReplacementFor_denom%\012(0x65f+6068-0x1e0e)
<operator>.subtraction 0x46c+4955-0x17c7
<operator>.subtraction 0x1735+2861-0x225d
<operator>.subtraction 0xb9b+1877-0x12eb
<operator>.subtraction 0x3d2+488-0x556
<operator>.subtraction 0x1aa+5611-0x1731
<operator>.subtraction 0x533+3890-0x1465
<operator>.subtraction 0x832+5604-0x1e16
<operator>.subtraction 0x47+7001-0x1ba0
<operator>.subtraction 0x1419+3373-0x2146
<operator>.addition 0x353+1675
<operator>.subtraction 0x1a82+2056-0x2288
<operator>.addition 0x97c+2270
<operator>.subtraction 0x135c+4493-0x24e7
<operator>.addition 0xc33+11
<operator>.addition 0x15af+1234
<operator>.addition 0x23b+2195
<operator>.subtraction 0xf18+935-0x12ba
<operator>.addition 0xfdd+3242
<operator>.subtraction 0x65f+6068-0x1e0e
<operator>.addition 0x46c+4955
<operator>.addition 0x1735+2861
<operator>.addition 0xb9b+1877
<operator>.addition 0x3d2+488
<operator>.addition 0x1aa+5611
<operator>.addition 0x533+3890
<operator>.addition 0x832+5604
<operator>.addition 0x47+7001
<operator>.addition 0x1419+3373
<operator>.addition 0x1a82+2056
<operator>.addition 0x135c+4493
<operator>.addition 0xf18+935
<operator>.addition 0x65f+6068
<operator>.addressOf &ReplacementFor_N
<operator>.addressOf &\012ReplacementFor_pd
<operator>.addressOf &ReplacementFor_pg
>>>PDG&90 0->2 0->4 0->5 0->6 0->8 0->9 0->10 0->12 0->15 0->20 0->21 0->22 0->23 0->24 0->25 0->26 0->27 0->28 0->31 0->32 0->33 0->34 0->39 0->40 0->41 0->42 0->43 0->44 0->45 0->46 0->47 0->48 0->49 0->50 0->51 0->52 0->53 0->54 0->55 0->56 0->57 0->58 0->59 0->60 0->61 0->62 0->63 0->64 0->65 0->66 0->67 0->68 0->69 0->70 0->71 0->72 0->73 0->74 0->75 0->76 0->77 0->78 0->79 0->80 0->81 0->82 0->83 0->84 0->85 0->86 2->1 2->4 3->1 4->1 4->1 4->1 4->4 4->5 4->5 4->8 4->9 4->10 4->11 4->12 4->13 4->14 4->15 4->15 4->16 4->17 4->18 4->19 4->22 4->27 4->28 4->31 4->31 4->32 4->34 4->35 4->37 4->39 4->40 4->42 4->44 4->45 4->46 4->47 4->52 4->53 4->58 4->61 4->64 4->65 4->66 4->71 4->72 4->77 4->80 4->83 4->85 4->87 4->88 4->89 5->1 5->4 6->1 6->1 6->3 7->1 7->1 7->4 8->1 8->27 9->1 9->12 9->41 9->43 10->1 10->40 10->42 11->1 11->1 11->24 11->26 11->27 11->48 11->54 12->1 12->1 12->46 13->1 13->1 13->45 14->1 14->1 14->45 15->1 15->1 15->1 16->1 16->1 16->1 16->16 16->23 16->24 16->35 16->46 16->47 16->50 16->51 16->65 16->66 16->69 16->70 16->83 17->1 17->1 17->1 17->17 17->25 17->26 17->37 17->52 17->53 17->56 17->57 17->71 17->72 17->75 17->76 17->85 18->1 18->1 18->1 18->29 18->60 18->79 19->1 19->1 19->1 19->30 19->63 19->82 21->1 21->7 21->7 22->1 22->11 22->11 23->1 23->1 23->46 24->1 24->1 24->26 24->27 24->48 24->54 25->1 25->1 25->52 26->1 26->1 26->27 26->54 27->1 27->1 27->8 27->13 27->13 28->1 28->14 28->14 29->1 29->1 29->45 30->1 30->1 30->45 31->1 32->1 35->1 35->1 35->16 35->16 35->36 35->48 35->49 35->67 35->68 35->84 36->1 36->1 36->16 36->16 37->1 37->1 37->17 37->17 37->38 37->54 37->55 37->73 37->74 37->86 38->1 38->1 38->17 38->17 40->1 40->18 40->18 40->41 40->42 40->59 40->78 41->1 41->1 41->9 41->12 41->18 41->18 41->43 42->1 42->1 42->10 42->19 42->19 42->40 42->43 42->62 42->81 43->1 43->1 43->9 43->12 43->19 43->19 43->41 44->1 44->15 44->15 44->31 44->31 45->1 45->1 46->1 46->23 46->35 46->35 46->52 47->1 47->35 47->35 48->1 48->24 48->26 48->27 48->36 48->36 48->54 49->1 49->36 49->36 50->1 50->23 50->23 51->1 51->24 51->24 52->1 52->1 52->25 52->37 52->37 53->1 53->37 53->37 54->1 54->26 54->27 54->38 54->38 55->1 55->38 55->38 56->1 56->25 56->25 57->1 57->26 57->26 58->1 58->40 58->40 59->1 59->41 59->41 60->1 60->29 60->29 61->1 61->42 61->42 62->1 62->43 62->43 63->1 63->30 63->30 65->1 65->46 65->46 67->1 67->48 67->48 71->1 71->52 71->52 73->1 73->54 73->54
>>>Token int main ( ) { int T ; int s , ReplacementFor_c , ReplacementFor_ch ; long long int ReplacementFor_pd , ReplacementFor_pg , ReplacementFor_N ; long long int ReplacementFor_denom , ReplacementFor_x ; int ReplacementFor_pos ; int ReplacementFor_denomok ; int ReplacementFor_rangeok ; scanf ( " \x25 \x6c \x64 " , & T ) ; for ( ReplacementFor_c = ( 0x13b2 + 3983 - 0x2341 ) ; ReplacementFor_c < T ; ReplacementFor_c ++ ) { scanf ( " \x25 \x6c \x6c \x64 " , & ReplacementFor_N ) ; scanf ( " \x25 \x6c \x6c \x64 " , & ReplacementFor_pd ) ; scanf ( " \x25 \x6c \x6c \x64 " , & ReplacementFor_pg ) ; ReplacementFor_denom = ( 0x1f7a + 1840 - 0x2646 ) ; ReplacementFor_x = ReplacementFor_pd ; while ( ReplacementFor_x % ( 0x1a82 + 2056 - 0x2288 ) == ( 0x97c + 2270 - 0x125a ) && ReplacementFor_denom % ( 0x135c + 4493 - 0x24e7 ) == ( 0xc33 + 11 - 0xc3e ) ) { ReplacementFor_x /= ( 0x15af + 1234 - 0x1a7f ) ; ReplacementFor_denom /= ( 0x23b + 2195 - 0xacc ) ; } while ( ReplacementFor_x % ( 0xf18 + 935 - 0x12ba ) == ( 0xfdd + 3242 - 0x1c87 ) && ReplacementFor_denom % ( 0x65f + 6068 - 0x1e0e ) == ( 0x46c + 4955 - 0x17c7 ) ) { ReplacementFor_x /= ( 0x1735 + 2861 - 0x225d ) ; ReplacementFor_denom /= ( 0xb9b + 1877 - 0x12eb ) ; } ReplacementFor_denomok = ( ReplacementFor_denom <= ReplacementFor_N ) ; ReplacementFor_rangeok = ( 0x18a7 + 498 - 0x1a98 ) ; if ( ReplacementFor_pg == ( 0x3d2 + 488 - 0x556 ) && ReplacementFor_pd < ( 0x1aa + 5611 - 0x1731 ) ) { ReplacementFor_rangeok = ( 0x533 + 3890 - 0x1465 ) ; } if ( ReplacementFor_pg == ( 0x832 + 5604 - 0x1e16 ) && ReplacementFor_pd > ( 0x47 + 7001 - 0x1ba0 ) ) { ReplacementFor_rangeok = ( 0x1419 + 3373 - 0x2146 ) ; } printf ( " \x43 \x61 \x73 \x65 \x20 \x23 \x25 \x64 \x3a \x20 \x25 \x73 " " \n " , ReplacementFor_c + ( 0x353 + 1675 - 0x9dd ) , ( ReplacementFor_denomok && ReplacementFor_rangeok ) ? " \x50 \x6f \x73 \x73 \x69 \x62 \x6c \x65 " : " \x42 \x72 \x6f \x6b \x65 \x6e " ) ; } return ( 0x1710 + 3136 - 0x2350 ) ; }
>>>Func
METHOD main
METHOD_RETURN int
PARAM int ReplacementFor_argc
PARAM char*ReplacementFor_argv[]
<operator>.assignment ReplacementFor_red=(struct ReplacementFor_reduce_st*)\012calloc((0x21ff+22-0x21c5) sizeof(ReplacementFor_reduce))
<operator>.assignment ReplacementFor_des=(\012struct ReplacementFor_destroy_st*)calloc((0x2c5+3871-0x1194) sizeof(\012ReplacementFor_destroy))
fscanf fscanf(stdin,"\x25\x64" "\n",&ReplacementFor_case_numbs\012)
RETURN return\012(0x141+2610-0xb73); return\012(0x141+2610-0xb73);
<operator>.lessThan i<ReplacementFor_case_numbs
<operator>.postIncrement i++
<operator>.subtraction 0x141+2610-0xb73
<operator>.cast (struct ReplacementFor_reduce_st*)\012calloc((0x21ff+22-0x21c5) sizeof(ReplacementFor_reduce))
<operator>.cast (\012struct ReplacementFor_destroy_st*)calloc((0x2c5+3871-0x1194) sizeof(\012ReplacementFor_destroy))
<operator>.assignment i=(0xd76+624-0xfe6)
<operator>.assignment ReplacementFor_output\012=(char*)malloc((0xb80+5002-0x1ea6)*sizeof(char))
<operator>.assignment ReplacementFor_output_sz=\012(0x74b+277-0x860)
fscanf fscanf(stdin,"\x25\x64\x20",&ReplacementFor_red_sz)
<operator>.assignmentMultiplication ReplacementFor_red_sz*=(0x6f1+1556-0xd03)
fscanf fscanf(stdin,"\x25\x64\x20",&\012ReplacementFor_des_sz)
<operator>.assignmentMultiplication ReplacementFor_des_sz*=\012(0x2ac+5689-0x18e3)
fscanf fscanf(stdin,"\x25\x64\x20",&ReplacementFor_counter)
printf printf("\x43\x61\x73\x65\x20\x23\x25\x64\x3a\x20\x5b" i+(0xe25+1768-0x150c))
calloc calloc((0x21ff+22-0x21c5) sizeof(ReplacementFor_reduce))
calloc calloc((0x2c5+3871-0x1194) sizeof(\012ReplacementFor_destroy))
<operator>.lessThan ReplacementFor_j<ReplacementFor_red_sz
<operator>.postIncrement ReplacementFor_j++
<operator>.lessThan ReplacementFor_j\012<ReplacementFor_des_sz
<operator>.postIncrement ReplacementFor_j++
<operator>.lessThan ReplacementFor_j<ReplacementFor_counter
<operator>.postIncrement ReplacementFor_j++
<operator>.lessThan ReplacementFor_j<ReplacementFor_output_sz-\012(0xb52+6019-0x22d4)
<operator>.postIncrement ReplacementFor_j++
printf printf("\x25\x63\x2c\x20",\012ReplacementFor_output[ReplacementFor_j])
<operator>.notEquals ReplacementFor_output_sz!=\012(0x1866+775-0x1b6d)
<operator>.addition 0x141+2610
<operator>.subtraction 0x21ff+22-0x21c5
<operator>.sizeOf sizeof(ReplacementFor_reduce)
<operator>.subtraction 0x2c5+3871-0x1194
<operator>.sizeOf sizeof(\012ReplacementFor_destroy)
<operator>.subtraction 0xd76+624-0xfe6
<operator>.cast (char*)malloc((0xb80+5002-0x1ea6)*sizeof(char))
<operator>.subtraction 0x74b+277-0x860
<operator>.assignment ReplacementFor_j=(0x90d+4694-0x1b63)
fscanf fscanf(stdin,"\x25\x63",&ReplacementFor_charA)
fscanf fscanf(stdin,\012"\x25\x63",&ReplacementFor_charB)
fscanf fscanf(stdin,"\x25\x63\x20",&\012ReplacementFor_Result)
<operator>.assignment ReplacementFor_red[(0x140c+2549-0x1dff)*ReplacementFor_j]\012.ReplacementFor_x=ReplacementFor_charA
<operator>.assignment ReplacementFor_red[(0x41+1048-0x457)*\012ReplacementFor_j].ReplacementFor_y=ReplacementFor_charB
<operator>.assignment ReplacementFor_red[\012(0x113+8775-0x2358)*ReplacementFor_j].ReplacementFor_result=\012ReplacementFor_Result
<operator>.assignment ReplacementFor_red[(0xd5a+4363-0x1e63)*ReplacementFor_j+\012(0x726+526-0x933)].ReplacementFor_x=ReplacementFor_charB
<operator>.assignment ReplacementFor_red[\012(0x55a+2331-0xe73)*ReplacementFor_j+(0x11c0+3807-0x209e)].ReplacementFor_y=\012ReplacementFor_charA
<operator>.assignment ReplacementFor_red[(0x5f3+81-0x642)*ReplacementFor_j+\012(0x1039+3996-0x1fd4)].ReplacementFor_result=ReplacementFor_Result
<operator>.subtraction 0x6f1+1556-0xd03
<operator>.assignment ReplacementFor_j=(0x2e7+6811-0x1d82)
fscanf fscanf(stdin,"\x25\x63",&\012ReplacementFor_charA)
fscanf fscanf(stdin,"\x25\x63\x20",&ReplacementFor_charB)
<operator>.assignment ReplacementFor_des[(0x7d6+6572-0x2180)*ReplacementFor_j].ReplacementFor_x=\012ReplacementFor_charA
<operator>.assignment ReplacementFor_des[(0x611+7531-0x237a)*ReplacementFor_j].\012ReplacementFor_y=ReplacementFor_charB
<operator>.assignment ReplacementFor_des[(0x17c0+2398-0x211c)*\012ReplacementFor_j+(0x1431+65-0x1471)].ReplacementFor_x=ReplacementFor_charB
<operator>.assignment ReplacementFor_des[(0x3a0+6907-0x1e99)*ReplacementFor_j+(0xffc+2343-0x1922)].\012ReplacementFor_y=ReplacementFor_charA
<operator>.subtraction 0x2ac+5689-0x18e3
<operator>.assignment ReplacementFor_j=(0x2a4+3322-0xf9e)
fscanf fscanf(stdin,"\x25\x63",&ReplacementFor_Result)
<operator>.addition i+(0xe25+1768-0x150c)
<operator>.assignment ReplacementFor_j=(0x43f+7410-0x2131)
printf printf("\x25\x63\x5d" "\n" ReplacementFor_output[\012ReplacementFor_output_sz-(0x1b71+240-0x1c60)])
<operator>.addition 0x21ff+22
<operator>.addition 0x2c5+3871
<operator>.addition 0xd76+624
malloc malloc((0xb80+5002-0x1ea6)*sizeof(char))
<operator>.addition 0x74b+277
<operator>.addition 0x6f1+1556
<operator>.addition 0x2ac+5689
<operator>.equals ReplacementFor_output_sz==(0x15da+2221-0x1e87)
<operator>.subtraction 0xe25+1768-0x150c
<operator>.subtraction ReplacementFor_output_sz-\012(0xb52+6019-0x22d4)
<operator>.subtraction 0x1866+775-0x1b6d
printf printf("\x5d" "\n")
<operator>.multiplication (0xb80+5002-0x1ea6)*sizeof(char)
<operator>.subtraction 0x90d+4694-0x1b63
<operator>.subtraction 0x2e7+6811-0x1d82
<operator>.subtraction 0x2a4+3322-0xf9e
<operator>.assignment ReplacementFor_output[\012(0x9c8+4979-0x1d3b)]=ReplacementFor_Result
<operator>.postIncrement ReplacementFor_output_sz++
<operator>.addition 0xe25+1768
<operator>.subtraction 0x43f+7410-0x2131
<operator>.subtraction 0xb52+6019-0x22d4
<operator>.addition 0x1866+775
<operator>.subtraction 0xb80+5002-0x1ea6
<operator>.sizeOf sizeof(char)
<operator>.addition 0x90d+4694
<operator>.addition 0x2e7+6811
<operator>.addition 0x2a4+3322
<operator>.subtraction 0x15da+2221-0x1e87
<operator>.assignment ReplacementFor_test=(0x77b+790-0xa91)
<operator>.addition 0x43f+7410
<operator>.addition 0xb52+6019
<operator>.subtraction ReplacementFor_output_sz-(0x1b71+240-0x1c60)
<operator>.addition 0xb80+5002
<operator>.multiplication (0x140c+2549-0x1dff)*ReplacementFor_j
<operator>.multiplication (0x41+1048-0x457)*\012ReplacementFor_j
<operator>.multiplication (0x113+8775-0x2358)*ReplacementFor_j
<operator>.addition (0xd5a+4363-0x1e63)*ReplacementFor_j+\012(0x726+526-0x933)
<operator>.addition (0x55a+2331-0xe73)*ReplacementFor_j+(0x11c0+3807-0x209e)
<operator>.addition (0x5f3+81-0x642)*ReplacementFor_j+\012(0x1039+3996-0x1fd4)
<operator>.multiplication (0x7d6+6572-0x2180)*ReplacementFor_j
<operator>.multiplication (0x611+7531-0x237a)*ReplacementFor_j
<operator>.addition (0x17c0+2398-0x211c)*\012ReplacementFor_j+(0x1431+65-0x1471)
<operator>.addition (0x3a0+6907-0x1e99)*ReplacementFor_j+(0xffc+2343-0x1922)
<operator>.addition 0x15da+2221
<operator>.lessThan ReplacementFor_k<ReplacementFor_red_sz
<operator>.postIncrement ReplacementFor_k++
<operator>.logicalNot !ReplacementFor_test
<operator>.logicalNot !ReplacementFor_test
<operator>.subtraction 0x1b71+240-0x1c60
<operator>.subtraction 0x140c+2549-0x1dff
<operator>.subtraction 0x41+1048-0x457
<operator>.subtraction 0x113+8775-0x2358
<operator>.multiplication (0xd5a+4363-0x1e63)*ReplacementFor_j
<operator>.subtraction 0x726+526-0x933
<operator>.multiplication (0x55a+2331-0xe73)*ReplacementFor_j
<operator>.subtraction 0x11c0+3807-0x209e
<operator>.multiplication (0x5f3+81-0x642)*ReplacementFor_j
<operator>.subtraction 0x1039+3996-0x1fd4
<operator>.subtraction 0x7d6+6572-0x2180
<operator>.subtraction 0x611+7531-0x237a
<operator>.multiplication (0x17c0+2398-0x211c)*\012ReplacementFor_j
<operator>.subtraction 0x1431+65-0x1471
<operator>.multiplication (0x3a0+6907-0x1e99)*ReplacementFor_j
<operator>.subtraction 0xffc+2343-0x1922
<operator>.subtraction 0x9c8+4979-0x1d3b
<operator>.subtraction 0x77b+790-0xa91
<operator>.assignment ReplacementFor_k=(0x73d+1312-0xc5d)
<operator>.assignment ReplacementFor_output[\012ReplacementFor_output_sz]=ReplacementFor_Result
<operator>.postIncrement ReplacementFor_output_sz++
<operator>.addition 0x1b71+240
<operator>.addition 0x140c+2549
<operator>.addition 0x41+1048
<operator>.addition 0x113+8775
<operator>.subtraction 0xd5a+4363-0x1e63
<operator>.addition 0x726+526
<operator>.subtraction 0x55a+2331-0xe73
<operator>.addition 0x11c0+3807
<operator>.subtraction 0x5f3+81-0x642
<operator>.addition 0x1039+3996
<operator>.addition 0x7d6+6572
<operator>.addition 0x611+7531
<operator>.subtraction 0x17c0+2398-0x211c
<operator>.addition 0x1431+65
<operator>.subtraction 0x3a0+6907-0x1e99
<operator>.addition 0xffc+2343
<operator>.addition 0x9c8+4979
<operator>.addition 0x77b+790
<operator>.logicalAnd (\012ReplacementFor_red[ReplacementFor_k].ReplacementFor_x==ReplacementFor_Result)&&(\012ReplacementFor_red[ReplacementFor_k].ReplacementFor_y==ReplacementFor_output[\012ReplacementFor_output_sz-(0x9d9+6775-0x244f)])
<operator>.lessThan ReplacementFor_k<ReplacementFor_des_sz
<operator>.postIncrement ReplacementFor_k++
<operator>.addition 0xd5a+4363
<operator>.addition 0x55a+2331
<operator>.addition 0x5f3+81
<operator>.addition 0x17c0+2398
<operator>.addition 0x3a0+6907
<operator>.subtraction 0x73d+1312-0xc5d
<operator>.assignment ReplacementFor_output[\012ReplacementFor_output_sz-(0x1638+2247-0x1efe)]=ReplacementFor_red[\012ReplacementFor_k].ReplacementFor_result
<operator>.assignment ReplacementFor_test=(0x1297+1499-0x1871)
<operator>.assignment ReplacementFor_k=(0x1b3d+2447-0x24cc)
<operator>.addition 0x73d+1312
<operator>.equals ReplacementFor_red[ReplacementFor_k].ReplacementFor_x==ReplacementFor_Result
<operator>.equals ReplacementFor_red[ReplacementFor_k].ReplacementFor_y==ReplacementFor_output[\012ReplacementFor_output_sz-(0x9d9+6775-0x244f)]
<operator>.equals ReplacementFor_des\012[ReplacementFor_k].ReplacementFor_x==ReplacementFor_Result
<operator>.subtraction 0x1297+1499-0x1871
<operator>.subtraction 0x1b3d+2447-0x24cc
<operator>.subtraction ReplacementFor_output_sz-(0x9d9+6775-0x244f)
<operator>.subtraction ReplacementFor_output_sz-(0x1638+2247-0x1efe)
<operator>.addition 0x1297+1499
<operator>.addition 0x1b3d+2447
<operator>.lessThan l<ReplacementFor_output_sz
<operator>.postIncrement l++
IDENTIFIER ReplacementFor_test if (ReplacementFor_test)
<operator>.subtraction 0x9d9+6775-0x244f
<operator>.subtraction 0x1638+2247-0x1efe
<operator>.assignment l=\012(0x520+1688-0xbb8)
<operator>.addition 0x9d9+6775
<operator>.addition 0x1638+2247
<operator>.equals ReplacementFor_output[l]==\012ReplacementFor_des[ReplacementFor_k].ReplacementFor_y
<operator>.subtraction 0x520+1688-0xbb8
<operator>.assignment ReplacementFor_output_sz=\012(0x9d7+3972-0x195b)
<operator>.assignment ReplacementFor_test=(0xb8f+5333-0x2063)
<operator>.addition 0x520+1688
<operator>.subtraction 0x9d7+3972-0x195b
<operator>.subtraction 0xb8f+5333-0x2063
<operator>.addition 0x9d7+3972
<operator>.addition 0xb8f+5333
<operator>.addressOf &ReplacementFor_red_sz
<operator>.addressOf &\012ReplacementFor_des_sz
<operator>.addressOf &ReplacementFor_counter
UNKNOWN char* char*
<operator>.indirectIndexAccess ReplacementFor_output[ReplacementFor_j]
<operator>.addressOf &ReplacementFor_charA
<operator>.addressOf &ReplacementFor_charB
<operator>.addressOf &\012ReplacementFor_Result
<operator>.fieldAccess ReplacementFor_red[(0x140c+2549-0x1dff)*ReplacementFor_j]\012.ReplacementFor_x
<operator>.fieldAccess ReplacementFor_red[(0x41+1048-0x457)*\012ReplacementFor_j].ReplacementFor_y
<operator>.fieldAccess ReplacementFor_red[\012(0x113+8775-0x2358)*ReplacementFor_j].ReplacementFor_result
<operator>.fieldAccess ReplacementFor_red[(0xd5a+4363-0x1e63)*ReplacementFor_j+\012(0x726+526-0x933)].ReplacementFor_x
<operator>.fieldAccess ReplacementFor_red[\012(0x55a+2331-0xe73)*ReplacementFor_j+(0x11c0+3807-0x209e)].ReplacementFor_y
<operator>.fieldAccess ReplacementFor_red[(0x5f3+81-0x642)*ReplacementFor_j+\012(0x1039+3996-0x1fd4)].ReplacementFor_result
<operator>.addressOf &\012ReplacementFor_charA
<operator>.addressOf &ReplacementFor_charB
<operator>.fieldAccess ReplacementFor_des[(0x7d6+6572-0x2180)*ReplacementFor_j].ReplacementFor_x
<operator>.fieldAccess ReplacementFor_des[(0x611+7531-0x237a)*ReplacementFor_j].\012ReplacementFor_y
<operator>.fieldAccess ReplacementFor_des[(0x17c0+2398-0x211c)*\012ReplacementFor_j+(0x1431+65-0x1471)].ReplacementFor_x
<operator>.fieldAccess ReplacementFor_des[(0x3a0+6907-0x1e99)*ReplacementFor_j+(0xffc+2343-0x1922)].\012ReplacementFor_y
<operator>.addressOf &ReplacementFor_Result
<operator>.indirectIndexAccess ReplacementFor_output[\012ReplacementFor_output_sz-(0x1b71+240-0x1c60)]
<operator>.indirectIndexAccess ReplacementFor_red[(0x140c+2549-0x1dff)*ReplacementFor_j]
FIELD_IDENTIFIER ReplacementFor_x ReplacementFor_x
<operator>.indirectIndexAccess ReplacementFor_red[(0x41+1048-0x457)*\012ReplacementFor_j]
FIELD_IDENTIFIER ReplacementFor_y ReplacementFor_y
<operator>.indirectIndexAccess ReplacementFor_red[\012(0x113+8775-0x2358)*ReplacementFor_j]
FIELD_IDENTIFIER ReplacementFor_result ReplacementFor_result
<operator>.indirectIndexAccess ReplacementFor_red[(0xd5a+4363-0x1e63)*ReplacementFor_j+\012(0x726+526-0x933)]
FIELD_IDENTIFIER ReplacementFor_x ReplacementFor_x
<operator>.indirectIndexAccess ReplacementFor_red[\012(0x55a+2331-0xe73)*ReplacementFor_j+(0x11c0+3807-0x209e)]
FIELD_IDENTIFIER ReplacementFor_y ReplacementFor_y
<operator>.indirectIndexAccess ReplacementFor_red[(0x5f3+81-0x642)*ReplacementFor_j+\012(0x1039+3996-0x1fd4)]
FIELD_IDENTIFIER ReplacementFor_result ReplacementFor_result
<operator>.indirectIndexAccess ReplacementFor_des[(0x7d6+6572-0x2180)*ReplacementFor_j]
FIELD_IDENTIFIER ReplacementFor_x ReplacementFor_x
<operator>.indirectIndexAccess ReplacementFor_des[(0x611+7531-0x237a)*ReplacementFor_j]
FIELD_IDENTIFIER ReplacementFor_y ReplacementFor_y
<operator>.indirectIndexAccess ReplacementFor_des[(0x17c0+2398-0x211c)*\012ReplacementFor_j+(0x1431+65-0x1471)]
FIELD_IDENTIFIER ReplacementFor_x ReplacementFor_x
<operator>.indirectIndexAccess ReplacementFor_des[(0x3a0+6907-0x1e99)*ReplacementFor_j+(0xffc+2343-0x1922)]
FIELD_IDENTIFIER ReplacementFor_y ReplacementFor_y
<operator>.indirectIndexAccess ReplacementFor_output[\012(0x9c8+4979-0x1d3b)]
<operator>.indirectIndexAccess ReplacementFor_output[\012ReplacementFor_output_sz]
<operator>.fieldAccess ReplacementFor_red[ReplacementFor_k].ReplacementFor_x
<operator>.fieldAccess ReplacementFor_red[ReplacementFor_k].ReplacementFor_y
<operator>.indirectIndexAccess ReplacementFor_output[\012ReplacementFor_output_sz-(0x9d9+6775-0x244f)]
<operator>.indirectIndexAccess ReplacementFor_output[\012ReplacementFor_output_sz-(0x1638+2247-0x1efe)]
<operator>.fieldAccess ReplacementFor_red[\012ReplacementFor_k].ReplacementFor_result
<operator>.indirectIndexAccess ReplacementFor_red[ReplacementFor_k]
FIELD_IDENTIFIER ReplacementFor_x ReplacementFor_x
<operator>.indirectIndexAccess ReplacementFor_red[ReplacementFor_k]
FIELD_IDENTIFIER ReplacementFor_y ReplacementFor_y
<operator>.indirectIndexAccess ReplacementFor_red[\012ReplacementFor_k]
FIELD_IDENTIFIER ReplacementFor_result ReplacementFor_result
<operator>.fieldAccess ReplacementFor_des\012[ReplacementFor_k].ReplacementFor_x
<operator>.indirectIndexAccess ReplacementFor_des\012[ReplacementFor_k]
FIELD_IDENTIFIER ReplacementFor_x ReplacementFor_x
<operator>.indirectIndexAccess ReplacementFor_output[l]
<operator>.fieldAccess ReplacementFor_des[ReplacementFor_k].ReplacementFor_y
<operator>.indirectIndexAccess ReplacementFor_des[ReplacementFor_k]
FIELD_IDENTIFIER ReplacementFor_y ReplacementFor_y
>>>PDG&254 0->2 0->3 0->6 0->8 0->9 0->10 0->16 0->17 0->18 0->19 0->20 0->21 0->24 0->25 0->26 0->27 0->28 0->29 0->30 0->31 0->32 0->33 0->34 0->35 0->37 0->39 0->41 0->43 0->44 0->45 0->46 0->47 0->48 0->49 0->50 0->51 0->52 0->54 0->55 0->56 0->57 0->58 0->59 0->60 0->62 0->63 0->65 0->66 0->67 0->68 0->70 0->71 0->72 0->73 0->74 0->75 0->76 0->77 0->79 0->80 0->81 0->82 0->83 0->84 0->85 0->86 0->87 0->88 0->90 0->91 0->92 0->93 0->95 0->96 0->97 0->98 0->99 0->100 0->101 0->105 0->106 0->109 0->110 0->111 0->112 0->113 0->114 0->115 0->116 0->117 0->118 0->119 0->120 0->121 0->122 0->123 0->124 0->125 0->126 0->127 0->128 0->129 0->130 0->131 0->133 0->134 0->135 0->136 0->137 0->138 0->139 0->140 0->141 0->142 0->143 0->144 0->145 0->146 0->147 0->148 0->149 0->150 0->151 0->152 0->154 0->155 0->156 0->157 0->158 0->159 0->160 0->161 0->165 0->166 0->168 0->169 0->170 0->171 0->172 0->173 0->174 0->175 0->176 0->177 0->178 0->179 0->181 0->182 0->184 0->187 0->188 0->189 0->190 0->191 2->1 3->1 4->1 4->1 4->1 5->1 5->1 5->1 6->1 6->1 6->1 6->8 6->16 7->1 8->1 8->1 8->1 8->8 8->9 8->9 8->14 8->15 8->16 8->17 8->18 8->19 8->20 8->21 8->21 8->24 8->26 8->28 8->30 8->33 8->40 8->41 8->42 8->52 8->53 8->60 8->61 8->63 8->63 8->64 8->69 8->70 8->71 8->72 8->74 8->75 8->76 8->78 8->79 8->80 8->81 8->84 8->85 8->86 8->87 8->88 8->89 8->90 8->91 8->92 8->95 8->96 8->98 8->192 8->193 8->194 8->195 9->1 9->8 10->1 10->1 10->7 11->1 12->1 13->1 13->1 13->8 14->1 14->1 14->1 14->32 14->65 14->167 14->183 15->1 15->1 15->73 15->75 16->1 16->1 16->17 16->18 16->24 16->43 16->110 17->1 17->1 17->1 17->16 17->24 17->110 18->1 18->1 18->19 18->20 18->26 18->54 18->154 19->1 19->1 19->1 19->18 19->26 19->154 20->1 20->1 20->1 20->16 20->28 20->62 21->1 21->1 22->1 23->1 24->1 24->17 24->24 24->25 24->43 24->44 24->45 24->46 24->47 24->48 24->49 24->50 24->51 24->99 24->99 24->100 24->101 24->102 24->103 24->104 24->115 24->116 24->117 24->118 24->119 24->120 24->121 24->122 24->123 24->136 24->137 24->138 24->139 24->140 24->141 24->142 24->143 24->144 24->156 24->157 24->158 24->197 24->198 24->199 24->200 24->201 24->202 24->203 24->204 24->205 24->214 24->215 24->216 24->217 24->218 24->219 24->220 24->221 24->222 24->223 24->224 24->225 25->1 25->24 26->1 26->19 26->26 26->27 26->54 26->55 26->56 26->57 26->58 26->59 26->105 26->105 26->106 26->107 26->108 26->124 26->125 26->126 26->127 26->128 26->129 26->145 26->146 26->147 26->148 26->149 26->150 26->159 26->160 26->206 26->207 26->208 26->209 26->210 26->211 26->226 26->227 26->228 26->229 26->230 26->231 26->232 26->233 27->1 27->26 28->1 28->1 28->20 28->28 28->29 28->29 28->62 28->73 28->93 28->109 28->212 29->1 29->28 30->1 30->1 30->1 30->30 30->31 30->31 30->32 30->75 30->86 30->96 30->196 31->1 31->30 32->1 32->1 33->1 33->1 33->1 33->65 33->77 33->97 33->97 33->114 33->135 33->213 35->1 35->4 35->4 35->11 35->11 35->22 35->22 36->1 37->1 37->5 37->5 37->12 37->12 37->23 37->23 38->1 39->1 39->13 39->13 40->1 41->1 41->15 41->15 42->1 42->1 42->24 43->1 43->1 43->44 43->46 43->50 43->54 43->56 43->59 44->1 44->1 44->45 44->47 44->49 44->55 44->57 44->58 45->1 45->1 45->18 45->43 45->48 45->51 45->62 45->82 45->133 45->166 45->168 46->1 47->1 48->1 49->1 49->1 50->1 50->1 51->1 51->1 52->1 52->17 52->17 53->1 53->1 53->26 54->1 54->1 54->43 54->46 54->50 54->55 54->56 54->59 55->1 55->1 55->20 55->44 55->47 55->54 55->57 55->58 56->1 57->1 58->1 58->1 59->1 59->1 60->1 60->19 60->19 61->1 61->1 61->28 62->1 62->1 62->1 62->16 62->45 62->48 62->51 62->82 62->133 62->166 62->168 63->1 64->1 64->1 64->30 65->1 65->1 69->1 69->14 69->40 73->1 73->1 73->75 73->82 73->83 73->83 73->94 73->110 73->112 73->113 73->130 73->131 73->132 73->134 73->151 73->152 73->161 73->165 73->171 73->172 73->175 73->234 74->1 74->21 74->21 74->63 74->63 75->1 75->30 75->30 75->33 76->1 76->33 76->33 77->1 78->1 78->69 79->1 79->42 79->42 80->1 80->53 80->53 81->1 81->61 81->61 82->1 82->1 82->1 83->1 83->73 83->75 85->1 85->64 85->64 86->1 86->75 86->75 88->1 88->78 88->78 89->1 93->1 93->73 93->73 94->1 94->1 94->112 97->1 97->1 99->1 99->100 100->1 100->101 101->1 101->118 102->1 102->1 103->1 103->1 104->1 104->1 105->1 105->106 106->1 106->126 107->1 107->1 108->1 108->1 110->1 110->1 110->1 110->16 110->24 110->111 110->153 110->166 110->236 110->241 110->242 111->1 111->110 112->113 112->154 112->164 112->170 112->174 113->1 113->1 113->133 113->134 113->235 114->1 114->97 114->97 115->1 115->99 115->99 116->1 116->100 116->100 117->1 117->101 117->101 118->1 118->102 118->102 118->120 119->1 119->102 119->102 120->1 120->103 120->103 120->122 121->1 121->103 121->103 122->1 122->25 122->104 122->104 123->1 123->104 123->104 124->1 124->105 124->105 125->1 125->106 125->106 126->1 126->107 126->107 126->128 127->1 127->107 127->107 128->1 128->27 128->108 128->108 129->1 129->108 129->108 130->1 131->1 131->94 131->94 132->1 132->1 132->110 133->1 133->1 133->1 134->1 134->73 134->75 139->1 139->118 139->118 141->1 141->120 141->120 143->1 143->122 143->122 147->1 147->126 147->126 149->1 149->128 149->128 153->1 153->1 153->1 153->110 153->111 153->162 153->163 153->169 153->172 153->173 153->179 153->182 153->239 153->240 153->245 153->246 154->1 154->1 154->1 154->18 154->26 154->155 154->168 154->247 154->248 154->249 155->1 155->154 161->1 161->132 161->132 162->1 162->1 162->1 163->1 163->1 163->112 164->1 164->1 164->154 166->1 166->1 166->45 166->48 166->62 166->82 166->133 166->153 166->153 166->167 166->168 166->171 166->178 166->181 166->237 166->238 166->243 166->244 167->1 167->1 167->153 167->153 168->1 168->1 168->1 168->45 168->48 168->62 168->82 168->133 168->154 168->155 168->166 168->175 168->180 168->184 168->187 169->1 169->163 169->163 170->1 170->164 170->164 171->1 171->73 171->75 171->134 171->172 171->175 172->1 172->73 172->75 172->134 172->175 175->1 175->1 175->73 175->75 175->134 175->176 175->183 175->250 175->251 175->252 175->253 176->1 176->175 178->1 178->171 178->171 179->1 179->172 179->172 180->1 180->1 180->175 183->1 183->1 183->1 183->175 183->176 183->185 183->186 183->188 183->189 183->190 183->191 184->1 184->180 184->180 185->1 185->1 185->73 185->75 185->134 185->175 186->1 186->1 186->113 188->1 188->185 188->185 189->1 189->186 189->186
>>>Token int main ( int ReplacementFor_argc , char * ReplacementFor_argv [ ] ) { int i , ReplacementFor_j , ReplacementFor_k , l ; int ReplacementFor_test ; int ReplacementFor_case_numbs , ReplacementFor_counter , ReplacementFor_output_sz ; char ReplacementFor_charA , ReplacementFor_charB , ReplacementFor_Result ; char * ReplacementFor_output ; ReplacementFor_red = ( struct ReplacementFor_reduce_st * ) calloc ( ( 0x21ff + 22 - 0x21c5 ) , sizeof ( ReplacementFor_reduce ) ) ; ReplacementFor_des = ( struct ReplacementFor_destroy_st * ) calloc ( ( 0x2c5 + 3871 - 0x1194 ) , sizeof ( ReplacementFor_destroy ) ) ; fscanf ( stdin , " \x25 \x64 " " \n " , & ReplacementFor_case_numbs ) ; for ( i = ( 0xd76 + 624 - 0xfe6 ) ; i < ReplacementFor_case_numbs ; i ++ ) { ReplacementFor_output = ( char * ) malloc ( ( 0xb80 + 5002 - 0x1ea6 ) * sizeof ( char ) ) ; ReplacementFor_output_sz = ( 0x74b + 277 - 0x860 ) ; fscanf ( stdin , " \x25 \x64 \x20 " , & ReplacementFor_red_sz ) ; for ( ReplacementFor_j = ( 0x90d + 4694 - 0x1b63 ) ; ReplacementFor_j < ReplacementFor_red_sz ; ReplacementFor_j ++ ) { fscanf ( stdin , " \x25 \x63 " , & ReplacementFor_charA ) ; fscanf ( stdin , " \x25 \x63 " , & ReplacementFor_charB ) ; fscanf ( stdin , " \x25 \x63 \x20 " , & ReplacementFor_Result ) ; ReplacementFor_red [ ( 0x140c + 2549 - 0x1dff ) * ReplacementFor_j ] . ReplacementFor_x = ReplacementFor_charA ; ReplacementFor_red [ ( 0x41 + 1048 - 0x457 ) * ReplacementFor_j ] . ReplacementFor_y = ReplacementFor_charB ; ReplacementFor_red [ ( 0x113 + 8775 - 0x2358 ) * ReplacementFor_j ] . ReplacementFor_result = ReplacementFor_Result ; ReplacementFor_red [ ( 0xd5a + 4363 - 0x1e63 ) * ReplacementFor_j + ( 0x726 + 526 - 0x933 ) ] . ReplacementFor_x = ReplacementFor_charB ; ReplacementFor_red [ ( 0x55a + 2331 - 0xe73 ) * ReplacementFor_j + ( 0x11c0 + 3807 - 0x209e ) ] . ReplacementFor_y = ReplacementFor_charA ; ReplacementFor_red [ ( 0x5f3 + 81 - 0x642 ) * ReplacementFor_j + ( 0x1039 + 3996 - 0x1fd4 ) ] . ReplacementFor_result = ReplacementFor_Result ; } ReplacementFor_red_sz *= ( 0x6f1 + 1556 - 0xd03 ) ; fscanf ( stdin , " \x25 \x64 \x20 " , & ReplacementFor_des_sz ) ; for ( ReplacementFor_j = ( 0x2e7 + 6811 - 0x1d82 ) ; ReplacementFor_j < ReplacementFor_des_sz ; ReplacementFor_j ++ ) { fscanf ( stdin , " \x25 \x63 " , & ReplacementFor_charA ) ; fscanf ( stdin , " \x25 \x63 \x20 " , & ReplacementFor_charB ) ; ReplacementFor_des [ ( 0x7d6 + 6572 - 0x2180 ) * ReplacementFor_j ] . ReplacementFor_x = ReplacementFor_charA ; ReplacementFor_des [ ( 0x611 + 7531 - 0x237a ) * ReplacementFor_j ] . ReplacementFor_y = ReplacementFor_charB ; ReplacementFor_des [ ( 0x17c0 + 2398 - 0x211c ) * ReplacementFor_j + ( 0x1431 + 65 - 0x1471 ) ] . ReplacementFor_x = ReplacementFor_charB ; ReplacementFor_des [ ( 0x3a0 + 6907 - 0x1e99 ) * ReplacementFor_j + ( 0xffc + 2343 - 0x1922 ) ] . ReplacementFor_y = ReplacementFor_charA ; } ReplacementFor_des_sz *= ( 0x2ac + 5689 - 0x18e3 ) ; fscanf ( stdin , " \x25 \x64 \x20 " , & ReplacementFor_counter ) ; for ( ReplacementFor_j = ( 0x2a4 + 3322 - 0xf9e ) ; ReplacementFor_j < ReplacementFor_counter ; ReplacementFor_j ++ ) { fscanf ( stdin , " \x25 \x63 " , & ReplacementFor_Result ) ; if ( ReplacementFor_output_sz == ( 0x15da + 2221 - 0x1e87 ) ) { ReplacementFor_output [ ( 0x9c8 + 4979 - 0x1d3b ) ] = ReplacementFor_Result ; ReplacementFor_output_sz ++ ; } else { ReplacementFor_test = ( 0x77b + 790 - 0xa91 ) ; for ( ReplacementFor_k = ( 0x73d + 1312 - 0xc5d ) ; ReplacementFor_k < ReplacementFor_red_sz ; ReplacementFor_k ++ ) { if ( ( ReplacementFor_red [ ReplacementFor_k ] . ReplacementFor_x == ReplacementFor_Result ) && ( ReplacementFor_red [ ReplacementFor_k ] . ReplacementFor_y == ReplacementFor_output [ ReplacementFor_output_sz - ( 0x9d9 + 6775 - 0x244f ) ] ) ) { ReplacementFor_output [ ReplacementFor_output_sz - ( 0x1638 + 2247 - 0x1efe ) ] = ReplacementFor_red [ ReplacementFor_k ] . ReplacementFor_result ; ReplacementFor_test = ( 0x1297 + 1499 - 0x1871 ) ; break ; } } if ( ! ReplacementFor_test ) { for ( ReplacementFor_k = ( 0x1b3d + 2447 - 0x24cc ) ; ReplacementFor_k < ReplacementFor_des_sz ; ReplacementFor_k ++ ) { if ( ReplacementFor_des [ ReplacementFor_k ] . ReplacementFor_x == ReplacementFor_Result ) { for ( l = ( 0x520 + 1688 - 0xbb8 ) ; l < ReplacementFor_output_sz ; l ++ ) { if ( ReplacementFor_output [ l ] == ReplacementFor_des [ ReplacementFor_k ] . ReplacementFor_y ) { ReplacementFor_output_sz = ( 0x9d7 + 3972 - 0x195b ) ; ReplacementFor_test = ( 0xb8f + 5333 - 0x2063 ) ; break ; } } if ( ReplacementFor_test ) break ; } } } if ( ! ReplacementFor_test ) { ReplacementFor_output [ ReplacementFor_output_sz ] = ReplacementFor_Result ; ReplacementFor_output_sz ++ ; } } } printf ( " \x43 \x61 \x73 \x65 \x20 \x23 \x25 \x64 \x3a \x20 \x5b " , i + ( 0xe25 + 1768 - 0x150c ) ) ; for ( ReplacementFor_j = ( 0x43f + 7410 - 0x2131 ) ; ReplacementFor_j < ReplacementFor_output_sz - ( 0xb52 + 6019 - 0x22d4 ) ; ReplacementFor_j ++ ) printf ( " \x25 \x63 \x2c \x20 " , ReplacementFor_output [ ReplacementFor_j ] ) ; if ( ReplacementFor_output_sz != ( 0x1866 + 775 - 0x1b6d ) ) printf ( " \x25 \x63 \x5d " " \n " , ReplacementFor_output [ ReplacementFor_output_sz - ( 0x1b71 + 240 - 0x1c60 ) ] ) ; else printf ( " \x5d " " \n " ) ; } return ( 0x141 + 2610 - 0xb73 ) ; }
>>>Func
METHOD ReplacementFor_handleCase
METHOD_RETURN void
PARAM void
scanf scanf(\012"\x25\x49\x36\x34\x64\x20\x25\x64\x20\x25\x64\x20",&ReplacementFor_N,&\012ReplacementFor_D,&ReplacementFor_G)
<operator>.assignment ReplacementFor_a=(0xa9+8845-0x22d2)/\012ReplacementFor_gcd((0x7b8+1785-0xe4d),ReplacementFor_D)
<operator>.logicalOr (ReplacementFor_G==\012(0x18cc+2076-0x20e8)&&ReplacementFor_D!=(0xef4+802-0x1216))||(ReplacementFor_G==\012(0xb19+456-0xc7d)&&ReplacementFor_D!=(0x114c+2403-0x1a4b))||((long long)\012ReplacementFor_a>ReplacementFor_N)
<operator>.division (0xa9+8845-0x22d2)/\012ReplacementFor_gcd((0x7b8+1785-0xe4d),ReplacementFor_D)
printf printf("\x42\x72\x6f\x6b\x65\x6e" "\n")
<operator>.subtraction 0xa9+8845-0x22d2
ReplacementFor_gcd ReplacementFor_gcd((0x7b8+1785-0xe4d),ReplacementFor_D)
<operator>.logicalOr (ReplacementFor_G==\012(0x18cc+2076-0x20e8)&&ReplacementFor_D!=(0xef4+802-0x1216))||(ReplacementFor_G==\012(0xb19+456-0xc7d)&&ReplacementFor_D!=(0x114c+2403-0x1a4b))
<operator>.greaterThan (long long)\012ReplacementFor_a>ReplacementFor_N
printf printf("\x50\x6f\x73\x73\x69\x62\x6c\x65" "\n")
<operator>.addition 0xa9+8845
<operator>.subtraction 0x7b8+1785-0xe4d
<operator>.logicalAnd ReplacementFor_G==\012(0x18cc+2076-0x20e8)&&ReplacementFor_D!=(0xef4+802-0x1216)
<operator>.logicalAnd ReplacementFor_G==\012(0xb19+456-0xc7d)&&ReplacementFor_D!=(0x114c+2403-0x1a4b)
<operator>.cast (long long)\012ReplacementFor_a
<operator>.addition 0x7b8+1785
<operator>.equals ReplacementFor_G==\012(0x18cc+2076-0x20e8)
<operator>.notEquals ReplacementFor_D!=(0xef4+802-0x1216)
<operator>.equals ReplacementFor_G==\012(0xb19+456-0xc7d)
<operator>.notEquals ReplacementFor_D!=(0x114c+2403-0x1a4b)
<operator>.subtraction 0x18cc+2076-0x20e8
<operator>.subtraction 0xef4+802-0x1216
<operator>.subtraction 0xb19+456-0xc7d
<operator>.subtraction 0x114c+2403-0x1a4b
<operator>.addition 0x18cc+2076
<operator>.addition 0xef4+802
<operator>.addition 0xb19+456
<operator>.addition 0x114c+2403
UNKNOWN long long long long
>>>PDG&32 0->2 0->3 0->7 0->8 0->9 0->11 0->12 0->13 0->14 0->17 0->18 0->19 0->20 0->21 0->22 0->23 0->24 0->25 0->26 0->27 0->28 0->29 0->30 2->1 3->1 3->1 3->1 3->11 4->1 4->1 4->1 4->11 4->17 5->1 5->1 5->1 5->7 5->12 6->1 6->1 6->4 6->4 7->1 8->1 8->6 8->6 9->1 9->1 9->6 9->6 9->20 9->22 10->1 10->1 10->5 10->5 10->11 10->17 10->31 11->1 11->1 11->5 11->5 14->1 14->9 14->9 15->1 15->1 15->10 15->10 15->16 15->21 15->25 15->29 16->1 16->1 16->10 16->10 17->1 19->1 19->1 19->15 19->15 19->20 19->21 19->24 19->28 20->1 20->1 20->15 20->15 20->22 21->1 21->1 21->16 21->16 21->22 21->26 21->30 22->1 22->1 22->16 22->16 23->1 23->19 23->19 24->1 24->20 24->20 25->1 25->21 25->21 26->1 26->22 26->22
>>>Token void ReplacementFor_handleCase ( void ) { long long ReplacementFor_N ; int ReplacementFor_D , ReplacementFor_G ; scanf ( " \x25 \x49 \x36 \x34 \x64 \x20 \x25 \x64 \x20 \x25 \x64 \x20 " , & ReplacementFor_N , & ReplacementFor_D , & ReplacementFor_G ) ; int ReplacementFor_a = ( 0xa9 + 8845 - 0x22d2 ) / ReplacementFor_gcd ( ( 0x7b8 + 1785 - 0xe4d ) , ReplacementFor_D ) ; if ( ( ReplacementFor_G == ( 0x18cc + 2076 - 0x20e8 ) && ReplacementFor_D != ( 0xef4 + 802 - 0x1216 ) ) || ( ReplacementFor_G == ( 0xb19 + 456 - 0xc7d ) && ReplacementFor_D != ( 0x114c + 2403 - 0x1a4b ) ) || ( ( long long ) ReplacementFor_a > ReplacementFor_N ) ) { printf ( " \x42 \x72 \x6f \x6b \x65 \x6e " " \n " ) ; } else { printf ( " \x50 \x6f \x73 \x73 \x69 \x62 \x6c \x65 " " \n " ) ; } }
>>>Func
METHOD main
METHOD_RETURN int
PARAM int ReplacementFor_argc
PARAM char*ReplacementFor_argv[]
srand srand((unsigned)time(&t))
<operator>.assignment ReplacementFor_n=(int)ReplacementFor_argv[\012(0x250+4853-0x1544)][(0x1b93+934-0x1f39)]
<operator>.assignment ReplacementFor_f=\012ReplacementFor_fib(ReplacementFor_n)
printf printf(\012"\x66\x69\x62\x28\x25\x6c\x69\x29\x3d\x25\x69" "\n",ReplacementFor_n,\012ReplacementFor_f)
<operator>.lessThan ReplacementFor_argc<(0x1c13+2644-0x2665)
RETURN return(0xb64+5486-0x20d1); return(0xb64+5486-0x20d1);
<operator>.cast (unsigned)time(&t)
ReplacementFor_fib ReplacementFor_fib(ReplacementFor_n)
<operator>.subtraction 0x1c13+2644-0x2665
<operator>.subtraction 0xb64+5486-0x20d1
time time(&t)
<operator>.addition 0x1c13+2644
<operator>.subtraction 0x1b93+934-0x1f39
<operator>.addition 0xb64+5486
<operator>.subtraction 0x250+4853-0x1544
<operator>.addition 0x1b93+934
<operator>.addition 0x250+4853
<operator>.cast (int)ReplacementFor_argv[\012(0x250+4853-0x1544)][(0x1b93+934-0x1f39)]
UNKNOWN unsigned unsigned
UNKNOWN int int
<operator>.indirectIndexAccess ReplacementFor_argv[\012(0x250+4853-0x1544)][(0x1b93+934-0x1f39)]
<operator>.addressOf &t
<operator>.indirectIndexAccess ReplacementFor_argv[\012(0x250+4853-0x1544)]
>>>PDG&27 0->2 0->3 0->7 0->8 0->11 0->12 0->13 0->14 0->15 0->16 0->17 0->18 0->19 0->20 2->8 3->1 5->11 6->7 8->1 8->1 8->1 8->4 8->5 8->6 8->7 8->9 8->10 8->11 8->13 8->14 8->16 8->17 8->18 8->19 8->20 8->21 8->22 8->23 8->24 8->25 8->26 9->1 11->6 11->7 12->1 12->8 12->8 13->1 13->1 13->9 14->4 14->10
>>>Token int main ( int ReplacementFor_argc , char * ReplacementFor_argv [ ] ) { if ( ReplacementFor_argc < ( 0x1c13 + 2644 - 0x2665 ) ) return ( 0xb64 + 5486 - 0x20d1 ) ; time_t t ; srand ( ( unsigned ) time ( & t ) ) ; int ReplacementFor_n = ( int ) ReplacementFor_argv [ ( 0x250 + 4853 - 0x1544 ) ] [ ( 0x1b93 + 934 - 0x1f39 ) ] ; int ReplacementFor_f = ReplacementFor_fib ( ReplacementFor_n ) ; printf ( " \x66 \x69 \x62 \x28 \x25 \x6c \x69 \x29 \x3d \x25 \x69 " " \n " , ReplacementFor_n , ReplacementFor_f ) ; }
>>>Func
METHOD main
METHOD_RETURN int
PARAM int ReplacementFor_argc
PARAM char*ReplacementFor_argv[]
<operator>.assignment ReplacementFor_c=ReplacementFor_argv[(0x10f3+801-0x1413)][(0xc4c+3466-0x19d6)]
RETURN return(0x19f+4884-0x14b3); return(0x19f+4884-0x14b3);
<operator>.greaterThan ReplacementFor_c>(0x728+6370-0x1fb5)
<operator>.lessThan ReplacementFor_c<\012(0x1816+3961-0x26e5)
<operator>.subtraction 0x19f+4884-0x14b3
printf printf(\012"\x69\x66\x2d\x31\x2d\x77\x69\x6e\x20")
printf printf("\x69\x66\x2d\x32\x2d\x77\x69\x6e" "\n")
<operator>.subtraction 0xc4c+3466-0x19d6
<operator>.subtraction 0x728+6370-0x1fb5
printf printf(\012"\x69\x66\x2d\x31\x2d\x6c\x6f\x73\x65\x20")
<operator>.subtraction 0x1816+3961-0x26e5
printf printf\012("\x69\x66\x2d\x32\x2d\x6c\x6f\x73\x65" "\n")
<operator>.addition 0x19f+4884
<operator>.subtraction 0x10f3+801-0x1413
<operator>.addition 0xc4c+3466
<operator>.addition 0x728+6370
<operator>.addition 0x1816+3961
<operator>.addition 0x10f3+801
>>>PDG&22 0->2 0->3 0->6 0->7 0->8 0->9 0->10 0->11 0->12 0->13 0->14 0->15 0->16 0->17 0->18 0->19 0->20 0->21 2->1 3->1 4->1 4->1 4->6 5->1 6->1 6->1 6->7 6->9 6->13 7->1 7->1 7->1 7->10 7->15 8->1 8->1 8->5 9->1 10->1 11->1 12->1 12->6 12->6 13->1 14->1 14->7 14->7 15->1 17->1
>>>Token int main ( int ReplacementFor_argc , char * ReplacementFor_argv [ ] ) { unsigned char ReplacementFor_c = ReplacementFor_argv [ ( 0x10f3 + 801 - 0x1413 ) ] [ ( 0xc4c + 3466 - 0x19d6 ) ] ; if ( ReplacementFor_c > ( 0x728 + 6370 - 0x1fb5 ) ) printf ( " \x69 \x66 \x2d \x31 \x2d \x77 \x69 \x6e \x20 " ) ; else printf ( " \x69 \x66 \x2d \x31 \x2d \x6c \x6f \x73 \x65 \x20 " ) ; if ( ReplacementFor_c < ( 0x1816 + 3961 - 0x26e5 ) ) printf ( " \x69 \x66 \x2d \x32 \x2d \x77 \x69 \x6e " " \n " ) ; else printf ( " \x69 \x66 \x2d \x32 \x2d \x6c \x6f \x73 \x65 " " \n " ) ; return ( 0x19f + 4884 - 0x14b3 ) ; }
>>>Func
METHOD main
METHOD_RETURN int
PARAM int ReplacementFor_argc
PARAM char**ReplacementFor_argv
<operator>.assignment retval=(0xdbf+6450-0x26f1)
<operator>.assignment ReplacementFor_fpin=fopen(\012ReplacementFor_argv[(0xdf8+3348-0x1b0b)],"\x72")
<operator>.assignment ReplacementFor_fpout=fopen(\012"\x6f\x75\x74\x63\x6f\x6d\x65","\x77")
fclose fclose(ReplacementFor_fpout)
fclose fclose(\012ReplacementFor_fpin)
RETURN return retval; return retval;
<operator>.notEquals ReplacementFor_argc!=(0x1b1d+2151-0x2382)
<operator>.logicalNot !ReplacementFor_fpin
<operator>.notEquals fscanf(ReplacementFor_fpin,"\x25\x64",\012&T)!=(0x5f2+6865-0x20c2)
<operator>.lessEqualsThan t<=T
<operator>.postIncrement t++
IDENTIFIER retval return retval;
<operator>.subtraction 0xdbf+6450-0x26f1
fprintf fprintf(\012stderr,\012"\x50\x6c\x65\x61\x73\x65\x20\x70\x72\x6f\x76\x69\x64\x65\x20\x69\x6e\x70\x75\x74\x20\x66\x69\x6c\x65\x20\x6e\x61\x6d\x65\x20\x6f\x6e\x20\x63\x6f\x6d\x6d\x61\x6e\x64\x20\x6c\x69\x6e\x65\x2e" "\n"\012)
<operator>.assignment retval=(0xb26+328-0xc6d)
fopen fopen(\012ReplacementFor_argv[(0xdf8+3348-0x1b0b)],"\x72")
fprintf fprintf(stderr,\012"\x69\x6e\x70\x75\x74\x20\x66\x69\x6c\x65\x20\x6e\x6f\x74\x20\x66\x6f\x75\x6e\x64" "\n"\012)
RETURN return(0x123a+4614-0x243f); return(0x123a+4614-0x243f);
fopen fopen(\012"\x6f\x75\x74\x63\x6f\x6d\x65","\x77")
fprintf fprintf(stderr,\012"\x5b\x54\x5d\x20\x69\x6e\x70\x75\x74\x20\x66\x69\x6c\x65\x20\x66\x6f\x72\x6d\x61\x74\x20\x77\x72\x6f\x6e\x67" "\n"\012)
<operator>.assignment retval=(0xae1+2725-0x1585)
<operator>.assignment t=(0x17e3+969-0x1bab)
<operator>.assignment ReplacementFor_S_C[ReplacementFor_C*(0xe7+4338-0x11d6)]='\0'
<operator>.assignment ReplacementFor_S_D[ReplacementFor_D*(0x171f+78-0x176b)]='\0'
<operator>.assignment ReplacementFor_S_N[ReplacementFor_N]='\0'
printf printf(\012"\x5b\x64\x65\x62\x75\x67\x5d\x20\x43\x3d\x25\x64\x3a\x27\x25\x73\x27\x20\x44\x3d\x25\x64\x3a\x27\x25\x73\x27\x20\x4e\x3d\x25\x64\x3a\x27\x25\x73\x27\x20\x20\x20" "\n"\012,ReplacementFor_C,ReplacementFor_S_C,ReplacementFor_D,ReplacementFor_S_D,\012ReplacementFor_N,ReplacementFor_S_N)
memset memset(ReplacementFor_S_e \012(0x1fe1+1791-0x26e0) ReplacementFor_MAX_N+(0xbb7+1397-0x112b))
<operator>.assignment ReplacementFor_S_e[(0x41b+2897-0xf6c)]=ReplacementFor_S_N[(0x1b3+1685-0x848)]
<operator>.assignment e=\012(0x1d4a+1077-0x217f)
fflush fflush(\012stdout)
fprintf fprintf(ReplacementFor_fpout,\012"\x43\x61\x73\x65\x20\x23\x25\x64\x3a\x20\x5b",t)
fprintf fprintf(stdout,\012"\x43\x61\x73\x65\x20\x23\x25\x64\x3a\x20\x5b",t)
fprintf fprintf(ReplacementFor_fpout,"\x5d" "\n")
fprintf fprintf(stdout,\012"\x5d" "\n")
<operator>.addition 0xdbf+6450
<operator>.subtraction 0x1b1d+2151-0x2382
<operator>.subtraction 0x123a+4614-0x243f
fscanf fscanf(ReplacementFor_fpin,"\x25\x64",\012&T)
<operator>.subtraction 0x5f2+6865-0x20c2
<operator>.notEquals fscanf(ReplacementFor_fpin,"\x25\x64",&ReplacementFor_C)!=\012(0x1f9+2279-0xadf)
<operator>.lessThan ReplacementFor_c<ReplacementFor_C
<operator>.postIncrement ReplacementFor_c++
<operator>.notEquals fscanf(\012ReplacementFor_fpin,"\x20\x25\x64",&ReplacementFor_D)!=(0xd79+2110-0x15b6)
<operator>.lessThan ReplacementFor_d<ReplacementFor_D
<operator>.postIncrement ReplacementFor_d++
<operator>.notEquals fscanf(\012ReplacementFor_fpin,"\x20\x25\x64\x20",&ReplacementFor_N)!=(0x138d+1925-0x1b11)
<operator>.lessThan ReplacementFor_n<ReplacementFor_N
<operator>.postIncrement ReplacementFor_n++
<operator>.lessThan ReplacementFor_n<\012ReplacementFor_N
<operator>.postIncrement ReplacementFor_n++
<operator>.lessEqualsThan i<=e
<operator>.postIncrement i++
<operator>.addition 0x1b1d+2151
<operator>.subtraction 0xb26+328-0xc6d
<operator>.subtraction 0xdf8+3348-0x1b0b
<operator>.addition 0x5f2+6865
<operator>.subtraction 0xae1+2725-0x1585
<operator>.subtraction 0x17e3+969-0x1bab
fprintf fprintf(stderr,\012"\x5b\x43\x5d\x20\x69\x6e\x70\x75\x74\x20\x66\x69\x6c\x65\x20\x66\x6f\x72\x6d\x61\x74\x20\x77\x72\x6f\x6e\x67" "\n"\012)
<operator>.assignment retval=(0x2453+184-0x250a)
<operator>.assignment ReplacementFor_c=\012(0x7a7+5955-0x1eea)
fprintf fprintf(stderr,\012"\x5b\x44\x5d\x20\x69\x6e\x70\x75\x74\x20\x66\x69\x6c\x65\x20\x66\x6f\x72\x6d\x61\x74\x20\x77\x72\x6f\x6e\x67" "\n"\012)
<operator>.assignment retval=(0x111+2404-0xa74)
<operator>.assignment ReplacementFor_d=\012(0xbe9+1940-0x137d)
fprintf fprintf(stderr,\012"\x5b\x4e\x5d\x20\x69\x6e\x70\x75\x74\x20\x66\x69\x6c\x65\x20\x66\x6f\x72\x6d\x61\x74\x20\x77\x72\x6f\x6e\x67" "\n"\012)
<operator>.assignment retval=(0x9df+5527-0x1f75)
<operator>.assignment ReplacementFor_n=\012(0xe57+3681-0x1cb8)
<operator>.subtraction 0x1fe1+1791-0x26e0
<operator>.addition ReplacementFor_MAX_N+(0xbb7+1397-0x112b)
<operator>.subtraction 0x1d4a+1077-0x217f
<operator>.assignment ReplacementFor_n=(0x37b+2596-0xd9e)
<operator>.assignment ReplacementFor_action=\012((char)(0x4d7+4084-0x14ab))
<operator>.assignment ReplacementFor_pair[(0x128d+59-0x12c8)]=\012ReplacementFor_S_e[e]
<operator>.assignment ReplacementFor_pair[(0x1b9c+670-0x1e39)]=\012ReplacementFor_S_N[ReplacementFor_n]
<operator>.assignment i=(0x2c6+1528-0x8be)
fprintf fprintf(ReplacementFor_fpout "\x25\x63\x25\x73" ReplacementFor_S_e[i] (i==e\012?"":"\x2c\x20"))
fprintf fprintf(stdout "\x25\x63\x25\x73" ReplacementFor_S_e[i] (i==e?\012"":"\x2c\x20"))
<operator>.addition 0xb26+328
<operator>.addition 0xdf8+3348
<operator>.addition 0x123a+4614
<operator>.addition 0xae1+2725
<operator>.addition 0x17e3+969
fscanf fscanf(ReplacementFor_fpin,"\x25\x64",&ReplacementFor_C)
<operator>.subtraction 0x1f9+2279-0xadf
<operator>.notEquals fscanf(ReplacementFor_fpin "\x20\x25\x63\x25\x63\x25\x63" &ReplacementFor_S_C[\012ReplacementFor_c*(0x1bbf+2167-0x2433)] &ReplacementFor_S_C[ReplacementFor_c*\012(0x1c67+28-0x1c80)+(0x4af+7883-0x2379)] &ReplacementFor_S_C[ReplacementFor_c*\012(0x362+2700-0xdeb)+(0x93a+6551-0x22cf)])!=(0x123d+704-0x14fa)
<operator>.multiplication ReplacementFor_C*(0xe7+4338-0x11d6)
fscanf fscanf(\012ReplacementFor_fpin,"\x20\x25\x64",&ReplacementFor_D)
<operator>.subtraction 0xd79+2110-0x15b6
<operator>.notEquals fscanf(ReplacementFor_fpin "\x20\x25\x63\x25\x63" &ReplacementFor_S_D[\012ReplacementFor_d*(0xcdf+6150-0x24e3)] &ReplacementFor_S_D[ReplacementFor_d*\012(0x1033+5028-0x23d5)+(0x2380+39-0x23a6)])!=(0xc97+1434-0x122f)
<operator>.multiplication ReplacementFor_D*(0x171f+78-0x176b)
fscanf fscanf(\012ReplacementFor_fpin,"\x20\x25\x64\x20",&ReplacementFor_N)
<operator>.subtraction 0x138d+1925-0x1b11
<operator>.notEquals fscanf(ReplacementFor_fpin,"\x25\x63",&ReplacementFor_S_N[ReplacementFor_n])!=\012(0x2553+26-0x256c)
<operator>.addition 0x1fe1+1791
<operator>.subtraction 0xbb7+1397-0x112b
<operator>.subtraction 0x41b+2897-0xf6c
<operator>.subtraction 0x1b3+1685-0x848
<operator>.addition 0x1d4a+1077
<operator>.lessThan ReplacementFor_c<ReplacementFor_C
<operator>.postIncrement ReplacementFor_c++
<operator>.equals ReplacementFor_action==\012((char)(0x1a65+2031-0x2234))
<operator>.equals ReplacementFor_action==\012((char)(0xad9+4585-0x1ca2))
<operator>.addition 0x1f9+2279
<operator>.subtraction 0x2453+184-0x250a
<operator>.subtraction 0x7a7+5955-0x1eea
fprintf fprintf(stderr,\012"\x5b\x43\x28\x25\x64\x29\x5d\x20\x69\x6e\x70\x75\x74\x20\x66\x69\x6c\x65\x20\x66\x6f\x72\x6d\x61\x74\x20\x77\x72\x6f\x6e\x67" "\n"\012,ReplacementFor_c)
<operator>.assignment retval=(0x161+837-0x4a5)
<operator>.subtraction 0xe7+4338-0x11d6
<operator>.addition 0xd79+2110
<operator>.subtraction 0x111+2404-0xa74
<operator>.subtraction 0xbe9+1940-0x137d
fprintf fprintf(stderr,\012"\x5b\x44\x28\x25\x64\x29\x5d\x20\x69\x6e\x70\x75\x74\x20\x66\x69\x6c\x65\x20\x66\x6f\x72\x6d\x61\x74\x20\x77\x72\x6f\x6e\x67" "\n"\012,ReplacementFor_d)
<operator>.assignment retval=(0x190b+2253-0x21d7)
<operator>.subtraction 0x171f+78-0x176b
<operator>.addition 0x138d+1925
<operator>.subtraction 0x9df+5527-0x1f75
<operator>.subtraction 0xe57+3681-0x1cb8
fprintf fprintf(stderr,\012"\x5b\x4e\x28\x25\x64\x29\x5d\x20\x69\x6e\x70\x75\x74\x20\x66\x69\x6c\x65\x20\x66\x6f\x72\x6d\x61\x74\x20\x77\x72\x6f\x6e\x67" "\n"\012,ReplacementFor_n)
<operator>.assignment retval=(0x6ac+5664-0x1ccb)
<operator>.addition 0xbb7+1397
<operator>.addition 0x41b+2897
<operator>.addition 0x1b3+1685
<operator>.subtraction 0x37b+2596-0xd9e
<operator>.cast (char)(0x4d7+4084-0x14ab)
<operator>.assignment ReplacementFor_c=(0xe32+5506-0x23b4)
<operator>.assignment ReplacementFor_pair[(0xe5+6318-0x1993)]=\012ReplacementFor_S_N[ReplacementFor_n]
printf printf(\012"\x5b\x64\x65\x62\x75\x67\x5d\x20\x53\x5f\x65\x3d\x5b\x25\x73\x7c\x25\x63\x5d\x20\x65\x3a\x25\x64"\012,ReplacementFor_S_e,ReplacementFor_S_N[ReplacementFor_n],e)
<operator>.assignment ReplacementFor_S_e[\012++e]=ReplacementFor_S_N[ReplacementFor_n]
printf printf(\012"\x20\x20\x20\x41\x44\x44\x20\x20\x20\x20\x53\x5f\x65\x3d\x5b\x25\x73\x5d\x20\x65\x3a\x25\x64" "\n"\012,ReplacementFor_S_e,e)
<operator>.assignment ReplacementFor_action=((char)(0xb96+868-0xecf))
<operator>.subtraction 0x2c6+1528-0x8be
<operator>.conditional i==e\012?"":"\x2c\x20"
<operator>.conditional i==e?\012"":"\x2c\x20"
<operator>.addition 0x2453+184
<operator>.addition 0x7a7+5955
fscanf fscanf(ReplacementFor_fpin "\x20\x25\x63\x25\x63\x25\x63" &ReplacementFor_S_C[\012ReplacementFor_c*(0x1bbf+2167-0x2433)] &ReplacementFor_S_C[ReplacementFor_c*\012(0x1c67+28-0x1c80)+(0x4af+7883-0x2379)] &ReplacementFor_S_C[ReplacementFor_c*\012(0x362+2700-0xdeb)+(0x93a+6551-0x22cf)])
<operator>.subtraction 0x123d+704-0x14fa
<operator>.addition 0xe7+4338
<operator>.addition 0x111+2404
<operator>.addition 0xbe9+1940
fscanf fscanf(ReplacementFor_fpin "\x20\x25\x63\x25\x63" &ReplacementFor_S_D[\012ReplacementFor_d*(0xcdf+6150-0x24e3)] &ReplacementFor_S_D[ReplacementFor_d*\012(0x1033+5028-0x23d5)+(0x2380+39-0x23a6)])
<operator>.subtraction 0xc97+1434-0x122f
<operator>.addition 0x171f+78
<operator>.addition 0x9df+5527
<operator>.addition 0xe57+3681
fscanf fscanf(ReplacementFor_fpin,"\x25\x63",&ReplacementFor_S_N[ReplacementFor_n])
<operator>.subtraction 0x2553+26-0x256c
<operator>.addition 0x37b+2596
<operator>.subtraction 0x4d7+4084-0x14ab
<operator>.subtraction 0x128d+59-0x12c8
<operator>.subtraction 0x1b9c+670-0x1e39
<operator>.logicalOr ((ReplacementFor_pair[\012(0x16c5+3703-0x253c)]==ReplacementFor_S_C[ReplacementFor_c*(0x14f8+3274-0x21bf)]\012)&&(ReplacementFor_pair[(0x1e1+4966-0x1546)]==ReplacementFor_S_C[\012ReplacementFor_c*(0x4c0+5322-0x1987)+(0xbb+5690-0x16f4)]))||((\012ReplacementFor_pair[(0x6ed+7466-0x2416)]==ReplacementFor_S_C[ReplacementFor_c*\012(0x290+3843-0x1190)])&&(ReplacementFor_pair[(0xa48+775-0xd4f)]==\012ReplacementFor_S_C[ReplacementFor_c*(0xca0+3209-0x1926)+(0x1018+1066-0x1441)]))
<operator>.cast (char)(0x1a65+2031-0x2234)
<operator>.lessEqualsThan i<=e
<operator>.postIncrement i++
<operator>.cast (char)(0xad9+4585-0x1ca2)
<operator>.addition 0x2c6+1528
<operator>.equals i==e
<operator>.equals i==e
<operator>.addition 0x123d+704
<operator>.subtraction 0x161+837-0x4a5
<operator>.addition 0xc97+1434
<operator>.subtraction 0x190b+2253-0x21d7
<operator>.addition 0x2553+26
<operator>.subtraction 0x6ac+5664-0x1ccb
<operator>.addition 0x4d7+4084
<operator>.addition 0x128d+59
<operator>.addition 0x1b9c+670
<operator>.subtraction 0xe32+5506-0x23b4
printf printf(\012"\x5b\x64\x65\x62\x75\x67\x5d\x20\x53\x5f\x65\x3d\x5b\x25\x73\x7c\x25\x63\x5d\x20\x65\x3a\x25\x64"\012,ReplacementFor_S_e,ReplacementFor_S_N[ReplacementFor_n],e)
<operator>.assignment ReplacementFor_S_e[e\012]=ReplacementFor_S_C[ReplacementFor_c*(0x1983+724-0x1c54)+(0x5ed+7348-0x229f)]
printf printf(\012"\x20\x20\x20\x43\x4f\x4d\x42\x49\x4e\x45\x20\x27\x25\x63\x25\x63\x27\x20\x20\x20\x53\x5f\x65\x3d\x5b\x25\x73\x5d\x20\x65\x3a\x25\x64" "\n"\012 ReplacementFor_pair[(0xc87+1166-0x1115)] ReplacementFor_pair[\012(0x19d2+1056-0x1df1)],ReplacementFor_S_e,e)
<operator>.assignment ReplacementFor_action=\012((char)(0x16fa+3492-0x245b))
<operator>.subtraction 0x1a65+2031-0x2234
<operator>.assignment i=(0xf25+4848-0x2215)
<operator>.assignment ReplacementFor_pair[(0x584+2760-0x104b)]=ReplacementFor_S_e[i]
<operator>.subtraction 0xad9+4585-0x1ca2
<operator>.cast (char)(0xb96+868-0xecf)
<operator>.addition 0x161+837
<operator>.addition 0x190b+2253
<operator>.addition 0x6ac+5664
<operator>.addition 0xe32+5506
<operator>.logicalAnd (ReplacementFor_pair[\012(0x16c5+3703-0x253c)]==ReplacementFor_S_C[ReplacementFor_c*(0x14f8+3274-0x21bf)]\012)&&(ReplacementFor_pair[(0x1e1+4966-0x1546)]==ReplacementFor_S_C[\012ReplacementFor_c*(0x4c0+5322-0x1987)+(0xbb+5690-0x16f4)])
<operator>.logicalAnd (\012ReplacementFor_pair[(0x6ed+7466-0x2416)]==ReplacementFor_S_C[ReplacementFor_c*\012(0x290+3843-0x1190)])&&(ReplacementFor_pair[(0xa48+775-0xd4f)]==\012ReplacementFor_S_C[ReplacementFor_c*(0xca0+3209-0x1926)+(0x1018+1066-0x1441)])
<operator>.addition 0x1a65+2031
<operator>.subtraction 0xe5+6318-0x1993
<operator>.lessThan ReplacementFor_d<ReplacementFor_D
<operator>.postIncrement ReplacementFor_d++
<operator>.addition 0xad9+4585
<operator>.preIncrement ++e
<operator>.subtraction 0xb96+868-0xecf
<operator>.multiplication ReplacementFor_c*(0x1bbf+2167-0x2433)
<operator>.addition ReplacementFor_c*\012(0x1c67+28-0x1c80)+(0x4af+7883-0x2379)
<operator>.addition ReplacementFor_c*\012(0x362+2700-0xdeb)+(0x93a+6551-0x22cf)
<operator>.multiplication ReplacementFor_d*(0xcdf+6150-0x24e3)
<operator>.addition ReplacementFor_d*\012(0x1033+5028-0x23d5)+(0x2380+39-0x23a6)
<operator>.equals ReplacementFor_pair[\012(0x16c5+3703-0x253c)]==ReplacementFor_S_C[ReplacementFor_c*(0x14f8+3274-0x21bf)]
<operator>.equals ReplacementFor_pair[(0x1e1+4966-0x1546)]==ReplacementFor_S_C[\012ReplacementFor_c*(0x4c0+5322-0x1987)+(0xbb+5690-0x16f4)]
<operator>.equals ReplacementFor_pair[(0x6ed+7466-0x2416)]==ReplacementFor_S_C[ReplacementFor_c*\012(0x290+3843-0x1190)]
<operator>.equals ReplacementFor_pair[(0xa48+775-0xd4f)]==\012ReplacementFor_S_C[ReplacementFor_c*(0xca0+3209-0x1926)+(0x1018+1066-0x1441)]
<operator>.cast (char)(0x16fa+3492-0x245b)
<operator>.addition 0xe5+6318
<operator>.subtraction 0xf25+4848-0x2215
<operator>.assignment ReplacementFor_d=(0x3b4+6139-0x1baf)
<operator>.addition 0xb96+868
<operator>.subtraction 0x1bbf+2167-0x2433
<operator>.multiplication ReplacementFor_c*\012(0x1c67+28-0x1c80)
<operator>.subtraction 0x4af+7883-0x2379
<operator>.multiplication ReplacementFor_c*\012(0x362+2700-0xdeb)
<operator>.subtraction 0x93a+6551-0x22cf
<operator>.subtraction 0xcdf+6150-0x24e3
<operator>.multiplication ReplacementFor_d*\012(0x1033+5028-0x23d5)
<operator>.subtraction 0x2380+39-0x23a6
<operator>.addition ReplacementFor_c*(0x1983+724-0x1c54)+(0x5ed+7348-0x229f)
<operator>.subtraction 0xc87+1166-0x1115
<operator>.subtraction 0x19d2+1056-0x1df1
<operator>.subtraction 0x16fa+3492-0x245b
<operator>.addition 0xf25+4848
<operator>.subtraction 0x584+2760-0x104b
<operator>.logicalOr ((ReplacementFor_pair[(0x5a5+6612-0x1f79)]==\012ReplacementFor_S_D[ReplacementFor_d*(0x13d1+500-0x15c3)])&&(ReplacementFor_pair[\012(0x18b0+2900-0x2403)]==ReplacementFor_S_D[ReplacementFor_d*(0xd7c+1940-0x150e)+\012(0x2d7+8604-0x2472)]))||((ReplacementFor_pair[(0xb16+6296-0x23ad)]==\012ReplacementFor_S_D[ReplacementFor_d*(0x1952+1422-0x1ede)])&&(ReplacementFor_pair\012[(0xcf0+1924-0x1474)]==ReplacementFor_S_D[ReplacementFor_d*(0x1fcc+1478-0x2590)+\012(0xef6+4388-0x2019)]))
<operator>.addition 0x1bbf+2167
<operator>.subtraction 0x1c67+28-0x1c80
<operator>.addition 0x4af+7883
<operator>.subtraction 0x362+2700-0xdeb
<operator>.addition 0x93a+6551
<operator>.addition 0xcdf+6150
<operator>.subtraction 0x1033+5028-0x23d5
<operator>.addition 0x2380+39
<operator>.subtraction 0x16c5+3703-0x253c
<operator>.multiplication ReplacementFor_c*(0x14f8+3274-0x21bf)
<operator>.subtraction 0x1e1+4966-0x1546
<operator>.addition ReplacementFor_c*(0x4c0+5322-0x1987)+(0xbb+5690-0x16f4)
<operator>.subtraction 0x6ed+7466-0x2416
<operator>.multiplication ReplacementFor_c*\012(0x290+3843-0x1190)
<operator>.subtraction 0xa48+775-0xd4f
<operator>.addition ReplacementFor_c*(0xca0+3209-0x1926)+(0x1018+1066-0x1441)
<operator>.multiplication ReplacementFor_c*(0x1983+724-0x1c54)
<operator>.subtraction 0x5ed+7348-0x229f
<operator>.addition 0xc87+1166
<operator>.addition 0x19d2+1056
<operator>.addition 0x16fa+3492
<operator>.addition 0x584+2760
<operator>.subtraction 0x3b4+6139-0x1baf
printf printf(\012"\x5b\x64\x65\x62\x75\x67\x5d\x20\x53\x5f\x65\x3d\x5b\x25\x73\x7c\x25\x63\x5d\x20\x65\x3a\x25\x64"\012,ReplacementFor_S_e,ReplacementFor_S_N[ReplacementFor_n],e)
memset memset(\012ReplacementFor_S_e (0x1509+3070-0x2107) ReplacementFor_MAX_N+(0x413+5414-0x1938)\012)
<operator>.assignment ReplacementFor_S_e[(0xd0d+1968-0x14bd)]='\0'
<operator>.assignment e=-(0x792+1002-0xb7b)
printf printf(\012"\x20\x20\x20\x44\x45\x53\x54\x52\x4f\x59\x20\x27\x25\x63\x25\x63\x27\x20\x20\x20\x53\x5f\x65\x3d\x5b\x25\x73\x5d\x20\x65\x3a\x25\x64" "\n"\012 ReplacementFor_pair[(0x168f+1334-0x1bc5)] ReplacementFor_pair[\012(0x12ab+1858-0x19ec)],ReplacementFor_S_e,e)
<operator>.assignment ReplacementFor_action=\012((char)(0x7cb+1516-0xd73))
<operator>.addition 0x1c67+28
<operator>.addition 0x362+2700
<operator>.addition 0x1033+5028
<operator>.addition 0x16c5+3703
<operator>.subtraction 0x14f8+3274-0x21bf
<operator>.addition 0x1e1+4966
<operator>.multiplication ReplacementFor_c*(0x4c0+5322-0x1987)
<operator>.subtraction 0xbb+5690-0x16f4
<operator>.addition 0x6ed+7466
<operator>.subtraction 0x290+3843-0x1190
<operator>.addition 0xa48+775
<operator>.multiplication ReplacementFor_c*(0xca0+3209-0x1926)
<operator>.subtraction 0x1018+1066-0x1441
<operator>.subtraction 0x1983+724-0x1c54
<operator>.addition 0x5ed+7348
<operator>.addition 0x3b4+6139
<operator>.logicalAnd (ReplacementFor_pair[(0x5a5+6612-0x1f79)]==\012ReplacementFor_S_D[ReplacementFor_d*(0x13d1+500-0x15c3)])&&(ReplacementFor_pair[\012(0x18b0+2900-0x2403)]==ReplacementFor_S_D[ReplacementFor_d*(0xd7c+1940-0x150e)+\012(0x2d7+8604-0x2472)])
<operator>.logicalAnd (ReplacementFor_pair[(0xb16+6296-0x23ad)]==\012ReplacementFor_S_D[ReplacementFor_d*(0x1952+1422-0x1ede)])&&(ReplacementFor_pair\012[(0xcf0+1924-0x1474)]==ReplacementFor_S_D[ReplacementFor_d*(0x1fcc+1478-0x2590)+\012(0xef6+4388-0x2019)])
<operator>.addition 0x14f8+3274
<operator>.subtraction 0x4c0+5322-0x1987
<operator>.addition 0xbb+5690
<operator>.addition 0x290+3843
<operator>.subtraction 0xca0+3209-0x1926
<operator>.addition 0x1018+1066
<operator>.addition 0x1983+724
<operator>.equals ReplacementFor_pair[(0x5a5+6612-0x1f79)]==\012ReplacementFor_S_D[ReplacementFor_d*(0x13d1+500-0x15c3)]
<operator>.equals ReplacementFor_pair[\012(0x18b0+2900-0x2403)]==ReplacementFor_S_D[ReplacementFor_d*(0xd7c+1940-0x150e)+\012(0x2d7+8604-0x2472)]
<operator>.equals ReplacementFor_pair[(0xb16+6296-0x23ad)]==\012ReplacementFor_S_D[ReplacementFor_d*(0x1952+1422-0x1ede)]
<operator>.equals ReplacementFor_pair\012[(0xcf0+1924-0x1474)]==ReplacementFor_S_D[ReplacementFor_d*(0x1fcc+1478-0x2590)+\012(0xef6+4388-0x2019)]
<operator>.subtraction 0x1509+3070-0x2107
<operator>.addition ReplacementFor_MAX_N+(0x413+5414-0x1938)
<operator>.minus -(0x792+1002-0xb7b)
<operator>.cast (char)(0x7cb+1516-0xd73)
<operator>.addition 0x4c0+5322
<operator>.addition 0xca0+3209
<operator>.addition 0x1509+3070
<operator>.subtraction 0x413+5414-0x1938
<operator>.subtraction 0xd0d+1968-0x14bd
<operator>.subtraction 0x792+1002-0xb7b
<operator>.subtraction 0x168f+1334-0x1bc5
<operator>.subtraction 0x12ab+1858-0x19ec
<operator>.subtraction 0x7cb+1516-0xd73
<operator>.subtraction 0x5a5+6612-0x1f79
<operator>.multiplication ReplacementFor_d*(0x13d1+500-0x15c3)
<operator>.subtraction 0x18b0+2900-0x2403
<operator>.addition ReplacementFor_d*(0xd7c+1940-0x150e)+\012(0x2d7+8604-0x2472)
<operator>.subtraction 0xb16+6296-0x23ad
<operator>.multiplication ReplacementFor_d*(0x1952+1422-0x1ede)
<operator>.subtraction 0xcf0+1924-0x1474
<operator>.addition ReplacementFor_d*(0x1fcc+1478-0x2590)+\012(0xef6+4388-0x2019)
<operator>.addition 0x413+5414
<operator>.addition 0xd0d+1968
<operator>.addition 0x792+1002
<operator>.addition 0x168f+1334
<operator>.addition 0x12ab+1858
<operator>.addition 0x7cb+1516
<operator>.addition 0x5a5+6612
<operator>.subtraction 0x13d1+500-0x15c3
<operator>.addition 0x18b0+2900
<operator>.multiplication ReplacementFor_d*(0xd7c+1940-0x150e)
<operator>.subtraction 0x2d7+8604-0x2472
<operator>.addition 0xb16+6296
<operator>.subtraction 0x1952+1422-0x1ede
<operator>.addition 0xcf0+1924
<operator>.multiplication ReplacementFor_d*(0x1fcc+1478-0x2590)
<operator>.subtraction 0xef6+4388-0x2019
<operator>.addition 0x13d1+500
<operator>.subtraction 0xd7c+1940-0x150e
<operator>.addition 0x2d7+8604
<operator>.addition 0x1952+1422
<operator>.subtraction 0x1fcc+1478-0x2590
<operator>.addition 0xef6+4388
<operator>.addition 0xd7c+1940
<operator>.addition 0x1fcc+1478
<operator>.indirectIndexAccess ReplacementFor_argv[(0xdf8+3348-0x1b0b)]
<operator>.addressOf &T
<operator>.indirectIndexAccess ReplacementFor_S_C[ReplacementFor_C*(0xe7+4338-0x11d6)]
<operator>.indirectIndexAccess ReplacementFor_S_D[ReplacementFor_D*(0x171f+78-0x176b)]
<operator>.indirectIndexAccess ReplacementFor_S_N[ReplacementFor_N]
<operator>.indirectIndexAccess ReplacementFor_S_e[(0x41b+2897-0xf6c)]
<operator>.indirectIndexAccess ReplacementFor_S_N[(0x1b3+1685-0x848)]
<operator>.addressOf &ReplacementFor_C
<operator>.addressOf &ReplacementFor_D
<operator>.addressOf &ReplacementFor_N
<operator>.indirectIndexAccess ReplacementFor_pair[(0x128d+59-0x12c8)]
<operator>.indirectIndexAccess ReplacementFor_S_e[e]
<operator>.indirectIndexAccess ReplacementFor_pair[(0x1b9c+670-0x1e39)]
<operator>.indirectIndexAccess ReplacementFor_S_N[ReplacementFor_n]
<operator>.indirectIndexAccess ReplacementFor_S_e[i]
<operator>.indirectIndexAccess ReplacementFor_S_e[i]
UNKNOWN char char
<operator>.addressOf &ReplacementFor_S_C[\012ReplacementFor_c*(0x1bbf+2167-0x2433)]
<operator>.addressOf &ReplacementFor_S_C[ReplacementFor_c*\012(0x1c67+28-0x1c80)+(0x4af+7883-0x2379)]
<operator>.addressOf &ReplacementFor_S_C[ReplacementFor_c*\012(0x362+2700-0xdeb)+(0x93a+6551-0x22cf)]
<operator>.addressOf &ReplacementFor_S_D[\012ReplacementFor_d*(0xcdf+6150-0x24e3)]
<operator>.addressOf &ReplacementFor_S_D[ReplacementFor_d*\012(0x1033+5028-0x23d5)+(0x2380+39-0x23a6)]
<operator>.addressOf &ReplacementFor_S_N[ReplacementFor_n]
UNKNOWN char char
<operator>.indirectIndexAccess ReplacementFor_pair[(0xe5+6318-0x1993)]
<operator>.indirectIndexAccess ReplacementFor_S_N[ReplacementFor_n]
UNKNOWN char char
<operator>.indirectIndexAccess ReplacementFor_S_N[ReplacementFor_n]
<operator>.indirectIndexAccess ReplacementFor_S_e[\012++e]
<operator>.indirectIndexAccess ReplacementFor_S_N[ReplacementFor_n]
<operator>.indirectIndexAccess ReplacementFor_S_C[\012ReplacementFor_c*(0x1bbf+2167-0x2433)]
<operator>.indirectIndexAccess ReplacementFor_S_C[ReplacementFor_c*\012(0x1c67+28-0x1c80)+(0x4af+7883-0x2379)]
<operator>.indirectIndexAccess ReplacementFor_S_C[ReplacementFor_c*\012(0x362+2700-0xdeb)+(0x93a+6551-0x22cf)]
<operator>.indirectIndexAccess ReplacementFor_S_D[\012ReplacementFor_d*(0xcdf+6150-0x24e3)]
<operator>.indirectIndexAccess ReplacementFor_S_D[ReplacementFor_d*\012(0x1033+5028-0x23d5)+(0x2380+39-0x23a6)]
<operator>.indirectIndexAccess ReplacementFor_S_N[ReplacementFor_n]
UNKNOWN char char
<operator>.indirectIndexAccess ReplacementFor_S_N[ReplacementFor_n]
<operator>.indirectIndexAccess ReplacementFor_S_e[e\012]
<operator>.indirectIndexAccess ReplacementFor_S_C[ReplacementFor_c*(0x1983+724-0x1c54)+(0x5ed+7348-0x229f)]
<operator>.indirectIndexAccess ReplacementFor_pair[(0xc87+1166-0x1115)]
<operator>.indirectIndexAccess ReplacementFor_pair[\012(0x19d2+1056-0x1df1)]
<operator>.indirectIndexAccess ReplacementFor_pair[(0x584+2760-0x104b)]
<operator>.indirectIndexAccess ReplacementFor_S_e[i]
<operator>.indirectIndexAccess ReplacementFor_pair[\012(0x16c5+3703-0x253c)]
<operator>.indirectIndexAccess ReplacementFor_S_C[ReplacementFor_c*(0x14f8+3274-0x21bf)]
<operator>.indirectIndexAccess ReplacementFor_pair[(0x1e1+4966-0x1546)]
<operator>.indirectIndexAccess ReplacementFor_S_C[\012ReplacementFor_c*(0x4c0+5322-0x1987)+(0xbb+5690-0x16f4)]
<operator>.indirectIndexAccess ReplacementFor_pair[(0x6ed+7466-0x2416)]
<operator>.indirectIndexAccess ReplacementFor_S_C[ReplacementFor_c*\012(0x290+3843-0x1190)]
<operator>.indirectIndexAccess ReplacementFor_pair[(0xa48+775-0xd4f)]
<operator>.indirectIndexAccess ReplacementFor_S_C[ReplacementFor_c*(0xca0+3209-0x1926)+(0x1018+1066-0x1441)]
UNKNOWN char char
<operator>.indirectIndexAccess ReplacementFor_S_N[ReplacementFor_n]
<operator>.indirectIndexAccess ReplacementFor_S_e[(0xd0d+1968-0x14bd)]
<operator>.indirectIndexAccess ReplacementFor_pair[(0x168f+1334-0x1bc5)]
<operator>.indirectIndexAccess ReplacementFor_pair[\012(0x12ab+1858-0x19ec)]
<operator>.indirectIndexAccess ReplacementFor_pair[(0x5a5+6612-0x1f79)]
<operator>.indirectIndexAccess ReplacementFor_S_D[ReplacementFor_d*(0x13d1+500-0x15c3)]
<operator>.indirectIndexAccess ReplacementFor_pair[\012(0x18b0+2900-0x2403)]
<operator>.indirectIndexAccess ReplacementFor_S_D[ReplacementFor_d*(0xd7c+1940-0x150e)+\012(0x2d7+8604-0x2472)]
<operator>.indirectIndexAccess ReplacementFor_pair[(0xb16+6296-0x23ad)]
<operator>.indirectIndexAccess ReplacementFor_S_D[ReplacementFor_d*(0x1952+1422-0x1ede)]
<operator>.indirectIndexAccess ReplacementFor_pair\012[(0xcf0+1924-0x1474)]
<operator>.indirectIndexAccess ReplacementFor_S_D[ReplacementFor_d*(0x1fcc+1478-0x2590)+\012(0xef6+4388-0x2019)]
UNKNOWN char char
>>>PDG&393 0->2 0->3 0->7 0->8 0->10 0->11 0->13 0->14 0->15 0->16 0->17 0->19 0->20 0->22 0->23 0->26 0->27 0->28 0->29 0->30 0->33 0->34 0->35 0->36 0->37 0->38 0->39 0->40 0->41 0->42 0->44 0->45 0->47 0->48 0->50 0->51 0->52 0->53 0->54 0->55 0->56 0->57 0->58 0->59 0->60 0->61 0->62 0->65 0->68 0->71 0->72 0->73 0->79 0->80 0->81 0->82 0->83 0->84 0->85 0->86 0->87 0->89 0->90 0->91 0->93 0->94 0->95 0->97 0->98 0->99 0->100 0->101 0->102 0->103 0->104 0->105 0->106 0->107 0->108 0->109 0->111 0->112 0->113 0->114 0->115 0->117 0->118 0->119 0->120 0->121 0->123 0->124 0->125 0->126 0->130 0->132 0->134 0->135 0->136 0->137 0->138 0->139 0->140 0->141 0->142 0->143 0->144 0->145 0->146 0->147 0->148 0->149 0->150 0->151 0->152 0->153 0->154 0->157 0->158 0->160 0->161 0->162 0->163 0->164 0->165 0->166 0->167 0->168 0->169 0->170 0->171 0->172 0->173 0->175 0->177 0->180 0->182 0->183 0->184 0->185 0->188 0->189 0->190 0->191 0->192 0->193 0->194 0->195 0->198 0->205 0->206 0->208 0->209 0->210 0->211 0->212 0->213 0->214 0->215 0->216 0->218 0->219 0->220 0->221 0->222 0->224 0->225 0->226 0->227 0->228 0->229 0->230 0->231 0->232 0->233 0->234 0->236 0->237 0->238 0->240 0->241 0->242 0->243 0->244 0->245 0->246 0->247 0->248 0->249 0->251 0->253 0->254 0->255 0->256 0->257 0->258 0->259 0->260 0->261 0->262 0->263 0->264 0->265 0->266 0->267 0->268 0->271 0->272 0->273 0->274 0->275 0->276 0->277 0->282 0->283 0->286 0->287 0->288 0->289 0->290 0->291 0->292 0->293 0->294 0->295 0->296 0->297 0->299 0->300 0->301 0->303 0->304 0->305 0->306 0->307 0->308 0->309 0->310 0->311 0->312 0->313 0->314 0->315 0->316 0->317 0->318 0->319 0->320 0->321 0->322 0->323 0->324 0->325 0->326 2->10 3->1 3->19 4->1 4->1 4->1 4->15 5->1 5->1 5->11 6->7 6->34 9->1 10->1 10->1 10->1 10->5 10->7 10->8 10->9 10->11 10->17 10->18 10->19 10->57 10->58 10->81 10->82 10->327 11->1 11->1 11->6 11->7 11->8 11->9 11->12 11->20 11->21 11->22 11->40 11->41 11->41 11->42 11->59 11->83 11->328 12->13 12->23 12->24 12->25 12->60 12->61 12->84 12->85 13->34 13->43 13->86 13->87 13->106 13->334 14->13 15->9 16->1 16->4 16->4 18->15 19->1 19->5 19->5 20->1 20->1 21->1 22->6 22->6 24->15 25->13 26->29 27->29 28->29 29->31 29->44 29->47 29->52 29->77 29->86 29->90 29->102 29->129 29->130 29->131 29->139 29->144 29->149 29->173 29->174 29->190 29->200 29->201 29->202 29->203 29->247 29->278 29->279 29->280 29->281 30->76 30->79 30->80 30->130 30->132 30->173 30->175 30->179 30->247 30->248 30->251 31->30 31->130 31->132 31->173 31->175 31->247 31->248 31->251 32->54 32->130 32->157 32->173 33->35 34->35 34->36 34->79 35->14 35->37 35->80 36->7 36->34 37->33 39->1 39->10 39->10 40->1 40->1 40->21 41->8 41->12 41->12 41->12 41->13 41->86 42->12 42->12 43->44 43->62 43->63 43->64 43->107 43->108 43->137 43->138 44->26 44->46 44->88 44->89 44->89 44->90 44->91 44->111 44->112 44->139 44->140 44->141 44->163 44->195 44->195 44->196 44->197 44->209 44->210 44->211 44->212 44->213 44->224 44->225 44->226 44->227 44->228 44->253 44->254 44->329 44->335 44->344 44->345 44->346 44->357 44->358 44->359 45->44 46->47 46->65 46->66 46->67 46->113 46->114 46->142 46->143 47->27 47->49 47->92 47->93 47->93 47->94 47->95 47->117 47->118 47->144 47->145 47->146 47->165 47->198 47->198 47->199 47->214 47->215 47->216 47->229 47->230 47->231 47->255 47->330 47->336 47->347 47->348 47->360 47->361 48->47 49->50 49->68 49->69 49->70 49->119 49->120 49->147 49->148 50->13 50->14 50->28 50->29 50->29 50->30 50->31 50->32 50->33 50->34 50->35 50->36 50->37 50->51 50->52 50->54 50->71 50->72 50->73 50->74 50->78 50->96 50->97 50->98 50->99 50->100 50->101 50->121 50->123 50->124 50->125 50->126 50->134 50->149 50->150 50->151 50->160 50->167 50->331 50->332 50->333 50->349 50->362 51->50 52->50 52->52 52->53 52->53 52->75 52->76 52->77 52->94 52->102 52->104 52->105 52->127 52->128 52->152 52->153 52->154 52->156 52->159 52->169 52->170 52->171 52->172 52->177 52->180 52->185 52->188 52->192 52->337 52->338 52->339 52->340 52->343 52->350 52->353 53->52 54->54 54->55 54->79 54->80 54->135 54->136 54->161 54->161 54->161 54->162 54->341 54->342 55->54 57->18 57->18 58->1 60->24 60->24 61->25 61->25 63->15 64->44 66->15 67->47 69->15 70->50 71->30 71->30 73->32 73->32 74->52 75->104 78->54 79->36 79->80 80->30 80->37 80->79 80->130 80->132 80->173 80->175 80->179 80->247 80->248 80->251 86->8 86->29 86->43 86->43 86->43 86->44 86->89 86->90 86->102 86->139 87->43 87->43 88->44 88->45 88->109 88->110 88->164 88->182 89->29 90->8 90->29 90->46 90->46 90->46 90->47 90->93 90->94 90->144 90->190 91->46 91->46 92->47 92->48 92->115 92->116 92->166 92->183 93->29 94->8 94->29 94->49 94->49 94->49 94->50 94->52 94->86 94->149 95->49 95->49 96->50 96->51 96->121 96->122 96->168 96->184 98->30 98->30 98->72 98->72 102->44 102->86 102->102 102->103 102->155 102->186 102->200 102->232 102->233 102->233 102->256 102->257 102->271 102->371 102->372 103->102 104->105 104->129 104->157 104->178 104->189 104->205 104->206 104->221 104->351 104->352 105->130 105->131 105->132 105->133 105->181 105->193 105->194 105->208 105->354 105->355 105->356 105->363 107->63 107->63 108->64 108->64 110->15 111->89 111->89 113->66 113->66 114->67 114->67 116->15 117->93 117->93 119->69 119->69 120->70 120->70 122->15 126->74 126->74 128->102 130->29 130->77 130->131 130->132 130->149 130->173 130->193 131->30 131->130 131->132 131->173 131->175 131->247 131->248 131->251 132->30 132->54 132->76 132->79 132->80 132->130 132->130 132->157 132->173 132->173 132->175 132->179 132->247 132->248 132->251 134->78 134->78 139->8 139->29 139->29 139->29 139->88 139->88 139->88 139->88 139->88 139->90 140->88 140->88 144->8 144->29 144->29 144->92 144->92 144->92 144->92 144->94 145->92 145->92 149->8 149->29 149->77 149->86 149->96 149->96 149->96 149->129 149->130 149->131 149->173 149->247 150->96 150->96 152->75 152->75 152->127 152->127 155->173 155->174 155->175 155->176 155->204 155->217 155->218 155->219 155->220 155->240 155->241 155->242 155->243 155->244 155->266 155->267 155->277 155->364 155->365 155->366 155->367 155->368 155->379 157->54 157->130 157->157 157->158 157->158 157->173 157->179 157->190 157->207 157->222 157->245 157->246 157->247 157->268 157->369 157->370 158->157 161->162 161->162 162->54 162->55 164->110 164->110 166->116 166->116 168->122 168->122 172->128 172->128 173->29 173->77 173->129 173->130 173->149 173->175 173->175 173->247 174->30 174->130 174->132 174->173 174->175 174->247 174->248 174->251 175->30 175->54 175->76 175->79 175->80 175->130 175->130 175->132 175->157 175->173 175->173 175->179 175->247 175->248 175->251 176->104 177->104 177->104 177->156 177->156 178->157 180->105 180->105 180->159 180->159 186->155 186->155 186->187 186->202 186->236 186->237 186->261 186->262 186->274 186->375 186->376 187->155 187->155 190->47 190->90 190->223 190->269 190->278 190->295 190->296 190->296 190->309 190->310 190->319 190->384 190->385 191->190 193->132 194->133 194->133 194->181 194->181 195->210 198->215 200->29 200->186 200->186 200->201 200->234 200->235 200->258 200->259 200->260 200->272 200->273 200->286 200->373 200->374 201->29 201->186 201->186 202->29 202->187 202->187 202->203 202->238 202->239 202->263 202->264 202->265 202->275 202->276 202->287 202->377 202->378 203->29 203->187 203->187 206->178 206->178 207->190 209->195 209->195 210->196 210->196 210->212 211->196 211->196 212->45 212->109 212->197 212->197 213->197 213->197 214->198 214->198 215->48 215->115 215->199 215->199 216->199 216->199 220->176 220->176 220->204 220->204 223->190 223->191 223->247 223->248 223->249 223->250 223->251 223->252 223->282 223->283 223->284 223->285 223->288 223->289 223->290 223->291 223->292 223->293 223->294 223->303 223->304 223->305 223->306 223->307 223->308 223->380 223->381 223->382 223->383 223->392 225->210 225->210 227->212 227->212 230->215 230->215 233->103 233->237 233->240 233->259 237->103 237->240 237->264 240->103 240->217 240->217 241->217 241->217 246->207 246->207 247->29 247->77 247->130 247->149 247->173 247->248 248->251 249->30 249->130 249->132 249->173 249->175 249->247 249->248 249->251 250->251 251->30 251->76 251->79 251->80 251->130 251->132 251->157 251->173 251->175 251->179 251->247 251->248 252->105 257->233 257->233 259->103 259->235 259->235 259->237 259->240 260->235 260->235 262->237 262->237 264->103 264->239 264->239 264->240 265->239 265->239 266->240 266->240 269->223 269->223 269->270 269->280 269->299 269->300 269->314 269->315 269->322 269->388 269->389 270->223 270->223 272->259 272->259 275->264 275->264 278->29 278->269 278->269 278->279 278->297 278->298 278->311 278->312 278->313 278->320 278->321 278->325 278->386 278->387 279->29 279->269 279->269 280->29 280->270 280->270 280->281 280->301 280->302 280->316 280->317 280->318 280->323 280->324 280->326 280->390 280->391 281->29 281->270 281->270 282->248 282->248 284->250 289->248 289->248 289->283 289->283 291->284 291->284 294->252 294->252 294->285 294->285 296->191 296->300 296->312 300->191 300->317 310->296 310->296 312->191 312->298 312->298 312->300 313->298 313->298 315->300 315->300 317->191 317->302 317->302 318->302 318->302 320->312 320->312 323->317 323->317
>>>Token int main ( int ReplacementFor_argc , char * * ReplacementFor_argv ) { int T ; int ReplacementFor_C ; int ReplacementFor_D ; int ReplacementFor_N ; FILE * ReplacementFor_fpin ; FILE * ReplacementFor_fpout ; char ReplacementFor_S_C [ ReplacementFor_MAX_C * ( 0x5f0 + 4460 - 0x1759 ) + ( 0x228 + 7647 - 0x2006 ) ] ; char ReplacementFor_S_D [ ReplacementFor_MAX_D * ( 0xde5 + 6372 - 0x26c7 ) + ( 0xbcc + 6754 - 0x262d ) ] ; char ReplacementFor_S_N [ ReplacementFor_MAX_N + ( 0x176c + 454 - 0x1931 ) ] ; char ReplacementFor_S_e [ ReplacementFor_MAX_N + ( 0xd93 + 5 - 0xd97 ) ] ; int ReplacementFor_c ; int ReplacementFor_d ; int ReplacementFor_n ; int t ; int e ; int i ; char ReplacementFor_pair [ ( 0xe81 + 5712 - 0x24cf ) ] ; int retval = ( 0xdbf + 6450 - 0x26f1 ) ; char ReplacementFor_action ; if ( ReplacementFor_argc != ( 0x1b1d + 2151 - 0x2382 ) ) { fprintf ( stderr , " \x50 \x6c \x65 \x61 \x73 \x65 \x20 \x70 \x72 \x6f \x76 \x69 \x64 \x65 \x20 \x69 \x6e \x70 \x75 \x74 \x20 \x66 \x69 \x6c \x65 \x20 \x6e \x61 \x6d \x65 \x20 \x6f \x6e \x20 \x63 \x6f \x6d \x6d \x61 \x6e \x64 \x20 \x6c \x69 \x6e \x65 \x2e " " \n " ) ; retval = ( 0xb26 + 328 - 0xc6d ) ; goto ReplacementFor_end ; } ReplacementFor_fpin = fopen ( ReplacementFor_argv [ ( 0xdf8 + 3348 - 0x1b0b ) ] , " \x72 " ) ; if ( ! ReplacementFor_fpin ) { fprintf ( stderr , " \x69 \x6e \x70 \x75 \x74 \x20 \x66 \x69 \x6c \x65 \x20 \x6e \x6f \x74 \x20 \x66 \x6f \x75 \x6e \x64 " " \n " ) ; return ( 0x123a + 4614 - 0x243f ) ; } ReplacementFor_fpout = fopen ( " \x6f \x75 \x74 \x63 \x6f \x6d \x65 " , " \x77 " ) ; if ( fscanf ( ReplacementFor_fpin , " \x25 \x64 " , & T ) != ( 0x5f2 + 6865 - 0x20c2 ) ) { fprintf ( stderr , " \x5b \x54 \x5d \x20 \x69 \x6e \x70 \x75 \x74 \x20 \x66 \x69 \x6c \x65 \x20 \x66 \x6f \x72 \x6d \x61 \x74 \x20 \x77 \x72 \x6f \x6e \x67 " " \n " ) ; retval = ( 0xae1 + 2725 - 0x1585 ) ; goto ReplacementFor_end ; } for ( t = ( 0x17e3 + 969 - 0x1bab ) ; t <= T ; t ++ ) { if ( fscanf ( ReplacementFor_fpin , " \x25 \x64 " , & ReplacementFor_C ) != ( 0x1f9 + 2279 - 0xadf ) ) { fprintf ( stderr , " \x5b \x43 \x5d \x20 \x69 \x6e \x70 \x75 \x74 \x20 \x66 \x69 \x6c \x65 \x20 \x66 \x6f \x72 \x6d \x61 \x74 \x20 \x77 \x72 \x6f \x6e \x67 " " \n " ) ; retval = ( 0x2453 + 184 - 0x250a ) ; goto ReplacementFor_end ; } for ( ReplacementFor_c = ( 0x7a7 + 5955 - 0x1eea ) ; ReplacementFor_c < ReplacementFor_C ; ReplacementFor_c ++ ) { if ( fscanf ( ReplacementFor_fpin , " \x20 \x25 \x63 \x25 \x63 \x25 \x63 " , & ReplacementFor_S_C [ ReplacementFor_c * ( 0x1bbf + 2167 - 0x2433 ) ] , & ReplacementFor_S_C [ ReplacementFor_c * ( 0x1c67 + 28 - 0x1c80 ) + ( 0x4af + 7883 - 0x2379 ) ] , & ReplacementFor_S_C [ ReplacementFor_c * ( 0x362 + 2700 - 0xdeb ) + ( 0x93a + 6551 - 0x22cf ) ] ) != ( 0x123d + 704 - 0x14fa ) ) { fprintf ( stderr , " \x5b \x43 \x28 \x25 \x64 \x29 \x5d \x20 \x69 \x6e \x70 \x75 \x74 \x20 \x66 \x69 \x6c \x65 \x20 \x66 \x6f \x72 \x6d \x61 \x74 \x20 \x77 \x72 \x6f \x6e \x67 " " \n " , ReplacementFor_c ) ; retval = ( 0x161 + 837 - 0x4a5 ) ; goto ReplacementFor_end ; } } ReplacementFor_S_C [ ReplacementFor_C * ( 0xe7 + 4338 - 0x11d6 ) ] = ' \0 ' ; if ( fscanf ( ReplacementFor_fpin , " \x20 \x25 \x64 " , & ReplacementFor_D ) != ( 0xd79 + 2110 - 0x15b6 ) ) { fprintf ( stderr , " \x5b \x44 \x5d \x20 \x69 \x6e \x70 \x75 \x74 \x20 \x66 \x69 \x6c \x65 \x20 \x66 \x6f \x72 \x6d \x61 \x74 \x20 \x77 \x72 \x6f \x6e \x67 " " \n " ) ; retval = ( 0x111 + 2404 - 0xa74 ) ; goto ReplacementFor_end ; } for ( ReplacementFor_d = ( 0xbe9 + 1940 - 0x137d ) ; ReplacementFor_d < ReplacementFor_D ; ReplacementFor_d ++ ) { if ( fscanf ( ReplacementFor_fpin , " \x20 \x25 \x63 \x25 \x63 " , & ReplacementFor_S_D [ ReplacementFor_d * ( 0xcdf + 6150 - 0x24e3 ) ] , & ReplacementFor_S_D [ ReplacementFor_d * ( 0x1033 + 5028 - 0x23d5 ) + ( 0x2380 + 39 - 0x23a6 ) ] ) != ( 0xc97 + 1434 - 0x122f ) ) { fprintf ( stderr , " \x5b \x44 \x28 \x25 \x64 \x29 \x5d \x20 \x69 \x6e \x70 \x75 \x74 \x20 \x66 \x69 \x6c \x65 \x20 \x66 \x6f \x72 \x6d \x61 \x74 \x20 \x77 \x72 \x6f \x6e \x67 " " \n " , ReplacementFor_d ) ; retval = ( 0x190b + 2253 - 0x21d7 ) ; goto ReplacementFor_end ; } } ReplacementFor_S_D [ ReplacementFor_D * ( 0x171f + 78 - 0x176b ) ] = ' \0 ' ; if ( fscanf ( ReplacementFor_fpin , " \x20 \x25 \x64 \x20 " , & ReplacementFor_N ) != ( 0x138d + 1925 - 0x1b11 ) ) { fprintf ( stderr , " \x5b \x4e \x5d \x20 \x69 \x6e \x70 \x75 \x74 \x20 \x66 \x69 \x6c \x65 \x20 \x66 \x6f \x72 \x6d \x61 \x74 \x20 \x77 \x72 \x6f \x6e \x67 " " \n " ) ; retval = ( 0x9df + 5527 - 0x1f75 ) ; goto ReplacementFor_end ; } for ( ReplacementFor_n = ( 0xe57 + 3681 - 0x1cb8 ) ; ReplacementFor_n < ReplacementFor_N ; ReplacementFor_n ++ ) { if ( fscanf ( ReplacementFor_fpin , " \x25 \x63 " , & ReplacementFor_S_N [ ReplacementFor_n ] ) != ( 0x2553 + 26 - 0x256c ) ) { fprintf ( stderr , " \x5b \x4e \x28 \x25 \x64 \x29 \x5d \x20 \x69 \x6e \x70 \x75 \x74 \x20 \x66 \x69 \x6c \x65 \x20 \x66 \x6f \x72 \x6d \x61 \x74 \x20 \x77 \x72 \x6f \x6e \x67 " " \n " , ReplacementFor_n ) ; retval = ( 0x6ac + 5664 - 0x1ccb ) ; goto ReplacementFor_end ; } } ReplacementFor_S_N [ ReplacementFor_N ] = ' \0 ' ; printf ( " \x5b \x64 \x65 \x62 \x75 \x67 \x5d \x20 \x43 \x3d \x25 \x64 \x3a \x27 \x25 \x73 \x27 \x20 \x44 \x3d \x25 \x64 \x3a \x27 \x25 \x73 \x27 \x20 \x4e \x3d \x25 \x64 \x3a \x27 \x25 \x73 \x27 \x20 \x20 \x20 " " \n " , ReplacementFor_C , ReplacementFor_S_C , ReplacementFor_D , ReplacementFor_S_D , ReplacementFor_N , ReplacementFor_S_N ) ; memset ( ReplacementFor_S_e , ( 0x1fe1 + 1791 - 0x26e0 ) , ReplacementFor_MAX_N + ( 0xbb7 + 1397 - 0x112b ) ) ; ReplacementFor_S_e [ ( 0x41b + 2897 - 0xf6c ) ] = ReplacementFor_S_N [ ( 0x1b3 + 1685 - 0x848 ) ] ; e = ( 0x1d4a + 1077 - 0x217f ) ; for ( ReplacementFor_n = ( 0x37b + 2596 - 0xd9e ) ; ReplacementFor_n < ReplacementFor_N ; ReplacementFor_n ++ ) { ReplacementFor_action = ( ( char ) ( 0x4d7 + 4084 - 0x14ab ) ) ; ReplacementFor_pair [ ( 0x128d + 59 - 0x12c8 ) ] = ReplacementFor_S_e [ e ] ; ReplacementFor_pair [ ( 0x1b9c + 670 - 0x1e39 ) ] = ReplacementFor_S_N [ ReplacementFor_n ] ; for ( ReplacementFor_c = ( 0xe32 + 5506 - 0x23b4 ) ; ReplacementFor_c < ReplacementFor_C ; ReplacementFor_c ++ ) { if ( ( ( ReplacementFor_pair [ ( 0x16c5 + 3703 - 0x253c ) ] == ReplacementFor_S_C [ ReplacementFor_c * ( 0x14f8 + 3274 - 0x21bf ) ] ) && ( ReplacementFor_pair [ ( 0x1e1 + 4966 - 0x1546 ) ] == ReplacementFor_S_C [ ReplacementFor_c * ( 0x4c0 + 5322 - 0x1987 ) + ( 0xbb + 5690 - 0x16f4 ) ] ) ) || ( ( ReplacementFor_pair [ ( 0x6ed + 7466 - 0x2416 ) ] == ReplacementFor_S_C [ ReplacementFor_c * ( 0x290 + 3843 - 0x1190 ) ] ) && ( ReplacementFor_pair [ ( 0xa48 + 775 - 0xd4f ) ] == ReplacementFor_S_C [ ReplacementFor_c * ( 0xca0 + 3209 - 0x1926 ) + ( 0x1018 + 1066 - 0x1441 ) ] ) ) ) { printf ( " \x5b \x64 \x65 \x62 \x75 \x67 \x5d \x20 \x53 \x5f \x65 \x3d \x5b \x25 \x73 \x7c \x25 \x63 \x5d \x20 \x65 \x3a \x25 \x64 " , ReplacementFor_S_e , ReplacementFor_S_N [ ReplacementFor_n ] , e ) ; ReplacementFor_S_e [ e ] = ReplacementFor_S_C [ ReplacementFor_c * ( 0x1983 + 724 - 0x1c54 ) + ( 0x5ed + 7348 - 0x229f ) ] ; printf ( " \x20 \x20 \x20 \x43 \x4f \x4d \x42 \x49 \x4e \x45 \x20 \x27 \x25 \x63 \x25 \x63 \x27 \x20 \x20 \x20 \x53 \x5f \x65 \x3d \x5b \x25 \x73 \x5d \x20 \x65 \x3a \x25 \x64 " " \n " , ReplacementFor_pair [ ( 0xc87 + 1166 - 0x1115 ) ] , ReplacementFor_pair [ ( 0x19d2 + 1056 - 0x1df1 ) ] , ReplacementFor_S_e , e ) ; ReplacementFor_action = ( ( char ) ( 0x16fa + 3492 - 0x245b ) ) ; } } if ( ReplacementFor_action == ( ( char ) ( 0x1a65 + 2031 - 0x2234 ) ) ) { ReplacementFor_pair [ ( 0xe5 + 6318 - 0x1993 ) ] = ReplacementFor_S_N [ ReplacementFor_n ] ; for ( i = ( 0xf25 + 4848 - 0x2215 ) ; i <= e ; i ++ ) { ReplacementFor_pair [ ( 0x584 + 2760 - 0x104b ) ] = ReplacementFor_S_e [ i ] ; for ( ReplacementFor_d = ( 0x3b4 + 6139 - 0x1baf ) ; ReplacementFor_d < ReplacementFor_D ; ReplacementFor_d ++ ) { if ( ( ( ReplacementFor_pair [ ( 0x5a5 + 6612 - 0x1f79 ) ] == ReplacementFor_S_D [ ReplacementFor_d * ( 0x13d1 + 500 - 0x15c3 ) ] ) && ( ReplacementFor_pair [ ( 0x18b0 + 2900 - 0x2403 ) ] == ReplacementFor_S_D [ ReplacementFor_d * ( 0xd7c + 1940 - 0x150e ) + ( 0x2d7 + 8604 - 0x2472 ) ] ) ) || ( ( ReplacementFor_pair [ ( 0xb16 + 6296 - 0x23ad ) ] == ReplacementFor_S_D [ ReplacementFor_d * ( 0x1952 + 1422 - 0x1ede ) ] ) && ( ReplacementFor_pair [ ( 0xcf0 + 1924 - 0x1474 ) ] == ReplacementFor_S_D [ ReplacementFor_d * ( 0x1fcc + 1478 - 0x2590 ) + ( 0xef6 + 4388 - 0x2019 ) ] ) ) ) { printf ( " \x5b \x64 \x65 \x62 \x75 \x67 \x5d \x20 \x53 \x5f \x65 \x3d \x5b \x25 \x73 \x7c \x25 \x63 \x5d \x20 \x65 \x3a \x25 \x64 " , ReplacementFor_S_e , ReplacementFor_S_N [ ReplacementFor_n ] , e ) ; memset ( ReplacementFor_S_e , ( 0x1509 + 3070 - 0x2107 ) , ReplacementFor_MAX_N + ( 0x413 + 5414 - 0x1938 ) ) ; ReplacementFor_S_e [ ( 0xd0d + 1968 - 0x14bd ) ] = ' \0 ' ; e = - ( 0x792 + 1002 - 0xb7b ) ; printf ( " \x20 \x20 \x20 \x44 \x45 \x53 \x54 \x52 \x4f \x59 \x20 \x27 \x25 \x63 \x25 \x63 \x27 \x20 \x20 \x20 \x53 \x5f \x65 \x3d \x5b \x25 \x73 \x5d \x20 \x65 \x3a \x25 \x64 " " \n " , ReplacementFor_pair [ ( 0x168f + 1334 - 0x1bc5 ) ] , ReplacementFor_pair [ ( 0x12ab + 1858 - 0x19ec ) ] , ReplacementFor_S_e , e ) ; ReplacementFor_action = ( ( char ) ( 0x7cb + 1516 - 0xd73 ) ) ; break ; } } } } if ( ReplacementFor_action == ( ( char ) ( 0xad9 + 4585 - 0x1ca2 ) ) ) { printf ( " \x5b \x64 \x65 \x62 \x75 \x67 \x5d \x20 \x53 \x5f \x65 \x3d \x5b \x25 \x73 \x7c \x25 \x63 \x5d \x20 \x65 \x3a \x25 \x64 " , ReplacementFor_S_e , ReplacementFor_S_N [ ReplacementFor_n ] , e ) ; ReplacementFor_S_e [ ++ e ] = ReplacementFor_S_N [ ReplacementFor_n ] ; printf ( " \x20 \x20 \x20 \x41 \x44 \x44 \x20 \x20 \x20 \x20 \x53 \x5f \x65 \x3d \x5b \x25 \x73 \x5d \x20 \x65 \x3a \x25 \x64 " " \n " , ReplacementFor_S_e , e ) ; ReplacementFor_action = ( ( char ) ( 0xb96 + 868 - 0xecf ) ) ; } } fflush ( stdout ) ; fprintf ( ReplacementFor_fpout , " \x43 \x61 \x73 \x65 \x20 \x23 \x25 \x64 \x3a \x20 \x5b " , t ) ; fprintf ( stdout , " \x43 \x61 \x73 \x65 \x20 \x23 \x25 \x64 \x3a \x20 \x5b " , t ) ; for ( i = ( 0x2c6 + 1528 - 0x8be ) ; i <= e ; i ++ ) { fprintf ( ReplacementFor_fpout , " \x25 \x63 \x25 \x73 " , ReplacementFor_S_e [ i ] , ( i == e ? " " : " \x2c \x20 " ) ) ; fprintf ( stdout , " \x25 \x63 \x25 \x73 " , ReplacementFor_S_e [ i ] , ( i == e ? " " : " \x2c \x20 " ) ) ; } fprintf ( ReplacementFor_fpout , " \x5d " " \n " ) ; fprintf ( stdout , " \x5d " " \n " ) ; } ReplacementFor_end : fclose ( ReplacementFor_fpout ) ; fclose ( ReplacementFor_fpin ) ; return retval ; }
>>>Func
METHOD ReplacementFor_WP
METHOD_RETURN void
<operator>.assignment ReplacementFor_up=(0x14f+1711-0x7fe)
<operator>.assignment ReplacementFor_down=(0x32f+4488-0x14b7)
<operator>.lessThan i<ReplacementFor_n
<operator>.preIncrement ++i
<operator>.subtraction 0x14f+1711-0x7fe
<operator>.subtraction 0x32f+4488-0x14b7
<operator>.assignment i=\012(0x16f3+2674-0x2165)
<operator>.assignment ReplacementFor_up=\012ReplacementFor_down=(0xe44+4815-0x2113)
<operator>.assignment ReplacementFor_wp[i][\012(0x4ff+4734-0x177d)]=ReplacementFor_up
<operator>.assignment ReplacementFor_wp[i][(0x14db+1359-0x1a29)\012]=ReplacementFor_down
<operator>.addition 0x14f+1711
<operator>.addition 0x32f+4488
<operator>.lessThan ReplacementFor_j<ReplacementFor_n
<operator>.preIncrement ++ReplacementFor_j
<operator>.subtraction 0x16f3+2674-0x2165
<operator>.assignment ReplacementFor_down=(0xe44+4815-0x2113)
<operator>.assignment ReplacementFor_j=(0xa38+6452-0x236c)
<operator>.addition 0x16f3+2674
<operator>.subtraction 0xe44+4815-0x2113
<operator>.equals ReplacementFor_table[i\012][ReplacementFor_j]==((char)(0x1a09+600-0x1c30))
<operator>.subtraction 0x4ff+4734-0x177d
<operator>.subtraction 0x14db+1359-0x1a29
<operator>.addition 0xe44+4815
<operator>.subtraction 0xa38+6452-0x236c
<operator>.preIncrement ++ReplacementFor_up
<operator>.preIncrement ++\012ReplacementFor_down
<operator>.addition 0x4ff+4734
<operator>.addition 0x14db+1359
<operator>.addition 0xa38+6452
<operator>.cast (char)(0x1a09+600-0x1c30)
<operator>.subtraction 0x1a09+600-0x1c30
<operator>.equals ReplacementFor_table[i][ReplacementFor_j]==\012((char)(0xb2+5537-0x1623))
<operator>.addition 0x1a09+600
<operator>.preIncrement ++ReplacementFor_down
<operator>.cast (char)(0xb2+5537-0x1623)
<operator>.subtraction 0xb2+5537-0x1623
<operator>.addition 0xb2+5537
<operator>.indirectIndexAccess ReplacementFor_wp[i][\012(0x4ff+4734-0x177d)]
<operator>.indirectIndexAccess ReplacementFor_wp[i][(0x14db+1359-0x1a29)\012]
<operator>.indirectIndexAccess ReplacementFor_wp[i]
<operator>.indirectIndexAccess ReplacementFor_wp[i]
<operator>.indirectIndexAccess ReplacementFor_table[i\012][ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_table[i\012]
UNKNOWN char char
<operator>.indirectIndexAccess ReplacementFor_table[i][ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_table[i]
UNKNOWN char char
>>>PDG&49 0->4 0->5 0->6 0->7 0->10 0->11 0->12 0->13 0->14 0->15 0->16 0->19 0->20 0->22 0->23 0->24 0->25 0->26 0->27 0->28 0->29 0->30 0->32 0->34 0->35 0->37 0->38 2->1 2->1 2->1 3->1 3->1 3->1 4->1 4->1 4->1 4->4 4->5 4->5 4->9 4->10 4->11 4->14 4->14 4->17 4->18 4->20 4->22 4->23 4->24 4->25 4->28 4->29 4->30 4->39 4->40 4->41 4->42 5->1 5->4 6->1 6->2 6->2 7->1 7->3 7->3 8->1 8->1 8->4 9->1 9->1 9->10 9->26 10->1 10->1 10->1 11->1 11->1 11->1 14->1 14->1 14->4 14->14 14->15 14->15 14->21 14->31 14->32 14->34 14->43 14->44 14->45 15->1 15->14 16->1 16->8 16->8 17->1 17->9 17->11 17->27 17->35 18->1 18->1 18->14 20->1 20->9 20->9 20->17 20->17 21->1 21->1 21->1 21->26 21->27 21->33 21->36 21->37 21->38 21->46 21->47 21->48 22->1 23->1 25->1 25->18 25->18 26->1 26->10 27->1 27->11 27->35 31->1 32->1 32->21 32->21 32->31 32->31 33->1 33->1 33->1 33->35 35->1 35->11 35->27 36->1 37->1 37->33 37->33 37->36 37->36
>>>Token void ReplacementFor_WP ( ) { int ReplacementFor_up = ( 0x14f + 1711 - 0x7fe ) ; int ReplacementFor_down = ( 0x32f + 4488 - 0x14b7 ) ; int i , ReplacementFor_j ; for ( i = ( 0x16f3 + 2674 - 0x2165 ) ; i < ReplacementFor_n ; ++ i ) { ReplacementFor_up = ReplacementFor_down = ( 0xe44 + 4815 - 0x2113 ) ; for ( ReplacementFor_j = ( 0xa38 + 6452 - 0x236c ) ; ReplacementFor_j < ReplacementFor_n ; ++ ReplacementFor_j ) { if ( ReplacementFor_table [ i ] [ ReplacementFor_j ] == ( ( char ) ( 0x1a09 + 600 - 0x1c30 ) ) ) { ++ ReplacementFor_up ; ++ ReplacementFor_down ; } else if ( ReplacementFor_table [ i ] [ ReplacementFor_j ] == ( ( char ) ( 0xb2 + 5537 - 0x1623 ) ) ) { ++ ReplacementFor_down ; } } ReplacementFor_wp [ i ] [ ( 0x4ff + 4734 - 0x177d ) ] = ReplacementFor_up ; ReplacementFor_wp [ i ] [ ( 0x14db + 1359 - 0x1a29 ) ] = ReplacementFor_down ; } }
>>>Func
METHOD ReplacementFor_heapsort
METHOD_RETURN void
PARAM int*ReplacementFor_a
PARAM int ReplacementFor_n
<operator>.greaterEqualsThan i>=(0x62d+4768-0x18cb)
<operator>.postDecrement i--
<operator>.assignment i=ReplacementFor_n
<operator>.assignment ReplacementFor_temp=ReplacementFor_a[i]
<operator>.assignment ReplacementFor_a[i]=ReplacementFor_a[\012(0xe22+2074-0x163b)]
<operator>.assignment ReplacementFor_a[(0xbac+3498-0x1955)]=ReplacementFor_temp
ReplacementFor_max_heapify ReplacementFor_max_heapify(ReplacementFor_a (0x210f+225-0x21ef) i-\012(0xffd+4690-0x224e))
<operator>.subtraction 0x62d+4768-0x18cb
<operator>.addition 0x62d+4768
<operator>.subtraction 0x210f+225-0x21ef
<operator>.subtraction i-\012(0xffd+4690-0x224e)
<operator>.subtraction 0xe22+2074-0x163b
<operator>.subtraction 0xbac+3498-0x1955
<operator>.addition 0x210f+225
<operator>.subtraction 0xffd+4690-0x224e
<operator>.addition 0xe22+2074
<operator>.addition 0xbac+3498
<operator>.addition 0xffd+4690
<operator>.indirectIndexAccess ReplacementFor_a[i]
<operator>.indirectIndexAccess ReplacementFor_a[i]
<operator>.indirectIndexAccess ReplacementFor_a[\012(0xe22+2074-0x163b)]
<operator>.indirectIndexAccess ReplacementFor_a[(0xbac+3498-0x1955)]
>>>PDG&26 0->2 0->3 0->4 0->5 0->6 0->9 0->10 0->11 0->12 0->13 0->14 0->15 0->16 0->17 0->18 0->19 0->20 0->21 2->1 2->7 2->8 2->10 3->6 4->1 4->1 4->1 4->4 4->5 4->7 4->8 4->9 4->10 4->11 4->12 4->13 4->14 4->14 4->15 4->16 4->17 4->18 4->19 4->20 4->21 4->22 4->23 4->24 4->25 5->1 5->4 6->1 6->1 6->4 7->9 8->7 8->10 9->10 10->7 10->8 11->1 11->4 11->4 13->10 13->10 14->5 14->10 14->10 18->14 18->14
>>>Token void ReplacementFor_heapsort ( int * ReplacementFor_a , int ReplacementFor_n ) { int i , ReplacementFor_temp ; for ( i = ReplacementFor_n ; i >= ( 0x62d + 4768 - 0x18cb ) ; i -- ) { ReplacementFor_temp = ReplacementFor_a [ i ] ; ReplacementFor_a [ i ] = ReplacementFor_a [ ( 0xe22 + 2074 - 0x163b ) ] ; ReplacementFor_a [ ( 0xbac + 3498 - 0x1955 ) ] = ReplacementFor_temp ; ReplacementFor_max_heapify ( ReplacementFor_a , ( 0x210f + 225 - 0x21ef ) , i - ( 0xffd + 4690 - 0x224e ) ) ; } }
>>>Func
METHOD ReplacementFor_printStack
METHOD_RETURN void
PARAM char ReplacementFor_stack[]
PARAM int \012ReplacementFor_height
printf printf("\x5b")
printf printf("\x5d")
<operator>.lessThan ReplacementFor_k<ReplacementFor_height-(0x1027+3266-0x1ce8)
<operator>.postIncrement ReplacementFor_k++
<operator>.greaterThan ReplacementFor_height>(0x10c7+672-0x1367)
<operator>.assignment ReplacementFor_k=\012(0x1e3a+96-0x1e9a)
printf printf("\x25\x63\x2c\x20",ReplacementFor_stack[\012ReplacementFor_k])
printf printf(\012"\x25\x63" ReplacementFor_stack[ReplacementFor_height-(0x5c9+7645-0x23a5)])
<operator>.subtraction ReplacementFor_height-(0x1027+3266-0x1ce8)
<operator>.subtraction 0x10c7+672-0x1367
<operator>.subtraction 0x1e3a+96-0x1e9a
<operator>.subtraction 0x1027+3266-0x1ce8
<operator>.addition 0x10c7+672
<operator>.addition 0x1e3a+96
<operator>.addition 0x1027+3266
<operator>.subtraction ReplacementFor_height-(0x5c9+7645-0x23a5)
<operator>.subtraction 0x5c9+7645-0x23a5
<operator>.addition 0x5c9+7645
<operator>.indirectIndexAccess ReplacementFor_stack[\012ReplacementFor_k]
<operator>.indirectIndexAccess ReplacementFor_stack[ReplacementFor_height-(0x5c9+7645-0x23a5)]
>>>PDG&24 0->2 0->3 0->4 0->5 0->6 0->7 0->8 0->10 0->11 0->12 0->13 0->14 0->15 0->16 0->17 0->18 0->19 0->20 0->21 2->1 2->10 2->11 3->12 4->1 5->1 6->1 6->1 6->1 6->6 6->7 6->7 6->10 6->12 6->15 6->18 6->22 7->1 7->6 8->1 8->1 8->1 8->11 8->19 8->19 8->20 8->21 8->23 9->1 9->1 9->6 10->1 10->1 11->1 11->1 12->1 12->6 12->6 12->8 13->1 13->8 13->8 14->1 14->9 14->9 15->1 15->12 15->12 19->1 19->1 20->1 20->19 20->19
>>>Token inline void ReplacementFor_printStack ( char ReplacementFor_stack [ ] , int ReplacementFor_height ) { printf ( " \x5b " ) ; int ReplacementFor_k ; for ( ReplacementFor_k = ( 0x1e3a + 96 - 0x1e9a ) ; ReplacementFor_k < ReplacementFor_height - ( 0x1027 + 3266 - 0x1ce8 ) ; ReplacementFor_k ++ ) { printf ( " \x25 \x63 \x2c \x20 " , ReplacementFor_stack [ ReplacementFor_k ] ) ; } if ( ReplacementFor_height > ( 0x10c7 + 672 - 0x1367 ) ) { printf ( " \x25 \x63 " , ReplacementFor_stack [ ReplacementFor_height - ( 0x5c9 + 7645 - 0x23a5 ) ] ) ; } printf ( " \x5d " ) ; }
>>>Func
METHOD ReplacementFor_blake2b_init
METHOD_RETURN int
PARAM ReplacementFor_blake2b_state*S
PARAM size_t \012ReplacementFor_outlen
<operator>.assignment ReplacementFor_P->\012ReplacementFor_digest_length=(uint8_t)ReplacementFor_outlen
<operator>.assignment ReplacementFor_P->\012ReplacementFor_key_length=(0x14d9+2498-0x1e9b)
<operator>.assignment ReplacementFor_P->\012ReplacementFor_fanout=(0x1ed9+1171-0x236b)
<operator>.assignment ReplacementFor_P->\012ReplacementFor_depth=(0xf81+116-0xff4)
ReplacementFor_store32 ReplacementFor_store32(&ReplacementFor_P\012->ReplacementFor_leaf_length (0x24f3+252-0x25ef))
ReplacementFor_store32 ReplacementFor_store32(&\012ReplacementFor_P->ReplacementFor_node_offset (0x15f8+3004-0x21b4))
ReplacementFor_store32 ReplacementFor_store32(&ReplacementFor_P->ReplacementFor_xof_length \012(0xe53+2434-0x17d5))
<operator>.assignment ReplacementFor_P->ReplacementFor_node_depth=\012(0x3c1+591-0x610)
<operator>.assignment ReplacementFor_P->ReplacementFor_inner_length=\012(0x94a+3459-0x16cd)
memset memset(ReplacementFor_P->ReplacementFor_reserved \012(0x6a8+3935-0x1607) sizeof(ReplacementFor_P->ReplacementFor_reserved))
memset memset(\012ReplacementFor_P->ReplacementFor_salt (0xb0d+2983-0x16b4) sizeof(\012ReplacementFor_P->ReplacementFor_salt))
memset memset(ReplacementFor_P->\012ReplacementFor_personal (0x1266+4888-0x257e) sizeof(ReplacementFor_P->\012ReplacementFor_personal))
RETURN return ReplacementFor_blake2b_init_param(S,\012ReplacementFor_P); return ReplacementFor_blake2b_init_param(S,\012ReplacementFor_P);
<operator>.logicalOr (!ReplacementFor_outlen)||(ReplacementFor_outlen>\012ReplacementFor_BLAKE2B_OUTBYTES)
ReplacementFor_blake2b_init_param ReplacementFor_blake2b_init_param(S,\012ReplacementFor_P)
RETURN return-(0x13cf+2427-0x1d49); return-(0x13cf+2427-0x1d49);
<operator>.cast (uint8_t)ReplacementFor_outlen
<operator>.subtraction 0x14d9+2498-0x1e9b
<operator>.subtraction 0x1ed9+1171-0x236b
<operator>.subtraction 0xf81+116-0xff4
<operator>.subtraction 0x24f3+252-0x25ef
<operator>.subtraction 0x15f8+3004-0x21b4
<operator>.subtraction 0xe53+2434-0x17d5
<operator>.subtraction 0x3c1+591-0x610
<operator>.subtraction 0x94a+3459-0x16cd
<operator>.subtraction 0x6a8+3935-0x1607
<operator>.subtraction 0xb0d+2983-0x16b4
<operator>.subtraction 0x1266+4888-0x257e
<operator>.logicalNot !ReplacementFor_outlen
<operator>.greaterThan ReplacementFor_outlen>\012ReplacementFor_BLAKE2B_OUTBYTES
<operator>.minus -(0x13cf+2427-0x1d49)
<operator>.addition 0x14d9+2498
<operator>.addition 0x1ed9+1171
<operator>.addition 0xf81+116
<operator>.addition 0x24f3+252
<operator>.addition 0x15f8+3004
<operator>.addition 0xe53+2434
<operator>.addition 0x3c1+591
<operator>.addition 0x94a+3459
<operator>.addition 0x6a8+3935
<operator>.addition 0xb0d+2983
<operator>.addition 0x1266+4888
<operator>.subtraction 0x13cf+2427-0x1d49
<operator>.addition 0x13cf+2427
<operator>.indirectFieldAccess ReplacementFor_P->\012ReplacementFor_digest_length
<operator>.indirectFieldAccess ReplacementFor_P->\012ReplacementFor_key_length
<operator>.indirectFieldAccess ReplacementFor_P->\012ReplacementFor_fanout
<operator>.indirectFieldAccess ReplacementFor_P->\012ReplacementFor_depth
<operator>.addressOf &ReplacementFor_P\012->ReplacementFor_leaf_length
<operator>.addressOf &\012ReplacementFor_P->ReplacementFor_node_offset
<operator>.addressOf &ReplacementFor_P->ReplacementFor_xof_length
<operator>.indirectFieldAccess ReplacementFor_P->ReplacementFor_node_depth
<operator>.indirectFieldAccess ReplacementFor_P->ReplacementFor_inner_length
<operator>.indirectFieldAccess ReplacementFor_P->ReplacementFor_reserved
<operator>.sizeOf sizeof(ReplacementFor_P->ReplacementFor_reserved)
<operator>.indirectFieldAccess ReplacementFor_P->ReplacementFor_salt
<operator>.sizeOf sizeof(\012ReplacementFor_P->ReplacementFor_salt)
<operator>.indirectFieldAccess ReplacementFor_P->\012ReplacementFor_personal
<operator>.sizeOf sizeof(ReplacementFor_P->\012ReplacementFor_personal)
FIELD_IDENTIFIER ReplacementFor_digest_length ReplacementFor_digest_length
UNKNOWN uint8_t uint8_t
FIELD_IDENTIFIER ReplacementFor_key_length ReplacementFor_key_length
FIELD_IDENTIFIER ReplacementFor_fanout ReplacementFor_fanout
FIELD_IDENTIFIER ReplacementFor_depth ReplacementFor_depth
<operator>.indirectFieldAccess ReplacementFor_P\012->ReplacementFor_leaf_length
<operator>.indirectFieldAccess ReplacementFor_P->ReplacementFor_node_offset
<operator>.indirectFieldAccess ReplacementFor_P->ReplacementFor_xof_length
FIELD_IDENTIFIER ReplacementFor_node_depth ReplacementFor_node_depth
FIELD_IDENTIFIER ReplacementFor_inner_length ReplacementFor_inner_length
FIELD_IDENTIFIER ReplacementFor_reserved ReplacementFor_reserved
<operator>.indirectFieldAccess ReplacementFor_P->ReplacementFor_reserved
FIELD_IDENTIFIER ReplacementFor_salt ReplacementFor_salt
<operator>.indirectFieldAccess ReplacementFor_P->ReplacementFor_salt
FIELD_IDENTIFIER ReplacementFor_personal ReplacementFor_personal
<operator>.indirectFieldAccess ReplacementFor_P->\012ReplacementFor_personal
FIELD_IDENTIFIER ReplacementFor_leaf_length ReplacementFor_leaf_length
FIELD_IDENTIFIER ReplacementFor_node_offset ReplacementFor_node_offset
FIELD_IDENTIFIER ReplacementFor_xof_length ReplacementFor_xof_length
FIELD_IDENTIFIER ReplacementFor_reserved ReplacementFor_reserved
FIELD_IDENTIFIER ReplacementFor_salt ReplacementFor_salt
FIELD_IDENTIFIER ReplacementFor_personal ReplacementFor_personal
>>>PDG&85 0->2 0->3 0->4 0->18 0->20 0->21 0->22 0->23 0->24 0->25 0->26 0->27 0->28 0->29 0->30 0->31 0->32 0->33 0->35 0->36 0->37 0->38 0->39 0->40 0->41 0->42 0->43 0->44 0->45 0->46 0->47 2->1 2->18 3->32 16->1 17->1 17->1 17->1 17->4 17->5 17->6 17->7 17->8 17->9 17->10 17->11 17->12 17->13 17->14 17->15 17->16 17->18 17->19 17->20 17->21 17->22 17->23 17->24 17->25 17->26 17->27 17->28 17->29 17->30 17->31 17->34 17->35 17->36 17->37 17->38 17->39 17->40 17->41 17->42 17->43 17->44 17->45 17->46 17->47 17->48 17->49 17->50 17->51 17->52 17->53 17->54 17->55 17->56 17->57 17->58 17->59 17->60 17->61 17->62 17->63 17->64 17->65 17->66 17->67 17->68 17->69 17->70 17->71 17->72 17->73 17->74 17->75 17->76 17->77 17->78 17->79 17->80 17->81 17->82 17->83 17->84 18->16 19->1 21->5 21->5 22->6 22->6 23->7 23->7 24->8 24->8 25->9 25->9 26->10 26->10 27->11 27->11 28->12 28->12 29->13 29->13 30->14 30->14 31->15 31->15 32->1 32->4 32->17 32->20 32->33 32->33 33->1 33->1 33->4 33->17 33->17 33->20 34->1 34->1 34->19 46->1 46->34 46->34
>>>Token int ReplacementFor_blake2b_init ( ReplacementFor_blake2b_state * S , size_t ReplacementFor_outlen ) { ReplacementFor_blake2b_param ReplacementFor_P [ ( 0xc32 + 528 - 0xe41 ) ] ; if ( ( ! ReplacementFor_outlen ) || ( ReplacementFor_outlen > ReplacementFor_BLAKE2B_OUTBYTES ) ) return - ( 0x13cf + 2427 - 0x1d49 ) ; ReplacementFor_P -> ReplacementFor_digest_length = ( uint8_t ) ReplacementFor_outlen ; ReplacementFor_P -> ReplacementFor_key_length = ( 0x14d9 + 2498 - 0x1e9b ) ; ReplacementFor_P -> ReplacementFor_fanout = ( 0x1ed9 + 1171 - 0x236b ) ; ReplacementFor_P -> ReplacementFor_depth = ( 0xf81 + 116 - 0xff4 ) ; ReplacementFor_store32 ( & ReplacementFor_P -> ReplacementFor_leaf_length , ( 0x24f3 + 252 - 0x25ef ) ) ; ReplacementFor_store32 ( & ReplacementFor_P -> ReplacementFor_node_offset , ( 0x15f8 + 3004 - 0x21b4 ) ) ; ReplacementFor_store32 ( & ReplacementFor_P -> ReplacementFor_xof_length , ( 0xe53 + 2434 - 0x17d5 ) ) ; ReplacementFor_P -> ReplacementFor_node_depth = ( 0x3c1 + 591 - 0x610 ) ; ReplacementFor_P -> ReplacementFor_inner_length = ( 0x94a + 3459 - 0x16cd ) ; memset ( ReplacementFor_P -> ReplacementFor_reserved , ( 0x6a8 + 3935 - 0x1607 ) , sizeof ( ReplacementFor_P -> ReplacementFor_reserved ) ) ; memset ( ReplacementFor_P -> ReplacementFor_salt , ( 0xb0d + 2983 - 0x16b4 ) , sizeof ( ReplacementFor_P -> ReplacementFor_salt ) ) ; memset ( ReplacementFor_P -> ReplacementFor_personal , ( 0x1266 + 4888 - 0x257e ) , sizeof ( ReplacementFor_P -> ReplacementFor_personal ) ) ; return ReplacementFor_blake2b_init_param ( S , ReplacementFor_P ) ; }
>>>Func
METHOD ReplacementFor_merge_sort_i
METHOD_RETURN void
PARAM int*ReplacementFor_a
PARAM int ReplacementFor_n
<operator>.assignment nl=ReplacementFor_n/\012(0x204f+45-0x207a)
<operator>.assignment ReplacementFor_nr=ReplacementFor_n-nl
RETURN return; return;
<operator>.greaterThan ReplacementFor_n\012>(0x359+3137-0xf99)
<operator>.division ReplacementFor_n/\012(0x204f+45-0x207a)
<operator>.subtraction ReplacementFor_n-nl
<operator>.assignment ReplacementFor_al=ReplacementFor_a
ReplacementFor_merge_sort_i ReplacementFor_merge_sort_i(ReplacementFor_al,nl)
<operator>.assignment ReplacementFor_ar=\012ReplacementFor_a+nl
ReplacementFor_merge_sort_i ReplacementFor_merge_sort_i(ReplacementFor_ar,\012ReplacementFor_nr)
<operator>.assignment ReplacementFor_b=malloc(ReplacementFor_n*sizeof(int))
<operator>.assignment i=\012ReplacementFor_il=ReplacementFor_ir=(0xed6+341-0x102b)
free free(ReplacementFor_b)
<operator>.subtraction 0x204f+45-0x207a
<operator>.subtraction 0x359+3137-0xf99
<operator>.logicalAnd (ReplacementFor_il<\012nl)&&(ReplacementFor_ir<ReplacementFor_nr)
<operator>.lessThan ReplacementFor_il<nl
<operator>.postIncrement ReplacementFor_il++
<operator>.lessThan ReplacementFor_ir<\012ReplacementFor_nr
<operator>.postIncrement ReplacementFor_ir++
<operator>.lessThan i<ReplacementFor_n
<operator>.postIncrement i++
<operator>.addition 0x204f+45
<operator>.addition 0x359+3137
<operator>.addition ReplacementFor_a+nl
malloc malloc(ReplacementFor_n*sizeof(int))
<operator>.assignment ReplacementFor_il=ReplacementFor_ir=(0xed6+341-0x102b)
<operator>.assignment ReplacementFor_b[i]=\012ReplacementFor_al[ReplacementFor_il]
<operator>.postIncrement i++
<operator>.assignment ReplacementFor_b[i]=ReplacementFor_ar[\012ReplacementFor_ir]
<operator>.postIncrement i++
<operator>.assignment i=(0x1ca9+2231-0x2560)
<operator>.assignment ReplacementFor_a[i]=ReplacementFor_b[i]
<operator>.multiplication ReplacementFor_n*sizeof(int)
<operator>.assignment ReplacementFor_ir=(0xed6+341-0x102b)
<operator>.lessThan ReplacementFor_il<\012nl
<operator>.lessThan ReplacementFor_ir<ReplacementFor_nr
<operator>.greaterEqualsThan ReplacementFor_al[\012ReplacementFor_il]>=ReplacementFor_ar[ReplacementFor_ir]
<operator>.sizeOf sizeof(int)
<operator>.subtraction 0xed6+341-0x102b
<operator>.assignment ReplacementFor_b[i]=\012ReplacementFor_al[ReplacementFor_il]
<operator>.postIncrement i++
<operator>.postIncrement ReplacementFor_il++
<operator>.subtraction 0x1ca9+2231-0x2560
<operator>.addition 0xed6+341
<operator>.assignment ReplacementFor_b[i]=ReplacementFor_ar[ReplacementFor_ir]
<operator>.postIncrement i++
<operator>.postIncrement ReplacementFor_ir++
<operator>.addition 0x1ca9+2231
<operator>.indirectIndexAccess ReplacementFor_b[i]
<operator>.indirectIndexAccess ReplacementFor_al[ReplacementFor_il]
<operator>.indirectIndexAccess ReplacementFor_b[i]
<operator>.indirectIndexAccess ReplacementFor_ar[\012ReplacementFor_ir]
<operator>.indirectIndexAccess ReplacementFor_a[i]
<operator>.indirectIndexAccess ReplacementFor_b[i]
<operator>.indirectIndexAccess ReplacementFor_al[\012ReplacementFor_il]
<operator>.indirectIndexAccess ReplacementFor_ar[ReplacementFor_ir]
<operator>.indirectIndexAccess ReplacementFor_b[i]
<operator>.indirectIndexAccess ReplacementFor_al[ReplacementFor_il]
<operator>.indirectIndexAccess ReplacementFor_b[i]
<operator>.indirectIndexAccess ReplacementFor_ar[ReplacementFor_ir]
>>>PDG&65 0->2 0->3 0->6 0->7 0->8 0->9 0->10 0->11 0->12 0->13 0->16 0->17 0->18 0->20 0->21 0->22 0->23 0->24 0->25 0->26 0->27 0->28 0->32 0->34 0->37 0->39 0->40 0->43 0->45 0->46 0->47 0->48 0->50 0->51 0->52 2->1 2->10 2->12 2->28 3->8 4->1 4->1 4->9 5->1 5->1 5->1 5->13 6->1 7->1 7->1 7->1 7->10 7->11 7->12 7->13 7->14 7->15 7->16 7->19 7->20 7->22 7->24 7->28 7->29 7->30 7->35 7->37 7->37 7->38 7->39 7->42 7->43 7->47 7->48 7->52 8->1 8->4 8->4 8->9 9->1 9->5 9->5 9->7 9->11 10->1 10->11 11->1 11->1 11->12 11->28 11->31 11->39 11->41 11->44 12->1 12->1 12->13 13->1 13->1 13->22 13->33 13->40 13->41 13->49 14->1 14->1 14->16 14->36 15->1 15->1 15->32 15->34 15->45 15->50 16->1 17->1 17->8 17->8 18->1 18->7 18->7 19->1 19->1 19->1 19->19 19->39 19->41 19->59 19->60 20->1 20->1 20->1 20->20 20->21 20->21 20->31 20->32 20->53 20->54 21->1 21->20 22->1 22->1 22->1 22->22 22->23 22->23 22->33 22->34 22->55 22->56 23->1 23->22 24->1 24->1 24->1 24->24 24->25 24->25 24->36 24->57 24->58 25->1 25->24 28->1 29->1 29->14 30->1 30->15 30->39 31->1 31->1 31->1 31->16 31->36 32->1 32->34 33->1 33->1 33->1 33->16 33->36 34->1 35->1 35->1 35->24 36->1 36->1 36->1 37->24 37->29 38->1 38->15 38->22 38->30 38->40 38->51 39->19 39->19 39->20 39->20 39->40 39->46 40->19 40->19 40->22 40->22 40->51 41->1 41->1 41->1 41->44 41->45 41->46 41->49 41->49 41->50 41->51 41->61 41->62 41->63 41->64 42->1 43->1 43->15 43->15 43->30 43->30 43->38 43->38 44->1 44->1 44->1 44->16 44->36 45->1 45->32 45->34 45->50 46->1 46->39 47->1 47->35 47->35 49->1 49->1 49->1 49->16 49->36 50->1 50->32 50->34 50->45 51->1 51->22 51->40
>>>Token void ReplacementFor_merge_sort_i ( int * ReplacementFor_a , int ReplacementFor_n ) { int i , ReplacementFor_il , ReplacementFor_ir ; int * ReplacementFor_al ; int * ReplacementFor_ar ; int * ReplacementFor_b ; int nl = ReplacementFor_n / ( 0x204f + 45 - 0x207a ) ; int ReplacementFor_nr = ReplacementFor_n - nl ; if ( ReplacementFor_n > ( 0x359 + 3137 - 0xf99 ) ) { ReplacementFor_al = ReplacementFor_a ; ReplacementFor_merge_sort_i ( ReplacementFor_al , nl ) ; ReplacementFor_ar = ReplacementFor_a + nl ; ReplacementFor_merge_sort_i ( ReplacementFor_ar , ReplacementFor_nr ) ; ReplacementFor_b = malloc ( ReplacementFor_n * sizeof ( int ) ) ; i = ReplacementFor_il = ReplacementFor_ir = ( 0xed6 + 341 - 0x102b ) ; while ( ( ReplacementFor_il < nl ) && ( ReplacementFor_ir < ReplacementFor_nr ) ) { if ( ReplacementFor_al [ ReplacementFor_il ] >= ReplacementFor_ar [ ReplacementFor_ir ] ) { ReplacementFor_b [ i ] = ReplacementFor_al [ ReplacementFor_il ] ; i ++ ; ReplacementFor_il ++ ; } else { ReplacementFor_b [ i ] = ReplacementFor_ar [ ReplacementFor_ir ] ; i ++ ; ReplacementFor_ir ++ ; } } for ( ; ReplacementFor_il < nl ; ReplacementFor_il ++ ) { ReplacementFor_b [ i ] = ReplacementFor_al [ ReplacementFor_il ] ; i ++ ; } for ( ; ReplacementFor_ir < ReplacementFor_nr ; ReplacementFor_ir ++ ) { ReplacementFor_b [ i ] = ReplacementFor_ar [ ReplacementFor_ir ] ; i ++ ; } for ( i = ( 0x1ca9 + 2231 - 0x2560 ) ; i < ReplacementFor_n ; i ++ ) { ReplacementFor_a [ i ] = ReplacementFor_b [ i ] ; } free ( ReplacementFor_b ) ; } return ; }
>>>Func
METHOD main
METHOD_RETURN int
<operator>.assignment ReplacementFor_num_cases=(0xfac+3020-0x1b78)
<operator>.assignment i=(0x5a1+1262-0xa8f)
scanf scanf("\x25\x64",&ReplacementFor_num_cases)
RETURN return(0x1df0+187-0x1eab); return(0x1df0+187-0x1eab);
<operator>.lessThan i<\012ReplacementFor_num_cases
<operator>.postIncrement i++
<operator>.subtraction 0x1df0+187-0x1eab
<operator>.subtraction 0xfac+3020-0x1b78
<operator>.subtraction 0x5a1+1262-0xa8f
<operator>.assignment i=(0xb00+5919-0x221f)
<operator>.assignment ReplacementFor_max_keys=(0x713+5005-0x1aa0)
<operator>.assignment ReplacementFor_num_keys=(0xf73+2369-0x18b4)
<operator>.assignment ReplacementFor_num_alphabets=\012(0x125b+2423-0x1bd2)
<operator>.assignment ReplacementFor_j=(0x63f+3056-0x122f)
<operator>.assignment ReplacementFor_output=\012(0xe2b+1605-0x1470)
ReplacementFor_init ReplacementFor_init()
scanf scanf(\012"\x25\x64\x20\x25\x64\x20\x25\x64",&ReplacementFor_max_keys,&\012ReplacementFor_num_keys,&ReplacementFor_num_alphabets)
<operator>.addition 0xfac+3020
<operator>.addition 0x5a1+1262
<operator>.lessThan ReplacementFor_j<ReplacementFor_num_alphabets
<operator>.postIncrement ReplacementFor_j++
<operator>.lessThan ReplacementFor_max_keys*ReplacementFor_num_keys<\012ReplacementFor_num_alphabets
<operator>.addition 0x1df0+187
<operator>.subtraction 0xb00+5919-0x221f
<operator>.subtraction 0x713+5005-0x1aa0
<operator>.subtraction 0xf73+2369-0x18b4
<operator>.subtraction 0x125b+2423-0x1bd2
<operator>.subtraction 0x63f+3056-0x122f
<operator>.subtraction 0xe2b+1605-0x1470
<operator>.assignment ReplacementFor_j=\012(0x7c7+5851-0x1ea2)
scanf scanf("\x25\x64",&ReplacementFor_frequency[ReplacementFor_j]\012)
printf printf(\012"\x43\x61\x73\x65\x20\x23\x25\x64\x3a\x20\x49\x6d\x70\x6f\x73\x73\x69\x62\x6c\x65" "\n"\012 i+(0x1283+1109-0x16d7))
<operator>.addition 0xb00+5919
<operator>.addition 0x713+5005
<operator>.addition 0xf73+2369
<operator>.addition 0x125b+2423
<operator>.addition 0x63f+3056
<operator>.addition 0xe2b+1605
<operator>.multiplication ReplacementFor_max_keys*ReplacementFor_num_keys
qsort qsort(ReplacementFor_frequency \012ReplacementFor_num_alphabets sizeof(int),ReplacementFor_compare)
<operator>.assignment ReplacementFor_output=ReplacementFor_calculate_minimum_key_presses(\012ReplacementFor_max_keys,ReplacementFor_num_keys,ReplacementFor_num_alphabets)
printf printf("\x43\x61\x73\x65\x20\x23\x25\x64\x3a\x20\x25\x64" "\n" i+\012(0x718+836-0xa5b),ReplacementFor_output)
<operator>.subtraction 0x7c7+5851-0x1ea2
<operator>.addition i+(0x1283+1109-0x16d7)
<operator>.addition 0x7c7+5851
<operator>.subtraction 0x1283+1109-0x16d7
<operator>.sizeOf sizeof(int)
ReplacementFor_calculate_minimum_key_presses ReplacementFor_calculate_minimum_key_presses(\012ReplacementFor_max_keys,ReplacementFor_num_keys,ReplacementFor_num_alphabets)
<operator>.addition i+\012(0x718+836-0xa5b)
<operator>.addition 0x1283+1109
<operator>.subtraction 0x718+836-0xa5b
<operator>.addition 0x718+836
<operator>.addressOf &ReplacementFor_max_keys
<operator>.addressOf &\012ReplacementFor_num_keys
<operator>.addressOf &ReplacementFor_num_alphabets
<operator>.addressOf &ReplacementFor_frequency[ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_frequency[ReplacementFor_j]
>>>PDG&59 0->4 0->6 0->7 0->8 0->9 0->10 0->17 0->18 0->19 0->20 0->21 0->22 0->23 0->24 0->25 0->26 0->27 0->28 0->29 0->30 0->33 0->34 0->35 0->36 0->37 0->38 0->39 0->40 0->41 0->43 0->44 0->45 0->46 0->47 0->49 0->50 0->51 0->52 0->53 2->1 2->1 2->4 2->6 3->1 3->1 4->1 4->6 5->1 6->1 6->1 6->1 6->6 6->7 6->7 6->12 6->13 6->14 6->15 6->16 6->17 6->18 6->21 6->23 6->26 6->27 6->28 6->29 6->30 6->31 6->33 6->35 6->36 6->37 6->38 6->39 6->40 6->43 6->44 6->45 6->46 6->50 6->54 6->55 6->56 7->1 7->6 8->1 8->1 8->5 9->1 9->2 9->2 10->1 10->3 10->3 11->1 11->1 11->6 12->1 12->1 12->18 12->40 13->1 13->1 13->40 14->1 14->1 14->21 15->1 15->1 16->1 16->1 16->1 17->1 18->1 18->1 18->1 18->40 18->49 21->1 21->1 21->21 21->22 21->22 21->23 21->32 21->57 21->58 22->1 22->21 23->1 23->1 23->1 23->33 23->41 23->41 23->42 23->43 23->45 23->47 23->48 23->49 23->50 23->51 23->52 23->53 25->1 25->11 25->11 26->1 26->12 26->12 27->1 27->13 27->13 28->1 28->14 28->14 29->1 29->15 29->15 30->1 30->16 30->16 31->1 31->1 31->21 32->1 32->41 33->1 33->1 40->1 40->1 40->23 40->23 40->49 40->49 41->1 41->1 41->1 41->32 41->49 42->1 42->1 42->43 43->1 43->1 43->1 44->1 44->31 44->31 45->1 47->1 47->33 47->33 47->45 47->45 48->1 49->1 49->1 49->1 49->42 49->42 49->42 50->1 52->1 52->43 52->43 52->50 52->50
>>>Token int main ( ) { int ReplacementFor_num_cases = ( 0xfac + 3020 - 0x1b78 ) , i = ( 0x5a1 + 1262 - 0xa8f ) ; scanf ( " \x25 \x64 " , & ReplacementFor_num_cases ) ; for ( i = ( 0xb00 + 5919 - 0x221f ) ; i < ReplacementFor_num_cases ; i ++ ) { int ReplacementFor_max_keys = ( 0x713 + 5005 - 0x1aa0 ) , ReplacementFor_num_keys = ( 0xf73 + 2369 - 0x18b4 ) , ReplacementFor_num_alphabets = ( 0x125b + 2423 - 0x1bd2 ) , ReplacementFor_j = ( 0x63f + 3056 - 0x122f ) , ReplacementFor_output = ( 0xe2b + 1605 - 0x1470 ) ; ReplacementFor_init ( ) ; scanf ( " \x25 \x64 \x20 \x25 \x64 \x20 \x25 \x64 " , & ReplacementFor_max_keys , & ReplacementFor_num_keys , & ReplacementFor_num_alphabets ) ; for ( ReplacementFor_j = ( 0x7c7 + 5851 - 0x1ea2 ) ; ReplacementFor_j < ReplacementFor_num_alphabets ; ReplacementFor_j ++ ) { scanf ( " \x25 \x64 " , & ReplacementFor_frequency [ ReplacementFor_j ] ) ; } if ( ReplacementFor_max_keys * ReplacementFor_num_keys < ReplacementFor_num_alphabets ) { printf ( " \x43 \x61 \x73 \x65 \x20 \x23 \x25 \x64 \x3a \x20 \x49 \x6d \x70 \x6f \x73 \x73 \x69 \x62 \x6c \x65 " " \n " , i + ( 0x1283 + 1109 - 0x16d7 ) ) ; } else { qsort ( ReplacementFor_frequency , ReplacementFor_num_alphabets , sizeof ( int ) , ReplacementFor_compare ) ; ReplacementFor_output = ReplacementFor_calculate_minimum_key_presses ( ReplacementFor_max_keys , ReplacementFor_num_keys , ReplacementFor_num_alphabets ) ; printf ( " \x43 \x61 \x73 \x65 \x20 \x23 \x25 \x64 \x3a \x20 \x25 \x64 " " \n " , i + ( 0x718 + 836 - 0xa5b ) , ReplacementFor_output ) ; } } return ( 0x1df0 + 187 - 0x1eab ) ; }
>>>Func
METHOD ReplacementFor_mbsalign
METHOD_RETURN size_t
PARAM char const*ReplacementFor_src
PARAM char*\012ReplacementFor_dest
PARAM size_t ReplacementFor_dest_size
PARAM size_t*ReplacementFor_width
PARAM ReplacementFor_mbs_align_t align
PARAM int flags
<operator>.assignment ReplacementFor_ret=SIZE_MAX
<operator>.assignment ReplacementFor_src_size=strlen(ReplacementFor_src)+1
<operator>.assignment *\012ReplacementFor_newstr=NULL
<operator>.assignment *ReplacementFor_str_wc=NULL
<operator>.assignment *\012ReplacementFor_str_to_print=ReplacementFor_src
<operator>.assignment ReplacementFor_n_cols=\012ReplacementFor_src_size-(0x1df8+1971-0x25aa)
<operator>.assignment ReplacementFor_n_used_bytes=\012ReplacementFor_n_cols
<operator>.assignment ReplacementFor_n_spaces=(0x4e4+128-0x564)
<operator>.assignment ReplacementFor_conversion=false
<operator>.assignment ReplacementFor_wc_enabled=false
<operator>.assignment *ReplacementFor_width=\012ReplacementFor_n_cols
BLOCK <empty> <empty>
free free(ReplacementFor_str_wc)
free free(\012ReplacementFor_newstr)
RETURN return ReplacementFor_ret; return ReplacementFor_ret;
<operator>.logicalAnd !(flags&\012ReplacementFor_MBA_UNIBYTE_ONLY)&&MB_CUR_MAX>(0x2057+536-0x226e)
<operator>.logicalAnd ReplacementFor_wc_enabled&&(ReplacementFor_conversion||(ReplacementFor_n_cols>*\012ReplacementFor_width))
<operator>.greaterThan ReplacementFor_n_cols>*ReplacementFor_width
<operator>.greaterThan *\012ReplacementFor_width>ReplacementFor_n_cols
<operator>.assignment ReplacementFor_ret=ReplacementFor_n_used_bytes+((\012ReplacementFor_start_spaces+ReplacementFor_end_spaces)*(0x1d14+2503-0x26da))
IDENTIFIER ReplacementFor_ret return ReplacementFor_ret;
<operator>.addition strlen(ReplacementFor_src)+1
<operator>.subtraction ReplacementFor_src_size-(0x1df8+1971-0x25aa)
<operator>.subtraction 0x4e4+128-0x564
<operator>.assignment ReplacementFor_src_chars=mbstowcs(NULL ReplacementFor_src (0x4ff+7794-0x2371))
<operator>.assignmentPlus ReplacementFor_src_chars+=\012(0xad3+3039-0x16b1)
<operator>.assignment ReplacementFor_str_wc=malloc(ReplacementFor_src_chars*sizeof\012(wchar_t))
<operator>.assignment ReplacementFor_newstr=malloc(ReplacementFor_src_size)
<operator>.assignment ReplacementFor_str_to_print=ReplacementFor_newstr
<operator>.assignment ReplacementFor_n_cols=\012ReplacementFor_wc_truncate(ReplacementFor_str_wc,*ReplacementFor_width)
<operator>.assignment ReplacementFor_n_used_bytes=wcstombs(ReplacementFor_newstr,ReplacementFor_str_wc\012,ReplacementFor_src_size)
<operator>.assignment ReplacementFor_n_cols=*\012ReplacementFor_width
<operator>.assignment ReplacementFor_n_used_bytes=ReplacementFor_n_cols
<operator>.assignment ReplacementFor_n_spaces=*\012ReplacementFor_width-ReplacementFor_n_cols
IDENTIFIER align switch(align)
<operator>.and flags&ReplacementFor_MBA_NO_LEFT_PAD
<operator>.and flags&\012ReplacementFor_MBA_NO_RIGHT_PAD
<operator>.notEquals ReplacementFor_dest_size!=(0x17fc+1601-0x1e3d)
strlen strlen(ReplacementFor_src)
<operator>.subtraction 0x1df8+1971-0x25aa
<operator>.addition 0x4e4+128
<operator>.logicalNot !(flags&\012ReplacementFor_MBA_UNIBYTE_ONLY)
<operator>.greaterThan MB_CUR_MAX>(0x2057+536-0x226e)
<operator>.equals ReplacementFor_src_chars==SIZE_MAX
<operator>.equals ReplacementFor_str_wc==NULL
<operator>.notEquals mbstowcs(ReplacementFor_str_wc,\012ReplacementFor_src,ReplacementFor_src_chars)!=(0x1206+2612-0x1c3a)
<operator>.logicalOr ReplacementFor_conversion||(ReplacementFor_n_cols>*\012ReplacementFor_width)
IDENTIFIER ReplacementFor_conversion if (ReplacementFor_conversion)
<operator>.equals ReplacementFor_newstr==\012NULL
IDENTIFIER ReplacementFor_MBS_ALIGN_LEFT <empty>
<operator>.assignment ReplacementFor_start_spaces=0
<operator>.assignment ReplacementFor_end_spaces=ReplacementFor_n_spaces
IDENTIFIER ReplacementFor_MBS_ALIGN_RIGHT <empty>
<operator>.assignment ReplacementFor_start_spaces=\012ReplacementFor_n_spaces
<operator>.assignment ReplacementFor_end_spaces=(0x16f6+3603-0x2509)
IDENTIFIER ReplacementFor_MBS_ALIGN_CENTER <empty>
<operator>.assignment ReplacementFor_start_spaces=\012ReplacementFor_n_spaces/(0xde8+3197-0x1a63)+ReplacementFor_n_spaces%\012(0xdeb+3676-0x1c45)
<operator>.assignment ReplacementFor_end_spaces=ReplacementFor_n_spaces/\012(0x467+6707-0x1e98)
<operator>.assignment ReplacementFor_start_spaces=(0xb47+3277-0x1814)
<operator>.assignment ReplacementFor_end_spaces=(0x1d21+826-0x205b)
<operator>.assignment *ReplacementFor_dest_end=ReplacementFor_dest+\012ReplacementFor_dest_size-(0xdff+3780-0x1cc2)
<operator>.assignment ReplacementFor_dest=\012ReplacementFor_mbs_align_pad(ReplacementFor_dest,ReplacementFor_dest_end,\012ReplacementFor_start_spaces)
<operator>.assignment ReplacementFor_space_left=ReplacementFor_dest_end-\012ReplacementFor_dest
<operator>.assignment ReplacementFor_dest=ReplacementFor_mempcpy(\012ReplacementFor_dest ReplacementFor_str_to_print ReplacementFor_MIN(\012ReplacementFor_n_used_bytes,ReplacementFor_space_left))
ReplacementFor_mbs_align_pad ReplacementFor_mbs_align_pad(ReplacementFor_dest,ReplacementFor_dest_end,\012ReplacementFor_end_spaces)
<operator>.addition ReplacementFor_n_used_bytes+((\012ReplacementFor_start_spaces+ReplacementFor_end_spaces)*(0x1d14+2503-0x26da))
<operator>.addition 0x1df8+1971
<operator>.and flags&\012ReplacementFor_MBA_UNIBYTE_ONLY
<operator>.subtraction 0x2057+536-0x226e
mbstowcs mbstowcs(NULL ReplacementFor_src (0x4ff+7794-0x2371))
<operator>.subtraction 0xad3+3039-0x16b1
malloc malloc(ReplacementFor_src_chars*sizeof\012(wchar_t))
<operator>.assignment ReplacementFor_str_wc[ReplacementFor_src_chars-(0x162d+897-0x19ad)]=L'\0'
<operator>.assignment ReplacementFor_wc_enabled=true
<operator>.assignment ReplacementFor_conversion=\012ReplacementFor_wc_ensure_printable(ReplacementFor_str_wc)
<operator>.assignment ReplacementFor_n_cols=\012wcswidth(ReplacementFor_str_wc,ReplacementFor_src_chars)
<operator>.greaterThan ReplacementFor_n_cols>*\012ReplacementFor_width
<operator>.assignment ReplacementFor_src_size=\012wcstombs(NULL ReplacementFor_str_wc (0x1360+3989-0x22f5))+(0xf28+5408-0x2447)
malloc malloc(ReplacementFor_src_size)
ReplacementFor_wc_truncate ReplacementFor_wc_truncate(ReplacementFor_str_wc,*ReplacementFor_width)
wcstombs wcstombs(ReplacementFor_newstr,ReplacementFor_str_wc\012,ReplacementFor_src_size)
<operator>.subtraction *\012ReplacementFor_width-ReplacementFor_n_cols
<operator>.subtraction 0x17fc+1601-0x1e3d
<operator>.multiplication (\012ReplacementFor_start_spaces+ReplacementFor_end_spaces)*(0x1d14+2503-0x26da)
<operator>.addition 0x2057+536
<operator>.subtraction 0x4ff+7794-0x2371
<operator>.and flags&\012ReplacementFor_MBA_UNIBYTE_FALLBACK
<operator>.addition 0xad3+3039
<operator>.multiplication ReplacementFor_src_chars*sizeof\012(wchar_t)
<operator>.and flags&\012ReplacementFor_MBA_UNIBYTE_FALLBACK
mbstowcs mbstowcs(ReplacementFor_str_wc,\012ReplacementFor_src,ReplacementFor_src_chars)
<operator>.subtraction 0x1206+2612-0x1c3a
<operator>.and flags&ReplacementFor_MBA_UNIBYTE_FALLBACK
<operator>.subtraction 0x16f6+3603-0x2509
<operator>.addition ReplacementFor_n_spaces/(0xde8+3197-0x1a63)+ReplacementFor_n_spaces%\012(0xdeb+3676-0x1c45)
<operator>.division ReplacementFor_n_spaces/\012(0x467+6707-0x1e98)
<operator>.subtraction 0xb47+3277-0x1814
<operator>.subtraction 0x1d21+826-0x205b
<operator>.addition 0x17fc+1601
<operator>.subtraction ReplacementFor_dest+\012ReplacementFor_dest_size-(0xdff+3780-0x1cc2)
ReplacementFor_mbs_align_pad ReplacementFor_mbs_align_pad(ReplacementFor_dest,ReplacementFor_dest_end,\012ReplacementFor_start_spaces)
<operator>.subtraction ReplacementFor_dest_end-\012ReplacementFor_dest
ReplacementFor_mempcpy ReplacementFor_mempcpy(\012ReplacementFor_dest ReplacementFor_str_to_print ReplacementFor_MIN(\012ReplacementFor_n_used_bytes,ReplacementFor_space_left))
<operator>.addition ReplacementFor_start_spaces+ReplacementFor_end_spaces
<operator>.subtraction 0x1d14+2503-0x26da
<operator>.addition 0x4ff+7794
<operator>.sizeOf sizeof\012(wchar_t)
<operator>.addition 0x1206+2612
ReplacementFor_wc_ensure_printable ReplacementFor_wc_ensure_printable(ReplacementFor_str_wc)
wcswidth wcswidth(ReplacementFor_str_wc,ReplacementFor_src_chars)
<operator>.addition wcstombs(NULL ReplacementFor_str_wc (0x1360+3989-0x22f5))+(0xf28+5408-0x2447)
<operator>.addition 0x16f6+3603
<operator>.division ReplacementFor_n_spaces/(0xde8+3197-0x1a63)
<operator>.modulo ReplacementFor_n_spaces%\012(0xdeb+3676-0x1c45)
<operator>.subtraction 0x467+6707-0x1e98
<operator>.addition 0xb47+3277
<operator>.addition 0x1d21+826
<operator>.addition ReplacementFor_dest+\012ReplacementFor_dest_size
<operator>.subtraction 0xdff+3780-0x1cc2
ReplacementFor_MIN ReplacementFor_MIN(\012ReplacementFor_n_used_bytes,ReplacementFor_space_left)
<operator>.addition 0x1d14+2503
<operator>.subtraction ReplacementFor_src_chars-(0x162d+897-0x19ad)
wcstombs wcstombs(NULL ReplacementFor_str_wc (0x1360+3989-0x22f5))
<operator>.subtraction 0xf28+5408-0x2447
<operator>.subtraction 0xde8+3197-0x1a63
<operator>.subtraction 0xdeb+3676-0x1c45
<operator>.addition 0x467+6707
<operator>.addition 0xdff+3780
<operator>.subtraction 0x162d+897-0x19ad
<operator>.subtraction 0x1360+3989-0x22f5
<operator>.addition 0xf28+5408
<operator>.addition 0xde8+3197
<operator>.addition 0xdeb+3676
<operator>.addition 0x162d+897
<operator>.addition 0x1360+3989
<operator>.indirection *ReplacementFor_width
<operator>.indirection *ReplacementFor_width
<operator>.indirection *\012ReplacementFor_width
<operator>.indirection *\012ReplacementFor_width
<operator>.indirection *\012ReplacementFor_width
<operator>.indirection *ReplacementFor_width
<operator>.indirection *\012ReplacementFor_width
<operator>.indirectIndexAccess ReplacementFor_str_wc[ReplacementFor_src_chars-(0x162d+897-0x19ad)]
>>>PDG&151 0->2 0->3 0->4 0->5 0->6 0->7 0->8 0->9 0->10 0->11 0->12 0->14 0->16 0->17 0->18 0->19 0->20 0->21 0->24 0->25 0->26 0->27 0->28 0->29 0->30 0->31 0->33 0->36 0->40 0->42 0->43 0->44 0->45 0->46 0->47 0->48 0->50 0->51 0->52 0->54 0->55 0->56 0->57 0->58 0->59 0->60 0->61 0->63 0->72 0->73 0->74 0->75 0->76 0->77 0->78 0->80 0->81 0->84 0->86 0->87 0->88 0->89 0->90 0->91 0->92 0->93 0->94 0->95 0->96 0->97 0->98 0->99 0->100 0->101 0->103 0->104 0->105 0->106 0->107 0->108 0->109 0->110 0->111 0->112 0->113 0->115 0->116 0->117 0->119 0->120 0->121 0->122 0->123 0->124 0->125 0->126 0->127 0->128 0->129 0->130 0->131 0->132 0->133 0->134 0->135 0->136 0->137 0->138 0->139 0->140 0->141 0->142 2->46 3->1 3->107 3->108 3->125 4->1 4->45 5->1 6->1 7->75 8->1 8->1 8->1 8->28 9->1 9->1 9->30 10->1 10->21 11->1 11->1 11->20 11->87 11->130 12->1 12->1 12->1 12->110 13->1 13->1 13->14 13->25 13->84 14->1 14->1 14->1 14->27 14->73 14->127 15->1 15->1 15->1 15->59 15->61 15->120 16->1 16->1 16->54 17->1 17->1 17->1 17->24 18->1 18->1 18->1 20->1 21->1 22->1 23->1 23->1 23->1 23->24 23->32 23->51 23->54 23->77 23->84 23->93 23->113 23->147 24->1 24->1 24->1 24->18 24->25 24->26 24->27 24->35 24->43 24->44 24->45 24->56 24->58 24->59 24->61 24->62 24->64 24->65 24->73 24->85 24->86 24->90 24->91 24->101 24->102 24->103 24->106 24->111 24->112 24->118 24->119 24->120 24->121 24->122 24->128 24->130 24->131 24->132 24->133 24->134 24->137 24->138 24->139 24->140 24->142 24->143 24->144 24->145 25->1 25->26 25->26 25->39 25->39 25->40 25->89 25->146 26->1 26->1 26->18 26->41 26->89 26->89 26->89 26->149 27->1 27->1 27->1 27->28 28->22 29->1 30->1 30->1 30->13 30->13 30->86 31->1 31->15 31->15 32->1 32->1 32->51 33->1 33->1 33->96 34->1 34->1 34->52 35->1 35->1 35->56 36->1 36->1 36->110 37->1 37->1 37->25 38->1 38->1 38->27 38->73 38->127 39->1 39->26 39->40 40->1 40->27 40->73 40->127 41->1 41->1 41->59 41->61 41->120 43->1 43->1 43->44 43->66 43->104 43->123 44->1 44->1 44->1 44->67 44->105 44->124 45->1 45->1 45->1 45->68 45->69 45->70 45->71 45->72 45->107 45->107 45->108 45->109 45->110 45->125 45->125 45->126 45->127 45->135 46->9 46->12 46->29 46->77 47->1 47->30 47->30 49->1 49->23 49->50 49->76 49->92 50->1 50->1 50->23 50->23 51->1 51->1 51->1 51->33 51->33 51->34 51->52 51->78 51->79 51->94 51->95 51->96 51->114 52->1 52->1 52->20 52->24 52->53 52->54 52->56 52->84 52->97 52->98 52->98 52->99 52->115 52->130 52->147 53->1 53->1 53->1 53->80 53->81 53->82 53->83 53->116 53->117 53->129 53->136 53->141 53->150 54->1 54->1 54->24 54->24 56->1 56->1 56->18 56->21 56->25 56->26 56->27 56->36 56->36 56->37 56->38 56->43 56->44 56->45 56->58 56->59 56->61 56->62 56->64 56->65 56->73 56->87 56->88 56->88 56->90 56->91 56->100 56->101 56->102 56->103 56->106 56->111 56->112 56->119 56->120 56->121 56->122 56->128 56->132 56->133 56->134 56->139 56->140 56->143 56->144 56->145 56->148 58->1 58->91 58->108 58->111 59->1 59->1 59->72 59->91 59->111 61->1 61->1 61->91 61->108 61->111 62->1 62->1 62->72 62->91 62->111 64->1 64->1 64->91 64->108 64->111 65->1 65->1 65->72 65->91 65->111 66->1 66->1 66->91 66->108 66->111 67->1 67->1 67->72 67->91 67->111 68->1 68->1 68->108 69->1 69->1 69->109 70->1 70->1 70->127 71->1 71->1 71->72 72->1 72->1 72->1 72->91 72->111 73->1 73->1 75->1 75->43 75->49 75->49 75->94 75->97 75->100 76->1 76->50 76->50 77->1 77->1 77->1 77->32 77->32 77->32 77->52 77->98 78->1 78->33 78->33 79->1 79->34 80->1 80->1 80->20 80->87 80->88 80->116 80->117 80->130 81->1 81->1 81->24 82->1 82->1 82->1 82->54 83->1 83->1 83->1 83->25 83->84 84->1 84->1 84->25 84->25 84->26 84->39 84->54 84->54 84->87 85->1 85->1 85->86 86->1 86->35 86->88 87->25 87->37 87->37 87->88 88->1 88->20 88->21 88->38 88->38 88->38 89->1 89->18 89->41 89->41 90->1 90->45 90->45 91->1 91->1 91->27 91->27 91->73 91->73 93->1 93->77 93->77 94->1 94->1 94->1 94->18 94->25 94->26 94->27 94->43 94->43 94->44 94->45 94->58 94->59 94->61 94->62 94->64 94->65 94->73 94->90 94->91 94->101 94->102 94->103 94->106 94->111 94->112 94->119 94->120 94->121 94->122 94->128 94->132 94->133 94->134 94->139 94->140 94->143 94->144 94->145 96->1 96->79 96->98 97->1 97->1 97->1 97->18 97->25 97->26 97->27 97->43 97->43 97->44 97->45 97->58 97->59 97->61 97->62 97->64 97->65 97->73 97->90 97->91 97->101 97->102 97->103 97->106 97->111 97->112 97->119 97->120 97->121 97->122 97->128 97->132 97->133 97->134 97->139 97->140 97->143 97->144 97->145 98->1 98->1 98->20 98->53 98->53 98->53 98->87 98->116 98->129 98->130 99->1 99->53 99->53 100->1 100->1 100->1 100->18 100->25 100->26 100->27 100->43 100->43 100->44 100->45 100->58 100->59 100->61 100->62 100->64 100->65 100->73 100->90 100->91 100->101 100->102 100->103 100->106 100->111 100->112 100->119 100->120 100->121 100->122 100->128 100->132 100->133 100->134 100->139 100->140 100->143 100->144 100->145 101->1 101->62 101->62 102->1 102->1 103->1 103->1 103->65 103->65 104->1 104->66 104->66 105->1 105->67 105->67 107->1 107->1 107->68 107->68 108->69 108->69 108->69 108->91 108->109 108->111 109->70 109->70 109->72 109->110 110->1 110->1 110->71 110->71 110->71 111->1 111->1 112->1 112->91 112->91 114->1 116->82 116->117 117->1 117->20 117->83 117->83 117->87 117->130 118->1 118->1 120->1 120->64 120->64 120->102 120->102 120->121 121->1 121->64 121->64 121->102 121->102 121->103 122->1 122->103 122->103 125->1 126->1 126->107 126->107 127->1 127->27 127->73 127->110 127->110 129->1 129->117 130->1 130->20 130->56 130->85 130->85 130->85 130->87 130->118 130->118 130->118 131->1 131->85 131->85 131->118 131->118 132->1 132->120 132->120 133->1 133->121 133->121 136->1 136->129 136->129 137->1 137->130 137->130
>>>Token size_t ReplacementFor_mbsalign ( char const * ReplacementFor_src , char * ReplacementFor_dest , size_t ReplacementFor_dest_size , size_t * ReplacementFor_width , ReplacementFor_mbs_align_t align , int flags ) { size_t ReplacementFor_ret = SIZE_MAX ; size_t ReplacementFor_src_size = strlen ( ReplacementFor_src ) + 1 ; char * ReplacementFor_newstr = NULL ; wchar_t * ReplacementFor_str_wc = NULL ; char const * ReplacementFor_str_to_print = ReplacementFor_src ; size_t ReplacementFor_n_cols = ReplacementFor_src_size - ( 0x1df8 + 1971 - 0x25aa ) ; size_t ReplacementFor_n_used_bytes = ReplacementFor_n_cols ; size_t ReplacementFor_n_spaces = ( 0x4e4 + 128 - 0x564 ) ; bool ReplacementFor_conversion = false ; bool ReplacementFor_wc_enabled = false ; if ( ! ( flags & ReplacementFor_MBA_UNIBYTE_ONLY ) && MB_CUR_MAX > ( 0x2057 + 536 - 0x226e ) ) { size_t ReplacementFor_src_chars = mbstowcs ( NULL , ReplacementFor_src , ( 0x4ff + 7794 - 0x2371 ) ) ; if ( ReplacementFor_src_chars == SIZE_MAX ) { if ( flags & ReplacementFor_MBA_UNIBYTE_FALLBACK ) goto ReplacementFor_mbsalign_unibyte ; else goto ReplacementFor_mbsalign_cleanup ; } ReplacementFor_src_chars += ( 0xad3 + 3039 - 0x16b1 ) ; ReplacementFor_str_wc = malloc ( ReplacementFor_src_chars * sizeof ( wchar_t ) ) ; if ( ReplacementFor_str_wc == NULL ) { if ( flags & ReplacementFor_MBA_UNIBYTE_FALLBACK ) goto ReplacementFor_mbsalign_unibyte ; else goto ReplacementFor_mbsalign_cleanup ; } if ( mbstowcs ( ReplacementFor_str_wc , ReplacementFor_src , ReplacementFor_src_chars ) != ( 0x1206 + 2612 - 0x1c3a ) ) { ReplacementFor_str_wc [ ReplacementFor_src_chars - ( 0x162d + 897 - 0x19ad ) ] = L' \0 ' ; ReplacementFor_wc_enabled = true ; ReplacementFor_conversion = ReplacementFor_wc_ensure_printable ( ReplacementFor_str_wc ) ; ReplacementFor_n_cols = wcswidth ( ReplacementFor_str_wc , ReplacementFor_src_chars ) ; } } if ( ReplacementFor_wc_enabled && ( ReplacementFor_conversion || ( ReplacementFor_n_cols > * ReplacementFor_width ) ) ) { if ( ReplacementFor_conversion ) { ReplacementFor_src_size = wcstombs ( NULL , ReplacementFor_str_wc , ( 0x1360 + 3989 - 0x22f5 ) ) + ( 0xf28 + 5408 - 0x2447 ) ; } ReplacementFor_newstr = malloc ( ReplacementFor_src_size ) ; if ( ReplacementFor_newstr == NULL ) { if ( flags & ReplacementFor_MBA_UNIBYTE_FALLBACK ) goto ReplacementFor_mbsalign_unibyte ; else goto ReplacementFor_mbsalign_cleanup ; } ReplacementFor_str_to_print = ReplacementFor_newstr ; ReplacementFor_n_cols = ReplacementFor_wc_truncate ( ReplacementFor_str_wc , * ReplacementFor_width ) ; ReplacementFor_n_used_bytes = wcstombs ( ReplacementFor_newstr , ReplacementFor_str_wc , ReplacementFor_src_size ) ; } ReplacementFor_mbsalign_unibyte : if ( ReplacementFor_n_cols > * ReplacementFor_width ) { ReplacementFor_n_cols = * ReplacementFor_width ; ReplacementFor_n_used_bytes = ReplacementFor_n_cols ; } if ( * ReplacementFor_width > ReplacementFor_n_cols ) ReplacementFor_n_spaces = * ReplacementFor_width - ReplacementFor_n_cols ; * ReplacementFor_width = ReplacementFor_n_cols ; { size_t ReplacementFor_start_spaces , ReplacementFor_end_spaces ; switch ( align ) { case ReplacementFor_MBS_ALIGN_LEFT : ReplacementFor_start_spaces = 0 ; ReplacementFor_end_spaces = ReplacementFor_n_spaces ; break ; case ReplacementFor_MBS_ALIGN_RIGHT : ReplacementFor_start_spaces = ReplacementFor_n_spaces ; ReplacementFor_end_spaces = ( 0x16f6 + 3603 - 0x2509 ) ; break ; case ReplacementFor_MBS_ALIGN_CENTER : default : ReplacementFor_start_spaces = ReplacementFor_n_spaces / ( 0xde8 + 3197 - 0x1a63 ) + ReplacementFor_n_spaces % ( 0xdeb + 3676 - 0x1c45 ) ; ReplacementFor_end_spaces = ReplacementFor_n_spaces / ( 0x467 + 6707 - 0x1e98 ) ; break ; } if ( flags & ReplacementFor_MBA_NO_LEFT_PAD ) ReplacementFor_start_spaces = ( 0xb47 + 3277 - 0x1814 ) ; if ( flags & ReplacementFor_MBA_NO_RIGHT_PAD ) ReplacementFor_end_spaces = ( 0x1d21 + 826 - 0x205b ) ; if ( ReplacementFor_dest_size != ( 0x17fc + 1601 - 0x1e3d ) ) { size_t ReplacementFor_space_left ; char * ReplacementFor_dest_end = ReplacementFor_dest + ReplacementFor_dest_size - ( 0xdff + 3780 - 0x1cc2 ) ; ReplacementFor_dest = ReplacementFor_mbs_align_pad ( ReplacementFor_dest , ReplacementFor_dest_end , ReplacementFor_start_spaces ) ; ReplacementFor_space_left = ReplacementFor_dest_end - ReplacementFor_dest ; ReplacementFor_dest = ReplacementFor_mempcpy ( ReplacementFor_dest , ReplacementFor_str_to_print , ReplacementFor_MIN ( ReplacementFor_n_used_bytes , ReplacementFor_space_left ) ) ; ReplacementFor_mbs_align_pad ( ReplacementFor_dest , ReplacementFor_dest_end , ReplacementFor_end_spaces ) ; } ReplacementFor_ret = ReplacementFor_n_used_bytes + ( ( ReplacementFor_start_spaces + ReplacementFor_end_spaces ) * ( 0x1d14 + 2503 - 0x26da ) ) ; } ReplacementFor_mbsalign_cleanup : free ( ReplacementFor_str_wc ) ; free ( ReplacementFor_newstr ) ; return ReplacementFor_ret ; }
>>>Func
METHOD ReplacementFor_cmp_ctime
METHOD_RETURN int
PARAM struct ReplacementFor_fileinfo const*\012ReplacementFor_a
PARAM struct ReplacementFor_fileinfo const*ReplacementFor_b
PARAM int(*\012ReplacementFor_cmp)(char const*,char const*)
<operator>.assignment ReplacementFor_diff=\012ReplacementFor_timespec_cmp(ReplacementFor_get_stat_ctime(&ReplacementFor_b->\012stat) ReplacementFor_get_stat_ctime(&ReplacementFor_a->stat))
RETURN return \012ReplacementFor_diff?ReplacementFor_diff:ReplacementFor_cmp(ReplacementFor_a->\012name,ReplacementFor_b->name); return \012ReplacementFor_diff?ReplacementFor_diff:ReplacementFor_cmp(ReplacementFor_a->\012name,ReplacementFor_b->name);
<operator>.conditional ReplacementFor_diff?ReplacementFor_diff:ReplacementFor_cmp(ReplacementFor_a->\012name,ReplacementFor_b->name)
ReplacementFor_timespec_cmp ReplacementFor_timespec_cmp(ReplacementFor_get_stat_ctime(&ReplacementFor_b->\012stat) ReplacementFor_get_stat_ctime(&ReplacementFor_a->stat))
ReplacementFor_get_stat_ctime ReplacementFor_get_stat_ctime(&ReplacementFor_b->\012stat)
ReplacementFor_get_stat_ctime ReplacementFor_get_stat_ctime(&ReplacementFor_a->stat)
ReplacementFor_cmp ReplacementFor_cmp(ReplacementFor_a->\012name,ReplacementFor_b->name)
>>>PDG&12 0->2 0->3 0->4 0->7 2->1 3->1 4->1 5->1 5->1 5->7 6->1 7->1 7->1 7->1 7->6 8->1 8->1 8->5 8->5 9->1 9->8 10->1 10->8 11->1 11->1 11->7 11->7
>>>Token static int ReplacementFor_cmp_ctime ( struct ReplacementFor_fileinfo const * ReplacementFor_a , struct ReplacementFor_fileinfo const * ReplacementFor_b , int ( * ReplacementFor_cmp ) ( char const * , char const * ) ) { int ReplacementFor_diff = ReplacementFor_timespec_cmp ( ReplacementFor_get_stat_ctime ( & ReplacementFor_b -> stat ) , ReplacementFor_get_stat_ctime ( & ReplacementFor_a -> stat ) ) ; return ReplacementFor_diff ? ReplacementFor_diff : ReplacementFor_cmp ( ReplacementFor_a -> name , ReplacementFor_b -> name ) ; }
>>>Func
METHOD main
METHOD_RETURN int
freopen freopen("\x41\x2e\x69\x6e","\x72",stdin)
freopen freopen(\012"\x6f\x75\x74\x70\x75\x74\x2e\x74\x78\x74","\x77",stdout)
scanf scanf("\x25\x64\x20",&\012T)
<operator>.lessThan ReplacementFor_caseCtr<T
<operator>.preIncrement ++\012ReplacementFor_caseCtr
ReplacementFor_solution ReplacementFor_solution()
<operator>.assignment ReplacementFor_caseCtr=(0x770+4978-0x1ae2)
<operator>.subtraction 0x770+4978-0x1ae2
<operator>.addition 0x770+4978
>>>PDG&11 0->2 0->3 0->4 0->5 0->6 0->7 0->9 0->10 2->1 2->1 3->1 3->1 4->1 4->5 5->1 5->1 5->1 5->5 5->6 5->6 5->7 6->1 6->5 7->1 8->1 8->1 8->5 9->1 9->8 9->8
>>>Token int main ( ) { int T ; freopen ( " \x41 \x2e \x69 \x6e " , " \x72 " , stdin ) ; freopen ( " \x6f \x75 \x74 \x70 \x75 \x74 \x2e \x74 \x78 \x74 " , " \x77 " , stdout ) ; scanf ( " \x25 \x64 \x20 " , & T ) ; for ( ReplacementFor_caseCtr = ( 0x770 + 4978 - 0x1ae2 ) ; ReplacementFor_caseCtr < T ; ++ ReplacementFor_caseCtr ) ReplacementFor_solution ( ) ; }
>>>Func
METHOD main
METHOD_RETURN ANY
<operator>.assignment ReplacementFor_fp=\012fopen("\x69\x6e\x70\x75\x74","\x72")
fscanf fscanf(ReplacementFor_fp,"\x25\x64",&T)
<operator>.lessThan i<T
<operator>.postIncrement i++
fopen fopen("\x69\x6e\x70\x75\x74","\x72")
<operator>.assignment i=(0x1758+852-0x1aac)
<operator>.assignment ReplacementFor_A\012[(0x5e7+7176-0x21ec)]="\x30"
<operator>.assignment ReplacementFor_B[(0x2463+53-0x2496)]="\x30"
<operator>.assignment ReplacementFor_X[(0x8e7+1138-0xd4f)]="\x30"
<operator>.assignment ReplacementFor_Y[\012(0x16b6+3189-0x2321)]="\x30"
<operator>.assignment ReplacementFor_flag1=(0xde0+86-0xe36)
<operator>.assignment ReplacementFor_flag2=(0x5f9+1194-0xaa3)
fscanf fscanf(ReplacementFor_fp,"\x25\x64",&\012ReplacementFor_C)
fscanf fscanf(ReplacementFor_fp,"\x25\x64",&ReplacementFor_D)
fscanf fscanf(\012ReplacementFor_fp,"\x25\x64",&ReplacementFor_N)
fscanf fscanf(ReplacementFor_fp,\012"\x25\x73",ReplacementFor_Y)
<operator>.assignment M=ReplacementFor_N
printf printf(\012"\x43\x61\x73\x65\x20\x23\x25\x64\x3a\x20\x5b" i+(0x108c+133-0x1110))
<operator>.lessThan ReplacementFor_j<\012ReplacementFor_C
<operator>.postIncrement ReplacementFor_j++
fscanf fscanf(ReplacementFor_fp,"\x25\x73",\012ReplacementFor_A)
<operator>.lessThan ReplacementFor_k<ReplacementFor_D
<operator>.postIncrement ReplacementFor_k++
fscanf fscanf(ReplacementFor_fp,"\x25\x73",ReplacementFor_B)
<operator>.expressionList m<M l<ReplacementFor_N
<operator>.expressionList l++ m++
<operator>.lessThan l<ReplacementFor_N-(0x2a4+2531-0xc86)
<operator>.postIncrement l++
printf printf(\012"\x25\x63\x2c\x20",ReplacementFor_X[l])
<operator>.notEquals ReplacementFor_N!=(0xe4b+4818-0x211d)
<operator>.subtraction 0x1758+852-0x1aac
<operator>.subtraction 0xde0+86-0xe36
<operator>.subtraction 0x5f9+1194-0xaa3
<operator>.assignment ReplacementFor_j=(0x47c+3334-0x1182)
<operator>.assignment ReplacementFor_k=(0x1455+113-0x14c6)
<operator>.expressionList l=(0xdfa+579-0x103d) m=\012(0x5d2+4464-0x1742)
<operator>.assignment ReplacementFor_X[l]=\012ReplacementFor_Y[m]
<operator>.addition i+(0x108c+133-0x1110)
<operator>.assignment l=\012(0x8fa+3019-0x14c5)
printf printf("\x25\x63\x5d" "\n" ReplacementFor_X[ReplacementFor_N-(0x1e1+1736-0x8a8)\012])
<operator>.addition 0x1758+852
<operator>.addition 0xde0+86
<operator>.addition 0x5f9+1194
<operator>.lessThan m<M
<operator>.lessThan l<ReplacementFor_N
<operator>.postIncrement l++
<operator>.postIncrement m++
<operator>.equals ReplacementFor_X[l]==ReplacementFor_B[(0xa73+7177-0x267c)\012]
<operator>.equals ReplacementFor_X[l]==\012ReplacementFor_B[(0x19f2+401-0x1b82)]
<operator>.greaterThan l>(0x1b86+2509-0x2553)
<operator>.subtraction 0x108c+133-0x1110
<operator>.subtraction ReplacementFor_N-(0x2a4+2531-0xc86)
<operator>.subtraction 0xe4b+4818-0x211d
printf printf("\x5d" "\n")
<operator>.subtraction 0x47c+3334-0x1182
<operator>.subtraction 0x1455+113-0x14c6
<operator>.assignment l=(0xdfa+579-0x103d)
<operator>.assignment m=\012(0x5d2+4464-0x1742)
<operator>.assignment ReplacementFor_flag1=(0xbc2+195-0xc84)
<operator>.assignment ReplacementFor_flag2=(0x84f+2570-0x1258)
<operator>.addition 0x108c+133
<operator>.subtraction 0x8fa+3019-0x14c5
<operator>.subtraction 0x2a4+2531-0xc86
<operator>.addition 0xe4b+4818
<operator>.addition 0x47c+3334
<operator>.addition 0x1455+113
<operator>.subtraction 0xdfa+579-0x103d
<operator>.subtraction 0x5d2+4464-0x1742
<operator>.subtraction 0x1b86+2509-0x2553
<operator>.logicalOr ((ReplacementFor_X[l-(0xeab+3088-0x1aba)]==\012ReplacementFor_A[(0x45c+4565-0x1631)])&&(ReplacementFor_X[l]==ReplacementFor_A[\012(0x998+1117-0xdf4)]))||((ReplacementFor_X[l-(0x2a5+4435-0x13f7)]==\012ReplacementFor_A[(0x66a+231-0x750)])&&(ReplacementFor_X[l]==ReplacementFor_A[\012(0x1801+2536-0x21e9)]))
<operator>.logicalOr ((ReplacementFor_X[l]==ReplacementFor_B[(0x1cb9+2624-0x26f9)])&&(\012ReplacementFor_flag2==(0xec8+3531-0x1c92)))||((ReplacementFor_X[l]==\012ReplacementFor_B[(0x20ac+173-0x2158)])&&(ReplacementFor_flag1==\012(0x1110+4580-0x22f3)))
<operator>.addition 0x8fa+3019
<operator>.addition 0x2a4+2531
<operator>.subtraction ReplacementFor_N-(0x1e1+1736-0x8a8)
<operator>.addition 0xdfa+579
<operator>.addition 0x5d2+4464
<operator>.subtraction 0xa73+7177-0x267c
<operator>.subtraction 0xbc2+195-0xc84
<operator>.subtraction 0x19f2+401-0x1b82
<operator>.subtraction 0x84f+2570-0x1258
<operator>.addition 0x1b86+2509
<operator>.assignment ReplacementFor_X[l-(0x162a+2775-0x2100)]=\012ReplacementFor_A[(0x14af+1642-0x1b17)]
<operator>.assignment l=l-(0xa87+6202-0x22c0)
<operator>.assignment ReplacementFor_N=\012ReplacementFor_N-(0x12f5+1657-0x196d)
<operator>.assignment ReplacementFor_flag1=(0x276+9137-0x2627)
<operator>.assignment ReplacementFor_flag2=(0xfdf+4133-0x2004)
<operator>.assignment ReplacementFor_N=ReplacementFor_N-l-(0x1180+373-0x12f4)
<operator>.assignment l=-(0x3dd+2772-0xeb0)
<operator>.assignment ReplacementFor_flag1=(0x93f+7415-0x2636)
<operator>.assignment ReplacementFor_flag2=(0x33a+7330-0x1fdc)
<operator>.subtraction 0x1e1+1736-0x8a8
<operator>.addition 0xa73+7177
<operator>.addition 0xbc2+195
<operator>.addition 0x19f2+401
<operator>.addition 0x84f+2570
<operator>.logicalAnd (ReplacementFor_X[l-(0xeab+3088-0x1aba)]==\012ReplacementFor_A[(0x45c+4565-0x1631)])&&(ReplacementFor_X[l]==ReplacementFor_A[\012(0x998+1117-0xdf4)])
<operator>.logicalAnd (ReplacementFor_X[l-(0x2a5+4435-0x13f7)]==\012ReplacementFor_A[(0x66a+231-0x750)])&&(ReplacementFor_X[l]==ReplacementFor_A[\012(0x1801+2536-0x21e9)])
<operator>.lessEqualsThan t<=l
<operator>.postIncrement t++
<operator>.logicalAnd (ReplacementFor_X[l]==ReplacementFor_B[(0x1cb9+2624-0x26f9)])&&(\012ReplacementFor_flag2==(0xec8+3531-0x1c92))
<operator>.logicalAnd (ReplacementFor_X[l]==\012ReplacementFor_B[(0x20ac+173-0x2158)])&&(ReplacementFor_flag1==\012(0x1110+4580-0x22f3))
<operator>.addition 0x1e1+1736
<operator>.equals ReplacementFor_X[l-(0xeab+3088-0x1aba)]==\012ReplacementFor_A[(0x45c+4565-0x1631)]
<operator>.equals ReplacementFor_X[l]==ReplacementFor_A[\012(0x998+1117-0xdf4)]
<operator>.equals ReplacementFor_X[l-(0x2a5+4435-0x13f7)]==\012ReplacementFor_A[(0x66a+231-0x750)]
<operator>.equals ReplacementFor_X[l]==ReplacementFor_A[\012(0x1801+2536-0x21e9)]
<operator>.subtraction l-(0xa87+6202-0x22c0)
<operator>.subtraction ReplacementFor_N-(0x12f5+1657-0x196d)
<operator>.subtraction 0x276+9137-0x2627
<operator>.subtraction 0xfdf+4133-0x2004
<operator>.assignment t=(0xdc9+4509-0x1f66)
<operator>.equals ReplacementFor_X[l]==ReplacementFor_B[(0x1cb9+2624-0x26f9)]
<operator>.equals ReplacementFor_flag2==(0xec8+3531-0x1c92)
<operator>.equals ReplacementFor_X[l]==\012ReplacementFor_B[(0x20ac+173-0x2158)]
<operator>.equals ReplacementFor_flag1==\012(0x1110+4580-0x22f3)
<operator>.subtraction ReplacementFor_N-l-(0x1180+373-0x12f4)
<operator>.minus -(0x3dd+2772-0xeb0)
<operator>.subtraction 0x93f+7415-0x2636
<operator>.subtraction 0x33a+7330-0x1fdc
<operator>.subtraction l-(0x162a+2775-0x2100)
<operator>.subtraction 0x14af+1642-0x1b17
<operator>.subtraction 0xa87+6202-0x22c0
<operator>.subtraction 0x12f5+1657-0x196d
<operator>.addition 0x276+9137
<operator>.addition 0xfdf+4133
<operator>.equals ReplacementFor_X[t]==ReplacementFor_B[(0x1a96+3080-0x269e)]
<operator>.equals ReplacementFor_X[t]==\012ReplacementFor_B[(0x107f+841-0x13c7)]
<operator>.subtraction 0xec8+3531-0x1c92
<operator>.subtraction 0x1110+4580-0x22f3
<operator>.subtraction ReplacementFor_N-l
<operator>.subtraction 0x1180+373-0x12f4
<operator>.subtraction 0x3dd+2772-0xeb0
<operator>.addition 0x93f+7415
<operator>.addition 0x33a+7330
<operator>.subtraction l-(0xeab+3088-0x1aba)
<operator>.subtraction 0x45c+4565-0x1631
<operator>.subtraction 0x998+1117-0xdf4
<operator>.subtraction l-(0x2a5+4435-0x13f7)
<operator>.subtraction 0x66a+231-0x750
<operator>.subtraction 0x1801+2536-0x21e9
<operator>.subtraction 0x162a+2775-0x2100
<operator>.addition 0x14af+1642
<operator>.addition 0xa87+6202
<operator>.addition 0x12f5+1657
<operator>.subtraction 0xdc9+4509-0x1f66
<operator>.assignment ReplacementFor_flag1=(0x1706+1620-0x1d59)
<operator>.assignment ReplacementFor_flag2=(0x34a+8894-0x2607)
<operator>.subtraction 0x1cb9+2624-0x26f9
<operator>.addition 0xec8+3531
<operator>.subtraction 0x20ac+173-0x2158
<operator>.addition 0x1110+4580
<operator>.addition 0x1180+373
<operator>.addition 0x3dd+2772
<operator>.subtraction 0xeab+3088-0x1aba
<operator>.addition 0x45c+4565
<operator>.addition 0x998+1117
<operator>.subtraction 0x2a5+4435-0x13f7
<operator>.addition 0x66a+231
<operator>.addition 0x1801+2536
<operator>.addition 0x162a+2775
<operator>.addition 0xdc9+4509
<operator>.addition 0x1cb9+2624
<operator>.addition 0x20ac+173
<operator>.addition 0xeab+3088
<operator>.addition 0x2a5+4435
<operator>.subtraction 0x1a96+3080-0x269e
<operator>.subtraction 0x1706+1620-0x1d59
<operator>.subtraction 0x107f+841-0x13c7
<operator>.subtraction 0x34a+8894-0x2607
<operator>.addition 0x1a96+3080
<operator>.addition 0x1706+1620
<operator>.addition 0x107f+841
<operator>.addition 0x34a+8894
<operator>.addressOf &\012ReplacementFor_C
<operator>.addressOf &ReplacementFor_D
<operator>.addressOf &ReplacementFor_N
<operator>.indirectIndexAccess ReplacementFor_X[l]
<operator>.indirectIndexAccess ReplacementFor_X[l]
<operator>.indirectIndexAccess ReplacementFor_Y[m]
<operator>.indirectIndexAccess ReplacementFor_X[ReplacementFor_N-(0x1e1+1736-0x8a8)\012]
<operator>.indirectIndexAccess ReplacementFor_X[l]
<operator>.indirectIndexAccess ReplacementFor_B[(0xa73+7177-0x267c)\012]
<operator>.indirectIndexAccess ReplacementFor_X[l]
<operator>.indirectIndexAccess ReplacementFor_B[(0x19f2+401-0x1b82)]
<operator>.indirectIndexAccess ReplacementFor_X[l-(0x162a+2775-0x2100)]
<operator>.indirectIndexAccess ReplacementFor_A[(0x14af+1642-0x1b17)]
<operator>.indirectIndexAccess ReplacementFor_X[l-(0xeab+3088-0x1aba)]
<operator>.indirectIndexAccess ReplacementFor_A[(0x45c+4565-0x1631)]
<operator>.indirectIndexAccess ReplacementFor_X[l]
<operator>.indirectIndexAccess ReplacementFor_A[\012(0x998+1117-0xdf4)]
<operator>.indirectIndexAccess ReplacementFor_X[l-(0x2a5+4435-0x13f7)]
<operator>.indirectIndexAccess ReplacementFor_A[(0x66a+231-0x750)]
<operator>.indirectIndexAccess ReplacementFor_X[l]
<operator>.indirectIndexAccess ReplacementFor_A[\012(0x1801+2536-0x21e9)]
<operator>.indirectIndexAccess ReplacementFor_X[l]
<operator>.indirectIndexAccess ReplacementFor_B[(0x1cb9+2624-0x26f9)]
<operator>.indirectIndexAccess ReplacementFor_X[l]
<operator>.indirectIndexAccess ReplacementFor_B[(0x20ac+173-0x2158)]
<operator>.indirectIndexAccess ReplacementFor_X[t]
<operator>.indirectIndexAccess ReplacementFor_B[(0x1a96+3080-0x269e)]
<operator>.indirectIndexAccess ReplacementFor_X[t]
<operator>.indirectIndexAccess ReplacementFor_B[(0x107f+841-0x13c7)]
>>>PDG&204 0->3 0->4 0->5 0->6 0->8 0->9 0->10 0->11 0->14 0->15 0->16 0->17 0->18 0->19 0->20 0->21 0->22 0->23 0->24 0->25 0->28 0->29 0->30 0->31 0->32 0->33 0->34 0->39 0->41 0->42 0->43 0->44 0->45 0->46 0->47 0->48 0->51 0->52 0->53 0->54 0->55 0->56 0->57 0->62 0->63 0->64 0->65 0->66 0->67 0->68 0->69 0->70 0->73 0->74 0->75 0->76 0->77 0->78 0->79 0->80 0->81 0->82 0->92 0->93 0->94 0->95 0->96 0->99 0->100 0->103 0->108 0->109 0->110 0->111 0->114 0->116 0->119 0->120 0->121 0->122 0->123 0->124 0->125 0->126 0->129 0->130 0->131 0->132 0->133 0->134 0->135 0->136 0->137 0->138 0->139 0->140 0->141 0->142 0->143 0->144 0->145 0->146 0->149 0->150 0->151 0->152 0->153 0->154 0->155 0->156 0->157 0->158 0->159 0->160 0->161 0->162 0->163 0->164 0->165 0->166 0->167 0->168 0->169 0->170 0->171 0->172 0->173 0->174 2->1 2->1 2->3 3->1 3->1 3->1 3->4 3->14 4->1 4->1 4->1 4->4 4->5 4->5 4->8 4->9 4->10 4->11 4->12 4->13 4->14 4->15 4->16 4->17 4->18 4->19 4->19 4->20 4->23 4->26 4->28 4->31 4->33 4->34 4->35 4->36 4->37 4->39 4->39 4->40 4->43 4->44 4->45 4->46 4->52 4->53 4->54 4->56 4->57 4->58 4->59 4->62 4->63 4->64 4->65 4->66 4->67 4->68 4->69 4->73 4->74 4->76 4->77 4->175 4->176 4->177 5->1 5->4 6->2 6->2 7->1 7->1 7->4 8->1 8->1 8->22 8->83 8->104 8->105 8->106 8->107 9->1 9->1 9->25 9->49 9->50 9->113 9->115 9->127 9->128 10->1 10->1 10->30 10->41 10->49 10->50 10->104 10->105 10->106 10->107 10->113 10->115 10->127 10->128 11->1 11->17 12->1 12->1 12->1 12->116 13->1 13->1 13->1 13->114 14->1 14->1 14->15 14->20 14->22 15->1 15->1 15->16 15->23 15->25 16->1 16->1 16->17 16->18 16->31 16->46 16->53 16->75 16->109 16->131 17->1 17->1 17->1 17->14 17->38 18->1 18->45 19->1 19->1 20->1 20->1 20->1 20->14 20->20 20->21 20->21 20->22 21->1 21->20 22->1 22->1 22->15 22->83 22->104 22->105 22->106 22->107 23->1 23->1 23->1 23->15 23->23 23->24 23->24 23->25 24->1 24->23 25->1 25->1 25->16 25->49 25->50 25->113 25->115 25->127 25->128 26->1 26->1 26->1 26->26 26->27 26->38 26->45 26->46 26->47 26->48 26->49 26->50 26->51 26->70 26->78 26->80 26->82 26->93 26->95 26->179 26->180 26->182 26->183 26->184 26->185 27->1 27->1 27->1 28->1 28->1 28->1 28->28 28->29 28->29 28->30 28->53 28->64 28->74 28->178 29->1 29->28 30->1 30->1 31->1 31->1 31->1 31->16 31->18 31->41 31->46 31->55 31->75 31->75 31->92 31->103 31->181 32->1 32->7 32->7 33->1 33->12 33->12 34->1 34->13 34->13 35->1 35->1 35->20 36->1 36->1 36->23 37->1 37->1 37->1 38->1 38->1 38->49 39->1 40->1 40->1 40->28 41->1 41->1 45->1 45->1 45->26 45->26 45->48 46->26 46->26 46->51 46->53 46->109 46->131 47->27 47->46 48->27 48->45 49->1 49->1 49->25 49->50 49->60 49->79 49->94 50->1 50->1 50->1 50->25 50->30 50->61 50->81 50->96 50->105 50->107 50->113 51->1 51->1 51->47 51->71 51->72 51->97 51->101 51->104 51->113 51->136 51->136 51->137 51->149 51->155 51->156 51->163 51->165 51->188 51->189 51->196 51->197 52->1 52->19 52->19 52->39 52->39 53->1 53->28 53->28 53->31 54->1 54->31 54->31 55->1 56->1 56->35 56->35 57->1 57->36 57->36 58->1 58->37 58->46 59->1 59->37 59->45 60->1 60->1 60->1 60->116 61->1 61->1 61->1 61->114 63->1 63->40 63->40 64->1 64->53 64->53 68->1 68->37 68->37 68->58 68->58 69->1 69->37 69->37 69->59 69->59 70->1 70->51 70->51 71->1 71->1 71->1 71->83 71->84 71->85 71->86 71->87 71->99 71->108 71->109 71->110 71->111 71->112 71->121 71->122 71->123 71->124 71->125 71->126 71->142 71->143 71->144 71->145 71->146 71->161 71->162 71->186 71->187 72->1 72->1 72->1 72->88 72->89 72->90 72->91 72->117 72->118 72->119 72->120 72->131 72->132 72->133 72->134 72->135 72->153 72->154 75->1 75->1 75->16 75->18 75->46 78->1 79->1 79->60 79->60 80->1 81->1 81->61 81->61 83->1 83->1 83->1 84->1 84->1 84->99 85->1 85->1 85->46 85->131 86->1 86->1 86->1 86->116 87->1 87->1 87->1 87->114 88->1 88->1 88->46 89->1 89->1 89->47 90->1 90->1 90->1 90->116 91->1 91->1 91->1 91->114 92->1 92->75 92->75 97->1 97->1 97->71 97->71 97->98 97->106 97->139 97->140 97->158 97->159 97->166 97->192 97->193 98->1 98->1 98->71 98->71 99->1 99->1 99->47 99->99 99->100 99->100 99->127 99->128 99->131 99->167 99->169 99->171 99->173 99->200 99->201 99->202 99->203 100->1 100->99 101->1 101->1 101->72 101->72 101->102 101->115 101->151 101->164 101->198 101->199 102->1 102->1 102->72 102->72 104->1 104->1 104->22 104->97 104->97 104->105 104->138 104->157 104->190 104->191 105->1 105->22 105->97 105->97 105->107 105->113 106->1 106->1 106->22 106->98 106->98 106->107 106->141 106->160 106->194 106->195 107->1 107->22 107->98 107->98 107->113 108->1 108->84 108->84 109->1 109->85 109->85 110->1 110->86 110->86 111->1 111->87 111->87 112->1 112->1 112->99 113->1 113->1 113->25 113->30 113->101 113->101 113->114 113->115 113->129 113->150 114->1 114->1 114->101 114->101 115->1 115->1 115->25 115->30 115->102 115->102 115->116 115->130 115->152 116->1 116->1 116->102 116->102 117->1 117->1 117->88 117->88 118->1 118->89 119->1 119->90 119->90 120->1 120->91 120->91 121->1 121->108 122->1 123->1 123->108 123->108 124->1 124->109 124->109 127->1 127->1 127->25 127->128 127->147 127->168 127->172 128->1 128->1 128->1 128->25 128->127 128->148 128->170 128->174 129->1 129->114 129->114 130->1 130->116 130->116 131->117 131->117 132->1 132->117 132->117 133->1 133->118 133->118 136->1 136->47 136->121 136->131 136->139 137->1 138->1 139->1 139->47 139->121 139->131 140->1 141->1 142->1 142->121 142->121 146->1 146->112 146->112 147->1 147->1 147->1 147->116 148->1 148->1 148->1 148->114 149->1 151->1 155->1 155->136 155->136 158->1 158->139 158->139 167->1 168->1 168->147 168->147 169->1 170->1 170->148 170->148
>>>Token main ( ) { FILE * ReplacementFor_fp ; int T , ReplacementFor_C , ReplacementFor_D , ReplacementFor_N , M , i , ReplacementFor_j , ReplacementFor_k , l , m , t ; ReplacementFor_fp = fopen ( " \x69 \x6e \x70 \x75 \x74 " , " \x72 " ) ; fscanf ( ReplacementFor_fp , " \x25 \x64 " , & T ) ; for ( i = ( 0x1758 + 852 - 0x1aac ) ; i < T ; i ++ ) { int ReplacementFor_C , ReplacementFor_D , ReplacementFor_N , M , ReplacementFor_j , ReplacementFor_k , l , m , t ; char ReplacementFor_A [ ( 0x5e7 + 7176 - 0x21ec ) ] = " \x30 " , ReplacementFor_B [ ( 0x2463 + 53 - 0x2496 ) ] = " \x30 " , ReplacementFor_X [ ( 0x8e7 + 1138 - 0xd4f ) ] = " \x30 " , ReplacementFor_Y [ ( 0x16b6 + 3189 - 0x2321 ) ] = " \x30 " ; int ReplacementFor_flag1 = ( 0xde0 + 86 - 0xe36 ) , ReplacementFor_flag2 = ( 0x5f9 + 1194 - 0xaa3 ) ; fscanf ( ReplacementFor_fp , " \x25 \x64 " , & ReplacementFor_C ) ; for ( ReplacementFor_j = ( 0x47c + 3334 - 0x1182 ) ; ReplacementFor_j < ReplacementFor_C ; ReplacementFor_j ++ ) fscanf ( ReplacementFor_fp , " \x25 \x73 " , ReplacementFor_A ) ; fscanf ( ReplacementFor_fp , " \x25 \x64 " , & ReplacementFor_D ) ; for ( ReplacementFor_k = ( 0x1455 + 113 - 0x14c6 ) ; ReplacementFor_k < ReplacementFor_D ; ReplacementFor_k ++ ) fscanf ( ReplacementFor_fp , " \x25 \x73 " , ReplacementFor_B ) ; fscanf ( ReplacementFor_fp , " \x25 \x64 " , & ReplacementFor_N ) ; fscanf ( ReplacementFor_fp , " \x25 \x73 " , ReplacementFor_Y ) ; M = ReplacementFor_N ; for ( l = ( 0xdfa + 579 - 0x103d ) , m = ( 0x5d2 + 4464 - 0x1742 ) ; m < M , l < ReplacementFor_N ; l ++ , m ++ ) { ReplacementFor_X [ l ] = ReplacementFor_Y [ m ] ; if ( ReplacementFor_X [ l ] == ReplacementFor_B [ ( 0xa73 + 7177 - 0x267c ) ] ) { ReplacementFor_flag1 = ( 0xbc2 + 195 - 0xc84 ) ; } if ( ReplacementFor_X [ l ] == ReplacementFor_B [ ( 0x19f2 + 401 - 0x1b82 ) ] ) { ReplacementFor_flag2 = ( 0x84f + 2570 - 0x1258 ) ; } if ( l > ( 0x1b86 + 2509 - 0x2553 ) ) { if ( ( ( ReplacementFor_X [ l - ( 0xeab + 3088 - 0x1aba ) ] == ReplacementFor_A [ ( 0x45c + 4565 - 0x1631 ) ] ) && ( ReplacementFor_X [ l ] == ReplacementFor_A [ ( 0x998 + 1117 - 0xdf4 ) ] ) ) || ( ( ReplacementFor_X [ l - ( 0x2a5 + 4435 - 0x13f7 ) ] == ReplacementFor_A [ ( 0x66a + 231 - 0x750 ) ] ) && ( ReplacementFor_X [ l ] == ReplacementFor_A [ ( 0x1801 + 2536 - 0x21e9 ) ] ) ) ) { ReplacementFor_X [ l - ( 0x162a + 2775 - 0x2100 ) ] = ReplacementFor_A [ ( 0x14af + 1642 - 0x1b17 ) ] ; l = l - ( 0xa87 + 6202 - 0x22c0 ) ; ReplacementFor_N = ReplacementFor_N - ( 0x12f5 + 1657 - 0x196d ) ; ReplacementFor_flag1 = ( 0x276 + 9137 - 0x2627 ) ; ReplacementFor_flag2 = ( 0xfdf + 4133 - 0x2004 ) ; for ( t = ( 0xdc9 + 4509 - 0x1f66 ) ; t <= l ; t ++ ) { if ( ReplacementFor_X [ t ] == ReplacementFor_B [ ( 0x1a96 + 3080 - 0x269e ) ] ) { ReplacementFor_flag1 = ( 0x1706 + 1620 - 0x1d59 ) ; } if ( ReplacementFor_X [ t ] == ReplacementFor_B [ ( 0x107f + 841 - 0x13c7 ) ] ) { ReplacementFor_flag2 = ( 0x34a + 8894 - 0x2607 ) ; } } } if ( ( ( ReplacementFor_X [ l ] == ReplacementFor_B [ ( 0x1cb9 + 2624 - 0x26f9 ) ] ) && ( ReplacementFor_flag2 == ( 0xec8 + 3531 - 0x1c92 ) ) ) || ( ( ReplacementFor_X [ l ] == ReplacementFor_B [ ( 0x20ac + 173 - 0x2158 ) ] ) && ( ReplacementFor_flag1 == ( 0x1110 + 4580 - 0x22f3 ) ) ) ) { ReplacementFor_N = ReplacementFor_N - l - ( 0x1180 + 373 - 0x12f4 ) ; l = - ( 0x3dd + 2772 - 0xeb0 ) ; ReplacementFor_flag1 = ( 0x93f + 7415 - 0x2636 ) ; ReplacementFor_flag2 = ( 0x33a + 7330 - 0x1fdc ) ; } } } printf ( " \x43 \x61 \x73 \x65 \x20 \x23 \x25 \x64 \x3a \x20 \x5b " , i + ( 0x108c + 133 - 0x1110 ) ) ; for ( l = ( 0x8fa + 3019 - 0x14c5 ) ; l < ReplacementFor_N - ( 0x2a4 + 2531 - 0xc86 ) ; l ++ ) printf ( " \x25 \x63 \x2c \x20 " , ReplacementFor_X [ l ] ) ; if ( ReplacementFor_N != ( 0xe4b + 4818 - 0x211d ) ) printf ( " \x25 \x63 \x5d " " \n " , ReplacementFor_X [ ReplacementFor_N - ( 0x1e1 + 1736 - 0x8a8 ) ] ) ; else printf ( " \x5d " " \n " ) ; } }
>>>Func
METHOD main
METHOD_RETURN int
PARAM int ReplacementFor_argc
PARAM char**ReplacementFor_argv
scanf scanf("\x25\x64",&T)
RETURN return(0xc1b+6705-0x264c); return(0xc1b+6705-0x264c);
<operator>.lessThan ReplacementFor_k<\012T
<operator>.postIncrement ReplacementFor_k++
<operator>.subtraction 0xc1b+6705-0x264c
<operator>.assignment ReplacementFor_k=(0x218a+768-0x248a)
scanf scanf("\x25\x64",&\012ReplacementFor_C)
scanf scanf("\x25\x64",&\012ReplacementFor_D)
scanf scanf("\x25\x64\x20",&ReplacementFor_N)
<operator>.assignment ReplacementFor_idx=\012(0x33a+171-0x3e5)
printf printf(\012"\x43\x61\x73\x65\x20\x23\x25\x64\x3a\x20\x5b" ReplacementFor_k+\012(0x3d+8514-0x217e))
<operator>.lessThan i<ReplacementFor_TOTAL
<operator>.postIncrement i++
<operator>.lessThan i<ReplacementFor_TOTAL
<operator>.postIncrement i++
<operator>.lessThan i<ReplacementFor_C
<operator>.postIncrement i++
<operator>.lessThan i<ReplacementFor_D
<operator>.postIncrement i++
<operator>.lessThan i<ReplacementFor_N
<operator>.postIncrement i++
<operator>.lessThan i<ReplacementFor_idx-\012(0x1388+4699-0x25e2)
<operator>.postIncrement i++
<operator>.equals ReplacementFor_idx==(0xeed+2023-0x16d4)
<operator>.addition 0xc1b+6705
<operator>.subtraction 0x218a+768-0x248a
<operator>.assignment i=(0x78b+7503-0x24da)
<operator>.assignment i=(0xb75+6164-0x2389)
<operator>.assignment ReplacementFor_exists[i]=(0x192d+2713-0x23c6)
<operator>.assignment i=(0x967+5468-0x1ec3)
scanf scanf(\012"\x20\x25\x63\x25\x63\x25\x63",&ReplacementFor_c1,&ReplacementFor_c2,&\012ReplacementFor_c3)
<operator>.assignment ReplacementFor_n1=ReplacementFor_getNumber(\012ReplacementFor_c1)
<operator>.assignment ReplacementFor_n2=ReplacementFor_getNumber(\012ReplacementFor_c2)
<operator>.assignment ReplacementFor_combination[ReplacementFor_n1][\012ReplacementFor_n2]=ReplacementFor_c3
<operator>.assignment ReplacementFor_combination[\012ReplacementFor_n2][ReplacementFor_n1]=ReplacementFor_c3
<operator>.assignment i=(0xc50+5169-0x2081)
scanf scanf(\012"\x20\x25\x63\x25\x63",&ReplacementFor_c1,&ReplacementFor_c2)
<operator>.assignment ReplacementFor_n1=ReplacementFor_getNumber(ReplacementFor_c1)
<operator>.assignment ReplacementFor_n2=ReplacementFor_getNumber(ReplacementFor_c2)
<operator>.assignment ReplacementFor_opposed[ReplacementFor_n1][ReplacementFor_n2]=(0xc4+8933-0x237f)
<operator>.assignment ReplacementFor_opposed[ReplacementFor_n2][ReplacementFor_n1]=(0xaa7+7064-0x2615)
<operator>.subtraction 0x33a+171-0x3e5
<operator>.assignment i=\012(0x1e1+5380-0x16e5)
scanf scanf("\x25\x63",&\012ReplacementFor_list[ReplacementFor_idx++])
<operator>.assignment ReplacementFor_tmp=\012ReplacementFor_getNumber(ReplacementFor_list[ReplacementFor_idx-\012(0xad2+1670-0x1157)])
<operator>.postIncrement ReplacementFor_exists[ReplacementFor_tmp]++
<operator>.addition ReplacementFor_k+\012(0x3d+8514-0x217e)
<operator>.assignment i=(0xe7d+2886-0x19c3)
printf printf("\x25\x63\x2c\x20",ReplacementFor_list[i])
printf printf("\x5d" "\n")
<operator>.addition 0x218a+768
<operator>.lessThan ReplacementFor_j<ReplacementFor_TOTAL
<operator>.postIncrement ReplacementFor_j++
<operator>.addition 0x33a+171
<operator>.greaterThan ReplacementFor_idx>(0xb2c+5878-0x2221)
<operator>.subtraction 0x3d+8514-0x217e
<operator>.subtraction ReplacementFor_idx-\012(0x1388+4699-0x25e2)
<operator>.subtraction 0xeed+2023-0x16d4
printf printf(\012"\x25\x63\x5d" "\n" ReplacementFor_list[ReplacementFor_idx-(0x1222+2602-0x1c4b)]\012)
<operator>.subtraction 0x78b+7503-0x24da
<operator>.assignment ReplacementFor_j=(0x295+7065-0x1e2e)
<operator>.assignment ReplacementFor_opposed[i][ReplacementFor_j]=\012(0x4c9+5528-0x1a61)
<operator>.assignment ReplacementFor_combination[i][ReplacementFor_j]=\012(0x21dc+281-0x22f5)
<operator>.subtraction 0xb75+6164-0x2389
<operator>.subtraction 0x192d+2713-0x23c6
<operator>.subtraction 0x967+5468-0x1ec3
ReplacementFor_getNumber ReplacementFor_getNumber(\012ReplacementFor_c1)
ReplacementFor_getNumber ReplacementFor_getNumber(\012ReplacementFor_c2)
<operator>.subtraction 0xc50+5169-0x2081
ReplacementFor_getNumber ReplacementFor_getNumber(ReplacementFor_c1)
ReplacementFor_getNumber ReplacementFor_getNumber(ReplacementFor_c2)
<operator>.subtraction 0xc4+8933-0x237f
<operator>.subtraction 0xaa7+7064-0x2615
<operator>.subtraction 0x1e1+5380-0x16e5
ReplacementFor_getNumber ReplacementFor_getNumber(ReplacementFor_list[ReplacementFor_idx-\012(0xad2+1670-0x1157)])
<operator>.addition 0x3d+8514
<operator>.subtraction 0xe7d+2886-0x19c3
<operator>.subtraction 0x1388+4699-0x25e2
<operator>.addition 0xeed+2023
<operator>.addition 0x78b+7503
<operator>.addition 0xb75+6164
<operator>.addition 0x192d+2713
<operator>.addition 0x967+5468
<operator>.addition 0xc50+5169
<operator>.addition 0xc4+8933
<operator>.addition 0xaa7+7064
<operator>.addition 0x1e1+5380
<operator>.subtraction 0xb2c+5878-0x2221
<operator>.assignment ReplacementFor_c=\012ReplacementFor_combination[ReplacementFor_tmp][ReplacementFor_getNumber(\012ReplacementFor_list[ReplacementFor_idx-(0x9d1+3889-0x1900)])]
<operator>.addition 0xe7d+2886
<operator>.addition 0x1388+4699
<operator>.subtraction 0x295+7065-0x1e2e
<operator>.subtraction 0x4c9+5528-0x1a61
<operator>.subtraction 0x21dc+281-0x22f5
<operator>.postIncrement ReplacementFor_idx++
<operator>.subtraction ReplacementFor_idx-\012(0xad2+1670-0x1157)
<operator>.addition 0xb2c+5878
<operator>.postDecrement ReplacementFor_exists[ReplacementFor_tmp]--
<operator>.postDecrement ReplacementFor_exists[\012ReplacementFor_getNumber(ReplacementFor_list[ReplacementFor_idx-\012(0x813+3155-0x1464)])]--
<operator>.assignmentMinus ReplacementFor_idx-=(0x1ae7+169-0x1b8e)
<operator>.assignment ReplacementFor_list[ReplacementFor_idx++]=ReplacementFor_c
<operator>.subtraction ReplacementFor_idx-(0x1222+2602-0x1c4b)
<operator>.addition 0x295+7065
<operator>.addition 0x4c9+5528
<operator>.addition 0x21dc+281
<operator>.subtraction 0xad2+1670-0x1157
<operator>.subtraction 0x1222+2602-0x1c4b
<operator>.addition 0xad2+1670
ReplacementFor_getNumber ReplacementFor_getNumber(\012ReplacementFor_list[ReplacementFor_idx-(0x9d1+3889-0x1900)])
<operator>.subtraction 0x1ae7+169-0x1b8e
<operator>.lessThan ReplacementFor_j<ReplacementFor_TOTAL
<operator>.postIncrement ReplacementFor_j++
<operator>.addition 0x1222+2602
ReplacementFor_getNumber ReplacementFor_getNumber(ReplacementFor_list[ReplacementFor_idx-\012(0x813+3155-0x1464)])
<operator>.addition 0x1ae7+169
<operator>.postIncrement ReplacementFor_idx++
<operator>.assignment ReplacementFor_j=(0x154a+1103-0x1999)
<operator>.subtraction ReplacementFor_idx-(0x9d1+3889-0x1900)
<operator>.logicalAnd ReplacementFor_opposed[ReplacementFor_tmp][\012ReplacementFor_j]&&ReplacementFor_exists[ReplacementFor_j]
<operator>.subtraction 0x9d1+3889-0x1900
<operator>.subtraction ReplacementFor_idx-\012(0x813+3155-0x1464)
<operator>.subtraction 0x154a+1103-0x1999
<operator>.assignment ReplacementFor_idx=\012(0x1c5a+948-0x200e)
<operator>.addition 0x9d1+3889
<operator>.subtraction 0x813+3155-0x1464
<operator>.addition 0x154a+1103
<operator>.lessThan l<ReplacementFor_TOTAL
<operator>.postIncrement l++
<operator>.addition 0x813+3155
<operator>.subtraction 0x1c5a+948-0x200e
<operator>.assignment l=(0x188c+664-0x1b24)
<operator>.assignment ReplacementFor_exists[l]=(0x8f6+1017-0xcef)
<operator>.addition 0x1c5a+948
<operator>.subtraction 0x188c+664-0x1b24
<operator>.subtraction 0x8f6+1017-0xcef
<operator>.addition 0x188c+664
<operator>.addition 0x8f6+1017
<operator>.addressOf &\012ReplacementFor_C
<operator>.addressOf &\012ReplacementFor_D
<operator>.addressOf &ReplacementFor_N
<operator>.indirectIndexAccess ReplacementFor_exists[i]
<operator>.addressOf &ReplacementFor_c1
<operator>.addressOf &ReplacementFor_c2
<operator>.addressOf &\012ReplacementFor_c3
<operator>.indirectIndexAccess ReplacementFor_combination[ReplacementFor_n1][\012ReplacementFor_n2]
<operator>.indirectIndexAccess ReplacementFor_combination[\012ReplacementFor_n2][ReplacementFor_n1]
<operator>.addressOf &ReplacementFor_c1
<operator>.addressOf &ReplacementFor_c2
<operator>.indirectIndexAccess ReplacementFor_opposed[ReplacementFor_n1][ReplacementFor_n2]
<operator>.indirectIndexAccess ReplacementFor_opposed[ReplacementFor_n2][ReplacementFor_n1]
<operator>.addressOf &\012ReplacementFor_list[ReplacementFor_idx++]
<operator>.indirectIndexAccess ReplacementFor_exists[ReplacementFor_tmp]
<operator>.indirectIndexAccess ReplacementFor_list[i]
<operator>.indirectIndexAccess ReplacementFor_combination[ReplacementFor_n1]
<operator>.indirectIndexAccess ReplacementFor_combination[\012ReplacementFor_n2]
<operator>.indirectIndexAccess ReplacementFor_opposed[ReplacementFor_n1]
<operator>.indirectIndexAccess ReplacementFor_opposed[ReplacementFor_n2]
<operator>.indirectIndexAccess ReplacementFor_list[ReplacementFor_idx++]
<operator>.indirectIndexAccess ReplacementFor_list[ReplacementFor_idx-\012(0xad2+1670-0x1157)]
<operator>.indirectIndexAccess ReplacementFor_list[ReplacementFor_idx-(0x1222+2602-0x1c4b)]
<operator>.indirectIndexAccess ReplacementFor_opposed[i][ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_combination[i][ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_opposed[i]
<operator>.indirectIndexAccess ReplacementFor_combination[i]
<operator>.indirectIndexAccess ReplacementFor_combination[ReplacementFor_tmp][ReplacementFor_getNumber(\012ReplacementFor_list[ReplacementFor_idx-(0x9d1+3889-0x1900)])]
<operator>.indirectIndexAccess ReplacementFor_combination[ReplacementFor_tmp]
<operator>.indirectIndexAccess ReplacementFor_exists[ReplacementFor_tmp]
<operator>.indirectIndexAccess ReplacementFor_exists[\012ReplacementFor_getNumber(ReplacementFor_list[ReplacementFor_idx-\012(0x813+3155-0x1464)])]
<operator>.indirectIndexAccess ReplacementFor_list[ReplacementFor_idx++]
<operator>.indirectIndexAccess ReplacementFor_list[ReplacementFor_idx-(0x9d1+3889-0x1900)]
<operator>.indirectIndexAccess ReplacementFor_list[ReplacementFor_idx-\012(0x813+3155-0x1464)]
<operator>.indirectIndexAccess ReplacementFor_opposed[ReplacementFor_tmp][\012ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_exists[ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_opposed[ReplacementFor_tmp]
<operator>.indirectIndexAccess ReplacementFor_exists[l]
>>>PDG&179 0->2 0->3 0->4 0->6 0->7 0->8 0->10 0->11 0->12 0->14 0->15 0->16 0->17 0->18 0->19 0->20 0->21 0->22 0->23 0->24 0->25 0->26 0->27 0->28 0->29 0->34 0->37 0->38 0->40 0->45 0->50 0->52 0->53 0->54 0->55 0->56 0->57 0->58 0->59 0->60 0->61 0->62 0->63 0->67 0->68 0->69 0->70 0->71 0->72 0->73 0->74 0->75 0->76 0->77 0->79 0->80 0->81 0->82 0->83 0->84 0->85 0->86 0->87 0->88 0->89 0->90 0->91 0->93 0->94 0->95 0->96 0->97 0->98 0->99 0->100 0->103 0->104 0->105 0->106 0->107 0->108 0->109 0->110 0->111 0->113 0->114 0->115 0->116 0->118 0->119 0->121 0->123 0->124 0->125 0->127 0->128 0->129 0->130 0->131 0->132 0->133 0->136 0->137 0->138 0->139 0->140 2->1 3->1 4->1 4->6 5->1 6->1 6->1 6->1 6->6 6->7 6->7 6->10 6->11 6->12 6->13 6->14 6->14 6->15 6->17 6->19 6->21 6->23 6->25 6->27 6->30 6->31 6->33 6->39 6->45 6->46 6->50 6->50 6->51 6->57 6->59 6->60 6->61 6->63 6->67 6->69 6->72 6->77 6->79 6->80 6->81 6->82 6->83 6->84 6->86 6->87 6->90 6->93 6->94 6->141 6->142 6->143 7->1 7->6 8->1 8->1 8->5 9->1 9->1 9->6 10->1 10->19 11->1 11->21 12->1 12->23 13->1 13->1 13->60 13->98 14->1 14->1 15->15 15->16 15->16 15->17 15->55 15->55 15->64 15->95 15->106 16->1 16->15 17->1 17->1 17->15 17->17 17->18 17->18 17->32 17->68 17->85 17->114 17->144 18->1 18->17 19->1 19->1 19->10 19->19 19->20 19->20 19->34 19->35 19->36 19->37 19->38 19->70 19->71 19->145 19->146 19->147 19->148 19->149 19->157 19->158 20->1 20->19 21->1 21->1 21->11 21->21 21->22 21->22 21->40 21->41 21->42 21->43 21->44 21->73 21->74 21->75 21->76 21->88 21->89 21->150 21->151 21->152 21->153 21->159 21->160 22->1 22->21 23->1 23->1 23->12 23->23 23->24 23->24 23->47 23->48 23->49 23->58 23->78 23->91 23->98 23->99 23->100 23->109 23->111 23->154 23->155 23->161 23->162 24->1 24->23 25->1 25->1 25->1 25->25 25->26 25->26 25->52 25->60 25->81 25->94 25->156 26->1 26->25 27->1 27->1 27->1 27->53 27->62 27->105 27->105 27->110 27->116 27->163 29->1 29->9 29->9 30->1 30->1 30->15 31->1 31->1 31->17 32->1 32->1 32->1 33->1 33->1 33->19 34->1 34->1 34->1 34->40 34->70 34->73 35->1 35->1 35->1 36->1 36->1 36->1 37->1 37->1 38->1 38->1 38->1 39->1 39->1 39->21 40->1 40->1 40->34 40->70 40->73 41->1 41->1 41->1 42->1 42->1 42->1 43->1 43->1 43->1 44->1 44->1 44->1 45->1 45->13 45->13 46->1 46->1 46->23 47->1 48->1 48->1 48->1 49->1 49->1 49->101 50->1 51->1 51->1 51->25 52->1 52->1 53->1 55->1 55->1 55->15 55->55 55->56 55->56 55->65 55->66 55->96 55->97 55->107 55->108 55->164 55->165 55->166 55->167 56->1 56->55 58->1 58->1 58->60 58->92 58->98 58->112 58->121 58->121 58->123 58->127 58->168 58->169 58->173 59->1 59->14 59->14 59->50 59->50 60->1 60->25 60->25 60->27 61->1 61->27 61->27 62->1 62->1 63->1 63->30 63->30 64->1 64->1 64->55 65->1 65->1 65->1 66->1 66->1 66->1 67->1 67->31 67->31 68->1 68->32 68->32 69->1 69->33 69->33 70->1 70->34 70->35 70->40 70->73 71->1 71->36 71->74 72->1 72->39 72->39 73->1 73->34 73->40 73->41 73->70 74->1 74->42 74->71 75->1 75->43 75->43 76->1 76->44 76->44 77->1 77->46 77->46 78->1 78->48 80->1 80->51 80->51 81->1 81->60 81->60 91->1 91->58 91->58 92->1 92->1 92->1 92->101 92->102 92->103 92->104 92->104 92->113 92->114 92->117 92->118 92->119 92->120 92->124 92->125 92->128 92->129 92->132 92->170 92->171 92->172 92->174 95->1 95->64 95->64 96->1 96->65 96->65 97->1 97->66 97->66 98->99 99->1 99->58 101->1 101->1 101->49 102->1 102->1 103->1 103->1 103->119 104->1 104->1 104->1 104->47 105->1 105->1 109->1 109->99 109->99 110->1 110->105 110->105 112->1 113->1 113->103 113->103 114->1 114->1 114->1 114->15 114->115 114->122 114->130 114->175 114->177 115->1 115->114 117->1 119->60 119->98 120->1 120->1 120->114 121->1 121->60 121->98 121->124 122->1 122->1 122->1 122->114 122->115 122->126 122->130 122->133 122->134 122->136 122->137 122->139 123->1 123->121 123->121 124->1 124->103 125->1 125->120 125->120 126->1 126->1 126->60 126->98 128->1 128->124 128->124 130->1 130->1 130->1 130->15 130->114 130->130 130->131 130->131 130->135 130->138 130->140 130->178 131->1 131->130 133->1 133->126 133->126 134->1 134->1 134->130 135->1 135->1 135->1 137->1 137->134 137->134 138->1 138->135 138->135 175->176
>>>Token int main ( int ReplacementFor_argc , char * * ReplacementFor_argv ) { int T , ReplacementFor_C , ReplacementFor_D , ReplacementFor_N ; scanf ( " \x25 \x64 " , & T ) ; int i , ReplacementFor_j , ReplacementFor_k , l ; int ReplacementFor_exists [ ReplacementFor_TOTAL ] ; for ( ReplacementFor_k = ( 0x218a + 768 - 0x248a ) ; ReplacementFor_k < T ; ReplacementFor_k ++ ) { for ( i = ( 0x78b + 7503 - 0x24da ) ; i < ReplacementFor_TOTAL ; i ++ ) { for ( ReplacementFor_j = ( 0x295 + 7065 - 0x1e2e ) ; ReplacementFor_j < ReplacementFor_TOTAL ; ReplacementFor_j ++ ) { ReplacementFor_opposed [ i ] [ ReplacementFor_j ] = ( 0x4c9 + 5528 - 0x1a61 ) ; ReplacementFor_combination [ i ] [ ReplacementFor_j ] = ( 0x21dc + 281 - 0x22f5 ) ; } } for ( i = ( 0xb75 + 6164 - 0x2389 ) ; i < ReplacementFor_TOTAL ; i ++ ) { ReplacementFor_exists [ i ] = ( 0x192d + 2713 - 0x23c6 ) ; } scanf ( " \x25 \x64 " , & ReplacementFor_C ) ; char ReplacementFor_c1 , ReplacementFor_c2 , ReplacementFor_c3 ; for ( i = ( 0x967 + 5468 - 0x1ec3 ) ; i < ReplacementFor_C ; i ++ ) { scanf ( " \x20 \x25 \x63 \x25 \x63 \x25 \x63 " , & ReplacementFor_c1 , & ReplacementFor_c2 , & ReplacementFor_c3 ) ; int ReplacementFor_n1 = ReplacementFor_getNumber ( ReplacementFor_c1 ) ; int ReplacementFor_n2 = ReplacementFor_getNumber ( ReplacementFor_c2 ) ; ReplacementFor_combination [ ReplacementFor_n1 ] [ ReplacementFor_n2 ] = ReplacementFor_c3 ; ReplacementFor_combination [ ReplacementFor_n2 ] [ ReplacementFor_n1 ] = ReplacementFor_c3 ; } scanf ( " \x25 \x64 " , & ReplacementFor_D ) ; for ( i = ( 0xc50 + 5169 - 0x2081 ) ; i < ReplacementFor_D ; i ++ ) { scanf ( " \x20 \x25 \x63 \x25 \x63 " , & ReplacementFor_c1 , & ReplacementFor_c2 ) ; int ReplacementFor_n1 = ReplacementFor_getNumber ( ReplacementFor_c1 ) ; int ReplacementFor_n2 = ReplacementFor_getNumber ( ReplacementFor_c2 ) ; ReplacementFor_opposed [ ReplacementFor_n1 ] [ ReplacementFor_n2 ] = ( 0xc4 + 8933 - 0x237f ) ; ReplacementFor_opposed [ ReplacementFor_n2 ] [ ReplacementFor_n1 ] = ( 0xaa7 + 7064 - 0x2615 ) ; } scanf ( " \x25 \x64 \x20 " , & ReplacementFor_N ) ; int ReplacementFor_idx = ( 0x33a + 171 - 0x3e5 ) ; char ReplacementFor_c ; int ReplacementFor_tmp ; for ( i = ( 0x1e1 + 5380 - 0x16e5 ) ; i < ReplacementFor_N ; i ++ ) { scanf ( " \x25 \x63 " , & ReplacementFor_list [ ReplacementFor_idx ++ ] ) ; ReplacementFor_tmp = ReplacementFor_getNumber ( ReplacementFor_list [ ReplacementFor_idx - ( 0xad2 + 1670 - 0x1157 ) ] ) ; ReplacementFor_exists [ ReplacementFor_tmp ] ++ ; if ( ReplacementFor_idx > ( 0xb2c + 5878 - 0x2221 ) ) { if ( ( ReplacementFor_c = ReplacementFor_combination [ ReplacementFor_tmp ] [ ReplacementFor_getNumber ( ReplacementFor_list [ ReplacementFor_idx - ( 0x9d1 + 3889 - 0x1900 ) ] ) ] ) ) { ReplacementFor_exists [ ReplacementFor_tmp ] -- ; ReplacementFor_exists [ ReplacementFor_getNumber ( ReplacementFor_list [ ReplacementFor_idx - ( 0x813 + 3155 - 0x1464 ) ] ) ] -- ; ReplacementFor_idx -= ( 0x1ae7 + 169 - 0x1b8e ) ; ReplacementFor_list [ ReplacementFor_idx ++ ] = ReplacementFor_c ; } else { for ( ReplacementFor_j = ( 0x154a + 1103 - 0x1999 ) ; ReplacementFor_j < ReplacementFor_TOTAL ; ReplacementFor_j ++ ) { if ( ReplacementFor_opposed [ ReplacementFor_tmp ] [ ReplacementFor_j ] && ReplacementFor_exists [ ReplacementFor_j ] ) { ReplacementFor_idx = ( 0x1c5a + 948 - 0x200e ) ; for ( l = ( 0x188c + 664 - 0x1b24 ) ; l < ReplacementFor_TOTAL ; l ++ ) { ReplacementFor_exists [ l ] = ( 0x8f6 + 1017 - 0xcef ) ; } break ; } } } } } printf ( " \x43 \x61 \x73 \x65 \x20 \x23 \x25 \x64 \x3a \x20 \x5b " , ReplacementFor_k + ( 0x3d + 8514 - 0x217e ) ) ; for ( i = ( 0xe7d + 2886 - 0x19c3 ) ; i < ReplacementFor_idx - ( 0x1388 + 4699 - 0x25e2 ) ; i ++ ) { printf ( " \x25 \x63 \x2c \x20 " , ReplacementFor_list [ i ] ) ; } if ( ReplacementFor_idx == ( 0xeed + 2023 - 0x16d4 ) ) printf ( " \x5d " " \n " ) ; else printf ( " \x25 \x63 \x5d " " \n " , ReplacementFor_list [ ReplacementFor_idx - ( 0x1222 + 2602 - 0x1c4b ) ] ) ; } return ( 0xc1b + 6705 - 0x264c ) ; }
>>>Func
METHOD ReplacementFor_follow_fstatat
METHOD_RETURN int
PARAM int ReplacementFor_dirfd
PARAM char const*\012ReplacementFor_filename
PARAM struct stat*ReplacementFor_st
PARAM int flags
<operator>.assignment ReplacementFor_result=ReplacementFor_fstatat(ReplacementFor_dirfd,\012ReplacementFor_filename,ReplacementFor_st,flags)
RETURN return \012ReplacementFor_result; return \012ReplacementFor_result;
<operator>.logicalAnd ReplacementFor_DEV_FD_MIGHT_BE_CHR&&ReplacementFor_result==(0xf1f+708-0x11e3)&&!\012(flags&ReplacementFor_AT_SYMLINK_NOFOLLOW)&&S_ISCHR(ReplacementFor_st->st_mode)
IDENTIFIER ReplacementFor_result return \012ReplacementFor_result;
ReplacementFor_fstatat ReplacementFor_fstatat(ReplacementFor_dirfd,\012ReplacementFor_filename,ReplacementFor_st,flags)
<operator>.logicalAnd ReplacementFor_DEV_FD_MIGHT_BE_CHR&&ReplacementFor_result==(0xf1f+708-0x11e3)&&!\012(flags&ReplacementFor_AT_SYMLINK_NOFOLLOW)
S_ISCHR S_ISCHR(ReplacementFor_st->st_mode)
<operator>.equals ReplacementFor_stdin_rdev_status==\012(0x1e00+87-0x1e57)
<operator>.logicalAnd (0x85c+3392-0x159c)<\012ReplacementFor_stdin_rdev_status&&ReplacementFor_major(ReplacementFor_stdin_rdev\012)==ReplacementFor_major(ReplacementFor_st->st_rdev)
<operator>.logicalAnd ReplacementFor_DEV_FD_MIGHT_BE_CHR&&ReplacementFor_result==(0xf1f+708-0x11e3)
<operator>.logicalNot !\012(flags&ReplacementFor_AT_SYMLINK_NOFOLLOW)
<operator>.assignment ReplacementFor_result=fstat(\012ReplacementFor_minor(ReplacementFor_st->st_rdev),ReplacementFor_st)
<operator>.equals ReplacementFor_result==(0xf1f+708-0x11e3)
<operator>.and flags&ReplacementFor_AT_SYMLINK_NOFOLLOW
<operator>.subtraction 0x1e00+87-0x1e57
<operator>.logicalAnd stat(\012"\x2f\x64\x65\x76\x2f\x73\x74\x64\x69\x6e",&ReplacementFor_stdin_st)==\012(0xed+6738-0x1b3f)&&S_ISCHR(ReplacementFor_stdin_st.st_mode)&&\012ReplacementFor_minor(ReplacementFor_stdin_st.st_rdev)==STDIN_FILENO
<operator>.lessThan (0x85c+3392-0x159c)<\012ReplacementFor_stdin_rdev_status
<operator>.equals ReplacementFor_major(ReplacementFor_stdin_rdev\012)==ReplacementFor_major(ReplacementFor_st->st_rdev)
<operator>.subtraction 0xf1f+708-0x11e3
<operator>.addition 0x1e00+87
<operator>.assignment ReplacementFor_stdin_rdev=ReplacementFor_stdin_st.st_rdev
<operator>.assignment ReplacementFor_stdin_rdev_status=(0x12cf+2252-0x1b9a)
<operator>.subtraction 0x85c+3392-0x159c
ReplacementFor_major ReplacementFor_major(ReplacementFor_stdin_rdev\012)
ReplacementFor_major ReplacementFor_major(ReplacementFor_st->st_rdev)
fstat fstat(\012ReplacementFor_minor(ReplacementFor_st->st_rdev),ReplacementFor_st)
<operator>.addition 0xf1f+708
<operator>.logicalAnd stat(\012"\x2f\x64\x65\x76\x2f\x73\x74\x64\x69\x6e",&ReplacementFor_stdin_st)==\012(0xed+6738-0x1b3f)&&S_ISCHR(ReplacementFor_stdin_st.st_mode)
<operator>.equals ReplacementFor_minor(ReplacementFor_stdin_st.st_rdev)==STDIN_FILENO
<operator>.assignment ReplacementFor_stdin_rdev_status=-(0x1729+2407-0x208f)
<operator>.addition 0x85c+3392
ReplacementFor_minor ReplacementFor_minor(ReplacementFor_st->st_rdev)
<operator>.equals stat(\012"\x2f\x64\x65\x76\x2f\x73\x74\x64\x69\x6e",&ReplacementFor_stdin_st)==\012(0xed+6738-0x1b3f)
S_ISCHR S_ISCHR(ReplacementFor_stdin_st.st_mode)
ReplacementFor_minor ReplacementFor_minor(ReplacementFor_stdin_st.st_rdev)
<operator>.subtraction 0x12cf+2252-0x1b9a
stat stat(\012"\x2f\x64\x65\x76\x2f\x73\x74\x64\x69\x6e",&ReplacementFor_stdin_st)
<operator>.subtraction 0xed+6738-0x1b3f
<operator>.addition 0x12cf+2252
<operator>.minus -(0x1729+2407-0x208f)
<operator>.addition 0xed+6738
<operator>.subtraction 0x1729+2407-0x208f
<operator>.addition 0x1729+2407
<operator>.indirectFieldAccess ReplacementFor_st->st_mode
FIELD_IDENTIFIER st_mode st_mode
<operator>.indirectFieldAccess ReplacementFor_st->st_rdev
<operator>.fieldAccess ReplacementFor_stdin_st.st_rdev
FIELD_IDENTIFIER st_rdev st_rdev
<operator>.indirectFieldAccess ReplacementFor_st->st_rdev
<operator>.fieldAccess ReplacementFor_stdin_st.st_mode
<operator>.fieldAccess ReplacementFor_stdin_st.st_rdev
FIELD_IDENTIFIER st_rdev st_rdev
FIELD_IDENTIFIER st_rdev st_rdev
<operator>.addressOf &ReplacementFor_stdin_st
FIELD_IDENTIFIER st_mode st_mode
FIELD_IDENTIFIER st_rdev st_rdev
>>>PDG&62 0->2 0->3 0->4 0->5 0->9 0->10 0->13 0->15 0->18 0->19 0->20 0->22 0->24 0->25 0->26 0->28 0->29 0->31 0->32 0->34 0->36 0->39 0->40 0->41 0->42 0->43 0->44 0->46 0->47 0->48 2->10 3->10 4->10 5->10 6->1 6->1 6->1 6->9 6->18 7->1 8->1 8->1 8->1 8->13 8->14 8->20 8->22 8->25 8->28 8->36 9->7 10->1 10->1 10->1 10->1 10->6 10->6 10->6 10->6 10->19 10->31 11->1 11->1 11->8 11->8 11->12 11->49 11->50 12->1 12->8 13->1 13->1 13->21 13->22 13->33 13->38 13->42 13->43 13->46 13->59 14->1 14->1 14->1 14->17 14->31 14->37 14->54 14->58 15->1 15->1 15->11 15->11 15->16 15->19 16->1 16->11 17->1 17->1 17->1 17->9 18->1 18->1 18->9 18->15 18->15 19->1 19->1 19->16 19->16 20->1 20->13 20->13 21->1 21->1 21->1 21->26 21->27 21->35 21->41 21->44 21->45 21->47 21->48 21->52 21->57 22->1 22->1 22->14 22->14 22->23 22->29 22->30 22->51 22->53 23->1 23->1 23->14 23->14 24->1 24->18 24->18 26->1 26->1 26->1 26->29 27->1 27->1 27->22 28->1 28->22 28->22 29->1 29->23 30->1 30->23 30->37 31->1 31->1 31->17 31->17 33->1 33->1 33->21 33->21 33->34 33->40 33->56 33->61 34->1 34->1 34->21 34->21 35->1 35->1 35->22 37->1 37->31 38->1 38->1 38->33 38->33 38->39 38->55 38->60 39->1 39->33 40->1 40->26 40->34 41->1 41->27 41->27 42->1 42->38 42->38 43->1 43->38 43->38 45->1 45->35 47->1 47->45 47->45
>>>Token ReplacementFor_ndef ReplacementFor_DEV_FD_MIGHT_BE_CHR  ReplacementFor_ndif static int ReplacementFor_follow_fstatat ( int ReplacementFor_dirfd , char const * ReplacementFor_filename , struct stat * ReplacementFor_st , int flags ) { int ReplacementFor_result = ReplacementFor_fstatat ( ReplacementFor_dirfd , ReplacementFor_filename , ReplacementFor_st , flags ) ; if ( ReplacementFor_DEV_FD_MIGHT_BE_CHR && ReplacementFor_result == ( 0xf1f + 708 - 0x11e3 ) && ! ( flags & ReplacementFor_AT_SYMLINK_NOFOLLOW ) && S_ISCHR ( ReplacementFor_st -> st_mode ) ) { static dev_t ReplacementFor_stdin_rdev ; static signed char ReplacementFor_stdin_rdev_status ; if ( ReplacementFor_stdin_rdev_status == ( 0x1e00 + 87 - 0x1e57 ) ) { struct stat ReplacementFor_stdin_st ; if ( stat ( " \x2f \x64 \x65 \x76 \x2f \x73 \x74 \x64 \x69 \x6e " , & ReplacementFor_stdin_st ) == ( 0xed + 6738 - 0x1b3f ) && S_ISCHR ( ReplacementFor_stdin_st . st_mode ) && ReplacementFor_minor ( ReplacementFor_stdin_st . st_rdev ) == STDIN_FILENO ) { ReplacementFor_stdin_rdev = ReplacementFor_stdin_st . st_rdev ; ReplacementFor_stdin_rdev_status = ( 0x12cf + 2252 - 0x1b9a ) ; } else ReplacementFor_stdin_rdev_status = - ( 0x1729 + 2407 - 0x208f ) ; } if ( ( 0x85c + 3392 - 0x159c ) < ReplacementFor_stdin_rdev_status && ReplacementFor_major ( ReplacementFor_stdin_rdev ) == ReplacementFor_major ( ReplacementFor_st -> st_rdev ) ) ReplacementFor_result = fstat ( ReplacementFor_minor ( ReplacementFor_st -> st_rdev ) , ReplacementFor_st ) ; } return ReplacementFor_result ; }
>>>Func
METHOD ReplacementFor_valid
METHOD_RETURN int
PARAM int i
PARAM int ReplacementFor_j
RETURN return(0x16d+6402-0x1a6f)<=\012i&&i<(0x1b68+896-0x1ee6)*M&&(0xa7c+3159-0x16d3)<=ReplacementFor_j&&\012ReplacementFor_j<(0xbfb+1664-0x1279)*ReplacementFor_N; return(0x16d+6402-0x1a6f)<=\012i&&i<(0x1b68+896-0x1ee6)*M&&(0xa7c+3159-0x16d3)<=ReplacementFor_j&&\012ReplacementFor_j<(0xbfb+1664-0x1279)*ReplacementFor_N;
<operator>.logicalAnd (0x16d+6402-0x1a6f)<=\012i&&i<(0x1b68+896-0x1ee6)*M&&(0xa7c+3159-0x16d3)<=ReplacementFor_j&&\012ReplacementFor_j<(0xbfb+1664-0x1279)*ReplacementFor_N
<operator>.logicalAnd (0x16d+6402-0x1a6f)<=\012i&&i<(0x1b68+896-0x1ee6)*M&&(0xa7c+3159-0x16d3)<=ReplacementFor_j
<operator>.lessThan ReplacementFor_j<(0xbfb+1664-0x1279)*ReplacementFor_N
<operator>.logicalAnd (0x16d+6402-0x1a6f)<=\012i&&i<(0x1b68+896-0x1ee6)*M
<operator>.lessEqualsThan (0xa7c+3159-0x16d3)<=ReplacementFor_j
<operator>.multiplication (0xbfb+1664-0x1279)*ReplacementFor_N
<operator>.lessEqualsThan (0x16d+6402-0x1a6f)<=\012i
<operator>.lessThan i<(0x1b68+896-0x1ee6)*M
<operator>.subtraction 0xa7c+3159-0x16d3
<operator>.subtraction 0xbfb+1664-0x1279
<operator>.subtraction 0x16d+6402-0x1a6f
<operator>.multiplication (0x1b68+896-0x1ee6)*M
<operator>.addition 0xa7c+3159
<operator>.addition 0xbfb+1664
<operator>.addition 0x16d+6402
<operator>.subtraction 0x1b68+896-0x1ee6
<operator>.addition 0x1b68+896
>>>PDG&22 0->2 0->3 0->7 0->9 0->10 0->11 0->12 0->13 0->14 0->15 0->16 0->17 0->18 0->19 0->20 0->21 2->11 3->1 3->7 3->9 4->1 5->1 5->1 5->1 5->4 6->1 6->1 6->5 6->5 6->7 6->10 6->14 6->18 7->1 7->1 7->5 7->5 8->1 8->1 8->6 8->6 8->9 8->13 8->17 9->1 9->1 9->6 9->6 9->7 10->1 10->1 10->7 10->7 11->1 11->1 11->8 11->8 11->12 11->12 11->16 11->20 11->21 12->1 12->1 12->8 12->8 13->1 13->9 13->9 14->1 14->10 14->10 15->1 15->11 15->11 16->1 16->1 16->12 16->12 20->1 20->16 20->16
>>>Token int ReplacementFor_valid ( int i , int ReplacementFor_j ) { return ( 0x16d + 6402 - 0x1a6f ) <= i && i < ( 0x1b68 + 896 - 0x1ee6 ) * M && ( 0xa7c + 3159 - 0x16d3 ) <= ReplacementFor_j && ReplacementFor_j < ( 0xbfb + 1664 - 0x1279 ) * ReplacementFor_N ; }
>>>Func
METHOD main
METHOD_RETURN void
<operator>.assignment ReplacementFor_f=(0x926+6549-0x22bb)
scanf scanf("\x25\x64",&ReplacementFor_n)
<operator>.lessThan i<\012ReplacementFor_n
<operator>.postIncrement i++
<operator>.subtraction 0x926+6549-0x22bb
<operator>.assignment i=(0x2183+880-0x24f3)
scanf scanf("\x25\x64\x25\x64\x25\x64",&ReplacementFor_N,&\012ReplacementFor_D,&ReplacementFor_G)
<operator>.assignment ReplacementFor_f=(0xf5a+4909-0x2287)
printf printf(\012"\x43\x61\x73\x65\x20\x23\x25\x64\x3a\x20" i+(0xf3+1881-0x84b))
<operator>.addition 0x926+6549
<operator>.logicalOr (\012ReplacementFor_D==(0x423+5884-0x1b1f)&&ReplacementFor_G==(0x1154+4243-0x2183))||\012(ReplacementFor_D>(0x526+480-0x706)&&ReplacementFor_G==(0xc27+5175-0x205e))
<operator>.equals ReplacementFor_f==(0xf05+1432-0x149d)
<operator>.subtraction 0x2183+880-0x24f3
<operator>.subtraction 0xf5a+4909-0x2287
<operator>.addition i+(0xf3+1881-0x84b)
printf printf("\x42\x72\x6f\x6b\x65\x6e" "\n")
printf printf("\x42\x72\x6f\x6b\x65\x6e" "\n")
<operator>.addition 0x2183+880
<operator>.addition 0xf5a+4909
<operator>.subtraction 0xf3+1881-0x84b
<operator>.logicalAnd ReplacementFor_D==(0x423+5884-0x1b1f)&&ReplacementFor_G==(0x1154+4243-0x2183)
<operator>.logicalAnd ReplacementFor_D>(0x526+480-0x706)&&ReplacementFor_G==(0xc27+5175-0x205e)
<operator>.subtraction 0xf05+1432-0x149d
<operator>.addition 0xf3+1881
<operator>.equals ReplacementFor_D==(0x423+5884-0x1b1f)
<operator>.equals ReplacementFor_G==(0x1154+4243-0x2183)
<operator>.greaterThan ReplacementFor_D>(0x526+480-0x706)
<operator>.equals ReplacementFor_G==(0xc27+5175-0x205e)
<operator>.logicalOr (ReplacementFor_D==\012(0x15ed+3242-0x2297)&&ReplacementFor_G>=(0x7a7+2369-0x10e8))||(ReplacementFor_D\012==(0x15c9+1200-0x1a15)&&ReplacementFor_G==(0x146+3298-0xdc4))
<operator>.addition 0xf05+1432
<operator>.subtraction 0x423+5884-0x1b1f
<operator>.subtraction 0x1154+4243-0x2183
<operator>.subtraction 0x526+480-0x706
<operator>.subtraction 0xc27+5175-0x205e
printf printf(\012"\x50\x6f\x73\x73\x69\x62\x6c\x65" "\n")
<operator>.addition 0x423+5884
<operator>.addition 0x1154+4243
<operator>.addition 0x526+480
<operator>.addition 0xc27+5175
<operator>.logicalAnd ReplacementFor_D==\012(0x15ed+3242-0x2297)&&ReplacementFor_G>=(0x7a7+2369-0x10e8)
<operator>.logicalAnd ReplacementFor_D\012==(0x15c9+1200-0x1a15)&&ReplacementFor_G==(0x146+3298-0xdc4)
<operator>.equals ReplacementFor_D==\012(0x15ed+3242-0x2297)
<operator>.greaterEqualsThan ReplacementFor_G>=(0x7a7+2369-0x10e8)
<operator>.equals ReplacementFor_D\012==(0x15c9+1200-0x1a15)
<operator>.equals ReplacementFor_G==(0x146+3298-0xdc4)
<operator>.logicalNot !(ReplacementFor_G==\012(0xe25+4583-0x1fa8)&&ReplacementFor_D<(0xcd9+1070-0x10a3))
<operator>.subtraction 0x15ed+3242-0x2297
<operator>.subtraction 0x7a7+2369-0x10e8
<operator>.subtraction 0x15c9+1200-0x1a15
<operator>.subtraction 0x146+3298-0xdc4
<operator>.assignment val=\012(0x551+4051-0x14c0)/ReplacementFor_gcd(ReplacementFor_D (0x79+6158-0x1823))
<operator>.addition 0x15ed+3242
<operator>.addition 0x7a7+2369
<operator>.addition 0x15c9+1200
<operator>.addition 0x146+3298
<operator>.logicalAnd ReplacementFor_G==\012(0xe25+4583-0x1fa8)&&ReplacementFor_D<(0xcd9+1070-0x10a3)
<operator>.lessEqualsThan val<=ReplacementFor_N
<operator>.equals ReplacementFor_G==\012(0xe25+4583-0x1fa8)
<operator>.lessThan ReplacementFor_D<(0xcd9+1070-0x10a3)
<operator>.division (0x551+4051-0x14c0)/ReplacementFor_gcd(ReplacementFor_D (0x79+6158-0x1823))
printf printf("\x50\x6f\x73\x73\x69\x62\x6c\x65" "\n")
<operator>.assignment ReplacementFor_f=(0x4ac+6207-0x1cea)
<operator>.subtraction 0xe25+4583-0x1fa8
<operator>.subtraction 0xcd9+1070-0x10a3
<operator>.subtraction 0x551+4051-0x14c0
ReplacementFor_gcd ReplacementFor_gcd(ReplacementFor_D (0x79+6158-0x1823))
<operator>.addition 0xe25+4583
<operator>.addition 0xcd9+1070
<operator>.addition 0x551+4051
<operator>.subtraction 0x79+6158-0x1823
<operator>.subtraction 0x4ac+6207-0x1cea
<operator>.addition 0x79+6158
<operator>.addition 0x4ac+6207
<operator>.addressOf &ReplacementFor_N
<operator>.addressOf &\012ReplacementFor_D
<operator>.addressOf &ReplacementFor_G
>>>PDG&78 0->3 0->4 0->5 0->6 0->8 0->10 0->11 0->13 0->14 0->15 0->16 0->17 0->18 0->19 0->20 0->21 0->24 0->25 0->26 0->27 0->28 0->29 0->31 0->32 0->33 0->34 0->35 0->36 0->37 0->38 0->39 0->40 0->43 0->44 0->45 0->46 0->48 0->49 0->50 0->51 0->53 0->54 0->55 0->56 0->58 0->59 0->60 0->62 0->64 0->65 0->66 0->67 0->68 0->69 0->70 0->71 0->72 0->73 0->74 2->1 2->1 2->1 3->1 3->4 4->1 4->1 4->1 4->4 4->5 4->5 4->8 4->9 4->10 4->10 4->12 4->15 4->16 4->16 4->20 4->21 4->22 4->25 4->26 4->32 4->37 4->75 4->76 4->77 5->1 5->4 6->1 6->2 6->2 7->1 7->1 7->4 8->1 8->1 8->1 8->58 9->1 9->1 9->1 9->13 10->1 10->1 12->1 12->1 12->1 12->17 12->30 12->41 12->43 12->48 12->53 13->1 13->1 13->1 13->18 14->1 14->7 14->7 15->1 15->9 15->9 16->1 17->1 18->1 21->1 21->10 21->10 21->16 21->16 22->1 22->1 22->12 22->12 22->23 22->28 22->34 22->39 23->1 23->1 23->12 23->12 24->1 24->13 24->13 26->1 26->1 26->22 26->22 26->27 26->28 26->33 26->38 26->43 27->1 27->1 27->22 27->22 27->29 27->44 27->46 27->59 28->1 28->1 28->23 28->23 28->26 28->29 28->35 28->40 28->43 29->1 29->1 29->23 29->23 29->27 29->44 29->46 29->59 30->1 30->1 30->1 30->13 30->24 30->31 30->36 30->47 30->57 30->59 30->64 30->68 32->1 32->26 32->26 33->1 33->27 33->27 34->1 34->28 34->28 35->1 35->29 35->29 36->1 41->1 41->1 41->30 41->30 41->42 41->45 41->50 41->55 42->1 42->1 42->30 42->30 43->1 43->1 43->26 43->41 43->41 43->44 43->45 43->49 43->54 43->60 43->67 44->1 44->1 44->27 44->29 44->41 44->41 44->46 44->59 45->1 45->1 45->26 45->42 45->42 45->46 45->51 45->56 45->60 45->67 46->1 46->1 46->27 46->29 46->42 46->42 46->44 46->59 47->1 47->1 47->52 47->58 47->61 47->66 47->67 47->70 47->71 47->73 48->1 48->43 48->43 49->1 49->44 49->44 50->1 50->45 50->45 51->1 51->46 51->46 52->1 52->1 52->58 57->1 57->1 57->47 57->47 58->1 58->1 58->1 58->8 58->62 58->63 58->72 58->74 59->1 59->1 59->27 59->29 59->44 59->46 59->57 59->57 59->60 59->65 59->69 60->1 60->1 60->26 60->57 60->57 60->67 61->1 61->1 61->52 61->52 62->1 63->1 63->1 63->13 64->1 64->59 64->59 65->1 65->60 65->60 66->1 66->61 66->61 67->1 67->1 67->26 67->61 67->61 71->1 71->67 71->67 72->1 72->63 72->63
>>>Token void main ( ) { int ReplacementFor_n , i , ReplacementFor_N , ReplacementFor_G , ReplacementFor_D , ReplacementFor_k , ReplacementFor_f = ( 0x926 + 6549 - 0x22bb ) , val ; double l ; scanf ( " \x25 \x64 " , & ReplacementFor_n ) ; for ( i = ( 0x2183 + 880 - 0x24f3 ) ; i < ReplacementFor_n ; i ++ ) { scanf ( " \x25 \x64 \x25 \x64 \x25 \x64 " , & ReplacementFor_N , & ReplacementFor_D , & ReplacementFor_G ) ; ReplacementFor_f = ( 0xf5a + 4909 - 0x2287 ) ; printf ( " \x43 \x61 \x73 \x65 \x20 \x23 \x25 \x64 \x3a \x20 " , i + ( 0xf3 + 1881 - 0x84b ) ) ; if ( ( ReplacementFor_D == ( 0x423 + 5884 - 0x1b1f ) && ReplacementFor_G == ( 0x1154 + 4243 - 0x2183 ) ) || ( ReplacementFor_D > ( 0x526 + 480 - 0x706 ) && ReplacementFor_G == ( 0xc27 + 5175 - 0x205e ) ) ) { printf ( " \x42 \x72 \x6f \x6b \x65 \x6e " " \n " ) ; continue ; } else if ( ( ReplacementFor_D == ( 0x15ed + 3242 - 0x2297 ) && ReplacementFor_G >= ( 0x7a7 + 2369 - 0x10e8 ) ) || ( ReplacementFor_D == ( 0x15c9 + 1200 - 0x1a15 ) && ReplacementFor_G == ( 0x146 + 3298 - 0xdc4 ) ) ) { printf ( " \x50 \x6f \x73 \x73 \x69 \x62 \x6c \x65 " " \n " ) ; continue ; } else if ( ! ( ReplacementFor_G == ( 0xe25 + 4583 - 0x1fa8 ) && ReplacementFor_D < ( 0xcd9 + 1070 - 0x10a3 ) ) ) { val = ( 0x551 + 4051 - 0x14c0 ) / ReplacementFor_gcd ( ReplacementFor_D , ( 0x79 + 6158 - 0x1823 ) ) ; if ( val <= ReplacementFor_N ) { printf ( " \x50 \x6f \x73 \x73 \x69 \x62 \x6c \x65 " " \n " ) ; ReplacementFor_f = ( 0x4ac + 6207 - 0x1cea ) ; } } if ( ReplacementFor_f == ( 0xf05 + 1432 - 0x149d ) ) printf ( " \x42 \x72 \x6f \x6b \x65 \x6e " " \n " ) ; } }
>>>Func
METHOD main
METHOD_RETURN int
scanf scanf("\x25\x64",&T)
RETURN return(0x1509+572-0x1745); return(0x1509+572-0x1745);
<operator>.lessEqualsThan t<=T
<operator>.postIncrement t++
<operator>.subtraction 0x1509+572-0x1745
<operator>.assignment t=(0xd3c+2327-0x1652)
scanf scanf("\x25\x64",&ReplacementFor_C)
scanf scanf("\x25\x64",&\012ReplacementFor_D)
scanf scanf("\x25\x64",&ReplacementFor_N)
scanf scanf("\x20\x25\x73",buf)
<operator>.assignment buf[ReplacementFor_N]='\0'
fprintf fprintf(stderr "\x53\x20\x3d\x20\x25\x73" "\n" S.\012ReplacementFor_c_str())
<operator>.assignment ReplacementFor_n=(0x20b6+1168-0x2546)
printf printf(\012"\x43\x61\x73\x65\x20\x23\x25\x64\x3a\x20\x5b",t)
printf printf("\x5d" "\n")
<operator>.lessThan ReplacementFor_c<ReplacementFor_C
<operator>.postIncrement ReplacementFor_c++
<operator>.lessThan ReplacementFor_d<\012ReplacementFor_D
<operator>.postIncrement ReplacementFor_d++
<operator>.lessThan i<ReplacementFor_D
<operator>.postIncrement i++
<operator>.lessThan ReplacementFor_n<S.ReplacementFor_length()
<operator>.lessThan ReplacementFor_n<S.ReplacementFor_length()
<operator>.postIncrement ReplacementFor_n\012++
<operator>.addition 0x1509+572
<operator>.subtraction 0xd3c+2327-0x1652
<operator>.assignment ReplacementFor_c\012=(0xc7b+810-0xfa5)
scanf scanf("\x20\x25\x73",buf)
<operator>.assignment ReplacementFor_Cs[\012ReplacementFor_c].ReplacementFor_x=buf[(0x27+5004-0x13b3)]
<operator>.assignment ReplacementFor_Cs[\012ReplacementFor_c].ReplacementFor_y=buf[(0x1ab+4970-0x1514)]
<operator>.assignment ReplacementFor_Cs[\012ReplacementFor_c].ReplacementFor_z=buf[(0x10+5274-0x14a8)]
fprintf fprintf(stderr,\012"\x2d\x20\x43\x73\x5b\x25\x64\x5d\x20\x3d\x20\x25\x63\x25\x63\x25\x63" "\n",\012ReplacementFor_c,ReplacementFor_Cs[ReplacementFor_c].ReplacementFor_x,\012ReplacementFor_Cs[ReplacementFor_c].ReplacementFor_y,ReplacementFor_Cs[\012ReplacementFor_c].ReplacementFor_z)
<operator>.assignment ReplacementFor_d=(0xf62+2113-0x17a3)
scanf scanf(\012"\x20\x25\x73",buf)
<operator>.assignment ReplacementFor_Ds[ReplacementFor_d].ReplacementFor_x=buf[\012(0x26c+259-0x36f)]
<operator>.assignment ReplacementFor_Ds[ReplacementFor_d].ReplacementFor_y=buf[\012(0x18c6+3431-0x262c)]
fprintf fprintf(stderr,\012"\x2d\x20\x44\x73\x5b\x25\x64\x5d\x20\x3d\x20\x25\x63\x25\x63" "\n",\012ReplacementFor_d,ReplacementFor_Ds[ReplacementFor_d].ReplacementFor_x,\012ReplacementFor_Ds[ReplacementFor_d].ReplacementFor_y)
ReplacementFor_c_str S.\012ReplacementFor_c_str()
<operator>.assignment i=\012(0xc4d+6414-0x255b)
<operator>.assignment ReplacementFor_Db[i]=-\012(0xb3+4442-0x120c)
<operator>.subtraction 0x20b6+1168-0x2546
fprintf fprintf(stderr,\012"\x21\x21\x21\x20\x53\x5b\x25\x64\x5d\x3d\x25\x63" "\n",ReplacementFor_n,S[\012ReplacementFor_n])
<operator>.assignment ReplacementFor_changed=false
<operator>.assignment ReplacementFor_Cflag=(ReplacementFor_n>(0xa4+2527-0xa83))
<operator>.postIncrement ReplacementFor_n++
<operator>.assignment ReplacementFor_n=\012(0x1ed9+189-0x1f96)
printf printf(\012"\x25\x63",S[ReplacementFor_n])
<operator>.addition 0xd3c+2327
<operator>.notEquals ReplacementFor_Cs[ReplacementFor_c].\012ReplacementFor_x!=ReplacementFor_Cs[ReplacementFor_c].ReplacementFor_y
<operator>.notEquals ReplacementFor_Ds[\012ReplacementFor_d].ReplacementFor_x!=ReplacementFor_Ds[ReplacementFor_d].\012ReplacementFor_y
<operator>.addition 0x20b6+1168
ReplacementFor_length S.ReplacementFor_length()
<operator>.lessThan i<ReplacementFor_D
<operator>.postIncrement i++
IDENTIFIER ReplacementFor_Cflag while (ReplacementFor_Cflag)
IDENTIFIER ReplacementFor_changed if (ReplacementFor_changed)
<operator>.lessThan ReplacementFor_d<ReplacementFor_D
<operator>.postIncrement ReplacementFor_d++
IDENTIFIER ReplacementFor_changed if (ReplacementFor_changed)
<operator>.lessThan ReplacementFor_d<ReplacementFor_D
<operator>.postIncrement ReplacementFor_d++
ReplacementFor_length S.ReplacementFor_length()
<operator>.greaterThan ReplacementFor_n>(0x12f5+3176-0x1f5d)
<operator>.subtraction 0xc7b+810-0xfa5
<operator>.postIncrement ReplacementFor_c++
<operator>.postIncrement ReplacementFor_C++
<operator>.assignment ReplacementFor_Cs[ReplacementFor_c].\012ReplacementFor_x=buf[(0x173a+3834-0x2633)]
<operator>.assignment ReplacementFor_Cs[ReplacementFor_c].\012ReplacementFor_y=buf[(0xe2a+2504-0x17f2)]
<operator>.assignment ReplacementFor_Cs[ReplacementFor_c].\012ReplacementFor_z=buf[(0x1016+2526-0x19f2)]
fprintf fprintf(stderr,\012"\x2b\x20\x43\x73\x5b\x25\x64\x5d\x20\x3d\x20\x25\x63\x25\x63\x25\x63" "\n",\012ReplacementFor_c,ReplacementFor_Cs[ReplacementFor_c].ReplacementFor_x,\012ReplacementFor_Cs[ReplacementFor_c].ReplacementFor_y,ReplacementFor_Cs[\012ReplacementFor_c].ReplacementFor_z)
<operator>.subtraction 0xf62+2113-0x17a3
<operator>.postIncrement ReplacementFor_d++
<operator>.postIncrement ReplacementFor_D++
<operator>.assignment ReplacementFor_Ds[\012ReplacementFor_d].ReplacementFor_x=buf[(0x174f+3381-0x2483)]
<operator>.assignment ReplacementFor_Ds[\012ReplacementFor_d].ReplacementFor_y=buf[(0x70b+892-0xa87)]
fprintf fprintf(stderr,\012"\x2b\x20\x44\x73\x5b\x25\x64\x5d\x20\x3d\x20\x25\x63\x25\x63" "\n",\012ReplacementFor_d,ReplacementFor_Ds[ReplacementFor_d].ReplacementFor_x,\012ReplacementFor_Ds[ReplacementFor_d].ReplacementFor_y)
<operator>.subtraction 0xc4d+6414-0x255b
<operator>.minus -\012(0xb3+4442-0x120c)
<operator>.assignment i=(0xf1d+758-0x1213)
<operator>.greaterThan ReplacementFor_n>(0xa4+2527-0xa83)
<operator>.assignment ReplacementFor_Cflag=false
<operator>.assignment ReplacementFor_n=(0x631+7528-0x2399)
<operator>.assignment ReplacementFor_d=(0x44+5834-0x170e)
<operator>.assignment ReplacementFor_n=(0x1179+4331-0x2264)
<operator>.assignment ReplacementFor_d=(0xa75+1715-0x1128)
<operator>.subtraction 0x1ed9+189-0x1f96
printf printf("\x2c\x20")
<operator>.addition 0xc7b+810
<operator>.subtraction 0x27+5004-0x13b3
<operator>.subtraction 0x1ab+4970-0x1514
<operator>.subtraction 0x10+5274-0x14a8
<operator>.addition 0xf62+2113
<operator>.subtraction 0x26c+259-0x36f
<operator>.subtraction 0x18c6+3431-0x262c
<operator>.addition 0xc4d+6414
<operator>.subtraction 0xb3+4442-0x120c
<operator>.greaterEqualsThan ReplacementFor_Db[i]>=ReplacementFor_n
<operator>.subtraction 0xa4+2527-0xa83
<operator>.lessThan ReplacementFor_c<ReplacementFor_C
<operator>.postIncrement ReplacementFor_c++
<operator>.logicalAnd ReplacementFor_Ds[ReplacementFor_d].ReplacementFor_y==S[\012ReplacementFor_n]&&ReplacementFor_Db[ReplacementFor_d]>=(0xb7b+45-0xba8)
<operator>.logicalAnd ReplacementFor_Ds[ReplacementFor_d].ReplacementFor_x==S[\012ReplacementFor_n]&&ReplacementFor_Db[ReplacementFor_d]<(0x1545+3471-0x22d4)
<operator>.addition 0x1ed9+189
<operator>.subtraction 0x12f5+3176-0x1f5d
<operator>.addition 0x27+5004
<operator>.addition 0x1ab+4970
<operator>.addition 0x10+5274
<operator>.addition 0x26c+259
<operator>.addition 0x18c6+3431
<operator>.addition 0xb3+4442
<operator>.subtraction 0xf1d+758-0x1213
<operator>.assignment ReplacementFor_Db[i]=-\012(0x1888+1195-0x1d32)
<operator>.addition 0xa4+2527
<operator>.assignment ReplacementFor_c=\012(0x4d1+7409-0x21c2)
<operator>.subtraction 0x631+7528-0x2399
<operator>.subtraction 0x44+5834-0x170e
fprintf fprintf(stderr \012"\x21\x21\x21\x20\x25\x73\x20\x28\x44\x62\x5b\x25\x64\x5d\x3d\x25\x64\x2c\x20\x6e\x3d\x25\x64\x29\x20\x2d\x3e\x20"\012 S.ReplacementFor_c_str(),ReplacementFor_d,ReplacementFor_Db[ReplacementFor_d],\012ReplacementFor_n)
erase S.erase((0x1698+2226-0x1f4a) ReplacementFor_n+\012(0x6b4+5884-0x1daf))
fprintf fprintf(stderr "\x25\x73" "\n" S.ReplacementFor_c_str())
<operator>.assignment ReplacementFor_n=(0x225f+793-0x2578)
<operator>.assignment ReplacementFor_changed=true
<operator>.subtraction 0x1179+4331-0x2264
<operator>.subtraction 0xa75+1715-0x1128
<operator>.assignment ReplacementFor_Db[ReplacementFor_d]=ReplacementFor_n
fprintf fprintf(stderr,\012"\x21\x21\x21\x20\x44\x62\x5b\x25\x64\x5d\x3d\x25\x64" "\n",ReplacementFor_d,\012ReplacementFor_Db[ReplacementFor_d])
<operator>.addition 0x12f5+3176
<operator>.subtraction 0x173a+3834-0x2633
<operator>.subtraction 0xe2a+2504-0x17f2
<operator>.subtraction 0x1016+2526-0x19f2
<operator>.subtraction 0x174f+3381-0x2483
<operator>.subtraction 0x70b+892-0xa87
<operator>.addition 0xf1d+758
<operator>.logicalAnd ReplacementFor_Cs[ReplacementFor_c].ReplacementFor_x==S[ReplacementFor_n-\012(0x10f9+3475-0x1e8b)]&&ReplacementFor_Cs[ReplacementFor_c].ReplacementFor_y==S[\012ReplacementFor_n]
<operator>.addition 0x631+7528
<operator>.addition 0x44+5834
<operator>.equals ReplacementFor_Ds[ReplacementFor_d].ReplacementFor_y==S[\012ReplacementFor_n]
<operator>.greaterEqualsThan ReplacementFor_Db[ReplacementFor_d]>=(0xb7b+45-0xba8)
<operator>.addition 0x1179+4331
<operator>.addition 0xa75+1715
<operator>.equals ReplacementFor_Ds[ReplacementFor_d].ReplacementFor_x==S[\012ReplacementFor_n]
<operator>.lessThan ReplacementFor_Db[ReplacementFor_d]<(0x1545+3471-0x22d4)
<operator>.addition 0x173a+3834
<operator>.addition 0xe2a+2504
<operator>.addition 0x1016+2526
<operator>.addition 0x174f+3381
<operator>.addition 0x70b+892
<operator>.minus -\012(0x1888+1195-0x1d32)
<operator>.subtraction 0x4d1+7409-0x21c2
fprintf fprintf(stderr \012"\x21\x21\x21\x20\x25\x73\x20\x28\x43\x73\x5b\x25\x64\x5d\x3d\x25\x63\x25\x63\x25\x63\x2c\x20\x6e\x3d\x25\x64\x29\x20\x2d\x3e\x20"\012 S.ReplacementFor_c_str(),ReplacementFor_c,ReplacementFor_Cs[ReplacementFor_c].\012ReplacementFor_x,ReplacementFor_Cs[ReplacementFor_c].ReplacementFor_y,\012ReplacementFor_Cs[ReplacementFor_c].ReplacementFor_z,ReplacementFor_n)
erase S.erase(\012ReplacementFor_n (0x1bc+6627-0x1b9e))
<operator>.postDecrement ReplacementFor_n--
<operator>.assignment S[ReplacementFor_n]=\012ReplacementFor_Cs[ReplacementFor_c].ReplacementFor_z
fprintf fprintf(stderr \012"\x25\x73" "\n" S.ReplacementFor_c_str())
<operator>.assignment ReplacementFor_changed=true
<operator>.subtraction 0xb7b+45-0xba8
ReplacementFor_c_str S.ReplacementFor_c_str()
<operator>.subtraction 0x1698+2226-0x1f4a
<operator>.addition ReplacementFor_n+\012(0x6b4+5884-0x1daf)
ReplacementFor_c_str S.ReplacementFor_c_str()
<operator>.subtraction 0x225f+793-0x2578
<operator>.subtraction 0x1545+3471-0x22d4
<operator>.subtraction 0x1888+1195-0x1d32
<operator>.addition 0x4d1+7409
<operator>.equals ReplacementFor_Cs[ReplacementFor_c].ReplacementFor_x==S[ReplacementFor_n-\012(0x10f9+3475-0x1e8b)]
<operator>.equals ReplacementFor_Cs[ReplacementFor_c].ReplacementFor_y==S[\012ReplacementFor_n]
<operator>.addition 0xb7b+45
<operator>.addition 0x1698+2226
<operator>.subtraction 0x6b4+5884-0x1daf
<operator>.addition 0x225f+793
<operator>.addition 0x1545+3471
<operator>.addition 0x1888+1195
ReplacementFor_c_str S.ReplacementFor_c_str()
<operator>.subtraction 0x1bc+6627-0x1b9e
ReplacementFor_c_str S.ReplacementFor_c_str()
<operator>.addition 0x6b4+5884
<operator>.subtraction ReplacementFor_n-\012(0x10f9+3475-0x1e8b)
<operator>.addition 0x1bc+6627
<operator>.subtraction 0x10f9+3475-0x1e8b
<operator>.addition 0x10f9+3475
UNKNOWN std: :\012ReplacementFor_string S=buf; std: :\012ReplacementFor_string S=buf;
<operator>.addressOf &ReplacementFor_C
<operator>.addressOf &\012ReplacementFor_D
<operator>.addressOf &ReplacementFor_N
<operator>.indirectIndexAccess buf[ReplacementFor_N]
<operator>.fieldAccess S.\012ReplacementFor_c_str
<operator>.fieldAccess ReplacementFor_Cs[\012ReplacementFor_c].ReplacementFor_x
<operator>.indirectIndexAccess buf[(0x27+5004-0x13b3)]
<operator>.fieldAccess ReplacementFor_Cs[\012ReplacementFor_c].ReplacementFor_y
<operator>.indirectIndexAccess buf[(0x1ab+4970-0x1514)]
<operator>.fieldAccess ReplacementFor_Cs[\012ReplacementFor_c].ReplacementFor_z
<operator>.indirectIndexAccess buf[(0x10+5274-0x14a8)]
<operator>.fieldAccess ReplacementFor_Cs[ReplacementFor_c].ReplacementFor_x
<operator>.fieldAccess ReplacementFor_Cs[ReplacementFor_c].ReplacementFor_y
<operator>.fieldAccess ReplacementFor_Cs[\012ReplacementFor_c].ReplacementFor_z
<operator>.fieldAccess ReplacementFor_Ds[ReplacementFor_d].ReplacementFor_x
<operator>.indirectIndexAccess buf[\012(0x26c+259-0x36f)]
<operator>.fieldAccess ReplacementFor_Ds[ReplacementFor_d].ReplacementFor_y
<operator>.indirectIndexAccess buf[\012(0x18c6+3431-0x262c)]
<operator>.fieldAccess ReplacementFor_Ds[ReplacementFor_d].ReplacementFor_x
<operator>.fieldAccess ReplacementFor_Ds[ReplacementFor_d].ReplacementFor_y
FIELD_IDENTIFIER ReplacementFor_c_str ReplacementFor_c_str
<operator>.indirectIndexAccess ReplacementFor_Db[i]
<operator>.fieldAccess S.ReplacementFor_length
<operator>.indirectIndexAccess S[\012ReplacementFor_n]
<operator>.fieldAccess S.ReplacementFor_length
<operator>.indirectIndexAccess S[ReplacementFor_n]
<operator>.indirectIndexAccess ReplacementFor_Cs[\012ReplacementFor_c]
FIELD_IDENTIFIER ReplacementFor_x ReplacementFor_x
<operator>.indirectIndexAccess ReplacementFor_Cs[\012ReplacementFor_c]
FIELD_IDENTIFIER ReplacementFor_y ReplacementFor_y
<operator>.indirectIndexAccess ReplacementFor_Cs[\012ReplacementFor_c]
FIELD_IDENTIFIER ReplacementFor_z ReplacementFor_z
<operator>.indirectIndexAccess ReplacementFor_Cs[ReplacementFor_c]
FIELD_IDENTIFIER ReplacementFor_x ReplacementFor_x
<operator>.indirectIndexAccess ReplacementFor_Cs[ReplacementFor_c]
FIELD_IDENTIFIER ReplacementFor_y ReplacementFor_y
<operator>.indirectIndexAccess ReplacementFor_Cs[\012ReplacementFor_c]
FIELD_IDENTIFIER ReplacementFor_z ReplacementFor_z
<operator>.fieldAccess ReplacementFor_Cs[ReplacementFor_c].\012ReplacementFor_x
<operator>.fieldAccess ReplacementFor_Cs[ReplacementFor_c].ReplacementFor_y
<operator>.indirectIndexAccess ReplacementFor_Ds[ReplacementFor_d]
FIELD_IDENTIFIER ReplacementFor_x ReplacementFor_x
<operator>.indirectIndexAccess ReplacementFor_Ds[ReplacementFor_d]
FIELD_IDENTIFIER ReplacementFor_y ReplacementFor_y
<operator>.indirectIndexAccess ReplacementFor_Ds[ReplacementFor_d]
FIELD_IDENTIFIER ReplacementFor_x ReplacementFor_x
<operator>.indirectIndexAccess ReplacementFor_Ds[ReplacementFor_d]
FIELD_IDENTIFIER ReplacementFor_y ReplacementFor_y
<operator>.fieldAccess ReplacementFor_Ds[\012ReplacementFor_d].ReplacementFor_x
<operator>.fieldAccess ReplacementFor_Ds[ReplacementFor_d].\012ReplacementFor_y
FIELD_IDENTIFIER ReplacementFor_length ReplacementFor_length
FIELD_IDENTIFIER ReplacementFor_length ReplacementFor_length
<operator>.indirectIndexAccess ReplacementFor_Cs[ReplacementFor_c]
FIELD_IDENTIFIER ReplacementFor_x ReplacementFor_x
<operator>.indirectIndexAccess ReplacementFor_Cs[ReplacementFor_c]
FIELD_IDENTIFIER ReplacementFor_y ReplacementFor_y
<operator>.fieldAccess ReplacementFor_Cs[ReplacementFor_c].\012ReplacementFor_x
<operator>.indirectIndexAccess buf[(0x173a+3834-0x2633)]
<operator>.fieldAccess ReplacementFor_Cs[ReplacementFor_c].\012ReplacementFor_y
<operator>.indirectIndexAccess buf[(0xe2a+2504-0x17f2)]
<operator>.fieldAccess ReplacementFor_Cs[ReplacementFor_c].\012ReplacementFor_z
<operator>.indirectIndexAccess buf[(0x1016+2526-0x19f2)]
<operator>.fieldAccess ReplacementFor_Cs[ReplacementFor_c].ReplacementFor_x
<operator>.fieldAccess ReplacementFor_Cs[ReplacementFor_c].ReplacementFor_y
<operator>.fieldAccess ReplacementFor_Cs[\012ReplacementFor_c].ReplacementFor_z
<operator>.indirectIndexAccess ReplacementFor_Ds[\012ReplacementFor_d]
FIELD_IDENTIFIER ReplacementFor_x ReplacementFor_x
<operator>.indirectIndexAccess ReplacementFor_Ds[ReplacementFor_d]
FIELD_IDENTIFIER ReplacementFor_y ReplacementFor_y
<operator>.fieldAccess ReplacementFor_Ds[\012ReplacementFor_d].ReplacementFor_x
<operator>.indirectIndexAccess buf[(0x174f+3381-0x2483)]
<operator>.fieldAccess ReplacementFor_Ds[\012ReplacementFor_d].ReplacementFor_y
<operator>.indirectIndexAccess buf[(0x70b+892-0xa87)]
<operator>.fieldAccess ReplacementFor_Ds[ReplacementFor_d].ReplacementFor_x
<operator>.fieldAccess ReplacementFor_Ds[ReplacementFor_d].ReplacementFor_y
<operator>.indirectIndexAccess ReplacementFor_Cs[ReplacementFor_c]
FIELD_IDENTIFIER ReplacementFor_x ReplacementFor_x
<operator>.indirectIndexAccess ReplacementFor_Cs[ReplacementFor_c]
FIELD_IDENTIFIER ReplacementFor_y ReplacementFor_y
<operator>.indirectIndexAccess ReplacementFor_Cs[ReplacementFor_c]
FIELD_IDENTIFIER ReplacementFor_z ReplacementFor_z
<operator>.indirectIndexAccess ReplacementFor_Cs[ReplacementFor_c]
FIELD_IDENTIFIER ReplacementFor_x ReplacementFor_x
<operator>.indirectIndexAccess ReplacementFor_Cs[ReplacementFor_c]
FIELD_IDENTIFIER ReplacementFor_y ReplacementFor_y
<operator>.indirectIndexAccess ReplacementFor_Cs[\012ReplacementFor_c]
FIELD_IDENTIFIER ReplacementFor_z ReplacementFor_z
<operator>.indirectIndexAccess ReplacementFor_Ds[\012ReplacementFor_d]
FIELD_IDENTIFIER ReplacementFor_x ReplacementFor_x
<operator>.indirectIndexAccess ReplacementFor_Ds[\012ReplacementFor_d]
FIELD_IDENTIFIER ReplacementFor_y ReplacementFor_y
<operator>.indirectIndexAccess ReplacementFor_Ds[ReplacementFor_d]
FIELD_IDENTIFIER ReplacementFor_x ReplacementFor_x
<operator>.indirectIndexAccess ReplacementFor_Ds[ReplacementFor_d]
FIELD_IDENTIFIER ReplacementFor_y ReplacementFor_y
<operator>.indirectIndexAccess ReplacementFor_Db[i]
<operator>.indirectIndexAccess ReplacementFor_Db[i]
<operator>.fieldAccess ReplacementFor_Ds[ReplacementFor_d].ReplacementFor_y
<operator>.indirectIndexAccess S[\012ReplacementFor_n]
<operator>.indirectIndexAccess ReplacementFor_Db[ReplacementFor_d]
<operator>.indirectIndexAccess ReplacementFor_Db[ReplacementFor_d]
<operator>.fieldAccess S.erase
<operator>.fieldAccess ReplacementFor_Ds[ReplacementFor_d].ReplacementFor_x
<operator>.indirectIndexAccess S[\012ReplacementFor_n]
<operator>.indirectIndexAccess ReplacementFor_Db[ReplacementFor_d]
<operator>.indirectIndexAccess ReplacementFor_Db[ReplacementFor_d]
<operator>.indirectIndexAccess ReplacementFor_Db[ReplacementFor_d]
<operator>.indirectIndexAccess ReplacementFor_Ds[ReplacementFor_d]
FIELD_IDENTIFIER ReplacementFor_y ReplacementFor_y
<operator>.fieldAccess S.ReplacementFor_c_str
FIELD_IDENTIFIER erase erase
<operator>.fieldAccess S.ReplacementFor_c_str
<operator>.indirectIndexAccess ReplacementFor_Ds[ReplacementFor_d]
FIELD_IDENTIFIER ReplacementFor_x ReplacementFor_x
<operator>.fieldAccess ReplacementFor_Cs[ReplacementFor_c].ReplacementFor_x
<operator>.indirectIndexAccess S[ReplacementFor_n-\012(0x10f9+3475-0x1e8b)]
<operator>.fieldAccess ReplacementFor_Cs[ReplacementFor_c].ReplacementFor_y
<operator>.indirectIndexAccess S[\012ReplacementFor_n]
<operator>.fieldAccess ReplacementFor_Cs[ReplacementFor_c].\012ReplacementFor_x
<operator>.fieldAccess ReplacementFor_Cs[ReplacementFor_c].ReplacementFor_y
<operator>.fieldAccess ReplacementFor_Cs[ReplacementFor_c].ReplacementFor_z
<operator>.fieldAccess S.erase
<operator>.indirectIndexAccess S[ReplacementFor_n]
<operator>.fieldAccess ReplacementFor_Cs[ReplacementFor_c].ReplacementFor_z
FIELD_IDENTIFIER ReplacementFor_c_str ReplacementFor_c_str
FIELD_IDENTIFIER ReplacementFor_c_str ReplacementFor_c_str
<operator>.indirectIndexAccess ReplacementFor_Cs[ReplacementFor_c]
FIELD_IDENTIFIER ReplacementFor_x ReplacementFor_x
<operator>.indirectIndexAccess ReplacementFor_Cs[ReplacementFor_c]
FIELD_IDENTIFIER ReplacementFor_y ReplacementFor_y
<operator>.fieldAccess S.ReplacementFor_c_str
<operator>.indirectIndexAccess ReplacementFor_Cs[ReplacementFor_c]
FIELD_IDENTIFIER ReplacementFor_x ReplacementFor_x
<operator>.indirectIndexAccess ReplacementFor_Cs[ReplacementFor_c]
FIELD_IDENTIFIER ReplacementFor_y ReplacementFor_y
<operator>.indirectIndexAccess ReplacementFor_Cs[ReplacementFor_c]
FIELD_IDENTIFIER ReplacementFor_z ReplacementFor_z
FIELD_IDENTIFIER erase erase
<operator>.indirectIndexAccess ReplacementFor_Cs[ReplacementFor_c]
FIELD_IDENTIFIER ReplacementFor_z ReplacementFor_z
<operator>.fieldAccess S.ReplacementFor_c_str
FIELD_IDENTIFIER ReplacementFor_c_str ReplacementFor_c_str
FIELD_IDENTIFIER ReplacementFor_c_str ReplacementFor_c_str
>>>PDG&325 0->2 0->4 0->5 0->6 0->8 0->9 0->10 0->11 0->12 0->13 0->15 0->16 0->17 0->18 0->19 0->20 0->21 0->22 0->23 0->24 0->25 0->26 0->27 0->29 0->33 0->35 0->38 0->42 0->43 0->44 0->46 0->48 0->49 0->52 0->54 0->55 0->56 0->57 0->58 0->59 0->60 0->61 0->62 0->64 0->65 0->66 0->67 0->71 0->72 0->73 0->74 0->77 0->78 0->81 0->82 0->87 0->88 0->89 0->90 0->91 0->92 0->93 0->94 0->95 0->96 0->97 0->98 0->99 0->100 0->101 0->104 0->105 0->106 0->107 0->108 0->109 0->110 0->111 0->112 0->114 0->116 0->117 0->118 0->119 0->120 0->122 0->123 0->124 0->125 0->126 0->127 0->128 0->129 0->130 0->131 0->132 0->133 0->135 0->136 0->139 0->140 0->143 0->144 0->145 0->146 0->147 0->149 0->150 0->151 0->152 0->154 0->155 0->156 0->158 0->159 0->161 0->162 0->163 0->164 0->167 0->168 0->169 0->170 0->171 0->172 0->174 0->176 0->177 0->178 0->179 0->180 2->1 2->4 3->1 4->1 4->1 4->1 4->4 4->5 4->8 4->9 4->10 4->11 4->12 4->13 4->14 4->15 4->15 4->16 4->17 4->19 4->21 4->23 4->24 4->28 4->34 4->39 4->40 4->42 4->47 4->52 4->53 4->63 4->65 4->72 4->78 4->87 4->89 4->93 4->96 4->104 4->181 4->182 4->183 4->184 4->185 4->186 4->202 4->204 4->206 4->232 4->233 5->1 5->4 6->1 6->1 6->3 7->1 7->1 7->4 8->1 8->17 8->67 8->100 9->1 9->19 9->21 9->54 9->58 9->61 9->74 10->1 11->1 11->29 11->35 12->1 12->1 12->11 12->29 12->35 13->1 13->1 13->1 13->33 13->38 13->43 14->1 14->1 14->23 15->1 15->5 16->1 17->1 17->1 17->1 17->8 17->17 17->18 17->29 17->30 17->31 17->32 17->33 17->33 17->50 17->67 17->90 17->91 17->92 17->100 17->106 17->107 17->108 17->187 17->188 17->189 17->190 17->191 17->192 17->193 17->194 17->195 17->208 17->209 17->210 17->211 17->212 17->213 17->214 17->215 17->216 17->217 17->218 17->219 17->220 17->221 17->234 17->235 17->236 17->237 18->1 18->17 19->1 19->1 19->19 19->20 19->21 19->35 19->36 19->37 19->38 19->38 19->51 19->74 19->94 19->95 19->109 19->110 19->196 19->197 19->198 19->199 19->200 19->201 19->222 19->223 19->224 19->225 19->226 19->227 19->228 19->229 19->230 19->231 19->247 19->248 19->249 19->250 20->1 20->19 21->1 21->1 21->1 21->9 21->19 21->21 21->22 21->22 21->41 21->54 21->79 21->97 21->111 21->203 22->1 22->21 23->23 23->43 23->43 23->44 23->45 23->46 23->53 23->54 23->58 23->61 23->80 23->81 23->82 23->83 23->84 23->85 23->86 23->99 23->100 23->112 23->114 23->115 23->116 23->117 23->123 23->124 23->133 23->135 23->136 23->139 23->140 23->149 23->164 23->204 23->205 23->232 24->1 24->1 24->1 24->24 24->25 24->48 24->63 24->64 24->64 24->105 24->127 24->206 24->207 24->233 25->1 25->24 27->1 27->7 27->7 28->1 28->1 28->17 29->11 29->30 29->31 29->32 29->35 29->68 29->69 29->70 30->1 30->1 31->1 31->1 32->1 32->1 32->33 33->1 33->13 33->18 33->38 33->50 33->66 33->71 34->1 34->1 34->19 35->11 35->29 35->36 35->37 35->75 35->76 36->1 36->1 36->38 37->1 37->1 37->38 38->1 38->13 38->20 38->73 38->77 39->1 39->13 39->157 39->160 39->173 39->175 40->1 40->1 40->21 41->1 41->1 41->1 41->98 42->1 42->14 42->14 43->1 43->1 43->1 43->13 43->33 43->38 43->81 43->98 43->118 43->126 43->137 43->141 43->150 43->166 44->1 44->1 44->1 45->1 45->1 45->1 46->1 46->23 47->1 47->1 47->24 48->1 48->1 50->1 50->66 50->67 50->68 50->69 50->70 50->71 50->128 50->129 50->130 50->143 50->144 50->145 50->238 50->239 50->240 50->241 50->242 50->243 50->244 50->245 50->246 50->257 50->258 50->259 50->260 50->261 50->262 50->263 50->264 50->265 50->266 50->267 50->268 51->1 51->73 51->74 51->75 51->76 51->77 51->131 51->132 51->146 51->147 51->251 51->252 51->253 51->254 51->255 51->256 51->269 51->270 51->271 51->272 51->273 51->274 51->275 51->276 53->23 53->63 54->1 54->1 54->1 54->9 54->19 54->54 54->55 54->55 54->58 54->98 54->277 55->1 55->54 58->1 58->1 58->1 58->9 58->19 58->54 58->59 58->61 58->102 58->118 58->137 58->279 58->280 58->289 58->290 59->1 59->58 61->1 61->1 61->1 61->9 61->19 61->54 61->61 61->62 61->62 61->103 61->126 61->141 61->284 61->285 61->294 61->295 62->1 62->61 63->1 63->24 63->53 64->1 64->1 64->25 64->88 65->1 65->28 65->28 66->71 67->1 67->17 68->1 68->1 69->1 69->1 70->1 70->1 71->1 71->13 71->18 71->33 71->38 72->1 72->34 72->34 73->77 74->1 74->19 75->1 75->1 76->1 76->1 77->1 77->13 77->20 77->38 78->1 78->40 78->40 79->1 79->41 80->1 80->1 80->54 81->1 81->45 81->45 81->46 81->118 81->125 81->177 82->1 82->1 82->1 83->1 83->1 83->23 84->1 84->1 84->58 85->1 85->1 85->23 86->1 86->1 86->61 87->1 87->47 87->47 88->1 90->1 91->1 92->1 94->1 95->1 97->1 97->79 97->79 98->1 98->1 98->81 98->113 98->148 98->163 98->172 98->278 99->1 99->81 99->81 100->1 100->1 100->1 100->8 100->17 100->100 100->101 100->101 100->134 100->150 100->165 100->177 100->179 100->180 100->296 100->297 100->308 100->309 101->1 101->100 102->1 102->1 102->1 102->58 102->59 102->118 102->119 102->120 102->121 102->122 102->157 102->158 102->159 102->160 102->161 102->168 102->169 102->170 102->176 102->282 102->283 102->291 102->292 102->293 102->306 102->307 103->1 103->1 103->1 103->125 103->126 103->287 103->288 105->1 105->64 105->64 112->1 112->80 112->80 113->1 113->1 113->1 113->98 115->1 115->1 115->100 116->1 116->83 116->83 117->1 117->84 117->84 118->1 118->1 118->1 118->119 118->120 118->138 118->142 118->159 119->1 119->1 119->1 119->1 119->151 120->1 120->1 120->1 120->13 120->33 120->38 120->43 120->126 121->1 121->1 121->46 121->125 122->1 122->1 122->1 123->1 123->85 123->85 124->1 124->86 124->86 125->1 125->126 126->1 126->1 126->1 126->13 126->33 126->38 126->43 126->62 126->118 126->138 126->142 128->1 129->1 130->1 131->1 132->1 134->1 134->1 134->1 134->150 134->151 134->152 134->153 134->154 134->155 134->173 134->174 134->175 134->178 134->300 134->301 134->302 134->303 134->304 134->305 134->312 134->313 134->314 134->315 134->316 134->317 134->318 134->319 134->320 134->321 134->322 134->323 134->324 137->1 137->43 137->102 137->102 137->138 137->141 137->156 137->167 137->281 138->1 138->1 138->102 138->102 138->118 138->142 141->1 141->43 141->103 141->103 141->142 141->162 141->171 141->286 142->1 142->1 142->103 142->103 142->118 142->138 148->1 148->113 149->1 149->115 149->115 150->1 150->101 150->151 150->153 150->154 151->1 151->1 151->1 151->119 151->152 152->1 152->46 152->118 152->125 152->177 153->1 153->1 153->48 154->1 154->1 154->1 154->13 154->33 154->38 154->43 154->118 154->126 154->150 155->1 155->1 155->1 156->1 156->138 156->138 157->118 157->160 158->1 158->119 158->119 159->1 160->1 160->39 160->120 160->157 160->173 161->1 161->121 161->121 162->1 162->142 162->142 163->1 163->148 163->148 165->1 165->134 165->134 165->166 165->298 165->299 165->310 165->311 166->1 166->43 166->134 166->134 166->137 166->141 166->150 169->1 169->119 169->119 169->159 169->159 173->150 173->175 174->1 174->151 174->151 175->1 175->39 175->154 175->157 175->173 177->1 177->46 177->118 177->125 177->150 179->1 179->177 179->177
>>>Token int main ( ) { int T ; scanf ( " \x25 \x64 " , & T ) ; for ( int t = ( 0xd3c + 2327 - 0x1652 ) ; t <= T ; t ++ ) { int ReplacementFor_C ; scanf ( " \x25 \x64 " , & ReplacementFor_C ) ; ReplacementFor_Comb ReplacementFor_Cs [ ( 0xdb0 + 3402 - 0x1af8 ) * ReplacementFor_C ] ; for ( int ReplacementFor_c = ( 0xc7b + 810 - 0xfa5 ) ; ReplacementFor_c < ReplacementFor_C ; ReplacementFor_c ++ ) { char buf [ ( 0x93f + 3861 - 0x1852 ) ] ; scanf ( " \x20 \x25 \x73 " , buf ) ; ReplacementFor_Cs [ ReplacementFor_c ] . ReplacementFor_x = buf [ ( 0x27 + 5004 - 0x13b3 ) ] ; ReplacementFor_Cs [ ReplacementFor_c ] . ReplacementFor_y = buf [ ( 0x1ab + 4970 - 0x1514 ) ] ; ReplacementFor_Cs [ ReplacementFor_c ] . ReplacementFor_z = buf [ ( 0x10 + 5274 - 0x14a8 ) ] ; fprintf ( stderr , " \x2d \x20 \x43 \x73 \x5b \x25 \x64 \x5d \x20 \x3d \x20 \x25 \x63 \x25 \x63 \x25 \x63 " " \n " , ReplacementFor_c , ReplacementFor_Cs [ ReplacementFor_c ] . ReplacementFor_x , ReplacementFor_Cs [ ReplacementFor_c ] . ReplacementFor_y , ReplacementFor_Cs [ ReplacementFor_c ] . ReplacementFor_z ) ; if ( ReplacementFor_Cs [ ReplacementFor_c ] . ReplacementFor_x != ReplacementFor_Cs [ ReplacementFor_c ] . ReplacementFor_y ) { ReplacementFor_c ++ ; ReplacementFor_C ++ ; ReplacementFor_Cs [ ReplacementFor_c ] . ReplacementFor_x = buf [ ( 0x173a + 3834 - 0x2633 ) ] ; ReplacementFor_Cs [ ReplacementFor_c ] . ReplacementFor_y = buf [ ( 0xe2a + 2504 - 0x17f2 ) ] ; ReplacementFor_Cs [ ReplacementFor_c ] . ReplacementFor_z = buf [ ( 0x1016 + 2526 - 0x19f2 ) ] ; fprintf ( stderr , " \x2b \x20 \x43 \x73 \x5b \x25 \x64 \x5d \x20 \x3d \x20 \x25 \x63 \x25 \x63 \x25 \x63 " " \n " , ReplacementFor_c , ReplacementFor_Cs [ ReplacementFor_c ] . ReplacementFor_x , ReplacementFor_Cs [ ReplacementFor_c ] . ReplacementFor_y , ReplacementFor_Cs [ ReplacementFor_c ] . ReplacementFor_z ) ; } } int ReplacementFor_D ; scanf ( " \x25 \x64 " , & ReplacementFor_D ) ; ReplacementFor_Opos ReplacementFor_Ds [ ( 0xeb7 + 3510 - 0x1c6b ) * ReplacementFor_D ] ; for ( int ReplacementFor_d = ( 0xf62 + 2113 - 0x17a3 ) ; ReplacementFor_d < ReplacementFor_D ; ReplacementFor_d ++ ) { char buf [ ( 0x616 + 7708 - 0x242f ) ] ; scanf ( " \x20 \x25 \x73 " , buf ) ; ReplacementFor_Ds [ ReplacementFor_d ] . ReplacementFor_x = buf [ ( 0x26c + 259 - 0x36f ) ] ; ReplacementFor_Ds [ ReplacementFor_d ] . ReplacementFor_y = buf [ ( 0x18c6 + 3431 - 0x262c ) ] ; fprintf ( stderr , " \x2d \x20 \x44 \x73 \x5b \x25 \x64 \x5d \x20 \x3d \x20 \x25 \x63 \x25 \x63 " " \n " , ReplacementFor_d , ReplacementFor_Ds [ ReplacementFor_d ] . ReplacementFor_x , ReplacementFor_Ds [ ReplacementFor_d ] . ReplacementFor_y ) ; if ( ReplacementFor_Ds [ ReplacementFor_d ] . ReplacementFor_x != ReplacementFor_Ds [ ReplacementFor_d ] . ReplacementFor_y ) { ReplacementFor_d ++ ; ReplacementFor_D ++ ; ReplacementFor_Ds [ ReplacementFor_d ] . ReplacementFor_x = buf [ ( 0x174f + 3381 - 0x2483 ) ] ; ReplacementFor_Ds [ ReplacementFor_d ] . ReplacementFor_y = buf [ ( 0x70b + 892 - 0xa87 ) ] ; fprintf ( stderr , " \x2b \x20 \x44 \x73 \x5b \x25 \x64 \x5d \x20 \x3d \x20 \x25 \x63 \x25 \x63 " " \n " , ReplacementFor_d , ReplacementFor_Ds [ ReplacementFor_d ] . ReplacementFor_x , ReplacementFor_Ds [ ReplacementFor_d ] . ReplacementFor_y ) ; } } int ReplacementFor_N ; scanf ( " \x25 \x64 " , & ReplacementFor_N ) ; char buf [ ReplacementFor_N + ( 0x1ab0 + 167 - 0x1b56 ) ] ; scanf ( " \x20 \x25 \x73 " , buf ) ; buf [ ReplacementFor_N ] = ' \0 ' ; std : : ReplacementFor_string S = buf ; fprintf ( stderr , " \x53 \x20 \x3d \x20 \x25 \x73 " " \n " , S . ReplacementFor_c_str ( ) ) ; int ReplacementFor_Db [ ReplacementFor_D ] ; for ( int i = ( 0xc4d + 6414 - 0x255b ) ; i < ReplacementFor_D ; i ++ ) { ReplacementFor_Db [ i ] = - ( 0xb3 + 4442 - 0x120c ) ; } int ReplacementFor_n = ( 0x20b6 + 1168 - 0x2546 ) ; while ( ReplacementFor_n < S . ReplacementFor_length ( ) ) { fprintf ( stderr , " \x21 \x21 \x21 \x20 \x53 \x5b \x25 \x64 \x5d \x3d \x25 \x63 " " \n " , ReplacementFor_n , S [ ReplacementFor_n ] ) ; for ( int i = ( 0xf1d + 758 - 0x1213 ) ; i < ReplacementFor_D ; i ++ ) { if ( ReplacementFor_Db [ i ] >= ReplacementFor_n ) ReplacementFor_Db [ i ] = - ( 0x1888 + 1195 - 0x1d32 ) ; } bool ReplacementFor_changed = false ; bool ReplacementFor_Cflag = ( ReplacementFor_n > ( 0xa4 + 2527 - 0xa83 ) ) ; while ( ReplacementFor_Cflag ) { ReplacementFor_Cflag = false ; for ( int ReplacementFor_c = ( 0x4d1 + 7409 - 0x21c2 ) ; ReplacementFor_c < ReplacementFor_C ; ReplacementFor_c ++ ) { if ( ReplacementFor_Cs [ ReplacementFor_c ] . ReplacementFor_x == S [ ReplacementFor_n - ( 0x10f9 + 3475 - 0x1e8b ) ] && ReplacementFor_Cs [ ReplacementFor_c ] . ReplacementFor_y == S [ ReplacementFor_n ] ) { fprintf ( stderr , " \x21 \x21 \x21 \x20 \x25 \x73 \x20 \x28 \x43 \x73 \x5b \x25 \x64 \x5d \x3d \x25 \x63 \x25 \x63 \x25 \x63 \x2c \x20 \x6e \x3d \x25 \x64 \x29 \x20 \x2d \x3e \x20 " , S . ReplacementFor_c_str ( ) , ReplacementFor_c , ReplacementFor_Cs [ ReplacementFor_c ] . ReplacementFor_x , ReplacementFor_Cs [ ReplacementFor_c ] . ReplacementFor_y , ReplacementFor_Cs [ ReplacementFor_c ] . ReplacementFor_z , ReplacementFor_n ) ; S . erase ( ReplacementFor_n , ( 0x1bc + 6627 - 0x1b9e ) ) ; ReplacementFor_n -- ; S [ ReplacementFor_n ] = ReplacementFor_Cs [ ReplacementFor_c ] . ReplacementFor_z ; fprintf ( stderr , " \x25 \x73 " " \n " , S . ReplacementFor_c_str ( ) ) ; ReplacementFor_changed = true ; } } } if ( ReplacementFor_changed ) { ReplacementFor_n = ( 0x631 + 7528 - 0x2399 ) ; continue ; } for ( int ReplacementFor_d = ( 0x44 + 5834 - 0x170e ) ; ReplacementFor_d < ReplacementFor_D ; ReplacementFor_d ++ ) { if ( ReplacementFor_Ds [ ReplacementFor_d ] . ReplacementFor_y == S [ ReplacementFor_n ] && ReplacementFor_Db [ ReplacementFor_d ] >= ( 0xb7b + 45 - 0xba8 ) ) { fprintf ( stderr , " \x21 \x21 \x21 \x20 \x25 \x73 \x20 \x28 \x44 \x62 \x5b \x25 \x64 \x5d \x3d \x25 \x64 \x2c \x20 \x6e \x3d \x25 \x64 \x29 \x20 \x2d \x3e \x20 " , S . ReplacementFor_c_str ( ) , ReplacementFor_d , ReplacementFor_Db [ ReplacementFor_d ] , ReplacementFor_n ) ; S . erase ( ( 0x1698 + 2226 - 0x1f4a ) , ReplacementFor_n + ( 0x6b4 + 5884 - 0x1daf ) ) ; fprintf ( stderr , " \x25 \x73 " " \n " , S . ReplacementFor_c_str ( ) ) ; ReplacementFor_n = ( 0x225f + 793 - 0x2578 ) ; ReplacementFor_changed = true ; break ; } } if ( ReplacementFor_changed ) { ReplacementFor_n = ( 0x1179 + 4331 - 0x2264 ) ; continue ; } for ( int ReplacementFor_d = ( 0xa75 + 1715 - 0x1128 ) ; ReplacementFor_d < ReplacementFor_D ; ReplacementFor_d ++ ) { if ( ReplacementFor_Ds [ ReplacementFor_d ] . ReplacementFor_x == S [ ReplacementFor_n ] && ReplacementFor_Db [ ReplacementFor_d ] < ( 0x1545 + 3471 - 0x22d4 ) ) { ReplacementFor_Db [ ReplacementFor_d ] = ReplacementFor_n ; fprintf ( stderr , " \x21 \x21 \x21 \x20 \x44 \x62 \x5b \x25 \x64 \x5d \x3d \x25 \x64 " " \n " , ReplacementFor_d , ReplacementFor_Db [ ReplacementFor_d ] ) ; } } ReplacementFor_n ++ ; } printf ( " \x43 \x61 \x73 \x65 \x20 \x23 \x25 \x64 \x3a \x20 \x5b " , t ) ; for ( int ReplacementFor_n = ( 0x1ed9 + 189 - 0x1f96 ) ; ReplacementFor_n < S . ReplacementFor_length ( ) ; ReplacementFor_n ++ ) { if ( ReplacementFor_n > ( 0x12f5 + 3176 - 0x1f5d ) ) printf ( " \x2c \x20 " ) ; printf ( " \x25 \x63 " , S [ ReplacementFor_n ] ) ; } printf ( " \x5d " " \n " ) ; } return ( 0x1509 + 572 - 0x1745 ) ; }
>>>Func
METHOD main
METHOD_RETURN int
PARAM int ReplacementFor_argc
PARAM char**ReplacementFor_argv
ReplacementFor_assert ReplacementFor_assert(ReplacementFor_argc==(0x6e0+6658-0x20df))
<operator>.assignment ReplacementFor_inputFile=fopen(ReplacementFor_argv[(0x1290+1176-0x1727)],"\x72")
<operator>.assignment ReplacementFor_outputFile=fopen(ReplacementFor_argv[(0x174c+3134-0x2388)],\012"\x77")
fgets fgets(ReplacementFor_testCase,5000,ReplacementFor_inputFile)
<operator>.assignment ReplacementFor_numTestCases=atoi(ReplacementFor_testCase)
<operator>.assignment ReplacementFor_caseNum\012=(0x512+2988-0x10bd)
fclose fclose(ReplacementFor_inputFile)
fclose fclose(\012ReplacementFor_outputFile)
<operator>.notEquals fscanf(ReplacementFor_inputFile,\012"\x25\x64\x20\x25\x64\x20\x25\x64" "\n",&ReplacementFor_N,&ReplacementFor_Pd,&\012ReplacementFor_Pg)!=EOF
<operator>.equals ReplacementFor_argc==(0x6e0+6658-0x20df)
fopen fopen(ReplacementFor_argv[(0x1290+1176-0x1727)],"\x72")
fopen fopen(ReplacementFor_argv[(0x174c+3134-0x2388)],\012"\x77")
atoi atoi(ReplacementFor_testCase)
<operator>.subtraction 0x512+2988-0x10bd
<operator>.postIncrement ReplacementFor_caseNum++
<operator>.subtraction 0x6e0+6658-0x20df
<operator>.addition 0x512+2988
fscanf fscanf(ReplacementFor_inputFile,\012"\x25\x64\x20\x25\x64\x20\x25\x64" "\n",&ReplacementFor_N,&ReplacementFor_Pd,&\012ReplacementFor_Pg)
<operator>.greaterEqualsThan ReplacementFor_N>=(0xaaf+199-0xb12)
<operator>.logicalAnd ReplacementFor_dExists&&!(ReplacementFor_Pg==(0x200f+1110-0x2401)&&\012ReplacementFor_Pd!=(0x1f7+4674-0x13d5))&&!(ReplacementFor_Pg==\012(0xda1+2431-0x1720)&&ReplacementFor_Pd!=(0xe58+6201-0x2691))
<operator>.addition 0x6e0+6658
<operator>.subtraction 0x1290+1176-0x1727
<operator>.subtraction 0x174c+3134-0x2388
<operator>.assignment ReplacementFor_dExists=(0xd1f+2790-0x1804)
fprintf fprintf(\012ReplacementFor_outputFile,\012"\x43\x61\x73\x65\x20\x23\x25\x64\x3a\x20\x50\x6f\x73\x73\x69\x62\x6c\x65" "\n",\012ReplacementFor_caseNum)
fflush fflush(ReplacementFor_outputFile)
<operator>.addition 0x1290+1176
<operator>.addition 0x174c+3134
<operator>.subtraction 0xaaf+199-0xb12
<operator>.assignment ReplacementFor_dExists=\012ReplacementFor_check_dExists((int)ReplacementFor_N,ReplacementFor_Pd)
<operator>.logicalAnd ReplacementFor_dExists&&!(ReplacementFor_Pg==(0x200f+1110-0x2401)&&\012ReplacementFor_Pd!=(0x1f7+4674-0x13d5))
<operator>.logicalNot !(ReplacementFor_Pg==\012(0xda1+2431-0x1720)&&ReplacementFor_Pd!=(0xe58+6201-0x2691))
fprintf fprintf(\012ReplacementFor_outputFile,\012"\x43\x61\x73\x65\x20\x23\x25\x64\x3a\x20\x42\x72\x6f\x6b\x65\x6e" "\n",\012ReplacementFor_caseNum)
fflush fflush(ReplacementFor_outputFile)
<operator>.addition 0xaaf+199
<operator>.subtraction 0xd1f+2790-0x1804
<operator>.logicalNot !(ReplacementFor_Pg==(0x200f+1110-0x2401)&&\012ReplacementFor_Pd!=(0x1f7+4674-0x13d5))
<operator>.logicalAnd ReplacementFor_Pg==\012(0xda1+2431-0x1720)&&ReplacementFor_Pd!=(0xe58+6201-0x2691)
<operator>.addition 0xd1f+2790
ReplacementFor_check_dExists ReplacementFor_check_dExists((int)ReplacementFor_N,ReplacementFor_Pd)
<operator>.logicalAnd ReplacementFor_Pg==(0x200f+1110-0x2401)&&\012ReplacementFor_Pd!=(0x1f7+4674-0x13d5)
<operator>.equals ReplacementFor_Pg==\012(0xda1+2431-0x1720)
<operator>.notEquals ReplacementFor_Pd!=(0xe58+6201-0x2691)
<operator>.cast (int)ReplacementFor_N
<operator>.equals ReplacementFor_Pg==(0x200f+1110-0x2401)
<operator>.notEquals ReplacementFor_Pd!=(0x1f7+4674-0x13d5)
<operator>.subtraction 0xda1+2431-0x1720
<operator>.subtraction 0xe58+6201-0x2691
<operator>.subtraction 0x200f+1110-0x2401
<operator>.subtraction 0x1f7+4674-0x13d5
<operator>.addition 0xda1+2431
<operator>.addition 0xe58+6201
<operator>.addition 0x200f+1110
<operator>.addition 0x1f7+4674
<operator>.addressOf &ReplacementFor_N
<operator>.addressOf &ReplacementFor_Pd
<operator>.addressOf &\012ReplacementFor_Pg
UNKNOWN int int
>>>PDG&62 0->2 0->3 0->7 0->10 0->11 0->12 0->13 0->14 0->15 0->16 0->17 0->18 0->19 0->20 0->21 0->22 0->24 0->25 0->26 0->28 0->29 0->30 0->31 0->32 0->34 0->36 0->37 0->38 0->39 0->42 0->43 0->45 0->46 0->47 0->48 0->49 0->50 0->51 0->52 0->53 0->54 0->55 0->56 0->57 2->13 3->1 3->14 3->15 4->1 4->1 5->1 5->1 5->7 6->1 6->1 6->11 6->28 6->36 7->1 7->16 7->21 8->1 8->1 8->1 9->1 9->1 9->1 9->28 9->36 10->1 10->1 11->1 11->1 12->1 12->1 12->1 12->12 12->18 12->21 12->22 12->23 12->32 12->34 12->38 12->40 12->44 12->48 12->52 12->56 12->58 12->59 12->60 13->1 13->1 13->4 13->4 14->1 14->5 14->5 15->1 15->6 15->6 16->1 16->8 17->1 17->9 17->9 18->1 18->1 18->28 18->36 19->1 19->13 19->13 21->1 21->1 21->1 21->10 21->12 21->12 21->12 21->12 21->12 21->22 21->43 21->43 21->45 21->46 21->47 21->48 21->49 22->1 22->1 22->1 22->21 22->27 22->33 22->39 22->42 22->43 22->43 22->47 22->47 22->61 23->1 23->1 23->1 23->28 23->29 23->36 23->37 25->1 26->1 27->1 27->1 27->34 28->1 28->18 28->29 29->1 29->11 29->28 29->36 32->1 32->22 32->22 33->1 33->1 33->34 34->1 34->1 34->23 34->23 34->35 34->41 34->45 34->50 34->54 35->1 35->23 36->1 36->18 36->37 37->1 37->11 37->28 37->36 39->1 39->27 39->27 40->1 40->34 41->1 41->1 41->35 41->35 43->1 43->1 43->21 43->33 43->33 43->46 43->49 44->1 44->1 44->40 44->40 45->1 45->1 45->21 45->41 45->41 45->46 45->48 45->51 45->55 46->1 46->1 46->21 46->41 46->41 46->43 46->49 47->1 48->1 48->1 48->21 48->44 48->44 48->45 48->49 48->53 48->57 49->1 49->1 49->21 49->43 49->44 49->44 49->46 50->1 50->45 50->45 51->1 51->46 51->46 52->1 52->48 52->48 53->1 53->49 53->49
>>>Token int main ( int ReplacementFor_argc , char * * ReplacementFor_argv ) { ReplacementFor_assert ( ReplacementFor_argc == ( 0x6e0 + 6658 - 0x20df ) ) ; FILE * ReplacementFor_inputFile , * ReplacementFor_outputFile ; int ReplacementFor_numTestCases , ReplacementFor_caseNum ; int i , ReplacementFor_Pd , ReplacementFor_Pg , ReplacementFor_answerFlag , ReplacementFor_dExists ; char ReplacementFor_testCase [ 5000 ] , * ReplacementFor_pch ; long long ReplacementFor_N ; ReplacementFor_inputFile = fopen ( ReplacementFor_argv [ ( 0x1290 + 1176 - 0x1727 ) ] , " \x72 " ) ; ReplacementFor_outputFile = fopen ( ReplacementFor_argv [ ( 0x174c + 3134 - 0x2388 ) ] , " \x77 " ) ; fgets ( ReplacementFor_testCase , 5000 , ReplacementFor_inputFile ) ; ReplacementFor_numTestCases = atoi ( ReplacementFor_testCase ) ; ReplacementFor_caseNum = ( 0x512 + 2988 - 0x10bd ) ; while ( fscanf ( ReplacementFor_inputFile , " \x25 \x64 \x20 \x25 \x64 \x20 \x25 \x64 " " \n " , & ReplacementFor_N , & ReplacementFor_Pd , & ReplacementFor_Pg ) != EOF ) { if ( ReplacementFor_N >= ( 0xaaf + 199 - 0xb12 ) ) ReplacementFor_dExists = ( 0xd1f + 2790 - 0x1804 ) ; else ReplacementFor_dExists = ReplacementFor_check_dExists ( ( int ) ReplacementFor_N , ReplacementFor_Pd ) ; if ( ReplacementFor_dExists && ! ( ReplacementFor_Pg == ( 0x200f + 1110 - 0x2401 ) && ReplacementFor_Pd != ( 0x1f7 + 4674 - 0x13d5 ) ) && ! ( ReplacementFor_Pg == ( 0xda1 + 2431 - 0x1720 ) && ReplacementFor_Pd != ( 0xe58 + 6201 - 0x2691 ) ) ) { fprintf ( ReplacementFor_outputFile , " \x43 \x61 \x73 \x65 \x20 \x23 \x25 \x64 \x3a \x20 \x50 \x6f \x73 \x73 \x69 \x62 \x6c \x65 " " \n " , ReplacementFor_caseNum ) ; fflush ( ReplacementFor_outputFile ) ; } else { fprintf ( ReplacementFor_outputFile , " \x43 \x61 \x73 \x65 \x20 \x23 \x25 \x64 \x3a \x20 \x42 \x72 \x6f \x6b \x65 \x6e " " \n " , ReplacementFor_caseNum ) ; fflush ( ReplacementFor_outputFile ) ; } ReplacementFor_caseNum ++ ; } fclose ( ReplacementFor_inputFile ) ; fclose ( ReplacementFor_outputFile ) ; }
>>>Func
METHOD ReplacementFor_printGraph
METHOD_RETURN void
PARAM struct ReplacementFor_Graph*ReplacementFor_graph
<operator>.lessThan ReplacementFor_v\012<ReplacementFor_graph->ReplacementFor_numVertices
<operator>.postIncrement ReplacementFor_v++
<operator>.assignment ReplacementFor_v=(0x1294+1189-0x1739)
<operator>.assignment *ReplacementFor_temp=ReplacementFor_graph->\012ReplacementFor_adjLists[ReplacementFor_v]
printf printf(\012"\n" "\x20\x41\x64\x6a\x61\x63\x65\x6e\x63\x79\x20\x6c\x69\x73\x74\x20\x6f\x66\x20\x76\x65\x72\x74\x65\x78\x20\x25\x64" "\n" "\x20"\012,ReplacementFor_v)
printf printf("\n")
IDENTIFIER ReplacementFor_temp while (ReplacementFor_temp)
<operator>.subtraction 0x1294+1189-0x1739
printf printf("\x25\x64\x20\x2d\x3e\x20",\012ReplacementFor_temp->ReplacementFor_vertex)
<operator>.assignment ReplacementFor_temp=\012ReplacementFor_temp->next
<operator>.addition 0x1294+1189
<operator>.indirectFieldAccess ReplacementFor_graph->ReplacementFor_numVertices
FIELD_IDENTIFIER ReplacementFor_numVertices ReplacementFor_numVertices
<operator>.indirectIndexAccess ReplacementFor_graph->\012ReplacementFor_adjLists[ReplacementFor_v]
<operator>.indirectFieldAccess ReplacementFor_graph->\012ReplacementFor_adjLists
FIELD_IDENTIFIER ReplacementFor_adjLists ReplacementFor_adjLists
<operator>.indirectFieldAccess ReplacementFor_temp->ReplacementFor_vertex
<operator>.indirectFieldAccess ReplacementFor_temp->next
FIELD_IDENTIFIER ReplacementFor_vertex ReplacementFor_vertex
FIELD_IDENTIFIER next next
>>>PDG&23 0->2 0->3 0->4 0->7 0->8 0->9 0->10 0->11 0->13 2->1 3->1 3->1 3->1 3->3 3->4 3->6 3->7 3->7 3->8 3->11 3->12 3->14 3->15 3->16 3->17 3->18 3->19 3->20 3->21 3->22 4->1 4->3 5->1 5->1 5->3 7->4 10->1 10->5 10->5
>>>Token void ReplacementFor_printGraph ( struct ReplacementFor_Graph * ReplacementFor_graph ) { int ReplacementFor_v ; for ( ReplacementFor_v = ( 0x1294 + 1189 - 0x1739 ) ; ReplacementFor_v < ReplacementFor_graph -> ReplacementFor_numVertices ; ReplacementFor_v ++ ) { struct ReplacementFor_node * ReplacementFor_temp = ReplacementFor_graph -> ReplacementFor_adjLists [ ReplacementFor_v ] ; printf ( " \n " " \x20 \x41 \x64 \x6a \x61 \x63 \x65 \x6e \x63 \x79 \x20 \x6c \x69 \x73 \x74 \x20 \x6f \x66 \x20 \x76 \x65 \x72 \x74 \x65 \x78 \x20 \x25 \x64 " " \n " " \x20 " , ReplacementFor_v ) ; while ( ReplacementFor_temp ) { printf ( " \x25 \x64 \x20 \x2d \x3e \x20 " , ReplacementFor_temp -> ReplacementFor_vertex ) ; ReplacementFor_temp = ReplacementFor_temp -> next ; } printf ( " \n " ) ; } }
>>>Func
METHOD ReplacementFor_max
METHOD_RETURN double
PARAM double ReplacementFor_n1
PARAM double ReplacementFor_n2
<operator>.greaterThan ReplacementFor_n1>ReplacementFor_n2
RETURN return ReplacementFor_n1; return ReplacementFor_n1;
IDENTIFIER ReplacementFor_n1 return ReplacementFor_n1;
RETURN return \012ReplacementFor_n2; return \012ReplacementFor_n2;
IDENTIFIER ReplacementFor_n2 return \012ReplacementFor_n2;
>>>PDG&9 0->2 0->3 0->4 0->6 0->8 2->4 3->4 4->1 4->1 4->1 4->5 4->6 4->7 4->8 5->1 6->5 7->1 8->7
>>>Token double ReplacementFor_max ( double ReplacementFor_n1 , double ReplacementFor_n2 ) { if ( ReplacementFor_n1 > ReplacementFor_n2 ) { return ReplacementFor_n1 ; } else { return ReplacementFor_n2 ; } }
>>>Func
METHOD main
METHOD_RETURN int
scanf scanf(\012"\x25\x64",&ReplacementFor_notc)
RETURN return\012(0xf4f+5602-0x2531); return\012(0xf4f+5602-0x2531);
<operator>.lessThan ReplacementFor_nc<ReplacementFor_notc
<operator>.postIncrement ReplacementFor_nc++
<operator>.subtraction 0xf4f+5602-0x2531
<operator>.assignment ReplacementFor_nc=(0x1e0+6247-0x1a47)
scanf scanf("\x25\x64",&ReplacementFor_jo)
scanf scanf(\012"\x25\x64",&ReplacementFor_op)
scanf scanf(\012"\x25\x64",&ReplacementFor_n)
scanf scanf("\x20\x25\x73",&ReplacementFor_str)
<operator>.assignment ReplacementFor_rj=\012ReplacementFor_n
<operator>.lessThan i<(0x31a+262-0x2f4)
<operator>.postIncrement i++
<operator>.lessThan i<\012ReplacementFor_jo
<operator>.postIncrement i++
<operator>.lessThan i<ReplacementFor_op
<operator>.postIncrement i\012++
<operator>.lessThan ReplacementFor_j<\012ReplacementFor_n
<operator>.postIncrement ReplacementFor_j++
<operator>.assignment ReplacementFor_toret[ReplacementFor_j]=\012ReplacementFor_str[ReplacementFor_j]
<operator>.lessThan i<\012ReplacementFor_n
<operator>.postIncrement i++
<operator>.equals ReplacementFor_n==(0x7f7+192-0x8b7)
<operator>.addition 0xf4f+5602
<operator>.subtraction 0x1e0+6247-0x1a47
<operator>.assignment i=\012(0xf77+3981-0x1f04)
<operator>.assignment i=(0x403+6126-0x1bf1)
scanf scanf("\x20\x25\x63\x25\x63\x25\x63",&ReplacementFor_c1,&\012ReplacementFor_c2,&ReplacementFor_c3)
<operator>.assignment ReplacementFor_comb[(int)ReplacementFor_c1\012][(int)ReplacementFor_c2]=(int)ReplacementFor_c3
<operator>.assignment ReplacementFor_comb[(int)\012ReplacementFor_c2][(int)ReplacementFor_c1]=(int)ReplacementFor_c3
<operator>.assignment i=(0x154d+4474-0x26c7)
scanf scanf("\x20\x25\x63\x25\x63",&\012ReplacementFor_c1,&ReplacementFor_c2)
<operator>.assignment ReplacementFor_opp[(int)ReplacementFor_c1]\012[(int)ReplacementFor_c2]=(0x1943+1821-0x205f)
<operator>.assignment ReplacementFor_opp[(int)\012ReplacementFor_c2][(int)ReplacementFor_c1]=(0x1052+1874-0x17a3)
<operator>.assignment ReplacementFor_j=(0xe64+6184-0x268c)
<operator>.assignment i=(0x15d+7409-0x1e4d)
<operator>.assignment ReplacementFor_trj=getStr(ReplacementFor_str \012ReplacementFor_toret (0x729+372-0x89d),i,i)
<operator>.assignment ReplacementFor_rj=ReplacementFor_trj
<operator>.assignment ReplacementFor_n=\012ReplacementFor_rj+(0xadc+1905-0x124c)
<operator>.assignment i=ReplacementFor_trj
printf printf(\012"\x43\x61\x73\x65\x20\x23\x25\x64\x3a\x20\x5b\x5d" "\n" ReplacementFor_nc+\012(0x103+4553-0x12cb))
<operator>.addition 0x1e0+6247
<operator>.subtraction 0x31a+262-0x2f4
<operator>.lessThan ReplacementFor_j<(0x7b2+6408-0x1f8e)
<operator>.postIncrement ReplacementFor_j++
<operator>.lessEqualsThan ReplacementFor_j<=ReplacementFor_rj
<operator>.postIncrement ReplacementFor_j++
<operator>.assignment ReplacementFor_str[ReplacementFor_j]=ReplacementFor_toret[\012ReplacementFor_j]
<operator>.lessThan ReplacementFor_j<\012ReplacementFor_n
<operator>.postIncrement ReplacementFor_j++
<operator>.lessThan ReplacementFor_j<ReplacementFor_n
<operator>.postIncrement ReplacementFor_j++
<operator>.assignment ReplacementFor_toret[ReplacementFor_j]=ReplacementFor_str[ReplacementFor_j]
<operator>.equals ReplacementFor_opr==(0xadb+5508-0x205e)
<operator>.subtraction 0x7f7+192-0x8b7
<operator>.subtraction 0xf77+3981-0x1f04
<operator>.addition 0x31a+262
<operator>.assignment ReplacementFor_j=\012(0x0+8970-0x230a)
<operator>.assignment ReplacementFor_comb[i][ReplacementFor_j]=(0x23d5+112-0x2445)
<operator>.assignment ReplacementFor_opp[\012i][ReplacementFor_j]=(0xf86+4306-0x2058)
<operator>.subtraction 0x403+6126-0x1bf1
<operator>.cast (int)ReplacementFor_c3
<operator>.cast (int)ReplacementFor_c3
<operator>.subtraction 0x154d+4474-0x26c7
<operator>.subtraction 0x1943+1821-0x205f
<operator>.subtraction 0x1052+1874-0x17a3
<operator>.subtraction 0xe64+6184-0x268c
<operator>.subtraction 0x15d+7409-0x1e4d
getStr getStr(ReplacementFor_str \012ReplacementFor_toret (0x729+372-0x89d),i,i)
<operator>.assignment ReplacementFor_j=(0x1cc6+740-0x1faa)
<operator>.assignment ReplacementFor_j=i+(0x1328+1731-0x19ea)
<operator>.postIncrement ReplacementFor_rj++
<operator>.assignment ReplacementFor_str[\012ReplacementFor_rj]=ReplacementFor_str[ReplacementFor_j]
<operator>.addition ReplacementFor_rj+(0xadc+1905-0x124c)
<operator>.assignment ReplacementFor_j=\012(0xb2f+2243-0x13f2)
<operator>.postIncrement i++
<operator>.assignment ReplacementFor_opr=\012(0x117f+1372-0x16db)
<operator>.addition 0x7f7+192
<operator>.addition ReplacementFor_nc+\012(0x103+4553-0x12cb)
<operator>.equals ReplacementFor_n==(0x188+3509-0xf3c)
<operator>.addition 0xf77+3981
<operator>.subtraction 0x7b2+6408-0x1f8e
<operator>.addition 0x403+6126
<operator>.cast (int)ReplacementFor_c2
<operator>.cast (int)ReplacementFor_c1
<operator>.addition 0x154d+4474
<operator>.cast (int)ReplacementFor_c2
<operator>.addition 0x1943+1821
<operator>.cast (int)ReplacementFor_c1
<operator>.addition 0x1052+1874
<operator>.addition 0xe64+6184
<operator>.addition 0x15d+7409
<operator>.subtraction 0x729+372-0x89d
<operator>.subtraction 0xadc+1905-0x124c
<operator>.subtraction 0xadb+5508-0x205e
<operator>.subtraction 0x103+4553-0x12cb
printf printf(\012"\x43\x61\x73\x65\x20\x23\x25\x64\x3a\x20\x5b\x25\x63\x5d" "\n" \012ReplacementFor_nc+(0x20b+5631-0x1809) ReplacementFor_str[(0x107b+4032-0x203b)])
<operator>.subtraction 0x0+8970-0x230a
<operator>.addition 0x7b2+6408
<operator>.subtraction 0x23d5+112-0x2445
<operator>.subtraction 0xf86+4306-0x2058
<operator>.cast (int)ReplacementFor_c1
<operator>.cast (int)\012ReplacementFor_c2
<operator>.cast (int)ReplacementFor_c1
<operator>.cast (int)\012ReplacementFor_c2
<operator>.addition 0x729+372
<operator>.subtraction 0x1cc6+740-0x1faa
<operator>.addition i+(0x1328+1731-0x19ea)
<operator>.addition 0xadc+1905
<operator>.subtraction 0xb2f+2243-0x13f2
<operator>.addition 0xadb+5508
<operator>.subtraction 0x117f+1372-0x16db
<operator>.addition 0x103+4553
<operator>.subtraction 0x188+3509-0xf3c
printf printf("\x43\x61\x73\x65\x20\x23\x25\x64\x3a\x20\x5b" ReplacementFor_nc+\012(0x71c+2172-0xf97))
printf printf("\x5d" "\n")
<operator>.addition 0x0+8970
<operator>.addition 0x23d5+112
<operator>.addition 0xf86+4306
<operator>.addition 0x1cc6+740
<operator>.subtraction 0x1328+1731-0x19ea
<operator>.addition 0xb2f+2243
<operator>.addition 0x117f+1372
<operator>.addition 0x188+3509
<operator>.addition ReplacementFor_nc+(0x20b+5631-0x1809)
<operator>.lessThan i<ReplacementFor_n
<operator>.postIncrement i++
<operator>.addition 0x1328+1731
<operator>.subtraction 0x20b+5631-0x1809
<operator>.subtraction 0x107b+4032-0x203b
<operator>.addition ReplacementFor_nc+\012(0x71c+2172-0xf97)
<operator>.assignment i=(0xdb8+6247-0x261f)
<operator>.addition 0x20b+5631
<operator>.addition 0x107b+4032
<operator>.subtraction 0x71c+2172-0xf97
<operator>.equals i==\012(0x1951+1914-0x20cb)
<operator>.addition 0x71c+2172
<operator>.subtraction 0xdb8+6247-0x261f
printf printf("\x25\x63\x2c",ReplacementFor_str[i])
<operator>.addition 0xdb8+6247
<operator>.subtraction 0x1951+1914-0x20cb
<operator>.addition 0x1951+1914
<operator>.equals i==\012ReplacementFor_rj
printf printf("\x20\x25\x63",ReplacementFor_str[i])
printf printf(\012"\x20\x25\x63\x2c",ReplacementFor_str[i])
<operator>.addressOf &ReplacementFor_jo
<operator>.addressOf &ReplacementFor_op
<operator>.addressOf &ReplacementFor_n
<operator>.addressOf &ReplacementFor_str
<operator>.indirectIndexAccess ReplacementFor_toret[ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_str[ReplacementFor_j]
<operator>.addressOf &ReplacementFor_c1
<operator>.addressOf &\012ReplacementFor_c2
<operator>.addressOf &ReplacementFor_c3
<operator>.indirectIndexAccess ReplacementFor_comb[(int)ReplacementFor_c1\012][(int)ReplacementFor_c2]
<operator>.indirectIndexAccess ReplacementFor_comb[(int)\012ReplacementFor_c2][(int)ReplacementFor_c1]
<operator>.addressOf &\012ReplacementFor_c1
<operator>.addressOf &ReplacementFor_c2
<operator>.indirectIndexAccess ReplacementFor_opp[(int)ReplacementFor_c1]\012[(int)ReplacementFor_c2]
<operator>.indirectIndexAccess ReplacementFor_opp[(int)\012ReplacementFor_c2][(int)ReplacementFor_c1]
<operator>.indirectIndexAccess ReplacementFor_comb[(int)ReplacementFor_c1\012]
UNKNOWN int int
<operator>.indirectIndexAccess ReplacementFor_comb[(int)\012ReplacementFor_c2]
UNKNOWN int int
<operator>.indirectIndexAccess ReplacementFor_opp[(int)ReplacementFor_c1]
<operator>.indirectIndexAccess ReplacementFor_opp[(int)\012ReplacementFor_c2]
<operator>.indirectIndexAccess ReplacementFor_str[ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_toret[\012ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_toret[ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_str[ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_comb[i][ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_opp[\012i][ReplacementFor_j]
UNKNOWN int int
UNKNOWN int int
UNKNOWN int int
UNKNOWN int int
<operator>.indirectIndexAccess ReplacementFor_str[\012ReplacementFor_rj]
<operator>.indirectIndexAccess ReplacementFor_str[ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_comb[i]
<operator>.indirectIndexAccess ReplacementFor_opp[\012i]
UNKNOWN int int
UNKNOWN int int
UNKNOWN int int
UNKNOWN int int
<operator>.indirectIndexAccess ReplacementFor_str[(0x107b+4032-0x203b)]
<operator>.indirectIndexAccess ReplacementFor_str[i]
<operator>.indirectIndexAccess ReplacementFor_str[i]
<operator>.indirectIndexAccess ReplacementFor_str[i]
>>>PDG&190 0->2 0->4 0->5 0->6 0->8 0->9 0->10 0->11 0->12 0->13 0->14 0->15 0->16 0->17 0->18 0->19 0->20 0->22 0->23 0->24 0->25 0->26 0->29 0->30 0->31 0->33 0->39 0->40 0->41 0->42 0->43 0->44 0->45 0->46 0->47 0->48 0->50 0->51 0->52 0->53 0->55 0->56 0->57 0->58 0->62 0->63 0->64 0->65 0->66 0->67 0->68 0->69 0->70 0->72 0->73 0->75 0->77 0->79 0->80 0->81 0->82 0->83 0->84 0->85 0->86 0->87 0->88 0->89 0->90 0->91 0->92 0->93 0->94 0->95 0->96 0->97 0->98 0->99 0->100 0->101 0->102 0->103 0->104 0->105 0->106 0->107 0->108 0->109 0->110 0->111 0->112 0->113 0->114 0->115 0->116 0->117 0->118 0->119 0->120 0->121 0->122 0->123 0->124 0->125 0->126 0->127 0->128 0->129 0->130 0->131 0->132 0->134 0->135 0->136 0->137 0->138 0->139 0->140 0->141 0->142 0->143 0->144 0->145 0->146 2->1 2->4 3->1 4->1 4->1 4->1 4->4 4->5 4->5 4->8 4->9 4->10 4->11 4->12 4->13 4->15 4->17 4->19 4->22 4->24 4->27 4->28 4->32 4->36 4->37 4->42 4->44 4->56 4->57 4->58 4->62 4->65 4->68 4->69 4->79 4->80 4->82 4->84 4->87 4->92 4->93 4->98 4->116 4->126 4->132 4->147 4->148 4->149 4->150 5->1 5->4 6->1 6->1 6->3 7->1 7->1 7->4 8->1 8->15 9->1 9->17 10->1 10->12 10->19 10->22 10->24 10->50 10->52 10->81 10->127 11->1 11->70 11->98 11->140 11->145 11->146 12->1 12->1 12->144 13->1 13->1 13->13 13->14 13->14 13->44 13->45 13->58 13->59 13->83 13->99 13->100 13->118 14->1 14->13 15->1 15->1 15->8 15->15 15->16 15->16 15->29 15->30 15->31 15->63 15->64 15->85 15->86 15->103 15->104 15->153 15->154 15->155 15->156 15->157 15->162 15->163 15->164 15->165 15->174 15->175 15->182 15->183 16->1 16->15 17->1 17->1 17->9 17->17 17->18 17->18 17->33 17->34 17->35 17->66 17->67 17->88 17->89 17->90 17->91 17->105 17->106 17->158 17->159 17->160 17->161 17->166 17->167 17->176 17->177 17->184 17->185 18->1 18->17 19->1 19->1 19->19 19->20 19->20 19->21 19->22 19->151 19->152 20->1 20->19 21->1 21->1 21->1 21->70 22->1 22->1 22->22 22->23 22->24 22->38 22->39 22->40 22->41 22->47 22->50 22->50 22->52 22->55 22->70 22->70 22->71 22->72 22->75 22->76 22->94 22->95 22->96 22->107 22->108 22->109 22->110 22->111 22->112 22->121 22->122 22->123 22->129 23->1 23->22 24->1 24->1 24->1 24->10 24->12 24->19 24->42 24->80 24->81 24->81 24->97 24->114 24->115 24->125 26->1 26->7 26->7 27->1 27->1 27->13 28->1 28->1 28->15 29->1 29->1 29->1 29->33 29->86 29->90 29->103 29->105 30->1 30->1 31->1 31->1 31->1 32->1 32->1 32->17 33->1 33->1 33->29 33->86 33->90 33->103 33->105 34->1 34->1 34->1 35->1 35->1 35->1 36->1 36->1 36->19 37->1 37->1 37->22 38->1 38->1 38->39 38->41 39->1 39->47 40->1 40->1 40->52 41->1 41->1 41->23 41->77 42->1 42->1 44->1 44->13 44->13 45->1 45->1 45->45 45->46 45->46 45->60 45->61 45->83 45->100 45->101 45->102 45->119 45->120 45->172 45->173 45->180 45->181 46->1 46->45 47->1 47->40 47->47 47->48 47->48 47->49 47->73 47->75 47->144 47->168 47->169 48->1 48->47 49->1 49->1 49->1 49->11 49->21 49->54 49->70 49->74 49->98 49->140 49->145 49->146 50->1 50->50 50->51 50->51 50->73 50->74 50->178 50->179 51->1 51->50 52->1 52->1 52->22 52->52 52->53 52->53 52->54 52->170 52->171 53->1 53->52 54->1 54->1 54->1 54->70 55->1 55->1 55->1 55->77 55->78 55->113 55->124 56->1 56->24 56->24 57->1 57->27 57->27 59->1 59->1 59->45 60->1 60->1 60->1 61->1 61->1 61->1 62->1 62->28 62->28 64->1 65->1 65->32 65->32 66->1 66->34 66->34 67->1 67->35 67->35 68->1 68->36 68->36 69->1 69->37 69->37 70->1 70->1 70->1 70->11 70->21 70->38 70->38 70->38 70->38 70->49 70->54 70->72 70->74 70->98 70->109 70->140 70->145 70->146 71->1 71->1 71->47 72->1 72->1 72->50 73->1 73->40 73->75 73->144 74->1 74->1 74->1 74->11 74->70 74->98 74->140 74->145 74->146 75->1 75->1 76->1 76->1 76->52 77->23 78->1 78->1 78->1 78->55 80->1 81->1 81->1 81->1 81->10 81->12 81->19 81->98 81->116 81->117 81->126 81->127 81->127 81->130 81->131 81->132 81->133 81->134 81->135 81->136 81->138 81->139 81->141 81->186 83->1 83->45 83->45 86->1 90->1 94->1 94->70 94->70 95->1 95->40 95->40 95->75 95->75 96->1 96->55 96->55 97->1 97->42 97->42 97->80 97->80 98->1 98->1 98->1 98->11 98->70 98->140 98->145 98->146 99->1 99->59 99->59 101->1 101->60 101->60 102->1 102->61 102->61 104->1 106->1 108->1 108->71 108->71 109->1 111->1 111->76 111->76 113->1 113->78 113->78 115->1 115->81 115->81 116->1 116->1 117->1 122->1 122->72 122->72 122->109 122->109 126->1 127->1 127->1 127->1 127->10 127->12 127->19 127->127 127->128 127->137 127->137 127->142 127->143 128->1 128->127 130->1 130->98 130->98 130->126 130->126 131->1 132->1 133->1 133->1 133->127 136->1 136->116 136->116 136->132 136->132 137->1 137->1 137->128 137->140 137->144 137->144 137->187 139->1 139->133 139->133 140->1 140->1 140->11 140->70 140->98 140->145 140->146 142->1 142->137 142->137 144->1 144->1 144->128 144->145 144->146 144->188 144->189 145->1 145->1 145->11 145->70 145->98 145->140 145->146 146->1 146->1 146->11 146->70 146->98 146->140 146->145
>>>Token int main ( ) { int ReplacementFor_notc , ReplacementFor_nc , i , ReplacementFor_j ; scanf ( " \x25 \x64 " , & ReplacementFor_notc ) ; for ( ReplacementFor_nc = ( 0x1e0 + 6247 - 0x1a47 ) ; ReplacementFor_nc < ReplacementFor_notc ; ReplacementFor_nc ++ ) { for ( i = ( 0xf77 + 3981 - 0x1f04 ) ; i < ( 0x31a + 262 - 0x2f4 ) ; i ++ ) { for ( ReplacementFor_j = ( 0x0 + 8970 - 0x230a ) ; ReplacementFor_j < ( 0x7b2 + 6408 - 0x1f8e ) ; ReplacementFor_j ++ ) { ReplacementFor_comb [ i ] [ ReplacementFor_j ] = ( 0x23d5 + 112 - 0x2445 ) ; ReplacementFor_opp [ i ] [ ReplacementFor_j ] = ( 0xf86 + 4306 - 0x2058 ) ; } } int ReplacementFor_n , ReplacementFor_jo , ReplacementFor_op ; char ReplacementFor_str [ ( 0x65d + 4616 - 0x1801 ) ] ; scanf ( " \x25 \x64 " , & ReplacementFor_jo ) ; for ( i = ( 0x403 + 6126 - 0x1bf1 ) ; i < ReplacementFor_jo ; i ++ ) { char ReplacementFor_c1 , ReplacementFor_c2 , ReplacementFor_c3 ; scanf ( " \x20 \x25 \x63 \x25 \x63 \x25 \x63 " , & ReplacementFor_c1 , & ReplacementFor_c2 , & ReplacementFor_c3 ) ; ReplacementFor_comb [ ( int ) ReplacementFor_c1 ] [ ( int ) ReplacementFor_c2 ] = ( int ) ReplacementFor_c3 ; ReplacementFor_comb [ ( int ) ReplacementFor_c2 ] [ ( int ) ReplacementFor_c1 ] = ( int ) ReplacementFor_c3 ; } scanf ( " \x25 \x64 " , & ReplacementFor_op ) ; for ( i = ( 0x154d + 4474 - 0x26c7 ) ; i < ReplacementFor_op ; i ++ ) { char ReplacementFor_c1 , ReplacementFor_c2 ; scanf ( " \x20 \x25 \x63 \x25 \x63 " , & ReplacementFor_c1 , & ReplacementFor_c2 ) ; ReplacementFor_opp [ ( int ) ReplacementFor_c1 ] [ ( int ) ReplacementFor_c2 ] = ( 0x1943 + 1821 - 0x205f ) ; ReplacementFor_opp [ ( int ) ReplacementFor_c2 ] [ ( int ) ReplacementFor_c1 ] = ( 0x1052 + 1874 - 0x17a3 ) ; } scanf ( " \x25 \x64 " , & ReplacementFor_n ) ; scanf ( " \x20 \x25 \x73 " , & ReplacementFor_str ) ; char ReplacementFor_toret [ ( 0x14d0 + 4546 - 0x262e ) ] ; int ReplacementFor_rj = ReplacementFor_n ; for ( ReplacementFor_j = ( 0xe64 + 6184 - 0x268c ) ; ReplacementFor_j < ReplacementFor_n ; ReplacementFor_j ++ ) ReplacementFor_toret [ ReplacementFor_j ] = ReplacementFor_str [ ReplacementFor_j ] ; for ( i = ( 0x15d + 7409 - 0x1e4d ) ; i < ReplacementFor_n ; i ++ ) { int ReplacementFor_trj = getStr ( ReplacementFor_str , ReplacementFor_toret , ( 0x729 + 372 - 0x89d ) , i , i ) ; ReplacementFor_rj = ReplacementFor_trj ; for ( ReplacementFor_j = ( 0x1cc6 + 740 - 0x1faa ) ; ReplacementFor_j <= ReplacementFor_rj ; ReplacementFor_j ++ ) ReplacementFor_str [ ReplacementFor_j ] = ReplacementFor_toret [ ReplacementFor_j ] ; for ( ReplacementFor_j = i + ( 0x1328 + 1731 - 0x19ea ) ; ReplacementFor_j < ReplacementFor_n ; ReplacementFor_j ++ ) { ReplacementFor_rj ++ ; ReplacementFor_str [ ReplacementFor_rj ] = ReplacementFor_str [ ReplacementFor_j ] ; } ReplacementFor_n = ReplacementFor_rj + ( 0xadc + 1905 - 0x124c ) ; i = ReplacementFor_trj ; for ( ReplacementFor_j = ( 0xb2f + 2243 - 0x13f2 ) ; ReplacementFor_j < ReplacementFor_n ; ReplacementFor_j ++ ) ReplacementFor_toret [ ReplacementFor_j ] = ReplacementFor_str [ ReplacementFor_j ] ; if ( ReplacementFor_opr == ( 0xadb + 5508 - 0x205e ) ) { i ++ ; ReplacementFor_opr = ( 0x117f + 1372 - 0x16db ) ; } } if ( ReplacementFor_n == ( 0x7f7 + 192 - 0x8b7 ) ) printf ( " \x43 \x61 \x73 \x65 \x20 \x23 \x25 \x64 \x3a \x20 \x5b \x5d " " \n " , ReplacementFor_nc + ( 0x103 + 4553 - 0x12cb ) ) ; else if ( ReplacementFor_n == ( 0x188 + 3509 - 0xf3c ) ) { printf ( " \x43 \x61 \x73 \x65 \x20 \x23 \x25 \x64 \x3a \x20 \x5b \x25 \x63 \x5d " " \n " , ReplacementFor_nc + ( 0x20b + 5631 - 0x1809 ) , ReplacementFor_str [ ( 0x107b + 4032 - 0x203b ) ] ) ; } else { printf ( " \x43 \x61 \x73 \x65 \x20 \x23 \x25 \x64 \x3a \x20 \x5b " , ReplacementFor_nc + ( 0x71c + 2172 - 0xf97 ) ) ; for ( i = ( 0xdb8 + 6247 - 0x261f ) ; i < ReplacementFor_n ; i ++ ) { if ( i == ( 0x1951 + 1914 - 0x20cb ) ) printf ( " \x25 \x63 \x2c " , ReplacementFor_str [ i ] ) ; else if ( i == ReplacementFor_rj ) printf ( " \x20 \x25 \x63 " , ReplacementFor_str [ i ] ) ; else printf ( " \x20 \x25 \x63 \x2c " , ReplacementFor_str [ i ] ) ; } printf ( " \x5d " " \n " ) ; } } return ( 0xf4f + 5602 - 0x2531 ) ; }
>>>Func
METHOD ReplacementFor_check_int
METHOD_RETURN int
PARAM double i
PARAM int ReplacementFor_D
<operator>.assignment ReplacementFor_k=(double)((i*ReplacementFor_D)/(0x129b+4858-0x2531))
<operator>.assignment ReplacementFor_k1=(i*ReplacementFor_D)/(0x71c+448-0x878)
RETURN return(0x1f91+904-0x2319); return(0x1f91+904-0x2319);
<operator>.equals (ReplacementFor_k1-\012ReplacementFor_k)==0.0
<operator>.subtraction 0x1f91+904-0x2319
<operator>.cast (double)((i*ReplacementFor_D)/(0x129b+4858-0x2531))
<operator>.division (i*ReplacementFor_D)/(0x71c+448-0x878)
RETURN return(0x71+124-0xec); return(0x71+124-0xec);
<operator>.division (i*ReplacementFor_D)/(0x129b+4858-0x2531)
<operator>.multiplication i*ReplacementFor_D
<operator>.subtraction 0x71c+448-0x878
<operator>.subtraction ReplacementFor_k1-\012ReplacementFor_k
<operator>.subtraction 0x71+124-0xec
<operator>.addition 0x1f91+904
<operator>.multiplication i*ReplacementFor_D
<operator>.subtraction 0x129b+4858-0x2531
<operator>.addition 0x71c+448
<operator>.addition 0x129b+4858
<operator>.addition 0x71+124
>>>PDG&23 0->2 0->3 0->7 0->8 0->13 0->14 0->15 0->16 0->17 0->18 0->19 0->20 0->21 0->22 2->18 3->18 4->1 4->1 4->15 5->1 5->1 5->15 6->1 7->1 7->1 7->6 7->8 7->11 7->16 7->17 7->22 8->6 9->1 10->1 10->1 10->5 10->5 11->1 12->1 12->4 12->4 12->9 12->9 13->1 13->1 13->10 13->10 14->1 14->10 14->10 15->1 15->1 15->7 15->7 16->1 16->1 16->11 18->12 18->12 18->13 18->13 19->1 19->12 19->12
>>>Token int ReplacementFor_check_int ( double i , int ReplacementFor_D ) { double ReplacementFor_k = ( double ) ( ( i * ReplacementFor_D ) / ( 0x129b + 4858 - 0x2531 ) ) ; int ReplacementFor_k1 = ( i * ReplacementFor_D ) / ( 0x71c + 448 - 0x878 ) ; if ( ( ReplacementFor_k1 - ReplacementFor_k ) == 0.0 ) { return ( 0x71 + 124 - 0xec ) ; } return ( 0x1f91 + 904 - 0x2319 ) ; }
>>>Func
METHOD main
METHOD_RETURN int
PARAM void
scanf scanf("\x25\x64",&T)
RETURN return(0x2fd+115-0x370); return(0x2fd+115-0x370);
<operator>.lessThan t<T
<operator>.postIncrement t++
<operator>.subtraction 0x2fd+115-0x370
<operator>.assignment t=(0x448+7760-0x2298)
scanf scanf("\x25\x6c\x64",&ReplacementFor_N)
scanf scanf("\x25\x6c\x64",&\012ReplacementFor_Pd)
scanf scanf("\x25\x6c\x64",&ReplacementFor_Pg)
<operator>.assignment ReplacementFor_possible=ReplacementFor_is_possible(ReplacementFor_N,\012ReplacementFor_Pd,ReplacementFor_Pg)
printf printf(\012"\x43\x61\x73\x65\x20\x23\x25\x64\x3a\x20" t+(0x389+1125-0x7ed))
IDENTIFIER ReplacementFor_possible if (ReplacementFor_possible)
<operator>.addition 0x2fd+115
<operator>.subtraction 0x448+7760-0x2298
ReplacementFor_is_possible ReplacementFor_is_possible(ReplacementFor_N,\012ReplacementFor_Pd,ReplacementFor_Pg)
<operator>.addition t+(0x389+1125-0x7ed)
printf printf("\x50\x6f\x73\x73\x69\x62\x6c\x65" "\n")
<operator>.addition 0x448+7760
<operator>.subtraction 0x389+1125-0x7ed
printf printf("\x42\x72\x6f\x6b\x65\x6e" "\n")
<operator>.addition 0x389+1125
<operator>.addressOf &ReplacementFor_N
<operator>.addressOf &\012ReplacementFor_Pd
<operator>.addressOf &ReplacementFor_Pg
>>>PDG&27 0->2 0->3 0->5 0->6 0->7 0->9 0->10 0->11 0->13 0->14 0->15 0->16 0->17 0->18 0->19 0->20 0->21 0->22 0->23 2->1 3->1 3->5 4->1 5->1 5->1 5->1 5->5 5->6 5->6 5->9 5->10 5->11 5->12 5->13 5->13 5->17 5->18 5->18 5->19 5->21 5->22 5->23 5->24 5->25 5->26 6->1 6->5 7->1 7->1 7->4 8->1 8->1 8->5 9->1 9->17 10->1 10->17 11->1 11->17 12->1 12->1 12->1 13->1 13->1 16->1 16->8 16->8 17->1 17->1 17->1 17->9 17->10 17->11 17->12 17->12 17->12 18->1 19->1 21->1 21->13 21->13 21->18 21->18 22->1
>>>Token int main ( void ) { int T , t ; long ReplacementFor_N , ReplacementFor_Pd , ReplacementFor_Pg ; char ReplacementFor_possible ; scanf ( " \x25 \x64 " , & T ) ; for ( t = ( 0x448 + 7760 - 0x2298 ) ; t < T ; t ++ ) { scanf ( " \x25 \x6c \x64 " , & ReplacementFor_N ) ; scanf ( " \x25 \x6c \x64 " , & ReplacementFor_Pd ) ; scanf ( " \x25 \x6c \x64 " , & ReplacementFor_Pg ) ; ReplacementFor_possible = ReplacementFor_is_possible ( ReplacementFor_N , ReplacementFor_Pd , ReplacementFor_Pg ) ; printf ( " \x43 \x61 \x73 \x65 \x20 \x23 \x25 \x64 \x3a \x20 " , t + ( 0x389 + 1125 - 0x7ed ) ) ; if ( ReplacementFor_possible ) printf ( " \x50 \x6f \x73 \x73 \x69 \x62 \x6c \x65 " " \n " ) ; else printf ( " \x42 \x72 \x6f \x6b \x65 \x6e " " \n " ) ; } return ( 0x2fd + 115 - 0x370 ) ; }
>>>Func
METHOD ReplacementFor_avl_tree_balance_to_root
METHOD_RETURN void
PARAM ReplacementFor_AVLTree*\012ReplacementFor_tree
PARAM ReplacementFor_AVLTreeNode*ReplacementFor_node
<operator>.assignment ReplacementFor_rover=\012ReplacementFor_node
<operator>.notEquals ReplacementFor_rover!=NULL
<operator>.assignment ReplacementFor_rover=\012ReplacementFor_avl_tree_node_balance(ReplacementFor_tree,ReplacementFor_rover)
<operator>.assignment ReplacementFor_rover=ReplacementFor_rover->ReplacementFor_parent
ReplacementFor_avl_tree_node_balance ReplacementFor_avl_tree_node_balance(ReplacementFor_tree,ReplacementFor_rover)
<operator>.indirectFieldAccess ReplacementFor_rover->ReplacementFor_parent
FIELD_IDENTIFIER ReplacementFor_parent ReplacementFor_parent
>>>PDG&11 0->2 0->3 0->4 0->5 0->8 2->1 2->8 3->4 4->1 4->1 4->5 5->1 5->1 5->1 5->5 5->6 5->7 5->8 5->8 5->9 5->10 7->1 7->1 7->5 8->6 8->6
>>>Token static void ReplacementFor_avl_tree_balance_to_root ( ReplacementFor_AVLTree * ReplacementFor_tree , ReplacementFor_AVLTreeNode * ReplacementFor_node ) { ReplacementFor_AVLTreeNode * ReplacementFor_rover ; ReplacementFor_rover = ReplacementFor_node ; while ( ReplacementFor_rover != NULL ) { ReplacementFor_rover = ReplacementFor_avl_tree_node_balance ( ReplacementFor_tree , ReplacementFor_rover ) ; ReplacementFor_rover = ReplacementFor_rover -> ReplacementFor_parent ; } }
>>>Func
METHOD ReplacementFor_cmpval
METHOD_RETURN int
PARAM const void*ReplacementFor_a
PARAM const void*\012ReplacementFor_b
RETURN return*(int*)ReplacementFor_a-*(int*)ReplacementFor_b; return*(int*)ReplacementFor_a-*(int*)ReplacementFor_b;
<operator>.subtraction *(int*)ReplacementFor_a-*(int*)ReplacementFor_b
<operator>.cast (int*)ReplacementFor_a
<operator>.cast (int*)ReplacementFor_b
>>>PDG&8 0->2 0->3 0->6 0->7 2->6 3->7 4->1 5->1 5->1 5->1 5->4 6->1 7->1
>>>Token int ReplacementFor_cmpval ( const void * ReplacementFor_a , const void * ReplacementFor_b ) { return * ( int * ) ReplacementFor_a - * ( int * ) ReplacementFor_b ; }
>>>Func
METHOD ReplacementFor_rule1search
METHOD_RETURN int
PARAM int ReplacementFor_c1
PARAM int ReplacementFor_c2
PARAM int \012ReplacementFor_C
RETURN return-(0x145d+4371-0x256f); return-(0x145d+4371-0x256f);
<operator>.lessThan ReplacementFor_r<ReplacementFor_C
<operator>.postIncrement ReplacementFor_r++
<operator>.minus -(0x145d+4371-0x256f)
<operator>.assignment ReplacementFor_r=(0x1b26+919-0x1ebd)
<operator>.logicalAnd ReplacementFor_c1==\012ReplacementFor_rule1[ReplacementFor_r][(0x78a+4515-0x192d)]&&ReplacementFor_c2==\012ReplacementFor_rule1[ReplacementFor_r][(0x9a0+10-0x9a9)]
<operator>.logicalAnd ReplacementFor_c1==ReplacementFor_rule1[ReplacementFor_r][\012(0x46b+7608-0x2222)]&&ReplacementFor_c2==ReplacementFor_rule1[ReplacementFor_r][\012(0x63f+5298-0x1af1)]
<operator>.subtraction 0x145d+4371-0x256f
<operator>.subtraction 0x1b26+919-0x1ebd
RETURN return \012ReplacementFor_r; return \012ReplacementFor_r;
RETURN return ReplacementFor_r; return ReplacementFor_r;
<operator>.addition 0x145d+4371
<operator>.addition 0x1b26+919
<operator>.equals ReplacementFor_c1==\012ReplacementFor_rule1[ReplacementFor_r][(0x78a+4515-0x192d)]
<operator>.equals ReplacementFor_c2==\012ReplacementFor_rule1[ReplacementFor_r][(0x9a0+10-0x9a9)]
IDENTIFIER ReplacementFor_r return \012ReplacementFor_r;
<operator>.equals ReplacementFor_c1==ReplacementFor_rule1[ReplacementFor_r][\012(0x46b+7608-0x2222)]
<operator>.equals ReplacementFor_c2==ReplacementFor_rule1[ReplacementFor_r][\012(0x63f+5298-0x1af1)]
IDENTIFIER ReplacementFor_r return ReplacementFor_r;
<operator>.subtraction 0x78a+4515-0x192d
<operator>.subtraction 0x9a0+10-0x9a9
<operator>.subtraction 0x46b+7608-0x2222
<operator>.subtraction 0x63f+5298-0x1af1
<operator>.addition 0x78a+4515
<operator>.addition 0x9a0+10
<operator>.addition 0x46b+7608
<operator>.addition 0x63f+5298
<operator>.indirectIndexAccess ReplacementFor_rule1[ReplacementFor_r][(0x78a+4515-0x192d)]
<operator>.indirectIndexAccess ReplacementFor_rule1[ReplacementFor_r][(0x9a0+10-0x9a9)]
<operator>.indirectIndexAccess ReplacementFor_rule1[ReplacementFor_r][\012(0x46b+7608-0x2222)]
<operator>.indirectIndexAccess ReplacementFor_rule1[ReplacementFor_r][\012(0x63f+5298-0x1af1)]
<operator>.indirectIndexAccess ReplacementFor_rule1[ReplacementFor_r]
<operator>.indirectIndexAccess ReplacementFor_rule1[ReplacementFor_r]
<operator>.indirectIndexAccess ReplacementFor_rule1[ReplacementFor_r]
<operator>.indirectIndexAccess ReplacementFor_rule1[ReplacementFor_r]
>>>PDG&40 0->2 0->3 0->4 0->6 0->7 0->12 0->13 0->16 0->17 0->18 0->19 0->20 0->21 0->22 0->23 0->24 0->25 0->26 0->27 0->28 0->29 0->30 0->31 2->18 3->1 3->19 3->22 4->6 5->1 6->1 6->1 6->1 6->5 6->7 6->8 6->10 6->12 6->16 6->18 6->20 6->23 6->24 6->28 6->32 6->36 7->1 7->6 8->5 9->1 9->1 9->6 10->1 10->1 10->1 10->11 10->14 10->21 10->26 10->30 10->34 10->38 11->1 11->1 11->1 11->6 11->7 11->15 12->8 12->8 13->1 13->9 13->9 14->1 15->1 18->1 18->1 18->10 18->10 18->19 18->21 18->25 18->29 18->33 18->37 19->1 19->1 19->10 19->10 19->22 20->14 21->1 21->11 21->11 21->18 21->22 21->27 21->31 21->35 21->39 22->1 22->1 22->11 22->11 22->19 23->15 24->1 25->1 26->1 27->1
>>>Token int ReplacementFor_rule1search ( int ReplacementFor_c1 , int ReplacementFor_c2 , int ReplacementFor_C ) { int ReplacementFor_r ; for ( ReplacementFor_r = ( 0x1b26 + 919 - 0x1ebd ) ; ReplacementFor_r < ReplacementFor_C ; ReplacementFor_r ++ ) { if ( ReplacementFor_c1 == ReplacementFor_rule1 [ ReplacementFor_r ] [ ( 0x78a + 4515 - 0x192d ) ] && ReplacementFor_c2 == ReplacementFor_rule1 [ ReplacementFor_r ] [ ( 0x9a0 + 10 - 0x9a9 ) ] ) { return ReplacementFor_r ; } if ( ReplacementFor_c1 == ReplacementFor_rule1 [ ReplacementFor_r ] [ ( 0x46b + 7608 - 0x2222 ) ] && ReplacementFor_c2 == ReplacementFor_rule1 [ ReplacementFor_r ] [ ( 0x63f + 5298 - 0x1af1 ) ] ) { return ReplacementFor_r ; } } return - ( 0x145d + 4371 - 0x256f ) ; }
>>>Func
METHOD main
METHOD_RETURN int
ReplacementFor_test_crc32 ReplacementFor_test_crc32()
RETURN return(0x25+3055-0xc14); return(0x25+3055-0xc14);
<operator>.subtraction 0x25+3055-0xc14
<operator>.addition 0x25+3055
>>>PDG&6 0->2 0->4 0->5 2->1 3->1 4->1 4->1 4->3
>>>Token int main ( ) { ReplacementFor_test_crc32 ( ) ; return ( 0x25 + 3055 - 0xc14 ) ; }
>>>Func
METHOD ReplacementFor_cmp
METHOD_RETURN int
PARAM void*ReplacementFor_a
PARAM void*ReplacementFor_b
RETURN return*((int\012*)ReplacementFor_b)-*((int*)ReplacementFor_a); return*((int\012*)ReplacementFor_b)-*((int*)ReplacementFor_a);
<operator>.subtraction *((int\012*)ReplacementFor_b)-*((int*)ReplacementFor_a)
<operator>.cast (int\012*)ReplacementFor_b
<operator>.cast (int*)ReplacementFor_a
>>>PDG&8 0->2 0->3 0->6 0->7 2->7 3->6 4->1 5->1 5->1 5->1 5->4 6->1 7->1
>>>Token int ReplacementFor_cmp ( void * ReplacementFor_a , void * ReplacementFor_b ) { return * ( ( int * ) ReplacementFor_b ) - * ( ( int * ) ReplacementFor_a ) ; }
>>>Func
METHOD ReplacementFor_convert_char
METHOD_RETURN char
PARAM char ReplacementFor_code
RETURN return ReplacementFor_code; return ReplacementFor_code;
IDENTIFIER ReplacementFor_code switch(ReplacementFor_code)
IDENTIFIER ReplacementFor_code return ReplacementFor_code;
<operator>.subtraction 0x7ca+5016-0x1b62
RETURN return((char)(0x1e09+565-0x1fed)); return((char)(0x1e09+565-0x1fed));
<operator>.subtraction 0xe95+2600-0x18bc
RETURN return((char)(0x659+2212-0xea6)); return((char)(0x659+2212-0xea6));
<operator>.subtraction 0xa2c+5539-0x1fcd
RETURN return((char)(0x13c3+3137-0x1fbf)); return((char)(0x13c3+3137-0x1fbf));
<operator>.subtraction 0x399+848-0x6e6
RETURN return\012((char)(0xd23+5615-0x22c0)); return\012((char)(0xd23+5615-0x22c0));
<operator>.subtraction 0x885+916-0xc15
RETURN return\012((char)(0x5a2+8359-0x2608)); return\012((char)(0x5a2+8359-0x2608));
<operator>.subtraction 0x245f+96-0x24ba
RETURN return\012((char)(0x1c6a+2434-0x2599)); return\012((char)(0x1c6a+2434-0x2599));
<operator>.subtraction 0x391+7021-0x1ef8
RETURN return\012((char)(0x6dd+1684-0xd2d)); return\012((char)(0x6dd+1684-0xd2d));
<operator>.subtraction 0x282+4747-0x1506
RETURN return\012((char)(0x1589+2136-0x1d9b)); return\012((char)(0x1589+2136-0x1d9b));
<operator>.cast (char)(0x1e09+565-0x1fed)
<operator>.cast (char)(0x659+2212-0xea6)
<operator>.cast (char)(0x13c3+3137-0x1fbf)
<operator>.cast (char)(0xd23+5615-0x22c0)
<operator>.cast (char)(0x5a2+8359-0x2608)
<operator>.cast (char)(0x1c6a+2434-0x2599)
<operator>.cast (char)(0x6dd+1684-0xd2d)
<operator>.cast (char)(0x1589+2136-0x1d9b)
<operator>.addition 0x7ca+5016
<operator>.addition 0xe95+2600
<operator>.addition 0xa2c+5539
<operator>.addition 0x399+848
<operator>.addition 0x885+916
<operator>.addition 0x245f+96
<operator>.addition 0x391+7021
<operator>.addition 0x282+4747
<operator>.subtraction 0x1e09+565-0x1fed
<operator>.subtraction 0x659+2212-0xea6
<operator>.subtraction 0x13c3+3137-0x1fbf
<operator>.subtraction 0xd23+5615-0x22c0
<operator>.subtraction 0x5a2+8359-0x2608
<operator>.subtraction 0x1c6a+2434-0x2599
<operator>.subtraction 0x6dd+1684-0xd2d
<operator>.subtraction 0x1589+2136-0x1d9b
<operator>.addition 0x1e09+565
<operator>.addition 0x659+2212
<operator>.addition 0x13c3+3137
<operator>.addition 0xd23+5615
<operator>.addition 0x5a2+8359
<operator>.addition 0x1c6a+2434
<operator>.addition 0x6dd+1684
<operator>.addition 0x1589+2136
>>>PDG&54 0->2 0->4 0->5 0->6 0->8 0->10 0->12 0->14 0->16 0->18 0->20 0->30 0->31 0->32 0->33 0->34 0->35 0->36 0->37 0->38 0->39 0->40 0->41 0->42 0->43 0->44 0->45 0->46 0->47 0->48 0->49 0->50 0->51 0->52 0->53 2->1 2->5 3->1 5->3 6->1 6->1 7->1 9->1 11->1 13->1 15->1 17->1 19->1 21->1 22->1 22->1 22->7 23->9 24->11 25->13 26->15 27->17 28->19 29->21 38->1 38->22 38->22 39->23 39->23 40->24 40->24 41->25 41->25 42->26 42->26 43->27 43->27 44->28 44->28 45->29 45->29
>>>Token char ReplacementFor_convert_char ( char ReplacementFor_code ) { switch ( ReplacementFor_code ) { case ( 0x7ca + 5016 - 0x1b62 ) : return ( ( char ) ( 0x1e09 + 565 - 0x1fed ) ) ; case ( 0xe95 + 2600 - 0x18bc ) : return ( ( char ) ( 0x659 + 2212 - 0xea6 ) ) ; case ( 0xa2c + 5539 - 0x1fcd ) : return ( ( char ) ( 0x13c3 + 3137 - 0x1fbf ) ) ; case ( 0x399 + 848 - 0x6e6 ) : return ( ( char ) ( 0xd23 + 5615 - 0x22c0 ) ) ; case ( 0x885 + 916 - 0xc15 ) : return ( ( char ) ( 0x5a2 + 8359 - 0x2608 ) ) ; case ( 0x245f + 96 - 0x24ba ) : return ( ( char ) ( 0x1c6a + 2434 - 0x2599 ) ) ; case ( 0x391 + 7021 - 0x1ef8 ) : return ( ( char ) ( 0x6dd + 1684 - 0xd2d ) ) ; case ( 0x282 + 4747 - 0x1506 ) : return ( ( char ) ( 0x1589 + 2136 - 0x1d9b ) ) ; } return ReplacementFor_code ; }
>>>Func
METHOD main
METHOD_RETURN int
scanf scanf("\x25\x64",&T)
RETURN return\012(0xc29+3770-0x1ae3); return\012(0xc29+3770-0x1ae3);
<operator>.lessEqualsThan t<=T
<operator>.postIncrement t++
<operator>.subtraction 0xc29+3770-0x1ae3
<operator>.assignment t=(0x1a65+1139-0x1ed7)
scanf scanf\012("\x25\x64\x20",&ReplacementFor_C)
scanf scanf(\012"\x25\x64\x20",&ReplacementFor_D)
scanf scanf("\x25\x64\x20",\012&ReplacementFor_N)
<operator>.assignment ReplacementFor_k=(0x1785+1240-0x1c5c)
<operator>.assignment ReplacementFor_out[(0xfad+2248-0x1875)]='\0'
memset memset(ReplacementFor_letters \012(0x211+8182-0x2207) sizeof(ReplacementFor_letters))
printf printf(\012"\x43\x61\x73\x65\x20\x23\x25\x64\x3a\x20\x5b",t)
<operator>.lessThan i<ReplacementFor_C
<operator>.postIncrement i++
<operator>.lessThan i<ReplacementFor_D
<operator>.postIncrement i\012++
<operator>.lessThan i<ReplacementFor_N
<operator>.postIncrement i++
<operator>.lessThan i<\012ReplacementFor_N
<operator>.postIncrement i++
<operator>.lessThan i<\012ReplacementFor_k-(0x17aa+372-0x191d)
<operator>.postIncrement i++
printf printf("\x25\x63\x2c\x20",\012ReplacementFor_out[i])
<operator>.notEquals ReplacementFor_k!=(0x1b76+414-0x1d13)
<operator>.addition 0xc29+3770
<operator>.subtraction 0x1a65+1139-0x1ed7
<operator>.assignment i=(0x1b45+1026-0x1f47)
scanf scanf("\x25\x63\x25\x63\x25\x63\x20",&ReplacementFor_a,&ReplacementFor_b,&\012ReplacementFor_c)
<operator>.assignment ReplacementFor_recepies[i].ReplacementFor_x=ReplacementFor_a
<operator>.assignment ReplacementFor_recepies[i].ReplacementFor_y=ReplacementFor_b
<operator>.assignment ReplacementFor_recepies[i].ReplacementFor_z=ReplacementFor_c
<operator>.assignment i=(0x49c+6284-0x1d28)
scanf scanf("\x25\x63\x25\x63\x20",&ReplacementFor_a,&ReplacementFor_b,&\012ReplacementFor_c)
<operator>.assignment ReplacementFor_opposing[i].ReplacementFor_x=\012ReplacementFor_ToIndex(ReplacementFor_a)
<operator>.assignment ReplacementFor_opposing[i].\012ReplacementFor_y=ReplacementFor_ToIndex(ReplacementFor_b)
<operator>.assignment i=(0x5c5+1699-0xc68)
scanf scanf(\012"\x25\x63",&ReplacementFor_in[i])
<operator>.subtraction 0x1785+1240-0x1c5c
<operator>.subtraction 0x211+8182-0x2207
<operator>.assignment i=(0xc4b+1777-0x133c)
<operator>.assignment ReplacementFor_out[ReplacementFor_k]=ReplacementFor_in[i]
<operator>.postIncrement ReplacementFor_letters[ReplacementFor_ToIndex(\012ReplacementFor_out[ReplacementFor_k])]++
<operator>.postIncrement ReplacementFor_k++
<operator>.assignment i=(0x1057+3519-0x1e15)
printf printf(\012"\x25\x63\x5d" "\n",ReplacementFor_out[i])
<operator>.addition 0x1a65+1139
<operator>.addition 0x1785+1240
<operator>.subtraction 0xfad+2248-0x1875
<operator>.addition 0x211+8182
<operator>.lessThan ReplacementFor_j<ReplacementFor_C
<operator>.postIncrement ReplacementFor_j++
<operator>.lessThan ReplacementFor_j<ReplacementFor_D
<operator>.postIncrement ReplacementFor_j++
<operator>.subtraction ReplacementFor_k-(0x17aa+372-0x191d)
<operator>.subtraction 0x1b76+414-0x1d13
printf printf("\x5d" "\n")
<operator>.subtraction 0x1b45+1026-0x1f47
<operator>.subtraction 0x49c+6284-0x1d28
ReplacementFor_ToIndex ReplacementFor_ToIndex(ReplacementFor_a)
ReplacementFor_ToIndex ReplacementFor_ToIndex(ReplacementFor_b)
<operator>.subtraction 0x5c5+1699-0xc68
<operator>.addition 0xfad+2248
<operator>.subtraction 0xc4b+1777-0x133c
<operator>.assignment ReplacementFor_j=(0xad4+3572-0x18c8)
<operator>.assignment ReplacementFor_j=\012(0x275+5955-0x19b8)
<operator>.subtraction 0x1057+3519-0x1e15
<operator>.subtraction 0x17aa+372-0x191d
<operator>.addition 0x1b76+414
<operator>.addition 0x1b45+1026
<operator>.addition 0x49c+6284
<operator>.addition 0x5c5+1699
<operator>.addition 0xc4b+1777
<operator>.logicalOr (ReplacementFor_out[ReplacementFor_k]==\012ReplacementFor_recepies[ReplacementFor_j].ReplacementFor_x&&ReplacementFor_out[\012ReplacementFor_k-(0xbad+3954-0x1b1e)]==ReplacementFor_recepies[ReplacementFor_j]\012.ReplacementFor_y)||(ReplacementFor_out[ReplacementFor_k]==\012ReplacementFor_recepies[ReplacementFor_j].ReplacementFor_y&&ReplacementFor_out[\012ReplacementFor_k-(0x22f1+127-0x236f)]==ReplacementFor_recepies[ReplacementFor_j]\012.ReplacementFor_x)
ReplacementFor_ToIndex ReplacementFor_ToIndex(\012ReplacementFor_out[ReplacementFor_k])
<operator>.logicalAnd ReplacementFor_letters[ReplacementFor_opposing[ReplacementFor_j].\012ReplacementFor_x]&&ReplacementFor_letters[ReplacementFor_opposing[\012ReplacementFor_j].ReplacementFor_y]
<operator>.addition 0x1057+3519
<operator>.addition 0x17aa+372
<operator>.subtraction 0xad4+3572-0x18c8
<operator>.postDecrement ReplacementFor_k--
<operator>.postDecrement ReplacementFor_letters[\012ReplacementFor_ToIndex(ReplacementFor_out[ReplacementFor_k])]--
<operator>.assignment ReplacementFor_out[ReplacementFor_k]=ReplacementFor_recepies[ReplacementFor_j].\012ReplacementFor_z
<operator>.subtraction 0x275+5955-0x19b8
memset memset(ReplacementFor_letters \012(0xe93+3442-0x1c05) sizeof(ReplacementFor_letters))
<operator>.assignment ReplacementFor_k=\012(0xcba+5946-0x23f4)
<operator>.addition 0xad4+3572
<operator>.logicalAnd ReplacementFor_out[ReplacementFor_k]==\012ReplacementFor_recepies[ReplacementFor_j].ReplacementFor_x&&ReplacementFor_out[\012ReplacementFor_k-(0xbad+3954-0x1b1e)]==ReplacementFor_recepies[ReplacementFor_j]\012.ReplacementFor_y
<operator>.logicalAnd ReplacementFor_out[ReplacementFor_k]==\012ReplacementFor_recepies[ReplacementFor_j].ReplacementFor_y&&ReplacementFor_out[\012ReplacementFor_k-(0x22f1+127-0x236f)]==ReplacementFor_recepies[ReplacementFor_j]\012.ReplacementFor_x
<operator>.addition 0x275+5955
<operator>.equals ReplacementFor_out[ReplacementFor_k]==\012ReplacementFor_recepies[ReplacementFor_j].ReplacementFor_x
<operator>.equals ReplacementFor_out[\012ReplacementFor_k-(0xbad+3954-0x1b1e)]==ReplacementFor_recepies[ReplacementFor_j]\012.ReplacementFor_y
<operator>.equals ReplacementFor_out[ReplacementFor_k]==\012ReplacementFor_recepies[ReplacementFor_j].ReplacementFor_y
<operator>.equals ReplacementFor_out[\012ReplacementFor_k-(0x22f1+127-0x236f)]==ReplacementFor_recepies[ReplacementFor_j]\012.ReplacementFor_x
<operator>.subtraction 0xe93+3442-0x1c05
<operator>.subtraction 0xcba+5946-0x23f4
ReplacementFor_ToIndex ReplacementFor_ToIndex(ReplacementFor_out[ReplacementFor_k])
<operator>.addition 0xe93+3442
<operator>.addition 0xcba+5946
<operator>.subtraction ReplacementFor_k-(0xbad+3954-0x1b1e)
<operator>.subtraction ReplacementFor_k-(0x22f1+127-0x236f)
<operator>.subtraction 0xbad+3954-0x1b1e
<operator>.subtraction 0x22f1+127-0x236f
<operator>.addition 0xbad+3954
<operator>.addition 0x22f1+127
<operator>.addressOf &ReplacementFor_C
<operator>.addressOf &ReplacementFor_D
<operator>.addressOf &ReplacementFor_N
<operator>.indirectIndexAccess ReplacementFor_out[(0xfad+2248-0x1875)]
<operator>.sizeOf sizeof(ReplacementFor_letters)
<operator>.indirectIndexAccess ReplacementFor_out[i]
<operator>.addressOf &ReplacementFor_a
<operator>.addressOf &ReplacementFor_b
<operator>.addressOf &\012ReplacementFor_c
<operator>.fieldAccess ReplacementFor_recepies[i].ReplacementFor_x
<operator>.fieldAccess ReplacementFor_recepies[i].ReplacementFor_y
<operator>.fieldAccess ReplacementFor_recepies[i].ReplacementFor_z
<operator>.addressOf &ReplacementFor_a
<operator>.addressOf &ReplacementFor_b
<operator>.addressOf &\012ReplacementFor_c
<operator>.fieldAccess ReplacementFor_opposing[i].ReplacementFor_x
<operator>.fieldAccess ReplacementFor_opposing[i].\012ReplacementFor_y
<operator>.addressOf &ReplacementFor_in[i]
<operator>.indirectIndexAccess ReplacementFor_out[ReplacementFor_k]
<operator>.indirectIndexAccess ReplacementFor_in[i]
<operator>.indirectIndexAccess ReplacementFor_letters[ReplacementFor_ToIndex(\012ReplacementFor_out[ReplacementFor_k])]
<operator>.indirectIndexAccess ReplacementFor_out[i]
<operator>.indirectIndexAccess ReplacementFor_recepies[i]
FIELD_IDENTIFIER ReplacementFor_x ReplacementFor_x
<operator>.indirectIndexAccess ReplacementFor_recepies[i]
FIELD_IDENTIFIER ReplacementFor_y ReplacementFor_y
<operator>.indirectIndexAccess ReplacementFor_recepies[i]
FIELD_IDENTIFIER ReplacementFor_z ReplacementFor_z
<operator>.indirectIndexAccess ReplacementFor_opposing[i]
FIELD_IDENTIFIER ReplacementFor_x ReplacementFor_x
<operator>.indirectIndexAccess ReplacementFor_opposing[i]
FIELD_IDENTIFIER ReplacementFor_y ReplacementFor_y
<operator>.indirectIndexAccess ReplacementFor_in[i]
<operator>.indirectIndexAccess ReplacementFor_out[ReplacementFor_k]
<operator>.indirectIndexAccess ReplacementFor_letters[ReplacementFor_opposing[ReplacementFor_j].\012ReplacementFor_x]
<operator>.indirectIndexAccess ReplacementFor_letters[ReplacementFor_opposing[\012ReplacementFor_j].ReplacementFor_y]
<operator>.indirectIndexAccess ReplacementFor_letters[\012ReplacementFor_ToIndex(ReplacementFor_out[ReplacementFor_k])]
<operator>.indirectIndexAccess ReplacementFor_out[ReplacementFor_k]
<operator>.fieldAccess ReplacementFor_recepies[ReplacementFor_j].\012ReplacementFor_z
<operator>.fieldAccess ReplacementFor_opposing[ReplacementFor_j].\012ReplacementFor_x
<operator>.fieldAccess ReplacementFor_opposing[\012ReplacementFor_j].ReplacementFor_y
<operator>.sizeOf sizeof(ReplacementFor_letters)
<operator>.indirectIndexAccess ReplacementFor_out[ReplacementFor_k]
<operator>.fieldAccess ReplacementFor_recepies[ReplacementFor_j].ReplacementFor_x
<operator>.indirectIndexAccess ReplacementFor_out[\012ReplacementFor_k-(0xbad+3954-0x1b1e)]
<operator>.fieldAccess ReplacementFor_recepies[ReplacementFor_j]\012.ReplacementFor_y
<operator>.indirectIndexAccess ReplacementFor_out[ReplacementFor_k]
<operator>.fieldAccess ReplacementFor_recepies[ReplacementFor_j].ReplacementFor_y
<operator>.indirectIndexAccess ReplacementFor_out[\012ReplacementFor_k-(0x22f1+127-0x236f)]
<operator>.fieldAccess ReplacementFor_recepies[ReplacementFor_j]\012.ReplacementFor_x
<operator>.indirectIndexAccess ReplacementFor_recepies[ReplacementFor_j]
FIELD_IDENTIFIER ReplacementFor_z ReplacementFor_z
<operator>.indirectIndexAccess ReplacementFor_opposing[ReplacementFor_j]
FIELD_IDENTIFIER ReplacementFor_x ReplacementFor_x
<operator>.indirectIndexAccess ReplacementFor_opposing[\012ReplacementFor_j]
FIELD_IDENTIFIER ReplacementFor_y ReplacementFor_y
<operator>.indirectIndexAccess ReplacementFor_recepies[ReplacementFor_j]
FIELD_IDENTIFIER ReplacementFor_x ReplacementFor_x
<operator>.indirectIndexAccess ReplacementFor_recepies[ReplacementFor_j]
FIELD_IDENTIFIER ReplacementFor_y ReplacementFor_y
<operator>.indirectIndexAccess ReplacementFor_recepies[ReplacementFor_j]
FIELD_IDENTIFIER ReplacementFor_y ReplacementFor_y
<operator>.indirectIndexAccess ReplacementFor_recepies[ReplacementFor_j]
FIELD_IDENTIFIER ReplacementFor_x ReplacementFor_x
<operator>.indirectIndexAccess ReplacementFor_out[ReplacementFor_k]
>>>PDG&171 0->2 0->4 0->5 0->6 0->8 0->9 0->10 0->12 0->13 0->14 0->15 0->16 0->17 0->18 0->19 0->20 0->21 0->22 0->23 0->24 0->25 0->26 0->27 0->28 0->30 0->31 0->32 0->33 0->35 0->40 0->41 0->45 0->47 0->48 0->49 0->50 0->51 0->52 0->53 0->54 0->55 0->56 0->57 0->58 0->59 0->60 0->61 0->62 0->63 0->64 0->65 0->68 0->69 0->70 0->71 0->72 0->73 0->74 0->78 0->79 0->80 0->81 0->84 0->85 0->87 0->90 0->95 0->96 0->98 0->99 0->100 0->101 0->102 0->103 0->104 0->105 2->1 2->4 3->1 4->1 4->1 4->1 4->4 4->5 4->8 4->9 4->10 4->11 4->12 4->13 4->14 4->14 4->15 4->17 4->19 4->21 4->23 4->26 4->29 4->34 4->38 4->40 4->41 4->42 4->46 4->49 4->50 4->51 4->56 4->57 4->59 4->60 4->63 4->64 4->65 4->68 4->69 4->70 4->71 4->72 4->73 4->74 4->78 4->79 4->106 4->107 4->108 4->109 4->110 5->1 5->4 6->1 6->1 6->3 7->1 7->1 7->4 8->1 8->15 8->52 9->1 9->17 9->54 10->1 10->19 10->21 11->1 11->1 11->45 11->56 11->81 11->100 11->101 12->1 12->1 13->1 13->1 13->1 13->44 13->77 13->82 14->1 14->5 15->1 15->1 15->8 15->15 15->16 15->16 15->30 15->31 15->32 15->33 15->52 15->112 15->113 15->114 15->115 15->116 15->117 15->128 15->129 15->130 15->131 15->132 15->133 16->1 16->15 17->1 17->1 17->9 17->17 17->18 17->18 17->35 17->36 17->37 17->54 17->61 17->62 17->118 17->119 17->120 17->121 17->122 17->134 17->135 17->136 17->137 18->1 18->17 19->1 19->19 19->20 19->20 19->21 19->39 19->123 19->138 20->1 20->19 21->1 21->1 21->10 21->19 21->21 21->22 21->22 21->43 21->44 21->45 21->52 21->54 21->66 21->67 21->76 21->80 21->84 21->87 21->90 21->124 21->125 21->126 21->139 22->1 22->21 23->1 23->1 23->1 23->23 23->24 23->24 23->25 23->56 23->69 23->79 23->111 24->1 24->23 25->1 25->1 25->47 26->1 26->1 26->1 26->47 26->58 26->127 28->1 28->7 28->7 29->1 29->1 29->15 30->1 30->1 30->1 30->31 30->35 30->61 31->1 31->1 32->1 32->1 33->1 33->1 34->1 34->1 34->17 35->1 35->1 35->1 35->30 35->31 35->61 36->1 36->1 37->1 37->1 38->1 38->1 38->19 39->1 39->43 40->1 40->11 40->11 41->1 41->13 41->13 42->1 42->1 42->21 43->1 43->1 43->76 43->91 44->1 44->1 44->13 44->85 45->1 45->56 45->81 45->100 45->101 46->1 46->1 46->23 47->1 47->1 47->25 50->1 52->1 52->1 52->8 52->15 52->53 52->75 52->88 52->91 52->148 52->149 52->162 52->163 53->1 53->52 54->1 54->1 54->1 54->9 54->17 54->55 54->77 54->140 54->145 54->158 54->159 55->1 55->54 56->1 56->23 56->23 56->26 57->1 57->26 57->26 58->1 59->1 59->29 59->29 60->1 60->34 60->34 61->1 61->30 61->31 61->35 61->36 62->1 62->32 62->37 63->1 63->38 63->38 65->1 65->42 65->42 66->1 66->1 66->52 67->1 67->1 67->54 68->1 68->46 68->46 69->1 69->56 69->56 75->1 75->1 75->1 75->52 75->53 75->81 75->82 75->83 75->97 75->142 75->143 75->144 75->156 75->157 75->170 76->1 77->1 77->1 77->1 77->13 77->13 77->54 77->55 77->85 77->85 77->85 77->86 77->95 77->96 77->98 77->99 77->147 80->1 80->66 80->66 81->1 81->45 82->1 82->1 82->13 82->85 83->1 83->76 84->1 84->67 84->67 85->1 85->1 85->1 85->44 85->77 85->82 86->1 86->1 86->45 88->1 88->1 88->75 88->75 88->89 88->93 88->152 88->153 88->166 88->167 89->1 89->1 89->75 89->75 91->76 91->88 91->88 91->92 91->93 91->97 91->100 91->102 91->104 91->150 91->151 91->164 91->165 92->1 92->88 92->88 93->76 93->89 93->89 93->91 93->94 93->97 93->101 93->103 93->105 93->154 93->155 93->168 93->169 94->1 94->89 94->89 95->1 95->85 95->85 96->1 96->86 96->86 100->1 100->45 100->81 100->101 101->1 101->45 101->81 101->100 102->1 102->100 102->100 103->1 103->101 103->101 140->141 140->146 140->160 140->161
>>>Token int main ( ) { int t , T , ReplacementFor_N , ReplacementFor_C , ReplacementFor_D ; ReplacementFor_recepy ReplacementFor_recepies [ ( 0x13a2 + 728 - 0x1652 ) ] ; ReplacementFor_pair ReplacementFor_opposing [ ( 0x176 + 7047 - 0x1cd5 ) ] ; int ReplacementFor_letters [ ReplacementFor_NUM_LETTERS ] ; char ReplacementFor_out [ ( 0x763 + 3112 - 0x1326 ) ] ; char ReplacementFor_in [ ( 0x7e9 + 512 - 0x985 ) ] ; int i , ReplacementFor_j , ReplacementFor_k ; char ReplacementFor_a , ReplacementFor_b , ReplacementFor_c ; scanf ( " \x25 \x64 " , & T ) ; for ( t = ( 0x1a65 + 1139 - 0x1ed7 ) ; t <= T ; t ++ ) { scanf ( " \x25 \x64 \x20 " , & ReplacementFor_C ) ; for ( i = ( 0x1b45 + 1026 - 0x1f47 ) ; i < ReplacementFor_C ; i ++ ) { scanf ( " \x25 \x63 \x25 \x63 \x25 \x63 \x20 " , & ReplacementFor_a , & ReplacementFor_b , & ReplacementFor_c ) ; ReplacementFor_recepies [ i ] . ReplacementFor_x = ReplacementFor_a ; ReplacementFor_recepies [ i ] . ReplacementFor_y = ReplacementFor_b ; ReplacementFor_recepies [ i ] . ReplacementFor_z = ReplacementFor_c ; } scanf ( " \x25 \x64 \x20 " , & ReplacementFor_D ) ; for ( i = ( 0x49c + 6284 - 0x1d28 ) ; i < ReplacementFor_D ; i ++ ) { scanf ( " \x25 \x63 \x25 \x63 \x20 " , & ReplacementFor_a , & ReplacementFor_b , & ReplacementFor_c ) ; ReplacementFor_opposing [ i ] . ReplacementFor_x = ReplacementFor_ToIndex ( ReplacementFor_a ) ; ReplacementFor_opposing [ i ] . ReplacementFor_y = ReplacementFor_ToIndex ( ReplacementFor_b ) ; } scanf ( " \x25 \x64 \x20 " , & ReplacementFor_N ) ; for ( i = ( 0x5c5 + 1699 - 0xc68 ) ; i < ReplacementFor_N ; i ++ ) { scanf ( " \x25 \x63 " , & ReplacementFor_in [ i ] ) ; } ReplacementFor_k = ( 0x1785 + 1240 - 0x1c5c ) ; ReplacementFor_out [ ( 0xfad + 2248 - 0x1875 ) ] = ' \0 ' ; memset ( ReplacementFor_letters , ( 0x211 + 8182 - 0x2207 ) , sizeof ( ReplacementFor_letters ) ) ; for ( i = ( 0xc4b + 1777 - 0x133c ) ; i < ReplacementFor_N ; i ++ ) { ReplacementFor_out [ ReplacementFor_k ] = ReplacementFor_in [ i ] ; for ( ReplacementFor_j = ( 0xad4 + 3572 - 0x18c8 ) ; ReplacementFor_j < ReplacementFor_C ; ReplacementFor_j ++ ) { if ( ( ReplacementFor_out [ ReplacementFor_k ] == ReplacementFor_recepies [ ReplacementFor_j ] . ReplacementFor_x && ReplacementFor_out [ ReplacementFor_k - ( 0xbad + 3954 - 0x1b1e ) ] == ReplacementFor_recepies [ ReplacementFor_j ] . ReplacementFor_y ) || ( ReplacementFor_out [ ReplacementFor_k ] == ReplacementFor_recepies [ ReplacementFor_j ] . ReplacementFor_y && ReplacementFor_out [ ReplacementFor_k - ( 0x22f1 + 127 - 0x236f ) ] == ReplacementFor_recepies [ ReplacementFor_j ] . ReplacementFor_x ) ) { ReplacementFor_k -- ; ReplacementFor_letters [ ReplacementFor_ToIndex ( ReplacementFor_out [ ReplacementFor_k ] ) ] -- ; ReplacementFor_out [ ReplacementFor_k ] = ReplacementFor_recepies [ ReplacementFor_j ] . ReplacementFor_z ; break ; } } ReplacementFor_letters [ ReplacementFor_ToIndex ( ReplacementFor_out [ ReplacementFor_k ] ) ] ++ ; for ( ReplacementFor_j = ( 0x275 + 5955 - 0x19b8 ) ; ReplacementFor_j < ReplacementFor_D ; ReplacementFor_j ++ ) { if ( ReplacementFor_letters [ ReplacementFor_opposing [ ReplacementFor_j ] . ReplacementFor_x ] && ReplacementFor_letters [ ReplacementFor_opposing [ ReplacementFor_j ] . ReplacementFor_y ] ) { memset ( ReplacementFor_letters , ( 0xe93 + 3442 - 0x1c05 ) , sizeof ( ReplacementFor_letters ) ) ; ReplacementFor_k = ( 0xcba + 5946 - 0x23f4 ) ; break ; } } ReplacementFor_k ++ ; } printf ( " \x43 \x61 \x73 \x65 \x20 \x23 \x25 \x64 \x3a \x20 \x5b " , t ) ; for ( i = ( 0x1057 + 3519 - 0x1e15 ) ; i < ReplacementFor_k - ( 0x17aa + 372 - 0x191d ) ; i ++ ) printf ( " \x25 \x63 \x2c \x20 " , ReplacementFor_out [ i ] ) ; if ( ReplacementFor_k != ( 0x1b76 + 414 - 0x1d13 ) ) printf ( " \x25 \x63 \x5d " " \n " , ReplacementFor_out [ i ] ) ; else printf ( " \x5d " " \n " ) ; } return ( 0xc29 + 3770 - 0x1ae3 ) ; }
>>>Func
METHOD main
METHOD_RETURN int
PARAM int ReplacementFor_argc
PARAM char*ReplacementFor_argv[]
<operator>.assignment ReplacementFor_sum=(0x987+5731-0x1fea)
printf printf(\012"\x53\x75\x6d\x20\x69\x73\x3a\x20\x25\x64" "\n",ReplacementFor_sum)
RETURN return\012(0xc91+4637-0x1eae); return\012(0xc91+4637-0x1eae);
<operator>.lessThan i<\012ReplacementFor_argc
<operator>.postIncrement i++
<operator>.lessEqualsThan i<=\012(0x1ad1+2412-0x2439)
<operator>.postIncrement i++
<operator>.subtraction 0xc91+4637-0x1eae
<operator>.subtraction 0x987+5731-0x1fea
<operator>.assignment i=(0x880+4587-0x1a6b)
<operator>.assignmentPlus ReplacementFor_sum+=i
<operator>.assignment i=(0x14b0+126-0x152d)
<operator>.assignmentPlus ReplacementFor_sum+=ReplacementFor_sum
<operator>.addition 0x987+5731
<operator>.subtraction 0x1ad1+2412-0x2439
<operator>.addition 0xc91+4637
<operator>.subtraction 0x880+4587-0x1a6b
<operator>.subtraction 0x14b0+126-0x152d
<operator>.addition 0x1ad1+2412
<operator>.addition 0x880+4587
<operator>.addition 0x14b0+126
>>>PDG&25 0->2 0->3 0->5 0->7 0->8 0->9 0->10 0->11 0->12 0->14 0->16 0->17 0->18 0->19 0->20 0->21 0->22 0->23 0->24 2->7 3->1 4->1 4->1 4->5 4->14 4->16 5->1 5->1 6->1 7->1 7->1 7->7 7->8 7->8 7->14 7->14 8->1 8->7 9->1 9->1 9->1 9->9 9->10 9->10 9->16 9->18 9->22 10->1 10->9 11->1 11->1 11->6 12->1 12->4 12->4 13->1 13->1 13->7 14->1 14->5 14->16 15->1 15->1 15->9 16->1 16->5 18->1 18->9 18->9 20->1 20->13 20->13 21->1 21->15 21->15
>>>Token int main ( int ReplacementFor_argc , char * ReplacementFor_argv [ ] ) { int i ; int ReplacementFor_sum = ( 0x987 + 5731 - 0x1fea ) ; for ( i = ( 0x880 + 4587 - 0x1a6b ) ; i < ReplacementFor_argc ; i ++ ) { ReplacementFor_sum += i ; } for ( i = ( 0x14b0 + 126 - 0x152d ) ; i <= ( 0x1ad1 + 2412 - 0x2439 ) ; i ++ ) { ReplacementFor_sum += ReplacementFor_sum ; } printf ( " \x53 \x75 \x6d \x20 \x69 \x73 \x3a \x20 \x25 \x64 " " \n " , ReplacementFor_sum ) ; return ( 0xc91 + 4637 - 0x1eae ) ; }
>>>Func
METHOD main
METHOD_RETURN int
scanf scanf("\x25\x64",&t)
RETURN return\012(0x2f8+7547-0x2073); return\012(0x2f8+7547-0x2073);
<operator>.lessEqualsThan i<=t
<operator>.postIncrement i++
<operator>.subtraction 0x2f8+7547-0x2073
<operator>.assignment i=(0x1292+3658-0x20db)
printf printf("\x43\x61\x73\x65\x20\x23\x25\x64\x3a\x20",i)
scanf scanf(\012"\x25\x64\x25\x64\x25\x64",&ReplacementFor_n,&ReplacementFor_d,&ReplacementFor_g\012)
printf printf("\n")
<operator>.equals ReplacementFor_g==(0x3d9+3902-0x1317)
<operator>.addition 0x2f8+7547
<operator>.subtraction 0x1292+3658-0x20db
<operator>.addition 0x1292+3658
<operator>.subtraction 0x3d9+3902-0x1317
<operator>.equals ReplacementFor_d==\012(0x14b6+4234-0x2540)
<operator>.addition 0x3d9+3902
printf printf("\x50\x6f\x73\x73\x69\x62\x6c\x65")
<operator>.equals ReplacementFor_d==(0xaeb+4024-0x1a3f)
<operator>.subtraction 0x14b6+4234-0x2540
printf printf(\012"\x42\x72\x6f\x6b\x65\x6e")
printf printf("\x50\x6f\x73\x73\x69\x62\x6c\x65")
<operator>.addition 0x14b6+4234
<operator>.subtraction 0xaeb+4024-0x1a3f
<operator>.addition 0xaeb+4024
<operator>.equals ReplacementFor_g==\012(0x1164+4597-0x22f5)
printf printf("\x42\x72\x6f\x6b\x65\x6e")
<operator>.subtraction 0x1164+4597-0x22f5
<operator>.addition 0x1164+4597
<operator>.greaterEqualsThan ReplacementFor_n>=(0x1fb6+294-0x2078)
printf printf("\x50\x6f\x73\x73\x69\x62\x6c\x65"\012)
<operator>.subtraction 0x1fb6+294-0x2078
<operator>.assignment fd=(0x13f7+4818-0x26c9)
<operator>.addition 0x1fb6+294
<operator>.lessEqualsThan ReplacementFor_u<=ReplacementFor_n
<operator>.postIncrement ReplacementFor_u++
IDENTIFIER fd if (fd)
<operator>.subtraction 0x13f7+4818-0x26c9
<operator>.assignment ReplacementFor_u=(0xb2a+4676-0x1d6d)
printf printf("\x50\x6f\x73\x73\x69\x62\x6c\x65")
<operator>.addition 0x13f7+4818
<operator>.equals ReplacementFor_u*\012ReplacementFor_d%(0x405+7023-0x1f10)==(0x15e5+476-0x17c1)
printf printf("\x42\x72\x6f\x6b\x65\x6e")
<operator>.subtraction 0xb2a+4676-0x1d6d
<operator>.assignment fd=\012(0x3e8+7474-0x2119)
<operator>.addition 0xb2a+4676
<operator>.modulo ReplacementFor_u*\012ReplacementFor_d%(0x405+7023-0x1f10)
<operator>.subtraction 0x15e5+476-0x17c1
<operator>.multiplication ReplacementFor_u*\012ReplacementFor_d
<operator>.subtraction 0x405+7023-0x1f10
<operator>.addition 0x15e5+476
<operator>.subtraction 0x3e8+7474-0x2119
<operator>.addition 0x405+7023
<operator>.addition 0x3e8+7474
<operator>.addressOf &ReplacementFor_n
<operator>.addressOf &ReplacementFor_d
<operator>.addressOf &ReplacementFor_g
>>>PDG&58 0->2 0->4 0->5 0->6 0->8 0->9 0->10 0->11 0->12 0->13 0->14 0->15 0->16 0->17 0->18 0->19 0->20 0->21 0->22 0->23 0->24 0->25 0->26 0->27 0->28 0->29 0->30 0->31 0->32 0->34 0->35 0->36 0->37 0->38 0->40 0->41 0->43 0->44 0->46 0->48 0->49 0->50 0->51 0->52 0->53 0->54 2->1 2->4 3->1 4->1 4->1 4->1 4->4 4->5 4->8 4->8 4->9 4->10 4->11 4->15 4->17 4->55 4->56 4->57 5->1 5->4 6->1 6->1 6->3 7->1 7->1 7->4 8->1 8->5 9->1 9->1 9->1 9->30 9->35 10->1 11->1 11->1 11->1 11->16 11->19 11->20 11->23 11->24 11->25 11->26 13->1 13->7 13->7 15->1 15->11 15->11 16->1 16->1 16->1 16->18 16->19 16->21 18->1 19->1 19->1 19->1 19->16 19->22 19->26 19->28 19->29 19->49 20->1 20->16 20->16 21->1 22->1 24->1 24->19 24->19 26->1 26->1 26->1 26->11 26->27 26->30 26->32 26->34 27->1 28->1 28->26 28->26 30->1 30->1 30->1 30->9 30->31 30->33 30->35 30->35 30->38 30->39 30->40 30->41 30->43 30->44 30->46 31->1 32->1 32->30 32->30 33->1 33->1 33->1 35->1 35->1 35->1 35->9 35->30 35->42 35->47 35->48 35->49 35->49 35->50 35->51 35->53 36->1 36->35 38->1 38->33 38->33 39->1 39->1 39->35 40->1 42->1 42->1 42->1 42->35 42->36 42->45 42->52 42->54 43->1 44->1 44->39 44->39 45->1 45->1 45->1 47->1 47->1 47->42 47->42 48->1 48->42 48->42 49->1 49->1 49->16 49->19 49->36 49->47 49->47 50->1 50->47 50->47 52->1 52->45 52->45
>>>Token int main ( ) { int t , ReplacementFor_n , ReplacementFor_d , ReplacementFor_g , i ; int fd , ReplacementFor_u ; scanf ( " \x25 \x64 " , & t ) ; for ( i = ( 0x1292 + 3658 - 0x20db ) ; i <= t ; i ++ ) { printf ( " \x43 \x61 \x73 \x65 \x20 \x23 \x25 \x64 \x3a \x20 " , i ) ; scanf ( " \x25 \x64 \x25 \x64 \x25 \x64 " , & ReplacementFor_n , & ReplacementFor_d , & ReplacementFor_g ) ; if ( ReplacementFor_g == ( 0x3d9 + 3902 - 0x1317 ) ) { if ( ReplacementFor_d == ( 0x14b6 + 4234 - 0x2540 ) ) { printf ( " \x50 \x6f \x73 \x73 \x69 \x62 \x6c \x65 " ) ; } else { printf ( " \x42 \x72 \x6f \x6b \x65 \x6e " ) ; } } else { if ( ReplacementFor_d == ( 0xaeb + 4024 - 0x1a3f ) ) { printf ( " \x50 \x6f \x73 \x73 \x69 \x62 \x6c \x65 " ) ; } else if ( ReplacementFor_g == ( 0x1164 + 4597 - 0x22f5 ) ) { printf ( " \x42 \x72 \x6f \x6b \x65 \x6e " ) ; } else { if ( ReplacementFor_n >= ( 0x1fb6 + 294 - 0x2078 ) ) { printf ( " \x50 \x6f \x73 \x73 \x69 \x62 \x6c \x65 " ) ; } else { fd = ( 0x13f7 + 4818 - 0x26c9 ) ; for ( ReplacementFor_u = ( 0xb2a + 4676 - 0x1d6d ) ; ReplacementFor_u <= ReplacementFor_n ; ReplacementFor_u ++ ) { if ( ReplacementFor_u * ReplacementFor_d % ( 0x405 + 7023 - 0x1f10 ) == ( 0x15e5 + 476 - 0x17c1 ) ) { fd = ( 0x3e8 + 7474 - 0x2119 ) ; break ; } } if ( fd ) { printf ( " \x50 \x6f \x73 \x73 \x69 \x62 \x6c \x65 " ) ; } else { printf ( " \x42 \x72 \x6f \x6b \x65 \x6e " ) ; } } } } printf ( " \n " ) ; } return ( 0x2f8 + 7547 - 0x2073 ) ; }
>>>Func
METHOD main
METHOD_RETURN int
PARAM int ReplacementFor_argc
PARAM char*ReplacementFor_argv[]
<operator>.assignment ReplacementFor_sum=(0x16ea+1960-0x1e92)
<operator>.assignment *\012ReplacementFor_str=ReplacementFor_argv[(0xb8b+4936-0x1ed2)]
printf printf("\x53\x75\x6d\x20\x69\x73\x3a\x20\x25\x64" "\n",\012ReplacementFor_sum)
RETURN return(0x1edd+1077-0x2312); return(0x1edd+1077-0x2312);
<operator>.preIncrement ++s
<operator>.subtraction 0x1edd+1077-0x2312
<operator>.subtraction 0x16ea+1960-0x1e92
<operator>.assignment s=ReplacementFor_str
<operator>.addition 0x16ea+1960
<operator>.subtraction 0xb8b+4936-0x1ed2
<operator>.preIncrement ++t
<operator>.addition 0x1edd+1077
<operator>.addition 0xb8b+4936
<operator>.assignment t=ReplacementFor_str
<operator>.assignmentPlus ReplacementFor_sum+=*t
<operator>.indirection *s
<operator>.indirection *t
<operator>.indirection *t
>>>PDG&22 0->2 0->3 0->6 0->8 0->9 0->10 0->11 0->12 0->13 0->14 0->15 0->16 0->17 0->18 2->1 3->1 3->5 4->1 4->1 4->6 4->18 5->1 5->1 5->11 5->17 6->1 6->1 7->1 8->1 8->1 9->1 9->1 9->7 10->1 10->4 10->4 11->1 11->1 11->1 11->8 13->1 14->1 14->1 17->1 17->1 17->1 17->14 18->1 18->1 18->6 19->8 19->17 19->19 19->20 20->14 20->18 20->20 20->21
>>>Token int main ( int ReplacementFor_argc , char * ReplacementFor_argv [ ] ) { int i , ReplacementFor_j ; int ReplacementFor_sum = ( 0x16ea + 1960 - 0x1e92 ) ; const char * ReplacementFor_str = ReplacementFor_argv [ ( 0xb8b + 4936 - 0x1ed2 ) ] ; register const char * s , * t ; for ( s = ReplacementFor_str ; * s ; ++ s ) { for ( t = ReplacementFor_str ; * t ; ++ t ) { ReplacementFor_sum += * t ; } } printf ( " \x53 \x75 \x6d \x20 \x69 \x73 \x3a \x20 \x25 \x64 " " \n " , ReplacementFor_sum ) ; return ( 0x1edd + 1077 - 0x2312 ) ; }
>>>Func
METHOD ReplacementFor_calc
METHOD_RETURN int
PARAM struct ReplacementFor_area*ReplacementFor_area
PARAM int \012ReplacementFor_areas
PARAM int ReplacementFor_tail
<operator>.assignment ReplacementFor_min=INT_MAX
memset memset(ReplacementFor_stack (0x340+6438-0x1c66) sizeof(ReplacementFor_stack))
memset memset(ReplacementFor_used (0x44d+6802-0x1edf) sizeof(ReplacementFor_used))
<operator>.assignment ReplacementFor_depth=(0x108c+5186-0x24ce)
<operator>.assignment t=(0x1383+3123-0x1fb6)
RETURN return-(0xd5a+2170-0x1570); return-(0xd5a+2170-0x1570);
<operator>.lessThan i<ReplacementFor_areas
<operator>.postIncrement i++
<operator>.minus -(0xd5a+2170-0x1570)
<operator>.subtraction 0x340+6438-0x1c66
<operator>.subtraction 0x44d+6802-0x1edf
<operator>.subtraction 0x108c+5186-0x24ce
<operator>.subtraction 0x1383+3123-0x1fb6
<operator>.assignment i=\012(0x21f3+734-0x24d1)
<operator>.assignment ReplacementFor_n=-\012(0x27f+534-0x494)
<operator>.assignment ReplacementFor_endmin=(0x5+520-0x20d)
<operator>.addition 0x340+6438
<operator>.addition 0x44d+6802
<operator>.addition 0x108c+5186
<operator>.addition 0x1383+3123
<operator>.lessThan m<ReplacementFor_areas
<operator>.postIncrement m++
<operator>.greaterEqualsThan ReplacementFor_n>=\012(0x1a97+2078-0x22b5)
<operator>.subtraction 0xd5a+2170-0x1570
<operator>.subtraction 0x21f3+734-0x24d1
<operator>.minus -\012(0x27f+534-0x494)
<operator>.subtraction 0x5+520-0x20d
<operator>.assignment m=\012(0x10ed+1731-0x17b0)
<operator>.assignment ReplacementFor_used[i]=ReplacementFor_n
<operator>.addition 0xd5a+2170
<operator>.addition 0x21f3+734
<operator>.subtraction 0x27f+534-0x494
<operator>.addition 0x5+520
<operator>.lessThan ReplacementFor_j<i
<operator>.postIncrement ReplacementFor_j++
IDENTIFIER ReplacementFor_u if (ReplacementFor_u)
<operator>.logicalAnd i==\012(0x623+6740-0x2077)&&ReplacementFor_area[m].ReplacementFor_begin!=\012(0x110a+4349-0x2207)
<operator>.logicalAnd i>(0x1323+2457-0x1cbc)&&ReplacementFor_area[m].\012ReplacementFor_begin>ReplacementFor_area[ReplacementFor_used[i-\012(0xf32+3086-0x1b3f)]].ReplacementFor_end
<operator>.lessThan ReplacementFor_endmin<\012ReplacementFor_area[m].ReplacementFor_end
<operator>.equals ReplacementFor_endmin==ReplacementFor_tail
<operator>.subtraction 0x1a97+2078-0x22b5
exit exit(-\012(0xd6+3110-0xcfb))
<operator>.addition 0x27f+534
<operator>.subtraction 0x10ed+1731-0x17b0
<operator>.expressionList ReplacementFor_u=\012(0x1ad9+637-0x1d56) ReplacementFor_j=(0x5d6+7212-0x2202)
<operator>.assignment ReplacementFor_endmin=\012ReplacementFor_area[m].ReplacementFor_end
<operator>.assignment ReplacementFor_n=m
RETURN return i; return i;
<operator>.addition 0x1a97+2078
<operator>.addition 0x10ed+1731
<operator>.equals m==ReplacementFor_used[ReplacementFor_j]
<operator>.equals i==\012(0x623+6740-0x2077)
<operator>.notEquals ReplacementFor_area[m].ReplacementFor_begin!=\012(0x110a+4349-0x2207)
<operator>.greaterThan i>(0x1323+2457-0x1cbc)
<operator>.greaterThan ReplacementFor_area[m].\012ReplacementFor_begin>ReplacementFor_area[ReplacementFor_used[i-\012(0xf32+3086-0x1b3f)]].ReplacementFor_end
IDENTIFIER i return i;
<operator>.minus -\012(0xd6+3110-0xcfb)
<operator>.assignment ReplacementFor_u=\012(0x1ad9+637-0x1d56)
<operator>.assignment ReplacementFor_j=(0x5d6+7212-0x2202)
<operator>.assignment ReplacementFor_u=(0x1c+313-0x154)
<operator>.subtraction 0x623+6740-0x2077
<operator>.subtraction 0x110a+4349-0x2207
<operator>.subtraction 0x1323+2457-0x1cbc
<operator>.subtraction 0xd6+3110-0xcfb
<operator>.subtraction 0x1ad9+637-0x1d56
<operator>.subtraction 0x5d6+7212-0x2202
<operator>.addition 0x623+6740
<operator>.addition 0x110a+4349
<operator>.addition 0x1323+2457
<operator>.addition 0xd6+3110
<operator>.addition 0x1ad9+637
<operator>.addition 0x5d6+7212
<operator>.subtraction 0x1c+313-0x154
<operator>.addition 0x1c+313
<operator>.subtraction i-\012(0xf32+3086-0x1b3f)
<operator>.subtraction 0xf32+3086-0x1b3f
<operator>.addition 0xf32+3086
<operator>.indirectIndexAccess ReplacementFor_used[i]
<operator>.fieldAccess ReplacementFor_area[m].ReplacementFor_end
<operator>.fieldAccess ReplacementFor_area[m].ReplacementFor_begin
<operator>.fieldAccess ReplacementFor_area[m].\012ReplacementFor_begin
<operator>.fieldAccess ReplacementFor_area[ReplacementFor_used[i-\012(0xf32+3086-0x1b3f)]].ReplacementFor_end
<operator>.indirectIndexAccess ReplacementFor_area[m]
FIELD_IDENTIFIER ReplacementFor_end ReplacementFor_end
<operator>.fieldAccess ReplacementFor_area[m].ReplacementFor_end
<operator>.indirectIndexAccess ReplacementFor_used[ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_area[m]
FIELD_IDENTIFIER ReplacementFor_begin ReplacementFor_begin
<operator>.indirectIndexAccess ReplacementFor_area[m]
FIELD_IDENTIFIER ReplacementFor_begin ReplacementFor_begin
<operator>.indirectIndexAccess ReplacementFor_area[ReplacementFor_used[i-\012(0xf32+3086-0x1b3f)]]
FIELD_IDENTIFIER ReplacementFor_end ReplacementFor_end
<operator>.indirectIndexAccess ReplacementFor_area[m]
FIELD_IDENTIFIER ReplacementFor_end ReplacementFor_end
<operator>.indirectIndexAccess ReplacementFor_used[i-\012(0xf32+3086-0x1b3f)]
>>>PDG&100 0->2 0->3 0->4 0->5 0->6 0->7 0->11 0->12 0->14 0->15 0->16 0->17 0->21 0->22 0->23 0->24 0->25 0->26 0->27 0->28 0->29 0->31 0->33 0->34 0->35 0->36 0->37 0->38 0->39 0->40 0->43 0->44 0->45 0->47 0->48 0->51 0->53 0->54 0->55 0->56 0->58 0->60 0->65 0->66 0->67 0->68 0->69 0->70 0->71 0->72 0->73 0->74 0->75 0->76 0->77 0->78 0->79 0->80 0->81 2->1 3->11 4->44 5->1 5->1 5->1 6->1 6->1 6->1 7->1 7->1 7->1 7->55 8->1 8->1 8->1 9->1 9->1 9->1 10->1 11->1 11->10 11->12 11->13 11->19 11->20 11->25 11->25 11->28 11->30 11->31 11->32 11->34 11->36 11->37 11->38 11->47 11->48 11->54 12->1 12->11 13->10 14->1 14->6 14->6 15->1 15->7 15->7 16->1 16->8 16->8 17->1 17->9 17->9 18->1 18->1 18->11 19->1 19->1 19->1 19->27 20->1 20->1 20->43 25->1 25->1 25->1 25->11 25->11 25->12 25->25 25->26 25->26 25->27 25->38 25->41 25->45 25->49 25->51 25->53 25->55 25->56 25->62 25->63 25->65 25->69 25->70 25->71 25->75 25->76 26->1 26->25 27->1 27->1 27->33 27->33 27->46 27->61 27->68 27->74 27->82 28->13 28->13 29->1 29->18 29->18 30->1 30->19 31->1 31->20 31->20 32->1 32->1 32->25 33->1 33->1 36->1 36->30 36->30 38->1 38->1 38->12 38->39 38->55 38->56 38->90 39->1 39->38 41->1 41->1 41->1 41->25 41->26 41->42 41->58 41->67 41->73 42->1 42->1 42->1 42->25 42->26 42->43 42->44 42->83 42->87 42->88 43->1 43->1 43->44 43->50 43->50 43->51 43->89 43->97 43->98 44->1 44->1 44->1 44->25 44->26 44->43 44->52 45->1 45->27 45->27 46->1 48->1 48->32 48->32 49->1 49->1 49->1 50->1 50->44 51->1 51->1 51->1 51->27 52->1 55->1 55->1 55->1 55->26 55->38 55->39 55->51 55->64 55->77 55->78 56->1 56->12 56->38 56->41 56->41 56->57 56->58 56->66 56->72 56->84 56->91 56->92 57->1 57->1 57->41 57->41 58->1 58->1 58->12 58->38 58->42 58->42 58->59 58->60 58->79 58->79 58->80 58->81 58->85 58->86 58->93 58->94 58->95 58->96 58->99 59->1 59->1 59->42 59->42 60->52 61->1 61->46 62->1 62->1 62->49 63->1 63->38 63->49 64->1 64->1 64->1 65->1 65->56 65->56 66->1 66->57 66->57 67->1 67->58 67->58 68->1 68->61 68->61 69->1 69->49 69->49 69->62 69->62 70->1 70->49 70->49 70->63 70->63 77->1 77->64 77->64 79->1 79->1 79->12 79->38 79->60 80->1 80->79 80->79
>>>Token int ReplacementFor_calc ( struct ReplacementFor_area * ReplacementFor_area , int ReplacementFor_areas , int ReplacementFor_tail ) { int ReplacementFor_stack [ ( 0xe55 + 2793 - 0x1556 ) ] ; int ReplacementFor_used [ ( 0x1589 + 4054 - 0x2177 ) ] ; int ReplacementFor_u ; int ReplacementFor_depth ; int i , ReplacementFor_j ; int t ; int ReplacementFor_min = INT_MAX ; int ReplacementFor_n , m ; int ReplacementFor_endmin ; memset ( ReplacementFor_stack , ( 0x340 + 6438 - 0x1c66 ) , sizeof ( ReplacementFor_stack ) ) ; memset ( ReplacementFor_used , ( 0x44d + 6802 - 0x1edf ) , sizeof ( ReplacementFor_used ) ) ; ReplacementFor_depth = ( 0x108c + 5186 - 0x24ce ) ; t = ( 0x1383 + 3123 - 0x1fb6 ) ; for ( i = ( 0x21f3 + 734 - 0x24d1 ) ; i < ReplacementFor_areas ; i ++ ) { ReplacementFor_n = - ( 0x27f + 534 - 0x494 ) ; ReplacementFor_endmin = ( 0x5 + 520 - 0x20d ) ; for ( m = ( 0x10ed + 1731 - 0x17b0 ) ; m < ReplacementFor_areas ; m ++ ) { for ( ReplacementFor_u = ( 0x1ad9 + 637 - 0x1d56 ) , ReplacementFor_j = ( 0x5d6 + 7212 - 0x2202 ) ; ReplacementFor_j < i ; ReplacementFor_j ++ ) { if ( m == ReplacementFor_used [ ReplacementFor_j ] ) { ReplacementFor_u = ( 0x1c + 313 - 0x154 ) ; break ; } } if ( ReplacementFor_u ) continue ; if ( i == ( 0x623 + 6740 - 0x2077 ) && ReplacementFor_area [ m ] . ReplacementFor_begin != ( 0x110a + 4349 - 0x2207 ) ) continue ; if ( i > ( 0x1323 + 2457 - 0x1cbc ) && ReplacementFor_area [ m ] . ReplacementFor_begin > ReplacementFor_area [ ReplacementFor_used [ i - ( 0xf32 + 3086 - 0x1b3f ) ] ] . ReplacementFor_end ) continue ; if ( ReplacementFor_endmin < ReplacementFor_area [ m ] . ReplacementFor_end ) { ReplacementFor_endmin = ReplacementFor_area [ m ] . ReplacementFor_end ; ReplacementFor_n = m ; } if ( ReplacementFor_endmin == ReplacementFor_tail ) { return i ; } } if ( ReplacementFor_n >= ( 0x1a97 + 2078 - 0x22b5 ) ) { ReplacementFor_used [ i ] = ReplacementFor_n ; } else { exit ( - ( 0xd6 + 3110 - 0xcfb ) ) ; } } return - ( 0xd5a + 2170 - 0x1570 ) ; }
>>>Func
METHOD ReplacementFor_setFormat
METHOD_RETURN void
PARAM char ReplacementFor_result[(0x6dd+582-0x72f)]
PARAM int \012len
memset memset(ReplacementFor_tmp \012(0x664+236-0x750) (0xc8d+989-0xe76))
<operator>.assignment ReplacementFor_tmp[(0x79+7574-0x1e0f)]=\012((char)(0x102b+294-0x10f6))
strcpy strcpy(ReplacementFor_result,ReplacementFor_tmp)
<operator>.equals len==(0x2403+492-0x25ef)
<operator>.subtraction 0x664+236-0x750
<operator>.subtraction 0xc8d+989-0xe76
<operator>.cast (char)(0x102b+294-0x10f6)
<operator>.assignment ReplacementFor_tmp[\012(0x680+2682-0x10f9)]=((char)(0x842+6549-0x217a))
<operator>.assignment ReplacementFor_tmp[\012(0x150c+39-0x1531)]=(0x327+5048-0x16df)
<operator>.addition 0x664+236
<operator>.addition 0xc8d+989
<operator>.subtraction 0x79+7574-0x1e0f
<operator>.subtraction 0x102b+294-0x10f6
<operator>.subtraction 0x2403+492-0x25ef
<operator>.assignment ReplacementFor_tmp[strlen(\012ReplacementFor_tmp)-(0x1dac+1835-0x24d5)]=((char)(0xb14+6807-0x254e))
<operator>.assignment ReplacementFor_tmp[strlen(ReplacementFor_tmp)-(0x488+1104-0x8d7)]=\012(0x1700+1071-0x1b2f)
<operator>.addition 0x79+7574
<operator>.addition 0x102b+294
<operator>.addition 0x2403+492
<operator>.cast (char)(0x842+6549-0x217a)
<operator>.subtraction 0x327+5048-0x16df
<operator>.lessThan i<\012len
<operator>.postIncrement i++
<operator>.subtraction 0x680+2682-0x10f9
<operator>.subtraction 0x842+6549-0x217a
<operator>.subtraction 0x150c+39-0x1531
<operator>.addition 0x327+5048
<operator>.assignment i=(0x108c+580-0x12d0)
sprintf sprintf(ReplacementFor_tmp,"\x25\x73\x25\x63\x2c\x20",\012ReplacementFor_tmp,ReplacementFor_result[i])
<operator>.cast (char)(0xb14+6807-0x254e)
<operator>.subtraction 0x1700+1071-0x1b2f
<operator>.addition 0x680+2682
<operator>.addition 0x842+6549
<operator>.addition 0x150c+39
<operator>.subtraction strlen(\012ReplacementFor_tmp)-(0x1dac+1835-0x24d5)
<operator>.subtraction 0xb14+6807-0x254e
<operator>.subtraction strlen(ReplacementFor_tmp)-(0x488+1104-0x8d7)
<operator>.addition 0x1700+1071
<operator>.subtraction 0x108c+580-0x12d0
strlen strlen(\012ReplacementFor_tmp)
<operator>.subtraction 0x1dac+1835-0x24d5
<operator>.addition 0xb14+6807
strlen strlen(ReplacementFor_tmp)
<operator>.subtraction 0x488+1104-0x8d7
<operator>.addition 0x108c+580
<operator>.addition 0x1dac+1835
<operator>.addition 0x488+1104
<operator>.indirectIndexAccess ReplacementFor_tmp[\012(0x680+2682-0x10f9)]
<operator>.indirectIndexAccess ReplacementFor_tmp[\012(0x150c+39-0x1531)]
UNKNOWN char char
<operator>.indirectIndexAccess ReplacementFor_tmp[strlen(\012ReplacementFor_tmp)-(0x1dac+1835-0x24d5)]
<operator>.indirectIndexAccess ReplacementFor_tmp[strlen(ReplacementFor_tmp)-(0x488+1104-0x8d7)]
UNKNOWN char char
<operator>.indirectIndexAccess ReplacementFor_result[i]
>>>PDG&58 0->2 0->3 0->4 0->6 0->7 0->8 0->9 0->13 0->14 0->15 0->16 0->17 0->20 0->21 0->22 0->24 0->25 0->26 0->27 0->28 0->29 0->30 0->32 0->34 0->35 0->36 0->37 0->39 0->41 0->42 0->43 0->44 0->45 0->46 0->47 0->48 0->49 0->50 2->6 2->32 3->7 4->1 4->1 4->1 4->6 4->32 4->43 5->1 5->1 5->1 5->6 5->32 5->43 5->46 6->1 6->1 6->1 7->1 7->1 7->1 7->11 7->12 7->18 7->19 7->23 7->24 7->25 7->25 7->27 7->28 7->29 7->30 7->31 7->33 7->34 7->35 7->36 7->37 7->38 7->39 7->40 7->41 7->42 7->43 7->44 7->45 7->46 7->47 7->48 7->49 7->50 7->51 7->52 7->53 7->54 7->55 7->56 8->1 8->4 8->4 9->1 9->4 9->4 10->1 11->1 11->1 11->1 11->6 12->1 12->1 12->1 12->6 15->1 16->1 16->5 16->5 16->10 16->10 17->1 17->7 17->7 18->1 18->1 18->1 18->6 18->46 19->1 19->1 19->1 19->6 23->1 24->1 24->12 24->12 25->1 25->1 25->1 25->25 25->26 25->26 25->32 25->57 26->1 26->25 27->1 28->1 28->11 28->11 28->23 28->23 29->1 31->1 31->1 31->25 32->1 32->1 32->6 32->43 33->1 34->1 34->19 34->19 38->1 38->1 39->1 39->18 39->18 39->33 39->33 40->1 40->1 42->1 42->31 42->31 43->38 43->46 44->1 44->38 44->38 46->6 46->40 47->1 47->40 47->40
>>>Token void ReplacementFor_setFormat ( char ReplacementFor_result [ ( 0x6dd + 582 - 0x72f ) ] , int len ) { char ReplacementFor_tmp [ ( 0x9a4 + 1677 - 0xe3d ) ] ; memset ( ReplacementFor_tmp , ( 0x664 + 236 - 0x750 ) , ( 0xc8d + 989 - 0xe76 ) ) ; ReplacementFor_tmp [ ( 0x79 + 7574 - 0x1e0f ) ] = ( ( char ) ( 0x102b + 294 - 0x10f6 ) ) ; if ( len == ( 0x2403 + 492 - 0x25ef ) ) { ReplacementFor_tmp [ ( 0x680 + 2682 - 0x10f9 ) ] = ( ( char ) ( 0x842 + 6549 - 0x217a ) ) ; ReplacementFor_tmp [ ( 0x150c + 39 - 0x1531 ) ] = ( 0x327 + 5048 - 0x16df ) ; } else { int i ; for ( i = ( 0x108c + 580 - 0x12d0 ) ; i < len ; i ++ ) { sprintf ( ReplacementFor_tmp , " \x25 \x73 \x25 \x63 \x2c \x20 " , ReplacementFor_tmp , ReplacementFor_result [ i ] ) ; } ReplacementFor_tmp [ strlen ( ReplacementFor_tmp ) - ( 0x1dac + 1835 - 0x24d5 ) ] = ( ( char ) ( 0xb14 + 6807 - 0x254e ) ) ; ReplacementFor_tmp [ strlen ( ReplacementFor_tmp ) - ( 0x488 + 1104 - 0x8d7 ) ] = ( 0x1700 + 1071 - 0x1b2f ) ; } strcpy ( ReplacementFor_result , ReplacementFor_tmp ) ; }
>>>Func
METHOD ReplacementFor_check_dExists
METHOD_RETURN int
PARAM int ReplacementFor_N
PARAM int ReplacementFor_Pd
<operator>.assignment ReplacementFor_gc=ReplacementFor_gcd((0xc38+6784-0x2654),ReplacementFor_Pd)
<operator>.assignment val=(0x64c+1876-0xd3c)/ReplacementFor_gc
<operator>.greaterEqualsThan ReplacementFor_N>=val
ReplacementFor_gcd ReplacementFor_gcd((0xc38+6784-0x2654),ReplacementFor_Pd)
<operator>.division (0x64c+1876-0xd3c)/ReplacementFor_gc
RETURN return\012(0x396+1193-0x83e); return\012(0x396+1193-0x83e);
<operator>.subtraction 0xc38+6784-0x2654
<operator>.subtraction 0x64c+1876-0xd3c
<operator>.subtraction 0x396+1193-0x83e
RETURN return(0x17a7+712-0x1a6f); return(0x17a7+712-0x1a6f);
<operator>.addition 0xc38+6784
<operator>.addition 0x64c+1876
<operator>.subtraction 0x17a7+712-0x1a6f
<operator>.addition 0x396+1193
<operator>.addition 0x17a7+712
>>>PDG&19 0->2 0->3 0->6 0->7 0->8 0->10 0->11 0->12 0->14 0->15 0->16 0->17 0->18 2->6 3->7 4->1 4->1 4->8 5->1 5->1 5->6 6->1 6->1 6->1 6->9 6->12 6->13 6->16 6->17 6->18 7->1 7->1 7->4 7->4 8->1 8->1 8->5 8->5 9->1 10->1 10->7 10->7 11->1 11->8 11->8 12->1 12->1 12->9 13->1 16->13
>>>Token int ReplacementFor_check_dExists ( int ReplacementFor_N , int ReplacementFor_Pd ) { int ReplacementFor_gc = ReplacementFor_gcd ( ( 0xc38 + 6784 - 0x2654 ) , ReplacementFor_Pd ) ; int val = ( 0x64c + 1876 - 0xd3c ) / ReplacementFor_gc ; if ( ReplacementFor_N >= val ) return ( 0x396 + 1193 - 0x83e ) ; else return ( 0x17a7 + 712 - 0x1a6f ) ; }
>>>Func
METHOD main
METHOD_RETURN int
<operator>.assignment i=(0x6a0+8188-0x269c)
<operator>.assignment ReplacementFor_j=\012(0xa2d+5875-0x2120)
<operator>.assignment ReplacementFor_N=(0xd08+4717-0x1f75)
<operator>.assignment ReplacementFor_res=\012(0x292+8016-0x21e2)
<operator>.assignment ReplacementFor_ln=(0x2cd+5760-0x194c)
<operator>.assignment ReplacementFor_Mu=(0x222+5184-0x1661)
<operator>.assignment ReplacementFor_fp=fopen\012("\x41\x2d\x73\x6d\x61\x6c\x6c\x2d\x61\x74\x74\x65\x6d\x70\x74\x30\x2e\x69\x6e",\012"\x72")
<operator>.assignment ReplacementFor_out=fopen("\x6f\x75\x74\x70\x75\x74\x2e\x74\x78\x74",\012"\x77")
fscanf fscanf(ReplacementFor_fp,"\x25\x64",&ReplacementFor_noTestCases)
RETURN return(0x7ab+1168-0xc3b); return(0x7ab+1168-0xc3b);
<operator>.postDecrement ReplacementFor_noTestCases--
<operator>.subtraction 0x7ab+1168-0xc3b
<operator>.subtraction 0x6a0+8188-0x269c
<operator>.subtraction 0xa2d+5875-0x2120
<operator>.subtraction 0xd08+4717-0x1f75
<operator>.subtraction 0x292+8016-0x21e2
<operator>.subtraction 0x2cd+5760-0x194c
<operator>.subtraction 0x222+5184-0x1661
fopen fopen\012("\x41\x2d\x73\x6d\x61\x6c\x6c\x2d\x61\x74\x74\x65\x6d\x70\x74\x30\x2e\x69\x6e",\012"\x72")
fopen fopen("\x6f\x75\x74\x70\x75\x74\x2e\x74\x78\x74",\012"\x77")
<operator>.assignment ReplacementFor_res=(0x1921+1-0x1922)
<operator>.assignment ReplacementFor_Mu=(0x2b7+5676-0x18e2)
fscanf fscanf(ReplacementFor_fp,\012"\x25\x64\x25\x64\x25\x64",&ReplacementFor_P,&ReplacementFor_K,&L)
<operator>.addition 0x6a0+8188
<operator>.addition 0xa2d+5875
<operator>.addition 0xd08+4717
<operator>.addition 0x292+8016
<operator>.addition 0x2cd+5760
<operator>.addition 0x222+5184
<operator>.lessThan (\012ReplacementFor_P*ReplacementFor_K)<L
<operator>.addition 0x7ab+1168
<operator>.subtraction 0x1921+1-0x1922
<operator>.subtraction 0x2b7+5676-0x18e2
fprintf fprintf(ReplacementFor_out,\012"\x43\x61\x73\x65\x20\x23\x25\x64\x3a\x20\x49\x6d\x70\x6f\x73\x73\x69\x62\x6c\x65" "\n"\012,ReplacementFor_ln++)
<operator>.addition 0x1921+1
<operator>.addition 0x2b7+5676
<operator>.multiplication ReplacementFor_P*ReplacementFor_K
<operator>.assignment i=(0xbb9+2853-0x16de)
<operator>.assignment tm=L
fprintf fprintf(\012ReplacementFor_out,"\x43\x61\x73\x65\x20\x23\x25\x64\x3a\x20\x25\x64" "\n",\012ReplacementFor_ln++,ReplacementFor_res)
<operator>.postIncrement ReplacementFor_ln++
<operator>.postDecrement tm--
<operator>.lessThan i<L
<operator>.postIncrement i++
<operator>.lessThan i<L
<operator>.postIncrement i++
<operator>.subtraction 0xbb9+2853-0x16de
fscanf fscanf(\012ReplacementFor_fp,"\x25\x64",&ReplacementFor_a[i])
<operator>.postIncrement i++
<operator>.assignment i=\012(0x23c4+205-0x2491)
<operator>.assignment i=\012(0x44b+3520-0x120b)
<operator>.assignment ReplacementFor_res=ReplacementFor_res+(\012ReplacementFor_Mu*ReplacementFor_a[i])
<operator>.postIncrement ReplacementFor_ln++
<operator>.addition 0xbb9+2853
<operator>.lessThan ReplacementFor_j<L
<operator>.postIncrement ReplacementFor_j++
<operator>.equals (i+(0xc20+2962-0x17b1))%\012ReplacementFor_K==(0x859+5948-0x1f95)
<operator>.subtraction 0x23c4+205-0x2491
<operator>.assignment ReplacementFor_j=i+(0x1b8b+1700-0x222e)
<operator>.subtraction 0x44b+3520-0x120b
<operator>.addition ReplacementFor_res+(\012ReplacementFor_Mu*ReplacementFor_a[i])
<operator>.postIncrement ReplacementFor_Mu++
<operator>.addition 0x23c4+205
<operator>.lessThan ReplacementFor_a[i]<ReplacementFor_a[\012ReplacementFor_j]
<operator>.addition 0x44b+3520
<operator>.multiplication ReplacementFor_Mu*ReplacementFor_a[i]
<operator>.modulo (i+(0xc20+2962-0x17b1))%\012ReplacementFor_K
<operator>.subtraction 0x859+5948-0x1f95
<operator>.addition i+(0x1b8b+1700-0x222e)
<operator>.assignment T=ReplacementFor_a[i]
<operator>.assignment ReplacementFor_a[i]=ReplacementFor_a[\012ReplacementFor_j]
<operator>.assignment ReplacementFor_a[ReplacementFor_j]=T
<operator>.addition i+(0xc20+2962-0x17b1)
<operator>.addition 0x859+5948
<operator>.subtraction 0x1b8b+1700-0x222e
<operator>.subtraction 0xc20+2962-0x17b1
<operator>.addition 0x1b8b+1700
<operator>.addition 0xc20+2962
<operator>.addressOf &ReplacementFor_P
<operator>.addressOf &ReplacementFor_K
<operator>.addressOf &L
<operator>.addressOf &ReplacementFor_a[i]
<operator>.indirectIndexAccess ReplacementFor_a[i]
<operator>.indirectIndexAccess ReplacementFor_a[i]
<operator>.indirectIndexAccess ReplacementFor_a[i]
<operator>.indirectIndexAccess ReplacementFor_a[\012ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_a[i]
<operator>.indirectIndexAccess ReplacementFor_a[i]
<operator>.indirectIndexAccess ReplacementFor_a[\012ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_a[ReplacementFor_j]
>>>PDG&92 0->10 0->12 0->13 0->14 0->15 0->16 0->17 0->18 0->19 0->20 0->21 0->24 0->25 0->26 0->27 0->28 0->29 0->30 0->31 0->32 0->33 0->34 0->35 0->36 0->37 0->38 0->40 0->41 0->42 0->43 0->44 0->45 0->46 0->47 0->48 0->49 0->50 0->53 0->54 0->55 0->56 0->57 0->59 0->60 0->61 0->62 0->63 0->64 0->66 0->67 0->68 0->69 0->70 0->73 0->74 0->75 0->76 0->77 0->78 0->79 2->1 2->1 2->1 3->1 3->1 3->1 4->1 4->1 4->1 5->1 5->1 5->1 6->1 6->1 6->1 6->42 6->54 7->1 7->1 7->1 8->1 8->1 8->10 9->1 9->1 9->1 9->35 9->41 10->1 10->1 10->1 10->12 10->24 11->1 12->1 12->1 12->12 12->22 12->23 12->24 12->31 12->33 12->34 12->36 12->37 12->38 12->80 12->81 12->82 13->1 13->1 13->11 14->1 14->2 14->2 15->1 15->3 15->3 16->1 16->4 16->4 17->1 17->5 17->5 18->1 18->6 18->6 19->1 19->7 19->7 20->8 20->8 21->9 21->9 22->1 22->1 22->1 22->41 22->53 22->62 23->1 23->1 23->1 23->67 24->1 24->1 24->1 24->1 24->1 24->31 24->38 24->38 24->40 24->44 24->46 24->49 24->56 24->68 31->1 31->1 31->1 31->24 31->35 31->39 31->40 31->40 31->41 31->42 31->43 31->44 31->44 31->46 31->48 31->51 31->52 31->54 31->55 31->59 31->61 31->64 31->66 33->1 33->22 33->22 34->1 34->23 34->23 35->1 35->1 35->1 35->41 38->1 38->1 38->24 38->24 38->31 38->31 38->68 39->1 39->1 39->50 40->1 40->43 41->1 41->1 41->1 41->1 41->35 42->1 42->35 42->54 43->1 43->1 43->43 43->49 43->50 43->83 43->84 44->44 44->45 44->45 44->46 44->56 44->56 44->60 44->60 44->70 44->70 44->76 44->78 45->1 45->44 46->1 46->1 46->1 46->24 46->31 46->46 46->47 46->47 46->53 46->58 46->62 46->67 46->68 46->68 46->69 46->74 46->74 46->75 46->77 46->79 46->85 47->1 47->46 48->1 48->39 48->39 49->1 49->1 49->1 49->24 49->65 49->67 49->71 50->1 51->1 51->1 51->44 52->1 52->1 52->46 53->1 53->1 53->41 53->62 54->1 54->41 54->42 56->1 56->1 56->44 56->56 56->57 56->57 56->65 56->86 56->87 57->1 57->56 58->1 58->1 58->1 58->63 59->1 59->51 59->51 60->1 60->1 60->56 61->1 61->52 61->52 62->1 63->1 63->1 63->67 65->1 65->1 65->1 65->49 65->67 65->71 65->71 65->72 65->72 65->73 65->88 65->89 65->90 65->91 67->1 67->1 67->49 67->53 67->53 67->62 67->62 67->63 67->65 68->1 68->1 68->24 68->38 68->58 68->58 69->1 69->58 69->58 70->1 71->1 71->73 72->1 72->1 72->1 72->49 72->65 72->67 73->1 73->1 73->1 74->1 76->1 76->60 76->60 76->70 76->70 77->1 77->68 77->68 77->74 77->74
>>>Token int main ( ) { int ReplacementFor_noTestCases ; FILE * ReplacementFor_fp , * ReplacementFor_out ; int i = ( 0x6a0 + 8188 - 0x269c ) , ReplacementFor_j = ( 0xa2d + 5875 - 0x2120 ) , tm , ReplacementFor_N = ( 0xd08 + 4717 - 0x1f75 ) , ReplacementFor_res = ( 0x292 + 8016 - 0x21e2 ) , ReplacementFor_ln = ( 0x2cd + 5760 - 0x194c ) , T ; unsigned long int ReplacementFor_a [ ( 0xe65 + 6733 - 0x2466 ) ] ; int * ReplacementFor_ar1 , ReplacementFor_P , ReplacementFor_K , L , ReplacementFor_Mu = ( 0x222 + 5184 - 0x1661 ) ; ReplacementFor_fp = fopen ( " \x41 \x2d \x73 \x6d \x61 \x6c \x6c \x2d \x61 \x74 \x74 \x65 \x6d \x70 \x74 \x30 \x2e \x69 \x6e " , " \x72 " ) ; ReplacementFor_out = fopen ( " \x6f \x75 \x74 \x70 \x75 \x74 \x2e \x74 \x78 \x74 " , " \x77 " ) ; fscanf ( ReplacementFor_fp , " \x25 \x64 " , & ReplacementFor_noTestCases ) ; while ( ReplacementFor_noTestCases -- ) { ReplacementFor_res = ( 0x1921 + 1 - 0x1922 ) ; ReplacementFor_Mu = ( 0x2b7 + 5676 - 0x18e2 ) ; fscanf ( ReplacementFor_fp , " \x25 \x64 \x25 \x64 \x25 \x64 " , & ReplacementFor_P , & ReplacementFor_K , & L ) ; if ( ( ReplacementFor_P * ReplacementFor_K ) < L ) fprintf ( ReplacementFor_out , " \x43 \x61 \x73 \x65 \x20 \x23 \x25 \x64 \x3a \x20 \x49 \x6d \x70 \x6f \x73 \x73 \x69 \x62 \x6c \x65 " " \n " , ReplacementFor_ln ++ ) ; else { i = ( 0xbb9 + 2853 - 0x16de ) ; tm = L ; while ( tm -- ) { fscanf ( ReplacementFor_fp , " \x25 \x64 " , & ReplacementFor_a [ i ] ) ; i ++ ; } for ( i = ( 0x23c4 + 205 - 0x2491 ) ; i < L ; i ++ ) { for ( ReplacementFor_j = i + ( 0x1b8b + 1700 - 0x222e ) ; ReplacementFor_j < L ; ReplacementFor_j ++ ) { if ( ReplacementFor_a [ i ] < ReplacementFor_a [ ReplacementFor_j ] ) { T = ReplacementFor_a [ i ] ; ReplacementFor_a [ i ] = ReplacementFor_a [ ReplacementFor_j ] ; ReplacementFor_a [ ReplacementFor_j ] = T ; } } } for ( i = ( 0x44b + 3520 - 0x120b ) ; i < L ; i ++ ) { ReplacementFor_res = ReplacementFor_res + ( ReplacementFor_Mu * ReplacementFor_a [ i ] ) ; if ( ( i + ( 0xc20 + 2962 - 0x17b1 ) ) % ReplacementFor_K == ( 0x859 + 5948 - 0x1f95 ) ) ReplacementFor_Mu ++ ; } fprintf ( ReplacementFor_out , " \x43 \x61 \x73 \x65 \x20 \x23 \x25 \x64 \x3a \x20 \x25 \x64 " " \n " , ReplacementFor_ln ++ , ReplacementFor_res ) ; } } return ( 0x7ab + 1168 - 0xc3b ) ; }
>>>Func
METHOD ReplacementFor_init_cb
METHOD_RETURN void
PARAM int ReplacementFor_n
PARAM int \012ReplacementFor_k
PARAM int ReplacementFor_p[]
PARAM int*ReplacementFor_b
<operator>.assignment *ReplacementFor_b=\012((0x119+2400-0xa78)<<ReplacementFor_k)-(0x1030+5021-0x23cc)
ReplacementFor_init_c ReplacementFor_init_c(ReplacementFor_n,ReplacementFor_k,ReplacementFor_p)
<operator>.subtraction ((0x119+2400-0xa78)<<ReplacementFor_k)-(0x1030+5021-0x23cc)
<operator>.shiftLeft (0x119+2400-0xa78)<<ReplacementFor_k
<operator>.subtraction 0x1030+5021-0x23cc
<operator>.subtraction 0x119+2400-0xa78
<operator>.addition 0x1030+5021
<operator>.addition 0x119+2400
>>>PDG&14 0->2 0->3 0->4 0->5 0->7 0->9 0->10 0->11 0->12 0->13 2->7 3->9 4->7 5->1 6->1 6->1 6->1 7->1 7->1 7->1 7->1 8->1 8->1 8->6 8->6 9->1 9->7 9->8 9->8 10->1 10->8 10->8 11->1 11->9 11->9
>>>Token static inline void ReplacementFor_init_cb ( int ReplacementFor_n , int ReplacementFor_k , int ReplacementFor_p [ ] , int * ReplacementFor_b ) { * ReplacementFor_b = ( ( 0x119 + 2400 - 0xa78 ) << ReplacementFor_k ) - ( 0x1030 + 5021 - 0x23cc ) ; ReplacementFor_init_c ( ReplacementFor_n , ReplacementFor_k , ReplacementFor_p ) ; }
>>>Func
METHOD ReplacementFor_print_error
METHOD_RETURN void
PARAM char*ReplacementFor_file
PARAM int line
fprintf fprintf(\012stderr \012"\x5b\x65\x72\x72\x6f\x72\x5d\x20\x25\x73\x20\x40\x20\x25\x73\x20\x3a\x20\x25\x64" "\n"\012 strerror(errno),ReplacementFor_file,line)
fflush fflush(stdout)
exit exit(\012(0x19ab+2206-0x2248))
RETURN return; return;
strerror strerror(errno)
<operator>.subtraction 0x19ab+2206-0x2248
<operator>.addition 0x19ab+2206
>>>PDG&11 0->2 0->3 0->4 0->5 0->7 0->8 0->9 0->10 2->4 3->4 4->1 4->1 4->1 4->1 4->1 5->1 5->1 6->1 7->1 8->1 8->4 9->1 9->6 9->6
>>>Token void ReplacementFor_print_error ( char * ReplacementFor_file , int line ) { fprintf ( stderr , " \x5b \x65 \x72 \x72 \x6f \x72 \x5d \x20 \x25 \x73 \x20 \x40 \x20 \x25 \x73 \x20 \x3a \x20 \x25 \x64 " " \n " , strerror ( errno ) , ReplacementFor_file , line ) ; fflush ( stdout ) ; exit ( ( 0x19ab + 2206 - 0x2248 ) ) ; return ; }
>>>Func
METHOD ReplacementFor_N
METHOD_RETURN void
PARAM size_t ReplacementFor_fields
PARAM size_t \012ReplacementFor_blank
PARAM void const*ReplacementFor_block
PARAM ReplacementFor_FMT_STRING_DECL
PARAM int ReplacementFor_width
PARAM int ReplacementFor_pad
>>>PDG&8 0->2 0->3 0->4 0->5 0->6 0->7 2->1 3->1 4->1 5->1 6->1 7->1
>>>Token static_assert ( ReplacementFor_MAX_INTEGRAL_TYPE_SIZE * CHAR_BIT / ( 0x1a91 + 2200 - 0x2326 ) <= ( 0x1169 + 1705 - 0x17af ) ) < ReplacementFor_missing ( ( char ) ( 0x1a1a + 3198 - 0x261d ) ) >  ; struct ReplacementFor_tspec { enum ReplacementFor_output_format ReplacementFor_fmt ; enum ReplacementFor_size_spec ReplacementFor_size ; void ( * ReplacementFor_print_function ) ( size_t ReplacementFor_fields , size_t ReplacementFor_blank , void const * data , char const * ReplacementFor_fmt , int ReplacementFor_width , int ReplacementFor_pad ) ; char ReplacementFor_fmt_string [ ReplacementFor_FMT_BYTES_ALLOCATED ] ; bool ReplacementFor_hexl_mode_trailer ; int ReplacementFor_field_width ; int ReplacementFor_pad_width ; } ; static unsigned int const ReplacementFor_bytes_to_oct_digits [ ] = { ( 0x4aa + 655 - 0x739 ) , ( 0x1d66 + 1476 - 0x2327 ) , ( 0x43b + 6170 - 0x1c4f ) , ( 0x73b + 2657 - 0x1194 ) , ( 0x1761 + 2476 - 0x2102 ) , ( 0x14da + 2291 - 0x1dbf ) , ( 0xddf + 5840 - 0x249f ) , ( 0xa78 + 6480 - 0x23b5 ) , ( 0x1222 + 2924 - 0x1d78 ) , ( 0x670 + 2325 - 0xf6c ) , ( 0x64b + 3599 - 0x143f ) , ( 0x144c + 292 - 0x1552 ) , ( 0xec0 + 2922 - 0x1a0a ) , ( 0x2009 + 299 - 0x2111 ) , ( 0x11c5 + 4457 - 0x2308 ) , ( 0x103a + 1496 - 0x15e9 ) , ( 0x6c4 + 7300 - 0x231d ) } ; static unsigned int const ReplacementFor_bytes_to_signed_dec_digits [ ] = { ( 0x5f2 + 6311 - 0x1e98 ) , ( 0x1079 + 996 - 0x1459 ) , ( 0x3cf + 1157 - 0x84e ) , ( 0xc07 + 4950 - 0x1f55 ) , ( 0x54d + 4494 - 0x16d0 ) , ( 0x411 + 1049 - 0x81d ) , ( 0xaef + 3946 - 0x1a49 ) , ( 0x1a47 + 3189 - 0x26aa ) , ( 0x1c63 + 2694 - 0x26d5 ) , ( 0x196 + 5129 - 0x1588 ) , ( 0x14fd + 464 - 0x16b4 ) , ( 0x9f1 + 5754 - 0x204f ) , ( 0x1ecb + 693 - 0x2162 ) , ( 0xbfb + 2830 - 0x16e8 ) , ( 0x614 + 5077 - 0x19c6 ) , ( 0x1c63 + 1027 - 0x2041 ) , ( 0x1178 + 469 - 0x1325 ) } ; static unsigned int const ReplacementFor_bytes_to_unsigned_dec_digits [ ] = { ( 0x233d + 503 - 0x2534 ) , ( 0x13f9 + 2664 - 0x1e5e ) , ( 0x4ef + 5793 - 0x1b8b ) , ( 0xa13 + 6192 - 0x223b ) , ( 0x8f4 + 1344 - 0xe2a ) , ( 0x5ba + 7818 - 0x2437 ) , ( 0x8e6 + 3422 - 0x1635 ) , ( 0x15d5 + 2949 - 0x2149 ) , ( 0x81d + 3274 - 0x14d3 ) , ( 0x605 + 8290 - 0x2651 ) , ( 0x2d7 + 4710 - 0x1524 ) , ( 0x22 + 6709 - 0x1a3c ) , ( 0x36 + 3176 - 0xc81 ) , ( 0x1232 + 5062 - 0x25d8 ) , ( 0x19ba + 705 - 0x1c59 ) , ( 0xb5a + 902 - 0xebb ) , ( 0xdb8 + 2575 - 0x17a0 ) } ; static unsigned int const ReplacementFor_bytes_to_hex_digits [ ] = { ( 0xf + 2093 - 0x83c ) , ( 0x1829 + 1627 - 0x1e82 ) , ( 0x48b + 4747 - 0x1712 ) , ( 0xaf1 + 356 - 0xc4f ) , ( 0x86b + 936 - 0xc0b ) , ( 0x1947 + 145 - 0x19ce ) , ( 0x1401 + 4043 - 0x23c0 ) , ( 0x1cbf + 176 - 0x1d61 ) , ( 0x2f5 + 2797 - 0xdd2 ) , ( 0x1040 + 2923 - 0x1b99 ) , ( 0x1fe6 + 1552 - 0x25e2 ) , ( 0x35 + 6353 - 0x18f0 ) , ( 0x90d + 4944 - 0x1c45 ) , ( 0x1288 + 4814 - 0x253c ) , ( 0x7d5 + 3687 - 0x1620 ) , ( 0x1560 + 1086 - 0x1980 ) , ( 0x14ba + 3591 - 0x22a1 ) } ; static_assert ( ReplacementFor_MAX_INTEGRAL_TYPE_SIZE < ReplacementFor_ARRAY_CARDINALITY ( ReplacementFor_bytes_to_hex_digits ) ) ; static_assert ( sizeof ReplacementFor_bytes_to_oct_digits == sizeof ReplacementFor_bytes_to_signed_dec_digits ) ; static_assert ( sizeof ReplacementFor_bytes_to_oct_digits == sizeof ReplacementFor_bytes_to_unsigned_dec_digits ) ; static_assert ( sizeof ReplacementFor_bytes_to_oct_digits == sizeof ReplacementFor_bytes_to_hex_digits ) ; static const int ReplacementFor_width_bytes [ ] = { - ( 0x263 + 3004 - 0xe1e ) , sizeof ( char ) , sizeof ( short int ) , sizeof ( int ) , sizeof ( long int ) , sizeof ( ReplacementFor_unsigned_long_long_int ) , sizeof ( float ) , sizeof ( double ) , sizeof ( long double ) } ; static_assert ( ReplacementFor_ARRAY_CARDINALITY ( ReplacementFor_width_bytes ) == ReplacementFor_N_SIZE_SPECS ) ; static char const ReplacementFor_charname [ ( 0x6b0 + 7450 - 0x23a9 ) ] [ ( 0xc0a + 4776 - 0x1eae ) ] = { " \x6e \x75 \x6c " , " \x73 \x6f \x68 " , " \x73 \x74 \x78 " , " \x65 \x74 \x78 " , " \x65 \x6f \x74 " , " \x65 \x6e \x71 " , " \x61 \x63 \x6b " , " \x62 \x65 \x6c " , " \x62 \x73 " , " \x68 \x74 " , " \x6e \x6c " , " \x76 \x74 " , " \x66 \x66 " , " \x63 \x72 " , " \x73 \x6f " , " \x73 \x69 " , " \x64 \x6c \x65 " , " \x64 \x63 \x31 " , " \x64 \x63 \x32 " , " \x64 \x63 \x33 " , " \x64 \x63 \x34 " , " \x6e \x61 \x6b " , " \x73 \x79 \x6e " , " \x65 \x74 \x62 " , " \x63 \x61 \x6e " , " \x65 \x6d " , " \x73 \x75 \x62 " , " \x65 \x73 \x63 " , " \x66 \x73 " , " \x67 \x73 " , " \x72 \x73 " , " \x75 \x73 " , " \x73 \x70 " } ; static int ReplacementFor_address_base ; ( ( sizeof ( uintmax_t ) * CHAR_BIT + CHAR_BIT - ( 0x1118 + 5192 - 0x255f ) ) / ( 0x222 + 4611 - 0x1422 ) ) < ReplacementFor_missing ( ( char ) ( 0x373 + 5275 - 0x17d3 ) ) > static  int ReplacementFor_address_pad_len ; static size_t ReplacementFor_string_min ; static bool ReplacementFor_flag_dump_strings ; static bool ReplacementFor_traditional ; static bool ReplacementFor_flag_pseudo_start ; static uintmax_t ReplacementFor_pseudo_offset ; static void ( * ReplacementFor_format_address ) ( uintmax_t , char ) ; static uintmax_t ReplacementFor_n_bytes_to_skip = ( 0xde6 + 16 - 0xdf6 ) ; static bool ReplacementFor_limit_bytes_to_format = false ; static uintmax_t ReplacementFor_max_bytes_to_format ; static uintmax_t ReplacementFor_end_offset ; static bool ReplacementFor_abbreviate_duplicate_blocks = true ; static struct ReplacementFor_tspec * ReplacementFor_spec ; static size_t ReplacementFor_n_specs ; static size_t ReplacementFor_n_specs_allocated ; static size_t ReplacementFor_bytes_per_block ; static char const * ReplacementFor_input_filename ; static char const * const * ReplacementFor_file_list ; static char const * const ReplacementFor_default_file_list [ ] = { " \x2d " , NULL } ; static FILE * ReplacementFor_in_stream ; static bool ReplacementFor_have_read_stdin ; static enum ReplacementFor_size_spec ReplacementFor_integral_type_size [ ReplacementFor_MAX_INTEGRAL_TYPE_SIZE + ( 0x742 + 4478 - 0x18bf ) ] ; static enum ReplacementFor_size_spec ReplacementFor_fp_type_size [ ReplacementFor_MAX_FP_TYPE_SIZE + ( 0x2 + 6180 - 0x1825 ) ] ; ReplacementFor_ndef ReplacementFor_WORDS_BIGENDIAN  ReplacementFor_ndif static bool ReplacementFor_input_swap ; static char const ReplacementFor_short_options [ ] = " \x41 \x3a \x61 \x42 \x62 \x63 \x44 \x64 \x65 \x46 \x66 \x48 \x68 \x49 \x69 \x6a \x3a \x4c \x6c \x4e \x3a \x4f \x6f \x53 \x3a \x73 \x74 \x3a \x76 \x77 \x3a \x3a \x58 \x78 " ; enum { ReplacementFor_TRADITIONAL_OPTION = CHAR_MAX + ( 0x1557 + 4364 - 0x2662 ) , ReplacementFor_ENDIAN_OPTION , } ; enum ReplacementFor_endian_type { ReplacementFor_endian_little , ReplacementFor_endian_big } ; static char const * const ReplacementFor_endian_args [ ] = { " \x6c \x69 \x74 \x74 \x6c \x65 " , " \x62 \x69 \x67 " , NULL } ; static enum ReplacementFor_endian_type const ReplacementFor_endian_types [ ] = { ReplacementFor_endian_little , ReplacementFor_endian_big } ; static struct ReplacementFor_option const ReplacementFor_long_options [ ] = { { " \x73 \x6b \x69 \x70 \x2d \x62 \x79 \x74 \x65 \x73 " , ReplacementFor_required_argument , NULL , ( ( char ) ( 0x1b3d + 2355 - 0x2406 ) ) } , { " \x61 \x64 \x64 \x72 \x65 \x73 \x73 \x2d \x72 \x61 \x64 \x69 \x78 " , ReplacementFor_required_argument , NULL , ( ( char ) ( 0x667 + 1273 - 0xb1f ) ) } , { " \x72 \x65 \x61 \x64 \x2d \x62 \x79 \x74 \x65 \x73 " , ReplacementFor_required_argument , NULL , ( ( char ) ( 0x331 + 3689 - 0x114c ) ) } , { " \x66 \x6f \x72 \x6d \x61 \x74 " , ReplacementFor_required_argument , NULL , ( ( char ) ( 0x2a2 + 2885 - 0xd73 ) ) } , { " \x6f \x75 \x74 \x70 \x75 \x74 \x2d \x64 \x75 \x70 \x6c \x69 \x63 \x61 \x74 \x65 \x73 " , ReplacementFor_no_argument , NULL , ( ( char ) ( 0x424 + 630 - 0x624 ) ) } , { " \x73 \x74 \x72 \x69 \x6e \x67 \x73 " , ReplacementFor_optional_argument , NULL , ( ( char ) ( 0x1995 + 1753 - 0x201b ) ) } , { " \x74 \x72 \x61 \x64 \x69 \x74 \x69 \x6f \x6e \x61 \x6c " , ReplacementFor_no_argument , NULL , ReplacementFor_TRADITIONAL_OPTION } , { " \x77 \x69 \x64 \x74 \x68 " , ReplacementFor_optional_argument , NULL , ( ( char ) ( 0x11d4 + 1273 - 0x1656 ) ) } , { " \x65 \x6e \x64 \x69 \x61 \x6e " , ReplacementFor_required_argument , NULL , ReplacementFor_ENDIAN_OPTION } , { ReplacementFor_GETOPT_HELP_OPTION_DECL } , { ReplacementFor_GETOPT_VERSION_OPTION_DECL } , { NULL , ( 0x207 + 2097 - 0xa38 ) , NULL , ( 0x1221 + 256 - 0x1321 ) } } ; void ReplacementFor_usage ( int status ) < ReplacementFor_missing ( ( char ) ( 0x1972 +2199 -0x21ce ) ) > { if ( status != EXIT_SUCCESS ) ReplacementFor_emit_try_help ( ) ; else { printf ( ReplacementFor__ ( " \ " ) , stdout ) ; ReplacementFor_emit_stdin_note ( ) ; fputs ( ReplacementFor__ ( " \ " ) , stdout ) ; ReplacementFor_emit_mandatory_arg_note ( ) ; fputs ( ReplacementFor__ ( " \ " ) , stdout ) ; fputs ( ReplacementFor__ ( " \ \ " ) , stdout ) ; fputs ( ReplacementFor_HELP_OPTION_DESCRIPTION , stdout ) ; fputs ( ReplacementFor_VERSION_OPTION_DESCRIPTION , stdout ) ; fputs ( ReplacementFor__ ( " \ " ) , stdout ) ; fputs ( ReplacementFor__ ( " \ " ) , stdout ) ; fputs ( ReplacementFor__ ( " \ " ) , stdout ) ; fputs ( ReplacementFor__ ( " \ " ) , stdout ) ; fputs ( ReplacementFor__ ( " \ " ) , stdout ) ; fputs ( ReplacementFor__ ( " \ " ) , stdout ) ; fputs ( ReplacementFor__ ( " \
>>>Func
METHOD ReplacementFor_test
METHOD_RETURN void
ReplacementFor_assert ReplacementFor_assert(strcmp(\012ReplacementFor_octalToHexadecimal((0x55d+3363-0x11ab)),"\x38\x42")==\012(0x321+7940-0x2225))
ReplacementFor_assert ReplacementFor_assert(strcmp(\012ReplacementFor_octalToHexadecimal((0x1dc+5690-0x1768)),"\x37\x43")==\012(0x4c7+5895-0x1bce))
<operator>.equals strcmp(\012ReplacementFor_octalToHexadecimal((0x55d+3363-0x11ab)),"\x38\x42")==\012(0x321+7940-0x2225)
<operator>.equals strcmp(\012ReplacementFor_octalToHexadecimal((0x1dc+5690-0x1768)),"\x37\x43")==\012(0x4c7+5895-0x1bce)
strcmp strcmp(\012ReplacementFor_octalToHexadecimal((0x55d+3363-0x11ab)),"\x38\x42")
<operator>.subtraction 0x321+7940-0x2225
strcmp strcmp(\012ReplacementFor_octalToHexadecimal((0x1dc+5690-0x1768)),"\x37\x43")
<operator>.subtraction 0x4c7+5895-0x1bce
ReplacementFor_octalToHexadecimal ReplacementFor_octalToHexadecimal((0x55d+3363-0x11ab))
<operator>.addition 0x321+7940
ReplacementFor_octalToHexadecimal ReplacementFor_octalToHexadecimal((0x1dc+5690-0x1768))
<operator>.addition 0x4c7+5895
<operator>.subtraction 0x55d+3363-0x11ab
<operator>.subtraction 0x1dc+5690-0x1768
<operator>.addition 0x55d+3363
<operator>.addition 0x1dc+5690
>>>PDG&18 0->6 0->7 0->8 0->9 0->11 0->13 0->14 0->15 0->16 0->17 2->1 2->1 3->1 3->1 4->1 4->1 4->2 4->2 5->1 5->1 5->3 5->3 6->1 6->4 6->4 7->1 7->4 7->4 8->1 8->5 8->5 9->1 9->5 9->5 10->1 10->6 12->1 12->8 14->1 14->10 14->10 15->1 15->12 15->12
>>>Token static void ReplacementFor_test ( ) { ReplacementFor_assert ( strcmp ( ReplacementFor_octalToHexadecimal ( ( 0x55d + 3363 - 0x11ab ) ) , " \x38 \x42 " ) == ( 0x321 + 7940 - 0x2225 ) ) ; ReplacementFor_assert ( strcmp ( ReplacementFor_octalToHexadecimal ( ( 0x1dc + 5690 - 0x1768 ) ) , " \x37 \x43 " ) == ( 0x4c7 + 5895 - 0x1bce ) ) ; }
>>>Func
METHOD getChar
METHOD_RETURN char
scanf scanf("\x25\x63",&ReplacementFor_Z)
RETURN return \012ReplacementFor_Z; return \012ReplacementFor_Z;
IDENTIFIER ReplacementFor_Z return \012ReplacementFor_Z;
>>>PDG&5 0->2 0->4 2->1 2->4 3->1 4->3
>>>Token char getChar ( ) { char ReplacementFor_Z ; scanf ( " \x25 \x63 " , & ReplacementFor_Z ) ; return ReplacementFor_Z ; }
>>>Func
METHOD ReplacementFor_eliminate
METHOD_RETURN float
PARAM float m[ReplacementFor_ARRAY_SIZE][\012ReplacementFor_ARRAY_SIZE]
PARAM int i
PARAM int ReplacementFor_n
<operator>.assignment ReplacementFor_k=(0x1224+4658-0x2455)
RETURN return \012m[ReplacementFor_ARRAY_SIZE-(0x261+9288-0x26a8)][ReplacementFor_ARRAY_SIZE-\012(0x3c1+7658-0x21aa)]; return \012m[ReplacementFor_ARRAY_SIZE-(0x261+9288-0x26a8)][ReplacementFor_ARRAY_SIZE-\012(0x3c1+7658-0x21aa)];
<operator>.lessThan ReplacementFor_j<ReplacementFor_n-(0xa25+5604-0x2008)
<operator>.postIncrement ReplacementFor_j++
<operator>.subtraction 0x1224+4658-0x2455
<operator>.assignment ReplacementFor_j=i
<operator>.assignment ReplacementFor_tmp=-((m[i+ReplacementFor_k][i])/(m[i][i]))
<operator>.postIncrement ReplacementFor_k++
<operator>.addition 0x1224+4658
<operator>.subtraction ReplacementFor_n-(0xa25+5604-0x2008)
<operator>.lessEqualsThan l<=ReplacementFor_n
<operator>.postIncrement l++
<operator>.subtraction ReplacementFor_ARRAY_SIZE-\012(0x3c1+7658-0x21aa)
<operator>.subtraction 0xa25+5604-0x2008
<operator>.minus -((m[i+ReplacementFor_k][i])/(m[i][i]))
<operator>.assignment l=(0xb4a+1341-0x1087)
<operator>.assignment m[i+ReplacementFor_k][l]=(m[i\012+ReplacementFor_k][l])+(m[i][l]*ReplacementFor_tmp)
<operator>.subtraction ReplacementFor_ARRAY_SIZE-(0x261+9288-0x26a8)
<operator>.subtraction 0x3c1+7658-0x21aa
<operator>.addition 0xa25+5604
<operator>.division (m[i+ReplacementFor_k][i])/(m[i][i])
<operator>.subtraction 0x261+9288-0x26a8
<operator>.addition 0x3c1+7658
<operator>.subtraction 0xb4a+1341-0x1087
<operator>.addition (m[i\012+ReplacementFor_k][l])+(m[i][l]*ReplacementFor_tmp)
<operator>.addition 0x261+9288
<operator>.addition 0xb4a+1341
<operator>.multiplication m[i][l]*ReplacementFor_tmp
<operator>.addition i+ReplacementFor_k
<operator>.addition i+ReplacementFor_k
<operator>.addition i\012+ReplacementFor_k
<operator>.indirectIndexAccess m[i+ReplacementFor_k][i]
<operator>.indirectIndexAccess m[i][i]
<operator>.indirectIndexAccess m[i+ReplacementFor_k][l]
<operator>.indirectIndexAccess m[i+ReplacementFor_k]
<operator>.indirectIndexAccess m[i]
<operator>.indirectIndexAccess m[i+ReplacementFor_k]
<operator>.indirectIndexAccess m[i\012+ReplacementFor_k][l]
<operator>.indirectIndexAccess m[i\012+ReplacementFor_k]
<operator>.indirectIndexAccess m[i][l]
<operator>.indirectIndexAccess m[i]
>>>PDG&46 0->2 0->3 0->4 0->6 0->7 0->8 0->9 0->10 0->12 0->13 0->14 0->15 0->16 0->17 0->18 0->22 0->23 0->24 0->26 0->27 0->28 0->30 0->31 0->32 0->33 0->34 0->35 2->1 3->10 3->33 4->14 5->1 5->1 5->1 5->12 5->33 5->34 5->35 6->1 7->1 7->1 7->1 7->7 7->8 7->8 7->11 7->12 7->14 7->15 7->18 7->19 7->20 7->24 7->25 7->28 7->31 7->33 7->36 7->37 7->39 7->40 8->1 8->7 9->1 9->5 9->5 10->1 10->1 10->7 11->1 11->1 11->1 11->32 12->1 12->1 12->33 12->34 12->35 14->1 14->1 14->7 14->7 14->15 15->1 15->1 15->14 15->15 15->16 15->16 15->21 15->29 15->32 15->34 15->35 15->38 15->41 15->42 15->43 15->44 15->45 16->1 16->15 17->1 17->1 18->1 18->14 18->14 19->1 19->11 20->1 20->1 20->15 21->1 21->1 21->1 22->1 22->17 23->1 23->17 23->17 25->1 25->1 25->19 25->19 26->1 26->22 26->22 28->1 28->20 28->20 29->1 29->1 32->1 32->1 32->21 32->21 32->29 32->29 33->1 35->1
>>>Token float ReplacementFor_eliminate ( float m [ ReplacementFor_ARRAY_SIZE ] [ ReplacementFor_ARRAY_SIZE ] , int i , int ReplacementFor_n ) { float ReplacementFor_tmp ; int ReplacementFor_k = ( 0x1224 + 4658 - 0x2455 ) , l , ReplacementFor_j ; for ( ReplacementFor_j = i ; ReplacementFor_j < ReplacementFor_n - ( 0xa25 + 5604 - 0x2008 ) ; ReplacementFor_j ++ ) { ReplacementFor_tmp = - ( ( m [ i + ReplacementFor_k ] [ i ] ) / ( m [ i ] [ i ] ) ) ; for ( l = ( 0xb4a + 1341 - 0x1087 ) ; l <= ReplacementFor_n ; l ++ ) { m [ i + ReplacementFor_k ] [ l ] = ( m [ i + ReplacementFor_k ] [ l ] ) + ( m [ i ] [ l ] * ReplacementFor_tmp ) ; } ReplacementFor_k ++ ; } return m [ ReplacementFor_ARRAY_SIZE - ( 0x261 + 9288 - 0x26a8 ) ] [ ReplacementFor_ARRAY_SIZE - ( 0x3c1 + 7658 - 0x21aa ) ] ; }
>>>Func
METHOD ReplacementFor_next_c
METHOD_RETURN int
PARAM int ReplacementFor_n
PARAM int ReplacementFor_k
PARAM int \012ReplacementFor_c[]
RETURN return(0x11b8+5091-0x259a); return(0x11b8+5091-0x259a);
<operator>.logicalAnd i>=\012(0x17c7+2729-0x2270)&&++ReplacementFor_c[i]>i+ReplacementFor_n-ReplacementFor_k
<operator>.postDecrement i--
<operator>.lessThan i<(0x1f84+859-0x22df)
<operator>.lessThan i<ReplacementFor_k
<operator>.postIncrement i++
<operator>.assignment ReplacementFor_c[i]=++t
<operator>.subtraction 0x11b8+5091-0x259a
<operator>.assignment i=ReplacementFor_k-(0x17a1+1810-0x1eb2)
RETURN return(0x1f68+633-0x21e1); return(0x1f68+633-0x21e1);
<operator>.assignment t=ReplacementFor_c[i\012++]
<operator>.greaterEqualsThan i>=\012(0x17c7+2729-0x2270)
<operator>.greaterThan ++ReplacementFor_c[i]>i+ReplacementFor_n-ReplacementFor_k
<operator>.subtraction 0x1f84+859-0x22df
<operator>.subtraction 0x1f68+633-0x21e1
<operator>.preIncrement ++t
<operator>.addition 0x11b8+5091
<operator>.subtraction ReplacementFor_k-(0x17a1+1810-0x1eb2)
<operator>.subtraction 0x17c7+2729-0x2270
<operator>.preIncrement ++ReplacementFor_c[i]
<operator>.subtraction i+ReplacementFor_n-ReplacementFor_k
<operator>.addition 0x1f84+859
<operator>.subtraction 0x17a1+1810-0x1eb2
<operator>.addition 0x17c7+2729
<operator>.addition i+ReplacementFor_n
<operator>.addition 0x1f68+633
<operator>.postIncrement i\012++
<operator>.addition 0x17a1+1810
<operator>.indirectIndexAccess ReplacementFor_c[i]
<operator>.indirectIndexAccess ReplacementFor_c[i\012++]
<operator>.indirectIndexAccess ReplacementFor_c[i]
>>>PDG&36 0->2 0->3 0->4 0->7 0->8 0->9 0->10 0->12 0->16 0->18 0->19 0->20 0->21 0->22 0->23 0->25 0->26 0->27 0->28 0->29 0->30 0->31 0->32 2->1 2->25 2->29 3->22 4->1 4->15 4->24 5->1 6->1 6->1 6->1 6->6 6->7 6->16 6->23 6->28 7->1 7->16 8->1 8->1 8->1 8->5 8->9 8->12 8->14 8->15 8->19 8->21 8->30 8->31 8->31 8->34 9->9 9->10 9->10 9->11 9->20 9->33 10->9 12->5 13->1 13->1 13->16 14->1 15->20 16->1 16->6 16->6 16->7 16->8 16->17 16->24 16->25 16->25 16->29 16->29 16->35 17->1 17->1 17->6 17->6 18->1 18->8 18->8 19->1 19->1 19->14 20->11 22->1 22->1 22->9 22->13 22->13 22->25 23->1 23->16 23->16 24->1 24->17 25->1 25->1 25->9 25->17 25->17 27->1 27->22 27->22 29->1 31->9
>>>Token static int ReplacementFor_next_c ( int ReplacementFor_n , int ReplacementFor_k , int ReplacementFor_c [ ] ) { int i , t ; for ( i = ReplacementFor_k - ( 0x17a1 + 1810 - 0x1eb2 ) ; i >= ( 0x17c7 + 2729 - 0x2270 ) && ++ ReplacementFor_c [ i ] > i + ReplacementFor_n - ReplacementFor_k ; i -- ) ; if ( i < ( 0x1f84 + 859 - 0x22df ) ) return ( 0x1f68 + 633 - 0x21e1 ) ; for ( t = ReplacementFor_c [ i ++ ] ; i < ReplacementFor_k ; i ++ ) ReplacementFor_c [ i ] = ++ t ; return ( 0x11b8 + 5091 - 0x259a ) ; }
>>>Func
METHOD ReplacementFor_fill_hcf_tab
METHOD_RETURN void
<operator>.assignment i=(0xee4+5678-0x2512)
RETURN return; return;
<operator>.lessThan i<(0xd15+2762-0x177a)
<operator>.postIncrement i++
<operator>.subtraction 0xee4+5678-0x2512
<operator>.assignment i=\012(0x1dd8+1432-0x236f)
<operator>.assignment ReplacementFor_hcf_tab[i]=\012ReplacementFor_hcf((0x1340+693-0x1591),i)
<operator>.addition 0xee4+5678
<operator>.subtraction 0xd15+2762-0x177a
<operator>.subtraction 0x1dd8+1432-0x236f
<operator>.addition 0xd15+2762
ReplacementFor_hcf ReplacementFor_hcf((0x1340+693-0x1591),i)
<operator>.addition 0x1dd8+1432
<operator>.subtraction 0x1340+693-0x1591
<operator>.addition 0x1340+693
<operator>.indirectIndexAccess ReplacementFor_hcf_tab[i]
>>>PDG&18 0->3 0->4 0->5 0->6 0->9 0->10 0->11 0->12 0->13 0->14 0->15 0->16 2->1 2->1 3->1 4->1 4->1 4->1 4->4 4->5 4->8 4->10 4->12 4->13 4->13 4->15 4->16 4->17 5->1 5->4 6->1 6->2 6->2 7->1 7->1 7->4 8->1 8->1 8->1 10->1 10->4 10->4 11->1 11->7 11->7 13->1 13->5 13->8 13->8 15->1 15->13 15->13
>>>Token void ReplacementFor_fill_hcf_tab ( ) { int i = ( 0xee4 + 5678 - 0x2512 ) ; for ( i = ( 0x1dd8 + 1432 - 0x236f ) ; i < ( 0xd15 + 2762 - 0x177a ) ; i ++ ) { ReplacementFor_hcf_tab [ i ] = ReplacementFor_hcf ( ( 0x1340 + 693 - 0x1591 ) , i ) ; } return ; }
>>>Func
METHOD ReplacementFor_make
METHOD_RETURN int
scanf scanf("\x25\x64",&S)
scanf scanf("\x25\x64",&ReplacementFor_N)
memset memset(data \012(0x3ca+8393-0x2493) sizeof(data))
<operator>.assignment ReplacementFor_best=ReplacementFor_N+(0x8f6+6222-0x2143)
RETURN return ReplacementFor_best; return ReplacementFor_best;
<operator>.lessThan i<S
<operator>.postIncrement i++
<operator>.lessThan i<ReplacementFor_N
<operator>.postIncrement i++
<operator>.lessThan ReplacementFor_j<S
<operator>.postIncrement ReplacementFor_j++
<operator>.assignment data[(0x4eb+3477-0x1280)][ReplacementFor_j\012]=(0x419+5548-0x19c5)
<operator>.lessThan i<ReplacementFor_N
<operator>.postIncrement i++
<operator>.lessThan ReplacementFor_j<S
<operator>.postIncrement ReplacementFor_j++
IDENTIFIER ReplacementFor_best return ReplacementFor_best;
<operator>.assignment i=(0xb5+9139-0x2468)
<operator>.assignment ReplacementFor_searchengine[i]=\012ReplacementFor_inputaenginename()
<operator>.assignment i=\012(0x288+9315-0x26eb)
<operator>.assignment ReplacementFor_querylist[i]=\012ReplacementFor_inputaenginename()
<operator>.assignment ReplacementFor_queryid[i]=\012ReplacementFor_enginefind(&ReplacementFor_querylist[i])
<operator>.subtraction 0x3ca+8393-0x2493
<operator>.assignment ReplacementFor_j=(0xe19+1147-0x1294)
<operator>.assignment i=(0x1899+3004-0x2454)
<operator>.addition ReplacementFor_N+(0x8f6+6222-0x2143)
<operator>.assignment ReplacementFor_j=\012(0x16c2+29-0x16df)
<operator>.addition 0x3ca+8393
<operator>.subtraction 0x419+5548-0x19c5
<operator>.lessThan ReplacementFor_j<S
<operator>.postIncrement ReplacementFor_j++
<operator>.subtraction 0x8f6+6222-0x2143
<operator>.equals ReplacementFor_j==\012ReplacementFor_queryid[ReplacementFor_N-(0x136a+1746-0x1a3b)]
<operator>.subtraction 0xb5+9139-0x2468
<operator>.subtraction 0x288+9315-0x26eb
ReplacementFor_enginefind ReplacementFor_enginefind(&ReplacementFor_querylist[i])
<operator>.subtraction 0xe19+1147-0x1294
<operator>.addition 0x419+5548
<operator>.subtraction 0x1899+3004-0x2454
<operator>.assignment ReplacementFor_j=(0x1c7b+2266-0x2555)
<operator>.addition 0x8f6+6222
<operator>.subtraction 0x16c2+29-0x16df
<operator>.assignment ReplacementFor_best=ReplacementFor_min(ReplacementFor_best data[ReplacementFor_N\012-(0x1b8+2075-0x9d2)][ReplacementFor_j]+(0x368+2090-0xb91))
<operator>.addition 0xb5+9139
<operator>.addition 0x288+9315
<operator>.addition 0xe19+1147
<operator>.subtraction 0x4eb+3477-0x1280
<operator>.addition 0x1899+3004
<operator>.equals ReplacementFor_queryid[i-(0x8b7+4927-0x1bf5)]==ReplacementFor_j
<operator>.addition 0x16c2+29
<operator>.assignment ReplacementFor_best=ReplacementFor_min(ReplacementFor_best data[ReplacementFor_N\012-(0x4a1+400-0x630)][ReplacementFor_j])
<operator>.addition 0x4eb+3477
<operator>.subtraction 0x1c7b+2266-0x2555
<operator>.assignment data[i][\012ReplacementFor_j]=ReplacementFor_N+(0xae3+1695-0x1181)
<operator>.subtraction ReplacementFor_N-(0x136a+1746-0x1a3b)
ReplacementFor_min ReplacementFor_min(ReplacementFor_best data[ReplacementFor_N\012-(0x1b8+2075-0x9d2)][ReplacementFor_j]+(0x368+2090-0xb91))
<operator>.addition 0x1c7b+2266
<operator>.lessThan ReplacementFor_k<S
<operator>.postIncrement ReplacementFor_k++
<operator>.assignment data[i][ReplacementFor_j]=data[i-(0x69c+1005-0xa88)]\012[ReplacementFor_j]
<operator>.subtraction 0x136a+1746-0x1a3b
<operator>.addition data[ReplacementFor_N\012-(0x1b8+2075-0x9d2)][ReplacementFor_j]+(0x368+2090-0xb91)
ReplacementFor_min ReplacementFor_min(ReplacementFor_best data[ReplacementFor_N\012-(0x4a1+400-0x630)][ReplacementFor_j])
<operator>.subtraction i-(0x8b7+4927-0x1bf5)
<operator>.addition ReplacementFor_N+(0xae3+1695-0x1181)
<operator>.assignment ReplacementFor_k=\012(0x1097+3398-0x1ddd)
<operator>.notEquals ReplacementFor_k!=\012ReplacementFor_j
<operator>.lessThan ReplacementFor_k<S
<operator>.postIncrement ReplacementFor_k++
<operator>.addition 0x136a+1746
<operator>.subtraction 0x368+2090-0xb91
<operator>.subtraction 0x8b7+4927-0x1bf5
<operator>.subtraction 0xae3+1695-0x1181
<operator>.assignment data[i][ReplacementFor_j]=ReplacementFor_min(data[i][\012ReplacementFor_j] data[i-(0x50b+144-0x59a)][ReplacementFor_k]+\012(0xc62+6784-0x26e1))
<operator>.assignment ReplacementFor_k=(0x3b5+6055-0x1b5c)
<operator>.notEquals ReplacementFor_k!=ReplacementFor_j
<operator>.addition 0x368+2090
<operator>.addition 0x8b7+4927
<operator>.addition 0xae3+1695
<operator>.subtraction 0x1097+3398-0x1ddd
<operator>.assignment data[i][\012ReplacementFor_j]=ReplacementFor_min(data[i][ReplacementFor_j] data[i-\012(0x2ca+3842-0x11cb)][ReplacementFor_k]+(0x1283+4133-0x22a7))
<operator>.subtraction ReplacementFor_N\012-(0x1b8+2075-0x9d2)
<operator>.subtraction ReplacementFor_N\012-(0x4a1+400-0x630)
<operator>.addition 0x1097+3398
ReplacementFor_min ReplacementFor_min(data[i][\012ReplacementFor_j] data[i-(0x50b+144-0x59a)][ReplacementFor_k]+\012(0xc62+6784-0x26e1))
<operator>.subtraction i-(0x69c+1005-0xa88)
<operator>.subtraction 0x3b5+6055-0x1b5c
<operator>.subtraction 0x1b8+2075-0x9d2
<operator>.subtraction 0x4a1+400-0x630
<operator>.addition data[i-(0x50b+144-0x59a)][ReplacementFor_k]+\012(0xc62+6784-0x26e1)
<operator>.subtraction 0x69c+1005-0xa88
<operator>.addition 0x3b5+6055
ReplacementFor_min ReplacementFor_min(data[i][ReplacementFor_j] data[i-\012(0x2ca+3842-0x11cb)][ReplacementFor_k]+(0x1283+4133-0x22a7))
<operator>.addition 0x1b8+2075
<operator>.addition 0x4a1+400
<operator>.subtraction 0xc62+6784-0x26e1
<operator>.addition 0x69c+1005
<operator>.addition data[i-\012(0x2ca+3842-0x11cb)][ReplacementFor_k]+(0x1283+4133-0x22a7)
<operator>.addition 0xc62+6784
<operator>.subtraction 0x1283+4133-0x22a7
<operator>.subtraction i-(0x50b+144-0x59a)
<operator>.addition 0x1283+4133
<operator>.subtraction 0x50b+144-0x59a
<operator>.subtraction i-\012(0x2ca+3842-0x11cb)
<operator>.addition 0x50b+144
<operator>.subtraction 0x2ca+3842-0x11cb
<operator>.addition 0x2ca+3842
<operator>.indirectIndexAccess data[(0x4eb+3477-0x1280)][ReplacementFor_j\012]
<operator>.indirectIndexAccess ReplacementFor_searchengine[i]
ReplacementFor_inputaenginename ReplacementFor_inputaenginename()
<operator>.indirectIndexAccess ReplacementFor_querylist[i]
ReplacementFor_inputaenginename ReplacementFor_inputaenginename()
<operator>.indirectIndexAccess ReplacementFor_queryid[i]
<operator>.indirectIndexAccess data[(0x4eb+3477-0x1280)]
<operator>.addressOf &ReplacementFor_querylist[i]
<operator>.indirectIndexAccess ReplacementFor_queryid[ReplacementFor_N-(0x136a+1746-0x1a3b)]
<operator>.indirectIndexAccess ReplacementFor_querylist[i]
<operator>.indirectIndexAccess ReplacementFor_queryid[i-(0x8b7+4927-0x1bf5)]
<operator>.indirectIndexAccess data[i][\012ReplacementFor_j]
<operator>.indirectIndexAccess data[ReplacementFor_N\012-(0x1b8+2075-0x9d2)][ReplacementFor_j]
<operator>.indirectIndexAccess data[ReplacementFor_N\012-(0x4a1+400-0x630)][ReplacementFor_j]
<operator>.indirectIndexAccess data[i]
<operator>.indirectIndexAccess data[i][ReplacementFor_j]
<operator>.indirectIndexAccess data[i-(0x69c+1005-0xa88)]\012[ReplacementFor_j]
<operator>.indirectIndexAccess data[ReplacementFor_N\012-(0x1b8+2075-0x9d2)]
<operator>.indirectIndexAccess data[ReplacementFor_N\012-(0x4a1+400-0x630)]
<operator>.indirectIndexAccess data[i]
<operator>.indirectIndexAccess data[i-(0x69c+1005-0xa88)]
<operator>.indirectIndexAccess data[i][ReplacementFor_j]
<operator>.indirectIndexAccess data[i]
<operator>.indirectIndexAccess data[i][\012ReplacementFor_j]
<operator>.indirectIndexAccess data[i][\012ReplacementFor_j]
<operator>.indirectIndexAccess data[i]
<operator>.indirectIndexAccess data[i-(0x50b+144-0x59a)][ReplacementFor_k]
<operator>.indirectIndexAccess data[i]
<operator>.indirectIndexAccess data[i][ReplacementFor_j]
<operator>.indirectIndexAccess data[i-(0x50b+144-0x59a)]
<operator>.indirectIndexAccess data[i]
<operator>.indirectIndexAccess data[i-\012(0x2ca+3842-0x11cb)][ReplacementFor_k]
<operator>.indirectIndexAccess data[i-\012(0x2ca+3842-0x11cb)]
>>>PDG&142 0->2 0->3 0->4 0->5 0->7 0->8 0->9 0->10 0->11 0->12 0->14 0->15 0->16 0->17 0->18 0->20 0->22 0->24 0->27 0->29 0->30 0->31 0->32 0->33 0->34 0->35 0->36 0->38 0->39 0->40 0->42 0->43 0->45 0->46 0->47 0->48 0->49 0->50 0->51 0->53 0->54 0->55 0->56 0->57 0->58 0->59 0->60 0->62 0->64 0->65 0->66 0->68 0->69 0->70 0->71 0->72 0->73 0->74 0->77 0->78 0->79 0->80 0->81 0->83 0->84 0->85 0->87 0->88 0->89 0->90 0->92 0->93 0->95 0->96 0->97 0->98 0->100 0->101 0->102 0->103 0->104 0->105 0->106 0->107 0->108 2->1 2->7 2->11 2->16 2->31 2->59 2->69 3->1 3->5 3->9 3->14 3->27 3->55 3->56 3->66 3->83 3->84 4->1 4->1 4->1 5->1 5->1 5->1 5->18 5->57 5->64 6->1 7->1 7->7 7->8 7->8 7->11 7->20 7->110 7->111 8->1 8->7 9->9 9->10 9->10 9->14 9->22 9->23 9->37 9->112 9->113 9->114 9->116 9->118 10->1 10->9 11->11 11->12 11->12 11->13 11->16 11->30 11->31 11->39 11->48 11->53 11->109 11->115 12->1 12->11 13->1 13->1 13->1 14->1 14->1 14->5 14->14 14->15 14->15 14->27 14->31 14->41 14->54 14->55 14->56 14->58 14->65 14->66 15->1 15->14 16->1 16->1 16->1 16->16 16->17 16->34 16->34 16->56 16->62 16->71 16->117 17->1 17->16 18->6 19->1 19->1 19->7 20->1 20->1 20->1 21->1 21->1 21->9 22->1 22->1 22->1 22->37 23->1 23->1 23->1 24->1 24->4 24->4 25->1 25->1 25->11 26->1 26->1 26->14 27->1 27->1 28->1 28->1 28->16 30->1 30->13 30->13 31->16 31->31 31->32 31->50 31->50 31->59 31->65 31->69 31->73 31->79 31->119 32->1 32->31 33->1 33->5 33->5 33->27 33->27 34->1 34->1 34->17 34->44 34->52 34->57 34->63 34->64 34->72 34->78 34->83 34->84 34->89 34->90 34->95 34->96 34->121 34->122 34->126 34->127 35->1 35->19 35->19 36->1 36->21 36->21 37->1 37->23 38->1 38->25 38->25 40->1 40->26 40->26 41->1 41->1 41->31 43->1 43->28 43->28 44->1 44->1 44->1 44->18 44->57 44->64 48->1 50->1 50->1 50->32 50->55 50->59 50->61 50->66 50->67 50->68 50->69 50->74 50->76 50->77 50->80 50->81 50->85 50->87 50->88 50->92 50->93 50->98 50->120 50->123 50->124 50->125 50->128 50->129 52->1 52->1 52->1 52->18 52->57 52->64 54->1 54->41 54->41 55->1 55->1 55->1 55->86 56->1 56->83 56->84 57->1 57->44 57->44 59->1 59->1 59->31 59->59 59->60 59->68 59->68 60->1 60->59 61->1 61->1 61->1 61->94 62->1 62->56 62->56 63->1 63->1 64->1 64->52 64->52 65->1 65->15 65->87 65->102 66->1 67->1 67->1 67->59 68->1 68->32 68->60 68->75 68->86 68->91 68->97 68->100 68->102 68->104 68->106 68->130 68->131 68->132 68->134 68->135 68->138 69->1 69->1 69->31 69->69 69->70 69->77 69->77 70->1 70->69 72->1 72->57 72->57 72->63 72->63 73->1 73->65 73->65 74->1 74->55 74->55 74->66 74->66 75->1 75->1 75->1 76->1 76->1 76->69 77->1 77->32 77->70 77->82 77->94 77->99 77->101 77->103 77->105 77->107 77->108 77->133 77->136 77->137 77->139 77->140 77->141 81->1 81->67 81->67 82->1 82->1 82->1 83->1 83->1 83->56 84->1 84->1 84->56 86->1 86->1 86->75 86->75 87->1 87->15 87->65 87->105 88->1 88->76 88->76 89->1 89->83 89->83 90->1 90->84 90->84 91->1 91->1 92->1 92->87 92->87 94->1 94->1 94->82 94->82 97->1 97->86 97->86 97->91 97->91 99->1 99->1 101->1 101->94 101->94 101->99 101->99 102->1 102->15 102->65 104->1 104->102 104->102 105->1 105->15 105->65 107->1 107->105 107->105
>>>Token int ReplacementFor_make ( ) { int ReplacementFor_best ; ReplacementFor_enginename ReplacementFor_en ; int i , ReplacementFor_j , ReplacementFor_k ; scanf ( " \x25 \x64 " , & S ) ; for ( i = ( 0xb5 + 9139 - 0x2468 ) ; i < S ; i ++ ) { ReplacementFor_searchengine [ i ] = ReplacementFor_inputaenginename ( ) ; } scanf ( " \x25 \x64 " , & ReplacementFor_N ) ; for ( i = ( 0x288 + 9315 - 0x26eb ) ; i < ReplacementFor_N ; i ++ ) { ReplacementFor_querylist [ i ] = ReplacementFor_inputaenginename ( ) ; ReplacementFor_queryid [ i ] = ReplacementFor_enginefind ( & ReplacementFor_querylist [ i ] ) ; } memset ( data , ( 0x3ca + 8393 - 0x2493 ) , sizeof ( data ) ) ; for ( ReplacementFor_j = ( 0xe19 + 1147 - 0x1294 ) ; ReplacementFor_j < S ; ReplacementFor_j ++ ) data [ ( 0x4eb + 3477 - 0x1280 ) ] [ ReplacementFor_j ] = ( 0x419 + 5548 - 0x19c5 ) ; for ( i = ( 0x1899 + 3004 - 0x2454 ) ; i < ReplacementFor_N ; i ++ ) { for ( ReplacementFor_j = ( 0x1c7b + 2266 - 0x2555 ) ; ReplacementFor_j < S ; ReplacementFor_j ++ ) { if ( ReplacementFor_queryid [ i - ( 0x8b7 + 4927 - 0x1bf5 ) ] == ReplacementFor_j ) { data [ i ] [ ReplacementFor_j ] = ReplacementFor_N + ( 0xae3 + 1695 - 0x1181 ) ; for ( ReplacementFor_k = ( 0x1097 + 3398 - 0x1ddd ) ; ReplacementFor_k < S ; ReplacementFor_k ++ ) if ( ReplacementFor_k != ReplacementFor_j ) { data [ i ] [ ReplacementFor_j ] = ReplacementFor_min ( data [ i ] [ ReplacementFor_j ] , data [ i - ( 0x50b + 144 - 0x59a ) ] [ ReplacementFor_k ] + ( 0xc62 + 6784 - 0x26e1 ) ) ; } } else { data [ i ] [ ReplacementFor_j ] = data [ i - ( 0x69c + 1005 - 0xa88 ) ] [ ReplacementFor_j ] ; for ( ReplacementFor_k = ( 0x3b5 + 6055 - 0x1b5c ) ; ReplacementFor_k < S ; ReplacementFor_k ++ ) if ( ReplacementFor_k != ReplacementFor_j ) { data [ i ] [ ReplacementFor_j ] = ReplacementFor_min ( data [ i ] [ ReplacementFor_j ] , data [ i - ( 0x2ca + 3842 - 0x11cb ) ] [ ReplacementFor_k ] + ( 0x1283 + 4133 - 0x22a7 ) ) ; } } } } ReplacementFor_best = ReplacementFor_N + ( 0x8f6 + 6222 - 0x2143 ) ; for ( ReplacementFor_j = ( 0x16c2 + 29 - 0x16df ) ; ReplacementFor_j < S ; ReplacementFor_j ++ ) { if ( ReplacementFor_j == ReplacementFor_queryid [ ReplacementFor_N - ( 0x136a + 1746 - 0x1a3b ) ] ) ReplacementFor_best = ReplacementFor_min ( ReplacementFor_best , data [ ReplacementFor_N - ( 0x1b8 + 2075 - 0x9d2 ) ] [ ReplacementFor_j ] + ( 0x368 + 2090 - 0xb91 ) ) ; else ReplacementFor_best = ReplacementFor_min ( ReplacementFor_best , data [ ReplacementFor_N - ( 0x4a1 + 400 - 0x630 ) ] [ ReplacementFor_j ] ) ; } return ReplacementFor_best ; }
>>>Func
METHOD ReplacementFor_binomial_heap_merge_undo
METHOD_RETURN void
PARAM ReplacementFor_BinomialTree*\012*ReplacementFor_new_roots
PARAM unsigned int ReplacementFor_count
free free(\012ReplacementFor_new_roots)
<operator>.lessEqualsThan i<=ReplacementFor_count
<operator>.preIncrement ++i
<operator>.assignment i=(0xd49+5628-0x2345)
ReplacementFor_binomial_tree_unref ReplacementFor_binomial_tree_unref(ReplacementFor_new_roots[i])
<operator>.subtraction 0xd49+5628-0x2345
<operator>.addition 0xd49+5628
<operator>.indirectIndexAccess ReplacementFor_new_roots[i]
>>>PDG&12 0->2 0->3 0->4 0->5 0->6 0->9 0->10 2->4 2->8 3->5 4->1 5->1 5->1 5->1 5->5 5->6 5->6 5->8 5->11 6->1 6->5 7->1 7->1 7->5 8->1 8->1 8->4 9->1 9->7 9->7
>>>Token static void ReplacementFor_binomial_heap_merge_undo ( ReplacementFor_BinomialTree * * ReplacementFor_new_roots , unsigned int ReplacementFor_count ) { unsigned int i ; for ( i = ( 0xd49 + 5628 - 0x2345 ) ; i <= ReplacementFor_count ; ++ i ) { ReplacementFor_binomial_tree_unref ( ReplacementFor_new_roots [ i ] ) ; } free ( ReplacementFor_new_roots ) ; }
>>>Func
METHOD main
METHOD_RETURN int
<operator>.assignment *ReplacementFor_fin=fopen("\x42\x2e\x69\x6e","\x72")
<operator>.assignment *\012ReplacementFor_fout=fopen("\x42\x2e\x6f\x75\x74","\x77")
fscanf fscanf(ReplacementFor_fin,"\x25\x64",&t)
RETURN return(0x131f+4428-0x246b); return(0x131f+4428-0x246b);
<operator>.lessEqualsThan ReplacementFor_tc<=t
<operator>.postIncrement ReplacementFor_tc++
<operator>.subtraction 0x131f+4428-0x246b
fopen fopen("\x42\x2e\x69\x6e","\x72")
fopen fopen("\x42\x2e\x6f\x75\x74","\x77")
<operator>.assignment ReplacementFor_tc=\012(0x1270+661-0x1504)
fscanf fscanf(ReplacementFor_fin,"\x25\x64\x25\x49\x36\x34\x64\x25\x64\x25\x64",&\012ReplacementFor_spn,&ReplacementFor_ttt,&ReplacementFor_n,&ReplacementFor_c)
<operator>.assignment t=(int)(\012ReplacementFor_ttt)
<operator>.assignment ReplacementFor_statu[(0x736+3009-0x12f7)][(0x42d+849-0x77e)]\012=ReplacementFor_arr[(0x189+5861-0x186e)]*(0x14da+1855-0x1c17)
fprintf fprintf(ReplacementFor_fout \012"\x43\x61\x73\x65\x20\x23\x25\x64\x3a\x20\x25\x64" "\n" ReplacementFor_tc (int)(\012ReplacementFor_statu[ReplacementFor_n-(0x6ad+884-0xa20)][ReplacementFor_spn]))
<operator>.lessThan i<ReplacementFor_c
<operator>.postIncrement i++
fscanf fscanf(ReplacementFor_fin,\012"\x25\x64",ReplacementFor_arr+i)
<operator>.lessThan i<ReplacementFor_n
<operator>.postIncrement i++
<operator>.assignment ReplacementFor_arr[i]=ReplacementFor_arr[i%ReplacementFor_c]
<operator>.greaterThan ReplacementFor_ttt>1000000000
<operator>.greaterThan ReplacementFor_statu[(0x1233+4794-0x24ed)][(0x701+807-0xa28)]>t
<operator>.lessThan i<ReplacementFor_n
<operator>.postIncrement i++
<operator>.addition 0x131f+4428
<operator>.subtraction 0x1270+661-0x1504
<operator>.assignment i=(0x2157+325-0x229c)
<operator>.assignment i=ReplacementFor_c
fprintf fprintf(ReplacementFor_fout \012"\x43\x61\x73\x65\x20\x23\x25\x64\x3a\x20\x25\x64" "\n" ReplacementFor_tc \012ReplacementFor_dis/(0x2d2+6251-0x1b3b))
<operator>.cast (int)(\012ReplacementFor_ttt)
<operator>.multiplication ReplacementFor_arr[(0x189+5861-0x186e)]*(0x14da+1855-0x1c17)
<operator>.assignment ReplacementFor_statu[(0x959+4793-0x1c12)][(0xdb4+3754-0x1c5c)]=\012ReplacementFor_statu[(0x277+2666-0xce1)][(0x1343+2271-0x1c21)]=t/\012(0x886+6437-0x21a9)+ReplacementFor_statu[(0x605+4091-0x1600)][\012(0x191f+2045-0x211c)]/(0x75+8690-0x2265)
<operator>.assignment i=(0x424+811-0x74e)
<operator>.assignment ReplacementFor_statu[i][(0x108b+3483-0x1e26)]=ReplacementFor_statu[i-\012(0x140c+4834-0x26ed)][(0x47d+3820-0x1369)]+ReplacementFor_arr[i]*\012(0xc2b+3446-0x199f)
<operator>.cast (int)(\012ReplacementFor_statu[ReplacementFor_n-(0x6ad+884-0xa20)][ReplacementFor_spn])
<operator>.addition 0x1270+661
<operator>.addition ReplacementFor_arr+i
<operator>.lessThan i<ReplacementFor_n
<operator>.postIncrement i++
<operator>.assignmentPlus ReplacementFor_dis+=ReplacementFor_arr[i]
<operator>.subtraction 0x42d+849-0x77e
<operator>.subtraction 0x14da+1855-0x1c17
<operator>.assignment ReplacementFor_statu[\012(0x3c5+1841-0xaf6)][(0xf72+3724-0x1dfc)]=ReplacementFor_statu[(0x48c+2216-0xd34)\012][(0x1c7d+1312-0x219c)]=ReplacementFor_statu[(0x28+7929-0x1f21)][\012(0x238+638-0x4b6)]
<operator>.lessEqualsThan ReplacementFor_j<=\012ReplacementFor_spn
<operator>.postIncrement ReplacementFor_j++
<operator>.subtraction 0x2157+325-0x229c
<operator>.modulo i%ReplacementFor_c
<operator>.expressionList ReplacementFor_dis=\012(0x6fa+351-0x859) i=(0xab4+1998-0x1282)
<operator>.division ReplacementFor_dis/(0x2d2+6251-0x1b3b)
<operator>.subtraction 0x736+3009-0x12f7
<operator>.addition 0x42d+849
<operator>.subtraction 0x189+5861-0x186e
<operator>.addition 0x14da+1855
<operator>.subtraction 0x701+807-0xa28
<operator>.assignment ReplacementFor_statu[(0x277+2666-0xce1)][(0x1343+2271-0x1c21)]=t/\012(0x886+6437-0x21a9)+ReplacementFor_statu[(0x605+4091-0x1600)][\012(0x191f+2045-0x211c)]/(0x75+8690-0x2265)
<operator>.subtraction 0x424+811-0x74e
<operator>.addition ReplacementFor_statu[i-\012(0x140c+4834-0x26ed)][(0x47d+3820-0x1369)]+ReplacementFor_arr[i]*\012(0xc2b+3446-0x199f)
<operator>.assignment ReplacementFor_j=(0x307+7196-0x1f22)
<operator>.addition 0x2157+325
<operator>.subtraction 0x2d2+6251-0x1b3b
<operator>.addition 0x736+3009
<operator>.addition 0x189+5861
<operator>.subtraction 0x1233+4794-0x24ed
<operator>.addition 0x701+807
<operator>.subtraction 0xdb4+3754-0x1c5c
<operator>.addition t/\012(0x886+6437-0x21a9)+ReplacementFor_statu[(0x605+4091-0x1600)][\012(0x191f+2045-0x211c)]/(0x75+8690-0x2265)
<operator>.assignment ReplacementFor_statu[(0x48c+2216-0xd34)\012][(0x1c7d+1312-0x219c)]=ReplacementFor_statu[(0x28+7929-0x1f21)][\012(0x238+638-0x4b6)]
<operator>.addition 0x424+811
<operator>.subtraction 0x108b+3483-0x1e26
<operator>.multiplication ReplacementFor_arr[i]*\012(0xc2b+3446-0x199f)
<operator>.greaterEqualsThan ReplacementFor_statu[i-\012(0x655+1217-0xb15)][ReplacementFor_j-(0x17b6+3326-0x24b3)]>=t
<operator>.lessThan ReplacementFor_statu[i-(0x770+4992-0x1aef)][\012ReplacementFor_j]+ReplacementFor_arr[i]*(0x5c5+696-0x87b)<ReplacementFor_statu[i\012][ReplacementFor_j]
<operator>.subtraction ReplacementFor_n-(0x6ad+884-0xa20)
<operator>.assignment ReplacementFor_dis=\012(0x6fa+351-0x859)
<operator>.assignment i=(0xab4+1998-0x1282)
<operator>.addition 0x2d2+6251
<operator>.addition 0x1233+4794
<operator>.subtraction 0x959+4793-0x1c12
<operator>.addition 0xdb4+3754
<operator>.subtraction 0x1343+2271-0x1c21
<operator>.division t/\012(0x886+6437-0x21a9)
<operator>.division ReplacementFor_statu[(0x605+4091-0x1600)][\012(0x191f+2045-0x211c)]/(0x75+8690-0x2265)
<operator>.subtraction 0xf72+3724-0x1dfc
<operator>.addition 0x108b+3483
<operator>.subtraction 0x47d+3820-0x1369
<operator>.subtraction 0xc2b+3446-0x199f
<operator>.subtraction 0x307+7196-0x1f22
<operator>.assignment ReplacementFor_statu[i][ReplacementFor_j]=ReplacementFor_statu[i-\012(0xbbd+5600-0x219c)][ReplacementFor_j-(0x17fd+2260-0x20d0)]+ReplacementFor_arr[i\012]
<operator>.assignment ReplacementFor_statu[i][ReplacementFor_j]=\012ReplacementFor_statu[i-(0x1027+3846-0x1f2c)][ReplacementFor_j]+\012ReplacementFor_arr[i]*(0x1d4d+224-0x1e2b)
<operator>.subtraction 0x6ad+884-0xa20
<operator>.subtraction 0x6fa+351-0x859
<operator>.subtraction 0xab4+1998-0x1282
<operator>.addition 0x959+4793
<operator>.subtraction 0x277+2666-0xce1
<operator>.addition 0x1343+2271
<operator>.subtraction 0x886+6437-0x21a9
<operator>.subtraction 0x75+8690-0x2265
<operator>.subtraction 0x3c5+1841-0xaf6
<operator>.addition 0xf72+3724
<operator>.subtraction 0x1c7d+1312-0x219c
<operator>.subtraction 0x238+638-0x4b6
<operator>.subtraction i-\012(0x140c+4834-0x26ed)
<operator>.addition 0x47d+3820
<operator>.addition 0xc2b+3446
<operator>.addition 0x307+7196
<operator>.addition ReplacementFor_statu[i-(0x770+4992-0x1aef)][\012ReplacementFor_j]+ReplacementFor_arr[i]*(0x5c5+696-0x87b)
<operator>.addition 0x6ad+884
<operator>.addition 0x6fa+351
<operator>.addition 0xab4+1998
<operator>.addition 0x277+2666
<operator>.addition 0x886+6437
<operator>.subtraction 0x191f+2045-0x211c
<operator>.addition 0x75+8690
<operator>.addition 0x3c5+1841
<operator>.subtraction 0x48c+2216-0xd34
<operator>.addition 0x1c7d+1312
<operator>.subtraction 0x28+7929-0x1f21
<operator>.addition 0x238+638
<operator>.subtraction 0x140c+4834-0x26ed
<operator>.subtraction ReplacementFor_j-(0x17b6+3326-0x24b3)
<operator>.addition ReplacementFor_statu[i-\012(0xbbd+5600-0x219c)][ReplacementFor_j-(0x17fd+2260-0x20d0)]+ReplacementFor_arr[i\012]
<operator>.greaterThan ReplacementFor_arr[i]*(0x92+3711-0xf0f)>t-ReplacementFor_statu[i-\012(0x1092+4443-0x21ec)][ReplacementFor_j-(0x1c87+1498-0x2260)]
<operator>.multiplication ReplacementFor_arr[i]*(0x5c5+696-0x87b)
<operator>.addition ReplacementFor_statu[i-(0x1027+3846-0x1f2c)][ReplacementFor_j]+\012ReplacementFor_arr[i]*(0x1d4d+224-0x1e2b)
<operator>.subtraction 0x605+4091-0x1600
<operator>.addition 0x191f+2045
<operator>.addition 0x48c+2216
<operator>.addition 0x28+7929
<operator>.addition 0x140c+4834
<operator>.subtraction i-\012(0x655+1217-0xb15)
<operator>.subtraction 0x17b6+3326-0x24b3
<operator>.assignment ReplacementFor_statu[i][ReplacementFor_j]=(ReplacementFor_statu[i-\012(0x3b+3359-0xd59)][ReplacementFor_j-(0x9d5+6985-0x251d)]+ReplacementFor_arr[i]*\012(0x1233+1290-0x173b))/(0xba8+6923-0x26b1)+t/(0x1719+4064-0x26f7)
<operator>.subtraction 0x5c5+696-0x87b
<operator>.multiplication ReplacementFor_arr[i]*(0x1d4d+224-0x1e2b)
<operator>.addition 0x605+4091
<operator>.subtraction 0x655+1217-0xb15
<operator>.addition 0x17b6+3326
<operator>.subtraction ReplacementFor_j-(0x17fd+2260-0x20d0)
<operator>.multiplication ReplacementFor_arr[i]*(0x92+3711-0xf0f)
<operator>.subtraction t-ReplacementFor_statu[i-\012(0x1092+4443-0x21ec)][ReplacementFor_j-(0x1c87+1498-0x2260)]
<operator>.assignment ReplacementFor_statu[i][ReplacementFor_j]=ReplacementFor_statu[i-\012(0xcb9+2062-0x14c6)][ReplacementFor_j-(0x2316+923-0x26b0)]+ReplacementFor_arr[i]\012*(0x1aa6+17-0x1ab5)
<operator>.subtraction i-(0x770+4992-0x1aef)
<operator>.addition 0x5c5+696
<operator>.subtraction 0x1d4d+224-0x1e2b
<operator>.addition 0x655+1217
<operator>.subtraction i-\012(0xbbd+5600-0x219c)
<operator>.subtraction 0x17fd+2260-0x20d0
<operator>.subtraction 0x92+3711-0xf0f
<operator>.addition (ReplacementFor_statu[i-\012(0x3b+3359-0xd59)][ReplacementFor_j-(0x9d5+6985-0x251d)]+ReplacementFor_arr[i]*\012(0x1233+1290-0x173b))/(0xba8+6923-0x26b1)+t/(0x1719+4064-0x26f7)
<operator>.subtraction 0x770+4992-0x1aef
<operator>.subtraction i-(0x1027+3846-0x1f2c)
<operator>.addition 0x1d4d+224
<operator>.subtraction 0xbbd+5600-0x219c
<operator>.addition 0x17fd+2260
<operator>.addition 0x92+3711
<operator>.subtraction ReplacementFor_j-(0x1c87+1498-0x2260)
<operator>.division (ReplacementFor_statu[i-\012(0x3b+3359-0xd59)][ReplacementFor_j-(0x9d5+6985-0x251d)]+ReplacementFor_arr[i]*\012(0x1233+1290-0x173b))/(0xba8+6923-0x26b1)
<operator>.division t/(0x1719+4064-0x26f7)
<operator>.addition ReplacementFor_statu[i-\012(0xcb9+2062-0x14c6)][ReplacementFor_j-(0x2316+923-0x26b0)]+ReplacementFor_arr[i]\012*(0x1aa6+17-0x1ab5)
<operator>.addition 0x770+4992
<operator>.subtraction 0x1027+3846-0x1f2c
<operator>.addition 0xbbd+5600
<operator>.subtraction i-\012(0x1092+4443-0x21ec)
<operator>.subtraction 0x1c87+1498-0x2260
<operator>.addition ReplacementFor_statu[i-\012(0x3b+3359-0xd59)][ReplacementFor_j-(0x9d5+6985-0x251d)]+ReplacementFor_arr[i]*\012(0x1233+1290-0x173b)
<operator>.subtraction 0xba8+6923-0x26b1
<operator>.subtraction 0x1719+4064-0x26f7
<operator>.multiplication ReplacementFor_arr[i]\012*(0x1aa6+17-0x1ab5)
<operator>.addition 0x1027+3846
<operator>.subtraction 0x1092+4443-0x21ec
<operator>.addition 0x1c87+1498
<operator>.multiplication ReplacementFor_arr[i]*\012(0x1233+1290-0x173b)
<operator>.addition 0xba8+6923
<operator>.addition 0x1719+4064
<operator>.subtraction ReplacementFor_j-(0x2316+923-0x26b0)
<operator>.subtraction 0x1aa6+17-0x1ab5
<operator>.addition 0x1092+4443
<operator>.subtraction ReplacementFor_j-(0x9d5+6985-0x251d)
<operator>.subtraction 0x1233+1290-0x173b
<operator>.subtraction i-\012(0xcb9+2062-0x14c6)
<operator>.subtraction 0x2316+923-0x26b0
<operator>.addition 0x1aa6+17
<operator>.subtraction i-\012(0x3b+3359-0xd59)
<operator>.subtraction 0x9d5+6985-0x251d
<operator>.addition 0x1233+1290
<operator>.subtraction 0xcb9+2062-0x14c6
<operator>.addition 0x2316+923
<operator>.subtraction 0x3b+3359-0xd59
<operator>.addition 0x9d5+6985
<operator>.addition 0xcb9+2062
<operator>.addition 0x3b+3359
<operator>.addressOf &\012ReplacementFor_spn
<operator>.addressOf &ReplacementFor_ttt
<operator>.addressOf &ReplacementFor_n
<operator>.addressOf &ReplacementFor_c
<operator>.indirectIndexAccess ReplacementFor_statu[(0x736+3009-0x12f7)][(0x42d+849-0x77e)]
<operator>.indirectIndexAccess ReplacementFor_arr[i]
<operator>.indirectIndexAccess ReplacementFor_arr[i%ReplacementFor_c]
UNKNOWN int int
<operator>.indirectIndexAccess ReplacementFor_statu[(0x736+3009-0x12f7)]
<operator>.indirectIndexAccess ReplacementFor_arr[(0x189+5861-0x186e)]
<operator>.indirectIndexAccess ReplacementFor_statu[(0x1233+4794-0x24ed)][(0x701+807-0xa28)]
UNKNOWN int int
<operator>.indirectIndexAccess ReplacementFor_statu[ReplacementFor_n-(0x6ad+884-0xa20)][ReplacementFor_spn]
<operator>.indirectIndexAccess ReplacementFor_statu[(0x1233+4794-0x24ed)]
<operator>.indirectIndexAccess ReplacementFor_statu[(0x959+4793-0x1c12)][(0xdb4+3754-0x1c5c)]
<operator>.indirectIndexAccess ReplacementFor_statu[i][(0x108b+3483-0x1e26)]
<operator>.indirectIndexAccess ReplacementFor_statu[ReplacementFor_n-(0x6ad+884-0xa20)]
<operator>.indirectIndexAccess ReplacementFor_arr[i]
<operator>.indirectIndexAccess ReplacementFor_statu[(0x959+4793-0x1c12)]
<operator>.indirectIndexAccess ReplacementFor_statu[(0x277+2666-0xce1)][(0x1343+2271-0x1c21)]
<operator>.indirectIndexAccess ReplacementFor_statu[\012(0x3c5+1841-0xaf6)][(0xf72+3724-0x1dfc)]
<operator>.indirectIndexAccess ReplacementFor_statu[i]
<operator>.indirectIndexAccess ReplacementFor_statu[i-\012(0x140c+4834-0x26ed)][(0x47d+3820-0x1369)]
<operator>.indirectIndexAccess ReplacementFor_statu[(0x277+2666-0xce1)]
<operator>.indirectIndexAccess ReplacementFor_statu[\012(0x3c5+1841-0xaf6)]
<operator>.indirectIndexAccess ReplacementFor_statu[(0x48c+2216-0xd34)\012][(0x1c7d+1312-0x219c)]
<operator>.indirectIndexAccess ReplacementFor_statu[(0x28+7929-0x1f21)][\012(0x238+638-0x4b6)]
<operator>.indirectIndexAccess ReplacementFor_statu[i-\012(0x140c+4834-0x26ed)]
<operator>.indirectIndexAccess ReplacementFor_arr[i]
<operator>.indirectIndexAccess ReplacementFor_statu[(0x605+4091-0x1600)][\012(0x191f+2045-0x211c)]
<operator>.indirectIndexAccess ReplacementFor_statu[(0x48c+2216-0xd34)\012]
<operator>.indirectIndexAccess ReplacementFor_statu[(0x28+7929-0x1f21)]
<operator>.indirectIndexAccess ReplacementFor_statu[i-\012(0x655+1217-0xb15)][ReplacementFor_j-(0x17b6+3326-0x24b3)]
<operator>.indirectIndexAccess ReplacementFor_statu[i\012][ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_statu[(0x605+4091-0x1600)]
<operator>.indirectIndexAccess ReplacementFor_statu[i-\012(0x655+1217-0xb15)]
<operator>.indirectIndexAccess ReplacementFor_statu[i][ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_statu[i-(0x770+4992-0x1aef)][\012ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_statu[i\012]
<operator>.indirectIndexAccess ReplacementFor_statu[i][ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_statu[i]
<operator>.indirectIndexAccess ReplacementFor_statu[i-\012(0xbbd+5600-0x219c)][ReplacementFor_j-(0x17fd+2260-0x20d0)]
<operator>.indirectIndexAccess ReplacementFor_arr[i\012]
<operator>.indirectIndexAccess ReplacementFor_statu[i-(0x770+4992-0x1aef)]
<operator>.indirectIndexAccess ReplacementFor_arr[i]
<operator>.indirectIndexAccess ReplacementFor_statu[i]
<operator>.indirectIndexAccess ReplacementFor_statu[i-(0x1027+3846-0x1f2c)][ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_statu[i-\012(0xbbd+5600-0x219c)]
<operator>.indirectIndexAccess ReplacementFor_statu[i-(0x1027+3846-0x1f2c)]
<operator>.indirectIndexAccess ReplacementFor_arr[i]
<operator>.indirectIndexAccess ReplacementFor_arr[i]
<operator>.indirectIndexAccess ReplacementFor_statu[i-\012(0x1092+4443-0x21ec)][ReplacementFor_j-(0x1c87+1498-0x2260)]
<operator>.indirectIndexAccess ReplacementFor_statu[i][ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_statu[i-\012(0x1092+4443-0x21ec)]
<operator>.indirectIndexAccess ReplacementFor_statu[i]
<operator>.indirectIndexAccess ReplacementFor_statu[i][ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_statu[i]
<operator>.indirectIndexAccess ReplacementFor_statu[i-\012(0xcb9+2062-0x14c6)][ReplacementFor_j-(0x2316+923-0x26b0)]
<operator>.indirectIndexAccess ReplacementFor_statu[i-\012(0x3b+3359-0xd59)][ReplacementFor_j-(0x9d5+6985-0x251d)]
<operator>.indirectIndexAccess ReplacementFor_statu[i-\012(0xcb9+2062-0x14c6)]
<operator>.indirectIndexAccess ReplacementFor_arr[i]
<operator>.indirectIndexAccess ReplacementFor_statu[i-\012(0x3b+3359-0xd59)]
<operator>.indirectIndexAccess ReplacementFor_arr[i]
>>>PDG&256 0->4 0->6 0->7 0->8 0->9 0->10 0->12 0->13 0->15 0->16 0->17 0->18 0->19 0->20 0->21 0->22 0->23 0->24 0->25 0->26 0->27 0->29 0->30 0->31 0->32 0->37 0->38 0->39 0->40 0->41 0->42 0->43 0->45 0->46 0->47 0->48 0->50 0->51 0->52 0->53 0->54 0->55 0->57 0->60 0->61 0->62 0->63 0->64 0->65 0->66 0->69 0->70 0->71 0->72 0->74 0->77 0->78 0->79 0->80 0->81 0->82 0->84 0->85 0->86 0->87 0->88 0->91 0->92 0->93 0->94 0->95 0->96 0->97 0->98 0->99 0->100 0->101 0->102 0->103 0->104 0->105 0->106 0->108 0->109 0->110 0->111 0->112 0->113 0->114 0->115 0->116 0->117 0->118 0->119 0->120 0->121 0->124 0->126 0->127 0->128 0->129 0->130 0->131 0->132 0->134 0->135 0->136 0->137 0->138 0->139 0->140 0->141 0->143 0->144 0->145 0->146 0->147 0->148 0->149 0->151 0->152 0->153 0->154 0->155 0->156 0->157 0->159 0->161 0->162 0->163 0->164 0->165 0->167 0->168 0->169 0->170 0->171 0->172 0->173 0->174 0->175 0->176 0->177 0->178 0->179 0->180 0->181 0->182 0->183 0->184 0->185 0->186 0->187 0->188 0->189 0->190 0->191 0->192 2->1 2->1 2->4 3->1 3->1 3->1 3->15 3->30 4->1 4->1 4->1 4->6 4->12 4->23 4->72 4->82 4->141 4->159 5->1 6->1 6->1 6->1 6->6 6->7 6->12 6->15 6->16 6->19 6->22 6->28 6->29 6->30 6->47 6->60 6->193 6->194 6->195 6->196 7->1 7->6 8->1 8->1 8->5 9->2 9->2 10->3 10->3 11->1 11->1 11->6 12->1 12->1 12->1 12->1 12->1 12->1 12->13 12->16 12->18 12->19 12->22 12->24 12->29 12->31 12->39 12->45 12->48 12->74 13->1 13->1 13->23 14->1 14->1 14->1 15->1 15->1 15->1 15->7 15->30 16->1 16->12 16->16 16->17 16->17 16->18 16->18 16->29 16->38 16->38 16->48 17->1 17->16 18->1 18->1 18->1 18->12 19->19 19->20 19->21 19->24 19->39 19->48 19->48 19->198 19->199 20->1 20->19 21->1 21->1 21->1 21->18 21->32 21->38 21->41 21->71 21->124 21->135 21->140 21->169 21->173 22->1 22->1 22->12 22->13 22->13 22->14 22->15 22->23 22->24 22->30 22->31 22->31 22->32 22->34 22->36 22->39 22->42 22->43 22->49 22->50 22->51 22->52 22->53 22->54 22->55 22->57 22->61 22->62 22->63 22->64 22->65 22->69 22->74 22->75 22->76 22->77 22->78 22->91 22->92 22->93 22->108 22->109 22->110 22->197 22->200 22->201 22->202 22->203 22->204 22->205 22->206 22->209 23->1 23->1 23->6 23->33 23->44 23->56 23->66 23->67 23->68 23->72 23->79 23->80 23->81 23->82 23->82 23->83 23->84 23->94 23->95 23->96 23->97 23->98 23->99 23->100 23->101 23->102 23->111 23->112 23->113 23->114 23->115 23->116 23->117 23->118 23->119 23->126 23->127 23->128 23->129 23->136 23->207 23->211 23->212 23->213 23->216 23->217 23->218 23->219 23->222 23->223 23->224 23->227 24->1 24->1 24->24 24->25 24->35 24->45 24->58 24->59 24->70 24->71 24->74 24->85 24->86 24->87 24->88 24->103 24->103 24->104 24->105 24->106 24->120 24->130 24->208 24->214 24->215 24->220 24->221 25->1 25->24 27->1 27->11 27->11 28->1 28->1 28->16 29->1 29->1 29->19 30->1 30->1 30->1 30->7 30->15 31->1 32->1 32->1 32->14 32->14 32->18 32->21 32->38 32->71 32->124 32->135 32->140 32->169 32->173 33->1 33->1 33->1 34->1 34->1 34->24 35->1 35->1 35->1 36->1 38->1 39->1 39->1 39->1 39->12 39->19 39->39 39->40 39->40 39->41 39->210 40->1 40->39 41->1 41->1 41->50 42->1 43->1 43->32 43->32 44->1 44->1 44->1 45->1 45->1 45->1 45->12 45->45 45->46 45->72 45->73 45->107 45->121 45->121 45->124 45->131 45->132 45->134 45->137 45->138 45->143 45->144 45->146 45->151 45->161 45->225 45->226 45->228 45->230 45->231 45->236 45->237 46->1 46->45 47->1 47->28 47->28 48->1 48->12 48->16 48->20 49->1 49->1 49->1 50->1 50->1 50->30 50->30 51->1 53->1 55->1 56->1 56->1 56->33 57->1 57->34 57->34 58->1 58->1 59->1 59->1 59->45 61->1 61->50 61->50 64->1 66->1 67->1 67->1 68->1 68->1 68->44 70->1 71->1 71->1 71->18 71->21 71->32 71->35 71->35 71->38 71->41 71->58 71->58 71->124 71->135 71->140 71->169 71->173 72->1 72->1 72->6 72->89 72->122 72->123 72->139 72->140 72->141 72->141 72->147 72->148 72->149 72->154 72->155 72->156 72->157 72->163 72->164 72->165 72->171 72->172 72->178 72->229 72->233 72->234 72->235 72->240 72->243 72->244 72->246 73->1 73->1 73->1 73->90 73->125 73->135 73->145 73->152 73->153 73->162 73->170 73->232 73->238 73->239 73->241 73->242 74->1 74->1 74->12 74->19 75->1 75->41 75->49 75->50 76->1 76->39 76->49 79->1 81->1 82->1 82->6 82->33 82->33 82->56 82->56 82->67 82->67 82->72 83->1 83->1 83->33 83->33 83->56 83->56 83->67 83->67 84->1 86->1 87->1 87->71 87->71 88->1 88->59 88->59 89->1 89->1 89->1 90->1 90->1 90->1 91->1 91->74 91->74 92->1 92->49 92->49 92->75 92->75 93->1 93->49 93->49 93->76 93->76 95->1 97->1 97->82 97->82 98->1 98->83 98->83 99->1 101->1 102->1 103->1 103->25 103->131 107->1 107->1 113->1 116->1 118->1 120->1 120->103 120->103 121->1 121->139 121->157 122->1 122->1 123->1 123->1 123->1 123->133 123->142 123->150 123->158 123->159 123->160 123->166 123->167 123->168 123->169 123->173 123->174 123->175 123->176 123->177 123->179 123->180 123->181 123->182 123->183 123->184 123->185 123->186 123->187 123->188 123->189 123->190 123->191 123->192 123->245 123->247 123->248 123->249 123->250 123->251 123->252 123->253 123->254 123->255 124->1 124->1 124->18 124->21 124->32 124->38 124->41 124->71 124->73 124->73 124->107 124->107 124->135 124->140 124->169 124->173 125->1 125->1 126->1 131->1 131->147 131->164 132->1 132->121 132->121 133->1 133->1 133->1 134->1 134->124 134->124 135->1 135->1 135->18 135->21 135->32 135->38 135->41 135->71 135->90 135->90 135->124 135->125 135->125 135->140 135->169 135->173 137->1 137->131 137->131 139->1 139->46 140->1 140->123 140->123 140->169 140->173 141->1 141->6 141->72 141->123 141->123 141->159 142->1 142->1 142->1 143->1 143->25 143->131 143->152 145->1 145->135 145->135 147->1 147->143 148->1 148->139 148->139 149->1 149->140 149->140 150->1 150->1 151->1 151->143 151->143 152->1 152->25 152->131 154->1 154->147 154->147 157->1 157->176 157->179 158->1 158->1 158->133 158->133 158->150 158->150 159->1 159->6 159->72 159->133 159->133 159->150 159->150 160->1 160->1 162->1 162->152 162->152 164->1 164->181 164->184 165->1 165->157 165->157 166->1 166->1 167->1 167->158 167->158 168->1 168->159 168->159 169->1 169->124 169->142 169->142 169->160 169->160 171->1 171->164 171->164 173->1 173->124 173->158 173->158 173->166 173->166 176->1 176->46 177->1 177->169 177->169 179->1 179->46 180->1 180->173 180->173 181->1 181->143 182->1 182->176 182->176 184->1 184->143 185->1 185->179 185->179 187->1 187->181 187->181 189->1 189->184 189->184
>>>Token int main ( ) { FILE * ReplacementFor_fin = fopen ( " \x42 \x2e \x69 \x6e " , " \x72 " ) ; FILE * ReplacementFor_fout = fopen ( " \x42 \x2e \x6f \x75 \x74 " , " \x77 " ) ; int t , ReplacementFor_tc ; fscanf ( ReplacementFor_fin , " \x25 \x64 " , & t ) ; for ( ReplacementFor_tc = ( 0x1270 + 661 - 0x1504 ) ; ReplacementFor_tc <= t ; ReplacementFor_tc ++ ) { int i , ReplacementFor_j ; int ReplacementFor_arr [ ( 0x62c + 5623 - 0x183b ) ] ; double ReplacementFor_statu [ ( 0x106d + 6560 - 0x2625 ) ] [ ( 0xdef + 2880 - 0x192c ) ] ; int t , ReplacementFor_n , ReplacementFor_c , ReplacementFor_spn ; __int64 ReplacementFor_ttt ; fscanf ( ReplacementFor_fin , " \x25 \x64 \x25 \x49 \x36 \x34 \x64 \x25 \x64 \x25 \x64 " , & ReplacementFor_spn , & ReplacementFor_ttt , & ReplacementFor_n , & ReplacementFor_c ) ; for ( i = ( 0x2157 + 325 - 0x229c ) ; i < ReplacementFor_c ; i ++ ) fscanf ( ReplacementFor_fin , " \x25 \x64 " , ReplacementFor_arr + i ) ; for ( i = ReplacementFor_c ; i < ReplacementFor_n ; i ++ ) ReplacementFor_arr [ i ] = ReplacementFor_arr [ i % ReplacementFor_c ] ; if ( ReplacementFor_ttt > 1000000000 ) { int ReplacementFor_dis ; for ( ReplacementFor_dis = ( 0x6fa + 351 - 0x859 ) , i = ( 0xab4 + 1998 - 0x1282 ) ; i < ReplacementFor_n ; i ++ ) ReplacementFor_dis += ReplacementFor_arr [ i ] ; fprintf ( ReplacementFor_fout , " \x43 \x61 \x73 \x65 \x20 \x23 \x25 \x64 \x3a \x20 \x25 \x64 " " \n " , ReplacementFor_tc , ReplacementFor_dis / ( 0x2d2 + 6251 - 0x1b3b ) ) ; goto ReplacementFor_END ; } t = ( int ) ( ReplacementFor_ttt ) ; ReplacementFor_statu [ ( 0x736 + 3009 - 0x12f7 ) ] [ ( 0x42d + 849 - 0x77e ) ] = ReplacementFor_arr [ ( 0x189 + 5861 - 0x186e ) ] * ( 0x14da + 1855 - 0x1c17 ) ; if ( ReplacementFor_statu [ ( 0x1233 + 4794 - 0x24ed ) ] [ ( 0x701 + 807 - 0xa28 ) ] > t ) ReplacementFor_statu [ ( 0x959 + 4793 - 0x1c12 ) ] [ ( 0xdb4 + 3754 - 0x1c5c ) ] = ReplacementFor_statu [ ( 0x277 + 2666 - 0xce1 ) ] [ ( 0x1343 + 2271 - 0x1c21 ) ] = t / ( 0x886 + 6437 - 0x21a9 ) + ReplacementFor_statu [ ( 0x605 + 4091 - 0x1600 ) ] [ ( 0x191f + 2045 - 0x211c ) ] / ( 0x75 + 8690 - 0x2265 ) ; else ReplacementFor_statu [ ( 0x3c5 + 1841 - 0xaf6 ) ] [ ( 0xf72 + 3724 - 0x1dfc ) ] = ReplacementFor_statu [ ( 0x48c + 2216 - 0xd34 ) ] [ ( 0x1c7d + 1312 - 0x219c ) ] = ReplacementFor_statu [ ( 0x28 + 7929 - 0x1f21 ) ] [ ( 0x238 + 638 - 0x4b6 ) ] ; for ( i = ( 0x424 + 811 - 0x74e ) ; i < ReplacementFor_n ; i ++ ) { ReplacementFor_statu [ i ] [ ( 0x108b + 3483 - 0x1e26 ) ] = ReplacementFor_statu [ i - ( 0x140c + 4834 - 0x26ed ) ] [ ( 0x47d + 3820 - 0x1369 ) ] + ReplacementFor_arr [ i ] * ( 0xc2b + 3446 - 0x199f ) ; for ( ReplacementFor_j = ( 0x307 + 7196 - 0x1f22 ) ; ReplacementFor_j <= ReplacementFor_spn ; ReplacementFor_j ++ ) { if ( ReplacementFor_statu [ i - ( 0x655 + 1217 - 0xb15 ) ] [ ReplacementFor_j - ( 0x17b6 + 3326 - 0x24b3 ) ] >= t ) ReplacementFor_statu [ i ] [ ReplacementFor_j ] = ReplacementFor_statu [ i - ( 0xbbd + 5600 - 0x219c ) ] [ ReplacementFor_j - ( 0x17fd + 2260 - 0x20d0 ) ] + ReplacementFor_arr [ i ] ; else if ( ReplacementFor_arr [ i ] * ( 0x92 + 3711 - 0xf0f ) > t - ReplacementFor_statu [ i - ( 0x1092 + 4443 - 0x21ec ) ] [ ReplacementFor_j - ( 0x1c87 + 1498 - 0x2260 ) ] ) ReplacementFor_statu [ i ] [ ReplacementFor_j ] = ( ReplacementFor_statu [ i - ( 0x3b + 3359 - 0xd59 ) ] [ ReplacementFor_j - ( 0x9d5 + 6985 - 0x251d ) ] + ReplacementFor_arr [ i ] * ( 0x1233 + 1290 - 0x173b ) ) / ( 0xba8 + 6923 - 0x26b1 ) + t / ( 0x1719 + 4064 - 0x26f7 ) ; else ReplacementFor_statu [ i ] [ ReplacementFor_j ] = ReplacementFor_statu [ i - ( 0xcb9 + 2062 - 0x14c6 ) ] [ ReplacementFor_j - ( 0x2316 + 923 - 0x26b0 ) ] + ReplacementFor_arr [ i ] * ( 0x1aa6 + 17 - 0x1ab5 ) ; if ( ReplacementFor_statu [ i - ( 0x770 + 4992 - 0x1aef ) ] [ ReplacementFor_j ] + ReplacementFor_arr [ i ] * ( 0x5c5 + 696 - 0x87b ) < ReplacementFor_statu [ i ] [ ReplacementFor_j ] ) ReplacementFor_statu [ i ] [ ReplacementFor_j ] = ReplacementFor_statu [ i - ( 0x1027 + 3846 - 0x1f2c ) ] [ ReplacementFor_j ] + ReplacementFor_arr [ i ] * ( 0x1d4d + 224 - 0x1e2b ) ; } } fprintf ( ReplacementFor_fout , " \x43 \x61 \x73 \x65 \x20 \x23 \x25 \x64 \x3a \x20 \x25 \x64 " " \n " , ReplacementFor_tc , ( int ) ( ReplacementFor_statu [ ReplacementFor_n - ( 0x6ad + 884 - 0xa20 ) ] [ ReplacementFor_spn ] ) ) ; ReplacementFor_END : ; } return ( 0x131f + 4428 - 0x246b ) ; }
>>>Func
METHOD main
METHOD_RETURN int
PARAM int ReplacementFor_argc
PARAM char**ReplacementFor_argv
scanf scanf("\x25\x64" "\n",&T)
RETURN return(0x1133+1236-0x1607); return(0x1133+1236-0x1607);
<operator>.lessThan i<\012(0x2195+412-0x22d9)
<operator>.postIncrement i++
<operator>.lessThan i<(0xf98+6003-0x2703)
<operator>.postIncrement i++
<operator>.lessThan i<T
<operator>.postIncrement i++
<operator>.subtraction 0x1133+1236-0x1607
<operator>.assignment i=(0x63b+2780-0x1117)
<operator>.assignment ReplacementFor_ix[i]=-(0x7d4+5205-0x1c28)
<operator>.assignment i=\012(0xa7+8089-0x2040)
<operator>.assignment ReplacementFor_ix[\012ReplacementFor_basic[i]]=i
<operator>.assignment i=(0x14ba+4070-0x24a0)
ReplacementFor_clearAll ReplacementFor_clearAll()
scanf scanf("\x25\x64\x20",&ReplacementFor_C)
scanf scanf("\x25\x64\x20",&ReplacementFor_D)
scanf scanf("\x25\x64\x20",&\012ReplacementFor_N)
scanf scanf("\x25\x73",s)
<operator>.subtraction 0x2195+412-0x22d9
<operator>.subtraction 0xf98+6003-0x2703
<operator>.lessThan ReplacementFor_j<ReplacementFor_C
<operator>.postIncrement ReplacementFor_j++
<operator>.lessThan ReplacementFor_j<ReplacementFor_D
<operator>.postIncrement ReplacementFor_j++
<operator>.logicalAnd ReplacementFor_C==(0x7cc+2931-0x133f)&&ReplacementFor_D==(0x6a0+826-0x9da)
<operator>.addition 0x1133+1236
<operator>.subtraction 0x63b+2780-0x1117
<operator>.addition 0x2195+412
<operator>.minus -(0x7d4+5205-0x1c28)
<operator>.subtraction 0xa7+8089-0x2040
<operator>.addition 0xf98+6003
<operator>.subtraction 0x14ba+4070-0x24a0
<operator>.assignment ReplacementFor_j=(0x1c88+588-0x1ed4)
scanf scanf("\x25\x73\x20",\012ReplacementFor_c)
<operator>.assignment ReplacementFor_comb[ReplacementFor_ix[ReplacementFor_c[\012(0x135a+2733-0x1e07)]]][ReplacementFor_ix[ReplacementFor_c[(0xadc+5234-0x1f4d)]]\012]=ReplacementFor_c[(0x1ba6+891-0x1f1f)]
<operator>.assignment ReplacementFor_j=\012(0x2fc+7609-0x20b5)
scanf scanf(\012"\x25\x73\x20",ReplacementFor_d)
<operator>.assignment ReplacementFor_opp[ReplacementFor_ix[\012ReplacementFor_d[(0xb4b+4815-0x1e1a)]]][ReplacementFor_ix[ReplacementFor_d[\012(0x128d+1588-0x18c0)]]]=(0x10ff+2340-0x1a22)
printf printf("\x43\x61\x73\x65\x20\x23\x25\x64\x3a\x20" i+(0x2a4+8543-0x2402))
ReplacementFor_printAsVector ReplacementFor_printAsVector(s,ReplacementFor_N)
printf printf("\n")
<operator>.addition 0x63b+2780
<operator>.subtraction 0x7d4+5205-0x1c28
<operator>.addition 0xa7+8089
<operator>.addition 0x14ba+4070
<operator>.equals ReplacementFor_C==(0x7cc+2931-0x133f)
<operator>.equals ReplacementFor_D==(0x6a0+826-0x9da)
<operator>.assignment ReplacementFor_nR=(0x3c1+5298-0x1872)
<operator>.assignment ReplacementFor_r\012[(0x1dc0+1315-0x22e3)]=s[(0x1051+2456-0x19e9)]
ReplacementFor_addOpposite ReplacementFor_addOpposite(s[\012(0x809+681-0xab2)])
printf printf("\x43\x61\x73\x65\x20\x23\x25\x64\x3a\x20" i+\012(0x14c6+1882-0x1c1f))
ReplacementFor_printAsVector ReplacementFor_printAsVector(ReplacementFor_r,\012ReplacementFor_nR)
printf printf("\n")
<operator>.addition 0x7d4+5205
<operator>.subtraction 0x1c88+588-0x1ed4
<operator>.subtraction 0x2fc+7609-0x20b5
<operator>.subtraction 0x10ff+2340-0x1a22
<operator>.subtraction 0x7cc+2931-0x133f
<operator>.subtraction 0x6a0+826-0x9da
<operator>.addition i+(0x2a4+8543-0x2402)
<operator>.lessThan ReplacementFor_j<\012ReplacementFor_N
<operator>.postIncrement ReplacementFor_j++
<operator>.addition 0x1c88+588
<operator>.subtraction 0x1ba6+891-0x1f1f
<operator>.addition 0x2fc+7609
<operator>.addition 0x10ff+2340
<operator>.addition 0x7cc+2931
<operator>.addition 0x6a0+826
<operator>.subtraction 0x2a4+8543-0x2402
<operator>.subtraction 0x3c1+5298-0x1872
<operator>.assignment ReplacementFor_j=(0x509+4404-0x163c)
<operator>.assignment ReplacementFor_noBasic=\012ReplacementFor_getReplace(s[ReplacementFor_j] ReplacementFor_r[ReplacementFor_nR\012-(0x6cf+7138-0x22b0)])
<operator>.addition i+\012(0x14c6+1882-0x1c1f)
<operator>.addition 0x1ba6+891
<operator>.addition 0x2a4+8543
<operator>.addition 0x3c1+5298
<operator>.subtraction 0x1dc0+1315-0x22e3
<operator>.subtraction 0x1051+2456-0x19e9
<operator>.subtraction 0x809+681-0xab2
<operator>.equals ReplacementFor_noBasic==((char)(0x4df+1733-0xb77))
<operator>.subtraction 0x14c6+1882-0x1c1f
<operator>.subtraction 0xadc+5234-0x1f4d
<operator>.subtraction 0x128d+1588-0x18c0
<operator>.addition 0x1dc0+1315
<operator>.addition 0x1051+2456
<operator>.addition 0x809+681
<operator>.subtraction 0x509+4404-0x163c
ReplacementFor_getReplace ReplacementFor_getReplace(s[ReplacementFor_j] ReplacementFor_r[ReplacementFor_nR\012-(0x6cf+7138-0x22b0)])
<operator>.addition 0x14c6+1882
<operator>.subtraction 0x135a+2733-0x1e07
<operator>.addition 0xadc+5234
<operator>.subtraction 0xb4b+4815-0x1e1a
<operator>.addition 0x128d+1588
<operator>.addition 0x509+4404
<operator>.cast (char)(0x4df+1733-0xb77)
ReplacementFor_removeOpposite ReplacementFor_removeOpposite(ReplacementFor_r[ReplacementFor_nR-\012(0xb60+6413-0x246c)])
<operator>.assignment ReplacementFor_r[ReplacementFor_nR-(0x11e2+4979-0x2554)]=\012ReplacementFor_noBasic
<operator>.addition 0x135a+2733
<operator>.addition 0xb4b+4815
<operator>.subtraction ReplacementFor_nR\012-(0x6cf+7138-0x22b0)
<operator>.subtraction 0x4df+1733-0xb77
ReplacementFor_resetOpposite ReplacementFor_resetOpposite()
<operator>.subtraction 0x6cf+7138-0x22b0
<operator>.addition 0x4df+1733
<operator>.lessThan ReplacementFor_j<ReplacementFor_N-(0xf3f+463-0x110d)
<operator>.assignment ReplacementFor_r[ReplacementFor_nR++]=s[ReplacementFor_j]
ReplacementFor_addOpposite ReplacementFor_addOpposite(s[ReplacementFor_j])
<operator>.addition 0x6cf+7138
<operator>.assignment ReplacementFor_r[\012(0x10b0+1621-0x1705)]=s[ReplacementFor_j+(0xa65+7185-0x2675)]
<operator>.assignment ReplacementFor_nR=\012(0x9d3+982-0xda8)
<operator>.postIncrement ReplacementFor_j++
ReplacementFor_addOpposite ReplacementFor_addOpposite(ReplacementFor_r\012[(0xec9+2663-0x1930)])
<operator>.subtraction ReplacementFor_nR-\012(0xb60+6413-0x246c)
<operator>.subtraction ReplacementFor_nR-(0x11e2+4979-0x2554)
<operator>.subtraction ReplacementFor_N-(0xf3f+463-0x110d)
<operator>.assignment ReplacementFor_nR=(0x84+4260-0x1128)
<operator>.subtraction 0xb60+6413-0x246c
<operator>.subtraction 0x11e2+4979-0x2554
<operator>.subtraction 0xf3f+463-0x110d
<operator>.subtraction 0x9d3+982-0xda8
<operator>.postIncrement ReplacementFor_nR++
<operator>.addition 0xb60+6413
<operator>.addition 0x11e2+4979
<operator>.addition 0xf3f+463
<operator>.subtraction 0x10b0+1621-0x1705
<operator>.addition ReplacementFor_j+(0xa65+7185-0x2675)
<operator>.addition 0x9d3+982
<operator>.subtraction 0xec9+2663-0x1930
<operator>.subtraction 0x84+4260-0x1128
<operator>.addition 0x10b0+1621
<operator>.subtraction 0xa65+7185-0x2675
<operator>.addition 0xec9+2663
<operator>.addition 0x84+4260
<operator>.addition 0xa65+7185
<operator>.indirectIndexAccess ReplacementFor_ix[i]
<operator>.indirectIndexAccess ReplacementFor_ix[\012ReplacementFor_basic[i]]
<operator>.addressOf &ReplacementFor_C
<operator>.addressOf &ReplacementFor_D
<operator>.addressOf &\012ReplacementFor_N
<operator>.indirectIndexAccess ReplacementFor_basic[i]
<operator>.indirectIndexAccess ReplacementFor_comb[ReplacementFor_ix[ReplacementFor_c[\012(0x135a+2733-0x1e07)]]][ReplacementFor_ix[ReplacementFor_c[(0xadc+5234-0x1f4d)]]\012]
<operator>.indirectIndexAccess ReplacementFor_c[(0x1ba6+891-0x1f1f)]
<operator>.indirectIndexAccess ReplacementFor_opp[ReplacementFor_ix[\012ReplacementFor_d[(0xb4b+4815-0x1e1a)]]][ReplacementFor_ix[ReplacementFor_d[\012(0x128d+1588-0x18c0)]]]
<operator>.indirectIndexAccess ReplacementFor_comb[ReplacementFor_ix[ReplacementFor_c[\012(0x135a+2733-0x1e07)]]]
<operator>.indirectIndexAccess ReplacementFor_ix[ReplacementFor_c[(0xadc+5234-0x1f4d)]]
<operator>.indirectIndexAccess ReplacementFor_opp[ReplacementFor_ix[\012ReplacementFor_d[(0xb4b+4815-0x1e1a)]]]
<operator>.indirectIndexAccess ReplacementFor_ix[ReplacementFor_d[\012(0x128d+1588-0x18c0)]]
<operator>.indirectIndexAccess ReplacementFor_r\012[(0x1dc0+1315-0x22e3)]
<operator>.indirectIndexAccess s[(0x1051+2456-0x19e9)]
<operator>.indirectIndexAccess s[\012(0x809+681-0xab2)]
<operator>.indirectIndexAccess ReplacementFor_ix[ReplacementFor_c[\012(0x135a+2733-0x1e07)]]
<operator>.indirectIndexAccess ReplacementFor_c[(0xadc+5234-0x1f4d)]
<operator>.indirectIndexAccess ReplacementFor_ix[\012ReplacementFor_d[(0xb4b+4815-0x1e1a)]]
<operator>.indirectIndexAccess ReplacementFor_d[\012(0x128d+1588-0x18c0)]
<operator>.indirectIndexAccess ReplacementFor_c[\012(0x135a+2733-0x1e07)]
<operator>.indirectIndexAccess ReplacementFor_d[(0xb4b+4815-0x1e1a)]
<operator>.indirectIndexAccess s[ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_r[ReplacementFor_nR\012-(0x6cf+7138-0x22b0)]
UNKNOWN char char
<operator>.indirectIndexAccess clear[ReplacementFor_ix[s[ReplacementFor_j]]]
<operator>.indirectIndexAccess ReplacementFor_ix[s[ReplacementFor_j]]
<operator>.indirectIndexAccess ReplacementFor_r[ReplacementFor_nR-\012(0xb60+6413-0x246c)]
<operator>.indirectIndexAccess ReplacementFor_r[ReplacementFor_nR-(0x11e2+4979-0x2554)]
<operator>.indirectIndexAccess s[ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_r[ReplacementFor_nR++]
<operator>.indirectIndexAccess s[ReplacementFor_j]
<operator>.indirectIndexAccess s[ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_r[\012(0x10b0+1621-0x1705)]
<operator>.indirectIndexAccess s[ReplacementFor_j+(0xa65+7185-0x2675)]
<operator>.indirectIndexAccess ReplacementFor_r\012[(0xec9+2663-0x1930)]
>>>PDG&175 0->2 0->3 0->4 0->6 0->7 0->8 0->9 0->10 0->11 0->12 0->16 0->18 0->19 0->20 0->21 0->22 0->23 0->24 0->25 0->26 0->27 0->28 0->30 0->31 0->32 0->34 0->35 0->36 0->38 0->41 0->43 0->44 0->45 0->46 0->47 0->48 0->49 0->50 0->51 0->55 0->56 0->57 0->58 0->59 0->60 0->61 0->62 0->63 0->64 0->65 0->66 0->67 0->68 0->69 0->70 0->71 0->72 0->73 0->74 0->77 0->78 0->79 0->80 0->81 0->82 0->83 0->84 0->85 0->86 0->87 0->88 0->89 0->90 0->91 0->93 0->94 0->95 0->96 0->97 0->98 0->101 0->102 0->103 0->104 0->105 0->106 0->107 0->108 0->109 0->112 0->115 0->117 0->118 0->119 0->121 0->122 0->123 0->124 0->125 0->126 0->127 0->128 0->129 0->130 0->131 0->132 0->133 0->134 0->135 0->136 0->137 0->138 2->1 3->1 4->1 4->10 5->1 6->1 6->1 6->6 6->7 6->7 6->14 6->23 6->32 6->33 6->47 6->58 6->139 7->1 7->6 8->1 8->1 8->8 8->9 8->9 8->16 8->16 8->24 8->35 8->140 8->144 9->1 9->8 10->1 10->1 10->1 10->10 10->11 10->11 10->18 10->19 10->20 10->21 10->22 10->25 10->27 10->29 10->37 10->40 10->43 10->50 10->55 10->59 10->60 10->62 10->64 10->67 10->69 10->71 10->77 10->141 10->142 10->143 11->1 11->10 12->1 12->1 12->5 13->1 13->1 13->6 14->1 14->1 14->1 15->1 15->1 15->8 16->1 16->1 17->1 17->1 17->10 18->1 19->1 19->25 19->50 20->1 20->27 20->51 21->1 21->44 21->65 21->119 22->1 22->44 22->53 22->54 22->92 22->110 22->111 22->113 23->1 23->6 23->6 24->1 24->8 24->8 25->1 25->25 25->26 25->26 25->38 25->39 25->50 25->68 25->78 25->86 25->94 25->95 25->102 25->145 25->146 25->148 25->149 25->155 25->156 25->159 26->1 26->25 27->1 27->1 27->1 27->20 27->27 27->28 27->28 27->41 27->42 27->51 27->61 27->70 27->87 27->96 27->97 27->103 27->147 27->150 27->151 27->157 27->158 27->160 28->1 28->27 29->1 29->1 29->1 29->43 29->44 29->45 29->52 29->53 29->54 29->55 29->56 29->57 29->64 29->65 29->73 29->74 29->75 29->77 29->79 29->80 29->81 29->82 29->83 29->85 29->88 29->89 29->90 29->91 29->93 29->98 29->152 29->153 29->154 31->1 31->13 31->13 33->1 33->14 34->1 34->15 34->15 36->1 36->17 36->17 37->1 37->1 37->25 38->1 38->39 39->1 39->1 39->1 40->1 40->1 40->27 41->1 42->1 42->1 42->1 43->1 43->1 44->1 44->1 44->1 44->21 44->22 44->65 45->1 47->1 47->33 47->33 50->1 50->1 50->19 50->25 50->29 50->29 50->51 50->63 50->72 51->1 51->1 51->20 51->27 51->29 51->29 52->1 52->1 52->56 52->104 53->1 53->1 53->1 53->56 54->1 54->1 54->22 54->44 55->1 55->1 56->1 56->1 56->1 56->92 56->100 56->116 57->1 59->1 59->37 59->37 60->1 60->40 60->40 61->1 61->42 61->42 62->1 62->50 62->50 63->1 63->51 63->51 64->1 65->1 65->1 65->1 65->21 65->44 65->65 65->66 65->66 65->76 65->84 65->92 65->99 65->104 65->105 65->107 65->108 65->109 65->112 65->119 65->161 65->162 65->163 66->1 66->65 68->1 73->1 73->43 73->43 73->64 73->64 74->1 74->52 74->52 75->1 75->1 75->65 76->1 76->1 76->84 77->1 81->1 82->1 83->1 84->1 84->1 84->1 84->100 84->101 84->101 84->117 84->118 84->121 84->122 84->126 84->127 84->164 84->165 84->166 84->167 84->168 85->1 85->55 85->55 85->77 85->77 86->1 87->1 91->1 91->75 91->75 92->1 92->1 92->22 92->44 92->56 92->76 92->76 92->110 92->111 94->1 96->1 99->1 100->1 100->1 100->56 101->1 101->1 101->1 101->56 104->1 104->117 104->125 105->1 105->84 105->84 105->99 105->99 106->1 107->1 107->104 107->104 109->1 109->1 109->66 109->113 109->114 109->115 109->115 109->116 109->120 109->124 109->129 109->130 109->130 109->131 109->132 109->133 109->134 109->135 109->136 109->137 109->138 109->172 109->173 109->174 110->1 110->1 110->56 111->1 111->1 111->22 111->44 111->92 113->1 113->1 113->1 113->56 114->1 114->1 114->56 114->104 115->66 116->1 116->1 116->56 117->1 117->118 118->1 118->56 118->104 119->1 119->65 119->109 119->109 120->1 120->1 120->56 120->104 121->1 121->117 121->117 122->1 122->118 122->118 123->1 123->119 123->119 124->1 124->114 124->114 125->56 125->104 129->1 130->1 132->1 133->1 133->120 133->120 135->1 135->130 135->130 164->106 164->109 164->110 164->111 164->119 164->123 164->125 164->128 164->169 164->170 164->171
>>>Token int main ( int ReplacementFor_argc , char * * ReplacementFor_argv ) { int i , ReplacementFor_j , ReplacementFor_k ; for ( i = ( 0x63b + 2780 - 0x1117 ) ; i < ( 0x2195 + 412 - 0x22d9 ) ; i ++ ) { ReplacementFor_ix [ i ] = - ( 0x7d4 + 5205 - 0x1c28 ) ; } for ( i = ( 0xa7 + 8089 - 0x2040 ) ; i < ( 0xf98 + 6003 - 0x2703 ) ; i ++ ) { ReplacementFor_ix [ ReplacementFor_basic [ i ] ] = i ; } scanf ( " \x25 \x64 " " \n " , & T ) ; for ( i = ( 0x14ba + 4070 - 0x24a0 ) ; i < T ; i ++ ) { ReplacementFor_clearAll ( ) ; scanf ( " \x25 \x64 \x20 " , & ReplacementFor_C ) ; char ReplacementFor_c [ ( 0x1900 + 2754 - 0x23bf ) ] ; for ( ReplacementFor_j = ( 0x1c88 + 588 - 0x1ed4 ) ; ReplacementFor_j < ReplacementFor_C ; ReplacementFor_j ++ ) { scanf ( " \x25 \x73 \x20 " , ReplacementFor_c ) ; ReplacementFor_comb [ ReplacementFor_ix [ ReplacementFor_c [ ( 0x135a + 2733 - 0x1e07 ) ] ] ] [ ReplacementFor_ix [ ReplacementFor_c [ ( 0xadc + 5234 - 0x1f4d ) ] ] ] = ReplacementFor_c [ ( 0x1ba6 + 891 - 0x1f1f ) ] ; } scanf ( " \x25 \x64 \x20 " , & ReplacementFor_D ) ; char ReplacementFor_d [ ( 0x518 + 2020 - 0xcfa ) ] ; for ( ReplacementFor_j = ( 0x2fc + 7609 - 0x20b5 ) ; ReplacementFor_j < ReplacementFor_D ; ReplacementFor_j ++ ) { scanf ( " \x25 \x73 \x20 " , ReplacementFor_d ) ; ReplacementFor_opp [ ReplacementFor_ix [ ReplacementFor_d [ ( 0xb4b + 4815 - 0x1e1a ) ] ] ] [ ReplacementFor_ix [ ReplacementFor_d [ ( 0x128d + 1588 - 0x18c0 ) ] ] ] = ( 0x10ff + 2340 - 0x1a22 ) ; } scanf ( " \x25 \x64 \x20 " , & ReplacementFor_N ) ; char s [ ReplacementFor_N ] ; scanf ( " \x25 \x73 " , s ) ; if ( ReplacementFor_C == ( 0x7cc + 2931 - 0x133f ) && ReplacementFor_D == ( 0x6a0 + 826 - 0x9da ) ) { printf ( " \x43 \x61 \x73 \x65 \x20 \x23 \x25 \x64 \x3a \x20 " , i + ( 0x2a4 + 8543 - 0x2402 ) ) ; ReplacementFor_printAsVector ( s , ReplacementFor_N ) ; printf ( " \n " ) ; } else { char ReplacementFor_noBasic ; char ReplacementFor_r [ ReplacementFor_N + ( 0x13fd + 3193 - 0x2075 ) ] ; int ReplacementFor_nR = ( 0x3c1 + 5298 - 0x1872 ) ; ReplacementFor_r [ ( 0x1dc0 + 1315 - 0x22e3 ) ] = s [ ( 0x1051 + 2456 - 0x19e9 ) ] ; ReplacementFor_addOpposite ( s [ ( 0x809 + 681 - 0xab2 ) ] ) ; for ( ReplacementFor_j = ( 0x509 + 4404 - 0x163c ) ; ReplacementFor_j < ReplacementFor_N ; ReplacementFor_j ++ ) { ReplacementFor_noBasic = ReplacementFor_getReplace ( s [ ReplacementFor_j ] , ReplacementFor_r [ ReplacementFor_nR - ( 0x6cf + 7138 - 0x22b0 ) ] ) ; if ( ReplacementFor_noBasic == ( ( char ) ( 0x4df + 1733 - 0xb77 ) ) ) { if ( clear [ ReplacementFor_ix [ s [ ReplacementFor_j ] ] ] ) { ReplacementFor_resetOpposite ( ) ; if ( ReplacementFor_j < ReplacementFor_N - ( 0xf3f + 463 - 0x110d ) ) { ReplacementFor_r [ ( 0x10b0 + 1621 - 0x1705 ) ] = s [ ReplacementFor_j + ( 0xa65 + 7185 - 0x2675 ) ] ; ReplacementFor_nR = ( 0x9d3 + 982 - 0xda8 ) ; ReplacementFor_j ++ ; ReplacementFor_addOpposite ( ReplacementFor_r [ ( 0xec9 + 2663 - 0x1930 ) ] ) ; } else { ReplacementFor_nR = ( 0x84 + 4260 - 0x1128 ) ; } } else { ReplacementFor_r [ ReplacementFor_nR ++ ] = s [ ReplacementFor_j ] ; ReplacementFor_addOpposite ( s [ ReplacementFor_j ] ) ; } } else { ReplacementFor_removeOpposite ( ReplacementFor_r [ ReplacementFor_nR - ( 0xb60 + 6413 - 0x246c ) ] ) ; ReplacementFor_r [ ReplacementFor_nR - ( 0x11e2 + 4979 - 0x2554 ) ] = ReplacementFor_noBasic ; } } printf ( " \x43 \x61 \x73 \x65 \x20 \x23 \x25 \x64 \x3a \x20 " , i + ( 0x14c6 + 1882 - 0x1c1f ) ) ; ReplacementFor_printAsVector ( ReplacementFor_r , ReplacementFor_nR ) ; printf ( " \n " ) ; } } return ( 0x1133 + 1236 - 0x1607 ) ; }
>>>Func
METHOD main
METHOD_RETURN int
scanf scanf("\x25\x64",&T)
RETURN return\012(0x8fc+4793-0x1bb5); return\012(0x8fc+4793-0x1bb5);
<operator>.lessEqualsThan ReplacementFor_tcase<=T
<operator>.postIncrement ReplacementFor_tcase++
<operator>.subtraction 0x8fc+4793-0x1bb5
<operator>.assignment ReplacementFor_tcase=(0xfc5+1295-0x14d3)
scanf scanf("\x25\x64",&ReplacementFor_C)
scanf scanf("\x25\x64",&ReplacementFor_D)
scanf scanf("\x25\x64",&ReplacementFor_N)
scanf scanf("\x25\x73" base+\012(0xed6+4305-0x1fa6))
<operator>.assignment base[(0x1df+4441-0x1338)]=(0x1187+3629-0x1fb3)
<operator>.assignment i=\012(0x13a+6438-0x1a60)
printf printf(\012"\x43\x61\x73\x65\x20\x23\x25\x64\x3a\x20\x5b",ReplacementFor_tcase)
printf printf("\x5d" "\n")
<operator>.lessThan i<(0xfcb+3379-0x1ce4)
<operator>.postIncrement i++
<operator>.lessThan i<\012ReplacementFor_C
<operator>.postIncrement i++
<operator>.lessThan i<ReplacementFor_D
<operator>.postIncrement i++
<operator>.lessEqualsThan i<=ReplacementFor_N
<operator>.postIncrement i++
<operator>.assignmentMinus base[i]-=\012((char)(0x1246+4044-0x21d1))
<operator>.lessEqualsThan ReplacementFor_j<=\012ReplacementFor_N
<operator>.postIncrement ReplacementFor_j++
<operator>.greaterThan i>\012(0x4c8+7099-0x2083)
<operator>.lessEqualsThan ReplacementFor_j<=i
<operator>.postIncrement ReplacementFor_j++
printf printf("\x2c\x20\x25\x63" base[\012ReplacementFor_j]+((char)(0x476+8593-0x25c6)))
<operator>.addition 0x8fc+4793
<operator>.subtraction 0xfc5+1295-0x14d3
<operator>.assignment i=\012(0x15e5+1998-0x1db3)
<operator>.lessThan ReplacementFor_j<(0x1265+1046-0x1661)
<operator>.postIncrement ReplacementFor_j++
<operator>.assignment i=(0x576+126-0x5f4)
scanf scanf("\x25\x73",ReplacementFor_word)
<operator>.assignment ReplacementFor_combs\012[ReplacementFor_word[(0x52a+408-0x6c2)]-((char)(0x1e13+1825-0x24f3))][\012ReplacementFor_word[(0x1245+329-0x138d)]-((char)(0x1ca9+206-0x1d36))]=\012ReplacementFor_word[(0x1d6c+18-0x1d7c)]-((char)(0x1aac+134-0x1af1))
<operator>.assignment ReplacementFor_combs[ReplacementFor_word[(0x23b+515-0x43d)]-\012((char)(0x19c+5954-0x189d))][ReplacementFor_word[(0xc76+4405-0x1dab)]-\012((char)(0x106d+3095-0x1c43))]=ReplacementFor_word[(0x105b+3844-0x1f5d)]-\012((char)(0x2632+283-0x270c))
<operator>.assignment i=\012(0x83+8150-0x2059)
scanf scanf("\x25\x73",ReplacementFor_word)
<operator>.assignment ReplacementFor_opps[ReplacementFor_word[(0xe1b+5317-0x22e0)]-\012((char)(0x10c4+1847-0x17ba))][ReplacementFor_word[(0x3fa+1695-0xa98)]-\012((char)(0x703+572-0x8fe))]=(0x697+1891-0xdf9)
<operator>.assignment ReplacementFor_opps[\012ReplacementFor_word[(0x302+4222-0x137f)]-((char)(0x2438+446-0x25b5))][\012ReplacementFor_word[(0x1d80+1012-0x2174)]-((char)(0x1270+862-0x158d))]=\012(0x1b91+2265-0x2469)
<operator>.addition base+\012(0xed6+4305-0x1fa6)
<operator>.assignment i=(0x91b+4040-0x18e2)
<operator>.subtraction 0x1187+3629-0x1fb3
<operator>.subtraction 0x13a+6438-0x1a60
<operator>.assignment ReplacementFor_j=(0xc77+2931-0x17e9)
<operator>.assignment ReplacementFor_c=ReplacementFor_combs[base[\012ReplacementFor_j]][base[i]]
printf printf("\x25\x63" base[(0x5a4+2353-0xed4)]+\012((char)(0x843+2837-0x1317)))
<operator>.assignment ReplacementFor_j=(0x14f9+877-0x1864)
<operator>.addition 0xfc5+1295
<operator>.subtraction 0xfcb+3379-0x1ce4
<operator>.assignment ReplacementFor_j=\012(0xdfc+2706-0x188e)
<operator>.assignment ReplacementFor_combs[i][ReplacementFor_j]=-(0x2b0+995-0x692)
<operator>.assignment ReplacementFor_opps\012[i][ReplacementFor_j]=(0x789+6654-0x2187)
<operator>.subtraction 0xed6+4305-0x1fa6
<operator>.cast (char)(0x1246+4044-0x21d1)
<operator>.subtraction 0x1df+4441-0x1338
<operator>.addition 0x1187+3629
<operator>.addition 0x13a+6438
<operator>.greaterEqualsThan ReplacementFor_c>=(0x233+4418-0x1375)
<operator>.subtraction 0x4c8+7099-0x2083
<operator>.addition base[\012ReplacementFor_j]+((char)(0x476+8593-0x25c6))
<operator>.subtraction 0x15e5+1998-0x1db3
<operator>.addition 0xfcb+3379
<operator>.subtraction 0x1265+1046-0x1661
<operator>.subtraction 0x576+126-0x5f4
<operator>.subtraction ReplacementFor_word[(0x1d6c+18-0x1d7c)]-((char)(0x1aac+134-0x1af1))
<operator>.subtraction ReplacementFor_word[(0x105b+3844-0x1f5d)]-\012((char)(0x2632+283-0x270c))
<operator>.subtraction 0x83+8150-0x2059
<operator>.subtraction 0x697+1891-0xdf9
<operator>.subtraction 0x1b91+2265-0x2469
<operator>.addition 0xed6+4305
<operator>.subtraction 0x91b+4040-0x18e2
<operator>.subtraction 0x1246+4044-0x21d1
<operator>.addition 0x1df+4441
<operator>.subtraction 0xc77+2931-0x17e9
<operator>.assignment base[i]=\012ReplacementFor_c
<operator>.addition 0x4c8+7099
<operator>.addition base[(0x5a4+2353-0xed4)]+\012((char)(0x843+2837-0x1317))
<operator>.subtraction 0x14f9+877-0x1864
<operator>.cast (char)(0x476+8593-0x25c6)
<operator>.addition 0x15e5+1998
<operator>.subtraction 0xdfc+2706-0x188e
<operator>.addition 0x1265+1046
<operator>.minus -(0x2b0+995-0x692)
<operator>.subtraction 0x789+6654-0x2187
<operator>.addition 0x576+126
<operator>.subtraction ReplacementFor_word[(0x1245+329-0x138d)]-((char)(0x1ca9+206-0x1d36))
<operator>.cast (char)(0x1aac+134-0x1af1)
<operator>.subtraction ReplacementFor_word[(0xc76+4405-0x1dab)]-\012((char)(0x106d+3095-0x1c43))
<operator>.cast (char)(0x2632+283-0x270c)
<operator>.addition 0x83+8150
<operator>.subtraction ReplacementFor_word[(0x3fa+1695-0xa98)]-\012((char)(0x703+572-0x8fe))
<operator>.addition 0x697+1891
<operator>.subtraction ReplacementFor_word[(0x1d80+1012-0x2174)]-((char)(0x1270+862-0x158d))
<operator>.addition 0x1b91+2265
<operator>.addition 0x91b+4040
<operator>.addition 0x1246+4044
<operator>.addition 0xc77+2931
<operator>.subtraction 0x233+4418-0x1375
<operator>.assignment ReplacementFor_oppflag=(0x11f0+5369-0x26e9)
<operator>.cast (char)(0x843+2837-0x1317)
<operator>.addition 0x14f9+877
<operator>.subtraction 0x476+8593-0x25c6
<operator>.addition 0xdfc+2706
<operator>.subtraction 0x2b0+995-0x692
<operator>.addition 0x789+6654
<operator>.subtraction ReplacementFor_word[(0x52a+408-0x6c2)]-((char)(0x1e13+1825-0x24f3))
<operator>.cast (char)(0x1ca9+206-0x1d36)
<operator>.subtraction 0x1d6c+18-0x1d7c
<operator>.subtraction 0x1aac+134-0x1af1
<operator>.subtraction ReplacementFor_word[(0x23b+515-0x43d)]-\012((char)(0x19c+5954-0x189d))
<operator>.cast (char)(0x106d+3095-0x1c43)
<operator>.subtraction 0x105b+3844-0x1f5d
<operator>.subtraction 0x2632+283-0x270c
<operator>.subtraction ReplacementFor_word[(0xe1b+5317-0x22e0)]-\012((char)(0x10c4+1847-0x17ba))
<operator>.cast (char)(0x703+572-0x8fe)
<operator>.subtraction ReplacementFor_word[(0x302+4222-0x137f)]-((char)(0x2438+446-0x25b5))
<operator>.cast (char)(0x1270+862-0x158d)
<operator>.addition 0x233+4418
<operator>.lessEqualsThan ReplacementFor_k<=i
<operator>.postIncrement ReplacementFor_k++
IDENTIFIER ReplacementFor_oppflag if (ReplacementFor_oppflag)
<operator>.subtraction 0x5a4+2353-0xed4
<operator>.subtraction 0x843+2837-0x1317
<operator>.addition 0x476+8593
<operator>.addition 0x2b0+995
<operator>.cast (char)(0x1e13+1825-0x24f3)
<operator>.subtraction 0x1245+329-0x138d
<operator>.subtraction 0x1ca9+206-0x1d36
<operator>.addition 0x1d6c+18
<operator>.addition 0x1aac+134
<operator>.cast (char)(0x19c+5954-0x189d)
<operator>.subtraction 0xc76+4405-0x1dab
<operator>.subtraction 0x106d+3095-0x1c43
<operator>.addition 0x105b+3844
<operator>.addition 0x2632+283
<operator>.cast (char)(0x10c4+1847-0x17ba)
<operator>.subtraction 0x3fa+1695-0xa98
<operator>.subtraction 0x703+572-0x8fe
<operator>.cast (char)(0x2438+446-0x25b5)
<operator>.subtraction 0x1d80+1012-0x2174
<operator>.subtraction 0x1270+862-0x158d
<operator>.subtraction 0x11f0+5369-0x26e9
<operator>.assignment ReplacementFor_k=(0xce1+2553-0x16da)
<operator>.assignment i=\012(0x1c84+25-0x1c9d)
<operator>.addition 0x5a4+2353
<operator>.addition 0x843+2837
<operator>.subtraction 0x52a+408-0x6c2
<operator>.subtraction 0x1e13+1825-0x24f3
<operator>.addition 0x1245+329
<operator>.addition 0x1ca9+206
<operator>.subtraction 0x23b+515-0x43d
<operator>.subtraction 0x19c+5954-0x189d
<operator>.addition 0xc76+4405
<operator>.addition 0x106d+3095
<operator>.subtraction 0xe1b+5317-0x22e0
<operator>.subtraction 0x10c4+1847-0x17ba
<operator>.addition 0x3fa+1695
<operator>.addition 0x703+572
<operator>.subtraction 0x302+4222-0x137f
<operator>.subtraction 0x2438+446-0x25b5
<operator>.addition 0x1d80+1012
<operator>.addition 0x1270+862
<operator>.addition 0x11f0+5369
<operator>.assignment ReplacementFor_oppflag=(0x857+7208-0x247e)
<operator>.assignment base[++i]=base[ReplacementFor_j]
<operator>.addition 0x52a+408
<operator>.addition 0x1e13+1825
<operator>.addition 0x23b+515
<operator>.addition 0x19c+5954
<operator>.addition 0xe1b+5317
<operator>.addition 0x10c4+1847
<operator>.addition 0x302+4222
<operator>.addition 0x2438+446
<operator>.subtraction 0xce1+2553-0x16da
<operator>.subtraction 0x1c84+25-0x1c9d
<operator>.addition 0xce1+2553
<operator>.subtraction 0x857+7208-0x247e
<operator>.addition 0x1c84+25
<operator>.addition 0x857+7208
<operator>.preIncrement ++i
<operator>.addressOf &ReplacementFor_C
<operator>.addressOf &ReplacementFor_D
<operator>.addressOf &ReplacementFor_N
<operator>.indirectIndexAccess base[(0x1df+4441-0x1338)]
<operator>.indirectIndexAccess base[i]
<operator>.indirectIndexAccess ReplacementFor_combs\012[ReplacementFor_word[(0x52a+408-0x6c2)]-((char)(0x1e13+1825-0x24f3))][\012ReplacementFor_word[(0x1245+329-0x138d)]-((char)(0x1ca9+206-0x1d36))]
<operator>.indirectIndexAccess ReplacementFor_combs[ReplacementFor_word[(0x23b+515-0x43d)]-\012((char)(0x19c+5954-0x189d))][ReplacementFor_word[(0xc76+4405-0x1dab)]-\012((char)(0x106d+3095-0x1c43))]
<operator>.indirectIndexAccess ReplacementFor_opps[ReplacementFor_word[(0xe1b+5317-0x22e0)]-\012((char)(0x10c4+1847-0x17ba))][ReplacementFor_word[(0x3fa+1695-0xa98)]-\012((char)(0x703+572-0x8fe))]
<operator>.indirectIndexAccess ReplacementFor_opps[\012ReplacementFor_word[(0x302+4222-0x137f)]-((char)(0x2438+446-0x25b5))][\012ReplacementFor_word[(0x1d80+1012-0x2174)]-((char)(0x1270+862-0x158d))]
UNKNOWN char char
<operator>.indirectIndexAccess ReplacementFor_combs[base[\012ReplacementFor_j]][base[i]]
<operator>.indirectIndexAccess base[\012ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_combs[i][ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_opps\012[i][ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_combs\012[ReplacementFor_word[(0x52a+408-0x6c2)]-((char)(0x1e13+1825-0x24f3))]
<operator>.indirectIndexAccess ReplacementFor_word[(0x1d6c+18-0x1d7c)]
<operator>.indirectIndexAccess ReplacementFor_combs[ReplacementFor_word[(0x23b+515-0x43d)]-\012((char)(0x19c+5954-0x189d))]
<operator>.indirectIndexAccess ReplacementFor_word[(0x105b+3844-0x1f5d)]
<operator>.indirectIndexAccess ReplacementFor_opps[ReplacementFor_word[(0xe1b+5317-0x22e0)]-\012((char)(0x10c4+1847-0x17ba))]
<operator>.indirectIndexAccess ReplacementFor_opps[\012ReplacementFor_word[(0x302+4222-0x137f)]-((char)(0x2438+446-0x25b5))]
<operator>.indirectIndexAccess ReplacementFor_combs[base[\012ReplacementFor_j]]
<operator>.indirectIndexAccess base[i]
<operator>.indirectIndexAccess base[(0x5a4+2353-0xed4)]
UNKNOWN char char
<operator>.indirectIndexAccess ReplacementFor_combs[i]
<operator>.indirectIndexAccess ReplacementFor_opps\012[i]
<operator>.indirectIndexAccess ReplacementFor_word[(0x1245+329-0x138d)]
UNKNOWN char char
<operator>.indirectIndexAccess ReplacementFor_word[(0xc76+4405-0x1dab)]
UNKNOWN char char
<operator>.indirectIndexAccess ReplacementFor_word[(0x3fa+1695-0xa98)]
<operator>.indirectIndexAccess ReplacementFor_word[(0x1d80+1012-0x2174)]
<operator>.indirectIndexAccess base[\012ReplacementFor_j]
<operator>.indirectIndexAccess base[i]
UNKNOWN char char
<operator>.indirectIndexAccess ReplacementFor_word[(0x52a+408-0x6c2)]
UNKNOWN char char
<operator>.indirectIndexAccess ReplacementFor_word[(0x23b+515-0x43d)]
UNKNOWN char char
<operator>.indirectIndexAccess ReplacementFor_word[(0xe1b+5317-0x22e0)]
UNKNOWN char char
<operator>.indirectIndexAccess ReplacementFor_word[(0x302+4222-0x137f)]
UNKNOWN char char
UNKNOWN char char
UNKNOWN char char
UNKNOWN char char
UNKNOWN char char
<operator>.indirectIndexAccess ReplacementFor_opps[base[ReplacementFor_k]][base[ReplacementFor_j]]
<operator>.indirectIndexAccess ReplacementFor_opps[base[ReplacementFor_k]]
<operator>.indirectIndexAccess base[ReplacementFor_j]
<operator>.indirectIndexAccess base[ReplacementFor_k]
<operator>.indirectIndexAccess base[++i]
<operator>.indirectIndexAccess base[ReplacementFor_j]
>>>PDG&238 0->2 0->4 0->5 0->6 0->8 0->9 0->10 0->11 0->14 0->15 0->16 0->17 0->18 0->19 0->20 0->21 0->22 0->23 0->24 0->25 0->26 0->27 0->28 0->29 0->30 0->31 0->32 0->34 0->35 0->37 0->41 0->44 0->46 0->47 0->50 0->52 0->53 0->57 0->59 0->60 0->61 0->62 0->63 0->65 0->66 0->67 0->68 0->71 0->72 0->73 0->74 0->75 0->76 0->77 0->78 0->79 0->80 0->82 0->84 0->85 0->86 0->88 0->89 0->94 0->96 0->98 0->99 0->100 0->101 0->102 0->105 0->106 0->107 0->108 0->109 0->112 0->113 0->116 0->117 0->122 0->123 0->124 0->125 0->126 0->127 0->128 0->129 0->131 0->132 0->133 0->134 0->136 0->137 0->138 0->139 0->141 0->142 0->144 0->145 0->146 0->149 0->150 0->151 0->152 0->153 0->154 0->155 0->156 0->157 0->158 0->159 0->160 0->161 0->162 0->163 0->164 0->165 0->166 0->167 0->170 0->171 0->172 0->173 0->174 0->175 0->176 0->177 0->178 0->179 0->180 0->181 0->182 0->183 0->184 2->1 2->4 3->1 4->1 4->1 4->1 4->4 4->5 4->8 4->9 4->10 4->11 4->12 4->13 4->14 4->14 4->15 4->16 4->18 4->20 4->22 4->25 4->27 4->28 4->33 4->36 4->40 4->44 4->45 4->46 4->47 4->48 4->51 4->53 4->57 4->59 4->60 4->61 4->63 4->65 4->66 4->68 4->71 4->74 4->75 4->77 4->78 4->80 4->82 4->84 4->89 4->94 4->99 4->101 4->105 4->185 4->186 4->187 4->188 5->1 5->4 6->1 6->1 6->3 7->1 7->1 7->4 8->1 8->18 9->1 9->20 10->1 10->22 10->25 11->1 12->1 12->1 12->1 12->11 12->24 12->44 13->1 13->1 13->27 13->123 14->1 14->5 15->1 16->1 16->1 16->16 16->17 16->17 16->34 16->53 16->54 16->66 16->67 16->85 16->86 16->107 17->1 17->16 18->1 18->1 18->8 18->18 18->19 18->19 18->37 18->38 18->39 18->69 18->70 18->90 18->91 18->92 18->93 18->110 18->111 18->112 18->113 18->114 18->115 18->116 18->117 18->130 18->131 18->132 18->133 18->134 18->135 18->136 18->137 18->138 18->139 18->151 18->152 18->153 18->154 18->155 18->156 18->157 18->158 18->170 18->171 18->172 18->173 18->190 18->191 18->199 18->200 18->201 18->202 18->211 18->212 18->213 18->214 18->220 18->221 18->222 18->223 18->228 18->229 19->1 19->18 20->1 20->1 20->9 20->20 20->21 20->21 20->41 20->42 20->43 20->72 20->73 20->95 20->96 20->97 20->98 20->118 20->119 20->120 20->121 20->140 20->141 20->142 20->143 20->144 20->145 20->159 20->160 20->161 20->162 20->163 20->164 20->165 20->166 20->174 20->175 20->176 20->177 20->192 20->193 20->203 20->204 20->215 20->216 20->224 20->225 20->226 20->227 20->230 20->231 21->1 21->20 22->1 22->22 22->23 22->23 22->24 22->25 22->58 22->76 22->100 22->189 22->194 23->1 23->22 24->1 24->1 24->1 24->11 24->44 25->1 25->1 25->10 25->22 25->25 25->26 25->26 25->49 25->62 25->102 25->122 25->195 25->205 25->206 25->217 26->1 26->25 27->1 27->1 27->28 27->50 27->81 27->104 27->126 27->127 27->149 27->150 27->207 27->219 28->1 28->1 28->1 28->28 28->29 28->29 28->30 28->64 28->83 28->106 28->128 28->196 28->208 29->1 29->28 30->1 30->1 32->1 32->7 32->7 33->1 33->1 33->16 34->1 34->1 34->34 34->35 34->35 34->55 34->56 34->67 34->86 34->87 34->88 34->108 34->109 34->129 34->197 34->198 34->209 34->210 35->1 35->34 36->1 36->1 36->18 37->1 37->41 37->69 37->70 37->90 37->92 37->110 37->114 38->1 38->1 38->1 39->1 39->1 39->1 40->1 40->1 40->20 41->1 41->37 41->95 41->97 41->118 41->120 42->1 42->1 42->1 43->1 43->1 43->1 44->1 44->1 45->1 45->1 45->22 46->1 46->12 46->12 47->1 47->13 47->13 48->1 48->1 48->25 49->1 49->1 49->62 50->1 50->1 51->1 51->1 51->28 53->1 53->16 53->16 54->1 54->1 54->34 55->1 55->1 55->1 56->1 56->1 56->1 57->1 57->11 57->11 57->44 57->44 58->1 59->1 62->1 62->1 62->1 62->79 62->79 62->103 62->123 62->146 62->147 62->148 62->167 62->169 62->178 62->179 62->180 62->182 62->184 62->218 62->236 62->237 63->1 63->27 63->27 64->1 64->1 65->1 65->33 65->33 67->1 67->34 67->34 68->1 68->36 68->36 69->1 69->1 69->37 69->38 69->38 69->41 70->1 70->1 70->37 70->39 70->39 70->41 71->1 71->40 71->40 72->1 72->42 72->42 73->1 73->43 73->43 75->1 75->45 75->45 76->1 76->24 76->24 76->58 76->58 78->1 78->48 78->48 79->1 79->1 79->1 79->11 79->24 79->44 81->1 81->1 82->1 82->51 82->51 83->1 85->1 85->54 85->54 87->1 87->55 88->1 88->56 88->56 90->1 90->1 90->37 90->41 91->1 92->1 92->1 92->37 92->41 93->1 95->1 95->1 95->37 95->41 97->1 97->1 97->37 97->41 102->1 102->62 102->62 103->1 103->1 103->1 104->1 106->1 106->30 106->30 106->64 106->64 106->83 106->83 108->1 108->87 108->87 110->1 110->1 110->37 110->41 111->1 112->1 113->1 113->69 113->69 113->91 113->91 114->1 114->1 114->37 114->41 115->1 116->1 117->1 117->70 117->70 117->93 117->93 118->1 118->1 118->37 118->41 119->1 120->1 120->1 120->37 120->41 121->1 123->1 123->1 123->124 123->184 123->232 123->233 123->234 123->235 124->1 124->123 126->1 127->1 127->50 127->50 127->81 127->81 127->104 127->104 130->1 131->1 132->1 132->90 132->90 132->111 132->111 135->1 136->1 137->1 137->92 137->92 137->115 137->115 140->1 141->1 142->1 142->95 142->95 142->119 142->119 143->1 144->1 145->1 145->97 145->97 145->121 145->121 146->1 146->103 146->103 147->1 147->1 147->123 148->1 148->1 148->27 148->123 151->1 152->1 152->110 152->110 152->130 152->130 155->1 156->1 156->114 156->114 156->135 156->135 159->1 160->1 160->118 160->118 160->140 160->140 163->1 164->1 164->120 164->120 164->143 164->143 168->1 168->1 168->1 169->1 169->1 169->1 169->11 169->24 169->44 178->1 178->147 178->147 179->1 179->148 179->148 181->1 181->168 181->168 184->27 184->123 232->123 232->124 232->168 232->181 232->183
>>>Token int main ( ) { int i , ReplacementFor_j , ReplacementFor_k , ReplacementFor_tcase , T , ReplacementFor_C , ReplacementFor_D , ReplacementFor_N ; char ReplacementFor_word [ ( 0x1842 + 2610 - 0x226a ) ] ; char ReplacementFor_combs [ ( 0x58b + 5022 - 0x190f ) ] [ ( 0x4d8 + 5374 - 0x19bc ) ] ; char ReplacementFor_opps [ ( 0xec3 + 168 - 0xf51 ) ] [ ( 0xf8a + 4346 - 0x206a ) ] ; char base [ ReplacementFor_MAXN + ( 0xbe2 + 925 - 0xf7d ) ] ; char ReplacementFor_c , ReplacementFor_oppflag ; scanf ( " \x25 \x64 " , & T ) ; for ( ReplacementFor_tcase = ( 0xfc5 + 1295 - 0x14d3 ) ; ReplacementFor_tcase <= T ; ReplacementFor_tcase ++ ) { scanf ( " \x25 \x64 " , & ReplacementFor_C ) ; for ( i = ( 0x15e5 + 1998 - 0x1db3 ) ; i < ( 0xfcb + 3379 - 0x1ce4 ) ; i ++ ) for ( ReplacementFor_j = ( 0xdfc + 2706 - 0x188e ) ; ReplacementFor_j < ( 0x1265 + 1046 - 0x1661 ) ; ReplacementFor_j ++ ) { ReplacementFor_combs [ i ] [ ReplacementFor_j ] = - ( 0x2b0 + 995 - 0x692 ) ; ReplacementFor_opps [ i ] [ ReplacementFor_j ] = ( 0x789 + 6654 - 0x2187 ) ; } for ( i = ( 0x576 + 126 - 0x5f4 ) ; i < ReplacementFor_C ; i ++ ) { scanf ( " \x25 \x73 " , ReplacementFor_word ) ; ReplacementFor_combs [ ReplacementFor_word [ ( 0x52a + 408 - 0x6c2 ) ] - ( ( char ) ( 0x1e13 + 1825 - 0x24f3 ) ) ] [ ReplacementFor_word [ ( 0x1245 + 329 - 0x138d ) ] - ( ( char ) ( 0x1ca9 + 206 - 0x1d36 ) ) ] = ReplacementFor_word [ ( 0x1d6c + 18 - 0x1d7c ) ] - ( ( char ) ( 0x1aac + 134 - 0x1af1 ) ) ; ReplacementFor_combs [ ReplacementFor_word [ ( 0x23b + 515 - 0x43d ) ] - ( ( char ) ( 0x19c + 5954 - 0x189d ) ) ] [ ReplacementFor_word [ ( 0xc76 + 4405 - 0x1dab ) ] - ( ( char ) ( 0x106d + 3095 - 0x1c43 ) ) ] = ReplacementFor_word [ ( 0x105b + 3844 - 0x1f5d ) ] - ( ( char ) ( 0x2632 + 283 - 0x270c ) ) ; } scanf ( " \x25 \x64 " , & ReplacementFor_D ) ; for ( i = ( 0x83 + 8150 - 0x2059 ) ; i < ReplacementFor_D ; i ++ ) { scanf ( " \x25 \x73 " , ReplacementFor_word ) ; ReplacementFor_opps [ ReplacementFor_word [ ( 0xe1b + 5317 - 0x22e0 ) ] - ( ( char ) ( 0x10c4 + 1847 - 0x17ba ) ) ] [ ReplacementFor_word [ ( 0x3fa + 1695 - 0xa98 ) ] - ( ( char ) ( 0x703 + 572 - 0x8fe ) ) ] = ( 0x697 + 1891 - 0xdf9 ) ; ReplacementFor_opps [ ReplacementFor_word [ ( 0x302 + 4222 - 0x137f ) ] - ( ( char ) ( 0x2438 + 446 - 0x25b5 ) ) ] [ ReplacementFor_word [ ( 0x1d80 + 1012 - 0x2174 ) ] - ( ( char ) ( 0x1270 + 862 - 0x158d ) ) ] = ( 0x1b91 + 2265 - 0x2469 ) ; } scanf ( " \x25 \x64 " , & ReplacementFor_N ) ; scanf ( " \x25 \x73 " , base + ( 0xed6 + 4305 - 0x1fa6 ) ) ; for ( i = ( 0x91b + 4040 - 0x18e2 ) ; i <= ReplacementFor_N ; i ++ ) base [ i ] -= ( ( char ) ( 0x1246 + 4044 - 0x21d1 ) ) ; base [ ( 0x1df + 4441 - 0x1338 ) ] = ( 0x1187 + 3629 - 0x1fb3 ) ; i = ( 0x13a + 6438 - 0x1a60 ) ; for ( ReplacementFor_j = ( 0xc77 + 2931 - 0x17e9 ) ; ReplacementFor_j <= ReplacementFor_N ; ReplacementFor_j ++ ) { ReplacementFor_c = ReplacementFor_combs [ base [ ReplacementFor_j ] ] [ base [ i ] ] ; if ( ReplacementFor_c >= ( 0x233 + 4418 - 0x1375 ) ) base [ i ] = ReplacementFor_c ; else { ReplacementFor_oppflag = ( 0x11f0 + 5369 - 0x26e9 ) ; for ( ReplacementFor_k = ( 0xce1 + 2553 - 0x16da ) ; ReplacementFor_k <= i ; ReplacementFor_k ++ ) if ( ReplacementFor_opps [ base [ ReplacementFor_k ] ] [ base [ ReplacementFor_j ] ] ) { ReplacementFor_oppflag = ( 0x857 + 7208 - 0x247e ) ; break ; } if ( ReplacementFor_oppflag ) i = ( 0x1c84 + 25 - 0x1c9d ) ; else base [ ++ i ] = base [ ReplacementFor_j ] ; } } printf ( " \x43 \x61 \x73 \x65 \x20 \x23 \x25 \x64 \x3a \x20 \x5b " , ReplacementFor_tcase ) ; if ( i > ( 0x4c8 + 7099 - 0x2083 ) ) printf ( " \x25 \x63 " , base [ ( 0x5a4 + 2353 - 0xed4 ) ] + ( ( char ) ( 0x843 + 2837 - 0x1317 ) ) ) ; for ( ReplacementFor_j = ( 0x14f9 + 877 - 0x1864 ) ; ReplacementFor_j <= i ; ReplacementFor_j ++ ) printf ( " \x2c \x20 \x25 \x63 " , base [ ReplacementFor_j ] + ( ( char ) ( 0x476 + 8593 - 0x25c6 ) ) ) ; printf ( " \x5d " " \n " ) ; } return ( 0x8fc + 4793 - 0x1bb5 ) ; }
>>>Func
METHOD ReplacementFor_checkCMB
METHOD_RETURN int
PARAM char*name
PARAM int ReplacementFor_indexA
PARAM int \012ReplacementFor_indexB
RETURN return\012(0x257+4683-0x14a2); return\012(0x257+4683-0x14a2);
<operator>.lessThan i<ReplacementFor_C
<operator>.postIncrement i++
<operator>.subtraction 0x257+4683-0x14a2
<operator>.assignment i=(0x54a+855-0x8a1)
<operator>.logicalOr (\012ReplacementFor_Cstr[i][(0xfcf+3690-0x1e39)]==name[ReplacementFor_indexA]&&\012ReplacementFor_Cstr[i][(0x1b3+3321-0xeab)]==name[ReplacementFor_indexB])||(\012ReplacementFor_Cstr[i][(0x68c+239-0x77b)]==name[ReplacementFor_indexB]&&\012ReplacementFor_Cstr[i][(0x13c7+1896-0x1b2e)]==name[ReplacementFor_indexA])
<operator>.assignment name\012[ReplacementFor_indexB]=((char)(0x2405+93-0x243f))
<operator>.assignment name[ReplacementFor_indexA]=\012ReplacementFor_Cstr[i][(0xb03+6463-0x2440)]
RETURN return(0xe55+2812-0x1950); return(0xe55+2812-0x1950);
<operator>.addition 0x257+4683
<operator>.subtraction 0x54a+855-0x8a1
<operator>.logicalAnd ReplacementFor_Cstr[i][(0xfcf+3690-0x1e39)]==name[ReplacementFor_indexA]&&\012ReplacementFor_Cstr[i][(0x1b3+3321-0xeab)]==name[ReplacementFor_indexB]
<operator>.logicalAnd ReplacementFor_Cstr[i][(0x68c+239-0x77b)]==name[ReplacementFor_indexB]&&\012ReplacementFor_Cstr[i][(0x13c7+1896-0x1b2e)]==name[ReplacementFor_indexA]
<operator>.subtraction 0xe55+2812-0x1950
<operator>.addition 0x54a+855
<operator>.equals ReplacementFor_Cstr[i][(0xfcf+3690-0x1e39)]==name[ReplacementFor_indexA]
<operator>.equals ReplacementFor_Cstr[i][(0x1b3+3321-0xeab)]==name[ReplacementFor_indexB]
<operator>.equals ReplacementFor_Cstr[i][(0x68c+239-0x77b)]==name[ReplacementFor_indexB]
<operator>.equals ReplacementFor_Cstr[i][(0x13c7+1896-0x1b2e)]==name[ReplacementFor_indexA]
<operator>.cast (char)(0x2405+93-0x243f)
<operator>.subtraction 0x2405+93-0x243f
<operator>.subtraction 0xb03+6463-0x2440
<operator>.addition 0xe55+2812
<operator>.subtraction 0xfcf+3690-0x1e39
<operator>.subtraction 0x1b3+3321-0xeab
<operator>.subtraction 0x68c+239-0x77b
<operator>.subtraction 0x13c7+1896-0x1b2e
<operator>.addition 0x2405+93
<operator>.addition 0xb03+6463
<operator>.addition 0xfcf+3690
<operator>.addition 0x1b3+3321
<operator>.addition 0x68c+239
<operator>.addition 0x13c7+1896
<operator>.indirectIndexAccess name\012[ReplacementFor_indexB]
<operator>.indirectIndexAccess name[ReplacementFor_indexA]
<operator>.indirectIndexAccess ReplacementFor_Cstr[i][(0xb03+6463-0x2440)]
<operator>.indirectIndexAccess ReplacementFor_Cstr[i][(0xfcf+3690-0x1e39)]
<operator>.indirectIndexAccess name[ReplacementFor_indexA]
<operator>.indirectIndexAccess ReplacementFor_Cstr[i][(0x1b3+3321-0xeab)]
<operator>.indirectIndexAccess name[ReplacementFor_indexB]
<operator>.indirectIndexAccess ReplacementFor_Cstr[i][(0x68c+239-0x77b)]
<operator>.indirectIndexAccess name[ReplacementFor_indexB]
<operator>.indirectIndexAccess ReplacementFor_Cstr[i][(0x13c7+1896-0x1b2e)]
<operator>.indirectIndexAccess name[ReplacementFor_indexA]
UNKNOWN char char
<operator>.indirectIndexAccess ReplacementFor_Cstr[i]
<operator>.indirectIndexAccess ReplacementFor_Cstr[i]
<operator>.indirectIndexAccess ReplacementFor_Cstr[i]
<operator>.indirectIndexAccess ReplacementFor_Cstr[i]
<operator>.indirectIndexAccess ReplacementFor_Cstr[i]
>>>PDG&55 0->2 0->3 0->4 0->6 0->7 0->8 0->14 0->15 0->18 0->19 0->25 0->26 0->27 0->28 0->29 0->30 0->31 0->32 0->33 0->34 0->35 0->36 0->37 2->1 2->20 2->21 2->22 2->23 3->1 4->1 5->1 6->1 6->1 6->1 6->5 6->7 6->8 6->10 6->14 6->16 6->20 6->28 6->34 6->41 6->42 6->51 7->1 7->6 8->5 9->1 9->1 9->6 10->1 10->1 10->1 10->6 10->7 10->11 10->12 10->13 10->18 10->24 10->25 10->26 10->27 10->32 10->33 10->38 10->39 10->40 10->49 10->50 11->1 11->1 11->1 12->1 12->1 12->1 13->1 15->1 15->9 15->9 16->1 16->1 16->10 16->10 16->17 16->22 16->30 16->36 16->45 16->46 16->53 17->1 17->1 17->10 17->10 18->1 18->1 18->13 20->1 20->16 20->16 20->21 20->23 20->29 20->35 20->43 20->44 20->52 21->1 21->1 21->16 21->16 21->22 22->1 22->1 22->17 22->17 22->21 22->23 22->31 22->37 22->47 22->48 22->54 23->1 23->17 23->17 23->20 24->1 25->1 25->11 25->11 25->24 25->24 26->1 28->1 29->1 30->1 31->1
>>>Token int ReplacementFor_checkCMB ( char * name , int ReplacementFor_indexA , int ReplacementFor_indexB ) { int i ; for ( i = ( 0x54a + 855 - 0x8a1 ) ; i < ReplacementFor_C ; i ++ ) if ( ( ReplacementFor_Cstr [ i ] [ ( 0xfcf + 3690 - 0x1e39 ) ] == name [ ReplacementFor_indexA ] && ReplacementFor_Cstr [ i ] [ ( 0x1b3 + 3321 - 0xeab ) ] == name [ ReplacementFor_indexB ] ) || ( ReplacementFor_Cstr [ i ] [ ( 0x68c + 239 - 0x77b ) ] == name [ ReplacementFor_indexB ] && ReplacementFor_Cstr [ i ] [ ( 0x13c7 + 1896 - 0x1b2e ) ] == name [ ReplacementFor_indexA ] ) ) { name [ ReplacementFor_indexB ] = ( ( char ) ( 0x2405 + 93 - 0x243f ) ) ; name [ ReplacementFor_indexA ] = ReplacementFor_Cstr [ i ] [ ( 0xb03 + 6463 - 0x2440 ) ] ; return ( 0xe55 + 2812 - 0x1950 ) ; } return ( 0x257 + 4683 - 0x14a2 ) ; }
>>>Func
METHOD ReplacementFor_time_resume
METHOD_RETURN void
PARAM int8_t*buf
<operator>.assignment offset=(0x4bd+4169-0x1506)
<operator>.assignment ReplacementFor_size=ReplacementFor_SYS_LAP_TIME_MAX*\012sizeof(double)
memcpy memcpy(ReplacementFor__tls_time_laps,buf+offset,\012ReplacementFor_size)
<operator>.assignmentPlus offset+=ReplacementFor_size
RETURN return; return;
<operator>.subtraction 0x4bd+4169-0x1506
<operator>.multiplication ReplacementFor_SYS_LAP_TIME_MAX*\012sizeof(double)
<operator>.addition buf+offset
<operator>.addition 0x4bd+4169
<operator>.sizeOf sizeof(double)
>>>PDG&13 0->2 0->5 0->6 0->7 0->8 0->9 0->10 0->11 2->5 2->10 3->1 3->1 3->5 3->6 3->10 4->1 4->1 4->5 5->1 5->1 5->1 5->6 6->1 6->1 6->1 7->1 8->1 8->3 8->3 9->1 9->4 10->1 12->1
>>>Token void ReplacementFor_time_resume ( int8_t * buf ) { int32_t offset , ReplacementFor_size ; offset = ( 0x4bd + 4169 - 0x1506 ) ; ReplacementFor_size = ReplacementFor_SYS_LAP_TIME_MAX * sizeof ( double ) ; memcpy ( ReplacementFor__tls_time_laps , buf + offset , ReplacementFor_size ) ; offset += ReplacementFor_size ; return ; }
>>>Func
METHOD ReplacementFor_run
METHOD_RETURN float
PARAM int l
PARAM float t
PARAM int ReplacementFor_n
<operator>.assignment ReplacementFor_min=(0x1930+638-0x1bae)
<operator>.assignment ReplacementFor_sum=\012(0x25e6+186-0x26a0)
<operator>.assignment ReplacementFor_sum=(0xab0+1650-0x1122)
RETURN return(ReplacementFor_sum); return(ReplacementFor_sum);
<operator>.lessThan i<ReplacementFor_n
<operator>.postIncrement i++
<operator>.lessThan i<(ReplacementFor_n-ReplacementFor_min)
<operator>.postIncrement i++
<operator>.assignment ReplacementFor_sorted[i]=i+ReplacementFor_min
<operator>.lessThan i<(ReplacementFor_n-ReplacementFor_min)
<operator>.postIncrement i++
<operator>.expressionList i<(ReplacementFor_n-ReplacementFor_min) i<l
<operator>.postIncrement i++
<operator>.lessThan i<ReplacementFor_n
<operator>.postIncrement i++
<operator>.assignmentPlus ReplacementFor_sum+=(0x45f+7521-0x21be)*\012ReplacementFor_dist[i]
IDENTIFIER ReplacementFor_sum return(ReplacementFor_sum);
<operator>.subtraction 0x1930+638-0x1bae
<operator>.subtraction 0x25e6+186-0x26a0
<operator>.assignment i=\012(0xaed+3380-0x1821)
<operator>.assignmentPlus ReplacementFor_sum+=\012ReplacementFor_dist[i]
<operator>.assignment i=(0xc2+2701-0xb4f)
<operator>.assignment i=(0x1132+1578-0x175c)
<operator>.equals ReplacementFor_sorted[i]==ReplacementFor_min
<operator>.assignment i=(0x1554+359-0x16bb)
<operator>.assignmentDivision ReplacementFor_dist[ReplacementFor_sorted\012[i]]/=(0x1557+1826-0x1c77)
<operator>.subtraction 0xab0+1650-0x1122
<operator>.assignment i=\012(0xc23+45-0xc50)
<operator>.addition 0x1930+638
<operator>.addition 0x25e6+186
<operator>.greaterEqualsThan ReplacementFor_sum>=t
<operator>.subtraction ReplacementFor_n-ReplacementFor_min
<operator>.addition i+ReplacementFor_min
<operator>.subtraction ReplacementFor_n-ReplacementFor_min
<operator>.assignment ReplacementFor_j=i
<operator>.preDecrement --i
<operator>.assignment ReplacementFor_sorted[ReplacementFor_j]=ReplacementFor_sorted[i]
<operator>.assignment ReplacementFor_sorted[i]=ReplacementFor_min
<operator>.lessThan i<(ReplacementFor_n-ReplacementFor_min)
<operator>.lessThan i<l
<operator>.logicalAnd ReplacementFor_sorted[i]==ReplacementFor_min&&ReplacementFor_sum-\012ReplacementFor_dist[ReplacementFor_min]<t
<operator>.addition 0xab0+1650
<operator>.multiplication (0x45f+7521-0x21be)*\012ReplacementFor_dist[i]
<operator>.subtraction 0xaed+3380-0x1821
<operator>.assignment ReplacementFor_min=i
<operator>.subtraction 0xc2+2701-0xb4f
<operator>.subtraction 0x1132+1578-0x175c
<operator>.logicalAnd i<(ReplacementFor_n-ReplacementFor_min)&&ReplacementFor_dist[\012ReplacementFor_min]==ReplacementFor_dist[ReplacementFor_sorted[i]]
<operator>.logicalAnd i+(0x19c1+1713-0x2071)<(\012ReplacementFor_n-ReplacementFor_min)&&ReplacementFor_dist[ReplacementFor_sorted[\012i+(0x1db1+525-0x1fbd)]]>(ReplacementFor_sum-t)
<operator>.subtraction 0x1554+359-0x16bb
<operator>.subtraction ReplacementFor_n-ReplacementFor_min
<operator>.assignmentPlus ReplacementFor_dist[ReplacementFor_min\012]+=((0x1c8f+122-0x1d07)*t+ReplacementFor_dist[ReplacementFor_min]-\012ReplacementFor_sum)/(0x17+5019-0x13b0)
<operator>.subtraction 0x1557+1826-0x1c77
<operator>.subtraction 0xc23+45-0xc50
<operator>.subtraction 0x45f+7521-0x21be
<operator>.addition 0xaed+3380
<operator>.addition 0xc2+2701
<operator>.addition 0x1132+1578
<operator>.postIncrement i++
<operator>.assignment ReplacementFor_tmp=\012ReplacementFor_sorted[i]
<operator>.assignment ReplacementFor_sorted[i]=ReplacementFor_sorted[i+\012(0x186+2781-0xc62)]
<operator>.assignment ReplacementFor_sorted[i+(0xc3+2754-0xb84)]=\012ReplacementFor_tmp
<operator>.assignment ReplacementFor_k=i
<operator>.preDecrement --i
<operator>.assignment ReplacementFor_tmp=ReplacementFor_sorted[ReplacementFor_k+(0x244+8586-0x23cd)]
<operator>.assignment ReplacementFor_sorted[ReplacementFor_k+(0x339+5584-0x1908)]=\012ReplacementFor_sorted[i]
<operator>.assignment ReplacementFor_sorted[i]=ReplacementFor_tmp
<operator>.addition 0x1554+359
<operator>.equals ReplacementFor_sorted[i]==ReplacementFor_min
<operator>.lessThan ReplacementFor_sum-\012ReplacementFor_dist[ReplacementFor_min]<t
<operator>.addition 0x1557+1826
<operator>.addition 0xc23+45
<operator>.addition 0x45f+7521
<operator>.lessThan i<(ReplacementFor_n-ReplacementFor_min)
<operator>.equals ReplacementFor_dist[\012ReplacementFor_min]==ReplacementFor_dist[ReplacementFor_sorted[i]]
<operator>.lessThan i+(0x19c1+1713-0x2071)<(\012ReplacementFor_n-ReplacementFor_min)
<operator>.greaterThan ReplacementFor_dist[ReplacementFor_sorted[\012i+(0x1db1+525-0x1fbd)]]>(ReplacementFor_sum-t)
<operator>.logicalAnd i<(ReplacementFor_n-\012ReplacementFor_min)&&ReplacementFor_dist[ReplacementFor_sorted[i]]==\012ReplacementFor_dist[ReplacementFor_sorted[ReplacementFor_k]]
<operator>.subtraction ReplacementFor_sum-\012ReplacementFor_dist[ReplacementFor_min]
<operator>.division ((0x1c8f+122-0x1d07)*t+ReplacementFor_dist[ReplacementFor_min]-\012ReplacementFor_sum)/(0x17+5019-0x13b0)
<operator>.subtraction ReplacementFor_n-ReplacementFor_min
<operator>.addition i+(0x19c1+1713-0x2071)
<operator>.subtraction ReplacementFor_n-ReplacementFor_min
<operator>.subtraction ReplacementFor_sum-t
<operator>.postIncrement i++
<operator>.subtraction (0x1c8f+122-0x1d07)*t+ReplacementFor_dist[ReplacementFor_min]-\012ReplacementFor_sum
<operator>.subtraction 0x17+5019-0x13b0
<operator>.subtraction 0x19c1+1713-0x2071
<operator>.addition i+\012(0x186+2781-0xc62)
<operator>.addition i+(0xc3+2754-0xb84)
<operator>.lessThan i<(ReplacementFor_n-\012ReplacementFor_min)
<operator>.equals ReplacementFor_dist[ReplacementFor_sorted[i]]==\012ReplacementFor_dist[ReplacementFor_sorted[ReplacementFor_k]]
<operator>.addition ReplacementFor_k+(0x244+8586-0x23cd)
<operator>.addition ReplacementFor_k+(0x339+5584-0x1908)
<operator>.addition (0x1c8f+122-0x1d07)*t+ReplacementFor_dist[ReplacementFor_min]
<operator>.addition 0x17+5019
<operator>.addition 0x19c1+1713
<operator>.addition i+(0x1db1+525-0x1fbd)
<operator>.subtraction 0x186+2781-0xc62
<operator>.subtraction 0xc3+2754-0xb84
<operator>.subtraction ReplacementFor_n-\012ReplacementFor_min
<operator>.subtraction 0x244+8586-0x23cd
<operator>.subtraction 0x339+5584-0x1908
<operator>.multiplication (0x1c8f+122-0x1d07)*t
<operator>.subtraction 0x1db1+525-0x1fbd
<operator>.addition 0x186+2781
<operator>.addition 0xc3+2754
<operator>.addition 0x244+8586
<operator>.addition 0x339+5584
<operator>.subtraction 0x1c8f+122-0x1d07
<operator>.addition 0x1db1+525
<operator>.addition 0x1c8f+122
<operator>.indirectIndexAccess ReplacementFor_sorted[i]
<operator>.indirectIndexAccess ReplacementFor_dist[i]
<operator>.indirectIndexAccess ReplacementFor_sorted[i]
<operator>.indirectIndexAccess ReplacementFor_dist[ReplacementFor_sorted\012[i]]
<operator>.indirectIndexAccess ReplacementFor_dist[i]
<operator>.indirectIndexAccess ReplacementFor_sorted[ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_sorted[i]
<operator>.indirectIndexAccess ReplacementFor_sorted[i]
<operator>.indirectIndexAccess ReplacementFor_sorted\012[i]
<operator>.indirectIndexAccess ReplacementFor_sorted[i]
<operator>.indirectIndexAccess ReplacementFor_dist[ReplacementFor_min\012]
<operator>.indirectIndexAccess ReplacementFor_dist[\012ReplacementFor_min]
<operator>.indirectIndexAccess ReplacementFor_dist[ReplacementFor_sorted[i]]
<operator>.indirectIndexAccess ReplacementFor_dist[ReplacementFor_sorted[\012i+(0x1db1+525-0x1fbd)]]
<operator>.indirectIndexAccess ReplacementFor_sorted[i]
<operator>.indirectIndexAccess ReplacementFor_sorted[i]
<operator>.indirectIndexAccess ReplacementFor_sorted[i+\012(0x186+2781-0xc62)]
<operator>.indirectIndexAccess ReplacementFor_sorted[i+(0xc3+2754-0xb84)]
<operator>.indirectIndexAccess ReplacementFor_sorted[ReplacementFor_k+(0x244+8586-0x23cd)]
<operator>.indirectIndexAccess ReplacementFor_sorted[ReplacementFor_k+(0x339+5584-0x1908)]
<operator>.indirectIndexAccess ReplacementFor_sorted[i]
<operator>.indirectIndexAccess ReplacementFor_sorted[i]
<operator>.indirectIndexAccess ReplacementFor_dist[ReplacementFor_min]
<operator>.indirectIndexAccess ReplacementFor_sorted[i]
<operator>.indirectIndexAccess ReplacementFor_sorted[\012i+(0x1db1+525-0x1fbd)]
<operator>.indirectIndexAccess ReplacementFor_dist[ReplacementFor_sorted[i]]
<operator>.indirectIndexAccess ReplacementFor_dist[ReplacementFor_sorted[ReplacementFor_k]]
<operator>.indirectIndexAccess ReplacementFor_dist[ReplacementFor_min]
<operator>.indirectIndexAccess ReplacementFor_sorted[i]
<operator>.indirectIndexAccess ReplacementFor_sorted[ReplacementFor_k]
>>>PDG&147 0->2 0->3 0->4 0->9 0->10 0->11 0->12 0->13 0->14 0->15 0->17 0->18 0->19 0->20 0->21 0->22 0->23 0->25 0->28 0->31 0->33 0->34 0->35 0->36 0->37 0->38 0->39 0->40 0->42 0->43 0->44 0->46 0->48 0->49 0->50 0->51 0->54 0->55 0->57 0->58 0->59 0->60 0->61 0->62 0->63 0->66 0->67 0->68 0->71 0->72 0->73 0->74 0->75 0->76 0->77 0->78 0->80 0->83 0->85 0->86 0->87 0->88 0->89 0->90 0->91 0->92 0->93 0->94 0->95 0->97 0->98 0->100 0->101 0->102 0->103 0->104 0->105 0->106 0->107 0->108 0->109 0->110 0->111 0->112 0->113 0->114 0->115 0->116 2->44 3->1 3->35 3->74 3->88 3->108 4->9 5->1 5->1 5->36 6->1 6->1 6->25 6->83 6->88 6->90 7->1 7->1 7->1 7->20 7->21 8->1 9->10 9->25 9->35 9->36 9->49 9->118 10->1 10->9 11->11 11->12 11->12 11->13 11->13 11->36 11->37 11->37 11->117 12->1 12->11 13->1 13->1 13->1 13->28 13->73 14->15 14->28 14->39 14->63 14->119 15->1 15->14 16->1 16->1 16->1 16->16 16->17 16->30 16->43 16->44 16->45 16->55 16->57 16->73 16->75 16->120 16->125 16->126 17->1 17->43 18->1 18->1 18->1 18->18 18->19 18->19 18->20 18->47 18->59 18->77 18->121 19->1 19->18 20->1 20->1 20->1 20->21 21->8 22->1 22->5 22->5 23->1 23->6 23->6 24->1 24->1 24->9 25->1 25->1 25->35 26->1 26->1 26->11 27->1 27->1 27->14 28->1 28->1 28->14 28->15 28->38 28->38 28->39 28->40 28->41 28->41 28->42 28->52 28->53 28->63 28->73 28->78 28->80 28->85 28->85 28->86 28->87 28->92 28->101 28->122 28->123 28->124 29->1 29->1 29->43 30->1 30->1 30->1 31->1 31->7 31->7 32->1 32->1 32->18 35->1 35->1 35->9 35->10 35->25 35->49 35->74 35->83 35->88 35->88 35->90 35->108 36->11 36->11 36->13 36->37 36->38 36->38 38->14 38->14 38->28 38->55 38->55 38->85 39->1 39->1 40->1 40->67 40->80 40->86 40->89 40->93 40->94 40->102 41->1 41->1 42->1 42->1 42->64 42->73 43->1 43->16 43->16 43->44 44->1 44->16 44->16 44->17 45->1 45->1 45->1 45->56 45->84 45->90 45->91 45->99 45->100 45->108 45->114 45->116 45->127 45->144 47->1 47->1 47->20 47->20 48->1 48->24 48->24 49->1 49->36 50->1 50->26 50->26 51->1 51->27 51->27 52->1 52->1 52->52 52->63 52->78 52->85 53->1 53->1 53->1 53->64 53->65 53->66 53->67 53->68 53->69 53->70 53->71 53->82 53->89 53->93 53->94 53->95 53->97 53->98 53->103 53->104 53->105 53->106 53->107 53->110 53->111 53->112 53->113 53->131 53->132 53->133 53->134 53->135 53->136 53->137 53->138 54->1 54->29 54->29 55->1 55->18 55->43 55->43 55->73 56->1 56->1 56->1 57->1 57->30 57->30 58->1 58->32 58->32 59->1 59->47 59->47 63->1 63->78 64->1 64->66 65->1 65->1 65->70 66->1 66->1 67->1 67->97 67->98 68->1 69->1 69->1 69->71 70->1 70->1 71->1 71->1 71->1 71->73 73->1 73->45 73->45 73->55 73->74 73->83 73->139 74->1 74->1 74->45 74->45 74->108 78->40 78->52 78->52 78->63 78->79 78->128 78->129 78->140 79->1 79->1 79->52 79->52 79->96 80->1 80->53 80->53 80->81 80->88 80->102 80->109 80->115 80->130 80->141 81->1 81->1 81->53 81->53 82->1 82->1 82->1 82->82 82->89 82->95 82->105 83->1 83->74 83->74 83->90 83->90 83->99 84->1 84->1 84->56 84->56 85->42 85->78 85->78 85->87 85->87 86->1 87->55 87->55 87->80 87->80 87->105 87->105 88->1 88->74 88->81 88->81 88->83 88->90 88->108 89->1 89->95 90->1 90->83 90->84 90->84 91->1 91->84 91->84 92->1 92->80 92->80 92->86 92->86 93->1 94->1 95->1 95->68 95->82 95->82 95->89 95->96 95->142 95->143 95->145 95->146 96->1 96->1 96->82 96->82 97->1 98->1 98->1 99->1 99->1 102->1 103->1 103->93 103->93 104->1 104->94 104->94 105->55 105->55 105->95 105->95 106->1 106->97 106->97 107->1 107->98 107->98 108->1 108->1 108->74 108->90 108->90 108->99 108->99 109->1 109->102 109->102 114->1 114->108 114->108
>>>Token float ReplacementFor_run ( int l , float t , int ReplacementFor_n ) { int ReplacementFor_min = ( 0x1930 + 638 - 0x1bae ) ; float ReplacementFor_sum = ( 0x25e6 + 186 - 0x26a0 ) ; int ReplacementFor_sorted [ ( 0x1aa4 + 2178 - 0x1f3e ) ] ; for ( int i = ( 0xaed + 3380 - 0x1821 ) ; i < ReplacementFor_n ; i ++ ) { ReplacementFor_sum += ReplacementFor_dist [ i ] ; if ( ReplacementFor_sum >= t ) { ReplacementFor_min = i ; break ; } } for ( int i = ( 0xc2 + 2701 - 0xb4f ) ; i < ( ReplacementFor_n - ReplacementFor_min ) ; i ++ ) ReplacementFor_sorted [ i ] = i + ReplacementFor_min ; ReplacementFor_SGLIB_ARRAY_SINGLE_QUICK_SORT < ReplacementFor_missing ( ( char ) ( 0x36c + 3103 - 0xf50 ) ) > ( < ReplacementFor_missing ( ( char ) ( 0xf46 + 4995 - 0x228e ) ) > int , ReplacementFor_sorted , ( ReplacementFor_n < ReplacementFor_missing ( ( char ) ( 0x707 + 696 - 0x984 ) ) > - ReplacementFor_min ) , ReplacementFor_FLOAT_COMPARATOR ) ; for ( int i = ( 0x1132 + 1578 - 0x175c ) ; i < ( ReplacementFor_n - ReplacementFor_min ) ; i ++ ) if ( ReplacementFor_sorted [ i ] == ReplacementFor_min ) { int ReplacementFor_j = i ; do { i ++ ; } while ( i < ( ReplacementFor_n - ReplacementFor_min ) && ReplacementFor_dist [ ReplacementFor_min ] == ReplacementFor_dist [ ReplacementFor_sorted [ i ] ] ) ; -- i ; ReplacementFor_sorted [ ReplacementFor_j ] = ReplacementFor_sorted [ i ] ; ReplacementFor_sorted [ i ] = ReplacementFor_min ; if ( i + ( 0x19c1 + 1713 - 0x2071 ) < ( ReplacementFor_n - ReplacementFor_min ) && ReplacementFor_dist [ ReplacementFor_sorted [ i + ( 0x1db1 + 525 - 0x1fbd ) ] ] > ( ReplacementFor_sum - t ) ) { int ReplacementFor_tmp = ReplacementFor_sorted [ i ] ; ReplacementFor_sorted [ i ] = ReplacementFor_sorted [ i + ( 0x186 + 2781 - 0xc62 ) ] ; ReplacementFor_sorted [ i + ( 0xc3 + 2754 - 0xb84 ) ] = ReplacementFor_tmp ; int ReplacementFor_k = i ; do { i ++ ; } while ( i < ( ReplacementFor_n - ReplacementFor_min ) && ReplacementFor_dist [ ReplacementFor_sorted [ i ] ] == ReplacementFor_dist [ ReplacementFor_sorted [ ReplacementFor_k ] ] ) ; -- i ; ReplacementFor_tmp = ReplacementFor_sorted [ ReplacementFor_k + ( 0x244 + 8586 - 0x23cd ) ] ; ReplacementFor_sorted [ ReplacementFor_k + ( 0x339 + 5584 - 0x1908 ) ] = ReplacementFor_sorted [ i ] ; ReplacementFor_sorted [ i ] = ReplacementFor_tmp ; } break ; } for ( int i = ( 0x1554 + 359 - 0x16bb ) ; i < ( ReplacementFor_n - ReplacementFor_min ) , i < l ; i ++ ) { if ( ReplacementFor_sorted [ i ] == ReplacementFor_min && ReplacementFor_sum - ReplacementFor_dist [ ReplacementFor_min ] < t ) ReplacementFor_dist [ ReplacementFor_min ] += ( ( 0x1c8f + 122 - 0x1d07 ) * t + ReplacementFor_dist [ ReplacementFor_min ] - ReplacementFor_sum ) / ( 0x17 + 5019 - 0x13b0 ) ; ReplacementFor_dist [ ReplacementFor_sorted [ i ] ] /= ( 0x1557 + 1826 - 0x1c77 ) ; } ReplacementFor_sum = ( 0xab0 + 1650 - 0x1122 ) ; for ( int i = ( 0xc23 + 45 - 0xc50 ) ; i < ReplacementFor_n ; i ++ ) ReplacementFor_sum += ( 0x45f + 7521 - 0x21be ) * ReplacementFor_dist [ i ] ; return ( ReplacementFor_sum ) ; }
>>>Func
METHOD delete
METHOD_RETURN int
PARAM char*ReplacementFor_list
PARAM int i
PARAM int ReplacementFor_j
PARAM int \012ReplacementFor_N
<operator>.assignment ReplacementFor_k=i
<operator>.assignment ReplacementFor_diff=ReplacementFor_j-i+\012(0x1505+758-0x17fa)
<operator>.assignmentMinus ReplacementFor_N-=ReplacementFor_diff
RETURN return \012ReplacementFor_N; return \012ReplacementFor_N;
<operator>.lessThan ReplacementFor_k<(ReplacementFor_N-ReplacementFor_diff\012)
<operator>.assignment ReplacementFor_list[ReplacementFor_k++]=ReplacementFor_list[ReplacementFor_k+\012ReplacementFor_diff]
IDENTIFIER ReplacementFor_N return \012ReplacementFor_N;
<operator>.addition ReplacementFor_j-i+\012(0x1505+758-0x17fa)
<operator>.subtraction ReplacementFor_j-i
<operator>.subtraction 0x1505+758-0x17fa
<operator>.subtraction ReplacementFor_N-ReplacementFor_diff
<operator>.addition 0x1505+758
<operator>.postIncrement ReplacementFor_k++
<operator>.addition ReplacementFor_k+\012ReplacementFor_diff
<operator>.indirectIndexAccess ReplacementFor_list[ReplacementFor_k++]
<operator>.indirectIndexAccess ReplacementFor_list[ReplacementFor_k+\012ReplacementFor_diff]
>>>PDG&22 0->2 0->3 0->4 0->5 0->6 0->8 0->10 0->12 0->14 0->15 0->16 0->17 0->18 0->19 2->1 2->11 3->6 3->14 4->14 5->16 6->1 6->10 7->1 7->1 7->16 8->1 8->1 8->1 8->12 9->1 10->1 10->1 10->1 10->10 10->11 10->16 10->18 10->18 10->19 10->20 10->21 11->1 11->1 11->1 12->9 13->1 13->1 14->1 14->1 14->7 14->7 14->13 14->13 15->1 15->7 15->7 15->13 15->13 16->8 16->8 16->10 16->10 16->19 18->10 18->19
>>>Token int delete ( char * ReplacementFor_list , int i , int ReplacementFor_j , int ReplacementFor_N ) { int ReplacementFor_k = i , ReplacementFor_diff = ReplacementFor_j - i + ( 0x1505 + 758 - 0x17fa ) ; while ( ReplacementFor_k < ( ReplacementFor_N - ReplacementFor_diff ) ) ReplacementFor_list [ ReplacementFor_k ++ ] = ReplacementFor_list [ ReplacementFor_k + ReplacementFor_diff ] ; ReplacementFor_N -= ReplacementFor_diff ; return ReplacementFor_N ; }
>>>Func
METHOD ReplacementFor_filewrite
METHOD_RETURN void
PARAM int ReplacementFor_NumDataset
PARAM ReplacementFor_TypeDataSet ReplacementFor_DataSet[]
<operator>.assignment *fd=fopen(\012"\x64\x61\x74\x61\x73\x65\x74\x43\x6f\x70\x79\x2e\x74\x78\x74","\x77")
fprintf fprintf(\012fd,"\x25\x64",ReplacementFor_NumDataset)
fclose fclose(fd)
<operator>.lessThan i<\012ReplacementFor_NumDataset
<operator>.postIncrement i++
ReplacementFor_writeDataSet ReplacementFor_writeDataSet(fd,&\012ReplacementFor_DataSet[i])
fopen fopen(\012"\x64\x61\x74\x61\x73\x65\x74\x43\x6f\x70\x79\x2e\x74\x78\x74","\x77")
<operator>.assignment i=(0x3d0+1780-0xac4)
<operator>.subtraction 0x3d0+1780-0xac4
<operator>.addition 0x3d0+1780
<operator>.addressOf &\012ReplacementFor_DataSet[i]
<operator>.indirectIndexAccess ReplacementFor_DataSet[i]
>>>PDG&16 0->2 0->3 0->5 0->6 0->7 0->8 0->9 0->10 0->12 0->13 2->5 3->1 3->9 4->1 4->1 4->5 5->1 5->6 5->7 5->9 6->1 6->1 7->1 7->1 7->1 7->7 7->8 7->8 7->9 7->14 7->15 8->1 8->7 9->1 9->1 9->6 10->4 10->4 11->1 11->1 11->7 12->1 12->11 12->11
>>>Token void ReplacementFor_filewrite ( int ReplacementFor_NumDataset , ReplacementFor_TypeDataSet ReplacementFor_DataSet [ ] ) { int i ; FILE * fd = fopen ( " \x64 \x61 \x74 \x61 \x73 \x65 \x74 \x43 \x6f \x70 \x79 \x2e \x74 \x78 \x74 " , " \x77 " ) ; fprintf ( fd , " \x25 \x64 " , ReplacementFor_NumDataset ) ; for ( i = ( 0x3d0 + 1780 - 0xac4 ) ; i < ReplacementFor_NumDataset ; i ++ ) ReplacementFor_writeDataSet ( fd , & ReplacementFor_DataSet [ i ] ) ; fclose ( fd ) ; }
>>>Func
METHOD main
METHOD_RETURN int
scanf scanf(\012"\x25\x64\x20\x25\x64\x20\x25\x64" "\n",&ReplacementFor_n,&m,&ReplacementFor_x)
<operator>.assignment **ReplacementFor_mat=(int**)malloc(ReplacementFor_n*sizeof(int*))
ReplacementFor_modifiedBinarySearch ReplacementFor_modifiedBinarySearch(\012ReplacementFor_mat,ReplacementFor_n,m,ReplacementFor_x)
free free(\012ReplacementFor_mat)
RETURN return(0x13a+9193-0x2523); return(0x13a+9193-0x2523);
<operator>.lessThan i<m
<operator>.postIncrement i++
<operator>.assignment ReplacementFor_mat[i]=(int*)malloc(m*sizeof(int))
<operator>.lessThan i<ReplacementFor_n
<operator>.postIncrement i++
<operator>.lessThan i<ReplacementFor_n
<operator>.postIncrement i++
free free(ReplacementFor_mat[i])
<operator>.subtraction 0x13a+9193-0x2523
<operator>.cast (int**)malloc(ReplacementFor_n*sizeof(int*))
<operator>.assignment i=\012(0xb63+6425-0x247c)
<operator>.assignment i=(0x9b6+2009-0x118f)
<operator>.assignment i=\012(0x3a7+5555-0x195a)
malloc malloc(ReplacementFor_n*sizeof(int*))
<operator>.cast (int*)malloc(m*sizeof(int))
<operator>.lessThan ReplacementFor_j<m
<operator>.postIncrement ReplacementFor_j++
<operator>.addition 0x13a+9193
<operator>.multiplication ReplacementFor_n*sizeof(int*)
<operator>.subtraction 0xb63+6425-0x247c
malloc malloc(m*sizeof(int))
<operator>.subtraction 0x9b6+2009-0x118f
<operator>.assignment ReplacementFor_j=\012(0x20eb+1119-0x254a)
scanf scanf("\x25\x64",&\012ReplacementFor_mat[i][ReplacementFor_j])
<operator>.subtraction 0x3a7+5555-0x195a
<operator>.sizeOf sizeof(int*)
<operator>.addition 0xb63+6425
<operator>.multiplication m*sizeof(int)
<operator>.addition 0x9b6+2009
<operator>.addition 0x3a7+5555
<operator>.sizeOf sizeof(int)
<operator>.subtraction 0x20eb+1119-0x254a
<operator>.addition 0x20eb+1119
<operator>.indirectIndexAccess ReplacementFor_mat[i]
<operator>.indirectIndexAccess ReplacementFor_mat[i]
UNKNOWN int* int*
<operator>.addressOf &\012ReplacementFor_mat[i][ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_mat[i][ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_mat[i]
>>>PDG&46 0->2 0->4 0->5 0->7 0->8 0->10 0->11 0->12 0->13 0->15 0->22 0->23 0->24 0->25 0->26 0->28 0->31 0->33 0->34 0->35 0->36 0->38 0->39 2->1 2->1 2->1 2->4 2->10 2->12 2->25 3->1 3->1 3->4 4->1 4->1 4->1 4->5 4->12 4->14 5->1 6->1 7->1 7->4 7->7 7->8 7->8 7->9 7->21 7->22 7->27 7->34 7->34 7->37 7->40 7->42 8->1 8->7 9->1 9->1 9->1 9->4 9->5 9->14 10->4 10->10 10->11 10->11 10->22 10->29 10->38 10->39 11->1 11->10 12->1 12->1 12->1 12->12 12->13 12->13 12->14 12->41 13->1 13->12 14->1 14->5 15->1 15->1 15->6 16->1 17->1 17->1 17->7 18->1 18->1 18->10 19->1 19->1 19->12 20->1 20->3 20->16 21->1 22->1 22->1 22->4 22->22 22->23 22->23 22->30 22->43 22->44 22->45 23->1 23->22 25->10 25->20 26->1 26->17 26->17 27->1 27->9 27->21 28->1 28->18 28->18 29->1 29->1 29->22 30->1 30->14 31->1 31->19 31->19 32->1 34->7 34->27 37->1 38->1 38->29 38->29
>>>Token int main ( ) { int ReplacementFor_x ; int m , ReplacementFor_n ; scanf ( " \x25 \x64 \x20 \x25 \x64 \x20 \x25 \x64 " " \n " , & ReplacementFor_n , & m , & ReplacementFor_x ) ; int * * ReplacementFor_mat = ( int * * ) malloc ( ReplacementFor_n * sizeof ( int * ) ) ; for ( int i = ( 0xb63 + 6425 - 0x247c ) ; i < m ; i ++ ) ReplacementFor_mat [ i ] = ( int * ) malloc ( m * sizeof ( int ) ) ; for ( int i = ( 0x9b6 + 2009 - 0x118f ) ; i < ReplacementFor_n ; i ++ ) { for ( int ReplacementFor_j = ( 0x20eb + 1119 - 0x254a ) ; ReplacementFor_j < m ; ReplacementFor_j ++ ) { scanf ( " \x25 \x64 " , & ReplacementFor_mat [ i ] [ ReplacementFor_j ] ) ; } } ReplacementFor_modifiedBinarySearch ( ReplacementFor_mat , ReplacementFor_n , m , ReplacementFor_x ) ; for ( int i = ( 0x3a7 + 5555 - 0x195a ) ; i < ReplacementFor_n ; i ++ ) free ( ReplacementFor_mat [ i ] ) ; free ( ReplacementFor_mat ) ; return ( 0x13a + 9193 - 0x2523 ) ; }
>>>Func
METHOD main
METHOD_RETURN int
PARAM void
scanf scanf(\012"\x25\x64",&T)
RETURN return(0x105b+4146-0x208d); return(0x105b+4146-0x208d);
<operator>.lessEqualsThan i<=T
<operator>.postIncrement i++
<operator>.subtraction 0x105b+4146-0x208d
<operator>.assignment i=(0xd8f+79-0xddd)
memset memset(ReplacementFor_out \012(0x1727+2631-0x216e) sizeof(ReplacementFor_out))
<operator>.assignment L=(0xf37+974-0x1305)
scanf scanf(\012"\x25\x64",&ReplacementFor_C)
scanf scanf("\x25\x64",&ReplacementFor_D)
scanf scanf(\012"\x25\x64",&ReplacementFor_N)
scanf scanf("\x25\x73",ReplacementFor_inv)
printf printf(\012"\x43\x61\x73\x65\x20\x23\x25\x64\x3a\x20\x5b",i)
puts puts("\x5d")
<operator>.lessThan ReplacementFor_k<ReplacementFor_C
<operator>.postIncrement ReplacementFor_k++
scanf scanf("\x25\x73",\012ReplacementFor_cmb[ReplacementFor_k])
<operator>.lessThan ReplacementFor_k<ReplacementFor_D
<operator>.postIncrement ReplacementFor_k++
scanf scanf("\x25\x73",ReplacementFor_opp[ReplacementFor_k])
<operator>.lessThan ReplacementFor_k<ReplacementFor_N
<operator>.postIncrement ReplacementFor_k++
<operator>.lessThan ReplacementFor_k<L
<operator>.postIncrement ReplacementFor_k++
printf printf(\012"\x25\x73\x25\x63" (ReplacementFor_k?"\x2c\x20":""),ReplacementFor_out[\012ReplacementFor_k])
<operator>.addition 0x105b+4146
<operator>.subtraction 0xd8f+79-0xddd
<operator>.subtraction 0x1727+2631-0x216e
<operator>.subtraction 0xf37+974-0x1305
<operator>.assignment ReplacementFor_k=(0x15ba+3207-0x2241)
<operator>.assignment ReplacementFor_k=(0x8c6+4161-0x1907)
<operator>.assignment ReplacementFor_k=(0x196b+1603-0x1fae)
<operator>.assignment ReplacementFor_k=\012(0x1138+132-0x11bc)
<operator>.addition 0xd8f+79
<operator>.addition 0x1727+2631
<operator>.addition 0xf37+974
IDENTIFIER L if (L)
<operator>.conditional ReplacementFor_k?"\x2c\x20":""
<operator>.subtraction 0x15ba+3207-0x2241
<operator>.subtraction 0x8c6+4161-0x1907
<operator>.subtraction 0x196b+1603-0x1fae
<operator>.assignment ReplacementFor_no_combo=(0x3c3+1138-0x834)
<operator>.subtraction 0x1138+132-0x11bc
<operator>.addition 0x15ba+3207
<operator>.addition 0x8c6+4161
<operator>.addition 0x196b+1603
<operator>.lessThan ReplacementFor_j<ReplacementFor_C
<operator>.postIncrement ReplacementFor_j++
IDENTIFIER ReplacementFor_no_combo if (ReplacementFor_no_combo)
<operator>.logicalAnd ReplacementFor_no_combo\012&&L
<operator>.assignment ReplacementFor_out[L++]=ReplacementFor_inv[ReplacementFor_k]
<operator>.addition 0x1138+132
<operator>.subtraction 0x3c3+1138-0x834
<operator>.assignment ReplacementFor_j=(0x85b+902-0xbe1)
<operator>.assignment ReplacementFor_out[L++]=ReplacementFor_inv[ReplacementFor_k]
<operator>.addition 0x3c3+1138
<operator>.logicalOr (ReplacementFor_out[L-(0x259+3924-0x11ac)]==\012ReplacementFor_cmb[ReplacementFor_j][(0x72d+5978-0x1e87)]&&ReplacementFor_inv[\012ReplacementFor_k]==ReplacementFor_cmb[ReplacementFor_j][(0x14b1+549-0x16d5)])||(\012ReplacementFor_out[L-(0xe98+2812-0x1993)]==ReplacementFor_cmb[ReplacementFor_j][\012(0xfa6+1161-0x142e)]&&ReplacementFor_inv[ReplacementFor_k]==ReplacementFor_cmb[\012ReplacementFor_j][(0xd98+3512-0x1b50)])
<operator>.lessThan ReplacementFor_j<ReplacementFor_D
<operator>.postIncrement ReplacementFor_j++
<operator>.subtraction 0x85b+902-0xbe1
<operator>.assignment ReplacementFor_out[L-\012(0xd8c+3124-0x19bf)]=ReplacementFor_cmb[ReplacementFor_j][(0x5aa+1127-0xa0f)]
<operator>.assignment ReplacementFor_no_combo=(0x28b+3009-0xe4c)
<operator>.assignment ReplacementFor_j=(0x247b+313-0x25b4)
<operator>.postIncrement L++
<operator>.addition 0x85b+902
<operator>.logicalAnd ReplacementFor_out[L-(0x259+3924-0x11ac)]==\012ReplacementFor_cmb[ReplacementFor_j][(0x72d+5978-0x1e87)]&&ReplacementFor_inv[\012ReplacementFor_k]==ReplacementFor_cmb[ReplacementFor_j][(0x14b1+549-0x16d5)]
<operator>.logicalAnd ReplacementFor_out[L-(0xe98+2812-0x1993)]==ReplacementFor_cmb[ReplacementFor_j][\012(0xfa6+1161-0x142e)]&&ReplacementFor_inv[ReplacementFor_k]==ReplacementFor_cmb[\012ReplacementFor_j][(0xd98+3512-0x1b50)]
<operator>.equals ReplacementFor_inv[ReplacementFor_k]==ReplacementFor_opp[\012ReplacementFor_j][(0xc08+3890-0x1b39)]
<operator>.lessThan ReplacementFor_other_opp<(0x1480+1463-0x1a35)
<operator>.postIncrement L++
<operator>.equals ReplacementFor_out[L-(0x259+3924-0x11ac)]==\012ReplacementFor_cmb[ReplacementFor_j][(0x72d+5978-0x1e87)]
<operator>.equals ReplacementFor_inv[\012ReplacementFor_k]==ReplacementFor_cmb[ReplacementFor_j][(0x14b1+549-0x16d5)]
<operator>.equals ReplacementFor_out[L-(0xe98+2812-0x1993)]==ReplacementFor_cmb[ReplacementFor_j][\012(0xfa6+1161-0x142e)]
<operator>.equals ReplacementFor_inv[ReplacementFor_k]==ReplacementFor_cmb[\012ReplacementFor_j][(0xd98+3512-0x1b50)]
<operator>.subtraction 0x28b+3009-0xe4c
<operator>.subtraction 0x247b+313-0x25b4
<operator>.assignment ReplacementFor_other_opp=\012(0xfda+2102-0x1810)
<operator>.subtraction L-\012(0xd8c+3124-0x19bf)
<operator>.subtraction 0x5aa+1127-0xa0f
<operator>.addition 0x28b+3009
<operator>.addition 0x247b+313
<operator>.subtraction 0x1480+1463-0x1a35
<operator>.lessThan ReplacementFor_h<L
<operator>.postIncrement ReplacementFor_h++
<operator>.subtraction L-(0x259+3924-0x11ac)
<operator>.subtraction 0x72d+5978-0x1e87
<operator>.subtraction 0x14b1+549-0x16d5
<operator>.subtraction L-(0xe98+2812-0x1993)
<operator>.subtraction 0xfa6+1161-0x142e
<operator>.subtraction 0xd98+3512-0x1b50
<operator>.subtraction 0xd8c+3124-0x19bf
<operator>.addition 0x5aa+1127
<operator>.subtraction 0xc08+3890-0x1b39
<operator>.subtraction 0xfda+2102-0x1810
<operator>.equals ReplacementFor_inv[ReplacementFor_k]==\012ReplacementFor_opp[ReplacementFor_j][(0x49a+5219-0x18fd)]
<operator>.addition 0x1480+1463
<operator>.assignment ReplacementFor_h=(0xa03+4962-0x1d65)
<operator>.subtraction 0x259+3924-0x11ac
<operator>.addition 0x72d+5978
<operator>.addition 0x14b1+549
<operator>.subtraction 0xe98+2812-0x1993
<operator>.addition 0xfa6+1161
<operator>.addition 0xd98+3512
<operator>.addition 0xd8c+3124
<operator>.addition 0xc08+3890
<operator>.addition 0xfda+2102
<operator>.assignment ReplacementFor_other_opp=(0x87d+2080-0x109c)
<operator>.equals ReplacementFor_out[ReplacementFor_h]==ReplacementFor_opp[ReplacementFor_j][\012ReplacementFor_other_opp]
<operator>.addition 0x259+3924
<operator>.addition 0xe98+2812
<operator>.assignment ReplacementFor_other_opp=\012(0xbb3+4151-0x1be8)
<operator>.subtraction 0xa03+4962-0x1d65
memset memset(ReplacementFor_out (0xbbd+2332-0x14d9) sizeof(\012ReplacementFor_out))
<operator>.assignment L=(0xa0f+5944-0x2147)
<operator>.subtraction 0x49a+5219-0x18fd
<operator>.subtraction 0x87d+2080-0x109c
<operator>.addition 0xa03+4962
<operator>.addition 0x49a+5219
<operator>.addition 0x87d+2080
<operator>.subtraction 0xbb3+4151-0x1be8
<operator>.subtraction 0xbbd+2332-0x14d9
<operator>.subtraction 0xa0f+5944-0x2147
<operator>.addition 0xbb3+4151
<operator>.addition 0xbbd+2332
<operator>.addition 0xa0f+5944
<operator>.sizeOf sizeof(ReplacementFor_out)
<operator>.addressOf &ReplacementFor_C
<operator>.addressOf &ReplacementFor_D
<operator>.addressOf &ReplacementFor_N
<operator>.indirectIndexAccess ReplacementFor_cmb[ReplacementFor_k]
<operator>.indirectIndexAccess ReplacementFor_opp[ReplacementFor_k]
<operator>.indirectIndexAccess ReplacementFor_out[\012ReplacementFor_k]
<operator>.indirectIndexAccess ReplacementFor_out[L++]
<operator>.indirectIndexAccess ReplacementFor_inv[ReplacementFor_k]
<operator>.indirectIndexAccess ReplacementFor_out[L++]
<operator>.indirectIndexAccess ReplacementFor_inv[ReplacementFor_k]
<operator>.indirectIndexAccess ReplacementFor_out[L-\012(0xd8c+3124-0x19bf)]
<operator>.indirectIndexAccess ReplacementFor_cmb[ReplacementFor_j][(0x5aa+1127-0xa0f)]
<operator>.indirectIndexAccess ReplacementFor_out[L-(0x259+3924-0x11ac)]
<operator>.indirectIndexAccess ReplacementFor_cmb[ReplacementFor_j][(0x72d+5978-0x1e87)]
<operator>.indirectIndexAccess ReplacementFor_inv[\012ReplacementFor_k]
<operator>.indirectIndexAccess ReplacementFor_cmb[ReplacementFor_j][(0x14b1+549-0x16d5)]
<operator>.indirectIndexAccess ReplacementFor_out[L-(0xe98+2812-0x1993)]
<operator>.indirectIndexAccess ReplacementFor_cmb[ReplacementFor_j][\012(0xfa6+1161-0x142e)]
<operator>.indirectIndexAccess ReplacementFor_inv[ReplacementFor_k]
<operator>.indirectIndexAccess ReplacementFor_cmb[\012ReplacementFor_j][(0xd98+3512-0x1b50)]
<operator>.indirectIndexAccess ReplacementFor_cmb[ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_inv[ReplacementFor_k]
<operator>.indirectIndexAccess ReplacementFor_opp[\012ReplacementFor_j][(0xc08+3890-0x1b39)]
<operator>.indirectIndexAccess ReplacementFor_cmb[ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_cmb[ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_cmb[ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_cmb[\012ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_opp[\012ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_inv[ReplacementFor_k]
<operator>.indirectIndexAccess ReplacementFor_opp[ReplacementFor_j][(0x49a+5219-0x18fd)]
<operator>.indirectIndexAccess ReplacementFor_opp[ReplacementFor_j]
<operator>.indirectIndexAccess ReplacementFor_out[ReplacementFor_h]
<operator>.indirectIndexAccess ReplacementFor_opp[ReplacementFor_j][\012ReplacementFor_other_opp]
<operator>.indirectIndexAccess ReplacementFor_opp[ReplacementFor_j]
<operator>.sizeOf sizeof(\012ReplacementFor_out)
>>>PDG&164 0->2 0->3 0->5 0->6 0->7 0->9 0->11 0->12 0->13 0->14 0->15 0->16 0->17 0->18 0->20 0->21 0->23 0->24 0->25 0->26 0->27 0->28 0->29 0->30 0->31 0->36 0->37 0->38 0->39 0->40 0->41 0->42 0->43 0->45 0->46 0->47 0->48 0->49 0->50 0->51 0->52 0->54 0->55 0->58 0->60 0->61 0->62 0->66 0->67 0->71 0->72 0->77 0->78 0->80 0->81 0->82 0->83 0->84 0->85 0->86 0->87 0->88 0->89 0->90 0->91 0->92 0->93 0->94 0->95 0->96 0->98 0->100 0->101 0->102 0->103 0->104 0->105 0->106 0->107 0->108 0->111 0->112 0->114 0->115 0->117 0->118 0->119 0->120 0->121 0->122 0->123 0->124 0->125 0->126 0->127 2->1 3->1 3->5 4->1 5->1 5->1 5->1 5->5 5->6 5->9 5->10 5->11 5->12 5->13 5->14 5->15 5->15 5->16 5->17 5->20 5->23 5->25 5->30 5->31 5->32 5->33 5->34 5->35 5->37 5->38 5->41 5->42 5->43 5->45 5->46 5->47 5->48 5->54 5->128 5->129 5->130 5->131 6->1 6->5 7->1 7->1 7->4 8->1 8->1 8->5 9->1 9->1 9->1 9->27 9->73 9->75 9->110 10->1 10->1 10->25 10->52 10->66 10->85 10->87 11->1 11->17 11->49 12->1 12->20 12->60 13->1 13->23 14->1 14->53 14->57 14->70 14->74 14->76 14->97 15->1 15->6 16->1 17->1 17->1 17->11 17->17 17->18 17->18 17->19 17->49 17->132 18->1 18->17 19->1 20->1 20->1 20->12 20->20 20->21 20->21 20->22 20->60 20->133 21->1 21->20 22->1 23->1 23->1 23->13 23->23 23->24 23->24 23->44 23->49 23->52 23->53 23->55 23->56 23->58 23->60 23->62 23->65 23->66 23->67 23->78 23->83 23->135 23->136 24->1 24->23 25->1 25->1 25->1 25->25 25->26 25->27 25->40 25->134 26->1 26->25 27->1 27->1 27->1 27->9 27->115 29->1 29->8 29->8 30->1 30->9 30->9 31->1 31->10 31->10 32->1 32->1 32->17 33->1 33->1 33->20 34->1 34->1 34->23 35->1 35->1 35->25 41->1 41->32 41->32 42->1 42->33 42->33 43->1 43->34 43->34 44->1 44->1 44->52 45->1 45->35 45->35 49->1 49->1 49->1 49->11 49->17 49->50 49->59 49->68 49->73 49->87 49->88 49->100 49->101 49->111 49->141 49->142 49->152 50->1 50->49 52->1 52->1 52->25 52->57 52->66 52->72 52->72 52->85 52->87 52->137 52->138 53->1 53->1 53->1 53->9 53->115 55->1 55->44 55->44 56->1 56->1 56->49 57->1 57->1 57->1 57->9 57->115 59->1 59->1 59->1 59->49 59->50 59->63 59->64 59->77 59->80 59->81 59->82 59->93 59->94 59->106 59->139 59->140 59->149 60->1 60->1 60->1 60->12 60->20 60->60 60->61 60->61 60->70 60->71 60->84 60->95 60->98 60->107 60->150 60->151 60->156 61->1 61->60 62->1 62->56 62->56 63->1 63->1 63->1 63->9 63->115 64->1 64->1 64->52 65->1 65->1 65->60 66->25 66->52 66->85 66->87 68->1 68->1 68->59 68->59 68->69 68->75 68->90 68->91 68->103 68->104 68->112 68->145 68->146 68->154 69->1 69->1 69->59 69->59 70->1 70->1 70->1 70->14 70->53 70->57 70->76 70->79 70->96 70->97 70->97 70->108 70->117 70->120 70->157 70->158 70->159 71->1 71->1 71->1 71->85 71->99 71->114 71->119 72->25 72->52 72->66 72->85 72->87 73->1 73->1 73->9 73->68 73->68 73->74 73->89 73->102 73->115 73->143 73->144 73->153 74->1 74->1 74->14 74->68 74->68 75->1 75->1 75->9 75->69 75->69 75->76 75->92 75->105 75->115 75->147 75->148 75->155 76->1 76->1 76->14 76->53 76->57 76->69 76->69 76->70 77->1 77->64 77->64 78->1 78->65 78->65 79->1 79->1 79->71 80->1 80->52 80->85 81->1 84->1 84->71 84->71 85->1 85->1 85->52 85->86 85->110 85->160 85->161 85->162 86->1 86->85 87->1 87->52 87->80 87->85 87->90 88->1 89->1 90->1 90->52 90->80 90->85 90->87 91->1 92->1 93->1 93->80 93->80 95->1 96->1 96->79 96->79 97->1 97->1 97->1 97->14 97->53 97->57 97->70 97->76 97->109 97->113 97->118 97->121 97->122 97->125 99->1 99->1 99->85 100->1 100->87 100->87 103->1 103->90 103->90 109->1 109->1 109->71 110->1 110->1 110->1 110->9 110->85 110->86 110->115 110->115 110->116 110->123 110->124 110->126 110->127 110->163 113->1 113->1 113->71 114->1 114->99 114->99 115->1 115->1 115->1 115->27 115->73 115->75 115->110 116->1 116->1 116->52 116->85 117->1 118->1 118->109 118->109 122->1 122->113 122->113 123->1 123->115 123->115 124->1 124->116 124->116
>>>Token int main ( void ) { int ReplacementFor_h , i , ReplacementFor_j , ReplacementFor_k ; int T ; int ReplacementFor_C ; int ReplacementFor_D ; int ReplacementFor_N ; int L ; int ReplacementFor_no_combo ; int ReplacementFor_other_opp ; char ReplacementFor_cmb [ ReplacementFor_MAXC ] [ ( 0xf59 + 2023 - 0x173d ) ] ; char ReplacementFor_opp [ ReplacementFor_MAXD ] [ ( 0x169d + 2788 - 0x217f ) ] ; char ReplacementFor_inv [ ReplacementFor_MAXN ] ; char ReplacementFor_out [ ReplacementFor_MAXN ] ; scanf ( " \x25 \x64 " , & T ) ; for ( i = ( 0xd8f + 79 - 0xddd ) ; i <= T ; i ++ ) { memset ( ReplacementFor_out , ( 0x1727 + 2631 - 0x216e ) , sizeof ( ReplacementFor_out ) ) ; L = ( 0xf37 + 974 - 0x1305 ) ; scanf ( " \x25 \x64 " , & ReplacementFor_C ) ; for ( ReplacementFor_k = ( 0x15ba + 3207 - 0x2241 ) ; ReplacementFor_k < ReplacementFor_C ; ReplacementFor_k ++ ) scanf ( " \x25 \x73 " , ReplacementFor_cmb [ ReplacementFor_k ] ) ; scanf ( " \x25 \x64 " , & ReplacementFor_D ) ; for ( ReplacementFor_k = ( 0x8c6 + 4161 - 0x1907 ) ; ReplacementFor_k < ReplacementFor_D ; ReplacementFor_k ++ ) scanf ( " \x25 \x73 " , ReplacementFor_opp [ ReplacementFor_k ] ) ; scanf ( " \x25 \x64 " , & ReplacementFor_N ) ; scanf ( " \x25 \x73 " , ReplacementFor_inv ) ; for ( ReplacementFor_k = ( 0x196b + 1603 - 0x1fae ) ; ReplacementFor_k < ReplacementFor_N ; ReplacementFor_k ++ ) { if ( L ) { ReplacementFor_no_combo = ( 0x3c3 + 1138 - 0x834 ) ; for ( ReplacementFor_j = ( 0x85b + 902 - 0xbe1 ) ; ReplacementFor_j < ReplacementFor_C ; ReplacementFor_j ++ ) { if ( ( ReplacementFor_out [ L - ( 0x259 + 3924 - 0x11ac ) ] == ReplacementFor_cmb [ ReplacementFor_j ] [ ( 0x72d + 5978 - 0x1e87 ) ] && ReplacementFor_inv [ ReplacementFor_k ] == ReplacementFor_cmb [ ReplacementFor_j ] [ ( 0x14b1 + 549 - 0x16d5 ) ] ) || ( ReplacementFor_out [ L - ( 0xe98 + 2812 - 0x1993 ) ] == ReplacementFor_cmb [ ReplacementFor_j ] [ ( 0xfa6 + 1161 - 0x142e ) ] && ReplacementFor_inv [ ReplacementFor_k ] == ReplacementFor_cmb [ ReplacementFor_j ] [ ( 0xd98 + 3512 - 0x1b50 ) ] ) ) { ReplacementFor_out [ L - ( 0xd8c + 3124 - 0x19bf ) ] = ReplacementFor_cmb [ ReplacementFor_j ] [ ( 0x5aa + 1127 - 0xa0f ) ] ; ReplacementFor_no_combo = ( 0x28b + 3009 - 0xe4c ) ; break ; } } if ( ReplacementFor_no_combo ) { for ( ReplacementFor_j = ( 0x247b + 313 - 0x25b4 ) ; ReplacementFor_j < ReplacementFor_D ; ReplacementFor_j ++ ) { if ( ReplacementFor_inv [ ReplacementFor_k ] == ReplacementFor_opp [ ReplacementFor_j ] [ ( 0xc08 + 3890 - 0x1b39 ) ] ) ReplacementFor_other_opp = ( 0xfda + 2102 - 0x1810 ) ; else if ( ReplacementFor_inv [ ReplacementFor_k ] == ReplacementFor_opp [ ReplacementFor_j ] [ ( 0x49a + 5219 - 0x18fd ) ] ) ReplacementFor_other_opp = ( 0x87d + 2080 - 0x109c ) ; else ReplacementFor_other_opp = ( 0xbb3 + 4151 - 0x1be8 ) ; if ( ReplacementFor_other_opp < ( 0x1480 + 1463 - 0x1a35 ) ) { for ( ReplacementFor_h = ( 0xa03 + 4962 - 0x1d65 ) ; ReplacementFor_h < L ; ReplacementFor_h ++ ) { if ( ReplacementFor_out [ ReplacementFor_h ] == ReplacementFor_opp [ ReplacementFor_j ] [ ReplacementFor_other_opp ] ) { memset ( ReplacementFor_out , ( 0xbbd + 2332 - 0x14d9 ) , sizeof ( ReplacementFor_out ) ) ; L = ( 0xa0f + 5944 - 0x2147 ) ; break ; } } } } } if ( ReplacementFor_no_combo && L ) ReplacementFor_out [ L ++ ] = ReplacementFor_inv [ ReplacementFor_k ] ; } else ReplacementFor_out [ L ++ ] = ReplacementFor_inv [ ReplacementFor_k ] ; } printf ( " \x43 \x61 \x73 \x65 \x20 \x23 \x25 \x64 \x3a \x20 \x5b " , i ) ; for ( ReplacementFor_k = ( 0x1138 + 132 - 0x11bc ) ; ReplacementFor_k < L ; ReplacementFor_k ++ ) printf ( " \x25 \x73 \x25 \x63 " , ( ReplacementFor_k ? " \x2c \x20 " : " " ) , ReplacementFor_out [ ReplacementFor_k ] ) ; puts ( " \x5d " ) ; } return ( 0x105b + 4146 - 0x208d ) ; }
>>>Func
METHOD ReplacementFor_magicka
METHOD_RETURN void
PARAM char ReplacementFor_combos[]
PARAM char \012ReplacementFor_nukes[]
PARAM char ReplacementFor_spell_start[]
PARAM char \012ReplacementFor_output_start[]
fprintf fprintf(stderr,\012"\x6d\x61\x67\x69\x63\x6b\x61\x20\x73\x74\x61\x72\x74" "\n")
<operator>.assignment *\012ReplacementFor_output=ReplacementFor_output_start
<operator>.assignment *ReplacementFor_spell=\012ReplacementFor_spell_start
<operator>.assignment *\012ReplacementFor_output='\0'
<operator>.notEquals *ReplacementFor_spell!='\0'
<operator>.assignment *\012ReplacementFor_output=*ReplacementFor_spell
<operator>.assignment *(ReplacementFor_output+\012(0x8ef+3016-0x14b6))='\0'
fprintf fprintf(stderr,\012"\x62\x65\x66\x6f\x72\x65\x20\x25\x70\x3a\x20\x25\x73" "\n",ReplacementFor_spell\012,ReplacementFor_output_start)
<operator>.assignment ReplacementFor_combined=\012(0x2ad+5285-0x1752)
fprintf fprintf(stderr,\012"\x61\x66\x74\x65\x72\x20\x25\x70\x3a\x20\x25\x73" "\n",ReplacementFor_spell,\012ReplacementFor_output_start)
<operator>.preIncrement ++ReplacementFor_spell
<operator>.preIncrement ++ReplacementFor_output
<operator>.notEquals *i!='\0'
<operator>.preIncrement ++i
<operator>.logicalNot !ReplacementFor_combined
<operator>.subtraction 0x2ad+5285-0x1752
<operator>.assignment i=ReplacementFor_output_start
fprintf fprintf(\012stderr,\012"\x63\x68\x65\x63\x6b\x69\x6e\x67\x20\x63\x6f\x6d\x62\x6f\x73\x20\x6f\x6e\x20\x25\x32\x73" "\n"\012,i)
<operator>.addition ReplacementFor_output+\012(0x8ef+3016-0x14b6)
<operator>.addition 0x2ad+5285
<operator>.notEquals *i!='\0'
<operator>.preIncrement ++i
<operator>.subtraction 0x8ef+3016-0x14b6
<operator>.assignment *i=\012ReplacementFor_combos[ReplacementFor_COMBO_HASH1(i)]
<operator>.preIncrement ++i
<operator>.assignment *i=FILLER
<operator>.preIncrement ++i
<operator>.assignment ReplacementFor_combined=(0x66a+5254-0x1aef)
<operator>.assignment i\012=ReplacementFor_output_start
<operator>.addition 0x8ef+3016
ReplacementFor_COMBO_HASH1 ReplacementFor_COMBO_HASH1(i)
<operator>.subtraction 0x66a+5254-0x1aef
ReplacementFor_COMBO_HASH1 ReplacementFor_COMBO_HASH1(i)
<operator>.addition 0x66a+5254
ReplacementFor_char_in_string ReplacementFor_char_in_string(ReplacementFor_nukes[*i],\012ReplacementFor_output_start)
ReplacementFor_clear_element_list ReplacementFor_clear_element_list(\012ReplacementFor_output_start)
<operator>.indirection *ReplacementFor_spell
<operator>.indirection *\012ReplacementFor_output
<operator>.indirection *ReplacementFor_spell
<operator>.indirection *(ReplacementFor_output+\012(0x8ef+3016-0x14b6))
<operator>.indirection *i
<operator>.indirectIndexAccess ReplacementFor_combos[ReplacementFor_COMBO_HASH1(i)]
<operator>.indirection *i
<operator>.indirection *i
<operator>.indirectIndexAccess ReplacementFor_combos[ReplacementFor_COMBO_HASH1(i)]
<operator>.indirection *i
<operator>.indirectIndexAccess ReplacementFor_nukes[*i]
<operator>.indirection *i
<operator>.indirectIndexAccess ReplacementFor_nukes[*i]
<operator>.indirection *i
>>>PDG&56 0->2 0->3 0->4 0->5 0->6 0->7 0->8 0->9 0->10 0->12 0->13 0->15 0->16 0->17 0->18 0->19 0->20 0->21 0->22 0->23 0->24 0->25 0->26 0->27 0->28 0->30 0->31 0->32 0->34 0->35 0->36 0->37 0->38 0->39 0->40 0->41 2->1 2->29 3->1 3->40 4->8 5->7 5->13 6->1 6->1 6->13 7->1 7->1 7->1 7->17 7->24 8->1 8->1 8->1 8->13 9->1 9->1 10->1 10->1 10->10 10->11 10->11 10->12 10->13 10->13 10->14 10->15 10->15 10->16 10->16 10->17 10->18 10->20 10->21 10->22 10->24 10->25 10->28 10->35 10->42 10->43 10->44 10->45 10->46 11->1 11->17 11->24 12->1 12->1 13->1 13->15 13->15 13->15 13->22 13->23 13->34 13->40 14->1 14->1 14->20 15->1 15->1 15->1 15->13 15->13 15->16 16->1 16->1 16->13 17->1 17->1 17->24 18->1 18->1 18->18 18->19 18->19 18->23 18->23 18->26 18->36 18->36 18->38 18->46 18->47 19->1 19->1 19->23 20->1 20->1 20->26 20->34 20->48 21->1 21->14 21->14 22->1 22->1 22->23 23->1 23->15 23->36 24->1 26->1 26->1 26->18 26->26 26->27 26->27 26->48 26->52 26->53 27->1 27->1 28->1 28->24 28->24 29->1 29->1 29->30 30->32 31->1 31->1 31->18 31->19 31->32 32->19 33->1 33->1 33->20 34->1 34->1 34->27 36->19 36->38 37->1 37->33 37->33 38->30 40->1 40->1 40->15 40->41 40->41 41->1 41->15 41->40 47->29 47->30 47->31 47->32 47->33 47->37 47->38 47->39 47->49 47->50 47->51 52->40 52->54 52->55
>>>Token void ReplacementFor_magicka ( char ReplacementFor_combos [ ] , char ReplacementFor_nukes [ ] , char ReplacementFor_spell_start [ ] , char ReplacementFor_output_start [ ] ) { fprintf ( stderr , " \x6d \x61 \x67 \x69 \x63 \x6b \x61 \x20 \x73 \x74 \x61 \x72 \x74 " " \n " ) ; char * ReplacementFor_output = ReplacementFor_output_start ; char * ReplacementFor_spell = ReplacementFor_spell_start ; while ( * ReplacementFor_spell != ' \0 ' ) { * ReplacementFor_output = * ReplacementFor_spell ; * ( ReplacementFor_output + ( 0x8ef + 3016 - 0x14b6 ) ) = ' \0 ' ; fprintf ( stderr , " \x62 \x65 \x66 \x6f \x72 \x65 \x20 \x25 \x70 \x3a \x20 \x25 \x73 " " \n " , ReplacementFor_spell , ReplacementFor_output_start ) ; char * i ; uint8_t ReplacementFor_combined = ( 0x2ad + 5285 - 0x1752 ) ; for ( i = ReplacementFor_output_start ; * i != ' \0 ' ; ++ i ) { fprintf ( stderr , " \x63 \x68 \x65 \x63 \x6b \x69 \x6e \x67 \x20 \x63 \x6f \x6d \x62 \x6f \x73 \x20 \x6f \x6e \x20 \x25 \x32 \x73 " " \n " , i ) ; if ( ReplacementFor_combos [ ReplacementFor_COMBO_HASH1 ( i ) ] ) { * i = ReplacementFor_combos [ ReplacementFor_COMBO_HASH1 ( i ) ] ; ++ i ; * i = FILLER ; ++ i ; ReplacementFor_combined = ( 0x66a + 5254 - 0x1aef ) ; } } if ( ! ReplacementFor_combined ) { for ( i = ReplacementFor_output_start ; * i != ' \0 ' ; ++ i ) { if ( ReplacementFor_nukes [ * i ] ) { if ( ReplacementFor_char_in_string ( ReplacementFor_nukes [ * i ] , ReplacementFor_output_start ) ) { ReplacementFor_clear_element_list ( ReplacementFor_output_start ) ; } } } } fprintf ( stderr , " \x61 \x66 \x74 \x65 \x72 \x20 \x25 \x70 \x3a \x20 \x25 \x73 " " \n " , ReplacementFor_spell , ReplacementFor_output_start ) ; ++ ReplacementFor_spell ; ++ ReplacementFor_output ; } * ReplacementFor_output = ' \0 ' ; }
>>>Func
METHOD ReplacementFor_alloc_test_get_header
METHOD_RETURN ReplacementFor_BlockHeader
PARAM void*\012ReplacementFor_ptr
<operator>.assignment ReplacementFor_result=((ReplacementFor_BlockHeader*)ReplacementFor_ptr)-\012(0x46+4527-0x11f4)
ReplacementFor_assert ReplacementFor_assert(ReplacementFor_result->\012ReplacementFor_magic_number==ReplacementFor_ALLOC_TEST_MAGIC)
RETURN return \012ReplacementFor_result; return \012ReplacementFor_result;
IDENTIFIER ReplacementFor_result return \012ReplacementFor_result;
<operator>.subtraction ((ReplacementFor_BlockHeader*)ReplacementFor_ptr)-\012(0x46+4527-0x11f4)
<operator>.equals ReplacementFor_result->\012ReplacementFor_magic_number==ReplacementFor_ALLOC_TEST_MAGIC
<operator>.cast (ReplacementFor_BlockHeader*)ReplacementFor_ptr
<operator>.subtraction 0x46+4527-0x11f4
<operator>.addition 0x46+4527
>>>PDG&12 0->2 0->6 0->7 0->8 0->9 0->10 0->11 2->7 2->9 3->1 3->1 3->1 3->6 4->1 4->1 5->1 6->5 7->1 7->1 7->3 7->3 8->1 8->1 8->4 8->4 9->1 10->1 10->7 10->7
>>>Token static ReplacementFor_BlockHeader * ReplacementFor_alloc_test_get_header ( void * ReplacementFor_ptr ) { ReplacementFor_BlockHeader * ReplacementFor_result ; ReplacementFor_result = ( ( ReplacementFor_BlockHeader * ) ReplacementFor_ptr ) - ( 0x46 + 4527 - 0x11f4 ) ; ReplacementFor_assert ( ReplacementFor_result -> ReplacementFor_magic_number == ReplacementFor_ALLOC_TEST_MAGIC ) ; return ReplacementFor_result ; }
>>>Func
METHOD ReplacementFor_show
METHOD_RETURN void
ReplacementFor_empty ReplacementFor_empty()
printf printf(\012"\x51\x75\x65\x75\x65\x20\x65\x6d\x70\x74\x79\x2e\x20\x4e\x6f\x20\x64\x61\x74\x61\x20\x74\x6f\x20\x64\x69\x73\x70\x6c\x61\x79\x20" "\n"\012)
printf printf(\012"\x51\x75\x65\x75\x65\x20\x66\x72\x6f\x6d\x20\x66\x72\x6f\x6e\x74\x20\x74\x6f\x20\x72\x65\x61\x72\x20\x69\x73\x20\x61\x73\x20\x73\x68\x6f\x77\x6e\x3a\x20" "\n"\012)
<operator>.assignment ReplacementFor_p=ReplacementFor_front
printf printf("\n")
<operator>.notEquals ReplacementFor_p!=NULL
printf printf(\012"\x25\x64\x20",ReplacementFor_p->data)
<operator>.assignment ReplacementFor_p=ReplacementFor_p->next
<operator>.indirectFieldAccess ReplacementFor_p->data
<operator>.indirectFieldAccess ReplacementFor_p->next
FIELD_IDENTIFIER data data
FIELD_IDENTIFIER next next
>>>PDG&14 0->2 0->3 0->4 0->5 0->6 0->7 0->8 2->1 2->3 2->4 2->5 2->6 2->7 3->1 5->1 5->7 7->1 7->7 7->8 7->9 7->10 7->11 7->12 7->13 9->7
>>>Token void ReplacementFor_show ( ) { struct ReplacementFor_node * ReplacementFor_p ; if ( ReplacementFor_empty ( ) ) printf ( " \x51 \x75 \x65 \x75 \x65 \x20 \x65 \x6d \x70 \x74 \x79 \x2e \x20 \x4e \x6f \x20 \x64 \x61 \x74 \x61 \x20 \x74 \x6f \x20 \x64 \x69 \x73 \x70 \x6c \x61 \x79 \x20 " " \n " ) ; else { printf ( " \x51 \x75 \x65 \x75 \x65 \x20 \x66 \x72 \x6f \x6d \x20 \x66 \x72 \x6f \x6e \x74 \x20 \x74 \x6f \x20 \x72 \x65 \x61 \x72 \x20 \x69 \x73 \x20 \x61 \x73 \x20 \x73 \x68 \x6f \x77 \x6e \x3a \x20 " " \n " ) ; ReplacementFor_p = ReplacementFor_front ; while ( ReplacementFor_p != NULL ) { printf ( " \x25 \x64 \x20 " , ReplacementFor_p -> data ) ; ReplacementFor_p = ReplacementFor_p -> next ; } printf ( " \n " ) ; } }
>>>Func
METHOD main
METHOD_RETURN int
scanf scanf("\x25\x64",&ReplacementFor_notc)
RETURN return(0xf4c+3898-0x1e86); return(0xf4c+3898-0x1e86);
<operator>.lessThan ReplacementFor_nc<ReplacementFor_notc
<operator>.postIncrement ReplacementFor_nc++
<operator>.subtraction 0xf4c+3898-0x1e86
<operator>.assignment ReplacementFor_nc=(0xfd5+5639-0x25dc)
scanf scanf(\012"\x25\x6c\x6c\x64\x20\x25\x6c\x6c\x64\x20\x25\x6c\x6c\x64",&ReplacementFor_n,&\012ReplacementFor_pd,&ReplacementFor_pg)
<operator>.assignment ReplacementFor_mind=\012(0x237+3977-0x115c)/ReplacementFor_gcd((0x20b6+876-0x23be),ReplacementFor_pd)
<operator>.assignment ReplacementFor_ming=(0xb58+6507-0x245f)/ReplacementFor_gcd(\012(0x1cbd+1385-0x21c2),ReplacementFor_pg)
<operator>.assignment ReplacementFor_wd=\012ReplacementFor_pd/ReplacementFor_gcd((0x1aa+3893-0x107b),ReplacementFor_pd)
<operator>.assignment ReplacementFor_wg=ReplacementFor_pg/ReplacementFor_gcd(\012(0x1eec+1502-0x2466),ReplacementFor_pd)
<operator>.assignment ReplacementFor_mgame=\012ReplacementFor_ming
<operator>.assignment i=(0x84c+3888-0x177b)
<operator>.assignment ReplacementFor_minl=ReplacementFor_mind-ReplacementFor_wd
<operator>.lessEqualsThan ReplacementFor_mind\012<=ReplacementFor_n
<operator>.addition 0xf4c+3898
<operator>.subtraction 0xfd5+5639-0x25dc
<operator>.division (0x237+3977-0x115c)/ReplacementFor_gcd((0x20b6+876-0x23be),ReplacementFor_pd)
<operator>.division (0xb58+6507-0x245f)/ReplacementFor_gcd(\012(0x1cbd+1385-0x21c2),ReplacementFor_pg)
<operator>.division ReplacementFor_pd/ReplacementFor_gcd((0x1aa+3893-0x107b),ReplacementFor_pd)
<operator>.division ReplacementFor_pg/ReplacementFor_gcd(\012(0x1eec+1502-0x2466),ReplacementFor_pd)
<operator>.subtraction 0x84c+3888-0x177b
<operator>.subtraction ReplacementFor_mind-ReplacementFor_wd
<operator>.addition 0xfd5+5639
<operator>.subtraction 0x237+3977-0x115c
ReplacementFor_gcd ReplacementFor_gcd((0x20b6+876-0x23be),ReplacementFor_pd)
<operator>.subtraction 0xb58+6507-0x245f
ReplacementFor_gcd ReplacementFor_gcd(\012(0x1cbd+1385-0x21c2),ReplacementFor_pg)
ReplacementFor_gcd ReplacementFor_gcd((0x1aa+3893-0x107b),ReplacementFor_pd)
ReplacementFor_gcd ReplacementFor_gcd(\012(0x1eec+1502-0x2466),ReplacementFor_pd)
<operator>.addition 0x84c+3888
<operator>.equals ReplacementFor_pd==ReplacementFor_pg
printf printf(\012"\x43\x61\x73\x65\x20\x23\x25\x64\x3a\x20\x25\x73" "\n" ReplacementFor_nc+\012(0x3b2+6174-0x1bcf),"\x42\x72\x6f\x6b\x65\x6e")
<operator>.addition 0x237+3977
<operator>.subtraction 0x20b6+876-0x23be
<operator>.addition 0xb58+6507
<operator>.subtraction 0x1cbd+1385-0x21c2
<operator>.subtraction 0x1aa+3893-0x107b
<operator>.subtraction 0x1eec+1502-0x2466
printf printf(\012"\x43\x61\x73\x65\x20\x23\x25\x64\x3a\x20\x25\x73" "\n" ReplacementFor_nc+\012(0x1df+1626-0x838),"\x50\x6f\x73\x73\x69\x62\x6c\x65")
<operator>.addition 0x20b6+876
<operator>.addition 0x1cbd+1385
<operator>.addition 0x1aa+3893
<operator>.addition 0x1eec+1502
<operator>.addition ReplacementFor_nc+\012(0x3b2+6174-0x1bcf)
<operator>.addition ReplacementFor_nc+\012(0x1df+1626-0x838)
<operator>.logicalOr ReplacementFor_pg\012==(0x17d2+3751-0x2615)||ReplacementFor_pg==(0xf10+4671-0x214f)
<operator>.subtraction 0x3b2+6174-0x1bcf
<operator>.subtraction 0x1df+1626-0x838
printf printf(\012"\x43\x61\x73\x65\x20\x23\x25\x64\x3a\x20\x25\x73" "\n" ReplacementFor_nc+\012(0x1e6+5458-0x1737),"\x42\x72\x6f\x6b\x65\x6e")
<operator>.addition 0x3b2+6174
<operator>.addition 0x1df+1626
<operator>.equals ReplacementFor_pg\012==(0x17d2+3751-0x2615)
<operator>.equals ReplacementFor_pg==(0xf10+4671-0x214f)
printf printf(\012"\x43\x61\x73\x65\x20\x23\x25\x64\x3a\x20\x25\x73" "\n" ReplacementFor_nc+\012(0x9da+4862-0x1cd7),"\x50\x6f\x73\x73\x69\x62\x6c\x65")
<operator>.subtraction 0x17d2+3751-0x2615
<operator>.subtraction 0xf10+4671-0x214f
<operator>.addition ReplacementFor_nc+\012(0x1e6+5458-0x1737)
<operator>.addition 0x17d2+3751
<operator>.addition 0xf10+4671
<operator>.subtraction 0x1e6+5458-0x1737
<operator>.addition ReplacementFor_nc+\012(0x9da+4862-0x1cd7)
<operator>.addition 0x1e6+5458
<operator>.subtraction 0x9da+4862-0x1cd7
<operator>.addition 0x9da+4862
<operator>.addressOf &ReplacementFor_n
<operator>.addressOf &\012ReplacementFor_pd
<operator>.addressOf &ReplacementFor_pg
>>>PDG&70 0->2 0->4 0->5 0->6 0->8 0->13 0->16 0->17 0->18 0->21 0->22 0->23 0->24 0->25 0->26 0->27 0->28 0->29 0->30 0->31 0->32 0->33 0->34 0->35 0->36 0->37 0->38 0->39 0->40 0->41 0->42 0->43 0->44 0->45 0->46 0->47 0->49 0->50 0->51 0->52 0->53 0->54 0->55 0->56 0->57 0->58 0->59 0->60 0->61 0->62 0->63 0->64 0->65 0->66 2->1 2->4 3->1 4->1 4->1 4->1 4->4 4->5 4->5 4->8 4->9 4->10 4->11 4->12 4->13 4->14 4->15 4->16 4->19 4->20 4->21 4->22 4->23 4->24 4->26 4->27 4->28 4->29 4->30 4->31 4->32 4->34 4->35 4->36 4->37 4->38 4->39 4->40 4->41 4->42 4->43 4->44 4->45 4->46 4->47 4->51 4->56 4->59 4->63 4->67 4->68 4->69 5->1 5->4 6->1 6->1 6->3 7->1 7->1 7->4 8->1 8->1 8->1 8->16 9->1 9->1 9->24 10->1 10->1 10->13 11->1 11->1 11->24 12->1 12->1 12->1 13->1 13->1 13->1 14->1 14->1 14->1 15->1 15->1 15->1 16->1 16->1 16->1 16->8 16->33 16->34 16->46 16->49 16->52 18->1 18->7 18->7 19->1 19->1 19->9 19->9 20->1 20->1 20->10 20->10 21->1 21->11 21->11 21->31 22->1 22->1 22->12 22->12 22->29 22->33 23->1 23->14 23->14 24->1 24->15 24->15 24->16 26->1 26->19 26->19 27->1 27->19 27->19 27->30 28->1 28->20 28->20 29->1 29->20 29->20 29->22 30->1 30->21 30->21 31->1 31->1 31->22 31->22 31->27 31->33 33->1 33->1 33->1 33->27 33->29 33->41 33->47 33->48 33->50 33->53 33->54 33->54 33->57 33->60 34->1 34->1 36->1 36->27 36->27 38->1 38->29 38->29 39->1 39->30 39->30 40->1 40->31 40->31 41->1 41->1 46->1 47->1 48->1 48->1 48->1 48->51 48->56 48->59 48->62 48->63 48->64 48->65 48->66 49->1 49->34 49->34 49->46 49->46 50->1 50->41 50->41 50->47 50->47 51->1 51->1 54->1 54->1 54->29 54->48 54->48 54->55 54->55 54->58 54->61 55->1 55->1 55->29 55->48 55->48 56->1 56->1 57->1 57->54 57->54 58->1 58->55 58->55 59->1 62->1 62->51 62->51 62->59 62->59 63->1 65->1 65->56 65->56 65->63 65->63
>>>Token int main ( ) { int ReplacementFor_notc , ReplacementFor_nc ; int i , ReplacementFor_j ; scanf ( " \x25 \x64 " , & ReplacementFor_notc ) ; for ( ReplacementFor_nc = ( 0xfd5 + 5639 - 0x25dc ) ; ReplacementFor_nc < ReplacementFor_notc ; ReplacementFor_nc ++ ) { ReplacementFor_LD ReplacementFor_n , ReplacementFor_pd , ReplacementFor_pg ; scanf ( " \x25 \x6c \x6c \x64 \x20 \x25 \x6c \x6c \x64 \x20 \x25 \x6c \x6c \x64 " , & ReplacementFor_n , & ReplacementFor_pd , & ReplacementFor_pg ) ; ReplacementFor_LD ReplacementFor_mind = ( 0x237 + 3977 - 0x115c ) / ReplacementFor_gcd ( ( 0x20b6 + 876 - 0x23be ) , ReplacementFor_pd ) ; ReplacementFor_LD ReplacementFor_ming = ( 0xb58 + 6507 - 0x245f ) / ReplacementFor_gcd ( ( 0x1cbd + 1385 - 0x21c2 ) , ReplacementFor_pg ) ; ReplacementFor_LD ReplacementFor_wd = ReplacementFor_pd / ReplacementFor_gcd ( ( 0x1aa + 3893 - 0x107b ) , ReplacementFor_pd ) ; ReplacementFor_LD ReplacementFor_wg = ReplacementFor_pg / ReplacementFor_gcd ( ( 0x1eec + 1502 - 0x2466 ) , ReplacementFor_pd ) ; ReplacementFor_LD ReplacementFor_mgame = ReplacementFor_ming ; ReplacementFor_LD i = ( 0x84c + 3888 - 0x177b ) ; ReplacementFor_LD ReplacementFor_minl = ReplacementFor_mind - ReplacementFor_wd ; if ( ReplacementFor_mind <= ReplacementFor_n ) { if ( ReplacementFor_pd == ReplacementFor_pg ) printf ( " \x43 \x61 \x73 \x65 \x20 \x23 \x25 \x64 \x3a \x20 \x25 \x73 " " \n " , ReplacementFor_nc + ( 0x1df + 1626 - 0x838 ) , " \x50 \x6f \x73 \x73 \x69 \x62 \x6c \x65 " ) ; else if ( ReplacementFor_pg == ( 0x17d2 + 3751 - 0x2615 ) || ReplacementFor_pg == ( 0xf10 + 4671 - 0x214f ) ) printf ( " \x43 \x61 \x73 \x65 \x20 \x23 \x25 \x64 \x3a \x20 \x25 \x73 " " \n " , ReplacementFor_nc + ( 0x1e6 + 5458 - 0x1737 ) , " \x42 \x72 \x6f \x6b \x65 \x6e " ) ; else printf ( " \x43 \x61 \x73 \x65 \x20 \x23 \x25 \x64 \x3a \x20 \x25 \x73 " " \n " , ReplacementFor_nc + ( 0x9da + 4862 - 0x1cd7 ) , " \x50 \x6f \x73 \x73 \x69 \x62 \x6c \x65 " ) ; } else printf ( " \x43 \x61 \x73 \x65 \x20 \x23 \x25 \x64 \x3a \x20 \x25 \x73 " " \n " , ReplacementFor_nc + ( 0x3b2 + 6174 - 0x1bcf ) , " \x42 \x72 \x6f \x6b \x65 \x6e " ) ; } return ( 0xf4c + 3898 - 0x1e86 ) ; }
>>>Func
METHOD main
METHOD_RETURN int
scanf scanf("\x25\x64",&t)
RETURN return(0x697+7208-0x22bf); return(0x697+7208-0x22bf);
<operator>.lessEqualsThan ReplacementFor_ti<=t
<operator>.postIncrement ReplacementFor_ti++
<operator>.subtraction 0x697+7208-0x22bf
<operator>.assignment ReplacementFor_ti=(0xfd4+2226-0x1885)
scanf scanf("\x25\x6c\x6c\x64\x20\x25\x64\x20\x25\x64",&ReplacementFor_lln,&\012ReplacementFor_pd,&ReplacementFor_pg)
<operator>.assignment ReplacementFor_n=ReplacementFor_lln
<operator>.assignment ReplacementFor_k=(0x5a5+5997-0x1d12)
<operator>.greaterThan ReplacementFor_lln>(0xf75+2590-0x18cb)
<operator>.logicalAnd ReplacementFor_pd!=(0xe8d+5267-0x22bc)&&ReplacementFor_pg==(0xaa6+6990-0x2590)
<operator>.logicalAnd ReplacementFor_pd!=(0xe74+3052-0x1a60)&&\012ReplacementFor_pg==(0x3f+7022-0x1bad)
<operator>.lessEqualsThan i<=ReplacementFor_n
<operator>.postIncrement i++
IDENTIFIER ReplacementFor_k if (ReplacementFor_k)
<operator>.addition 0x697+7208
<operator>.subtraction 0xfd4+2226-0x1885
<operator>.assignment ReplacementFor_lln=(0xb40+5253-0x1efd)
printf printf("\x43\x61\x73\x65\x20\x23\x25\x64\x3a\x20\x42\x72\x6f\x6b\x65\x6e" "\n",\012ReplacementFor_ti)
printf printf(\012"\x43\x61\x73\x65\x20\x23\x25\x64\x3a\x20\x42\x72\x6f\x6b\x65\x6e" "\n",\012ReplacementFor_ti)
<operator>.subtraction 0x5a5+5997-0x1d12
<operator>.assignment i=\012(0xa17+5156-0x1e3a)
<operator>.lessEqualsThan ReplacementFor_j<=i
<operator>.postIncrement ReplacementFor_j++
printf printf(\012"\x43\x61\x73\x65\x20\x23\x25\x64\x3a\x20\x50\x6f\x73\x73\x69\x62\x6c\x65" "\n",\012ReplacementFor_ti)
<operator>.addition 0xfd4+2226
<operator>.subtraction 0xf75+2590-0x18cb
<operator>.notEquals ReplacementFor_pd!=(0xe8d+5267-0x22bc)
<operator>.equals ReplacementFor_pg==(0xaa6+6990-0x2590)
<operator>.notEquals ReplacementFor_pd!=(0xe74+3052-0x1a60)
<operator>.equals ReplacementFor_pg==(0x3f+7022-0x1bad)
<operator>.addition 0x5a5+5997
<operator>.assignment ReplacementFor_j=(0xcc+6-0xd2)
<operator>.assignment ReplacementFor_c=(double)\012ReplacementFor_j/(double)i*(0x93b+490-0xac1)-ReplacementFor_pd
printf printf(\012"\x43\x61\x73\x65\x20\x23\x25\x64\x3a\x20\x42\x72\x6f\x6b\x65\x6e" "\n",\012ReplacementFor_ti)
<operator>.addition 0xf75+2590
<operator>.subtraction 0xb40+5253-0x1efd
<operator>.subtraction 0xe8d+5267-0x22bc
<operator>.subtraction 0xaa6+6990-0x2590
<operator>.subtraction 0xe74+3052-0x1a60
<operator>.subtraction 0x3f+7022-0x1bad
<operator>.subtraction 0xa17+5156-0x1e3a
<operator>.lessThan ReplacementFor_c<(0x280+3020-0xe4c)
<operator>.lessThan ReplacementFor_c<0.00001
<operator>.addition 0xb40+5253
<operator>.addition 0xe8d+5267
<operator>.addition 0xaa6+6990
<operator>.addition 0xe74+3052
<operator>.addition 0x3f+7022
<operator>.addition 0xa17+5156
<operator>.subtraction 0xcc+6-0xd2
<operator>.subtraction (double)\012ReplacementFor_j/(double)i*(0x93b+490-0xac1)-ReplacementFor_pd
<operator>.assignmentMultiplication ReplacementFor_c*=-(0x1f1d+1665-0x259d)
<operator>.assignment ReplacementFor_k=(0xe16+4977-0x2186)
<operator>.addition 0xcc+6
<operator>.multiplication (double)\012ReplacementFor_j/(double)i*(0x93b+490-0xac1)
<operator>.subtraction 0x280+3020-0xe4c
<operator>.division (double)\012ReplacementFor_j/(double)i
<operator>.subtraction 0x93b+490-0xac1
<operator>.addition 0x280+3020
<operator>.minus -(0x1f1d+1665-0x259d)
<operator>.subtraction 0xe16+4977-0x2186
<operator>.cast (double)\012ReplacementFor_j
<operator>.cast (double)i
<operator>.addition 0x93b+490
<operator>.subtraction 0x1f1d+1665-0x259d
<operator>.addition 0xe16+4977
<operator>.addition 0x1f1d+1665
<operator>.addressOf &ReplacementFor_lln
<operator>.addressOf &\012ReplacementFor_pd
<operator>.addressOf &ReplacementFor_pg
UNKNOWN double double
UNKNOWN double double
>>>PDG&75 0->2 0->4 0->5 0->6 0->8 0->9 0->11 0->14 0->15 0->16 0->17 0->18 0->20 0->21 0->22 0->24 0->25 0->26 0->27 0->28 0->29 0->30 0->31 0->32 0->33 0->36 0->37 0->38 0->39 0->40 0->41 0->42 0->43 0->44 0->45 0->46 0->47 0->48 0->49 0->50 0->51 0->52 0->53 0->54 0->56 0->58 0->59 0->60 0->61 0->63 0->64 0->65 0->66 0->67 0->68 0->69 2->1 2->4 3->1 4->1 4->1 4->1 4->4 4->5 4->8 4->9 4->11 4->12 4->20 4->21 4->26 4->28 4->29 4->36 4->37 4->39 4->47 4->70 4->71 4->72 5->1 5->4 6->1 6->1 6->3 7->1 7->1 7->4 8->1 8->1 8->1 8->9 8->11 9->1 9->1 9->1 9->14 10->1 10->1 10->1 11->1 11->1 11->8 11->9 11->19 11->38 11->46 12->1 12->1 12->1 12->13 12->20 12->31 12->41 12->49 13->1 13->1 13->1 13->10 13->14 13->21 13->22 13->23 13->26 13->33 13->36 13->43 13->51 14->1 14->1 14->1 14->14 14->15 14->24 14->24 14->34 14->52 14->56 15->1 15->14 18->1 18->7 18->7 19->1 19->1 19->8 19->9 19->11 20->1 20->5 21->1 21->5 22->1 22->10 22->10 23->1 23->1 23->14 24->1 24->1 24->15 24->24 24->25 24->25 24->35 24->44 24->45 24->53 24->57 24->58 24->59 24->59 24->59 24->60 24->61 24->64 24->64 24->65 24->65 24->66 24->73 24->74 25->1 25->24 26->1 26->5 28->1 28->11 28->11 29->1 29->1 29->12 29->12 29->30 29->31 29->40 29->48 30->1 30->1 30->12 30->12 30->32 31->1 31->1 31->13 31->13 31->29 31->32 31->42 31->50 31->53 32->1 32->1 32->13 32->13 32->30 34->1 34->1 34->24 35->1 35->1 35->44 36->1 36->5 38->1 38->19 38->19 39->1 39->29 39->29 40->1 40->30 40->30 41->1 41->31 41->31 42->1 42->32 42->32 43->1 43->23 43->23 44->1 44->1 44->45 44->54 44->54 44->62 44->67 44->69 45->1 45->1 45->55 45->63 45->68 52->1 52->34 52->34 53->1 53->1 53->29 53->35 53->35 54->1 54->1 54->45 55->1 55->1 55->1 57->1 57->1 57->53 57->53 58->1 58->44 58->44 59->1 59->1 59->57 59->57 60->1 60->57 60->57 62->1 62->54 63->1 63->55 63->55 67->1 67->62 67->62
>>>Token int main ( ) { long long int ReplacementFor_lln ; int t , ReplacementFor_n , ReplacementFor_pd , ReplacementFor_pg ; int ReplacementFor_ti , i , ReplacementFor_j , ReplacementFor_k ; double ReplacementFor_c ; scanf ( " \x25 \x64 " , & t ) ; for ( ReplacementFor_ti = ( 0xfd4 + 2226 - 0x1885 ) ; ReplacementFor_ti <= t ; ReplacementFor_ti ++ ) { scanf ( " \x25 \x6c \x6c \x64 \x20 \x25 \x64 \x20 \x25 \x64 " , & ReplacementFor_lln , & ReplacementFor_pd , & ReplacementFor_pg ) ; if ( ReplacementFor_lln > ( 0xf75 + 2590 - 0x18cb ) ) ReplacementFor_lln = ( 0xb40 + 5253 - 0x1efd ) ; ReplacementFor_n = ReplacementFor_lln ; if ( ReplacementFor_pd != ( 0xe8d + 5267 - 0x22bc ) && ReplacementFor_pg == ( 0xaa6 + 6990 - 0x2590 ) ) { printf ( " \x43 \x61 \x73 \x65 \x20 \x23 \x25 \x64 \x3a \x20 \x42 \x72 \x6f \x6b \x65 \x6e " " \n " , ReplacementFor_ti ) ; continue ; } if ( ReplacementFor_pd != ( 0xe74 + 3052 - 0x1a60 ) && ReplacementFor_pg == ( 0x3f + 7022 - 0x1bad ) ) { printf ( " \x43 \x61 \x73 \x65 \x20 \x23 \x25 \x64 \x3a \x20 \x42 \x72 \x6f \x6b \x65 \x6e " " \n " , ReplacementFor_ti ) ; continue ; } ReplacementFor_k = ( 0x5a5 + 5997 - 0x1d12 ) ; for ( i = ( 0xa17 + 5156 - 0x1e3a ) ; i <= ReplacementFor_n ; i ++ ) for ( ReplacementFor_j = ( 0xcc + 6 - 0xd2 ) ; ReplacementFor_j <= i ; ReplacementFor_j ++ ) { ReplacementFor_c = ( double ) ReplacementFor_j / ( double ) i * ( 0x93b + 490 - 0xac1 ) - ReplacementFor_pd ; if ( ReplacementFor_c < ( 0x280 + 3020 - 0xe4c ) ) ReplacementFor_c *= - ( 0x1f1d + 1665 - 0x259d ) ; if ( ReplacementFor_c < 0.00001 ) ReplacementFor_k = ( 0xe16 + 4977 - 0x2186 ) ; } if ( ReplacementFor_k ) printf ( " \x43 \x61 \x73 \x65 \x20 \x23 \x25 \x64 \x3a \x20 \x50 \x6f \x73 \x73 \x69 \x62 \x6c \x65 " " \n " , ReplacementFor_ti ) ; else printf ( " \x43 \x61 \x73 \x65 \x20 \x23 \x25 \x64 \x3a \x20 \x42 \x72 \x6f \x6b \x65 \x6e " " \n " , ReplacementFor_ti ) ; } return ( 0x697 + 7208 - 0x22bf ) ; }
>>>Func
METHOD main
METHOD_RETURN int
PARAM int ReplacementFor_argc
PARAM char**ReplacementFor_argv
fgets fgets(buf \012(0x3c2+4670-0x159c),stdin)
ReplacementFor_assert ReplacementFor_assert((0xab2+4157-0x1aee)==sscanf(buf\012,"\x25\x64" "\n",&ReplacementFor_N))
RETURN return(0x19f3+299-0x1b1e); return(0x19f3+299-0x1b1e);
<operator>.lessEqualsThan ReplacementFor_cnum<=ReplacementFor_N
<operator>.postIncrement ReplacementFor_cnum++
<operator>.subtraction 0x19f3+299-0x1b1e
<operator>.subtraction 0x3c2+4670-0x159c
<operator>.equals (0xab2+4157-0x1aee)==sscanf(buf\012,"\x25\x64" "\n",&ReplacementFor_N)
<operator>.assignment ReplacementFor_cnum=\012(0x1eeb+1143-0x2361)
ReplacementFor_do_one_case ReplacementFor_do_one_case(ReplacementFor_cnum)
<operator>.addition 0x3c2+4670
<operator>.subtraction 0xab2+4157-0x1aee
sscanf sscanf(buf\012,"\x25\x64" "\n",&ReplacementFor_N)
<operator>.addition 0x19f3+299
<operator>.addition 0xab2+4157
<operator>.subtraction 0x1eeb+1143-0x2361
<operator>.addition 0x1eeb+1143
>>>PDG&21 0->2 0->3 0->4 0->7 0->8 0->9 0->10 0->13 0->14 0->15 0->16 0->17 0->18 0->19 0->20 2->1 3->1 4->1 4->1 4->1 4->16 5->1 5->1 6->1 7->1 7->1 7->1 7->7 7->8 7->13 7->13 8->1 8->7 9->1 9->1 9->6 10->1 10->4 10->4 11->1 11->1 11->5 11->5 12->1 12->1 12->7 13->1 13->8 15->1 15->11 15->11 16->1 16->1 16->7 16->11 16->11 16->11 19->1 19->12 19->12
>>>Token int main ( int ReplacementFor_argc , char * * ReplacementFor_argv ) { int ReplacementFor_N , ReplacementFor_cnum ; char buf [ ( 0x1a62 + 2461 - 0x239b ) ] ; fgets ( buf , ( 0x3c2 + 4670 - 0x159c ) , stdin ) ; ReplacementFor_assert ( ( 0xab2 + 4157 - 0x1aee ) == sscanf ( buf , " \x25 \x64 " " \n " , & ReplacementFor_N ) ) ; for ( ReplacementFor_cnum = ( 0x1eeb + 1143 - 0x2361 ) ; ReplacementFor_cnum <= ReplacementFor_N ; ReplacementFor_cnum ++ ) { ReplacementFor_do_one_case ( ReplacementFor_cnum ) ; } return ( 0x19f3 + 299 - 0x1b1e ) ; }
>>>Func
