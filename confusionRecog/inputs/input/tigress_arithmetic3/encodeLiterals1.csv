METHOD _1_stringEncoder
METHOD_RETURN void
PARAM int n
PARAM char str[]
BLOCK <empty> <empty>
<operator>.assignment encodeStrings_i3 = 0
IDENTIFIER n switch(n)
LITERAL 3 <empty>
<operator>.assignment str[encodeStrings_i3] = 'C'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '#'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'l'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ':'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'l'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 2 <empty>
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'l'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 1 <empty>
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'l'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'l'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'l'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 0 <empty>
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'l'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
>>>PDG&83 0->2 0->3 0->4 0->5 0->6 0->7 0->8 0->9 0->10 0->11 0->12 0->13 0->14 0->15 0->16 0->17 0->18 0->19 0->20 0->21 0->22 0->23 0->24 0->25 0->26 0->27 0->28 0->29 0->30 0->31 0->32 0->33 0->34 0->35 0->36 0->37 0->38 0->39 0->40 0->41 0->42 0->43 0->44 0->45 0->46 0->47 0->48 0->49 0->50 0->51 0->52 0->53 0->54 0->55 0->56 0->57 0->58 0->59 0->60 0->61 0->62 0->63 0->64 0->65 0->66 0->67 0->68 0->69 0->70 0->71 0->72 0->73 0->74 0->75 0->76 0->77 0->78 0->79 0->80 0->81 0->82 2->1 3->1 5->1 5->1 5->9 5->42 5->51 5->76 8->1 9->11 10->1 11->13 12->1 13->15 14->1 15->17 17->19 18->1 19->21 21->23 23->25 25->27 26->1 27->29 28->1 29->31 30->1 31->33 32->1 33->35 34->1 35->37 36->1 37->39 38->1 38->1 39->1 39->1 41->1 42->44 43->1 44->46 45->1 46->48 47->1 47->1 48->1 48->1 51->53 53->55 55->57 57->59 59->61 61->63 63->65 64->1 65->67 66->1 67->69 68->1 69->71 70->1 71->73 72->1 72->1 73->1 73->1 75->1 76->78 77->1 78->80 79->1 80->82 81->1 81->1 82->1 82->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; char * * _global_argv = ( char * * ) 0 ; extern int fcntl ( int filedes , int cmd , ... ) ; void encodeStrings_litStr2_i $ nit ( void ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; int main ( int _formal_argc , char * * _formal_argv , char * * _formal_envp ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; void encodeStrings_litStr0_i $ nit ( void ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; int _global_argc = 0 ; void megaInit ( void ) ; char * * _global_envp = ( char * * ) 0 ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int ( /* missing proto */ printf ) ( ) ; extern int ( /* missing proto */ sort_d ) ( ) ; void encodeStrings_litStr3_i $ nit ( void ) ; extern int ( /* missing proto */ scanf ) ( ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern int ( /* missing proto */ sumk ) ( ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern double strtod ( char const * str , char const * endptr ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; void encodeStrings_litStr1_i $ nit ( void ) ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern double sqrt ( double x ) ; extern int open ( char const * filename , int oflag , ... ) ; char encodeStrings_litStr3 [ 16 ] ; char encodeStrings_litStr2 [ 4 ] ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern double log ( double x ) ; char encodeStrings_litStr1 [ 12 ] ; char encodeStrings_litStr0 [ 4 ] ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; void encodeStrings_litStr1_i $ nit ( void ) { { } } void encodeStrings_litStr0_i $ nit ( void ) { { } } void encodeStrings_litStr2_i $ nit ( void ) { { } } int main ( int _formal_argc , char * * _formal_argv , char * * _formal_envp ) { long a [ 1000 ] ; long p ; long k ; long l ; long tot ; long kp ; long tc ; long i ; long j ; long cur ; int tmp ; int _BARRIER_0 ; { megaInit ( ) ; _global_argc = _formal_argc ; _global_argv = _formal_argv ; _global_envp = _formal_envp ; _BARRIER_0 = 1 ; _1_stringEncoder ( 0 , encodeStrings_litStr0 ) ; scanf ( encodeStrings_litStr0 , & tc ) ; i = 1L ; while ( i <= tc ) { _1_stringEncoder ( 1 , encodeStrings_litStr1 ) ; scanf ( encodeStrings_litStr1 , & p , & k , & l ) ; j = 0L ; while ( j < l ) { _1_stringEncoder ( 2 , encodeStrings_litStr2 ) ; scanf ( encodeStrings_litStr2 , & a [ j ] ) ; j ++ ; } sort_d ( a , l ) ; cur = 0L ; kp = 1L ; tot = 0L ; while ( cur < l ) { tmp = sumk ( a , cur , k , l ) ; tot += kp * ( long ) tmp ; cur += k ; kp ++ ; } _1_stringEncoder ( 3 , encodeStrings_litStr3 ) ; printf ( encodeStrings_litStr3 , i , tot ) ; i ++ ; } return ( 0 ) ; } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { case 3 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 2 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 1 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 0 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; } } } void encodeStrings_litStr3_i $ nit ( void ) { { } } void megaInit ( void ) { { encodeStrings_litStr3_i $ nit ( ) ; encodeStrings_litStr2_i $ nit ( ) ; encodeStrings_litStr1_i $ nit ( ) ; encodeStrings_litStr0_i $ nit ( ) ; } }
>>>Func
METHOD fib
METHOD_RETURN void
PARAM unsigned long n
PARAM unsigned long *C
PARAM unsigned long *D
fib fib(n >> 1, & c, & d)
<operator>.assignment a = c * ((d << 1) - c)
<operator>.assignment b = c * c + d * d
<operator>.assignment *(C + 0) = b
RETURN return; return;
<operator>.equals n == 0UL
<operator>.equals n % 2UL == 0UL
IDENTIFIER D if (D)
<operator>.assignment *(C + 0) = 0UL
RETURN return; return;
<operator>.arithmeticShiftRight n >> 1
<operator>.multiplication c * ((d << 1) - c)
<operator>.addition c * c + d * d
<operator>.assignment *(C + 0) = a
RETURN return; return;
<operator>.assignment *(D + 0) = a + b
IDENTIFIER D if (D)
<operator>.subtraction (d << 1) - c
<operator>.multiplication c * c
<operator>.multiplication d * d
<operator>.modulo n % 2UL
IDENTIFIER D if (D)
<operator>.addition C + 0
<operator>.assignment *(D + 0) = 1UL
<operator>.shiftLeft d << 1
<operator>.assignment *(D + 0) = b
<operator>.addition a + b
<operator>.addition C + 0
<operator>.addition C + 0
<operator>.addition D + 0
<operator>.addition D + 0
<operator>.addition D + 0
<operator>.addressOf & c
<operator>.addressOf & d
<operator>.indirection *(C + 0)
<operator>.indirection *(C + 0)
<operator>.indirection *(C + 0)
<operator>.indirection *(D + 0)
<operator>.indirection *(D + 0)
<operator>.indirection *(D + 0)
>>>PDG&45 0->2 0->3 0->4 0->5 0->8 0->9 0->10 0->11 0->12 0->13 0->14 0->15 0->16 0->18 0->19 0->20 0->21 0->22 0->23 0->24 0->25 0->26 0->27 0->28 0->29 0->30 0->31 0->32 0->33 0->34 0->35 0->36 2->10 3->27 3->32 3->33 4->1 4->34 4->35 4->36 5->16 5->22 5->23 5->24 5->29 6->18 6->20 6->31 7->8 7->20 7->30 7->31 9->1 10->1 10->1 10->5 10->6 10->7 10->11 10->13 10->14 10->15 10->15 10->16 10->17 10->22 10->23 10->24 10->25 10->28 10->29 10->32 10->35 10->37 10->38 10->40 10->43 11->8 11->9 11->18 11->19 11->20 11->27 11->30 11->31 11->33 11->34 11->36 11->39 11->41 11->42 11->44 13->1 13->1 14->1 15->5 15->5 15->25 16->6 16->6 16->23 19->1 22->16 22->16 23->7 23->17 24->7 24->17 25->11 25->11 28->1 28->1 29->22 29->22 29->24 32->1 35->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; void main ( void ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int printf ( char const * format , ... ) ; void fib ( unsigned long n , unsigned long * C , unsigned long * D ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { } } } void megaInit ( void ) { { } } void fib ( unsigned long n , unsigned long * C , unsigned long * D ) { unsigned long a ; unsigned long b ; unsigned long c ; unsigned long d ; { if ( n == 0UL ) { * ( C + 0 ) = 0UL ; if ( D ) { * ( D + 0 ) = 1UL ; } return ; } fib ( n >> 1 , & c , & d ) ; a = c * ( ( d << 1 ) - c ) ; b = c * c + d * d ; if ( n % 2UL == 0UL ) { * ( C + 0 ) = a ; if ( D ) { * ( D + 0 ) = b ; } return ; } * ( C + 0 ) = b ; if ( D ) { * ( D + 0 ) = a + b ; } return ; } } void main ( void ) { { megaInit ( ) ; } }
>>>Func
METHOD main
METHOD_RETURN int
PARAM int _formal_argc
PARAM char **_formal_argv
PARAM char **_formal_envp
megaInit megaInit()
<operator>.assignment _global_argc = _formal_argc
<operator>.assignment _global_argv = _formal_argv
<operator>.assignment _global_envp = _formal_envp
<operator>.assignment _BARRIER_0 = 1
<operator>.assignment i = 1ULL
RETURN return (0); return (0);
<operator>.lessThan i < 10000000ULL
LITERAL 0 return (0);
<operator>.assignment tmp = isP(i)
<operator>.postIncrement i ++
IDENTIFIER tmp if (tmp)
isP isP(i)
<operator>.assignment tmp___0 = isP(i * i)
IDENTIFIER tmp___0 if (tmp___0)
isP isP(i * i)
_1_stringEncoder _1_stringEncoder(0, encodeStrings_litStr0)
printf printf(encodeStrings_litStr0, i * i)
<operator>.multiplication i * i
<operator>.multiplication i * i
>>>PDG&25 0->2 0->3 0->4 0->5 0->6 0->7 0->8 0->9 0->10 0->11 0->12 0->13 0->15 0->16 0->17 0->19 0->21 0->22 0->23 0->24 2->6 3->7 4->8 5->1 6->1 6->1 6->1 7->1 7->1 7->1 8->1 8->1 8->1 9->1 9->1 10->1 10->12 11->1 12->1 12->1 12->12 12->14 12->15 12->17 12->17 12->18 12->20 12->21 12->22 12->23 12->24 13->11 14->1 14->1 14->1 15->1 15->12 17->14 17->15 17->23 18->1 18->1 18->1 20->1 20->18 21->1 21->22 22->1 22->1 22->1 22->21 23->15 23->20 23->24 24->15 24->22
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; char * * _global_argv = ( char * * ) 0 ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; int main ( int _formal_argc , char * * _formal_argv , char * * _formal_envp ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; void encodeStrings_litStr0_i $ nit ( void ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; int _global_argc = 0 ; void megaInit ( void ) ; char * * _global_envp = ( char * * ) 0 ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int ( /* missing proto */ printf ) ( ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern int ( /* missing proto */ isP ) ( ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; char encodeStrings_litStr0 [ 7 ] ; int main ( int _formal_argc , char * * _formal_argv , char * * _formal_envp ) { unsigned long long i ; int tmp ; int tmp___0 ; int _BARRIER_0 ; { megaInit ( ) ; _global_argc = _formal_argc ; _global_argv = _formal_argv ; _global_envp = _formal_envp ; _BARRIER_0 = 1 ; i = 1ULL ; while ( i < 10000000ULL ) { tmp = isP ( i ) ; if ( tmp ) { tmp___0 = isP ( i * i ) ; if ( tmp___0 ) { _1_stringEncoder ( 0 , encodeStrings_litStr0 ) ; printf ( encodeStrings_litStr0 , i * i ) ; } } i ++ ; } return ( 0 ) ; } } void encodeStrings_litStr0_i $ nit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { case 0 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; } } } void megaInit ( void ) { { encodeStrings_litStr0_i $ nit ( ) ; } }
>>>Func
METHOD main
METHOD_RETURN int
PARAM int _formal_argc
PARAM char **_formal_argv
PARAM char **_formal_envp
megaInit megaInit()
<operator>.assignment _global_argc = _formal_argc
<operator>.assignment _global_argv = _formal_argv
<operator>.assignment _global_envp = _formal_envp
<operator>.assignment _BARRIER_0 = 1
_1_stringEncoder _1_stringEncoder(0, encodeStrings_litStr0)
scanf scanf(encodeStrings_litStr0, & N)
<operator>.assignment n = 0
RETURN return (0); return (0);
<operator>.lessThan n < N
LITERAL 0 return (0);
_1_stringEncoder _1_stringEncoder(1, encodeStrings_litStr1)
scanf scanf(encodeStrings_litStr1, & M)
<operator>.assignment i = 0
<operator>.assignment i = 0
sort sort(x, x + M)
sort sort(y, y + M)
<operator>.assignment sum = 0LL
<operator>.assignment d = 0
<operator>.assignment u = M - 1
<operator>.assignment k = d
_1_stringEncoder _1_stringEncoder(4, encodeStrings_litStr4)
printf printf(encodeStrings_litStr4, n + 1, sum)
<operator>.postIncrement n ++
<operator>.lessThan i < M
<operator>.lessThan i < M
LITERAL 1 while (1)
LITERAL 1 while (1)
<operator>.lessEqualsThan k <= u
_1_stringEncoder _1_stringEncoder(2, encodeStrings_litStr2)
scanf scanf(encodeStrings_litStr2, x + i)
<operator>.postIncrement i ++
_1_stringEncoder _1_stringEncoder(3, encodeStrings_litStr3)
scanf scanf(encodeStrings_litStr3, y + i)
<operator>.postIncrement i ++
<operator>.addition x + M
<operator>.addition y + M
<operator>.assignmentPlus sum += (long long )(x[d] * y[(M - d) - 1])
<operator>.postIncrement d ++
<operator>.subtraction M - 1
<operator>.assignmentPlus sum += (long long )(x[u] * y[(M - u) - 1])
<operator>.postDecrement u --
<operator>.assignmentPlus sum += (long long )(x[k] * y[(M - k) - 1])
assert assert(x[k] * y[(M - k) - 1] >= 0)
<operator>.postIncrement k ++
<operator>.addition n + 1
<operator>.lessThan x[d] < 0
<operator>.greaterThan x[u] > 0
<operator>.addition x + i
<operator>.addition y + i
<operator>.cast (long long )(x[d] * y[(M - d) - 1])
<operator>.cast (long long )(x[u] * y[(M - u) - 1])
<operator>.cast (long long )(x[k] * y[(M - k) - 1])
<operator>.greaterEqualsThan x[k] * y[(M - k) - 1] >= 0
<operator>.logicalNot ! (y[(M - d) - 1] > 0)
<operator>.multiplication x[d] * y[(M - d) - 1]
<operator>.logicalNot ! (y[(M - u) - 1] < 0)
<operator>.multiplication x[u] * y[(M - u) - 1]
<operator>.multiplication x[k] * y[(M - k) - 1]
<operator>.multiplication x[k] * y[(M - k) - 1]
<operator>.greaterThan y[(M - d) - 1] > 0
<operator>.subtraction (M - d) - 1
<operator>.lessThan y[(M - u) - 1] < 0
<operator>.subtraction (M - u) - 1
<operator>.subtraction (M - k) - 1
<operator>.subtraction (M - k) - 1
<operator>.subtraction M - d
<operator>.subtraction M - u
<operator>.subtraction M - k
<operator>.subtraction M - k
<operator>.subtraction (M - d) - 1
<operator>.subtraction (M - u) - 1
<operator>.subtraction M - d
<operator>.subtraction M - u
<operator>.addressOf & M
<operator>.indirectIndexAccess x[d]
UNKNOWN long long long long
<operator>.indirectIndexAccess x[u]
UNKNOWN long long long long
UNKNOWN long long long long
<operator>.indirectIndexAccess x[d]
<operator>.indirectIndexAccess y[(M - d) - 1]
<operator>.indirectIndexAccess x[u]
<operator>.indirectIndexAccess y[(M - u) - 1]
<operator>.indirectIndexAccess x[k]
<operator>.indirectIndexAccess y[(M - k) - 1]
<operator>.indirectIndexAccess x[k]
<operator>.indirectIndexAccess y[(M - k) - 1]
<operator>.indirectIndexAccess y[(M - d) - 1]
<operator>.indirectIndexAccess y[(M - u) - 1]
>>>PDG&95 0->2 0->3 0->4 0->5 0->6 0->7 0->8 0->9 0->10 0->11 0->12 0->13 0->14 0->15 0->16 0->17 0->18 0->19 0->20 0->21 0->22 0->23 0->25 0->26 0->27 0->28 0->29 0->30 0->31 0->32 0->33 0->34 0->35 0->36 0->37 0->38 0->39 0->40 0->41 0->42 0->43 0->44 0->45 0->46 0->47 0->49 0->50 0->51 0->52 0->53 0->54 0->58 0->65 0->66 0->67 0->68 0->69 0->70 0->71 0->72 0->73 0->74 0->75 0->76 0->77 0->78 2->6 3->7 4->8 5->1 6->1 6->1 6->1 7->1 7->1 7->1 8->1 8->1 8->1 9->1 9->1 10->1 11->1 11->1 11->14 12->1 12->14 13->1 14->1 14->1 14->1 14->14 14->16 14->17 14->18 14->19 14->20 14->21 14->22 14->23 14->24 14->25 14->26 14->27 14->27 14->28 14->28 14->29 14->30 14->33 14->40 14->41 14->44 14->50 14->50 14->51 14->52 14->79 14->80 14->82 15->13 16->1 17->1 17->1 17->20 17->21 17->29 17->30 17->40 17->41 17->44 17->71 17->72 17->73 17->74 17->77 17->78 18->29 19->1 19->30 20->1 20->1 20->1 20->35 20->40 20->51 20->52 20->53 20->60 20->62 20->63 20->64 21->1 21->1 21->1 21->38 21->41 21->54 21->60 21->62 21->63 21->64 21->65 21->67 22->1 22->27 22->42 22->45 22->47 23->1 23->25 23->77 24->1 24->1 24->33 24->78 25->1 25->1 25->33 26->1 26->27 27->1 27->1 27->1 27->1 27->26 28->1 28->14 29->29 29->30 29->34 29->35 29->35 29->36 29->36 29->53 29->53 30->1 30->1 30->20 30->21 30->30 30->37 30->38 30->38 30->39 30->39 30->40 30->41 30->44 30->54 30->54 30->77 33->1 33->1 33->1 33->33 33->47 33->48 33->49 33->57 33->58 33->63 33->64 33->69 33->70 33->73 33->73 33->74 33->84 33->89 33->90 33->91 33->92 34->1 35->1 35->1 36->1 36->29 37->1 38->1 38->1 39->1 39->30 42->1 42->1 42->27 42->45 42->47 43->1 43->25 43->77 44->1 44->17 44->24 44->24 44->29 44->73 44->78 45->1 45->1 45->27 45->47 46->1 46->33 46->78 47->1 47->1 47->27 48->1 48->1 49->1 49->33 51->1 51->1 51->20 51->35 51->40 51->53 51->59 51->60 51->65 51->75 51->77 51->93 52->1 52->1 52->20 52->35 52->40 52->53 52->61 52->62 52->67 52->76 52->78 52->94 55->1 56->1 58->1 58->48 58->48 59->1 59->1 59->42 59->43 59->51 59->55 59->60 59->66 59->71 59->80 59->81 59->85 59->86 60->1 60->1 60->20 60->21 60->35 60->38 60->40 60->41 60->42 60->42 60->51 60->53 60->54 60->55 60->55 60->65 61->1 61->1 61->45 61->46 61->52 61->56 61->62 61->68 61->72 61->82 61->83 61->87 61->88 62->1 62->1 62->20 62->21 62->35 62->38 62->40 62->41 62->45 62->45 62->52 62->53 62->54 62->56 62->56 62->67 63->47 63->47 63->57 63->57 63->64 63->64 64->1 64->1 64->20 64->21 64->35 64->38 64->40 64->41 64->53 64->54 64->58 64->58 64->63 64->63 65->1 65->21 65->38 65->41 65->54 65->59 65->59 65->60 66->1 67->1 67->21 67->38 67->41 67->54 67->61 67->61 67->62 68->1 70->1 71->43 71->44 71->66 71->66 71->77 72->1 72->17 72->29 72->46 72->68 72->68 72->73 72->78 73->69 73->69 73->74 73->74 74->1 74->17 74->29 74->49 74->70 74->70 74->73 75->1 76->1 77->25 77->44 77->71 77->71 77->75 77->75 78->1 78->17 78->29 78->33 78->72 78->72 78->73 78->76 78->76
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int ( /* missing proto */ sort ) ( ) ; extern int fclose ( void * stream ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; char * * _global_argv = ( char * * ) 0 ; extern int fcntl ( int filedes , int cmd , ... ) ; void encodeStrings_litStr2_i $ nit ( void ) ; extern int unlink ( char const * filename ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int ( /* missing proto */ assert ) ( ) ; extern int pthread_mutex_lock ( int * mutex ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; int main ( int _formal_argc , char * * _formal_argv , char * * _formal_envp ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; void encodeStrings_litStr0_i $ nit ( void ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; int _global_argc = 0 ; void megaInit ( void ) ; char * * _global_envp = ( char * * ) 0 ; void encodeStrings_litStr3_i $ nit ( void ) ; extern int ( /* missing proto */ printf ) ( ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int ( /* missing proto */ scanf ) ( ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern int strcmp ( char const * a , char const * b ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; void encodeStrings_litStr1_i $ nit ( void ) ; void encodeStrings_litStr4_i $ nit ( void ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; char encodeStrings_litStr4 [ 14 ] ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; char encodeStrings_litStr3 [ 4 ] ; char encodeStrings_litStr2 [ 4 ] ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern double log ( double x ) ; char encodeStrings_litStr1 [ 4 ] ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; char encodeStrings_litStr0 [ 4 ] ; void encodeStrings_litStr3_i $ nit ( void ) { { } } void encodeStrings_litStr2_i $ nit ( void ) { { } } void encodeStrings_litStr1_i $ nit ( void ) { { } } void megaInit ( void ) { { encodeStrings_litStr4_i $ nit ( ) ; encodeStrings_litStr3_i $ nit ( ) ; encodeStrings_litStr2_i $ nit ( ) ; encodeStrings_litStr1_i $ nit ( ) ; encodeStrings_litStr0_i $ nit ( ) ; } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { case 4 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 3 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 2 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 1 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 0 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; } } } int main ( int _formal_argc , char * * _formal_argv , char * * _formal_envp ) { int N ; int M ; int n ; int i ; int d ; int u ; int k ; int x [ 1000 ] ; int y [ 1000 ] ; long long sum ; int _BARRIER_0 ; { megaInit ( ) ; _global_argc = _formal_argc ; _global_argv = _formal_argv ; _global_envp = _formal_envp ; _BARRIER_0 = 1 ; _1_stringEncoder ( 0 , encodeStrings_litStr0 ) ; scanf ( encodeStrings_litStr0 , & N ) ; n = 0 ; while ( n < N ) { _1_stringEncoder ( 1 , encodeStrings_litStr1 ) ; scanf ( encodeStrings_litStr1 , & M ) ; i = 0 ; while ( i < M ) { _1_stringEncoder ( 2 , encodeStrings_litStr2 ) ; scanf ( encodeStrings_litStr2 , x + i ) ; i ++ ; } i = 0 ; while ( i < M ) { _1_stringEncoder ( 3 , encodeStrings_litStr3 ) ; scanf ( encodeStrings_litStr3 , y + i ) ; i ++ ; } sort ( x , x + M ) ; sort ( y , y + M ) ; sum = 0LL ; d = 0 ; while ( 1 ) { if ( x [ d ] < 0 ) { if ( ! ( y [ ( M - d ) - 1 ] > 0 ) ) { break ; } } else { break ; } sum += ( long long ) ( x [ d ] * y [ ( M - d ) - 1 ] ) ; d ++ ; } u = M - 1 ; while ( 1 ) { if ( x [ u ] > 0 ) { if ( ! ( y [ ( M - u ) - 1 ] < 0 ) ) { break ; } } else { break ; } sum += ( long long ) ( x [ u ] * y [ ( M - u ) - 1 ] ) ; u -- ; } k = d ; while ( k <= u ) { sum += ( long long ) ( x [ k ] * y [ ( M - k ) - 1 ] ) ; assert ( x [ k ] * y [ ( M - k ) - 1 ] >= 0 ) ; k ++ ; } _1_stringEncoder ( 4 , encodeStrings_litStr4 ) ; printf ( encodeStrings_litStr4 , n + 1 , sum ) ; n ++ ; } return ( 0 ) ; } } void encodeStrings_litStr4_i $ nit ( void ) { { } } void encodeStrings_litStr0_i $ nit ( void ) { { } }
>>>Func
METHOD isPalindrome
METHOD_RETURN int
PARAM char *str
<operator>.assignment i = 0
<operator>.assignment tmp = strlen(str)
<operator>.assignment j = tmp - 1
RETURN return (1); return (1);
<operator>.lessThan i < j
LITERAL 1 return (1);
strlen strlen(str)
<operator>.subtraction tmp - 1
<operator>.postIncrement i ++
<operator>.postDecrement j --
<operator>.notEquals (int )*(str + i) != (int )*(str + j)
RETURN return (0); return (0);
<operator>.cast (int )*(str + i)
<operator>.cast (int )*(str + j)
LITERAL 0 return (0);
<operator>.addition str + i
<operator>.addition str + j
UNKNOWN int int
<operator>.indirection *(str + i)
UNKNOWN int int
<operator>.indirection *(str + j)
>>>PDG&24 0->2 0->3 0->6 0->7 0->8 0->9 0->10 0->11 0->12 0->14 0->17 0->18 0->19 2->9 3->1 3->7 4->1 4->1 4->10 5->1 5->1 5->7 6->1 7->1 7->6 7->11 7->12 7->13 7->15 7->16 7->18 7->18 7->19 7->19 7->20 7->21 7->22 7->23 8->6 9->4 9->18 10->1 10->5 10->5 11->1 11->7 12->1 12->7 13->1 13->1 13->1 13->7 13->11 13->12 13->14 14->1 15->1 16->1 17->14 18->1 19->1 19->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern int ( /* missing proto */ strlen ) ( ) ; void main ( void ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; int isPalindrome ( char * str ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int printf ( char const * format , ... ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; int isPalindrome ( char * str ) { int i ; int j ; int tmp ; { i = 0 ; tmp = strlen ( str ) ; j = tmp - 1 ; while ( i < j ) { if ( ( int ) * ( str + i ) != ( int ) * ( str + j ) ) { return ( 0 ) ; } i ++ ; j -- ; } return ( 1 ) ; } } void megaInit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { } } } void main ( void ) { { megaInit ( ) ; } }
>>>Func
METHOD main
METHOD_RETURN int
PARAM int _formal_argc
PARAM char **_formal_argv
PARAM char **_formal_envp
megaInit megaInit()
<operator>.assignment _global_argc = _formal_argc
<operator>.assignment _global_argv = _formal_argv
<operator>.assignment _global_envp = _formal_envp
<operator>.assignment _BARRIER_0 = 1
test_adler32 test_adler32()
RETURN return (0); return (0);
LITERAL 0 return (0);
>>>PDG&13 0->2 0->3 0->4 0->5 0->6 0->7 0->8 0->9 0->10 0->11 0->12 2->6 3->7 4->8 5->1 6->1 6->1 6->1 7->1 7->1 7->1 8->1 8->1 8->1 9->1 9->1 10->1 11->1 12->11
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fclose ( void * stream ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; char * * _global_argv = ( char * * ) 0 ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int ( /* missing proto */ test_adler32 ) ( ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; int main ( int _formal_argc , char * * _formal_argv , char * * _formal_envp ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; int _global_argc = 0 ; char * * _global_envp = ( char * * ) 0 ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int printf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern int scanf ( char const * format , ... ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { } } } void megaInit ( void ) { { } } int main ( int _formal_argc , char * * _formal_argv , char * * _formal_envp ) { int _BARRIER_0 ; { megaInit ( ) ; _global_argc = _formal_argc ; _global_argv = _formal_argv ; _global_envp = _formal_envp ; _BARRIER_0 = 1 ; test_adler32 ( ) ; return ( 0 ) ; } }
>>>Func
METHOD min
METHOD_RETURN double
PARAM double n1
PARAM double n2
<operator>.lessThan n1 < n2
RETURN return (n1); return (n1);
IDENTIFIER n1 return (n1);
RETURN return (n2); return (n2);
IDENTIFIER n2 return (n2);
>>>PDG&9 0->2 0->3 0->4 0->6 0->8 2->4 3->4 4->1 4->1 4->1 4->5 4->6 4->7 4->8 5->1 6->5 7->1 8->7
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; double min ( double n1 , double n2 ) ; extern unsigned long strlen ( char const * s ) ; void main ( void ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int printf ( char const * format , ... ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; double min ( double n1 , double n2 ) { { if ( n1 < n2 ) { return ( n1 ) ; } else { return ( n2 ) ; } } } void megaInit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { } } } void main ( void ) { { megaInit ( ) ; } }
>>>Func
METHOD _1_stringEncoder
METHOD_RETURN void
PARAM int n
PARAM char str[]
BLOCK <empty> <empty>
<operator>.assignment encodeStrings_i3 = 0
IDENTIFIER n switch(n)
LITERAL 8 <empty>
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 7 <empty>
<operator>.assignment str[encodeStrings_i3] = 'E'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'h'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'v'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'l'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'u'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'o'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'f'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'h'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'o'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'o'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'b'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'l'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ':'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 6 <empty>
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 5 <empty>
<operator>.assignment str[encodeStrings_i3] = '\n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'E'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'y'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'o'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'u'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'c'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'h'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'o'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'i'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'c'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ':'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 4 <empty>
<operator>.assignment str[encodeStrings_i3] = '4'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ':'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'E'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'x'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'i'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 3 <empty>
<operator>.assignment str[encodeStrings_i3] = '3'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ':'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'T'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'v'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 2 <empty>
<operator>.assignment str[encodeStrings_i3] = '2'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ':'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'D'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'l'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'N'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'o'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 1 <empty>
<operator>.assignment str[encodeStrings_i3] = '1'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ':'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'C'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'L'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'i'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'k'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'L'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'i'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 0 <empty>
<operator>.assignment str[encodeStrings_i3] = '\n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'M'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'u'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ':'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
>>>PDG&310 0->2 0->3 0->4 0->5 0->6 0->7 0->8 0->9 0->10 0->11 0->12 0->13 0->14 0->15 0->16 0->17 0->18 0->19 0->20 0->21 0->22 0->23 0->24 0->25 0->26 0->27 0->28 0->29 0->30 0->31 0->32 0->33 0->34 0->35 0->36 0->37 0->38 0->39 0->40 0->41 0->42 0->43 0->44 0->45 0->46 0->47 0->48 0->49 0->50 0->51 0->52 0->53 0->54 0->55 0->56 0->57 0->58 0->59 0->60 0->61 0->62 0->63 0->64 0->65 0->66 0->67 0->68 0->69 0->70 0->71 0->72 0->73 0->74 0->75 0->76 0->77 0->78 0->79 0->80 0->81 0->82 0->83 0->84 0->85 0->86 0->87 0->88 0->89 0->90 0->91 0->92 0->93 0->94 0->95 0->96 0->97 0->98 0->99 0->100 0->101 0->102 0->103 0->104 0->105 0->106 0->107 0->108 0->109 0->110 0->111 0->112 0->113 0->114 0->115 0->116 0->117 0->118 0->119 0->120 0->121 0->122 0->123 0->124 0->125 0->126 0->127 0->128 0->129 0->130 0->131 0->132 0->133 0->134 0->135 0->136 0->137 0->138 0->139 0->140 0->141 0->142 0->143 0->144 0->145 0->146 0->147 0->148 0->149 0->150 0->151 0->152 0->153 0->154 0->155 0->156 0->157 0->158 0->159 0->160 0->161 0->162 0->163 0->164 0->165 0->166 0->167 0->168 0->169 0->170 0->171 0->172 0->173 0->174 0->175 0->176 0->177 0->178 0->179 0->180 0->181 0->182 0->183 0->184 0->185 0->186 0->187 0->188 0->189 0->190 0->191 0->192 0->193 0->194 0->195 0->196 0->197 0->198 0->199 0->200 0->201 0->202 0->203 0->204 0->205 0->206 0->207 0->208 0->209 0->210 0->211 0->212 0->213 0->214 0->215 0->216 0->217 0->218 0->219 0->220 0->221 0->222 0->223 0->224 0->225 0->226 0->227 0->228 0->229 0->230 0->231 0->232 0->233 0->234 0->235 0->236 0->237 0->238 0->239 0->240 0->241 0->242 0->243 0->244 0->245 0->246 0->247 0->248 0->249 0->250 0->251 0->252 0->253 0->254 0->255 0->256 0->257 0->258 0->259 0->260 0->261 0->262 0->263 0->264 0->265 0->266 0->267 0->268 0->269 0->270 0->271 0->272 0->273 0->274 0->275 0->276 0->277 0->278 0->279 0->280 0->281 0->282 0->283 0->284 0->285 0->286 0->287 0->288 0->289 0->290 0->291 0->292 0->293 0->294 0->295 0->296 0->297 0->298 0->299 0->300 0->301 0->302 0->303 0->304 0->305 0->306 0->307 0->308 0->309 2->1 3->1 5->1 5->1 5->9 5->16 5->115 5->122 5->165 5->184 5->211 5->244 5->291 8->1 9->11 10->1 11->13 12->1 12->1 13->1 13->1 15->1 16->18 18->20 20->22 22->24 23->1 24->26 26->28 28->30 30->32 32->34 34->36 36->38 38->40 40->42 42->44 44->46 45->1 46->48 47->1 48->50 50->52 51->1 52->54 54->56 56->58 58->60 59->1 60->62 62->64 64->66 65->1 66->68 68->70 70->72 71->1 72->74 74->76 76->78 78->80 80->82 82->84 83->1 84->86 86->88 87->1 88->90 90->92 92->94 94->96 96->98 97->1 98->100 100->102 101->1 102->104 103->1 104->106 105->1 106->108 107->1 108->110 109->1 110->112 111->1 111->1 112->1 112->1 114->1 115->117 116->1 117->119 118->1 118->1 119->1 119->1 121->1 122->124 123->1 124->126 125->1 126->128 127->1 128->130 130->132 132->134 134->136 135->1 136->138 138->140 139->1 140->142 141->1 142->144 144->146 146->148 147->1 148->150 149->1 150->152 151->1 152->154 153->1 154->156 155->1 156->158 157->1 158->160 159->1 160->162 161->1 161->1 162->1 162->1 164->1 165->167 166->1 167->169 168->1 169->171 170->1 171->173 172->1 173->175 174->1 175->177 176->1 177->179 178->1 179->181 180->1 180->1 181->1 181->1 183->1 184->186 185->1 186->188 187->1 188->190 190->192 191->1 192->194 193->1 194->196 196->198 197->1 198->200 199->1 200->202 201->1 202->204 203->1 204->206 205->1 206->208 207->1 207->1 208->1 208->1 210->1 211->213 212->1 213->215 214->1 215->217 217->219 218->1 219->221 221->223 222->1 223->225 225->227 227->229 228->1 229->231 230->1 231->233 232->1 233->235 234->1 235->237 236->1 237->239 238->1 239->241 240->1 240->1 241->1 241->1 243->1 244->246 245->1 246->248 247->1 248->250 249->1 250->252 252->254 253->1 254->256 256->258 258->260 260->262 262->264 264->266 265->1 266->268 267->1 268->270 269->1 270->272 271->1 272->274 274->276 275->1 276->278 277->1 278->280 279->1 280->282 281->1 282->284 283->1 284->286 285->1 286->288 287->1 287->1 288->1 288->1 291->293 293->295 294->1 295->297 296->1 297->299 298->1 299->301 300->1 301->303 302->1 303->305 304->1 305->307 306->1 307->309 308->1 308->1 309->1 309->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fclose ( void * stream ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; char * * _global_argv = ( char * * ) 0 ; void encodeStrings_litStr2_i $ nit ( void ) ; extern int unlink ( char const * filename ) ; extern int fcntl ( int filedes , int cmd , ... ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int pthread_mutex_lock ( int * mutex ) ; extern int pthread_cond_init ( int * cond , int * attr ) ; void encodeStrings_litStr5_i $ nit ( void ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern int raise ( int sig ) ; extern void abort ( ) ; void encodeStrings_litStr8_i $ nit ( void ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int getpagesize ( ) ; extern int ( /* missing proto */ traverse ) ( ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern int ( /* missing proto */ deletenode ) ( ) ; extern unsigned long strlen ( char const * s ) ; void main ( int _formal_argc , char * * _formal_argv , char * * _formal_envp ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern int ( /* missing proto */ create ) ( ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void encodeStrings_litStr0_i $ nit ( void ) ; int _global_argc = 0 ; void megaInit ( void ) ; char * * _global_envp = ( char * * ) 0 ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int ( /* missing proto */ printf ) ( ) ; void encodeStrings_litStr3_i $ nit ( void ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern int ( /* missing proto */ scanf ) ( ) ; void encodeStrings_litStr6_i $ nit ( void ) ; extern int ( /* missing proto */ clrscr ) ( ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern void signal ( int sig , void * func ) ; extern double difftime ( long tv1 , long tv0 ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; void encodeStrings_litStr1_i $ nit ( void ) ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int ( /* missing proto */ getch ) ( ) ; void encodeStrings_litStr4_i $ nit ( void ) ; char encodeStrings_litStr8 [ 3 ] ; char encodeStrings_litStr7 [ 49 ] ; char encodeStrings_litStr6 [ 3 ] ; void encodeStrings_litStr7_i $ nit ( void ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; char encodeStrings_litStr5 [ 21 ] ; extern int open ( char const * filename , int oflag , ... ) ; char encodeStrings_litStr4 [ 9 ] ; extern double sqrt ( double x ) ; char encodeStrings_litStr3 [ 13 ] ; char encodeStrings_litStr2 [ 16 ] ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; char encodeStrings_litStr1 [ 23 ] ; char encodeStrings_litStr0 [ 10 ] ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; void encodeStrings_litStr6_i $ nit ( void ) { { } } void megaInit ( void ) { { encodeStrings_litStr8_i $ nit ( ) ; encodeStrings_litStr7_i $ nit ( ) ; encodeStrings_litStr6_i $ nit ( ) ; encodeStrings_litStr5_i $ nit ( ) ; encodeStrings_litStr4_i $ nit ( ) ; encodeStrings_litStr3_i $ nit ( ) ; encodeStrings_litStr2_i $ nit ( ) ; encodeStrings_litStr1_i $ nit ( ) ; encodeStrings_litStr0_i $ nit ( ) ; } } void encodeStrings_litStr4_i $ nit ( void ) { { } } void main ( int _formal_argc , char * * _formal_argv , char * * _formal_envp ) { int k ; int ch ; int _BARRIER_0 ; { megaInit ( ) ; _global_argc = _formal_argc ; _global_argv = _formal_argv ; _global_envp = _formal_envp ; _BARRIER_0 = 1 ; clrscr ( ) ; while ( 1 ) { _1_stringEncoder ( 0 , encodeStrings_litStr0 ) ; printf ( encodeStrings_litStr0 ) ; _1_stringEncoder ( 1 , encodeStrings_litStr1 ) ; printf ( encodeStrings_litStr1 ) ; _1_stringEncoder ( 2 , encodeStrings_litStr2 ) ; printf ( encodeStrings_litStr2 ) ; _1_stringEncoder ( 3 , encodeStrings_litStr3 ) ; printf ( encodeStrings_litStr3 ) ; _1_stringEncoder ( 4 , encodeStrings_litStr4 ) ; printf ( encodeStrings_litStr4 ) ; _1_stringEncoder ( 5 , encodeStrings_litStr5 ) ; printf ( encodeStrings_litStr5 ) ; _1_stringEncoder ( 6 , encodeStrings_litStr6 ) ; scanf ( encodeStrings_litStr6 , & ch ) ; switch ( ch ) { case 1 : create ( ) ; break ; case 2 : _1_stringEncoder ( 7 , encodeStrings_litStr7 ) ; printf ( encodeStrings_litStr7 ) ; _1_stringEncoder ( 8 , encodeStrings_litStr8 ) ; scanf ( encodeStrings_litStr8 , & k ) ; deletenode ( k ) ; break ; case 3 : traverse ( ) ; break ; case 4 : break ; } if ( ! ( ch != 4 ) ) { break ; } } getch ( ) ; return ; } } void encodeStrings_litStr1_i $ nit ( void ) { { } } void encodeStrings_litStr2_i $ nit ( void ) { { } } void encodeStrings_litStr3_i $ nit ( void ) { { } } void encodeStrings_litStr8_i $ nit ( void ) { { } } void encodeStrings_litStr5_i $ nit ( void ) { { } } void encodeStrings_litStr7_i $ nit ( void ) { { } } void encodeStrings_litStr0_i $ nit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { case 8 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 7 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 6 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 5 : str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 4 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 3 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 2 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 1 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 0 : str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; } } }
>>>Func
METHOD _1_stringEncoder
METHOD_RETURN void
PARAM int n
PARAM char str[]
BLOCK <empty> <empty>
<operator>.assignment encodeStrings_i3 = 0
IDENTIFIER n switch(n)
LITERAL 1 <empty>
<operator>.assignment str[encodeStrings_i3] = '\n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 0 <empty>
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
>>>PDG&21 0->2 0->3 0->4 0->5 0->6 0->7 0->8 0->9 0->10 0->11 0->12 0->13 0->14 0->15 0->16 0->17 0->18 0->19 0->20 2->1 3->1 5->1 5->1 5->9 5->14 8->1 9->11 10->1 10->1 11->1 11->1 13->1 14->16 15->1 16->18 17->1 18->20 19->1 19->1 20->1 20->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int unlink ( char const * filename ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; void main ( void ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void encodeStrings_litStr0_i $ nit ( void ) ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int ( /* missing proto */ printf ) ( ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; void encodeStrings_litStr1_i $ nit ( void ) ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; void display ( int * array , int n ) ; extern double sqrt ( double x ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; char encodeStrings_litStr1 [ 2 ] ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; char encodeStrings_litStr0 [ 4 ] ; void encodeStrings_litStr0_i $ nit ( void ) { { } } void main ( void ) { { megaInit ( ) ; } } void megaInit ( void ) { { encodeStrings_litStr1_i $ nit ( ) ; encodeStrings_litStr0_i $ nit ( ) ; } } void encodeStrings_litStr1_i $ nit ( void ) { { } } void display ( int * array , int n ) { int i ; { i = 0 ; while ( i < n ) { _1_stringEncoder ( 0 , encodeStrings_litStr0 ) ; printf ( encodeStrings_litStr0 , * ( array + i ) ) ; i ++ ; } _1_stringEncoder ( 1 , encodeStrings_litStr1 ) ; printf ( encodeStrings_litStr1 ) ; return ; } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { case 1 : str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 0 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; } } }
>>>Func
METHOD binarySearch
METHOD_RETURN int
PARAM int *arr
PARAM int key
PARAM int low
PARAM int high
<operator>.assignment mid = low + (high - 1) / 2
<operator>.greaterEqualsThan low >= high
<operator>.equals *(arr + mid) == key
RETURN return (tmp); return (tmp);
<operator>.addition low + (high - 1) / 2
RETURN return (mid + 1); return (mid + 1);
<operator>.greaterThan key > *(arr + low)
IDENTIFIER tmp return (tmp);
<operator>.division (high - 1) / 2
<operator>.addition mid + 1
<operator>.assignment tmp = low + 1
<operator>.subtraction high - 1
<operator>.addition arr + mid
<operator>.greaterThan *(arr + mid) > key
<operator>.assignment tmp = low
<operator>.assignment tmp___0 = binarySearch(arr, key, low, mid - 1)
RETURN return (tmp___0); return (tmp___0);
<operator>.addition arr + low
<operator>.addition low + 1
IDENTIFIER tmp___0 return (tmp___0);
<operator>.assignment tmp___1 = binarySearch(arr, key, mid + 1, high)
RETURN return (tmp___1); return (tmp___1);
<operator>.addition arr + mid
binarySearch binarySearch(arr, key, low, mid - 1)
IDENTIFIER tmp___1 return (tmp___1);
<operator>.subtraction mid - 1
binarySearch binarySearch(arr, key, mid + 1, high)
<operator>.addition mid + 1
<operator>.indirection *(arr + mid)
<operator>.indirection *(arr + low)
<operator>.indirection *(arr + mid)
>>>PDG&37 0->2 0->3 0->4 0->5 0->6 0->7 0->8 0->10 0->12 0->13 0->14 0->15 0->16 0->17 0->18 0->19 0->20 0->23 0->24 0->25 0->28 0->29 0->30 0->31 0->32 0->33 2->18 2->23 2->28 2->29 2->32 3->8 3->12 4->7 5->7 6->15 6->18 6->28 6->31 6->32 6->33 7->1 7->1 7->6 7->6 7->8 7->9 7->10 7->10 7->12 7->14 7->16 7->17 7->17 7->18 7->20 7->23 7->23 7->24 7->29 7->34 7->35 8->11 8->15 8->19 8->19 8->28 8->36 9->1 11->1 12->1 12->1 12->1 12->16 12->20 12->24 13->9 14->6 14->6 14->10 14->10 15->11 16->1 16->1 16->1 16->13 17->14 17->14 17->32 19->21 19->22 19->26 19->27 19->29 19->29 19->31 19->32 19->32 19->33 20->1 20->1 20->1 20->13 21->25 22->1 23->1 24->1 25->22 26->30 27->1 29->21 29->21 29->21 29->21 30->27 31->29 31->29 32->26 32->26 32->26 32->26
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; void main ( void ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int printf ( char const * format , ... ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; int binarySearch ( int * arr , int key , int low , int high ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; int binarySearch ( int * arr , int key , int low , int high ) { int tmp ; int mid ; int tmp___0 ; int tmp___1 ; { if ( low >= high ) { if ( key > * ( arr + low ) ) { tmp = low + 1 ; } else { tmp = low ; } return ( tmp ) ; } mid = low + ( high - 1 ) / 2 ; if ( * ( arr + mid ) == key ) { return ( mid + 1 ) ; } else if ( * ( arr + mid ) > key ) { tmp___0 = binarySearch ( arr , key , low , mid - 1 ) ; return ( tmp___0 ) ; } else { tmp___1 = binarySearch ( arr , key , mid + 1 , high ) ; return ( tmp___1 ) ; } } } void megaInit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { } } } void main ( void ) { { megaInit ( ) ; } }
>>>Func
METHOD _1_stringEncoder
METHOD_RETURN void
PARAM int n
PARAM char str[]
BLOCK <empty> <empty>
<operator>.assignment encodeStrings_i3 = 0
IDENTIFIER n switch(n)
LITERAL 0 <empty>
<operator>.assignment str[encodeStrings_i3] = 'U'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'g'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ':'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'p'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'o'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'g'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'm'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '-'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'm'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'g'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'u'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'm'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
>>>PDG&68 0->2 0->3 0->4 0->5 0->6 0->7 0->8 0->9 0->10 0->11 0->12 0->13 0->14 0->15 0->16 0->17 0->18 0->19 0->20 0->21 0->22 0->23 0->24 0->25 0->26 0->27 0->28 0->29 0->30 0->31 0->32 0->33 0->34 0->35 0->36 0->37 0->38 0->39 0->40 0->41 0->42 0->43 0->44 0->45 0->46 0->47 0->48 0->49 0->50 0->51 0->52 0->53 0->54 0->55 0->56 0->57 0->58 0->59 0->60 0->61 0->62 0->63 0->64 0->65 0->66 0->67 2->1 3->1 5->1 5->1 5->9 8->1 9->11 10->1 11->13 13->15 15->17 17->19 18->1 19->21 21->23 22->1 23->25 25->27 26->1 27->29 29->31 31->33 33->35 35->37 36->1 37->39 39->41 41->43 43->45 45->47 46->1 47->49 48->1 49->51 50->1 51->53 52->1 53->55 54->1 55->57 56->1 57->59 58->1 59->61 60->1 61->63 62->1 63->65 64->1 65->67 66->1 66->1 67->1 67->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; char * * _global_argv = ( char * * ) 0 ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; int main ( int argc , char * * argv , char * * _formal_envp ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; void encodeStrings_litStr0_i $ nit ( void ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; int _global_argc = 0 ; void megaInit ( void ) ; char * * _global_envp = ( char * * ) 0 ; extern int ( /* missing proto */ printf ) ( ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; char encodeStrings_litStr0 [ 30 ] ; void megaInit ( void ) { { encodeStrings_litStr0_i $ nit ( ) ; } } void encodeStrings_litStr0_i $ nit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { case 0 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; } } } int main ( int argc , char * * argv , char * * _formal_envp ) { int _BARRIER_0 ; { megaInit ( ) ; _global_argc = argc ; _global_argv = argv ; _global_envp = _formal_envp ; _BARRIER_0 = 1 ; if ( argc < 2 ) { _1_stringEncoder ( 0 , encodeStrings_litStr0 ) ; printf ( encodeStrings_litStr0 ) ; return ( 1 ) ; } return ( 0 ) ; } }
>>>Func
METHOD _1_stringEncoder
METHOD_RETURN void
PARAM int n
PARAM char str[]
BLOCK <empty> <empty>
<operator>.assignment encodeStrings_i3 = 0
IDENTIFIER n switch(n)
LITERAL 5 <empty>
<operator>.assignment str[encodeStrings_i3] = 'C'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '#'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ':'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 4 <empty>
<operator>.assignment str[encodeStrings_i3] = 'C'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '#'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ':'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'B'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'm'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'g'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'i'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'c'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'i'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '!'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 3 <empty>
<operator>.assignment str[encodeStrings_i3] = 'C'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '#'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ':'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'V'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'o'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'l'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'u'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'c'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'h'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '!'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 2 <empty>
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 1 <empty>
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 0 <empty>
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
>>>PDG&169 0->2 0->3 0->4 0->5 0->6 0->7 0->8 0->9 0->10 0->11 0->12 0->13 0->14 0->15 0->16 0->17 0->18 0->19 0->20 0->21 0->22 0->23 0->24 0->25 0->26 0->27 0->28 0->29 0->30 0->31 0->32 0->33 0->34 0->35 0->36 0->37 0->38 0->39 0->40 0->41 0->42 0->43 0->44 0->45 0->46 0->47 0->48 0->49 0->50 0->51 0->52 0->53 0->54 0->55 0->56 0->57 0->58 0->59 0->60 0->61 0->62 0->63 0->64 0->65 0->66 0->67 0->68 0->69 0->70 0->71 0->72 0->73 0->74 0->75 0->76 0->77 0->78 0->79 0->80 0->81 0->82 0->83 0->84 0->85 0->86 0->87 0->88 0->89 0->90 0->91 0->92 0->93 0->94 0->95 0->96 0->97 0->98 0->99 0->100 0->101 0->102 0->103 0->104 0->105 0->106 0->107 0->108 0->109 0->110 0->111 0->112 0->113 0->114 0->115 0->116 0->117 0->118 0->119 0->120 0->121 0->122 0->123 0->124 0->125 0->126 0->127 0->128 0->129 0->130 0->131 0->132 0->133 0->134 0->135 0->136 0->137 0->138 0->139 0->140 0->141 0->142 0->143 0->144 0->145 0->146 0->147 0->148 0->149 0->150 0->151 0->152 0->153 0->154 0->155 0->156 0->157 0->158 0->159 0->160 0->161 0->162 0->163 0->164 0->165 0->166 0->167 0->168 2->1 3->1 5->1 5->1 5->9 5->38 5->89 5->150 5->157 5->164 8->1 9->11 10->1 11->13 12->1 13->15 14->1 15->17 17->19 18->1 19->21 21->23 23->25 24->1 25->27 26->1 27->29 28->1 29->31 30->1 31->33 32->1 33->35 34->1 34->1 35->1 35->1 37->1 38->40 40->42 41->1 42->44 43->1 44->46 46->48 47->1 48->50 49->1 50->52 52->54 53->1 54->56 56->58 57->1 58->60 60->62 61->1 62->64 63->1 64->66 65->1 66->68 68->70 69->1 70->72 72->74 73->1 74->76 75->1 76->78 77->1 78->80 79->1 80->82 81->1 82->84 83->1 84->86 85->1 85->1 86->1 86->1 88->1 89->91 91->93 92->1 93->95 95->97 97->99 98->1 99->101 100->1 101->103 103->105 104->1 105->107 107->109 108->1 109->111 110->1 111->113 112->1 113->115 114->1 115->117 116->1 117->119 119->121 121->123 123->125 124->1 125->127 126->1 127->129 128->1 129->131 130->1 131->133 133->135 134->1 135->137 136->1 137->139 138->1 139->141 140->1 141->143 142->1 143->145 144->1 145->147 146->1 146->1 147->1 147->1 149->1 150->152 151->1 152->154 153->1 153->1 154->1 154->1 156->1 157->159 158->1 159->161 160->1 160->1 161->1 161->1 163->1 164->166 165->1 166->168 167->1 167->1 168->1 168->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern void exit ( int status ) ; extern int pthread_cond_signal ( int * cond ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; char * * _global_argv = ( char * * ) 0 ; extern int fcntl ( int filedes , int cmd , ... ) ; void encodeStrings_litStr2_i $ nit ( void ) ; extern int unlink ( char const * filename ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int pthread_mutex_lock ( int * mutex ) ; extern int pthread_cond_init ( int * cond , int * attr ) ; void encodeStrings_litStr5_i $ nit ( void ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int getpagesize ( ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; int main ( int _formal_argc , char * * _formal_argv , char * * _formal_envp ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; void encodeStrings_litStr0_i $ nit ( void ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; int _global_argc = 0 ; void megaInit ( void ) ; char * * _global_envp = ( char * * ) 0 ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; void encodeStrings_litStr3_i $ nit ( void ) ; extern int ( /* missing proto */ printf ) ( ) ; extern int ( /* missing proto */ scanf ) ( ) ; extern void perror ( char const * str ) ; extern long clock ( void ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern double strtod ( char const * str , char const * endptr ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; void encodeStrings_litStr1_i $ nit ( void ) ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; void encodeStrings_litStr4_i $ nit ( void ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; char encodeStrings_litStr5 [ 14 ] ; extern int open ( char const * filename , int oflag , ... ) ; char encodeStrings_litStr4 [ 25 ] ; extern double sqrt ( double x ) ; char encodeStrings_litStr3 [ 30 ] ; char encodeStrings_litStr2 [ 3 ] ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; char encodeStrings_litStr1 [ 3 ] ; char encodeStrings_litStr0 [ 3 ] ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; int main ( int _formal_argc , char * * _formal_argv , char * * _formal_envp ) { int i ; int j ; int k ; int n ; int row ; int pos [ 32 ] ; int tmp ; int _BARRIER_0 ; { megaInit ( ) ; _global_argc = _formal_argc ; _global_argv = _formal_argv ; _global_envp = _formal_envp ; _BARRIER_0 = 1 ; _1_stringEncoder ( 0 , encodeStrings_litStr0 ) ; scanf ( encodeStrings_litStr0 , & n ) ; i = 0 ; while ( i < n ) { j = 0 ; while ( j < 32 ) { pos [ j ] = 0 ; j ++ ; } k = 0 ; while ( k < 2 ) { _1_stringEncoder ( 1 , encodeStrings_litStr1 ) ; scanf ( encodeStrings_litStr1 , & row ) ; j = 0 ; while ( j < 16 ) { _1_stringEncoder ( 2 , encodeStrings_litStr2 ) ; scanf ( encodeStrings_litStr2 , & tmp ) ; if ( row - 1 == j / 4 ) { ( pos [ tmp ] ) ++ ; } j ++ ; } k ++ ; } tmp = 0 ; j = 1 ; while ( j <= 16 ) { if ( pos [ j ] == 2 ) { if ( tmp ) { tmp = 17 ; } else { tmp = j ; } } j ++ ; } if ( tmp == 0 ) { _1_stringEncoder ( 3 , encodeStrings_litStr3 ) ; printf ( encodeStrings_litStr3 , i + 1 ) ; goto __Cont ; } if ( tmp == 17 ) { _1_stringEncoder ( 4 , encodeStrings_litStr4 ) ; printf ( encodeStrings_litStr4 , i + 1 ) ; goto __Cont ; } _1_stringEncoder ( 5 , encodeStrings_litStr5 ) ; printf ( encodeStrings_litStr5 , i + 1 , tmp ) ; __Cont : /* CIL Label */ i ++ ; } return ( 0 ) ; } } void encodeStrings_litStr5_i $ nit ( void ) { { } } void encodeStrings_litStr3_i $ nit ( void ) { { } } void encodeStrings_litStr4_i $ nit ( void ) { { } } void encodeStrings_litStr0_i $ nit ( void ) { { } } void encodeStrings_litStr1_i $ nit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { case 5 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 4 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 3 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 2 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 1 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 0 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; } } } void megaInit ( void ) { { encodeStrings_litStr5_i $ nit ( ) ; encodeStrings_litStr4_i $ nit ( ) ; encodeStrings_litStr3_i $ nit ( ) ; encodeStrings_litStr2_i $ nit ( ) ; encodeStrings_litStr1_i $ nit ( ) ; encodeStrings_litStr0_i $ nit ( ) ; } } void encodeStrings_litStr2_i $ nit ( void ) { { } }
>>>Func
METHOD ways
METHOD_RETURN int
PARAM int n
PARAM int *a
PARAM int k
<operator>.assignment tmp = ways(n, a, k - 1)
<operator>.assignment tmp___0 = ways(n - *(a + (k - 1)), a, k)
RETURN return (tmp + tmp___0); return (tmp + tmp___0);
<operator>.lessThan n < 0
<operator>.equals n == 0
<operator>.equals k == 0
<operator>.addition tmp + tmp___0
RETURN return (0); return (0);
RETURN return (1); return (1);
RETURN return (0); return (0);
ways ways(n, a, k - 1)
ways ways(n - *(a + (k - 1)), a, k)
LITERAL 0 return (0);
LITERAL 1 return (1);
LITERAL 0 return (0);
<operator>.subtraction k - 1
<operator>.subtraction n - *(a + (k - 1))
<operator>.lessThan k < 0
RETURN return (0); return (0);
<operator>.addition a + (k - 1)
LITERAL 0 return (0);
<operator>.subtraction k - 1
<operator>.indirection *(a + (k - 1))
>>>PDG&28 0->2 0->3 0->4 0->8 0->9 0->10 0->11 0->12 0->13 0->14 0->15 0->16 0->17 0->18 0->19 0->20 0->21 0->22 0->23 0->24 0->25 0->26 2->8 3->1 3->15 4->1 4->22 5->11 6->11 7->1 8->1 8->1 8->9 8->12 8->22 9->10 9->13 9->15 10->5 10->6 10->7 10->11 10->14 10->15 10->16 10->20 10->20 10->21 10->24 10->26 10->27 11->7 12->1 13->1 14->1 15->5 15->5 15->5 15->16 15->21 15->24 16->6 16->6 16->6 17->12 18->13 19->14 20->15 20->15 20->26 21->16 21->16 22->9 22->10 22->23 23->1 25->23 26->16 26->24 26->24
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; void main ( void ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int printf ( char const * format , ... ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; int ways ( int n , int * a , int k ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; int ways ( int n , int * a , int k ) { int tmp ; int tmp___0 ; { if ( n < 0 ) { return ( 0 ) ; } else if ( k < 0 ) { return ( 0 ) ; } if ( n == 0 ) { return ( 1 ) ; } if ( k == 0 ) { return ( 0 ) ; } tmp = ways ( n , a , k - 1 ) ; tmp___0 = ways ( n - * ( a + ( k - 1 ) ) , a , k ) ; return ( tmp + tmp___0 ) ; } } void megaInit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { } } } void main ( void ) { { megaInit ( ) ; } }
>>>Func
METHOD int_compare
METHOD_RETURN int
PARAM void *vlocation1
PARAM void *vlocation2
<operator>.assignment location1 = (int *)vlocation1
<operator>.assignment location2 = (int *)vlocation2
<operator>.lessThan *location1 < *location2
<operator>.cast (int *)vlocation1
<operator>.cast (int *)vlocation2
RETURN return (-1); return (-1);
<operator>.minus -1
<operator>.greaterThan *location1 > *location2
RETURN return (1); return (1);
LITERAL 1 return (1);
RETURN return (0); return (0);
LITERAL 0 return (0);
<operator>.indirection *location1
<operator>.indirection *location2
>>>PDG&18 0->2 0->3 0->4 0->5 0->7 0->8 0->10 0->12 0->13 0->14 0->15 2->4 2->7 3->5 3->8 4->1 4->1 4->1 5->1 5->1 5->1 6->1 6->1 6->1 6->9 6->10 6->11 6->11 6->11 6->16 6->17 7->1 8->1 9->1 10->1 10->9 11->12 11->14 12->1 13->12 14->1 15->14
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; void main ( void ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int printf ( char const * format , ... ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; int int_compare ( void * vlocation1 , void * vlocation2 ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { } } } void megaInit ( void ) { { } } int int_compare ( void * vlocation1 , void * vlocation2 ) { int * location1 ; int * location2 ; { location1 = ( int * ) vlocation1 ; location2 = ( int * ) vlocation2 ; if ( * location1 < * location2 ) { return ( -1 ) ; } else if ( * location1 > * location2 ) { return ( 1 ) ; } else { return ( 0 ) ; } } } void main ( void ) { { megaInit ( ) ; } }
>>>Func
METHOD Sort
METHOD_RETURN int*
PARAM int *values
PARAM int size
<operator>.assignment i = 0
RETURN return (values); return (values);
<operator>.lessThan i < size
IDENTIFIER values return (values);
<operator>.assignment value = *(values + i)
<operator>.assignment j = i - 1
<operator>.assignment *(values + (j + 1)) = value
<operator>.postIncrement i ++
LITERAL 1 while (1)
<operator>.subtraction i - 1
<operator>.assignment *(values + (j + 1)) = *(values + j)
<operator>.postDecrement j --
<operator>.addition values + i
<operator>.greaterEqualsThan j >= 0
<operator>.addition values + (j + 1)
<operator>.addition j + 1
<operator>.logicalNot ! (*(values + j) > value)
<operator>.addition values + (j + 1)
<operator>.addition values + j
<operator>.addition j + 1
<operator>.greaterThan *(values + j) > value
<operator>.addition values + j
<operator>.indirection *(values + i)
<operator>.indirection *(values + (j + 1))
<operator>.indirection *(values + (j + 1))
<operator>.indirection *(values + j)
<operator>.indirection *(values + j)
>>>PDG&31 0->2 0->3 0->4 0->6 0->7 0->10 0->11 0->12 0->13 0->15 0->16 0->17 0->18 0->19 0->21 0->22 0->23 0->24 0->25 2->1 2->7 2->16 2->18 2->25 3->6 4->1 4->6 5->1 6->1 6->1 6->1 6->6 6->8 6->9 6->10 6->11 6->13 6->13 6->16 6->16 6->17 6->18 6->19 6->26 6->27 7->5 8->1 8->1 8->10 8->24 9->1 9->1 9->17 9->18 9->19 10->1 10->1 10->1 11->1 11->6 13->9 13->9 13->11 14->1 14->1 15->1 15->17 15->18 15->19 17->1 17->15 17->18 17->19 17->20 17->21 17->22 17->23 17->24 17->25 17->25 17->30 18->1 18->1 19->1 20->1 20->1 20->14 20->15 20->17 20->21 20->22 20->23 20->28 20->29 24->1 24->10 24->20 24->20
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; void main ( void ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int printf ( char const * format , ... ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; int * Sort ( int * values , int size ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; int * Sort ( int * values , int size ) { int i ; int j ; int value ; { i = 0 ; while ( i < size ) { value = * ( values + i ) ; j = i - 1 ; while ( 1 ) { if ( j >= 0 ) { if ( ! ( * ( values + j ) > value ) ) { break ; } } else { break ; } * ( values + ( j + 1 ) ) = * ( values + j ) ; j -- ; } * ( values + ( j + 1 ) ) = value ; i ++ ; } return ( values ) ; } } void megaInit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { } } } void main ( void ) { { megaInit ( ) ; } }
>>>Func
METHOD string_equal
METHOD_RETURN int
PARAM void *string1
PARAM void *string2
<operator>.assignment tmp = strcmp((char *)string1  (char *)string2)
RETURN return (tmp == 0); return (tmp == 0);
<operator>.equals tmp == 0
strcmp strcmp((char *)string1  (char *)string2)
<operator>.cast (char *)string1
<operator>.cast (char *)string2
>>>PDG&10 0->2 0->3 0->6 0->7 0->8 0->9 2->7 2->8 3->7 3->9 4->1 4->1 4->6 5->1 6->1 6->1 6->5 7->1 7->1 7->4 7->4 8->1 9->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; void main ( void ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int printf ( char const * format , ... ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int ( /* missing proto */ strcmp ) ( ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; int string_equal ( void * string1 , void * string2 ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; int string_equal ( void * string1 , void * string2 ) { int tmp ; { tmp = strcmp ( ( char * ) string1 , ( char * ) string2 ) ; return ( tmp == 0 ) ; } } void megaInit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { } } } void main ( void ) { { megaInit ( ) ; } }
>>>Func
METHOD build_maxheap
METHOD_RETURN void
PARAM int *a
PARAM int n
<operator>.assignment i = n / 2
RETURN return; return;
<operator>.greaterEqualsThan i >= 1
<operator>.division n / 2
max_heapify max_heapify(a, i, n)
<operator>.postDecrement i --
>>>PDG&10 0->2 0->3 0->5 0->6 0->7 0->8 0->9 2->1 2->8 3->7 4->1 4->1 4->6 5->1 6->1 6->1 6->6 6->8 6->8 6->9 7->1 7->4 7->4 7->8 8->1 8->1 8->1 8->9 9->1 9->6
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern int ( /* missing proto */ max_heapify ) ( ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; void build_maxheap ( int * a , int n ) ; extern unsigned long strlen ( char const * s ) ; void main ( void ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int printf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern int scanf ( char const * format , ... ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern float strtof ( char const * str , char const * endptr ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; void megaInit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { } } } void main ( void ) { { megaInit ( ) ; } } void build_maxheap ( int * a , int n ) { int i ; { i = n / 2 ; while ( i >= 1 ) { max_heapify ( a , i , n ) ; i -- ; } return ; } }
>>>Func
METHOD maxval
METHOD_RETURN int
PARAM int a
PARAM int b
<operator>.greaterThan a > b
RETURN return (a); return (a);
IDENTIFIER a return (a);
RETURN return (b); return (b);
IDENTIFIER b return (b);
>>>PDG&9 0->2 0->3 0->4 0->6 0->8 2->4 3->4 4->1 4->1 4->1 4->5 4->6 4->7 4->8 5->1 6->5 7->1 8->7
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; void main ( void ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int printf ( char const * format , ... ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; int maxval ( int a , int b ) ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; int maxval ( int a , int b ) { { if ( a > b ) { return ( a ) ; } else { return ( b ) ; } } } void megaInit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { } } } void main ( void ) { { megaInit ( ) ; } }
>>>Func
METHOD _1_stringEncoder
METHOD_RETURN void
PARAM int n
PARAM char str[]
BLOCK <empty> <empty>
<operator>.assignment encodeStrings_i3 = 0
IDENTIFIER n switch(n)
LITERAL 0 <empty>
<operator>.assignment str[encodeStrings_i3] = 'F'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'o'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'u'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'i'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'x'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ':'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
>>>PDG&46 0->2 0->3 0->4 0->5 0->6 0->7 0->8 0->9 0->10 0->11 0->12 0->13 0->14 0->15 0->16 0->17 0->18 0->19 0->20 0->21 0->22 0->23 0->24 0->25 0->26 0->27 0->28 0->29 0->30 0->31 0->32 0->33 0->34 0->35 0->36 0->37 0->38 0->39 0->40 0->41 0->42 0->43 0->44 0->45 2->1 3->1 5->1 5->1 5->9 8->1 9->11 10->1 11->13 12->1 13->15 15->17 17->19 19->21 20->1 21->23 22->1 23->25 25->27 26->1 27->29 28->1 29->31 31->33 32->1 33->35 34->1 35->37 36->1 37->39 38->1 39->41 40->1 41->43 42->1 43->45 44->1 44->1 45->1 45->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; char * * _global_argv = ( char * * ) 0 ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int ( /* missing proto */ fibMonaccianSearch ) ( ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; int main ( int _formal_argc , char * * _formal_argv , char * * _formal_envp ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; void encodeStrings_litStr0_i $ nit ( void ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; int _global_argc = 0 ; void megaInit ( void ) ; char * * _global_envp = ( char * * ) 0 ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int ( /* missing proto */ printf ) ( ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; char encodeStrings_litStr0 [ 19 ] ; int main ( int _formal_argc , char * * _formal_argv , char * * _formal_envp ) { int arr [ 11 ] ; int n ; int x ; int tmp ; int _BARRIER_0 ; { megaInit ( ) ; _global_argc = _formal_argc ; _global_argv = _formal_argv ; _global_envp = _formal_envp ; _BARRIER_0 = 1 ; arr [ 0 ] = 10 ; arr [ 1 ] = 22 ; arr [ 2 ] = 35 ; arr [ 3 ] = 40 ; arr [ 4 ] = 45 ; arr [ 5 ] = 50 ; arr [ 6 ] = 80 ; arr [ 7 ] = 82 ; arr [ 8 ] = 85 ; arr [ 9 ] = 90 ; arr [ 10 ] = 100 ; n = 11 ; x = 85 ; tmp = fibMonaccianSearch ( arr , x , n ) ; _1_stringEncoder ( 0 , encodeStrings_litStr0 ) ; printf ( encodeStrings_litStr0 , tmp ) ; return ( 0 ) ; } } void encodeStrings_litStr0_i $ nit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { case 0 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; } } } void megaInit ( void ) { { encodeStrings_litStr0_i $ nit ( ) ; } }
>>>Func
METHOD _1_stringEncoder
METHOD_RETURN void
PARAM int n
PARAM char str[]
BLOCK <empty> <empty>
<operator>.assignment encodeStrings_i3 = 0
IDENTIFIER n switch(n)
LITERAL 6 <empty>
<operator>.assignment str[encodeStrings_i3] = 'x'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '1'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '='
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'f'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'x'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '2'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '='
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'f'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'x'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '3'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '='
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'f'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 5 <empty>
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'f'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'f'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'f'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'f'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 4 <empty>
<operator>.assignment str[encodeStrings_i3] = 'E'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'v'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'l'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'u'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'o'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'f'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'q'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '3'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ':'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 3 <empty>
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'f'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'f'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'f'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'f'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 2 <empty>
<operator>.assignment str[encodeStrings_i3] = 'E'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'v'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'l'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'u'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'o'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'f'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'q'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '2'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ':'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 1 <empty>
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'f'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'f'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'f'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'f'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 0 <empty>
<operator>.assignment str[encodeStrings_i3] = 'E'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'v'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'l'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'u'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'o'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'f'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'q'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '1'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ':'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
>>>PDG&230 0->2 0->3 0->4 0->5 0->6 0->7 0->8 0->9 0->10 0->11 0->12 0->13 0->14 0->15 0->16 0->17 0->18 0->19 0->20 0->21 0->22 0->23 0->24 0->25 0->26 0->27 0->28 0->29 0->30 0->31 0->32 0->33 0->34 0->35 0->36 0->37 0->38 0->39 0->40 0->41 0->42 0->43 0->44 0->45 0->46 0->47 0->48 0->49 0->50 0->51 0->52 0->53 0->54 0->55 0->56 0->57 0->58 0->59 0->60 0->61 0->62 0->63 0->64 0->65 0->66 0->67 0->68 0->69 0->70 0->71 0->72 0->73 0->74 0->75 0->76 0->77 0->78 0->79 0->80 0->81 0->82 0->83 0->84 0->85 0->86 0->87 0->88 0->89 0->90 0->91 0->92 0->93 0->94 0->95 0->96 0->97 0->98 0->99 0->100 0->101 0->102 0->103 0->104 0->105 0->106 0->107 0->108 0->109 0->110 0->111 0->112 0->113 0->114 0->115 0->116 0->117 0->118 0->119 0->120 0->121 0->122 0->123 0->124 0->125 0->126 0->127 0->128 0->129 0->130 0->131 0->132 0->133 0->134 0->135 0->136 0->137 0->138 0->139 0->140 0->141 0->142 0->143 0->144 0->145 0->146 0->147 0->148 0->149 0->150 0->151 0->152 0->153 0->154 0->155 0->156 0->157 0->158 0->159 0->160 0->161 0->162 0->163 0->164 0->165 0->166 0->167 0->168 0->169 0->170 0->171 0->172 0->173 0->174 0->175 0->176 0->177 0->178 0->179 0->180 0->181 0->182 0->183 0->184 0->185 0->186 0->187 0->188 0->189 0->190 0->191 0->192 0->193 0->194 0->195 0->196 0->197 0->198 0->199 0->200 0->201 0->202 0->203 0->204 0->205 0->206 0->207 0->208 0->209 0->210 0->211 0->212 0->213 0->214 0->215 0->216 0->217 0->218 0->219 0->220 0->221 0->222 0->223 0->224 0->225 0->226 0->227 0->228 0->229 2->1 3->1 5->1 5->1 5->9 5->46 5->65 5->108 5->127 5->170 5->189 9->11 10->1 11->13 13->15 15->17 17->19 19->21 21->23 22->1 23->25 25->27 27->29 29->31 30->1 31->33 32->1 33->35 34->1 35->37 36->1 37->39 38->1 39->41 40->1 41->43 42->1 42->1 43->1 43->1 46->48 48->50 50->52 52->54 54->56 56->58 57->1 58->60 59->1 60->62 61->1 61->1 62->1 62->1 64->1 65->67 66->1 67->69 68->1 69->71 71->73 72->1 73->75 75->77 76->1 77->79 78->1 79->81 80->1 81->83 82->1 83->85 85->87 86->1 87->89 89->91 90->1 91->93 92->1 93->95 94->1 95->97 96->1 97->99 98->1 99->101 100->1 101->103 102->1 103->105 104->1 104->1 105->1 105->1 108->110 110->112 112->114 114->116 116->118 118->120 119->1 120->122 121->1 122->124 123->1 123->1 124->1 124->1 126->1 127->129 128->1 129->131 130->1 131->133 133->135 134->1 135->137 137->139 138->1 139->141 140->1 141->143 142->1 143->145 144->1 145->147 147->149 148->1 149->151 151->153 152->1 153->155 154->1 155->157 156->1 157->159 158->1 159->161 160->1 161->163 162->1 163->165 164->1 165->167 166->1 166->1 167->1 167->1 170->172 172->174 174->176 176->178 178->180 180->182 181->1 182->184 183->1 184->186 185->1 185->1 186->1 186->1 188->1 189->191 190->1 191->193 192->1 193->195 195->197 196->1 197->199 199->201 200->1 201->203 202->1 203->205 204->1 205->207 206->1 207->209 209->211 210->1 211->213 213->215 214->1 215->217 216->1 217->219 218->1 219->221 220->1 221->223 222->1 223->225 224->1 225->227 226->1 227->229 228->1 228->1 229->1 229->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; char * * _global_argv = ( char * * ) 0 ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; void encodeStrings_litStr2_i $ nit ( void ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; void encodeStrings_litStr5_i $ nit ( void ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; int main ( int _formal_argc , char * * _formal_argv , char * * _formal_envp ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; void encodeStrings_litStr0_i $ nit ( void ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; int _global_argc = 0 ; void megaInit ( void ) ; char * * _global_envp = ( char * * ) 0 ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int ( /* missing proto */ printf ) ( ) ; void encodeStrings_litStr3_i $ nit ( void ) ; extern int ( /* missing proto */ scanf ) ( ) ; extern void perror ( char const * str ) ; extern long clock ( void ) ; void encodeStrings_litStr6_i $ nit ( void ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern void signal ( int sig , void * func ) ; extern double difftime ( long tv1 , long tv0 ) ; extern int ( /* missing proto */ fabs ) ( ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; void encodeStrings_litStr1_i $ nit ( void ) ; void encodeStrings_litStr4_i $ nit ( void ) ; char encodeStrings_litStr6 [ 18 ] ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; char encodeStrings_litStr5 [ 9 ] ; extern int open ( char const * filename , int oflag , ... ) ; char encodeStrings_litStr4 [ 21 ] ; extern double sqrt ( double x ) ; char encodeStrings_litStr3 [ 9 ] ; char encodeStrings_litStr2 [ 21 ] ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; char encodeStrings_litStr1 [ 9 ] ; char encodeStrings_litStr0 [ 21 ] ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; void encodeStrings_litStr5_i $ nit ( void ) { { } } void encodeStrings_litStr6_i $ nit ( void ) { { } } int main ( int _formal_argc , char * * _formal_argv , char * * _formal_envp ) { float a ; float b ; float c ; float a1 ; float a2 ; float a3 ; float b1 ; float b2 ; float b3 ; float c1 ; float c2 ; float c3 ; float d1 ; float d2 ; float d3 ; float x1 ; float x2 ; float x3 ; int tmp ; int tmp___0 ; int tmp___1 ; int _BARRIER_0 ; { megaInit ( ) ; _global_argc = _formal_argc ; _global_argv = _formal_argv ; _global_envp = _formal_envp ; _BARRIER_0 = 1 ; _1_stringEncoder ( 0 , encodeStrings_litStr0 ) ; printf ( encodeStrings_litStr0 ) ; _1_stringEncoder ( 1 , encodeStrings_litStr1 ) ; scanf ( encodeStrings_litStr1 , & a1 , & a2 , & a3 , & d1 ) ; _1_stringEncoder ( 2 , encodeStrings_litStr2 ) ; printf ( encodeStrings_litStr2 ) ; _1_stringEncoder ( 3 , encodeStrings_litStr3 ) ; scanf ( encodeStrings_litStr3 , & b1 , & b2 , & b3 , & d2 ) ; _1_stringEncoder ( 4 , encodeStrings_litStr4 ) ; printf ( encodeStrings_litStr4 ) ; _1_stringEncoder ( 5 , encodeStrings_litStr5 ) ; scanf ( encodeStrings_litStr5 , & c1 , & c2 , & c3 , & d3 ) ; x3 = ( float ) 0.0 ; x2 = x3 ; x1 = x2 ; while ( 1 ) { a = x1 ; b = x2 ; c = x3 ; x1 = ( ( float ) 1 / a1 ) * ( ( d1 - a2 * x2 ) - a3 * x3 ) ; x2 = ( ( float ) 1 / b2 ) * ( ( d2 - b1 * x1 ) - b3 * x3 ) ; x3 = ( ( float ) 1 / c3 ) * ( ( d3 - c1 * x1 ) - c2 * x2 ) ; tmp = fabs ( ( double ) ( x1 - a ) ) ; if ( ( double ) tmp > 0.0001 ) { tmp___0 = fabs ( ( double ) ( x2 - b ) ) ; if ( ( double ) tmp___0 > 0.0001 ) { tmp___1 = fabs ( ( double ) ( x3 - c ) ) ; if ( ! ( ( double ) tmp___1 > 0.0001 ) ) { break ; } } else { break ; } } else { break ; } } _1_stringEncoder ( 6 , encodeStrings_litStr6 ) ; printf ( encodeStrings_litStr6 , ( double ) x1 , ( double ) x2 , ( double ) x3 ) ; return ( 0 ) ; } } void encodeStrings_litStr3_i $ nit ( void ) { { } } void encodeStrings_litStr2_i $ nit ( void ) { { } } void encodeStrings_litStr0_i $ nit ( void ) { { } } void encodeStrings_litStr1_i $ nit ( void ) { { } } void megaInit ( void ) { { encodeStrings_litStr6_i $ nit ( ) ; encodeStrings_litStr5_i $ nit ( ) ; encodeStrings_litStr4_i $ nit ( ) ; encodeStrings_litStr3_i $ nit ( ) ; encodeStrings_litStr2_i $ nit ( ) ; encodeStrings_litStr1_i $ nit ( ) ; encodeStrings_litStr0_i $ nit ( ) ; } } void encodeStrings_litStr4_i $ nit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { case 6 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 5 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 4 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 3 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 2 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 1 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 0 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; } } }
>>>Func
METHOD share_prime
METHOD_RETURN int
PARAM int a
PARAM int b
PARAM int p
<operator>.assignment faca[0] = 0
<operator>.assignment tmp = 1U
<operator>.assignment fai = 0
<operator>.assignment facb[0] = 0
<operator>.assignment tmp___0 = 1U
<operator>.assignment fbi = 0
<operator>.assignment i = 2
<operator>.assignment i = 2
<operator>.assignment i = 0
RETURN return (0); return (0);
<operator>.logicalNot ! (tmp >= 20U)
<operator>.logicalNot ! (tmp___0 >= 20U)
<operator>.lessEqualsThan i <= a
<operator>.lessEqualsThan i <= b
<operator>.lessThan i < fai
LITERAL 0 return (0);
<operator>.assignment faca[tmp] = 0
<operator>.postIncrement tmp ++
<operator>.assignment facb[tmp___0] = 0
<operator>.postIncrement tmp___0 ++
<operator>.postIncrement i ++
<operator>.postIncrement i ++
<operator>.assignment j = 0
<operator>.postIncrement i ++
<operator>.greaterEqualsThan tmp >= 20U
<operator>.greaterEqualsThan tmp___0 >= 20U
<operator>.equals a % i == 0
<operator>.equals b % i == 0
<operator>.lessThan j < fbi
<operator>.assignmentDivision a /= i
<operator>.assignment i = 1
<operator>.assignmentDivision b /= i
<operator>.assignment i = 1
<operator>.postIncrement j ++
<operator>.modulo a % i
<operator>.greaterEqualsThan i >= p
<operator>.modulo b % i
<operator>.greaterEqualsThan i >= p
<operator>.equals faca[i] == facb[j]
<operator>.assignment tmp___1 = fai
<operator>.postIncrement fai ++
<operator>.assignment faca[tmp___1] = i
<operator>.assignment tmp___2 = fbi
<operator>.postIncrement fbi ++
<operator>.assignment facb[tmp___2] = i
RETURN return (1); return (1);
LITERAL 1 return (1);
<operator>.indirectIndexAccess faca[tmp]
<operator>.indirectIndexAccess facb[tmp___0]
<operator>.indirectIndexAccess faca[i]
<operator>.indirectIndexAccess facb[j]
<operator>.indirectIndexAccess faca[tmp___1]
<operator>.indirectIndexAccess facb[tmp___2]
>>>PDG&58 0->2 0->3 0->4 0->5 0->6 0->7 0->8 0->9 0->10 0->11 0->12 0->13 0->14 0->17 0->18 0->19 0->20 0->21 0->22 0->23 0->24 0->25 0->26 0->27 0->28 0->29 0->30 0->31 0->32 0->33 0->34 0->35 0->36 0->37 0->38 0->39 0->40 0->41 0->42 0->44 0->45 0->46 0->47 0->48 0->49 0->50 0->51 2->17 3->18 4->1 4->40 4->42 5->1 5->1 6->1 6->29 7->1 7->19 7->44 7->45 8->1 8->1 9->1 9->30 10->1 10->33 10->47 10->48 11->17 12->1 12->18 13->1 13->19 14->1 15->1 15->1 15->15 15->21 15->22 15->29 15->52 16->1 16->1 16->16 16->23 16->24 16->30 16->53 17->1 17->1 17->17 17->25 17->31 17->39 17->39 17->39 18->1 18->1 18->18 18->26 18->32 18->41 18->41 18->41 19->1 19->1 19->1 19->14 19->27 19->28 19->33 20->14 21->1 21->1 22->1 22->29 23->1 23->1 24->1 24->30 25->1 25->17 26->1 26->18 27->1 27->33 28->1 28->19 29->1 29->15 29->15 29->22 30->1 30->16 30->16 30->24 31->1 31->1 31->34 31->35 31->40 32->1 32->1 32->36 32->37 32->42 33->1 33->1 33->1 33->19 33->28 33->38 33->43 33->54 33->55 34->1 34->17 35->1 35->25 36->1 36->18 37->1 37->26 38->1 38->33 39->17 39->25 39->31 39->31 39->34 39->40 40->1 40->1 40->34 40->42 40->44 40->45 40->46 40->46 40->56 41->18 41->26 41->32 41->32 41->36 41->42 42->1 42->1 42->36 42->47 42->48 42->49 42->49 42->57 43->1 43->1 43->1 43->33 43->38 43->50 44->1 44->1 45->1 45->19 45->44 46->1 46->1 47->1 47->1 48->1 48->33 48->47 49->1 49->1 50->1 51->50
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; void main ( void ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int printf ( char const * format , ... ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; int share_prime ( int a , int b , int p ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; int share_prime ( int a , int b , int p ) { int i ; int j ; int faca [ 20 ] ; unsigned int tmp ; int fai ; int facb [ 20 ] ; unsigned int tmp___0 ; int fbi ; int tmp___1 ; int tmp___2 ; { faca [ 0 ] = 0 ; tmp = 1U ; while ( ! ( tmp >= 20U ) ) { faca [ tmp ] = 0 ; tmp ++ ; } fai = 0 ; facb [ 0 ] = 0 ; tmp___0 = 1U ; while ( ! ( tmp___0 >= 20U ) ) { facb [ tmp___0 ] = 0 ; tmp___0 ++ ; } fbi = 0 ; i = 2 ; while ( i <= a ) { if ( a % i == 0 ) { if ( i >= p ) { tmp___1 = fai ; fai ++ ; faca [ tmp___1 ] = i ; } a /= i ; i = 1 ; } i ++ ; } i = 2 ; while ( i <= b ) { if ( b % i == 0 ) { if ( i >= p ) { tmp___2 = fbi ; fbi ++ ; facb [ tmp___2 ] = i ; } b /= i ; i = 1 ; } i ++ ; } i = 0 ; while ( i < fai ) { j = 0 ; while ( j < fbi ) { if ( faca [ i ] == facb [ j ] ) { return ( 1 ) ; } j ++ ; } i ++ ; } return ( 0 ) ; } } void megaInit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { } } } void main ( void ) { { megaInit ( ) ; } }
>>>Func
METHOD my_end_line
METHOD_RETURN char*
PARAM char *str
PARAM int inc
PARAM int *n
PARAM int option
<operator>.assignment *(str + inc) = (char )'\000'
RETURN return (str); return (str);
<operator>.equals option == 1
IDENTIFIER str return (str);
<operator>.postIncrement (*n) ++
<operator>.cast (char )'\000'
<operator>.addition str + inc
<operator>.equals option == 2
<operator>.assignment *n = 0
<operator>.indirection *n
<operator>.indirection *n
>>>PDG&17 0->2 0->3 0->4 0->5 0->6 0->8 0->9 0->11 0->12 0->13 0->14 2->9 2->12 3->12 4->1 5->8 6->1 6->1 6->1 7->1 8->1 8->1 8->10 8->13 8->13 8->15 9->7 10->1 10->1 12->1 12->1 13->1 13->1 13->14 13->16 14->1 14->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; void main ( void ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int printf ( char const * format , ... ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; char * my_end_line ( char * str , int inc , int * n , int option ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; char * my_end_line ( char * str , int inc , int * n , int option ) { { if ( option == 1 ) { ( * n ) ++ ; } else if ( option == 2 ) { * n = 0 ; } * ( str + inc ) = ( char ) ' \000 ' ; return ( str ) ; } } void megaInit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { } } } void main ( void ) { { megaInit ( ) ; } }
>>>Func
METHOD BPHash
METHOD_RETURN unsigned int
PARAM char *str
PARAM unsigned int len
<operator>.assignment hash = 0U
<operator>.assignment i = 0U
<operator>.assignment i = 0U
RETURN return (hash); return (hash);
<operator>.lessThan i < len
IDENTIFIER hash return (hash);
<operator>.assignment hash = (hash << 7) ^ (unsigned int )*str
<operator>.postIncrement str ++
<operator>.postIncrement i ++
<operator>.xor (hash << 7) ^ (unsigned int )*str
<operator>.shiftLeft hash << 7
<operator>.cast (unsigned int )*str
UNKNOWN unsigned int unsigned int
<operator>.indirection *str
>>>PDG&18 0->2 0->3 0->4 0->5 0->6 0->8 0->9 0->11 0->12 0->14 2->1 2->11 3->8 4->1 4->1 4->9 4->14 6->1 6->8 7->1 8->1 8->1 8->1 8->8 8->10 8->11 8->12 8->12 8->13 8->14 8->15 8->16 8->17 9->7 10->1 10->1 10->1 10->9 10->14 11->1 11->1 12->1 12->8 13->1 13->1 13->10 13->10 14->13 14->13 15->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; void main ( void ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int printf ( char const * format , ... ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; unsigned int BPHash ( char * str , unsigned int len ) ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; unsigned int BPHash ( char * str , unsigned int len ) { unsigned int hash ; unsigned int i ; { hash = 0U ; i = 0U ; i = 0U ; while ( i < len ) { hash = ( hash << 7 ) ^ ( unsigned int ) * str ; str ++ ; i ++ ; } return ( hash ) ; } } void megaInit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { } } } void main ( void ) { { megaInit ( ) ; } }
>>>Func
METHOD maxArea
METHOD_RETURN int
PARAM int *height
PARAM int heightSize
<operator>.assignment start = 0
<operator>.assignment end = heightSize - 1
<operator>.assignment res = 0
RETURN return (res); return (res);
<operator>.lessThan start < end
IDENTIFIER res return (res);
<operator>.subtraction heightSize - 1
<operator>.assignment tmp = min(*(height + start)  *(height + end))
<operator>.assignment currArea = (end - start) * tmp
<operator>.greaterThan currArea > res
<operator>.lessThan *(height + start) < *(height + end)
min min(*(height + start)  *(height + end))
<operator>.multiplication (end - start) * tmp
<operator>.assignment res = currArea
<operator>.postIncrement start ++
<operator>.subtraction end - start
<operator>.postDecrement end --
<operator>.addition height + start
<operator>.addition height + end
<operator>.addition height + start
<operator>.addition height + end
<operator>.indirection *(height + start)
<operator>.indirection *(height + end)
<operator>.indirection *(height + start)
<operator>.indirection *(height + end)
>>>PDG&29 0->2 0->3 0->4 0->6 0->8 0->9 0->10 0->13 0->16 0->17 0->18 0->19 0->20 0->21 0->22 0->23 0->24 2->1 2->21 3->10 4->1 4->8 5->1 5->1 5->8 6->1 6->1 6->9 6->13 7->1 8->1 8->1 8->1 8->8 8->11 8->12 8->13 8->14 8->15 8->16 8->19 8->19 8->19 8->21 8->21 8->22 8->22 8->23 8->24 8->25 8->26 8->27 8->28 9->7 10->1 10->5 10->5 11->1 11->1 11->16 12->1 12->1 12->13 13->1 13->1 13->1 13->9 13->17 13->17 14->1 14->1 14->1 14->18 14->20 15->11 15->11 16->1 16->1 16->12 16->12 17->1 17->1 17->1 17->9 17->13 18->1 18->8 19->8 19->8 19->16 19->16 19->18 19->20 19->23 19->24 20->1 20->8 24->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; int maxArea ( int * height , int heightSize ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern int ( /* missing proto */ min ) ( ) ; extern unsigned long strlen ( char const * s ) ; void main ( void ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int printf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern int scanf ( char const * format , ... ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern float strtof ( char const * str , char const * endptr ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; void megaInit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { } } } void main ( void ) { { megaInit ( ) ; } } int maxArea ( int * height , int heightSize ) { int start ; int end ; int res ; int currArea ; int tmp ; { start = 0 ; end = heightSize - 1 ; res = 0 ; while ( start < end ) { tmp = min ( * ( height + start ) , * ( height + end ) ) ; currArea = ( end - start ) * tmp ; if ( currArea > res ) { res = currArea ; } if ( * ( height + start ) < * ( height + end ) ) { start ++ ; } else { end -- ; } } return ( res ) ; } }
>>>Func
METHOD main
METHOD_RETURN int
PARAM int _formal_argc
PARAM char **_formal_argv
PARAM char **_formal_envp
megaInit megaInit()
<operator>.assignment _global_argc = _formal_argc
<operator>.assignment _global_argv = _formal_argv
<operator>.assignment _global_envp = _formal_envp
<operator>.assignment _BARRIER_0 = 1
_1_stringEncoder _1_stringEncoder(0, encodeStrings_litStr0)
scanf scanf(encodeStrings_litStr0, & n)
<operator>.assignment i = 0
RETURN return (0); return (0);
<operator>.lessThan i < n
LITERAL 0 return (0);
<operator>.assignment k = 0
_1_stringEncoder _1_stringEncoder(1, encodeStrings_litStr1)
scanf scanf(encodeStrings_litStr1, & s)
getchar getchar()
<operator>.assignment j = 0
_1_stringEncoder _1_stringEncoder(2, encodeStrings_litStr2)
scanf scanf(encodeStrings_litStr2, & q)
getchar getchar()
<operator>.assignment j = 0
<operator>.assignment indice = -1
<operator>.assignment mud = -1
<operator>.assignment ant = -1
_1_stringEncoder _1_stringEncoder(3, encodeStrings_litStr3)
printf printf(encodeStrings_litStr3, i + 1, mud)
<operator>.postIncrement i ++
<operator>.lessThan k < 100
<operator>.lessThan j < s
<operator>.lessThan j < q
<operator>.lessThan indice < q
<operator>.assignment j = 0
<operator>.postIncrement k ++
gets gets(vetor[j])
<operator>.postIncrement j ++
gets gets(linha)
<operator>.assignment k = 0
<operator>.postIncrement j ++
<operator>.minus -1
<operator>.minus -1
<operator>.minus -1
<operator>.postIncrement mud ++
<operator>.postIncrement indice ++
<operator>.assignment k = 0
<operator>.assignment indice = ant
<operator>.addition i + 1
<operator>.lessThan j < 1000
<operator>.lessThan k < s
<operator>.lessThan k < s
<operator>.assignment matriz[k][j] = 0
<operator>.postIncrement j ++
<operator>.assignment tmp = strcmp(linha, vetor[k])
<operator>.postIncrement k ++
<operator>.assignment a = indice
<operator>.postIncrement k ++
<operator>.logicalNot ! tmp
<operator>.notEquals matriz[k][a] != 1
<operator>.lessThan ant < a - 1
strcmp strcmp(linha, vetor[k])
<operator>.assignment matriz[k][j] = 1
<operator>.postIncrement a ++
<operator>.assignment ant = a - 1
<operator>.subtraction a - 1
<operator>.subtraction a - 1
<operator>.addressOf & s
<operator>.addressOf & q
<operator>.indirectIndexAccess vetor[j]
<operator>.indirectIndexAccess matriz[k][j]
<operator>.indirectIndexAccess matriz[k]
<operator>.indirectIndexAccess vetor[k]
<operator>.indirectIndexAccess matriz[k][a]
<operator>.indirectIndexAccess matriz[k][j]
<operator>.indirectIndexAccess matriz[k]
<operator>.indirectIndexAccess matriz[k]
>>>PDG&78 0->2 0->3 0->4 0->5 0->6 0->7 0->8 0->9 0->10 0->11 0->12 0->13 0->14 0->15 0->16 0->17 0->18 0->19 0->20 0->21 0->22 0->23 0->24 0->28 0->29 0->30 0->31 0->32 0->33 0->34 0->35 0->36 0->38 0->39 0->40 0->41 0->42 0->43 0->44 0->45 0->46 0->47 0->48 0->49 0->50 0->51 0->52 0->53 0->54 0->56 0->57 0->58 0->59 0->60 0->61 0->62 0->63 0->64 0->66 0->67 2->6 3->7 4->8 5->1 6->1 6->1 6->1 7->1 7->1 7->1 8->1 8->1 8->1 9->1 9->1 10->1 11->1 11->1 11->14 12->1 12->14 13->1 14->1 14->1 14->1 14->14 14->16 14->17 14->18 14->19 14->20 14->21 14->22 14->23 14->24 14->25 14->26 14->27 14->28 14->29 14->29 14->30 14->30 14->31 14->32 14->33 14->34 14->42 14->43 14->44 14->49 14->49 14->68 14->69 15->13 16->1 16->31 17->1 18->1 18->1 18->32 18->51 18->52 20->32 21->1 22->1 22->1 22->33 22->34 23->1 24->1 24->33 25->1 25->34 26->1 26->29 26->45 27->1 27->1 27->1 27->48 27->61 28->1 28->29 29->1 29->1 29->1 29->1 29->28 30->1 30->14 31->1 31->1 31->31 31->35 31->36 31->36 31->50 32->1 32->1 32->18 32->32 32->37 32->38 32->38 32->51 32->52 32->70 33->1 33->1 33->33 33->34 33->39 33->40 33->41 33->41 33->51 34->1 34->1 34->1 34->22 34->33 34->34 34->45 34->46 34->46 34->47 34->48 34->52 35->50 36->1 36->31 37->1 37->1 38->1 38->32 39->1 39->1 39->62 40->1 40->51 41->1 41->33 42->25 43->26 44->27 45->1 45->29 46->1 46->57 47->1 47->52 48->1 48->1 48->34 50->1 50->50 50->53 50->54 50->54 50->71 50->72 51->1 51->1 51->1 51->18 51->32 51->52 51->55 51->56 51->59 51->62 51->73 52->1 52->1 52->1 52->18 52->32 52->52 52->57 52->58 52->58 52->60 52->61 52->66 52->74 52->76 53->1 53->1 54->1 54->50 55->1 55->1 55->59 56->1 56->51 57->1 57->64 57->66 58->1 58->52 59->1 59->1 59->51 59->56 59->63 59->75 59->77 60->1 60->1 60->60 60->64 60->74 60->76 61->1 61->1 61->48 61->65 61->67 62->1 62->1 62->39 62->55 62->55 63->1 63->1 64->1 64->66 65->1 65->1 65->48 65->61 66->1 66->61 66->61 66->67 67->1 67->65 67->65
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; char * * _global_argv = ( char * * ) 0 ; extern int fcntl ( int filedes , int cmd , ... ) ; void encodeStrings_litStr2_i $ nit ( void ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; int main ( int _formal_argc , char * * _formal_argv , char * * _formal_envp ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; void encodeStrings_litStr0_i $ nit ( void ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; int _global_argc = 0 ; void megaInit ( void ) ; char * * _global_envp = ( char * * ) 0 ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int ( /* missing proto */ printf ) ( ) ; void encodeStrings_litStr3_i $ nit ( void ) ; extern int ( /* missing proto */ scanf ) ( ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern int ( /* missing proto */ gets ) ( ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern double strtod ( char const * str , char const * endptr ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int ( /* missing proto */ strcmp ) ( ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; void encodeStrings_litStr1_i $ nit ( void ) ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; char encodeStrings_litStr3 [ 14 ] ; char encodeStrings_litStr2 [ 3 ] ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern double log ( double x ) ; char encodeStrings_litStr1 [ 3 ] ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; char encodeStrings_litStr0 [ 3 ] ; extern int ( /* missing proto */ getchar ) ( ) ; void encodeStrings_litStr1_i $ nit ( void ) { { } } void encodeStrings_litStr0_i $ nit ( void ) { { } } void encodeStrings_litStr2_i $ nit ( void ) { { } } int main ( int _formal_argc , char * * _formal_argv , char * * _formal_envp ) { int n ; int i ; int q ; int j ; int s ; int k ; int a ; int indice ; int mud ; int ant ; int matriz [ 100 ] [ 1000 ] ; char linha [ 101 ] ; char vetor [ 100 ] [ 101 ] ; int tmp ; int _BARRIER_0 ; { megaInit ( ) ; _global_argc = _formal_argc ; _global_argv = _formal_argv ; _global_envp = _formal_envp ; _BARRIER_0 = 1 ; _1_stringEncoder ( 0 , encodeStrings_litStr0 ) ; scanf ( encodeStrings_litStr0 , & n ) ; i = 0 ; while ( i < n ) { k = 0 ; while ( k < 100 ) { j = 0 ; while ( j < 1000 ) { matriz [ k ] [ j ] = 0 ; j ++ ; } k ++ ; } _1_stringEncoder ( 1 , encodeStrings_litStr1 ) ; scanf ( encodeStrings_litStr1 , & s ) ; getchar ( ) ; j = 0 ; while ( j < s ) { gets ( vetor [ j ] ) ; j ++ ; } _1_stringEncoder ( 2 , encodeStrings_litStr2 ) ; scanf ( encodeStrings_litStr2 , & q ) ; getchar ( ) ; j = 0 ; while ( j < q ) { gets ( linha ) ; k = 0 ; while ( k < s ) { tmp = strcmp ( linha , vetor [ k ] ) ; if ( ! tmp ) { matriz [ k ] [ j ] = 1 ; break ; } k ++ ; } j ++ ; } indice = -1 ; mud = -1 ; ant = -1 ; while ( indice < q ) { mud ++ ; indice ++ ; k = 0 ; while ( k < s ) { a = indice ; while ( matriz [ k ] [ a ] != 1 ) { a ++ ; } if ( ant < a - 1 ) { ant = a - 1 ; } k ++ ; } indice = ant ; } _1_stringEncoder ( 3 , encodeStrings_litStr3 ) ; printf ( encodeStrings_litStr3 , i + 1 , mud ) ; i ++ ; } return ( 0 ) ; } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { case 3 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 2 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 1 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 0 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; } } } void encodeStrings_litStr3_i $ nit ( void ) { { } } void megaInit ( void ) { { encodeStrings_litStr3_i $ nit ( ) ; encodeStrings_litStr2_i $ nit ( ) ; encodeStrings_litStr1_i $ nit ( ) ; encodeStrings_litStr0_i $ nit ( ) ; } }
>>>Func
METHOD intToRoman
METHOD_RETURN char*
PARAM int num
<operator>.assignment tmp = malloc(16UL)
<operator>.assignment s = (char *)tmp
_1_stringEncoder _1_stringEncoder(0, encodeStrings_litStr0)
sprintf sprintf(number, encodeStrings_litStr0, num)
<operator>.assignment length = strlen(number)
RETURN return (s); return (s);
IDENTIFIER length switch(length)
IDENTIFIER s return (s);
malloc malloc(16UL)
<operator>.cast (char *)tmp
strlen strlen(number)
LITERAL 4 <empty>
<operator>.assignment tmp___0 = getOne((int )number[3])
<operator>.assignment tmp___1 = getTen((int )number[2])
<operator>.assignment tmp___2 = getHundred((int )number[1])
<operator>.assignment tmp___3 = getThousand((int )number[0])
_1_stringEncoder _1_stringEncoder(1, encodeStrings_litStr1)
sprintf sprintf(s, encodeStrings_litStr1, tmp___3, tmp___2, tmp___1, tmp___0)
LITERAL 3 <empty>
<operator>.assignment tmp___4 = getOne((int )number[2])
<operator>.assignment tmp___5 = getTen((int )number[1])
<operator>.assignment tmp___6 = getHundred((int )number[0])
_1_stringEncoder _1_stringEncoder(2, encodeStrings_litStr2)
sprintf sprintf(s, encodeStrings_litStr2, tmp___6, tmp___5, tmp___4)
LITERAL 2 <empty>
<operator>.assignment tmp___7 = getOne((int )number[1])
<operator>.assignment tmp___8 = getTen((int )number[0])
_1_stringEncoder _1_stringEncoder(3, encodeStrings_litStr3)
sprintf sprintf(s, encodeStrings_litStr3, tmp___8, tmp___7)
LITERAL 1 <empty>
<operator>.assignment tmp___9 = getOne((int )number[0])
<operator>.assignment s = (char *)tmp___9
getOne getOne((int )number[3])
getTen getTen((int )number[2])
getHundred getHundred((int )number[1])
getThousand getThousand((int )number[0])
getOne getOne((int )number[2])
getTen getTen((int )number[1])
getHundred getHundred((int )number[0])
getOne getOne((int )number[1])
getTen getTen((int )number[0])
getOne getOne((int )number[0])
<operator>.cast (char *)tmp___9
<operator>.cast (int )number[3]
<operator>.cast (int )number[2]
<operator>.cast (int )number[1]
<operator>.cast (int )number[0]
<operator>.cast (int )number[2]
<operator>.cast (int )number[1]
<operator>.cast (int )number[0]
<operator>.cast (int )number[1]
<operator>.cast (int )number[0]
<operator>.cast (int )number[0]
>>>PDG&56 0->2 0->4 0->5 0->6 0->9 0->10 0->11 0->12 0->13 0->14 0->19 0->20 0->21 0->25 0->26 0->27 0->30 0->31 0->32 0->34 0->45 2->6 3->1 3->1 3->4 3->12 4->1 4->1 4->1 4->10 4->20 4->26 4->31 5->1 5->6 6->1 6->1 6->1 6->13 7->1 7->1 7->1 8->1 10->8 11->3 12->1 13->1 13->7 13->35 13->36 13->37 13->38 13->39 13->40 13->41 13->42 13->43 13->44 13->46 13->47 13->48 13->49 13->50 13->51 13->52 13->53 13->54 13->55 15->1 15->1 15->20 16->1 16->1 16->20 17->1 17->1 17->20 18->1 18->1 18->20 19->1 19->20 20->1 20->1 20->1 20->1 20->1 20->1 20->1 20->10 22->1 22->1 22->26 23->1 23->1 23->26 24->1 24->1 24->26 25->1 25->26 26->1 26->1 26->1 26->1 26->1 26->1 26->10 28->1 28->1 28->31 29->1 29->1 29->31 30->1 30->31 31->1 31->1 31->1 31->1 31->1 31->10 33->1 33->1 33->34 33->45 34->1 34->1 34->1 34->10 35->1 35->15 36->1 36->16 37->1 37->17 38->1 38->18 39->1 39->22 40->1 40->23 41->1 41->24 42->1 42->28 43->1 43->29 44->1 44->33 45->1 46->1 47->1 48->1 49->1 50->1 51->1 52->1 53->1 54->1 55->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; void encodeStrings_litStr2_i $ nit ( void ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern int ( /* missing proto */ getOne ) ( ) ; extern int ( /* missing proto */ malloc ) ( ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern int ( /* missing proto */ getTen ) ( ) ; extern int ( /* missing proto */ strlen ) ( ) ; void main ( void ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void encodeStrings_litStr0_i $ nit ( void ) ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; void encodeStrings_litStr3_i $ nit ( void ) ; extern int printf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern int scanf ( char const * format , ... ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; char * intToRoman ( int num ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; void encodeStrings_litStr1_i $ nit ( void ) ; extern int ( /* missing proto */ getHundred ) ( ) ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern int ( /* missing proto */ sprintf ) ( ) ; char encodeStrings_litStr3 [ 5 ] ; extern int ( /* missing proto */ getThousand ) ( ) ; char encodeStrings_litStr2 [ 7 ] ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; char encodeStrings_litStr1 [ 9 ] ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; char encodeStrings_litStr0 [ 3 ] ; void encodeStrings_litStr2_i $ nit ( void ) { { } } void encodeStrings_litStr1_i $ nit ( void ) { { } } void encodeStrings_litStr3_i $ nit ( void ) { { } } void megaInit ( void ) { { encodeStrings_litStr3_i $ nit ( ) ; encodeStrings_litStr2_i $ nit ( ) ; encodeStrings_litStr1_i $ nit ( ) ; encodeStrings_litStr0_i $ nit ( ) ; } } void encodeStrings_litStr0_i $ nit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { case 3 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 2 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 1 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 0 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; } } } void main ( void ) { { megaInit ( ) ; } } char * intToRoman ( int num ) { int length ; char number [ 5 ] ; char * s ; int tmp ; int tmp___0 ; int tmp___1 ; int tmp___2 ; int tmp___3 ; int tmp___4 ; int tmp___5 ; int tmp___6 ; int tmp___7 ; int tmp___8 ; int tmp___9 ; { tmp = malloc ( 16UL ) ; s = ( char * ) tmp ; _1_stringEncoder ( 0 , encodeStrings_litStr0 ) ; sprintf ( number , encodeStrings_litStr0 , num ) ; length = strlen ( number ) ; switch ( length ) { case 4 : tmp___0 = getOne ( ( int ) number [ 3 ] ) ; tmp___1 = getTen ( ( int ) number [ 2 ] ) ; tmp___2 = getHundred ( ( int ) number [ 1 ] ) ; tmp___3 = getThousand ( ( int ) number [ 0 ] ) ; _1_stringEncoder ( 1 , encodeStrings_litStr1 ) ; sprintf ( s , encodeStrings_litStr1 , tmp___3 , tmp___2 , tmp___1 , tmp___0 ) ; break ; case 3 : tmp___4 = getOne ( ( int ) number [ 2 ] ) ; tmp___5 = getTen ( ( int ) number [ 1 ] ) ; tmp___6 = getHundred ( ( int ) number [ 0 ] ) ; _1_stringEncoder ( 2 , encodeStrings_litStr2 ) ; sprintf ( s , encodeStrings_litStr2 , tmp___6 , tmp___5 , tmp___4 ) ; break ; case 2 : tmp___7 = getOne ( ( int ) number [ 1 ] ) ; tmp___8 = getTen ( ( int ) number [ 0 ] ) ; _1_stringEncoder ( 3 , encodeStrings_litStr3 ) ; sprintf ( s , encodeStrings_litStr3 , tmp___8 , tmp___7 ) ; break ; case 1 : tmp___9 = getOne ( ( int ) number [ 0 ] ) ; s = ( char * ) tmp___9 ; break ; default : break ; } return ( s ) ; } }
>>>Func
METHOD _1_stringEncoder
METHOD_RETURN void
PARAM int n
PARAM char str[]
BLOCK <empty> <empty>
<operator>.assignment encodeStrings_i3 = 0
IDENTIFIER n switch(n)
LITERAL 3 <empty>
<operator>.assignment str[encodeStrings_i3] = 'S'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'o'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'y'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ':'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 2 <empty>
<operator>.assignment str[encodeStrings_i3] = 'I'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'i'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'i'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'l'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'y'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ':'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 1 <empty>
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 0 <empty>
<operator>.assignment str[encodeStrings_i3] = 'I'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'u'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'o'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'u'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'm'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'b'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ':'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
>>>PDG&139 0->2 0->3 0->4 0->5 0->6 0->7 0->8 0->9 0->10 0->11 0->12 0->13 0->14 0->15 0->16 0->17 0->18 0->19 0->20 0->21 0->22 0->23 0->24 0->25 0->26 0->27 0->28 0->29 0->30 0->31 0->32 0->33 0->34 0->35 0->36 0->37 0->38 0->39 0->40 0->41 0->42 0->43 0->44 0->45 0->46 0->47 0->48 0->49 0->50 0->51 0->52 0->53 0->54 0->55 0->56 0->57 0->58 0->59 0->60 0->61 0->62 0->63 0->64 0->65 0->66 0->67 0->68 0->69 0->70 0->71 0->72 0->73 0->74 0->75 0->76 0->77 0->78 0->79 0->80 0->81 0->82 0->83 0->84 0->85 0->86 0->87 0->88 0->89 0->90 0->91 0->92 0->93 0->94 0->95 0->96 0->97 0->98 0->99 0->100 0->101 0->102 0->103 0->104 0->105 0->106 0->107 0->108 0->109 0->110 0->111 0->112 0->113 0->114 0->115 0->116 0->117 0->118 0->119 0->120 0->121 0->122 0->123 0->124 0->125 0->126 0->127 0->128 0->129 0->130 0->131 0->132 0->133 0->134 0->135 0->136 0->137 0->138 2->1 3->1 5->1 5->1 5->9 5->40 5->73 5->80 8->1 9->11 10->1 11->13 13->15 14->1 15->17 16->1 17->19 18->1 19->21 21->23 23->25 25->27 26->1 27->29 28->1 29->31 30->1 31->33 32->1 33->35 34->1 35->37 36->1 36->1 37->1 37->1 39->1 40->42 41->1 42->44 44->46 45->1 46->48 47->1 48->50 50->52 51->1 52->54 54->56 56->58 58->60 59->1 60->62 61->1 62->64 63->1 64->66 65->1 66->68 67->1 68->70 69->1 69->1 70->1 70->1 72->1 73->75 74->1 75->77 76->1 76->1 77->1 77->1 79->1 80->82 82->84 84->86 86->88 88->90 90->92 92->94 93->1 94->96 96->98 98->100 100->102 102->104 104->106 105->1 106->108 108->110 109->1 110->112 112->114 113->1 114->116 116->118 117->1 118->120 119->1 120->122 121->1 122->124 123->1 124->126 125->1 126->128 127->1 128->130 129->1 130->132 131->1 132->134 133->1 134->136 135->1 136->138 137->1 137->1 138->1 138->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int ( /* missing proto */ sort ) ( ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; char * * _global_argv = ( char * * ) 0 ; extern int fcntl ( int filedes , int cmd , ... ) ; void encodeStrings_litStr2_i $ nit ( void ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern int ( /* missing proto */ malloc ) ( ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int rand ( ) ; extern int ( /* missing proto */ free ) ( ) ; extern unsigned long strlen ( char const * s ) ; int main ( int _formal_argc , char * * _formal_argv , char * * _formal_envp ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; void encodeStrings_litStr0_i $ nit ( void ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; int _global_argc = 0 ; void megaInit ( void ) ; char * * _global_envp = ( char * * ) 0 ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int ( /* missing proto */ printf ) ( ) ; void encodeStrings_litStr3_i $ nit ( void ) ; extern int ( /* missing proto */ scanf ) ( ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern double strtod ( char const * str , char const * endptr ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; void encodeStrings_litStr1_i $ nit ( void ) ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int ( /* missing proto */ display ) ( ) ; extern double sqrt ( double x ) ; extern int open ( char const * filename , int oflag , ... ) ; char encodeStrings_litStr3 [ 15 ] ; char encodeStrings_litStr2 [ 16 ] ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern double log ( double x ) ; char encodeStrings_litStr1 [ 3 ] ; char encodeStrings_litStr0 [ 30 ] ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; void encodeStrings_litStr1_i $ nit ( void ) { { } } void encodeStrings_litStr0_i $ nit ( void ) { { } } void encodeStrings_litStr2_i $ nit ( void ) { { } } int main ( int _formal_argc , char * * _formal_argv , char * * _formal_envp ) { int size ; int * numbers ; int tmp ; int i ; int _BARRIER_0 ; { megaInit ( ) ; _global_argc = _formal_argc ; _global_argv = _formal_argv ; _global_envp = _formal_envp ; _BARRIER_0 = 1 ; size = 6 ; tmp = malloc ( ( unsigned long ) size * 4UL ) ; numbers = ( int * ) tmp ; _1_stringEncoder ( 0 , encodeStrings_litStr0 ) ; printf ( encodeStrings_litStr0 , size ) ; i = 0 ; while ( i < size ) { _1_stringEncoder ( 1 , encodeStrings_litStr1 ) ; scanf ( encodeStrings_litStr1 , numbers + i ) ; i ++ ; } _1_stringEncoder ( 2 , encodeStrings_litStr2 ) ; printf ( encodeStrings_litStr2 ) ; display ( numbers , size ) ; sort ( numbers , size ) ; _1_stringEncoder ( 3 , encodeStrings_litStr3 ) ; printf ( encodeStrings_litStr3 ) ; display ( numbers , size ) ; free ( numbers ) ; return ( 0 ) ; } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { case 3 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 2 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 1 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 0 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; } } } void encodeStrings_litStr3_i $ nit ( void ) { { } } void megaInit ( void ) { { encodeStrings_litStr3_i $ nit ( ) ; encodeStrings_litStr2_i $ nit ( ) ; encodeStrings_litStr1_i $ nit ( ) ; encodeStrings_litStr0_i $ nit ( ) ; } }
>>>Func
METHOD sortArrayByParity
METHOD_RETURN int*
PARAM int *A
PARAM int ASize
PARAM int *returnSize
<operator>.assignment tmp = malloc((unsigned long )ASize * sizeof(int ))
<operator>.assignment retArr = (int *)tmp
<operator>.assignment oddIndex = ASize - 1
<operator>.assignment evenIndex = 0
<operator>.assignment *returnSize = ASize
<operator>.assignment i = 0
RETURN return (retArr); return (retArr);
<operator>.lessThan i < ASize
IDENTIFIER retArr return (retArr);
malloc malloc((unsigned long )ASize * sizeof(int ))
<operator>.cast (int *)tmp
<operator>.subtraction ASize - 1
<operator>.postIncrement i ++
<operator>.multiplication (unsigned long )ASize * sizeof(int )
<operator>.equals *(A + i) % 2 == 0
<operator>.cast (unsigned long )ASize
<operator>.sizeOf sizeof(int )
<operator>.assignment *(retArr + evenIndex) = *(A + i)
<operator>.postIncrement evenIndex ++
<operator>.modulo *(A + i) % 2
<operator>.assignment *(retArr + oddIndex) = *(A + i)
<operator>.postDecrement oddIndex --
<operator>.addition A + i
<operator>.addition retArr + evenIndex
<operator>.addition A + i
<operator>.addition retArr + oddIndex
<operator>.addition A + i
<operator>.indirection *(A + i)
<operator>.indirection *(retArr + evenIndex)
<operator>.indirection *(A + i)
<operator>.indirection *(retArr + oddIndex)
<operator>.indirection *(A + i)
>>>PDG&37 0->2 0->3 0->4 0->6 0->8 0->9 0->10 0->12 0->13 0->15 0->16 0->17 0->18 0->19 0->20 0->23 0->24 0->26 0->27 0->28 0->29 0->30 0->31 2->1 2->27 3->16 3->18 3->20 4->1 5->1 5->1 5->6 5->15 6->1 6->1 6->1 6->13 6->28 6->30 7->1 7->1 7->1 7->26 7->30 8->1 8->1 8->23 8->28 9->1 9->1 10->1 10->12 11->1 12->1 12->1 12->1 12->12 12->17 12->17 12->19 12->24 12->27 12->27 12->29 12->31 12->32 13->11 14->1 14->5 15->1 16->7 16->7 16->9 16->12 17->1 17->12 18->1 18->14 19->1 19->1 19->22 19->23 19->25 19->26 19->28 19->29 19->30 19->31 19->33 19->34 19->35 19->36 21->1 22->1 22->1 22->1 23->1 23->1 23->28 24->19 24->19 25->1 25->1 25->1 26->1 26->1 26->30 28->1 29->1 30->1 31->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern int ( /* missing proto */ malloc ) ( ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; void main ( void ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void megaInit ( void ) ; int * sortArrayByParity ( int * A , int ASize , int * returnSize ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int printf ( char const * format , ... ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; int * sortArrayByParity ( int * A , int ASize , int * returnSize ) { int * retArr ; int tmp ; int oddIndex ; int evenIndex ; int i ; { tmp = malloc ( ( unsigned long ) ASize * sizeof ( int ) ) ; retArr = ( int * ) tmp ; oddIndex = ASize - 1 ; evenIndex = 0 ; * returnSize = ASize ; i = 0 ; while ( i < ASize ) { if ( * ( A + i ) % 2 == 0 ) { * ( retArr + evenIndex ) = * ( A + i ) ; evenIndex ++ ; } else { * ( retArr + oddIndex ) = * ( A + i ) ; oddIndex -- ; } i ++ ; } return ( retArr ) ; } } void megaInit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { } } } void main ( void ) { { megaInit ( ) ; } }
>>>Func
METHOD main
METHOD_RETURN int
PARAM int argc
PARAM char **argv
PARAM char **_formal_envp
megaInit megaInit()
<operator>.assignment _global_argc = argc
<operator>.assignment _global_argv = argv
<operator>.assignment _global_envp = _formal_envp
<operator>.assignment _BARRIER_0 = 1
<operator>.assignment sum = 0
<operator>.assignment i = 0
_1_stringEncoder _1_stringEncoder(0, encodeStrings_litStr0)
printf printf(encodeStrings_litStr0, sum)
RETURN return (0); return (0);
<operator>.lessThan i < (int )*(*(argv + 1) + 0)
LITERAL 0 return (0);
<operator>.postIncrement i ++
<operator>.cast (int )*(*(argv + 1) + 0)
<operator>.greaterThan (int )*(*(argv + 1) + 0) > 127
<operator>.assignmentPlus sum += i
<operator>.addition *(argv + 1) + 0
<operator>.assignmentMultiplication sum *= i
<operator>.addition argv + 1
<operator>.addition *(argv + 1) + 0
<operator>.addition argv + 1
UNKNOWN int int
<operator>.indirection *(*(argv + 1) + 0)
<operator>.cast (int )*(*(argv + 1) + 0)
<operator>.indirection *(argv + 1)
UNKNOWN int int
<operator>.indirection *(*(argv + 1) + 0)
<operator>.indirection *(argv + 1)
>>>PDG&33 0->2 0->3 0->4 0->5 0->6 0->7 0->8 0->9 0->10 0->11 0->12 0->13 0->14 0->15 0->16 0->17 0->19 0->20 0->21 0->22 0->23 0->24 0->25 2->6 3->7 3->23 4->8 5->1 6->1 6->1 6->1 7->1 7->1 8->1 8->1 8->1 9->1 9->1 10->1 10->13 10->20 10->22 11->1 11->15 12->1 12->13 13->1 13->1 13->1 14->1 15->1 15->1 15->1 15->15 15->17 15->17 15->18 15->19 15->20 15->21 15->22 15->23 15->24 15->25 15->26 15->27 15->28 15->29 15->30 15->31 15->32 16->14 17->1 17->15 18->1 19->1 19->20 19->22 20->1 20->13 20->22 21->1 22->1 22->13 22->20 23->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; char * * _global_argv = ( char * * ) 0 ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; int main ( int argc , char * * argv , char * * _formal_envp ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; void encodeStrings_litStr0_i $ nit ( void ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; int _global_argc = 0 ; void megaInit ( void ) ; char * * _global_envp = ( char * * ) 0 ; extern int ( /* missing proto */ printf ) ( ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; char encodeStrings_litStr0 [ 12 ] ; void megaInit ( void ) { { encodeStrings_litStr0_i $ nit ( ) ; } } void encodeStrings_litStr0_i $ nit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { case 0 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; } } } int main ( int argc , char * * argv , char * * _formal_envp ) { int i ; int sum ; int _BARRIER_0 ; { megaInit ( ) ; _global_argc = argc ; _global_argv = argv ; _global_envp = _formal_envp ; _BARRIER_0 = 1 ; sum = 0 ; i = 0 ; while ( i < ( int ) * ( * ( argv + 1 ) + 0 ) ) { if ( ( int ) * ( * ( argv + 1 ) + 0 ) > 127 ) { sum += i ; } else { sum *= i ; } i ++ ; } _1_stringEncoder ( 0 , encodeStrings_litStr0 ) ; printf ( encodeStrings_litStr0 , sum ) ; return ( 0 ) ; } }
>>>Func
METHOD _1_stringEncoder
METHOD_RETURN void
PARAM int n
PARAM char str[]
BLOCK <empty> <empty>
<operator>.assignment encodeStrings_i3 = 0
IDENTIFIER n switch(n)
LITERAL 3 <empty>
<operator>.assignment str[encodeStrings_i3] = '\n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 2 <empty>
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 1 <empty>
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 0 <empty>
<operator>.assignment str[encodeStrings_i3] = 'E'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '6'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'u'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'm'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'b'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'u'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'o'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
>>>PDG&85 0->2 0->3 0->4 0->5 0->6 0->7 0->8 0->9 0->10 0->11 0->12 0->13 0->14 0->15 0->16 0->17 0->18 0->19 0->20 0->21 0->22 0->23 0->24 0->25 0->26 0->27 0->28 0->29 0->30 0->31 0->32 0->33 0->34 0->35 0->36 0->37 0->38 0->39 0->40 0->41 0->42 0->43 0->44 0->45 0->46 0->47 0->48 0->49 0->50 0->51 0->52 0->53 0->54 0->55 0->56 0->57 0->58 0->59 0->60 0->61 0->62 0->63 0->64 0->65 0->66 0->67 0->68 0->69 0->70 0->71 0->72 0->73 0->74 0->75 0->76 0->77 0->78 0->79 0->80 0->81 0->82 0->83 0->84 2->1 3->1 5->1 5->1 5->9 5->14 5->23 5->30 8->1 9->11 10->1 10->1 11->1 11->1 13->1 14->16 15->1 16->18 17->1 18->20 19->1 19->1 20->1 20->1 22->1 23->25 24->1 25->27 26->1 26->1 27->1 27->1 29->1 30->32 32->34 34->36 36->38 38->40 40->42 41->1 42->44 44->46 46->48 48->50 49->1 50->52 51->1 52->54 54->56 56->58 58->60 60->62 61->1 62->64 63->1 64->66 65->1 66->68 67->1 68->70 69->1 70->72 71->1 72->74 73->1 74->76 75->1 76->78 77->1 78->80 80->82 81->1 82->84 83->1 83->1 84->1 84->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern void exit ( int status ) ; extern int pthread_cond_signal ( int * cond ) ; extern int ( /* missing proto */ sort ) ( ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; char * * _global_argv = ( char * * ) 0 ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; void encodeStrings_litStr2_i $ nit ( void ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern int raise ( int sig ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; int main ( int _formal_argc , char * * _formal_argv , char * * _formal_envp ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; void encodeStrings_litStr0_i $ nit ( void ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; int _global_argc = 0 ; void megaInit ( void ) ; char * * _global_envp = ( char * * ) 0 ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int ( /* missing proto */ printf ) ( ) ; void encodeStrings_litStr3_i $ nit ( void ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern int ( /* missing proto */ scanf ) ( ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; void encodeStrings_litStr1_i $ nit ( void ) ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; char encodeStrings_litStr3 [ 2 ] ; char encodeStrings_litStr2 [ 4 ] ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; char encodeStrings_litStr1 [ 3 ] ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; char encodeStrings_litStr0 [ 28 ] ; void encodeStrings_litStr2_i $ nit ( void ) { { } } int main ( int _formal_argc , char * * _formal_argv , char * * _formal_envp ) { int numbers [ 6 ] ; int i ; int _BARRIER_0 ; { megaInit ( ) ; _global_argc = _formal_argc ; _global_argv = _formal_argv ; _global_envp = _formal_envp ; _BARRIER_0 = 1 ; _1_stringEncoder ( 0 , encodeStrings_litStr0 ) ; printf ( encodeStrings_litStr0 ) ; i = 0 ; while ( i < 6 ) { _1_stringEncoder ( 1 , encodeStrings_litStr1 ) ; scanf ( encodeStrings_litStr1 , & numbers [ i ] ) ; i ++ ; } sort ( numbers , 6 ) ; i = 0 ; while ( i < 6 ) { _1_stringEncoder ( 2 , encodeStrings_litStr2 ) ; printf ( encodeStrings_litStr2 , numbers [ i ] ) ; i ++ ; } _1_stringEncoder ( 3 , encodeStrings_litStr3 ) ; printf ( encodeStrings_litStr3 ) ; return ( 0 ) ; } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { case 3 : str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 2 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 1 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 0 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; } } } void encodeStrings_litStr0_i $ nit ( void ) { { } } void encodeStrings_litStr3_i $ nit ( void ) { { } } void encodeStrings_litStr1_i $ nit ( void ) { { } } void megaInit ( void ) { { encodeStrings_litStr3_i $ nit ( ) ; encodeStrings_litStr2_i $ nit ( ) ; encodeStrings_litStr1_i $ nit ( ) ; encodeStrings_litStr0_i $ nit ( ) ; } }
>>>Func
METHOD reverseOnlyLetters
METHOD_RETURN char*
PARAM char *S
<operator>.assignment tmp = strlen(S)
<operator>.assignment last = tmp - 1
<operator>.assignment i = 0
RETURN return (S); return (S);
<operator>.lessThan i < last
IDENTIFIER S return (S);
strlen strlen(S)
<operator>.subtraction tmp - 1
<operator>.assignment tmp___0 = isalpha((int )*(S + i))
<operator>.assignment tmp___1 = isalpha((int )*(S + last))
<operator>.assignment tmp___2 = *(S + i)
<operator>.assignment *(S + i) = *(S + last)
<operator>.assignment *(S + last) = tmp___2
<operator>.postIncrement i ++
<operator>.postDecrement last --
<operator>.logicalNot ! tmp___0
<operator>.logicalNot ! tmp___1
isalpha isalpha((int )*(S + i))
<operator>.postIncrement i ++
isalpha isalpha((int )*(S + last))
<operator>.postDecrement last --
<operator>.cast (int )*(S + i)
<operator>.cast (int )*(S + last)
<operator>.addition S + i
<operator>.addition S + i
<operator>.addition S + last
<operator>.addition S + last
<operator>.addition S + i
<operator>.addition S + last
<operator>.indirection *(S + i)
<operator>.indirection *(S + i)
<operator>.indirection *(S + last)
<operator>.indirection *(S + last)
UNKNOWN int int
<operator>.indirection *(S + i)
UNKNOWN int int
<operator>.indirection *(S + last)
>>>PDG&40 0->2 0->5 0->7 0->8 0->9 0->10 0->15 0->16 0->17 0->18 0->19 0->21 0->23 0->26 0->27 0->28 0->29 0->30 0->31 2->9 3->1 3->1 3->10 4->1 4->1 4->7 5->1 5->7 6->1 7->1 7->1 7->1 7->7 7->11 7->16 7->17 7->18 7->20 7->21 7->23 7->24 7->26 7->27 7->28 7->29 7->30 7->30 7->31 7->36 7->37 8->6 9->1 9->3 9->8 9->26 9->27 9->28 9->29 9->30 9->31 10->1 10->4 10->4 11->1 11->1 11->18 12->1 12->1 12->19 13->1 13->15 14->1 14->1 15->1 15->1 15->1 16->1 16->7 17->1 17->7 18->1 18->1 18->12 18->19 18->21 18->22 18->25 18->31 18->38 18->39 19->1 19->1 19->13 19->14 19->15 19->16 19->17 19->23 19->26 19->27 19->28 19->29 19->32 19->33 19->34 19->35 20->1 20->11 21->1 21->7 22->1 22->12 23->1 23->7 24->1 25->1 29->1 30->1 31->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern int ( /* missing proto */ strlen ) ( ) ; void main ( void ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int printf ( char const * format , ... ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern int ( /* missing proto */ isalpha ) ( ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; char * reverseOnlyLetters ( char * S ) ; void megaInit ( void ) { { } } char * reverseOnlyLetters ( char * S ) { int last ; int tmp ; int i ; int tmp___0 ; int tmp___1 ; char tmp___2 ; { tmp = strlen ( S ) ; last = tmp - 1 ; i = 0 ; while ( i < last ) { tmp___0 = isalpha ( ( int ) * ( S + i ) ) ; if ( ! tmp___0 ) { i ++ ; goto __Cont ; } tmp___1 = isalpha ( ( int ) * ( S + last ) ) ; if ( ! tmp___1 ) { last -- ; goto __Cont ; } tmp___2 = * ( S + i ) ; * ( S + i ) = * ( S + last ) ; * ( S + last ) = tmp___2 ; i ++ ; last -- ; __Cont : /* CIL Label */ ; } return ( S ) ; } } void main ( void ) { { megaInit ( ) ; } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { } } }
>>>Func
METHOD _1_stringEncoder
METHOD_RETURN void
PARAM int n
PARAM char str[]
BLOCK <empty> <empty>
<operator>.assignment encodeStrings_i3 = 0
IDENTIFIER n switch(n)
LITERAL 1 <empty>
<operator>.assignment str[encodeStrings_i3] = '\n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 0 <empty>
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
>>>PDG&21 0->2 0->3 0->4 0->5 0->6 0->7 0->8 0->9 0->10 0->11 0->12 0->13 0->14 0->15 0->16 0->17 0->18 0->19 0->20 2->1 3->1 5->1 5->1 5->9 5->14 8->1 9->11 10->1 10->1 11->1 11->1 13->1 14->16 15->1 16->18 17->1 18->20 19->1 19->1 20->1 20->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int unlink ( char const * filename ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; void main ( void ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void encodeStrings_litStr0_i $ nit ( void ) ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int ( /* missing proto */ printf ) ( ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; void encodeStrings_litStr1_i $ nit ( void ) ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; void display ( int const * arr , int n ) ; extern double sqrt ( double x ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; char encodeStrings_litStr1 [ 2 ] ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; char encodeStrings_litStr0 [ 4 ] ; void encodeStrings_litStr0_i $ nit ( void ) { { } } void main ( void ) { { megaInit ( ) ; } } void megaInit ( void ) { { encodeStrings_litStr1_i $ nit ( ) ; encodeStrings_litStr0_i $ nit ( ) ; } } void encodeStrings_litStr1_i $ nit ( void ) { { } } void display ( int const * arr , int n ) { int i ; { i = 0 ; while ( i < n ) { _1_stringEncoder ( 0 , encodeStrings_litStr0 ) ; printf ( encodeStrings_litStr0 , * ( arr + i ) ) ; i ++ ; } _1_stringEncoder ( 1 , encodeStrings_litStr1 ) ; printf ( encodeStrings_litStr1 ) ; return ; } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { case 1 : str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 0 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; } } }
>>>Func
METHOD main
METHOD_RETURN int
PARAM int _formal_argc
PARAM char **_formal_argv
PARAM char **_formal_envp
megaInit megaInit()
<operator>.assignment _global_argc = _formal_argc
<operator>.assignment _global_argv = _formal_argv
<operator>.assignment _global_envp = _formal_envp
<operator>.assignment _BARRIER_0 = 1
_1_stringEncoder _1_stringEncoder(0, encodeStrings_litStr0)
scanf scanf(encodeStrings_litStr0, & t)
<operator>.assignment i = 0
RETURN return (0); return (0);
<operator>.lessThan i < t
LITERAL 0 return (0);
_1_stringEncoder _1_stringEncoder(1, encodeStrings_litStr1)
scanf scanf(encodeStrings_litStr1, & n)
<operator>.assignment __lengthofx = (unsigned long )n
<operator>.assignment tmp = __builtin_alloca(4UL * __lengthofx)
<operator>.assignment x = (int *)tmp
<operator>.assignment j = 0
<operator>.assignment sum = 0
<operator>.assignment j = 0
_1_stringEncoder _1_stringEncoder(3, encodeStrings_litStr3)
printf printf(encodeStrings_litStr3, i + 1)
<operator>.assignment __lengthofy = (unsigned long )n
<operator>.assignment tmp___0 = __builtin_alloca(16UL * __lengthofy)
<operator>.assignment y = (long double *)tmp___0
<operator>.assignment j = 0
<operator>.assignment __lengthofz = (unsigned long )n
<operator>.assignment tmp___1 = __builtin_alloca(4UL * __lengthofz)
<operator>.assignment z = (int *)tmp___1
<operator>.assignment __lengthofz2 = (unsigned long )n
<operator>.assignment tmp___2 = __builtin_alloca(4UL * __lengthofz2)
<operator>.assignment z2 = (int *)tmp___2
<operator>.assignment zn = 0
<operator>.assignment z2n = 0
<operator>.assignment j = 0
<operator>.assignment j = 0
<operator>.assignment j = 0
_1_stringEncoder _1_stringEncoder(5, encodeStrings_litStr5)
printf printf(encodeStrings_litStr5)
<operator>.postIncrement i ++
<operator>.lessThan j < n
<operator>.lessThan j < n
<operator>.lessThan j < n
<operator>.lessThan j < n
<operator>.lessThan j < zn
<operator>.lessThan j < n
<operator>.cast (unsigned long )n
__builtin_alloca __builtin_alloca(4UL * __lengthofx)
<operator>.cast (int *)tmp
_1_stringEncoder _1_stringEncoder(2, encodeStrings_litStr2)
scanf scanf(encodeStrings_litStr2, x + j)
<operator>.postIncrement j ++
<operator>.assignmentPlus sum += *(x + j)
<operator>.postIncrement j ++
<operator>.addition i + 1
<operator>.cast (unsigned long )n
__builtin_alloca __builtin_alloca(16UL * __lengthofy)
<operator>.cast (long double *)tmp___0
<operator>.assignment *(y + j) = (long double )100 * ((long double )2 / (long double )n - (long double )*(x + j) / (long double )sum)
<operator>.postIncrement j ++
<operator>.cast (unsigned long )n
__builtin_alloca __builtin_alloca(4UL * __lengthofz)
<operator>.cast (int *)tmp___1
<operator>.cast (unsigned long )n
__builtin_alloca __builtin_alloca(4UL * __lengthofz2)
<operator>.cast (int *)tmp___2
<operator>.postIncrement j ++
<operator>.assignment k = 0
<operator>.assignment *(y + *(z + j)) = (long double )0
<operator>.postIncrement j ++
_1_stringEncoder _1_stringEncoder(4, encodeStrings_litStr4)
printf printf(encodeStrings_litStr4  *(y + j))
<operator>.postIncrement j ++
<operator>.multiplication 4UL * __lengthofx
<operator>.multiplication 16UL * __lengthofy
<operator>.multiplication 4UL * __lengthofz
<operator>.multiplication 4UL * __lengthofz2
<operator>.lessThan *(y + j) < (long double )0
<operator>.lessThan k < z2n
<operator>.addition x + j
<operator>.multiplication (long double )100 * ((long double )2 / (long double )n - (long double )*(x + j) / (long double )sum)
<operator>.assignment tmp___3 = zn
<operator>.postIncrement zn ++
<operator>.assignment *(z + tmp___3) = j
<operator>.assignmentPlus *(y + *(z2 + k)) += *(y + *(z + j)) / (long double )z2n
<operator>.postIncrement k ++
<operator>.cast (long double )0
<operator>.addition x + j
<operator>.addition y + j
<operator>.cast (long double )100
<operator>.subtraction (long double )2 / (long double )n - (long double )*(x + j) / (long double )sum
<operator>.cast (long double )0
<operator>.assignment tmp___4 = z2n
<operator>.postIncrement z2n ++
<operator>.assignment *(z2 + tmp___4) = j
<operator>.addition y + *(z + j)
<operator>.addition y + j
<operator>.division (long double )2 / (long double )n
<operator>.division (long double )*(x + j) / (long double )sum
<operator>.addition y + j
<operator>.division *(y + *(z + j)) / (long double )z2n
<operator>.cast (long double )2
<operator>.cast (long double )n
<operator>.cast (long double )*(x + j)
<operator>.cast (long double )sum
<operator>.addition z + tmp___3
<operator>.addition y + *(z2 + k)
<operator>.cast (long double )z2n
<operator>.addition z + j
<operator>.addition z2 + tmp___4
<operator>.addition y + *(z + j)
<operator>.addition x + j
<operator>.addition z2 + k
<operator>.addition z + j
<operator>.addressOf & n
UNKNOWN unsigned long unsigned long
UNKNOWN int * int *
UNKNOWN unsigned long unsigned long
UNKNOWN long double * long double *
UNKNOWN unsigned long unsigned long
UNKNOWN int * int *
UNKNOWN unsigned long unsigned long
UNKNOWN int * int *
<operator>.indirection *(x + j)
<operator>.indirection *(y + j)
<operator>.indirection *(y + *(z + j))
<operator>.indirection *(y + j)
<operator>.indirection *(y + j)
UNKNOWN long double long double
UNKNOWN long double long double
UNKNOWN long double long double
<operator>.indirection *(z + tmp___3)
<operator>.indirection *(y + *(z2 + k))
<operator>.indirection *(z + j)
<operator>.indirection *(z2 + tmp___4)
<operator>.indirection *(y + *(z + j))
UNKNOWN long double long double
UNKNOWN long double long double
UNKNOWN long double long double
<operator>.indirection *(x + j)
UNKNOWN long double long double
<operator>.indirection *(z2 + k)
UNKNOWN long double long double
<operator>.indirection *(z + j)
>>>PDG&148 0->2 0->3 0->4 0->5 0->6 0->7 0->8 0->9 0->10 0->11 0->12 0->13 0->14 0->15 0->16 0->17 0->18 0->20 0->21 0->22 0->23 0->24 0->25 0->26 0->28 0->29 0->30 0->32 0->33 0->35 0->36 0->37 0->38 0->39 0->40 0->41 0->42 0->43 0->44 0->45 0->46 0->47 0->48 0->49 0->50 0->52 0->53 0->54 0->55 0->56 0->57 0->58 0->59 0->61 0->63 0->64 0->66 0->67 0->69 0->70 0->71 0->72 0->73 0->74 0->75 0->76 0->77 0->78 0->79 0->80 0->81 0->82 0->83 0->84 0->85 0->86 0->87 0->89 0->90 0->91 0->92 0->93 0->95 0->96 0->97 0->98 0->99 0->100 0->101 0->102 0->103 0->104 0->105 0->106 0->108 0->109 0->110 0->111 0->112 0->113 0->114 0->115 0->116 0->117 2->6 3->7 4->8 5->1 6->1 6->1 6->1 7->1 7->1 7->1 8->1 8->1 8->1 9->1 9->1 10->1 11->1 11->1 11->14 12->1 12->14 13->1 14->1 14->1 14->1 14->14 14->16 14->17 14->18 14->19 14->20 14->21 14->22 14->23 14->24 14->25 14->25 14->26 14->27 14->28 14->29 14->30 14->31 14->32 14->33 14->34 14->35 14->36 14->37 14->38 14->39 14->40 14->41 14->42 14->43 14->43 14->44 14->45 14->46 14->47 14->48 14->49 14->50 14->51 14->52 14->58 14->58 14->59 14->60 14->61 14->64 14->65 14->66 14->67 14->68 14->69 14->77 14->78 14->79 14->80 14->118 14->119 14->120 14->121 14->122 14->123 14->124 14->125 14->126 15->13 16->1 17->1 17->1 17->18 17->26 17->30 17->33 17->44 17->45 17->46 17->47 17->49 17->50 17->59 17->64 17->67 17->101 17->106 18->1 18->77 19->1 19->1 19->20 19->52 20->1 20->1 20->1 20->54 20->83 20->91 20->115 21->44 22->1 22->1 22->56 22->102 22->108 23->45 24->1 24->25 25->1 25->1 25->1 25->24 26->1 26->78 27->1 27->1 27->28 27->61 28->1 28->1 28->1 28->92 28->99 28->100 28->103 28->110 28->114 29->46 30->1 30->79 31->1 31->1 31->32 31->66 32->1 32->1 32->1 32->109 32->112 32->117 33->1 33->1 33->80 34->1 34->1 34->35 34->69 35->1 35->1 35->1 35->113 35->116 36->1 36->48 36->85 36->86 37->1 37->1 37->82 37->96 37->97 38->47 39->48 40->1 40->49 41->1 41->42 42->1 42->1 42->41 43->1 43->14 44->44 44->45 44->53 44->54 44->54 44->55 44->55 44->83 44->83 45->26 45->45 45->46 45->56 45->57 45->57 45->59 45->91 45->91 45->127 46->30 46->33 46->46 46->47 46->62 46->63 46->63 46->64 46->67 46->84 46->92 46->92 46->93 46->94 46->101 46->101 46->102 46->105 46->106 46->106 46->107 46->108 46->115 46->115 46->128 46->133 46->140 46->141 46->142 46->143 46->144 47->47 47->49 47->70 47->70 47->81 47->87 47->95 47->98 47->103 47->103 47->131 47->134 48->1 48->1 48->48 48->71 48->72 48->73 48->73 48->82 48->90 48->99 48->112 48->112 48->117 48->129 48->132 48->137 49->1 49->1 49->1 49->17 49->18 49->44 49->49 49->50 49->74 49->75 49->76 49->76 49->100 49->100 49->130 51->1 51->19 52->1 53->1 54->1 54->1 55->1 55->44 56->1 56->1 56->1 56->102 56->108 57->1 57->45 60->1 60->27 61->1 62->1 62->1 62->1 63->1 63->46 65->1 65->31 66->1 68->1 68->34 69->1 70->1 70->47 71->1 71->82 72->1 72->1 72->1 73->1 73->48 74->1 74->75 75->1 75->1 75->1 75->74 76->1 76->49 77->1 77->51 77->51 78->1 78->60 78->60 79->1 79->65 79->65 80->1 80->68 80->68 81->1 81->1 81->1 81->85 81->86 81->87 81->96 81->97 81->98 81->109 81->113 81->135 81->138 82->1 82->1 82->1 82->82 82->88 82->89 82->89 82->104 82->104 82->110 82->111 82->111 82->114 82->116 82->116 82->117 82->136 82->139 82->145 82->146 82->147 83->1 84->1 84->1 84->62 84->62 85->1 85->109 86->1 86->48 86->85 87->1 87->1 88->1 88->1 88->1 89->1 89->82 91->1 92->1 94->1 94->1 94->84 94->84 96->1 96->113 97->1 97->1 97->82 97->96 98->1 98->1 99->1 99->1 100->1 101->1 101->1 101->94 101->94 102->1 102->1 102->94 102->94 103->1 104->1 104->88 104->88 107->1 108->1 109->1 109->1 110->1 112->1 113->1 113->1 115->1 116->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern void exit ( int status ) ; extern int pthread_cond_signal ( int * cond ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; char * * _global_argv = ( char * * ) 0 ; extern int fcntl ( int filedes , int cmd , ... ) ; void encodeStrings_litStr2_i $ nit ( void ) ; extern int unlink ( char const * filename ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int pthread_mutex_lock ( int * mutex ) ; extern int pthread_cond_init ( int * cond , int * attr ) ; void encodeStrings_litStr5_i $ nit ( void ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int getpagesize ( ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; int main ( int _formal_argc , char * * _formal_argv , char * * _formal_envp ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; void encodeStrings_litStr0_i $ nit ( void ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; int _global_argc = 0 ; void megaInit ( void ) ; char * * _global_envp = ( char * * ) 0 ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; void encodeStrings_litStr3_i $ nit ( void ) ; extern int ( /* missing proto */ printf ) ( ) ; extern int ( /* missing proto */ scanf ) ( ) ; extern void perror ( char const * str ) ; extern long clock ( void ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern double strtod ( char const * str , char const * endptr ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; void encodeStrings_litStr1_i $ nit ( void ) ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; void encodeStrings_litStr4_i $ nit ( void ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; char encodeStrings_litStr5 [ 2 ] ; extern int open ( char const * filename , int oflag , ... ) ; char encodeStrings_litStr4 [ 5 ] ; extern double sqrt ( double x ) ; char encodeStrings_litStr3 [ 10 ] ; char encodeStrings_litStr2 [ 3 ] ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; char encodeStrings_litStr1 [ 3 ] ; char encodeStrings_litStr0 [ 3 ] ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; int main ( int _formal_argc , char * * _formal_argv , char * * _formal_envp ) { int i ; int t ; int n ; int * x ; unsigned long __lengthofx ; void * tmp ; int j ; int sum ; long double * y ; unsigned long __lengthofy ; void * tmp___0 ; int * z ; unsigned long __lengthofz ; void * tmp___1 ; int * z2 ; unsigned long __lengthofz2 ; void * tmp___2 ; int zn ; int z2n ; int tmp___3 ; int tmp___4 ; int k ; int _BARRIER_0 ; { megaInit ( ) ; _global_argc = _formal_argc ; _global_argv = _formal_argv ; _global_envp = _formal_envp ; _BARRIER_0 = 1 ; _1_stringEncoder ( 0 , encodeStrings_litStr0 ) ; scanf ( encodeStrings_litStr0 , & t ) ; i = 0 ; while ( i < t ) { _1_stringEncoder ( 1 , encodeStrings_litStr1 ) ; scanf ( encodeStrings_litStr1 , & n ) ; __lengthofx = ( unsigned long ) n ; tmp = __builtin_alloca ( 4UL * __lengthofx ) ; x = ( int * ) tmp ; j = 0 ; while ( j < n ) { _1_stringEncoder ( 2 , encodeStrings_litStr2 ) ; scanf ( encodeStrings_litStr2 , x + j ) ; j ++ ; } sum = 0 ; j = 0 ; while ( j < n ) { sum += * ( x + j ) ; j ++ ; } _1_stringEncoder ( 3 , encodeStrings_litStr3 ) ; printf ( encodeStrings_litStr3 , i + 1 ) ; __lengthofy = ( unsigned long ) n ; tmp___0 = __builtin_alloca ( 16UL * __lengthofy ) ; y = ( long double * ) tmp___0 ; j = 0 ; while ( j < n ) { * ( y + j ) = ( long double ) 100 * ( ( long double ) 2 / ( long double ) n - ( long double ) * ( x + j ) / ( long double ) sum ) ; j ++ ; } __lengthofz = ( unsigned long ) n ; tmp___1 = __builtin_alloca ( 4UL * __lengthofz ) ; z = ( int * ) tmp___1 ; __lengthofz2 = ( unsigned long ) n ; tmp___2 = __builtin_alloca ( 4UL * __lengthofz2 ) ; z2 = ( int * ) tmp___2 ; zn = 0 ; z2n = 0 ; j = 0 ; while ( j < n ) { if ( * ( y + j ) < ( long double ) 0 ) { tmp___3 = zn ; zn ++ ; * ( z + tmp___3 ) = j ; } else { tmp___4 = z2n ; z2n ++ ; * ( z2 + tmp___4 ) = j ; } j ++ ; } j = 0 ; while ( j < zn ) { k = 0 ; while ( k < z2n ) { * ( y + * ( z2 + k ) ) += * ( y + * ( z + j ) ) / ( long double ) z2n ; k ++ ; } * ( y + * ( z + j ) ) = ( long double ) 0 ; j ++ ; } j = 0 ; while ( j < n ) { _1_stringEncoder ( 4 , encodeStrings_litStr4 ) ; printf ( encodeStrings_litStr4 , * ( y + j ) ) ; j ++ ; } _1_stringEncoder ( 5 , encodeStrings_litStr5 ) ; printf ( encodeStrings_litStr5 ) ; i ++ ; } return ( 0 ) ; } } void encodeStrings_litStr5_i $ nit ( void ) { { } } void encodeStrings_litStr3_i $ nit ( void ) { { } } void encodeStrings_litStr4_i $ nit ( void ) { { } } void encodeStrings_litStr0_i $ nit ( void ) { { } } void encodeStrings_litStr1_i $ nit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { case 5 : str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 4 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 3 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 2 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 1 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 0 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; } } } void megaInit ( void ) { { encodeStrings_litStr5_i $ nit ( ) ; encodeStrings_litStr4_i $ nit ( ) ; encodeStrings_litStr3_i $ nit ( ) ; encodeStrings_litStr2_i $ nit ( ) ; encodeStrings_litStr1_i $ nit ( ) ; encodeStrings_litStr0_i $ nit ( ) ; } } void encodeStrings_litStr2_i $ nit ( void ) { { } }
>>>Func
METHOD test
METHOD_RETURN void
PARAM void
<operator>.assignment size = 10
<operator>.assignment tmp = calloc(size  sizeof(int ))
<operator>.assignment arr = (int *)tmp
<operator>.assignment i = 0
bubbleSort bubbleSort(arr, size)
<operator>.assignment i___0 = 0
free free(arr)
RETURN return; return;
<operator>.lessThan i < size
<operator>.lessThan i___0 < size - 1
calloc calloc(size  sizeof(int ))
<operator>.cast (int *)tmp
<operator>.assignment tmp___0 = rand()
<operator>.assignment *(arr + i) = tmp___0 % 100
<operator>.postIncrement i ++
assert assert(*(arr + i___0) <= *(arr + (i___0 + 1)))
<operator>.postIncrement i___0 ++
<operator>.sizeOf sizeof(int )
<operator>.subtraction size - 1
<operator>.modulo tmp___0 % 100
<operator>.lessEqualsThan *(arr + i___0) <= *(arr + (i___0 + 1))
<operator>.addition arr + i
<operator>.addition arr + i___0
<operator>.addition arr + (i___0 + 1)
<operator>.addition i___0 + 1
rand rand()
<operator>.indirection *(arr + i)
<operator>.indirection *(arr + i___0)
<operator>.indirection *(arr + (i___0 + 1))
>>>PDG&32 0->2 0->3 0->4 0->5 0->6 0->7 0->8 0->9 0->10 0->11 0->12 0->13 0->14 0->15 0->17 0->19 0->21 0->22 0->24 0->25 0->26 0->27 2->1 3->1 3->4 3->11 3->13 4->1 4->1 4->5 4->14 5->1 5->1 5->7 5->24 6->1 6->11 7->1 7->9 7->21 7->25 7->26 8->1 8->12 9->1 10->1 11->1 11->1 11->7 11->11 11->15 11->16 11->17 11->17 11->22 11->24 11->24 11->28 11->29 12->1 12->1 12->1 12->12 12->18 12->19 12->19 12->21 12->23 12->25 12->25 12->26 12->26 12->27 12->27 12->30 12->31 14->1 15->1 15->1 15->22 16->1 16->1 16->1 17->1 17->11 18->1 18->1 19->1 19->12 20->1 21->1 21->12 21->12 22->1 22->16 22->16 23->1 23->1 23->18 23->18 26->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int ( /* missing proto */ calloc ) ( ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int ( /* missing proto */ assert ) ( ) ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern int getpagesize ( ) ; extern double ceil ( double x ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int ( /* missing proto */ bubbleSort ) ( ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int ( /* missing proto */ rand ) ( ) ; extern int ( /* missing proto */ free ) ( ) ; extern unsigned long strlen ( char const * s ) ; void main ( void ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int printf ( char const * format , ... ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; void test ( void ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; void main ( void ) { { megaInit ( ) ; } } void test ( void ) { int size ; int * arr ; int tmp ; int i ; int tmp___0 ; int i___0 ; { size = 10 ; tmp = calloc ( size , sizeof ( int ) ) ; arr = ( int * ) tmp ; i = 0 ; while ( i < size ) { tmp___0 = rand ( ) ; * ( arr + i ) = tmp___0 % 100 ; i ++ ; } bubbleSort ( arr , size ) ; i___0 = 0 ; while ( i___0 < size - 1 ) { assert ( * ( arr + i___0 ) <= * ( arr + ( i___0 + 1 ) ) ) ; i___0 ++ ; } free ( arr ) ; return ; } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { } } } void megaInit ( void ) { { } }
>>>Func
METHOD removeElement
METHOD_RETURN int
PARAM int *nums
PARAM int numsSize
PARAM int val
<operator>.assignment start = 0
<operator>.assignment i = 0
RETURN return (start); return (start);
<operator>.lessThan i < numsSize
IDENTIFIER start return (start);
<operator>.postIncrement i ++
<operator>.notEquals *(nums + i) != val
<operator>.assignment tmp = start
<operator>.postIncrement start ++
<operator>.assignment *(nums + tmp) = *(nums + i)
<operator>.addition nums + i
<operator>.addition nums + tmp
<operator>.addition nums + i
<operator>.indirection *(nums + i)
<operator>.indirection *(nums + tmp)
<operator>.indirection *(nums + i)
>>>PDG&21 0->2 0->3 0->4 0->5 0->6 0->8 0->9 0->10 0->11 0->12 0->13 0->15 0->16 0->17 2->1 2->15 3->8 4->1 4->11 5->1 5->1 5->9 5->12 5->13 6->1 6->8 7->1 8->1 8->1 8->1 8->8 8->10 8->10 8->11 8->15 8->15 8->17 8->18 9->7 10->1 10->8 11->1 11->1 11->1 11->12 11->13 11->14 11->16 11->17 11->19 11->20 12->1 12->16 13->1 13->1 13->9 13->12 14->1 14->1 14->1 15->1 16->1 17->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; void main ( void ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int printf ( char const * format , ... ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; int removeElement ( int * nums , int numsSize , int val ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { } } } void megaInit ( void ) { { } } int removeElement ( int * nums , int numsSize , int val ) { int i ; int start ; int tmp ; { start = 0 ; i = 0 ; while ( i < numsSize ) { if ( * ( nums + i ) != val ) { tmp = start ; start ++ ; * ( nums + tmp ) = * ( nums + i ) ; } i ++ ; } return ( start ) ; } } void main ( void ) { { megaInit ( ) ; } }
>>>Func
METHOD duplicateZeros
METHOD_RETURN void
PARAM int *arr
PARAM int arrSize
<operator>.assignment start = 0
<operator>.assignment tmp___0 = malloc((unsigned long )arrSize * sizeof(int ))
<operator>.assignment tmp = (int *)tmp___0
<operator>.assignment i = 0
<operator>.assignment i = 0
<operator>.assignment start = 0
RETURN return; return;
<operator>.lessThan i < arrSize
<operator>.lessThan start < arrSize
malloc malloc((unsigned long )arrSize * sizeof(int ))
<operator>.cast (int *)tmp___0
<operator>.assignment *(tmp + i) = *(arr + i)
<operator>.postIncrement i ++
<operator>.assignment *(arr + start) = *(tmp + i)
<operator>.postIncrement i ++
<operator>.postIncrement start ++
<operator>.multiplication (unsigned long )arrSize * sizeof(int )
<operator>.equals *(tmp + i) == 0
<operator>.cast (unsigned long )arrSize
<operator>.sizeOf sizeof(int )
<operator>.postIncrement start ++
<operator>.addition tmp + i
<operator>.addition arr + i
<operator>.addition arr + start
<operator>.addition tmp + i
<operator>.lessThan start < arrSize
<operator>.addition tmp + i
<operator>.assignment *(arr + start) = 0
<operator>.addition arr + start
<operator>.indirection *(tmp + i)
<operator>.indirection *(arr + i)
<operator>.indirection *(arr + start)
<operator>.indirection *(tmp + i)
<operator>.indirection *(tmp + i)
<operator>.indirection *(arr + start)
>>>PDG&39 0->2 0->3 0->4 0->6 0->7 0->8 0->9 0->10 0->11 0->12 0->14 0->16 0->18 0->19 0->20 0->21 0->22 0->24 0->25 0->26 0->27 0->28 0->29 0->30 0->31 0->32 2->1 2->26 2->27 3->11 3->20 3->22 5->1 5->1 5->6 5->14 6->1 6->1 6->1 6->25 6->28 7->11 8->1 8->1 8->18 8->28 8->30 9->1 9->12 10->1 11->1 11->11 11->12 11->15 11->16 11->16 11->25 11->25 11->26 11->26 11->33 11->34 12->1 12->1 12->1 12->12 12->17 12->18 12->19 12->19 12->21 12->24 12->27 12->27 12->28 12->29 12->30 12->35 12->36 12->37 13->1 13->5 14->1 15->1 15->1 15->1 16->1 16->11 17->1 17->1 18->1 18->1 18->28 18->30 19->1 19->12 20->1 20->13 21->1 21->1 21->24 21->29 23->1 24->29 25->1 26->1 27->1 29->12 29->19 29->31 29->32 29->32 29->38 30->1 31->1 31->1 32->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; void duplicateZeros ( int * arr , int arrSize ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern int ( /* missing proto */ malloc ) ( ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; void main ( void ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int printf ( char const * format , ... ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { } } } void megaInit ( void ) { { } } void duplicateZeros ( int * arr , int arrSize ) { int i ; int start ; int * tmp ; int tmp___0 ; { start = 0 ; tmp___0 = malloc ( ( unsigned long ) arrSize * sizeof ( int ) ) ; tmp = ( int * ) tmp___0 ; i = 0 ; while ( i < arrSize ) { * ( tmp + i ) = * ( arr + i ) ; i ++ ; } i = 0 ; start = 0 ; while ( start < arrSize ) { * ( arr + start ) = * ( tmp + i ) ; if ( * ( tmp + i ) == 0 ) { start ++ ; if ( start < arrSize ) { * ( arr + start ) = 0 ; } } i ++ ; start ++ ; } return ; } } void main ( void ) { { megaInit ( ) ; } }
>>>Func
METHOD fib
METHOD_RETURN int
PARAM int N
<operator>.assignment tmp = fib(N - 1)
<operator>.assignment tmp___0 = fib(N - 2)
RETURN return (tmp + tmp___0); return (tmp + tmp___0);
<operator>.equals N == 0
<operator>.equals N == 1
<operator>.addition tmp + tmp___0
RETURN return (0); return (0);
RETURN return (1); return (1);
fib fib(N - 1)
fib fib(N - 2)
LITERAL 0 return (0);
LITERAL 1 return (1);
<operator>.subtraction N - 1
<operator>.subtraction N - 2
>>>PDG&17 0->2 0->6 0->7 0->8 0->9 0->10 0->13 0->14 0->15 0->16 2->6 3->8 4->8 5->1 6->1 6->1 6->7 6->7 6->9 7->3 7->4 7->5 7->8 7->10 7->11 7->12 7->15 7->15 7->16 8->5 9->1 10->1 11->3 12->4 13->9 14->10 15->11 15->11 15->16 16->12 16->12
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; void main ( void ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int printf ( char const * format , ... ) ; int fib ( int N ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { } } } void megaInit ( void ) { { } } int fib ( int N ) { int tmp ; int tmp___0 ; { if ( N == 0 ) { return ( 0 ) ; } if ( N == 1 ) { return ( 1 ) ; } tmp = fib ( N - 1 ) ; tmp___0 = fib ( N - 2 ) ; return ( tmp + tmp___0 ) ; } } void main ( void ) { { megaInit ( ) ; } }
>>>Func
METHOD RSHash
METHOD_RETURN unsigned int
PARAM char *str
PARAM unsigned int len
<operator>.assignment b = 378551U
<operator>.assignment a = 63689U
<operator>.assignment hash = 0U
<operator>.assignment i = 0U
<operator>.assignment i = 0U
RETURN return (hash); return (hash);
<operator>.lessThan i < len
IDENTIFIER hash return (hash);
<operator>.assignment hash = hash * a + (unsigned int )*str
<operator>.assignmentMultiplication a *= b
<operator>.postIncrement str ++
<operator>.postIncrement i ++
<operator>.addition hash * a + (unsigned int )*str
<operator>.multiplication hash * a
<operator>.cast (unsigned int )*str
UNKNOWN unsigned int unsigned int
<operator>.indirection *str
>>>PDG&21 0->2 0->3 0->4 0->5 0->6 0->7 0->8 0->10 0->11 0->13 0->14 0->15 0->17 2->1 2->14 3->10 4->1 4->1 4->13 5->1 5->1 5->17 6->1 6->1 6->11 6->17 8->1 8->10 9->1 10->1 10->1 10->1 10->10 10->12 10->13 10->14 10->15 10->15 10->16 10->17 10->18 10->19 10->20 11->9 12->1 12->1 12->1 12->11 12->17 13->1 13->1 13->1 13->17 14->1 14->1 15->1 15->10 16->1 16->1 17->12 17->12 17->13 17->16 17->16 18->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; void main ( void ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int printf ( char const * format , ... ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; unsigned int RSHash ( char * str , unsigned int len ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { } } } void megaInit ( void ) { { } } unsigned int RSHash ( char * str , unsigned int len ) { unsigned int b ; unsigned int a ; unsigned int hash ; unsigned int i ; { b = 378551U ; a = 63689U ; hash = 0U ; i = 0U ; i = 0U ; while ( i < len ) { hash = hash * a + ( unsigned int ) * str ; a *= b ; str ++ ; i ++ ; } return ( hash ) ; } } void main ( void ) { { megaInit ( ) ; } }
>>>Func
METHOD _1_stringEncoder
METHOD_RETURN void
PARAM int n
PARAM char str[]
BLOCK <empty> <empty>
<operator>.assignment encodeStrings_i3 = 0
IDENTIFIER n switch(n)
LITERAL 1 <empty>
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'c'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 0 <empty>
<operator>.assignment str[encodeStrings_i3] = 'E'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'q'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'u'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'i'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'v'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'l'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'h'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'x'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'c'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'i'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'm'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'l'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'v'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'l'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'u'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'o'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'f'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'c'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'i'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'm'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'l'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'u'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'm'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'b'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ':'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
>>>PDG&121 0->2 0->3 0->4 0->5 0->6 0->7 0->8 0->9 0->10 0->11 0->12 0->13 0->14 0->15 0->16 0->17 0->18 0->19 0->20 0->21 0->22 0->23 0->24 0->25 0->26 0->27 0->28 0->29 0->30 0->31 0->32 0->33 0->34 0->35 0->36 0->37 0->38 0->39 0->40 0->41 0->42 0->43 0->44 0->45 0->46 0->47 0->48 0->49 0->50 0->51 0->52 0->53 0->54 0->55 0->56 0->57 0->58 0->59 0->60 0->61 0->62 0->63 0->64 0->65 0->66 0->67 0->68 0->69 0->70 0->71 0->72 0->73 0->74 0->75 0->76 0->77 0->78 0->79 0->80 0->81 0->82 0->83 0->84 0->85 0->86 0->87 0->88 0->89 0->90 0->91 0->92 0->93 0->94 0->95 0->96 0->97 0->98 0->99 0->100 0->101 0->102 0->103 0->104 0->105 0->106 0->107 0->108 0->109 0->110 0->111 0->112 0->113 0->114 0->115 0->116 0->117 0->118 0->119 0->120 2->1 3->1 5->1 5->1 5->9 5->16 8->1 9->11 10->1 11->13 12->1 12->1 13->1 13->1 15->1 16->18 17->1 18->20 20->22 22->24 24->26 26->28 28->30 30->32 32->34 33->1 34->36 36->38 37->1 38->40 40->42 41->1 42->44 44->46 46->48 48->50 50->52 52->54 54->56 56->58 58->60 60->62 61->1 62->64 64->66 66->68 68->70 70->72 72->74 73->1 74->76 75->1 76->78 78->80 80->82 82->84 83->1 84->86 85->1 86->88 88->90 89->1 90->92 91->1 92->94 94->96 95->1 96->98 97->1 98->100 99->1 100->102 101->1 102->104 103->1 104->106 105->1 106->108 108->110 109->1 110->112 111->1 112->114 113->1 114->116 115->1 116->118 117->1 118->120 119->1 119->1 120->1 120->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; char * * _global_argv = ( char * * ) 0 ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern int raise ( int sig ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; int main ( int argc , char * * argv , char * * _formal_envp ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void encodeStrings_litStr0_i $ nit ( void ) ; int _global_argc = 0 ; void megaInit ( void ) ; char * * _global_envp = ( char * * ) 0 ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int ( /* missing proto */ printf ) ( ) ; extern int scanf ( char const * format , ... ) ; extern void perror ( char const * str ) ; extern long clock ( void ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern float strtof ( char const * str , char const * endptr ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern double strtod ( char const * str , char const * endptr ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; void encodeStrings_litStr1_i $ nit ( void ) ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; char encodeStrings_litStr1 [ 3 ] ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; char encodeStrings_litStr0 [ 53 ] ; void megaInit ( void ) { { encodeStrings_litStr1_i $ nit ( ) ; encodeStrings_litStr0_i $ nit ( ) ; } } void encodeStrings_litStr0_i $ nit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { case 1 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 0 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; } } } int main ( int argc , char * * argv , char * * _formal_envp ) { long decimalNumber ; long quotient ; int i ; int j ; int temp ; char hexadecimalNumber [ 100 ] ; int tmp ; int _BARRIER_0 ; { megaInit ( ) ; _global_argc = argc ; _global_argv = argv ; _global_envp = _formal_envp ; _BARRIER_0 = 1 ; if ( argc < 2 ) { return ( 1 ) ; } i = 1 ; decimalNumber = ( long ) ( ( int ) * ( * ( argv + 1 ) + 0 ) ) ; quotient = decimalNumber ; while ( quotient != 0L ) { temp = ( int ) ( quotient % 16L ) ; if ( temp < 10 ) { temp += 48 ; } else { temp += 55 ; } tmp = i ; i ++ ; hexadecimalNumber [ tmp ] = ( char ) temp ; quotient /= 16L ; } _1_stringEncoder ( 0 , encodeStrings_litStr0 ) ; printf ( encodeStrings_litStr0 , decimalNumber ) ; j = i - 1 ; while ( j > 0 ) { _1_stringEncoder ( 1 , encodeStrings_litStr1 ) ; printf ( encodeStrings_litStr1 , ( int ) hexadecimalNumber [ j ] ) ; j -- ; } return ( 0 ) ; } } void encodeStrings_litStr1_i $ nit ( void ) { { } }
>>>Func
METHOD cmpval
METHOD_RETURN int*
PARAM void const   *a
PARAM void const   *b
RETURN return ((int *)(*((int *)b) - *((int *)a))); return ((int *)(*((int *)b) - *((int *)a)));
<operator>.cast (int *)(*((int *)b) - *((int *)a))
<operator>.subtraction *((int *)b) - *((int *)a)
<operator>.cast (int *)b
<operator>.cast (int *)a
>>>PDG&9 0->2 0->3 0->7 0->8 2->8 3->7 4->1 5->1 5->1 5->4 6->1 6->1 6->5 6->5 7->1 8->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; void main ( void ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int printf ( char const * format , ... ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; int * cmpval ( void const * a , void const * b ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; int * cmpval ( void const * a , void const * b ) { { return ( ( int * ) ( * ( ( int * ) b ) - * ( ( int * ) a ) ) ) ; } } void megaInit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { } } } void main ( void ) { { megaInit ( ) ; } }
>>>Func
METHOD fact
METHOD_RETURN int
PARAM int n
<operator>.equals n == 1
RETURN return (1); return (1);
LITERAL 1 return (1);
<operator>.assignment tmp = fact(n - 1)
RETURN return (n * tmp); return (n * tmp);
<operator>.multiplication n * tmp
fact fact(n - 1)
<operator>.subtraction n - 1
>>>PDG&11 0->2 0->3 0->4 0->5 0->8 0->10 2->3 3->1 3->1 3->4 3->6 3->7 3->8 3->9 3->10 3->10 4->1 5->4 6->8 7->1 8->7 9->6 10->8 10->9 10->9
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; int fact ( int n ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; void main ( void ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int printf ( char const * format , ... ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; int fact ( int n ) { int tmp ; { if ( n == 1 ) { return ( 1 ) ; } else { tmp = fact ( n - 1 ) ; return ( n * tmp ) ; } } } void megaInit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { } } } void main ( void ) { { megaInit ( ) ; } }
>>>Func
METHOD string_compare
METHOD_RETURN int
PARAM void *string1
PARAM void *string2
<operator>.assignment result = strcmp((char *)string1  (char *)string2)
<operator>.lessThan result < 0
strcmp strcmp((char *)string1  (char *)string2)
RETURN return (-1); return (-1);
<operator>.cast (char *)string1
<operator>.cast (char *)string2
<operator>.minus -1
<operator>.greaterThan result > 0
RETURN return (1); return (1);
LITERAL 1 return (1);
RETURN return (0); return (0);
LITERAL 0 return (0);
>>>PDG&16 0->2 0->3 0->5 0->6 0->8 0->9 0->10 0->11 0->12 0->13 0->14 0->15 2->6 2->8 3->6 3->9 4->1 4->1 4->5 5->1 5->1 5->7 5->10 5->11 5->11 6->1 6->1 6->4 6->4 7->1 8->1 9->1 10->1 10->7 11->12 11->14 12->1 13->12 14->1 15->14
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; void main ( void ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; int string_compare ( void * string1 , void * string2 ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int printf ( char const * format , ... ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int ( /* missing proto */ strcmp ) ( ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { } } } void megaInit ( void ) { { } } int string_compare ( void * string1 , void * string2 ) { int result ; { result = strcmp ( ( char * ) string1 , ( char * ) string2 ) ; if ( result < 0 ) { return ( -1 ) ; } else if ( result > 0 ) { return ( 1 ) ; } else { return ( 0 ) ; } } } void main ( void ) { { megaInit ( ) ; } }
>>>Func
METHOD _1_stringEncoder
METHOD_RETURN void
PARAM int n
PARAM char str[]
BLOCK <empty> <empty>
<operator>.assignment encodeStrings_i3 = 0
IDENTIFIER n switch(n)
LITERAL 4 <empty>
<operator>.assignment str[encodeStrings_i3] = 'T'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'p'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 3 <empty>
<operator>.assignment str[encodeStrings_i3] = 'H'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'l'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'l'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'o'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'w'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'o'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'l'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '!'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 2 <empty>
<operator>.assignment str[encodeStrings_i3] = 'H'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'l'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'l'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'o'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'w'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'o'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'l'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 1 <empty>
<operator>.assignment str[encodeStrings_i3] = 'H'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'l'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'l'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'o'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'W'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'o'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'l'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '!'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 0 <empty>
<operator>.assignment str[encodeStrings_i3] = 'H'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'l'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'l'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'o'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'W'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'o'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'l'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
>>>PDG&140 0->2 0->3 0->4 0->5 0->6 0->7 0->8 0->9 0->10 0->11 0->12 0->13 0->14 0->15 0->16 0->17 0->18 0->19 0->20 0->21 0->22 0->23 0->24 0->25 0->26 0->27 0->28 0->29 0->30 0->31 0->32 0->33 0->34 0->35 0->36 0->37 0->38 0->39 0->40 0->41 0->42 0->43 0->44 0->45 0->46 0->47 0->48 0->49 0->50 0->51 0->52 0->53 0->54 0->55 0->56 0->57 0->58 0->59 0->60 0->61 0->62 0->63 0->64 0->65 0->66 0->67 0->68 0->69 0->70 0->71 0->72 0->73 0->74 0->75 0->76 0->77 0->78 0->79 0->80 0->81 0->82 0->83 0->84 0->85 0->86 0->87 0->88 0->89 0->90 0->91 0->92 0->93 0->94 0->95 0->96 0->97 0->98 0->99 0->100 0->101 0->102 0->103 0->104 0->105 0->106 0->107 0->108 0->109 0->110 0->111 0->112 0->113 0->114 0->115 0->116 0->117 0->118 0->119 0->120 0->121 0->122 0->123 0->124 0->125 0->126 0->127 0->128 0->129 0->130 0->131 0->132 0->133 0->134 0->135 0->136 0->137 0->138 0->139 2->1 3->1 5->1 5->1 5->9 5->38 5->65 5->90 5->117 8->1 9->11 11->13 13->15 14->1 15->17 17->19 18->1 19->21 20->1 21->23 22->1 23->25 25->27 26->1 27->29 28->1 29->31 30->1 31->33 32->1 33->35 34->1 34->1 35->1 35->1 37->1 38->40 39->1 40->42 42->44 44->46 46->48 47->1 48->50 49->1 50->52 51->1 52->54 53->1 54->56 55->1 56->58 57->1 58->60 59->1 60->62 61->1 61->1 62->1 62->1 64->1 65->67 66->1 67->69 69->71 71->73 73->75 74->1 75->77 76->1 77->79 78->1 79->81 80->1 81->83 82->1 83->85 84->1 85->87 86->1 86->1 87->1 87->1 89->1 90->92 91->1 92->94 94->96 96->98 98->100 99->1 100->102 101->1 102->104 103->1 104->106 105->1 106->108 107->1 108->110 109->1 110->112 111->1 112->114 113->1 113->1 114->1 114->1 116->1 117->119 118->1 119->121 121->123 123->125 125->127 126->1 127->129 128->1 129->131 130->1 131->133 132->1 133->135 134->1 135->137 136->1 137->139 138->1 138->1 139->1 139->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fclose ( void * stream ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; void encodeStrings_litStr2_i $ nit ( void ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int ( /* missing proto */ assert ) ( ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; void test_sdbm ( void ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; void main ( void ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; void encodeStrings_litStr0_i $ nit ( void ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void megaInit ( void ) ; extern int ( /* missing proto */ printf ) ( ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; void encodeStrings_litStr3_i $ nit ( void ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern int scanf ( char const * format , ... ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern float strtof ( char const * str , char const * endptr ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; void encodeStrings_litStr1_i $ nit ( void ) ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; void encodeStrings_litStr4_i $ nit ( void ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int ( /* missing proto */ sdbm ) ( ) ; extern int open ( char const * filename , int oflag , ... ) ; char encodeStrings_litStr4 [ 14 ] ; extern double sqrt ( double x ) ; char encodeStrings_litStr3 [ 13 ] ; char encodeStrings_litStr2 [ 12 ] ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; char encodeStrings_litStr1 [ 13 ] ; char encodeStrings_litStr0 [ 12 ] ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; void test_sdbm ( void ) { int tmp ; int tmp___0 ; int tmp___1 ; int tmp___2 ; { _1_stringEncoder ( 0 , encodeStrings_litStr0 ) ; tmp = sdbm ( encodeStrings_litStr0 ) ; assert ( ( unsigned long ) tmp == 0xb2c56f18c908f484UL ) ; _1_stringEncoder ( 1 , encodeStrings_litStr1 ) ; tmp___0 = sdbm ( encodeStrings_litStr1 ) ; assert ( ( long ) tmp___0 == 7903571203300273309L ) ; _1_stringEncoder ( 2 , encodeStrings_litStr2 ) ; tmp___1 = sdbm ( encodeStrings_litStr2 ) ; assert ( ( unsigned long ) tmp___1 == 0xd25111c14694d4a4UL ) ; _1_stringEncoder ( 3 , encodeStrings_litStr3 ) ; tmp___2 = sdbm ( encodeStrings_litStr3 ) ; assert ( ( unsigned long ) tmp___2 == 0xd3b4a5253344547dUL ) ; _1_stringEncoder ( 4 , encodeStrings_litStr4 ) ; printf ( encodeStrings_litStr4 ) ; return ; } } void encodeStrings_litStr4_i $ nit ( void ) { { } } void encodeStrings_litStr1_i $ nit ( void ) { { } } void encodeStrings_litStr3_i $ nit ( void ) { { } } void main ( void ) { { megaInit ( ) ; } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { case 4 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 3 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 2 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 1 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 0 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; } } } void megaInit ( void ) { { encodeStrings_litStr4_i $ nit ( ) ; encodeStrings_litStr3_i $ nit ( ) ; encodeStrings_litStr2_i $ nit ( ) ; encodeStrings_litStr1_i $ nit ( ) ; encodeStrings_litStr0_i $ nit ( ) ; } } void encodeStrings_litStr2_i $ nit ( void ) { { } } void encodeStrings_litStr0_i $ nit ( void ) { { } }
>>>Func
METHOD _1_stringEncoder
METHOD_RETURN void
PARAM int n
PARAM char str[]
BLOCK <empty> <empty>
<operator>.assignment encodeStrings_i3 = 0
IDENTIFIER n switch(n)
LITERAL 3 <empty>
<operator>.assignment str[encodeStrings_i3] = 'T'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '3'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ':'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'c'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'h'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'p'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 2 <empty>
<operator>.assignment str[encodeStrings_i3] = 'T'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '2'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ':'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'c'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'h'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'p'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 1 <empty>
<operator>.assignment str[encodeStrings_i3] = 'T'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '1'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ':'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'c'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'h'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'p'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 0 <empty>
<operator>.assignment str[encodeStrings_i3] = 'S'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'i'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'g'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ':'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
>>>PDG&201 0->2 0->3 0->4 0->5 0->6 0->7 0->8 0->9 0->10 0->11 0->12 0->13 0->14 0->15 0->16 0->17 0->18 0->19 0->20 0->21 0->22 0->23 0->24 0->25 0->26 0->27 0->28 0->29 0->30 0->31 0->32 0->33 0->34 0->35 0->36 0->37 0->38 0->39 0->40 0->41 0->42 0->43 0->44 0->45 0->46 0->47 0->48 0->49 0->50 0->51 0->52 0->53 0->54 0->55 0->56 0->57 0->58 0->59 0->60 0->61 0->62 0->63 0->64 0->65 0->66 0->67 0->68 0->69 0->70 0->71 0->72 0->73 0->74 0->75 0->76 0->77 0->78 0->79 0->80 0->81 0->82 0->83 0->84 0->85 0->86 0->87 0->88 0->89 0->90 0->91 0->92 0->93 0->94 0->95 0->96 0->97 0->98 0->99 0->100 0->101 0->102 0->103 0->104 0->105 0->106 0->107 0->108 0->109 0->110 0->111 0->112 0->113 0->114 0->115 0->116 0->117 0->118 0->119 0->120 0->121 0->122 0->123 0->124 0->125 0->126 0->127 0->128 0->129 0->130 0->131 0->132 0->133 0->134 0->135 0->136 0->137 0->138 0->139 0->140 0->141 0->142 0->143 0->144 0->145 0->146 0->147 0->148 0->149 0->150 0->151 0->152 0->153 0->154 0->155 0->156 0->157 0->158 0->159 0->160 0->161 0->162 0->163 0->164 0->165 0->166 0->167 0->168 0->169 0->170 0->171 0->172 0->173 0->174 0->175 0->176 0->177 0->178 0->179 0->180 0->181 0->182 0->183 0->184 0->185 0->186 0->187 0->188 0->189 0->190 0->191 0->192 0->193 0->194 0->195 0->196 0->197 0->198 0->199 0->200 2->1 3->1 5->1 5->1 5->9 5->62 5->115 5->168 8->1 9->11 11->13 13->15 15->17 16->1 17->19 18->1 19->21 21->23 23->25 25->27 27->29 29->31 30->1 31->33 32->1 33->35 35->37 36->1 37->39 38->1 39->41 41->43 42->1 43->45 44->1 45->47 46->1 47->49 48->1 49->51 50->1 51->53 52->1 53->55 54->1 55->57 56->1 57->59 58->1 58->1 59->1 59->1 61->1 62->64 64->66 66->68 68->70 69->1 70->72 71->1 72->74 74->76 76->78 78->80 80->82 82->84 83->1 84->86 85->1 86->88 88->90 89->1 90->92 91->1 92->94 94->96 95->1 96->98 97->1 98->100 99->1 100->102 101->1 102->104 103->1 104->106 105->1 106->108 107->1 108->110 109->1 110->112 111->1 111->1 112->1 112->1 114->1 115->117 117->119 119->121 121->123 122->1 123->125 124->1 125->127 127->129 129->131 131->133 133->135 135->137 136->1 137->139 138->1 139->141 141->143 142->1 143->145 144->1 145->147 147->149 148->1 149->151 150->1 151->153 152->1 153->155 154->1 155->157 156->1 157->159 158->1 159->161 160->1 161->163 162->1 163->165 164->1 164->1 165->1 165->1 167->1 168->170 170->172 171->1 172->174 173->1 174->176 175->1 176->178 177->1 178->180 180->182 182->184 183->1 184->186 186->188 187->1 188->190 189->1 190->192 191->1 192->194 193->1 194->196 195->1 196->198 197->1 198->200 199->1 199->1 200->1 200->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern void exit ( int status ) ; extern int pthread_cond_signal ( int * cond ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; char * * _global_argv = ( char * * ) 0 ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int ( /* missing proto */ boyer_moore_search ) ( ) ; extern int fcntl ( int filedes , int cmd , ... ) ; void encodeStrings_litStr2_i $ nit ( void ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern int raise ( int sig ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; int main ( int _formal_argc , char * * _formal_argv , char * * _formal_envp ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; void encodeStrings_litStr0_i $ nit ( void ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; int _global_argc = 0 ; void megaInit ( void ) ; char * * _global_envp = ( char * * ) 0 ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; void encodeStrings_litStr3_i $ nit ( void ) ; extern int ( /* missing proto */ printf ) ( ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; void encodeStrings_litStr1_i $ nit ( void ) ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; char encodeStrings_litStr3 [ 26 ] ; char encodeStrings_litStr2 [ 26 ] ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; char encodeStrings_litStr1 [ 26 ] ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; char encodeStrings_litStr0 [ 17 ] ; void encodeStrings_litStr2_i $ nit ( void ) { { } } int main ( int _formal_argc , char * * _formal_argv , char * * _formal_envp ) { char str [ 26 ] ; char pat1 [ 6 ] ; char pat2 [ 4 ] ; char pat3 [ 4 ] ; int _BARRIER_0 ; { megaInit ( ) ; _global_argc = _formal_argc ; _global_argv = _formal_argv ; _global_envp = _formal_envp ; _BARRIER_0 = 1 ; str [ 0 ] = ( char ) 65 ; str [ 1 ] = ( char ) 65 ; str [ 2 ] = ( char ) 66 ; str [ 3 ] = ( char ) 67 ; str [ 4 ] = ( char ) 65 ; str [ 5 ] = ( char ) 66 ; str [ 6 ] = ( char ) 49 ; str [ 7 ] = ( char ) 50 ; str [ 8 ] = ( char ) 65 ; str [ 9 ] = ( char ) 70 ; str [ 10 ] = ( char ) 65 ; str [ 11 ] = ( char ) 65 ; str [ 12 ] = ( char ) 66 ; str [ 13 ] = ( char ) 67 ; str [ 14 ] = ( char ) 65 ; str [ 15 ] = ( char ) 66 ; str [ 16 ] = ( char ) 70 ; str [ 17 ] = ( char ) 70 ; str [ 18 ] = ( char ) 69 ; str [ 19 ] = ( char ) 71 ; str [ 20 ] = ( char ) 65 ; str [ 21 ] = ( char ) 66 ; str [ 22 ] = ( char ) 67 ; str [ 23 ] = ( char ) 65 ; str [ 24 ] = ( char ) 66 ; str [ 25 ] = ( char ) 0 ; pat1 [ 0 ] = ( char ) 65 ; pat1 [ 1 ] = ( char ) 66 ; pat1 [ 2 ] = ( char ) 67 ; pat1 [ 3 ] = ( char ) 65 ; pat1 [ 4 ] = ( char ) 66 ; pat1 [ 5 ] = ( char ) 0 ; pat2 [ 0 ] = ( char ) 70 ; pat2 [ 1 ] = ( char ) 70 ; pat2 [ 2 ] = ( char ) 70 ; pat2 [ 3 ] = ( char ) 0 ; pat3 [ 0 ] = ( char ) 67 ; pat3 [ 1 ] = ( char ) 65 ; pat3 [ 2 ] = ( char ) 66 ; pat3 [ 3 ] = ( char ) 0 ; _1_stringEncoder ( 0 , encodeStrings_litStr0 ) ; printf ( encodeStrings_litStr0 , str ) ; _1_stringEncoder ( 1 , encodeStrings_litStr1 ) ; printf ( encodeStrings_litStr1 , pat1 ) ; boyer_moore_search ( str , pat1 ) ; _1_stringEncoder ( 2 , encodeStrings_litStr2 ) ; printf ( encodeStrings_litStr2 , pat2 ) ; boyer_moore_search ( str , pat2 ) ; _1_stringEncoder ( 3 , encodeStrings_litStr3 ) ; printf ( encodeStrings_litStr3 , pat3 ) ; boyer_moore_search ( str , pat3 ) ; return ( 0 ) ; } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { case 3 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 2 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 1 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 0 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; } } } void encodeStrings_litStr0_i $ nit ( void ) { { } } void encodeStrings_litStr3_i $ nit ( void ) { { } } void encodeStrings_litStr1_i $ nit ( void ) { { } } void megaInit ( void ) { { encodeStrings_litStr3_i $ nit ( ) ; encodeStrings_litStr2_i $ nit ( ) ; encodeStrings_litStr1_i $ nit ( ) ; encodeStrings_litStr0_i $ nit ( ) ; } }
>>>Func
METHOD cmpval
METHOD_RETURN int
PARAM void const   *a
PARAM void const   *b
RETURN return (*((int *)a) - *((int *)b)); return (*((int *)a) - *((int *)b));
<operator>.subtraction *((int *)a) - *((int *)b)
<operator>.cast (int *)a
<operator>.cast (int *)b
>>>PDG&8 0->2 0->3 0->6 0->7 2->6 3->7 4->1 5->1 5->1 5->1 5->4 6->1 7->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; void main ( void ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int printf ( char const * format , ... ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; int cmpval ( void const * a , void const * b ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; int cmpval ( void const * a , void const * b ) { { return ( * ( ( int * ) a ) - * ( ( int * ) b ) ) ; } } void megaInit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { } } } void main ( void ) { { megaInit ( ) ; } }
>>>Func
METHOD sort
METHOD_RETURN void
PARAM int *a
PARAM int n
RETURN return; return;
LITERAL 1 while (1)
<operator>.assignment tmp = check_sorted(a, n)
shuffle shuffle(a, n)
IDENTIFIER tmp if (tmp)
check_sorted check_sorted(a, n)
>>>PDG&10 0->2 0->3 0->4 0->5 0->7 0->8 0->9 2->1 2->9 3->1 3->9 4->1 6->1 6->1 6->1 9->1 9->1 9->6 9->6 9->7 9->7
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; void sort ( int * a , int n ) ; extern int fclose ( void * stream ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; void main ( void ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int printf ( char const * format , ... ) ; extern int ( /* missing proto */ check_sorted ) ( ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern int scanf ( char const * format , ... ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int ( /* missing proto */ shuffle ) ( ) ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { } } } void main ( void ) { { megaInit ( ) ; } } void megaInit ( void ) { { } } void sort ( int * a , int n ) { int tmp ; { while ( 1 ) { tmp = check_sorted ( a , n ) ; if ( tmp ) { break ; } shuffle ( a , n ) ; } return ; } }
>>>Func
METHOD _1_stringEncoder
METHOD_RETURN void
PARAM int n
PARAM char str[]
BLOCK <empty> <empty>
<operator>.assignment encodeStrings_i3 = 0
IDENTIFIER n switch(n)
>>>PDG&7 0->2 0->3 0->4 0->5 0->6 2->1 3->1 5->1 5->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; void main ( void ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int printf ( char const * format , ... ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; int cmp ( int * a , int * b ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { } } } void megaInit ( void ) { { } } int cmp ( int * a , int * b ) { { return ( * b - * a ) ; } } void main ( void ) { { megaInit ( ) ; } }
>>>Func
METHOD sumk
METHOD_RETURN long
PARAM long *a
PARAM long start
PARAM long k
PARAM long n
<operator>.assignment sum = 0L
<operator>.assignment i = start
RETURN return (sum); return (sum);
LITERAL 1 while (1)
IDENTIFIER sum return (sum);
<operator>.assignmentPlus sum += *(a + i)
<operator>.postIncrement i ++
<operator>.lessThan i < n
<operator>.logicalNot ! (i < start + k)
<operator>.addition a + i
<operator>.lessThan i < start + k
<operator>.addition start + k
<operator>.indirection *(a + i)
>>>PDG&19 0->2 0->3 0->4 0->5 0->6 0->7 0->9 0->10 0->11 0->12 0->13 0->15 0->16 0->17 2->1 2->15 3->7 3->16 3->17 4->1 4->16 4->17 5->1 5->13 6->1 6->1 6->10 6->11 7->1 7->1 7->1 7->13 8->1 10->8 11->1 11->1 11->1 11->10 12->1 12->1 12->13 13->1 13->1 13->1 13->14 13->16 13->16 13->17 14->1 14->1 14->11 14->12 14->13 14->15 14->18 15->1 16->1 16->1 16->12 16->14 16->14 16->15 17->1 17->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; void main ( void ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int printf ( char const * format , ... ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; long sumk ( long * a , long start , long k , long n ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { } } } void megaInit ( void ) { { } } long sumk ( long * a , long start , long k , long n ) { long sum ; long i ; { sum = 0L ; i = start ; while ( 1 ) { if ( i < n ) { if ( ! ( i < start + k ) ) { break ; } } else { break ; } sum += * ( a + i ) ; i ++ ; } return ( sum ) ; } } void main ( void ) { { megaInit ( ) ; } }
>>>Func
METHOD _1_stringEncoder
METHOD_RETURN void
PARAM int n
PARAM char str[]
BLOCK <empty> <empty>
<operator>.assignment encodeStrings_i3 = 0
IDENTIFIER n switch(n)
LITERAL 1 <empty>
<operator>.assignment str[encodeStrings_i3] = '\n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 0 <empty>
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
>>>PDG&21 0->2 0->3 0->4 0->5 0->6 0->7 0->8 0->9 0->10 0->11 0->12 0->13 0->14 0->15 0->16 0->17 0->18 0->19 0->20 2->1 3->1 5->1 5->1 5->9 5->14 8->1 9->11 10->1 10->1 11->1 11->1 13->1 14->16 15->1 16->18 17->1 18->20 19->1 19->1 20->1 20->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int unlink ( char const * filename ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; void main ( void ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void encodeStrings_litStr0_i $ nit ( void ) ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int ( /* missing proto */ printf ) ( ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; void encodeStrings_litStr1_i $ nit ( void ) ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; void display ( int * array , int n ) ; extern double sqrt ( double x ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; char encodeStrings_litStr1 [ 2 ] ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; char encodeStrings_litStr0 [ 4 ] ; void encodeStrings_litStr0_i $ nit ( void ) { { } } void main ( void ) { { megaInit ( ) ; } } void megaInit ( void ) { { encodeStrings_litStr1_i $ nit ( ) ; encodeStrings_litStr0_i $ nit ( ) ; } } void encodeStrings_litStr1_i $ nit ( void ) { { } } void display ( int * array , int n ) { int i ; { i = 0 ; while ( i < n ) { _1_stringEncoder ( 0 , encodeStrings_litStr0 ) ; printf ( encodeStrings_litStr0 , * ( array + i ) ) ; i ++ ; } _1_stringEncoder ( 1 , encodeStrings_litStr1 ) ; printf ( encodeStrings_litStr1 ) ; return ; } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { case 1 : str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 0 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; } } }
>>>Func
METHOD main
METHOD_RETURN int
PARAM int _formal_argc
PARAM char **_formal_argv
PARAM char **_formal_envp
megaInit megaInit()
<operator>.assignment _global_argc = _formal_argc
<operator>.assignment _global_argv = _formal_argv
<operator>.assignment _global_envp = _formal_envp
<operator>.assignment _BARRIER_0 = 1
test_sdbm test_sdbm()
RETURN return (0); return (0);
LITERAL 0 return (0);
>>>PDG&13 0->2 0->3 0->4 0->5 0->6 0->7 0->8 0->9 0->10 0->11 0->12 2->6 3->7 4->8 5->1 6->1 6->1 6->1 7->1 7->1 7->1 8->1 8->1 8->1 9->1 9->1 10->1 11->1 12->11
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fclose ( void * stream ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; char * * _global_argv = ( char * * ) 0 ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern int ( /* missing proto */ test_sdbm ) ( ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; int main ( int _formal_argc , char * * _formal_argv , char * * _formal_envp ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; int _global_argc = 0 ; char * * _global_envp = ( char * * ) 0 ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int printf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern int scanf ( char const * format , ... ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { } } } void megaInit ( void ) { { } } int main ( int _formal_argc , char * * _formal_argv , char * * _formal_envp ) { int _BARRIER_0 ; { megaInit ( ) ; _global_argc = _formal_argc ; _global_argv = _formal_argv ; _global_envp = _formal_envp ; _BARRIER_0 = 1 ; test_sdbm ( ) ; return ( 0 ) ; } }
>>>Func
METHOD retrive_copy_of_value
METHOD_RETURN void*
PARAM void const   *value
<operator>.assignment tmp = malloc(sizeof(void *))
<operator>.assignment value_copy = (void *)tmp
memcpy memcpy(value_copy  value  sizeof(void *))
RETURN return (value_copy); return (value_copy);
IDENTIFIER value_copy return (value_copy);
<operator>.cast (void *)tmp
<operator>.sizeOf sizeof(void *)
>>>PDG&10 0->2 0->4 0->5 0->7 0->8 2->5 3->1 3->1 3->4 3->8 4->1 4->1 4->5 5->1 5->1 5->1 5->7 6->1 7->6 8->1 9->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern int ( /* missing proto */ malloc ) ( ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; void main ( void ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int printf ( char const * format , ... ) ; void * retrive_copy_of_value ( void const * value ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern int ( /* missing proto */ memcpy ) ( ) ; void * retrive_copy_of_value ( void const * value ) { void * value_copy ; int tmp ; { tmp = malloc ( sizeof ( void * ) ) ; value_copy = ( void * ) tmp ; memcpy ( value_copy , value , sizeof ( void * ) ) ; return ( value_copy ) ; } } void megaInit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { } } } void main ( void ) { { megaInit ( ) ; } }
>>>Func
METHOD _1_stringEncoder
METHOD_RETURN void
PARAM int n
PARAM char str[]
BLOCK <empty> <empty>
<operator>.assignment encodeStrings_i3 = 0
IDENTIFIER n switch(n)
LITERAL 3 <empty>
<operator>.assignment str[encodeStrings_i3] = 'i'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'f'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '-'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '1'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '-'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'l'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'o'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 2 <empty>
<operator>.assignment str[encodeStrings_i3] = 'i'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'f'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '-'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '2'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '-'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'l'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'o'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 1 <empty>
<operator>.assignment str[encodeStrings_i3] = 'i'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'f'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '-'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '2'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '-'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'w'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'i'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 0 <empty>
<operator>.assignment str[encodeStrings_i3] = 'i'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'f'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '-'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '1'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '-'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'w'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'i'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
>>>PDG&95 0->2 0->3 0->4 0->5 0->6 0->7 0->8 0->9 0->10 0->11 0->12 0->13 0->14 0->15 0->16 0->17 0->18 0->19 0->20 0->21 0->22 0->23 0->24 0->25 0->26 0->27 0->28 0->29 0->30 0->31 0->32 0->33 0->34 0->35 0->36 0->37 0->38 0->39 0->40 0->41 0->42 0->43 0->44 0->45 0->46 0->47 0->48 0->49 0->50 0->51 0->52 0->53 0->54 0->55 0->56 0->57 0->58 0->59 0->60 0->61 0->62 0->63 0->64 0->65 0->66 0->67 0->68 0->69 0->70 0->71 0->72 0->73 0->74 0->75 0->76 0->77 0->78 0->79 0->80 0->81 0->82 0->83 0->84 0->85 0->86 0->87 0->88 0->89 0->90 0->91 0->92 0->93 0->94 2->1 3->1 5->1 5->1 5->9 5->32 5->55 5->76 8->1 9->11 10->1 11->13 13->15 14->1 15->17 16->1 17->19 18->1 19->21 20->1 21->23 22->1 23->25 24->1 25->27 26->1 27->29 28->1 28->1 29->1 29->1 31->1 32->34 33->1 34->36 36->38 37->1 38->40 39->1 40->42 41->1 42->44 43->1 44->46 45->1 46->48 47->1 48->50 49->1 50->52 51->1 51->1 52->1 52->1 55->57 56->1 57->59 59->61 60->1 61->63 62->1 63->65 64->1 65->67 66->1 67->69 68->1 69->71 70->1 71->73 72->1 72->1 73->1 73->1 76->78 77->1 78->80 80->82 81->1 82->84 83->1 84->86 85->1 86->88 87->1 88->90 89->1 90->92 91->1 92->94 93->1 93->1 94->1 94->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern void exit ( int status ) ; extern int pthread_cond_signal ( int * cond ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; char * * _global_argv = ( char * * ) 0 ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; void encodeStrings_litStr2_i $ nit ( void ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int pthread_mutex_lock ( int * mutex ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; int main ( int argc , char * * argv , char * * _formal_envp ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; void encodeStrings_litStr0_i $ nit ( void ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; int _global_argc = 0 ; void megaInit ( void ) ; char * * _global_envp = ( char * * ) 0 ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; void encodeStrings_litStr3_i $ nit ( void ) ; extern int ( /* missing proto */ printf ) ( ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; void encodeStrings_litStr1_i $ nit ( void ) ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; char encodeStrings_litStr3 [ 11 ] ; char encodeStrings_litStr2 [ 11 ] ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; char encodeStrings_litStr1 [ 10 ] ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; char encodeStrings_litStr0 [ 10 ] ; void encodeStrings_litStr0_i $ nit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { case 3 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 2 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 1 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 0 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; } } } void encodeStrings_litStr1_i $ nit ( void ) { { } } void megaInit ( void ) { { encodeStrings_litStr3_i $ nit ( ) ; encodeStrings_litStr2_i $ nit ( ) ; encodeStrings_litStr1_i $ nit ( ) ; encodeStrings_litStr0_i $ nit ( ) ; } } void encodeStrings_litStr3_i $ nit ( void ) { { } } void encodeStrings_litStr2_i $ nit ( void ) { { } } int main ( int argc , char * * argv , char * * _formal_envp ) { unsigned char c ; unsigned char x ; int _BARRIER_0 ; { megaInit ( ) ; _global_argc = argc ; _global_argv = argv ; _global_envp = _formal_envp ; _BARRIER_0 = 1 ; c = ( unsigned char ) * ( * ( argv + 1 ) + 0 ) ; if ( ( int ) c > 63 ) { _1_stringEncoder ( 0 , encodeStrings_litStr0 ) ; printf ( encodeStrings_litStr0 ) ; x = ( unsigned char ) ( ( ( int ) c / 3 ) * 2 ) ; if ( ( int ) c > 127 ) { _1_stringEncoder ( 1 , encodeStrings_litStr1 ) ; printf ( encodeStrings_litStr1 ) ; } else { _1_stringEncoder ( 2 , encodeStrings_litStr2 ) ; printf ( encodeStrings_litStr2 ) ; } } else { _1_stringEncoder ( 3 , encodeStrings_litStr3 ) ; printf ( encodeStrings_litStr3 ) ; } return ( 0 ) ; } }
>>>Func
METHOD main
METHOD_RETURN int
PARAM int argc
PARAM char **argv
PARAM char **_formal_envp
megaInit megaInit()
<operator>.assignment _global_argc = argc
<operator>.assignment _global_argv = argv
<operator>.assignment _global_envp = _formal_envp
<operator>.assignment _BARRIER_0 = 1
<operator>.assignment sum = 0
<operator>.assignment str = (char const   *)*(argv + 1)
<operator>.assignment t = str
_1_stringEncoder _1_stringEncoder(0, encodeStrings_litStr0)
printf printf(encodeStrings_litStr0, sum)
RETURN return (0); return (0);
<operator>.greaterThan sum > 127
LITERAL 0 return (0);
<operator>.cast (char const   *)*(argv + 1)
<operator>.assignmentPlus sum += (int )*t
<operator>.postIncrement t ++
<operator>.assignmentPlus sum += (int )*t
<operator>.assignmentMultiplication sum *= (int )*t
<operator>.addition argv + 1
<operator>.cast (int )*t
<operator>.cast (int )*t
<operator>.indirection *t
<operator>.cast (int )*t
UNKNOWN int int
<operator>.indirection *t
UNKNOWN int int
<operator>.indirection *t
UNKNOWN int int
<operator>.indirection *t
>>>PDG&34 0->2 0->3 0->4 0->5 0->6 0->7 0->8 0->9 0->10 0->12 0->13 0->14 0->15 0->16 0->17 0->19 0->20 0->21 0->22 0->23 2->6 3->7 3->23 4->8 5->1 6->1 6->1 6->1 7->1 7->1 8->1 8->1 8->1 9->1 9->1 10->1 10->16 10->19 11->1 11->1 11->12 12->1 12->1 12->1 12->20 13->1 13->14 14->1 14->1 14->1 15->1 16->1 16->21 16->21 16->22 16->22 16->24 16->25 16->30 16->31 16->32 16->33 17->15 18->1 19->1 19->16 20->1 20->1 21->1 21->1 21->14 22->1 22->1 22->14 23->1 24->1 25->1 26->19 26->20 26->26 26->27 26->28 26->29
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; char * * _global_argv = ( char * * ) 0 ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; int main ( int argc , char * * argv , char * * _formal_envp ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; void encodeStrings_litStr0_i $ nit ( void ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; int _global_argc = 0 ; void megaInit ( void ) ; char * * _global_envp = ( char * * ) 0 ; extern int ( /* missing proto */ printf ) ( ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; char encodeStrings_litStr0 [ 12 ] ; void megaInit ( void ) { { encodeStrings_litStr0_i $ nit ( ) ; } } void encodeStrings_litStr0_i $ nit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { case 0 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; } } } int main ( int argc , char * * argv , char * * _formal_envp ) { int sum ; char const * str ; register char const * t ; int _BARRIER_0 ; { megaInit ( ) ; _global_argc = argc ; _global_argv = argv ; _global_envp = _formal_envp ; _BARRIER_0 = 1 ; sum = 0 ; str = ( char const * ) * ( argv + 1 ) ; t = str ; while ( * t ) { sum += ( int ) * t ; t ++ ; } if ( sum > 127 ) { sum += ( int ) * t ; } else { sum *= ( int ) * t ; } _1_stringEncoder ( 0 , encodeStrings_litStr0 ) ; printf ( encodeStrings_litStr0 , sum ) ; return ( 0 ) ; } }
>>>Func
METHOD hash
METHOD_RETURN long long
PARAM void *value
<operator>.assignment str = (char *)value
<operator>.assignment a = 1
<operator>.assignment b = 0
<operator>.assignment MODADLER = 65521
<operator>.assignment i = 0
RETURN return ((long long )((b << 16) | a)); return ((long long )((b << 16) | a));
<operator>.notEquals (int )*(str + i) != 0
<operator>.cast (long long )((b << 16) | a)
<operator>.cast (char *)value
<operator>.assignment a = (a + (int )*(str + i)) % MODADLER
<operator>.assignment b = (b + a) % MODADLER
<operator>.postIncrement i ++
<operator>.cast (int )*(str + i)
<operator>.or (b << 16) | a
<operator>.modulo (a + (int )*(str + i)) % MODADLER
<operator>.modulo (b + a) % MODADLER
<operator>.shiftLeft b << 16
<operator>.addition str + i
<operator>.addition a + (int )*(str + i)
<operator>.addition b + a
<operator>.addition str + i
UNKNOWN int int
<operator>.indirection *(str + i)
<operator>.cast (int )*(str + i)
UNKNOWN int int
<operator>.indirection *(str + i)
>>>PDG&29 0->2 0->3 0->4 0->5 0->6 0->7 0->9 0->11 0->14 0->16 0->17 0->18 0->19 0->20 0->21 0->22 0->23 2->3 2->11 3->1 3->1 3->20 4->1 4->16 4->17 4->21 5->1 5->18 5->19 5->22 6->1 6->1 6->17 7->1 7->14 7->20 7->23 8->1 9->1 9->1 9->9 9->12 9->13 9->14 9->15 9->17 9->18 9->20 9->21 9->22 9->23 9->24 9->25 9->26 9->27 9->28 10->1 10->1 10->8 11->1 12->1 12->1 12->16 12->17 12->18 12->21 12->22 13->1 13->1 13->18 13->19 13->22 14->1 14->20 14->23 15->1 16->1 16->1 16->10 16->10 17->1 17->12 17->12 17->18 18->1 18->1 18->13 18->13 18->17 19->1 19->16 19->16 20->1 20->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; void main ( void ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int printf ( char const * format , ... ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; long long hash ( void * value ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; long long hash ( void * value ) { char * str ; int a ; int b ; int MODADLER ; int i ; { str = ( char * ) value ; a = 1 ; b = 0 ; MODADLER = 65521 ; i = 0 ; while ( ( int ) * ( str + i ) != 0 ) { a = ( a + ( int ) * ( str + i ) ) % MODADLER ; b = ( b + a ) % MODADLER ; i ++ ; } return ( ( long long ) ( ( b << 16 ) | a ) ) ; } } void megaInit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { } } } void main ( void ) { { megaInit ( ) ; } }
>>>Func
METHOD _1_stringEncoder
METHOD_RETURN void
PARAM int n
PARAM char str[]
BLOCK <empty> <empty>
<operator>.assignment encodeStrings_i3 = 0
IDENTIFIER n switch(n)
LITERAL 0 <empty>
<operator>.assignment str[encodeStrings_i3] = 'S'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'u'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'm'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'i'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ':'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
>>>PDG&32 0->2 0->3 0->4 0->5 0->6 0->7 0->8 0->9 0->10 0->11 0->12 0->13 0->14 0->15 0->16 0->17 0->18 0->19 0->20 0->21 0->22 0->23 0->24 0->25 0->26 0->27 0->28 0->29 0->30 0->31 2->1 3->1 5->1 5->1 5->9 8->1 9->11 10->1 11->13 12->1 13->15 15->17 16->1 17->19 18->1 19->21 20->1 21->23 22->1 23->25 24->1 25->27 26->1 27->29 28->1 29->31 30->1 30->1 31->1 31->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; char * * _global_argv = ( char * * ) 0 ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; int main ( int argc , char * * argv , char * * _formal_envp ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; void encodeStrings_litStr0_i $ nit ( void ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; int _global_argc = 0 ; void megaInit ( void ) ; char * * _global_envp = ( char * * ) 0 ; extern int ( /* missing proto */ printf ) ( ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; char encodeStrings_litStr0 [ 12 ] ; void megaInit ( void ) { { encodeStrings_litStr0_i $ nit ( ) ; } } void encodeStrings_litStr0_i $ nit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { case 0 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; } } } int main ( int argc , char * * argv , char * * _formal_envp ) { int i ; int sum ; int _BARRIER_0 ; { megaInit ( ) ; _global_argc = argc ; _global_argv = argv ; _global_envp = _formal_envp ; _BARRIER_0 = 1 ; sum = 0 ; i = 0 ; while ( i < ( int ) * ( * ( argv + 1 ) + 0 ) ) { if ( sum == 8128 ) { sum *= i ; } else { sum += i ; } i ++ ; } _1_stringEncoder ( 0 , encodeStrings_litStr0 ) ; printf ( encodeStrings_litStr0 , sum ) ; return ( 0 ) ; } }
>>>Func
METHOD FNVHash
METHOD_RETURN unsigned int
PARAM char *str
PARAM unsigned int len
<operator>.assignment fnv_prime = 2166136261U
<operator>.assignment hash = 0U
<operator>.assignment i = 0U
<operator>.assignment i = 0U
RETURN return (hash); return (hash);
<operator>.lessThan i < len
IDENTIFIER hash return (hash);
<operator>.assignmentMultiplication hash *= fnv_prime
<operators>.assignmentXor hash ^= (unsigned int )*str
<operator>.postIncrement str ++
<operator>.postIncrement i ++
<operator>.cast (unsigned int )*str
UNKNOWN unsigned int unsigned int
<operator>.indirection *str
>>>PDG&18 0->2 0->3 0->4 0->5 0->6 0->7 0->9 0->10 0->11 0->12 0->13 0->14 2->1 2->13 3->9 4->1 4->1 4->11 5->1 5->1 5->10 5->11 7->1 7->9 8->1 9->1 9->1 9->1 9->9 9->11 9->12 9->13 9->14 9->14 9->15 9->16 9->17 10->8 11->1 11->1 11->12 12->1 12->1 12->10 12->11 13->1 13->1 14->1 14->9 15->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; void main ( void ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int printf ( char const * format , ... ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; unsigned int FNVHash ( char * str , unsigned int len ) ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; unsigned int FNVHash ( char * str , unsigned int len ) { unsigned int fnv_prime ; unsigned int hash ; unsigned int i ; { fnv_prime = 2166136261U ; hash = 0U ; i = 0U ; i = 0U ; while ( i < len ) { hash *= fnv_prime ; hash ^= ( unsigned int ) * str ; str ++ ; i ++ ; } return ( hash ) ; } } void megaInit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { } } } void main ( void ) { { megaInit ( ) ; } }
>>>Func
METHOD pointer_hash
METHOD_RETURN unsigned int
PARAM void *location
RETURN return ((unsigned int )((unsigned long )location)); return ((unsigned int )((unsigned long )location));
<operator>.cast (unsigned int )((unsigned long )location)
<operator>.cast (unsigned long )location
>>>PDG&6 0->2 0->4 0->5 2->4 2->5 3->1 4->1 4->1 4->3 5->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; void main ( void ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int printf ( char const * format , ... ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; unsigned int pointer_hash ( void * location ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; unsigned int pointer_hash ( void * location ) { { return ( ( unsigned int ) ( ( unsigned long ) location ) ) ; } } void megaInit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { } } } void main ( void ) { { megaInit ( ) ; } }
>>>Func
METHOD getRow
METHOD_RETURN int*
PARAM int rowIndex
PARAM int *returnSize
<operator>.assignment colIndex = rowIndex + 1
<operator>.assignment tmp = malloc(sizeof(int ) * (unsigned long )colIndex)
<operator>.assignment ans = (int *)tmp
<operator>.assignment i = 0
<operator>.assignment *returnSize = colIndex
<operator>.assignment r = 2
RETURN return (ans); return (ans);
<operator>.lessThan i < colIndex
<operator>.lessEqualsThan r <= rowIndex
IDENTIFIER ans return (ans);
<operator>.addition rowIndex + 1
malloc malloc(sizeof(int ) * (unsigned long )colIndex)
<operator>.cast (int *)tmp
<operator>.assignment *(ans + i) = 1
<operator>.postIncrement i ++
<operator>.assignment c = r - 1
<operator>.postIncrement r ++
<operator>.multiplication sizeof(int ) * (unsigned long )colIndex
<operator>.greaterThan c > 0
<operator>.sizeOf sizeof(int )
<operator>.cast (unsigned long )colIndex
<operator>.subtraction r - 1
<operator>.assignmentPlus *(ans + c) += *(ans + (c - 1))
<operator>.postDecrement c --
<operator>.addition ans + i
<operator>.addition ans + c
<operator>.addition ans + (c - 1)
<operator>.subtraction c - 1
<operator>.indirection *(ans + i)
<operator>.indirection *(ans + c)
<operator>.indirection *(ans + (c - 1))
>>>PDG&35 0->2 0->3 0->4 0->6 0->7 0->8 0->9 0->11 0->12 0->13 0->14 0->16 0->17 0->18 0->20 0->21 0->22 0->24 0->25 0->27 0->28 0->29 0->30 0->31 2->4 2->12 2->14 3->1 4->1 4->1 4->11 4->21 4->24 5->1 5->1 5->6 5->16 6->1 6->1 6->1 6->13 6->28 6->29 6->30 7->1 7->11 8->1 8->1 8->1 9->1 9->12 10->1 11->1 11->1 11->8 11->11 11->17 11->18 11->18 11->28 11->28 11->32 12->1 12->1 12->1 12->12 12->19 12->20 12->22 12->25 12->25 13->10 15->1 15->5 16->1 17->1 17->1 18->1 18->11 19->1 19->1 19->22 20->1 20->12 21->1 21->15 22->1 22->1 22->22 22->26 22->27 22->29 22->29 22->30 22->31 22->31 22->33 22->34 23->1 25->19 25->19 25->20 26->1 26->1 26->1 27->1 27->22 28->1 30->1 30->1 31->27 31->30 31->30
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern int ( /* missing proto */ malloc ) ( ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; void main ( void ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int printf ( char const * format , ... ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; int * getRow ( int rowIndex , int * returnSize ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; int * getRow ( int rowIndex , int * returnSize ) { int colIndex ; int * ans ; int tmp ; int i ; int r ; int c ; { colIndex = rowIndex + 1 ; tmp = malloc ( sizeof ( int ) * ( unsigned long ) colIndex ) ; ans = ( int * ) tmp ; i = 0 ; while ( i < colIndex ) { * ( ans + i ) = 1 ; i ++ ; } * returnSize = colIndex ; r = 2 ; while ( r <= rowIndex ) { c = r - 1 ; while ( c > 0 ) { * ( ans + c ) += * ( ans + ( c - 1 ) ) ; c -- ; } r ++ ; } return ( ans ) ; } } void megaInit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { } } } void main ( void ) { { megaInit ( ) ; } }
>>>Func
METHOD main
METHOD_RETURN int
PARAM int argc
PARAM char **argv
PARAM char **_formal_envp
megaInit megaInit()
<operator>.assignment _global_argc = argc
<operator>.assignment _global_argv = argv
<operator>.assignment _global_envp = _formal_envp
<operator>.assignment _BARRIER_0 = 1
<operator>.assignment sum = 0
<operator>.assignment str = (char const   *)*(argv + 1)
<operator>.assignment i = 0
_1_stringEncoder _1_stringEncoder(0, encodeStrings_litStr0)
printf printf(encodeStrings_litStr0, sum)
RETURN return (0); return (0);
<operator>.lessThan i < (int )*(*(argv + 1) + 0)
LITERAL 0 return (0);
<operator>.assignment t = str
<operator>.postIncrement i ++
<operator>.cast (int )*(*(argv + 1) + 0)
<operator>.addition argv + 1
<operator>.assignmentPlus sum += (int )*t
<operator>.postIncrement t ++
<operator>.addition *(argv + 1) + 0
<operator>.cast (int )*t
<operator>.addition argv + 1
UNKNOWN int int
<operator>.indirection *(*(argv + 1) + 0)
<operator>.indirection *t
<operator>.indirection *(argv + 1)
UNKNOWN int int
<operator>.indirection *t
>>>PDG&33 0->2 0->3 0->4 0->5 0->6 0->7 0->8 0->9 0->10 0->12 0->13 0->14 0->15 0->16 0->17 0->18 0->19 0->21 0->22 0->23 0->24 0->26 2->6 3->7 3->21 3->26 4->8 5->1 6->1 6->1 6->1 7->1 7->1 8->1 8->1 8->1 9->1 9->1 10->1 10->14 10->22 11->1 11->1 11->1 11->18 12->1 12->16 13->1 13->14 14->1 14->1 14->1 15->1 16->1 16->1 16->1 16->16 16->18 16->19 16->19 16->20 16->24 16->26 16->27 16->28 16->29 16->30 17->15 18->1 18->1 18->1 18->23 19->1 19->16 20->1 22->1 22->1 22->14 23->1 23->1 24->1 25->1 26->1 29->22 29->23 29->25 29->29 29->31 29->32
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; char * * _global_argv = ( char * * ) 0 ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; int main ( int argc , char * * argv , char * * _formal_envp ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; void encodeStrings_litStr0_i $ nit ( void ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; int _global_argc = 0 ; void megaInit ( void ) ; char * * _global_envp = ( char * * ) 0 ; extern int ( /* missing proto */ printf ) ( ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; char encodeStrings_litStr0 [ 12 ] ; void megaInit ( void ) { { encodeStrings_litStr0_i $ nit ( ) ; } } void encodeStrings_litStr0_i $ nit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { case 0 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; } } } int main ( int argc , char * * argv , char * * _formal_envp ) { int i ; int sum ; char const * str ; register char const * t ; int _BARRIER_0 ; { megaInit ( ) ; _global_argc = argc ; _global_argv = argv ; _global_envp = _formal_envp ; _BARRIER_0 = 1 ; sum = 0 ; str = ( char const * ) * ( argv + 1 ) ; i = 0 ; while ( i < ( int ) * ( * ( argv + 1 ) + 0 ) ) { t = str ; while ( * t ) { sum += ( int ) * t ; t ++ ; } i ++ ; } _1_stringEncoder ( 0 , encodeStrings_litStr0 ) ; printf ( encodeStrings_litStr0 , sum ) ; return ( 0 ) ; } }
>>>Func
METHOD main
METHOD_RETURN int
PARAM int _formal_argc
PARAM char **_formal_argv
PARAM char **_formal_envp
megaInit megaInit()
<operator>.assignment _global_argc = _formal_argc
<operator>.assignment _global_argv = _formal_argv
<operator>.assignment _global_envp = _formal_envp
<operator>.assignment _BARRIER_0 = 1
test_xor8 test_xor8()
RETURN return (0); return (0);
LITERAL 0 return (0);
>>>PDG&13 0->2 0->3 0->4 0->5 0->6 0->7 0->8 0->9 0->10 0->11 0->12 2->6 3->7 4->8 5->1 6->1 6->1 6->1 7->1 7->1 7->1 8->1 8->1 8->1 9->1 9->1 10->1 11->1 12->11
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fclose ( void * stream ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; char * * _global_argv = ( char * * ) 0 ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; int main ( int _formal_argc , char * * _formal_argv , char * * _formal_envp ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; int _global_argc = 0 ; char * * _global_envp = ( char * * ) 0 ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int printf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern int scanf ( char const * format , ... ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int ( /* missing proto */ test_xor8 ) ( ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { } } } void megaInit ( void ) { { } } int main ( int _formal_argc , char * * _formal_argv , char * * _formal_envp ) { int _BARRIER_0 ; { megaInit ( ) ; _global_argc = _formal_argc ; _global_argv = _formal_argv ; _global_envp = _formal_envp ; _BARRIER_0 = 1 ; test_xor8 ( ) ; return ( 0 ) ; } }
>>>Func
METHOD strStr
METHOD_RETURN int
PARAM char *haystack
PARAM char *needle
<operator>.assignment i = 0
<operator>.assignment j = 0
<operator>.assignment tmp = strlen(needle)
<operator>.assignment len_needle = tmp
<operator>.assignment tmp___0 = strlen(haystack)
<operator>.assignment len_haystack = tmp___0
<operator>.assignment __lengthofoverlap = (unsigned long )len_needle
<operator>.assignment tmp___1 = __builtin_alloca(sizeof(*overlap) * __lengthofoverlap)
<operator>.assignment overlap = (int *)tmp___1
fill_overlap fill_overlap(needle, len_needle, overlap)
RETURN return (-1); return (-1);
<operator>.logicalNot ! len_needle
<operator>.lessThan i < len_haystack
<operator>.minus -1
strlen strlen(needle)
strlen strlen(haystack)
RETURN return (0); return (0);
<operator>.cast (unsigned long )len_needle
__builtin_alloca __builtin_alloca(sizeof(*overlap) * __lengthofoverlap)
<operator>.cast (int *)tmp___1
LITERAL 0 return (0);
<operator>.multiplication sizeof(*overlap) * __lengthofoverlap
<operator>.equals (int )*(needle + j) == (int )*(haystack + i)
<operator>.equals j == len_needle
<operator>.postIncrement i ++
<operator>.postIncrement j ++
RETURN return (i - j); return (i - j);
<operator>.subtraction i - j
<operator>.lessThan i < len_haystack
<operator>.addition needle + j
<operator>.addition haystack + i
<operator>.notEquals (int )*(needle + j) != (int )*(haystack + i)
<operator>.notEquals j != 0
<operator>.assignment j = *(overlap + (j - 1))
<operator>.addition needle + j
<operator>.addition haystack + i
<operator>.postIncrement i ++
<operator>.addition overlap + (j - 1)
<operator>.subtraction j - 1
UNKNOWN unsigned long unsigned long
UNKNOWN int * int *
<operator>.sizeOf sizeof(*overlap)
<operator>.indirection *overlap
<operator>.cast (int )*(needle + j)
<operator>.cast (int )*(haystack + i)
UNKNOWN int int
<operator>.indirection *(needle + j)
UNKNOWN int int
<operator>.indirection *(haystack + i)
<operator>.cast (int )*(needle + j)
<operator>.cast (int )*(haystack + i)
UNKNOWN int int
<operator>.indirection *(needle + j)
UNKNOWN int int
<operator>.indirection *(haystack + i)
<operator>.indirection *(overlap + (j - 1))
>>>PDG&60 0->2 0->3 0->4 0->5 0->7 0->9 0->10 0->12 0->13 0->15 0->16 0->17 0->18 0->19 0->20 0->21 0->23 0->24 0->25 0->27 0->28 0->29 0->31 0->32 0->33 0->34 0->36 0->38 0->39 0->40 0->41 0->42 2->19 3->18 4->1 4->1 4->16 5->1 5->1 5->27 5->29 5->33 6->1 6->1 6->7 7->1 7->1 7->15 8->1 8->1 8->9 9->1 9->1 9->1 9->16 10->25 11->12 11->23 12->13 13->27 13->33 13->41 14->1 15->1 15->1 15->10 15->10 15->11 15->12 15->13 15->13 15->16 15->20 15->21 15->21 15->22 15->23 15->25 15->43 15->44 15->45 15->46 16->14 16->17 16->26 16->27 16->28 16->31 16->32 16->32 16->33 16->34 16->34 16->47 16->48 16->49 16->50 16->51 16->52 17->14 18->1 18->6 18->13 19->1 19->8 19->34 20->1 22->11 24->20 25->22 26->28 26->29 27->16 27->29 27->30 27->31 27->31 27->32 27->33 27->36 27->38 28->31 28->32 29->27 30->1 31->30 32->16 32->16 32->35 32->38 32->39 32->39 32->40 32->53 32->54 32->55 32->56 32->57 32->58 35->36 36->27 36->29 36->33 36->37 36->40 36->41 36->42 36->42 36->59 37->27 37->29 37->33 40->16 42->41 42->41
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; int strStr ( char * haystack , char * needle ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern int ( /* missing proto */ strlen ) ( ) ; void main ( void ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int printf ( char const * format , ... ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern int ( /* missing proto */ fill_overlap ) ( ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; void megaInit ( void ) { { } } int strStr ( char * haystack , char * needle ) { int i ; int j ; int len_needle ; int tmp ; int len_haystack ; int tmp___0 ; int * overlap ; unsigned long __lengthofoverlap ; void * tmp___1 ; { i = 0 ; j = 0 ; tmp = strlen ( needle ) ; len_needle = tmp ; tmp___0 = strlen ( haystack ) ; len_haystack = tmp___0 ; if ( ! len_needle ) { return ( 0 ) ; } __lengthofoverlap = ( unsigned long ) len_needle ; tmp___1 = __builtin_alloca ( sizeof ( * overlap ) * __lengthofoverlap ) ; overlap = ( int * ) tmp___1 ; fill_overlap ( needle , len_needle , overlap ) ; while ( i < len_haystack ) { if ( ( int ) * ( needle + j ) == ( int ) * ( haystack + i ) ) { i ++ ; j ++ ; } if ( j == len_needle ) { return ( i - j ) ; } else if ( i < len_haystack ) { if ( ( int ) * ( needle + j ) != ( int ) * ( haystack + i ) ) { if ( j != 0 ) { j = * ( overlap + ( j - 1 ) ) ; } else { i ++ ; } } } } return ( -1 ) ; } } void main ( void ) { { megaInit ( ) ; } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { } } }
>>>Func
METHOD _1_stringEncoder
METHOD_RETURN void
PARAM int n
PARAM char str[]
BLOCK <empty> <empty>
<operator>.assignment encodeStrings_i3 = 0
IDENTIFIER n switch(n)
LITERAL 0 <empty>
<operator>.assignment str[encodeStrings_i3] = 'S'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'u'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'm'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'i'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ':'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
>>>PDG&32 0->2 0->3 0->4 0->5 0->6 0->7 0->8 0->9 0->10 0->11 0->12 0->13 0->14 0->15 0->16 0->17 0->18 0->19 0->20 0->21 0->22 0->23 0->24 0->25 0->26 0->27 0->28 0->29 0->30 0->31 2->1 3->1 5->1 5->1 5->9 8->1 9->11 10->1 11->13 12->1 13->15 15->17 16->1 17->19 18->1 19->21 20->1 21->23 22->1 23->25 24->1 25->27 26->1 27->29 28->1 29->31 30->1 30->1 31->1 31->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; char * * _global_argv = ( char * * ) 0 ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; int main ( int argc , char * * argv , char * * _formal_envp ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; void encodeStrings_litStr0_i $ nit ( void ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; int _global_argc = 0 ; void megaInit ( void ) ; char * * _global_envp = ( char * * ) 0 ; extern int ( /* missing proto */ printf ) ( ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; char encodeStrings_litStr0 [ 12 ] ; void megaInit ( void ) { { encodeStrings_litStr0_i $ nit ( ) ; } } void encodeStrings_litStr0_i $ nit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { case 0 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; } } } int main ( int argc , char * * argv , char * * _formal_envp ) { int i ; int sum ; int _BARRIER_0 ; { megaInit ( ) ; _global_argc = argc ; _global_argv = argv ; _global_envp = _formal_envp ; _BARRIER_0 = 1 ; sum = 0 ; i = 0 ; while ( i < argc ) { sum += i ; i ++ ; } _1_stringEncoder ( 0 , encodeStrings_litStr0 ) ; printf ( encodeStrings_litStr0 , sum ) ; return ( 0 ) ; } }
>>>Func
METHOD GenerateFilename
METHOD_RETURN void
PARAM char *out
PARAM char *in
PARAM char *add
_1_stringEncoder _1_stringEncoder(0, encodeStrings_litStr0)
sprintf sprintf(out, encodeStrings_litStr0, in)
<operator>.assignment tmp = strlen(out)
<operator>.assignment p = (out + tmp) - 1
<operator>.assignment tmp___0 = strlen(out)
_1_stringEncoder _1_stringEncoder(1, encodeStrings_litStr1)
sprintf sprintf(out + tmp___0, encodeStrings_litStr1, add)
RETURN return; return;
<operator>.greaterEqualsThan (unsigned long )p >= (unsigned long )out
strlen strlen(out)
<operator>.subtraction (out + tmp) - 1
<operator>.postDecrement p --
strlen strlen(out)
<operator>.addition out + tmp___0
<operator>.addition out + tmp
<operator>.cast (unsigned long )p
<operator>.cast (unsigned long )out
<operator>.equals (int )*p == 47
<operator>.equals (int )*p == 92
<operator>.equals (int )*p == 46
<operator>.assignment *p = (char)0
<operator>.cast (int )*p
<operator>.cast (int )*p
<operator>.cast (int )*p
<operator>.cast (char)0
UNKNOWN unsigned long unsigned long
UNKNOWN unsigned long unsigned long
UNKNOWN int int
<operator>.indirection *p
UNKNOWN int int
<operator>.indirection *p
UNKNOWN int int
<operator>.indirection *p
<operator>.indirection *p
UNKNOWN char char
>>>PDG&40 0->2 0->3 0->4 0->5 0->6 0->10 0->11 0->12 0->13 0->14 0->15 0->16 0->17 0->18 0->19 0->20 0->21 0->22 0->23 0->24 0->25 0->29 2->6 3->6 4->11 5->1 5->6 6->1 6->1 6->1 6->14 7->1 7->15 7->19 8->1 8->1 8->13 8->16 8->20 9->1 9->1 9->11 9->18 10->1 10->11 11->1 11->1 11->1 11->1 12->1 13->1 13->1 13->1 13->22 13->26 13->32 13->33 14->7 14->13 14->15 14->17 14->19 14->21 15->1 15->8 15->8 16->1 16->13 16->20 17->9 17->11 17->18 18->1 18->1 19->1 20->1 22->1 22->1 22->23 22->27 22->34 22->35 23->1 23->1 23->24 23->28 23->36 23->37 24->1 24->1 24->13 24->16 24->20 24->21 24->25 24->29 24->30 24->31 24->38 24->39 25->1 25->1 25->1 26->1 27->1 28->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern int raise ( int sig ) ; void GenerateFilename ( char * out , char * in , char * add ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern int ( /* missing proto */ strlen ) ( ) ; void main ( void ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; void encodeStrings_litStr0_i $ nit ( void ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int printf ( char const * format , ... ) ; extern int scanf ( char const * format , ... ) ; extern void perror ( char const * str ) ; extern long clock ( void ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern float strtof ( char const * str , char const * endptr ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; void encodeStrings_litStr1_i $ nit ( void ) ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern int ( /* missing proto */ sprintf ) ( ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; char encodeStrings_litStr1 [ 3 ] ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; char encodeStrings_litStr0 [ 3 ] ; void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { case 1 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 0 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; } } } void encodeStrings_litStr0_i $ nit ( void ) { { } } void GenerateFilename ( char * out , char * in , char * add ) { char * p ; int tmp ; int tmp___0 ; { _1_stringEncoder ( 0 , encodeStrings_litStr0 ) ; sprintf ( out , encodeStrings_litStr0 , in ) ; tmp = strlen ( out ) ; p = ( out + tmp ) - 1 ; while ( ( unsigned long ) p >= ( unsigned long ) out ) { if ( ( int ) * p == 47 ) { break ; } if ( ( int ) * p == 92 ) { break ; } if ( ( int ) * p == 46 ) { * p = ( char ) 0 ; break ; } p -- ; } tmp___0 = strlen ( out ) ; _1_stringEncoder ( 1 , encodeStrings_litStr1 ) ; sprintf ( out + tmp___0 , encodeStrings_litStr1 , add ) ; return ; } } void main ( void ) { { megaInit ( ) ; } } void megaInit ( void ) { { encodeStrings_litStr1_i $ nit ( ) ; encodeStrings_litStr0_i $ nit ( ) ; } } void encodeStrings_litStr1_i $ nit ( void ) { { } }
>>>Func
METHOD main
METHOD_RETURN int
PARAM int _formal_argc
PARAM char **_formal_argv
PARAM char **_formal_envp
megaInit megaInit()
<operator>.assignment _global_argc = _formal_argc
<operator>.assignment _global_argv = _formal_argv
<operator>.assignment _global_envp = _formal_envp
<operator>.assignment _BARRIER_0 = 1
<operator>.assignment test = 0
<operator>.assignment count = 0
_1_stringEncoder _1_stringEncoder(0, encodeStrings_litStr0)
scanf scanf(encodeStrings_litStr0, & n)
<operator>.assignment i = 1
_1_stringEncoder _1_stringEncoder(1, encodeStrings_litStr1)
printf printf(encodeStrings_litStr1, count)
RETURN return (0); return (0);
LITERAL 1 while (1)
LITERAL 0 return (0);
<operator>.assignment tmp = pow(5, i)
<operator>.assignment test = n / tmp
<operator>.postIncrement i ++
<operator>.notEquals test != 0
pow pow(5, i)
<operator>.division n / tmp
<operator>.assignmentPlus count += test
>>>PDG&27 0->2 0->3 0->4 0->5 0->6 0->7 0->8 0->9 0->10 0->11 0->12 0->13 0->14 0->15 0->16 0->17 0->18 0->19 0->22 0->23 0->24 0->25 0->26 2->6 3->7 4->8 5->1 6->1 6->1 6->1 7->1 7->1 7->1 8->1 8->1 8->1 9->1 9->1 10->1 10->1 11->1 11->16 11->26 12->1 13->1 13->1 13->25 14->1 14->1 14->24 15->1 15->16 16->1 16->1 16->1 17->1 19->17 20->1 20->1 20->25 21->1 21->1 21->23 22->1 22->1 22->24 23->1 23->1 23->20 23->21 23->22 23->23 23->24 23->25 23->26 23->26 24->1 24->20 24->20 24->22 25->1 25->1 25->21 25->21 26->1 26->1 26->16
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fclose ( void * stream ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; char * * _global_argv = ( char * * ) 0 ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; extern int ( /* missing proto */ pow ) ( ) ; int main ( int _formal_argc , char * * _formal_argv , char * * _formal_envp ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void encodeStrings_litStr0_i $ nit ( void ) ; int _global_argc = 0 ; void megaInit ( void ) ; char * * _global_envp = ( char * * ) 0 ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int ( /* missing proto */ printf ) ( ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern int ( /* missing proto */ scanf ) ( ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern double strtod ( char const * str , char const * endptr ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern void signal ( int sig , void * func ) ; extern double difftime ( long tv1 , long tv0 ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; void encodeStrings_litStr1_i $ nit ( void ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; char encodeStrings_litStr1 [ 4 ] ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; char encodeStrings_litStr0 [ 3 ] ; int main ( int _formal_argc , char * * _formal_argv , char * * _formal_envp ) { int i ; int n ; int test ; int count ; int tmp ; int _BARRIER_0 ; { megaInit ( ) ; _global_argc = _formal_argc ; _global_argv = _formal_argv ; _global_envp = _formal_envp ; _BARRIER_0 = 1 ; test = 0 ; count = 0 ; _1_stringEncoder ( 0 , encodeStrings_litStr0 ) ; scanf ( encodeStrings_litStr0 , & n ) ; i = 1 ; while ( 1 ) { tmp = pow ( 5 , i ) ; test = n / tmp ; if ( test != 0 ) { count += test ; } else { break ; } i ++ ; } _1_stringEncoder ( 1 , encodeStrings_litStr1 ) ; printf ( encodeStrings_litStr1 , count ) ; return ( 0 ) ; } } void encodeStrings_litStr1_i $ nit ( void ) { { } } void megaInit ( void ) { { encodeStrings_litStr1_i $ nit ( ) ; encodeStrings_litStr0_i $ nit ( ) ; } } void encodeStrings_litStr0_i $ nit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { case 1 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 0 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; } } }
>>>Func
METHOD _1_stringEncoder
METHOD_RETURN void
PARAM int n
PARAM char str[]
BLOCK <empty> <empty>
<operator>.assignment encodeStrings_i3 = 0
IDENTIFIER n switch(n)
LITERAL 1 <empty>
<operator>.assignment str[encodeStrings_i3] = 'T'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'h'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'u'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'm'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'b'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'i'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'f'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'o'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'u'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '.'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 0 <empty>
<operator>.assignment str[encodeStrings_i3] = 'T'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'h'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'u'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'm'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'b'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'i'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'o'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'f'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'o'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'u'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '.'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
>>>PDG&105 0->2 0->3 0->4 0->5 0->6 0->7 0->8 0->9 0->10 0->11 0->12 0->13 0->14 0->15 0->16 0->17 0->18 0->19 0->20 0->21 0->22 0->23 0->24 0->25 0->26 0->27 0->28 0->29 0->30 0->31 0->32 0->33 0->34 0->35 0->36 0->37 0->38 0->39 0->40 0->41 0->42 0->43 0->44 0->45 0->46 0->47 0->48 0->49 0->50 0->51 0->52 0->53 0->54 0->55 0->56 0->57 0->58 0->59 0->60 0->61 0->62 0->63 0->64 0->65 0->66 0->67 0->68 0->69 0->70 0->71 0->72 0->73 0->74 0->75 0->76 0->77 0->78 0->79 0->80 0->81 0->82 0->83 0->84 0->85 0->86 0->87 0->88 0->89 0->90 0->91 0->92 0->93 0->94 0->95 0->96 0->97 0->98 0->99 0->100 0->101 0->102 0->103 0->104 2->1 3->1 5->1 5->1 5->9 5->54 8->1 9->11 10->1 11->13 13->15 15->17 17->19 19->21 20->1 21->23 22->1 23->25 24->1 25->27 26->1 27->29 29->31 30->1 31->33 32->1 33->35 34->1 35->37 36->1 37->39 38->1 39->41 40->1 41->43 42->1 43->45 44->1 45->47 46->1 47->49 48->1 49->51 50->1 50->1 51->1 51->1 53->1 54->56 55->1 56->58 58->60 60->62 62->64 64->66 65->1 66->68 67->1 68->70 69->1 70->72 71->1 72->74 74->76 75->1 76->78 77->1 78->80 80->82 82->84 84->86 85->1 86->88 87->1 88->90 89->1 90->92 91->1 92->94 93->1 94->96 95->1 96->98 97->1 98->100 99->1 100->102 101->1 102->104 103->1 103->1 104->1 104->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; char * * _global_argv = ( char * * ) 0 ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern int raise ( int sig ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; int main ( int argc , char * * argv , char * * _formal_envp ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void encodeStrings_litStr0_i $ nit ( void ) ; int _global_argc = 0 ; void megaInit ( void ) ; char * * _global_envp = ( char * * ) 0 ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int ( /* missing proto */ printf ) ( ) ; extern int scanf ( char const * format , ... ) ; extern void perror ( char const * str ) ; extern long clock ( void ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern float strtof ( char const * str , char const * endptr ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern double strtod ( char const * str , char const * endptr ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; void encodeStrings_litStr1_i $ nit ( void ) ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; char encodeStrings_litStr1 [ 22 ] ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; char encodeStrings_litStr0 [ 26 ] ; void megaInit ( void ) { { encodeStrings_litStr1_i $ nit ( ) ; encodeStrings_litStr0_i $ nit ( ) ; } } void encodeStrings_litStr0_i $ nit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { case 1 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 0 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; } } } int main ( int argc , char * * argv , char * * _formal_envp ) { int a [ 10 ] ; int i ; int m ; int c ; int l ; int u ; int mid ; int _BARRIER_0 ; { megaInit ( ) ; _global_argc = argc ; _global_argv = argv ; _global_envp = _formal_envp ; _BARRIER_0 = 1 ; if ( argc < 12 ) { return ( 1 ) ; } c = 0 ; i = 1 ; while ( i < argc - 1 ) { a [ i - 1 ] = ( int ) * ( * ( argv + i ) + 0 ) ; i ++ ; } m = ( int ) * ( * ( argv + ( argc - 1 ) ) + 0 ) ; l = 0 ; u = argc - 2 ; while ( l <= u ) { mid = ( l + u ) / 2 ; if ( m == a [ mid ] ) { c = 1 ; break ; } else if ( m < a [ mid ] ) { u = mid - 1 ; } else { l = mid + 1 ; } } if ( c == 0 ) { _1_stringEncoder ( 0 , encodeStrings_litStr0 ) ; printf ( encodeStrings_litStr0 ) ; } else { _1_stringEncoder ( 1 , encodeStrings_litStr1 ) ; printf ( encodeStrings_litStr1 ) ; } return ( 0 ) ; } } void encodeStrings_litStr1_i $ nit ( void ) { { } }
>>>Func
METHOD isArmstrong
METHOD_RETURN int
PARAM int x
<operator>.assignment tmp = order(x)
<operator>.assignment n = tmp
<operator>.assignment temp = x
<operator>.assignment sum = 0
IDENTIFIER temp while (temp)
<operator>.equals sum == x
order order(x)
<operator>.assignment r = temp % 10
<operator>.assignment tmp___0 = power(r, n)
<operator>.assignmentPlus sum += tmp___0
<operator>.assignmentDivision temp /= 10
RETURN return (1); return (1);
LITERAL 1 return (1);
RETURN return (0); return (0);
<operator>.modulo temp % 10
power power(r, n)
LITERAL 0 return (0);
>>>PDG&20 0->2 0->4 0->5 0->6 0->7 0->8 0->9 0->12 0->13 0->14 0->15 0->16 0->17 0->18 0->19 2->9 3->1 3->1 3->4 4->1 4->1 4->1 4->18 5->1 5->1 5->17 6->1 6->8 6->12 8->1 8->1 8->1 8->14 8->16 9->3 9->5 9->8 10->1 10->1 10->18 11->1 11->1 11->12 12->1 12->1 12->8 13->1 13->1 13->17 14->1 15->14 16->1 17->10 17->10 17->13 18->1 18->1 18->11 18->11 19->16
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fclose ( void * stream ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; void main ( void ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int printf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern int scanf ( char const * format , ... ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; int isArmstrong ( int x ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern int ( /* missing proto */ power ) ( ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern int ( /* missing proto */ order ) ( ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; int isArmstrong ( int x ) { int n ; int tmp ; int temp ; int sum ; int r ; int tmp___0 ; { tmp = order ( x ) ; n = tmp ; temp = x ; sum = 0 ; while ( temp ) { r = temp % 10 ; tmp___0 = power ( r , n ) ; sum += tmp___0 ; temp /= 10 ; } if ( sum == x ) { return ( 1 ) ; } else { return ( 0 ) ; } } } void main ( void ) { { megaInit ( ) ; } } void megaInit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { } } }
>>>Func
METHOD _1_stringEncoder
METHOD_RETURN void
PARAM int n
PARAM char str[]
BLOCK <empty> <empty>
<operator>.assignment encodeStrings_i3 = 0
IDENTIFIER n switch(n)
LITERAL 1 <empty>
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 0 <empty>
<operator>.assignment str[encodeStrings_i3] = 'E'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'q'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'u'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'i'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'v'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'l'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'b'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'i'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'y'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'v'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'l'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'u'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'o'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'f'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'c'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'i'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'm'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'l'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'u'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'm'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'b'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ':'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
>>>PDG&111 0->2 0->3 0->4 0->5 0->6 0->7 0->8 0->9 0->10 0->11 0->12 0->13 0->14 0->15 0->16 0->17 0->18 0->19 0->20 0->21 0->22 0->23 0->24 0->25 0->26 0->27 0->28 0->29 0->30 0->31 0->32 0->33 0->34 0->35 0->36 0->37 0->38 0->39 0->40 0->41 0->42 0->43 0->44 0->45 0->46 0->47 0->48 0->49 0->50 0->51 0->52 0->53 0->54 0->55 0->56 0->57 0->58 0->59 0->60 0->61 0->62 0->63 0->64 0->65 0->66 0->67 0->68 0->69 0->70 0->71 0->72 0->73 0->74 0->75 0->76 0->77 0->78 0->79 0->80 0->81 0->82 0->83 0->84 0->85 0->86 0->87 0->88 0->89 0->90 0->91 0->92 0->93 0->94 0->95 0->96 0->97 0->98 0->99 0->100 0->101 0->102 0->103 0->104 0->105 0->106 0->107 0->108 0->109 0->110 2->1 3->1 5->1 5->1 5->9 5->16 8->1 9->11 10->1 11->13 12->1 12->1 13->1 13->1 15->1 16->18 17->1 18->20 20->22 22->24 24->26 26->28 28->30 30->32 32->34 33->1 34->36 36->38 38->40 40->42 42->44 44->46 46->48 47->1 48->50 50->52 51->1 52->54 54->56 56->58 58->60 60->62 62->64 63->1 64->66 65->1 66->68 68->70 70->72 72->74 73->1 74->76 75->1 76->78 78->80 79->1 80->82 81->1 82->84 84->86 85->1 86->88 87->1 88->90 89->1 90->92 91->1 92->94 93->1 94->96 95->1 96->98 98->100 99->1 100->102 101->1 102->104 103->1 104->106 105->1 106->108 107->1 108->110 109->1 109->1 110->1 110->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; char * * _global_argv = ( char * * ) 0 ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern int raise ( int sig ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; int main ( int argc , char * * argv , char * * _formal_envp ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void encodeStrings_litStr0_i $ nit ( void ) ; int _global_argc = 0 ; void megaInit ( void ) ; char * * _global_envp = ( char * * ) 0 ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int ( /* missing proto */ printf ) ( ) ; extern int scanf ( char const * format , ... ) ; extern void perror ( char const * str ) ; extern long clock ( void ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern float strtof ( char const * str , char const * endptr ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern double strtod ( char const * str , char const * endptr ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; void encodeStrings_litStr1_i $ nit ( void ) ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; char encodeStrings_litStr1 [ 3 ] ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; char encodeStrings_litStr0 [ 48 ] ; void megaInit ( void ) { { encodeStrings_litStr1_i $ nit ( ) ; encodeStrings_litStr0_i $ nit ( ) ; } } void encodeStrings_litStr0_i $ nit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { case 1 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 0 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; } } } int main ( int argc , char * * argv , char * * _formal_envp ) { long decimalNumber ; long quotient ; int binaryNumber [ 100 ] ; int i ; int j ; int tmp ; int _BARRIER_0 ; { megaInit ( ) ; _global_argc = argc ; _global_argv = argv ; _global_envp = _formal_envp ; _BARRIER_0 = 1 ; if ( argc < 2 ) { return ( 1 ) ; } i = 1 ; decimalNumber = ( long ) ( ( int ) * ( * ( argv + 1 ) + 0 ) ) ; quotient = decimalNumber ; while ( quotient != 0L ) { tmp = i ; i ++ ; binaryNumber [ tmp ] = ( int ) ( quotient % 2L ) ; quotient /= 2L ; } _1_stringEncoder ( 0 , encodeStrings_litStr0 ) ; printf ( encodeStrings_litStr0 , decimalNumber ) ; j = i - 1 ; while ( j > 0 ) { _1_stringEncoder ( 1 , encodeStrings_litStr1 ) ; printf ( encodeStrings_litStr1 , binaryNumber [ j ] ) ; j -- ; } return ( 0 ) ; } } void encodeStrings_litStr1_i $ nit ( void ) { { } }
>>>Func
METHOD main
METHOD_RETURN int
PARAM int _formal_argc
PARAM char **_formal_argv
PARAM char **_formal_envp
megaInit megaInit()
<operator>.assignment _global_argc = _formal_argc
<operator>.assignment _global_argv = _formal_argv
<operator>.assignment _global_envp = _formal_envp
<operator>.assignment _BARRIER_0 = 1
example example()
RETURN return (0); return (0);
LITERAL 0 return (0);
>>>PDG&13 0->2 0->3 0->4 0->5 0->6 0->7 0->8 0->9 0->10 0->11 0->12 2->6 3->7 4->8 5->1 6->1 6->1 6->1 7->1 7->1 7->1 8->1 8->1 8->1 9->1 9->1 10->1 11->1 12->11
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fclose ( void * stream ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; char * * _global_argv = ( char * * ) 0 ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; int main ( int _formal_argc , char * * _formal_argv , char * * _formal_envp ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; extern int ( /* missing proto */ example ) ( ) ; int _global_argc = 0 ; char * * _global_envp = ( char * * ) 0 ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int printf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern int scanf ( char const * format , ... ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { } } } void megaInit ( void ) { { } } int main ( int _formal_argc , char * * _formal_argv , char * * _formal_envp ) { int _BARRIER_0 ; { megaInit ( ) ; _global_argc = _formal_argc ; _global_argv = _formal_argv ; _global_envp = _formal_envp ; _BARRIER_0 = 1 ; example ( ) ; return ( 0 ) ; } }
>>>Func
METHOD _1_stringEncoder
METHOD_RETURN void
PARAM int n
PARAM char str[]
BLOCK <empty> <empty>
<operator>.assignment encodeStrings_i3 = 0
IDENTIFIER n switch(n)
LITERAL 0 <empty>
<operator>.assignment str[encodeStrings_i3] = '\n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'N'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'o'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'S'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'u'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'c'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'h'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'm'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '!'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
>>>PDG&42 0->2 0->3 0->4 0->5 0->6 0->7 0->8 0->9 0->10 0->11 0->12 0->13 0->14 0->15 0->16 0->17 0->18 0->19 0->20 0->21 0->22 0->23 0->24 0->25 0->26 0->27 0->28 0->29 0->30 0->31 0->32 0->33 0->34 0->35 0->36 0->37 0->38 0->39 0->40 0->41 2->1 3->1 5->1 5->1 5->9 9->11 10->1 11->13 12->1 13->15 15->17 16->1 17->19 18->1 19->21 20->1 21->23 22->1 23->25 25->27 26->1 27->29 28->1 29->31 30->1 31->33 32->1 33->35 34->1 35->37 36->1 37->39 38->1 39->41 40->1 40->1 41->1 41->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern int ( /* missing proto */ exit ) ( ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern int ( /* missing proto */ malloc ) ( ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern double ceil ( double x ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern int ( /* missing proto */ free ) ( ) ; extern unsigned long strlen ( char const * s ) ; void main ( void ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; void encodeStrings_litStr0_i $ nit ( void ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; int fib ( int n ) ; extern int ( /* missing proto */ printf ) ( ) ; extern int scanf ( char const * format , ... ) ; extern void perror ( char const * str ) ; extern long clock ( void ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; char encodeStrings_litStr0 [ 17 ] ; int fib ( int n ) { int * f ; int tmp ; int i ; int out ; { if ( n < 0 ) { _1_stringEncoder ( 0 , encodeStrings_litStr0 ) ; printf ( encodeStrings_litStr0 ) ; exit ( 0 ) ; } tmp = malloc ( ( unsigned long ) ( n + 2 ) * 4UL ) ; f = ( int * ) tmp ; * ( f + 0 ) = 0 ; * ( f + 1 ) = 1 ; i = 2 ; while ( i <= n ) { * ( f + i ) = * ( f + ( i - 1 ) ) + * ( f + ( i - 2 ) ) ; i ++ ; } out = * ( f + n ) ; free ( f ) ; return ( out ) ; } } void megaInit ( void ) { { encodeStrings_litStr0_i $ nit ( ) ; } } void encodeStrings_litStr0_i $ nit ( void ) { { } } void main ( void ) { { megaInit ( ) ; } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { case 0 : str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; } } }
>>>Func
METHOD _1_stringEncoder
METHOD_RETURN void
PARAM int n
PARAM char str[]
BLOCK <empty> <empty>
<operator>.assignment encodeStrings_i3 = 0
IDENTIFIER n switch(n)
LITERAL 1 <empty>
<operator>.assignment str[encodeStrings_i3] = 'l'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'o'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 0 <empty>
<operator>.assignment str[encodeStrings_i3] = 'w'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'i'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
>>>PDG&31 0->2 0->3 0->4 0->5 0->6 0->7 0->8 0->9 0->10 0->11 0->12 0->13 0->14 0->15 0->16 0->17 0->18 0->19 0->20 0->21 0->22 0->23 0->24 0->25 0->26 0->27 0->28 0->29 0->30 2->1 3->1 5->1 5->1 5->9 5->22 8->1 9->11 10->1 11->13 12->1 13->15 14->1 15->17 16->1 17->19 18->1 18->1 19->1 19->1 21->1 22->24 23->1 24->26 25->1 26->28 27->1 28->30 29->1 29->1 30->1 30->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; char * * _global_argv = ( char * * ) 0 ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern int raise ( int sig ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; int main ( int argc , char * * argv , char * * _formal_envp ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void encodeStrings_litStr0_i $ nit ( void ) ; int _global_argc = 0 ; void megaInit ( void ) ; char * * _global_envp = ( char * * ) 0 ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int ( /* missing proto */ printf ) ( ) ; extern int scanf ( char const * format , ... ) ; extern void perror ( char const * str ) ; extern long clock ( void ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern float strtof ( char const * str , char const * endptr ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern double strtod ( char const * str , char const * endptr ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; void encodeStrings_litStr1_i $ nit ( void ) ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; char encodeStrings_litStr1 [ 6 ] ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; char encodeStrings_litStr0 [ 5 ] ; void megaInit ( void ) { { encodeStrings_litStr1_i $ nit ( ) ; encodeStrings_litStr0_i $ nit ( ) ; } } void encodeStrings_litStr0_i $ nit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { case 1 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 0 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; } } } int main ( int argc , char * * argv , char * * _formal_envp ) { unsigned char c ; int _BARRIER_0 ; { megaInit ( ) ; _global_argc = argc ; _global_argv = argv ; _global_envp = _formal_envp ; _BARRIER_0 = 1 ; c = ( unsigned char ) * ( * ( argv + 1 ) + 0 ) ; if ( ( int ) c > 127 ) { _1_stringEncoder ( 0 , encodeStrings_litStr0 ) ; printf ( encodeStrings_litStr0 ) ; } else { _1_stringEncoder ( 1 , encodeStrings_litStr1 ) ; printf ( encodeStrings_litStr1 ) ; } return ( 0 ) ; } } void encodeStrings_litStr1_i $ nit ( void ) { { } }
>>>Func
METHOD maxcmp
METHOD_RETURN int
PARAM int a
PARAM int b
RETURN return (tmp); return (tmp);
<operator>.greaterEqualsThan a >= b
IDENTIFIER tmp return (tmp);
<operator>.assignment tmp = a
<operator>.assignment tmp = b
>>>PDG&9 0->2 0->3 0->5 0->6 0->7 0->8 2->5 3->5 4->1 5->1 5->1 5->1 5->7 5->7 5->8 5->8 6->4 7->1 7->1 7->1 7->6 8->1 8->1 8->1 8->6
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; int maxcmp ( int a , int b ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; void main ( void ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int printf ( char const * format , ... ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; int maxcmp ( int a , int b ) { int tmp ; { if ( a >= b ) { tmp = a ; } else { tmp = b ; } return ( tmp ) ; } } void megaInit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { } } } void main ( void ) { { megaInit ( ) ; } }
>>>Func
METHOD _1_stringEncoder
METHOD_RETURN void
PARAM int n
PARAM char str[]
BLOCK <empty> <empty>
<operator>.assignment encodeStrings_i3 = 0
IDENTIFIER n switch(n)
LITERAL 1 <empty>
<operator>.assignment str[encodeStrings_i3] = '\n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 0 <empty>
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
>>>PDG&21 0->2 0->3 0->4 0->5 0->6 0->7 0->8 0->9 0->10 0->11 0->12 0->13 0->14 0->15 0->16 0->17 0->18 0->19 0->20 2->1 3->1 5->1 5->1 5->9 5->14 8->1 9->11 10->1 10->1 11->1 11->1 13->1 14->16 15->1 16->18 17->1 18->20 19->1 19->1 20->1 20->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int unlink ( char const * filename ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; void main ( void ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void encodeStrings_litStr0_i $ nit ( void ) ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int ( /* missing proto */ printf ) ( ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; void encodeStrings_litStr1_i $ nit ( void ) ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; void display ( int * arr , int n ) ; extern double sqrt ( double x ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; char encodeStrings_litStr1 [ 2 ] ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; char encodeStrings_litStr0 [ 4 ] ; void encodeStrings_litStr0_i $ nit ( void ) { { } } void main ( void ) { { megaInit ( ) ; } } void megaInit ( void ) { { encodeStrings_litStr1_i $ nit ( ) ; encodeStrings_litStr0_i $ nit ( ) ; } } void encodeStrings_litStr1_i $ nit ( void ) { { } } void display ( int * arr , int n ) { int i ; { i = 0 ; while ( i < n ) { _1_stringEncoder ( 0 , encodeStrings_litStr0 ) ; printf ( encodeStrings_litStr0 , * ( arr + i ) ) ; i ++ ; } _1_stringEncoder ( 1 , encodeStrings_litStr1 ) ; printf ( encodeStrings_litStr1 ) ; return ; } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { case 1 : str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 0 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; } } }
>>>Func
METHOD missingNumber
METHOD_RETURN int
PARAM int *nums
PARAM int numsSize
<operator>.assignment actual_sum = 0
<operator>.assignment sum = 0
<operator>.assignment i = 0
RETURN return ((actual_sum + numsSize) - sum); return ((actual_sum + numsSize) - sum);
<operator>.lessThan i < numsSize
<operator>.subtraction (actual_sum + numsSize) - sum
<operator>.assignmentPlus sum += *(nums + i)
<operator>.assignmentPlus actual_sum += i
<operator>.postIncrement i ++
<operator>.addition actual_sum + numsSize
<operator>.addition nums + i
<operator>.indirection *(nums + i)
>>>PDG&16 0->2 0->3 0->4 0->5 0->6 0->8 0->9 0->10 0->11 0->12 0->13 0->14 2->1 2->14 3->8 4->1 4->9 4->11 4->13 5->1 5->9 5->10 6->1 6->8 7->1 8->1 8->1 8->8 8->9 8->10 8->11 8->11 8->12 8->12 8->13 8->14 8->14 8->15 9->1 9->1 9->1 9->7 10->1 10->1 10->9 11->1 11->9 11->13 12->1 12->8 13->1 13->1 14->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; int missingNumber ( int * nums , int numsSize ) ; extern unsigned long strlen ( char const * s ) ; void main ( void ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int printf ( char const * format , ... ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { } } } void megaInit ( void ) { { } } int missingNumber ( int * nums , int numsSize ) { int i ; int actual_sum ; int sum ; { actual_sum = 0 ; sum = 0 ; i = 0 ; while ( i < numsSize ) { sum += * ( nums + i ) ; actual_sum += i ; i ++ ; } return ( ( actual_sum + numsSize ) - sum ) ; } } void main ( void ) { { megaInit ( ) ; } }
>>>Func
METHOD fib
METHOD_RETURN int
PARAM unsigned int n
<operator>.assignment tmp = sqrt(5)
<operator>.assignment tmp___0 = sqrt(5)
<operator>.assignment tmp___1 = pow((1 + tmp___0) / 2, n + 1U)
<operator>.assignment tmp___2 = sqrt(5)
<operator>.assignment tmp___3 = sqrt(5)
<operator>.assignment tmp___4 = pow((1 - tmp___3) / 2, n + 1U)
<operator>.assignment seq = (float )((1 / tmp) * tmp___1 - (1 / tmp___2) * tmp___4)
RETURN return ((int )seq); return ((int )seq);
<operator>.cast (int )seq
sqrt sqrt(5)
sqrt sqrt(5)
pow pow((1 + tmp___0) / 2, n + 1U)
sqrt sqrt(5)
sqrt sqrt(5)
pow pow((1 - tmp___3) / 2, n + 1U)
<operator>.cast (float )((1 / tmp) * tmp___1 - (1 / tmp___2) * tmp___4)
<operator>.division (1 + tmp___0) / 2
<operator>.addition n + 1U
<operator>.division (1 - tmp___3) / 2
<operator>.addition n + 1U
<operator>.subtraction (1 / tmp) * tmp___1 - (1 / tmp___2) * tmp___4
<operator>.addition 1 + tmp___0
<operator>.subtraction 1 - tmp___3
<operator>.multiplication (1 / tmp) * tmp___1
<operator>.multiplication (1 / tmp___2) * tmp___4
<operator>.division 1 / tmp
<operator>.division 1 / tmp___2
>>>PDG&30 0->2 0->11 0->12 0->13 0->14 0->15 0->16 0->17 0->19 0->20 0->21 0->22 0->24 0->25 0->26 0->27 0->28 0->29 2->14 2->17 2->20 2->22 3->1 3->28 4->1 4->19 4->24 5->1 5->1 5->26 6->1 6->29 7->1 7->1 7->25 8->1 8->1 8->27 9->1 9->1 9->11 10->1 11->1 11->1 11->10 12->3 13->4 14->1 14->5 14->5 15->6 16->7 17->1 17->1 17->8 17->8 18->1 19->1 19->14 19->14 21->1 21->17 21->17 22->1 23->1 23->1 23->9 23->9 23->18 23->18 24->1 25->1 25->21 25->21 26->1 26->1 26->23 26->23 27->1 27->1 27->23 27->23 28->1 28->26 28->26 29->1 29->27 29->27
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; void main ( void ) ; extern int ( /* missing proto */ pow ) ( ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int printf ( char const * format , ... ) ; int fib ( unsigned int n ) ; extern int scanf ( char const * format , ... ) ; extern void perror ( char const * str ) ; extern long clock ( void ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern int ( /* missing proto */ sqrt ) ( ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; void megaInit ( void ) { { } } int fib ( unsigned int n ) { float seq ; int tmp ; int tmp___0 ; int tmp___1 ; int tmp___2 ; int tmp___3 ; int tmp___4 ; { tmp = sqrt ( 5 ) ; tmp___0 = sqrt ( 5 ) ; tmp___1 = pow ( ( 1 + tmp___0 ) / 2 , n + 1U ) ; tmp___2 = sqrt ( 5 ) ; tmp___3 = sqrt ( 5 ) ; tmp___4 = pow ( ( 1 - tmp___3 ) / 2 , n + 1U ) ; seq = ( float ) ( ( 1 / tmp ) * tmp___1 - ( 1 / tmp___2 ) * tmp___4 ) ; return ( ( int ) seq ) ; } } void main ( void ) { { megaInit ( ) ; } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { } } }
>>>Func
METHOD _1_stringEncoder
METHOD_RETURN void
PARAM int n
PARAM char str[]
BLOCK <empty> <empty>
<operator>.assignment encodeStrings_i3 = 0
IDENTIFIER n switch(n)
LITERAL 3 <empty>
<operator>.assignment str[encodeStrings_i3] = 'i'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'f'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '-'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '1'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '-'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'l'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'o'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 2 <empty>
<operator>.assignment str[encodeStrings_i3] = 'i'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'f'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '-'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '2'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '-'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'l'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'o'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 1 <empty>
<operator>.assignment str[encodeStrings_i3] = 'i'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'f'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '-'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '2'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '-'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'w'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'i'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 0 <empty>
<operator>.assignment str[encodeStrings_i3] = 'i'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'f'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '-'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '1'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '-'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'w'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'i'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
>>>PDG&95 0->2 0->3 0->4 0->5 0->6 0->7 0->8 0->9 0->10 0->11 0->12 0->13 0->14 0->15 0->16 0->17 0->18 0->19 0->20 0->21 0->22 0->23 0->24 0->25 0->26 0->27 0->28 0->29 0->30 0->31 0->32 0->33 0->34 0->35 0->36 0->37 0->38 0->39 0->40 0->41 0->42 0->43 0->44 0->45 0->46 0->47 0->48 0->49 0->50 0->51 0->52 0->53 0->54 0->55 0->56 0->57 0->58 0->59 0->60 0->61 0->62 0->63 0->64 0->65 0->66 0->67 0->68 0->69 0->70 0->71 0->72 0->73 0->74 0->75 0->76 0->77 0->78 0->79 0->80 0->81 0->82 0->83 0->84 0->85 0->86 0->87 0->88 0->89 0->90 0->91 0->92 0->93 0->94 2->1 3->1 5->1 5->1 5->9 5->32 5->55 5->76 8->1 9->11 10->1 11->13 13->15 14->1 15->17 16->1 17->19 18->1 19->21 20->1 21->23 22->1 23->25 24->1 25->27 26->1 27->29 28->1 28->1 29->1 29->1 31->1 32->34 33->1 34->36 36->38 37->1 38->40 39->1 40->42 41->1 42->44 43->1 44->46 45->1 46->48 47->1 48->50 49->1 50->52 51->1 51->1 52->1 52->1 55->57 56->1 57->59 59->61 60->1 61->63 62->1 63->65 64->1 65->67 66->1 67->69 68->1 69->71 70->1 71->73 72->1 72->1 73->1 73->1 76->78 77->1 78->80 80->82 81->1 82->84 83->1 84->86 85->1 86->88 87->1 88->90 89->1 90->92 91->1 92->94 93->1 93->1 94->1 94->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern void exit ( int status ) ; extern int pthread_cond_signal ( int * cond ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; char * * _global_argv = ( char * * ) 0 ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; void encodeStrings_litStr2_i $ nit ( void ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int pthread_mutex_lock ( int * mutex ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; int main ( int argc , char * * argv , char * * _formal_envp ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; void encodeStrings_litStr0_i $ nit ( void ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; int _global_argc = 0 ; void megaInit ( void ) ; char * * _global_envp = ( char * * ) 0 ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; void encodeStrings_litStr3_i $ nit ( void ) ; extern int ( /* missing proto */ printf ) ( ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; void encodeStrings_litStr1_i $ nit ( void ) ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; char encodeStrings_litStr3 [ 11 ] ; char encodeStrings_litStr2 [ 11 ] ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; char encodeStrings_litStr1 [ 10 ] ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; char encodeStrings_litStr0 [ 10 ] ; void encodeStrings_litStr0_i $ nit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { case 3 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 2 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 1 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 0 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; } } } void encodeStrings_litStr1_i $ nit ( void ) { { } } void megaInit ( void ) { { encodeStrings_litStr3_i $ nit ( ) ; encodeStrings_litStr2_i $ nit ( ) ; encodeStrings_litStr1_i $ nit ( ) ; encodeStrings_litStr0_i $ nit ( ) ; } } void encodeStrings_litStr3_i $ nit ( void ) { { } } void encodeStrings_litStr2_i $ nit ( void ) { { } } int main ( int argc , char * * argv , char * * _formal_envp ) { unsigned char c ; int _BARRIER_0 ; { megaInit ( ) ; _global_argc = argc ; _global_argv = argv ; _global_envp = _formal_envp ; _BARRIER_0 = 1 ; c = ( unsigned char ) * ( * ( argv + 1 ) + 0 ) ; if ( ( int ) c > 63 ) { _1_stringEncoder ( 0 , encodeStrings_litStr0 ) ; printf ( encodeStrings_litStr0 ) ; if ( ( int ) c == 127 ) { _1_stringEncoder ( 1 , encodeStrings_litStr1 ) ; printf ( encodeStrings_litStr1 ) ; } else { _1_stringEncoder ( 2 , encodeStrings_litStr2 ) ; printf ( encodeStrings_litStr2 ) ; } } else { _1_stringEncoder ( 3 , encodeStrings_litStr3 ) ; printf ( encodeStrings_litStr3 ) ; } return ( 0 ) ; } }
>>>Func
METHOD _1_stringEncoder
METHOD_RETURN void
PARAM int n
PARAM char str[]
BLOCK <empty> <empty>
<operator>.assignment encodeStrings_i3 = 0
IDENTIFIER n switch(n)
LITERAL 0 <empty>
<operator>.assignment str[encodeStrings_i3] = 'i'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'x'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '['
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ']'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'o'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'u'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'o'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'f'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'b'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'o'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'u'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '!'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
>>>PDG&62 0->2 0->3 0->4 0->5 0->6 0->7 0->8 0->9 0->10 0->11 0->12 0->13 0->14 0->15 0->16 0->17 0->18 0->19 0->20 0->21 0->22 0->23 0->24 0->25 0->26 0->27 0->28 0->29 0->30 0->31 0->32 0->33 0->34 0->35 0->36 0->37 0->38 0->39 0->40 0->41 0->42 0->43 0->44 0->45 0->46 0->47 0->48 0->49 0->50 0->51 0->52 0->53 0->54 0->55 0->56 0->57 0->58 0->59 0->60 0->61 2->1 3->1 5->1 5->1 5->9 8->1 9->11 11->13 13->15 14->1 15->17 16->1 17->19 19->21 20->1 21->23 22->1 23->25 25->27 26->1 27->29 29->31 31->33 33->35 34->1 35->37 37->39 39->41 40->1 41->43 42->1 43->45 44->1 45->47 46->1 47->49 48->1 49->51 50->1 51->53 52->1 53->55 54->1 55->57 56->1 57->59 58->1 59->61 60->1 60->1 61->1 61->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern double ceil ( double x ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; void main ( void ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; void encodeStrings_litStr0_i $ nit ( void ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int ( /* missing proto */ printf ) ( ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; unsigned int contains ( unsigned int const size , unsigned int const index ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; char encodeStrings_litStr0 [ 27 ] ; unsigned int contains ( unsigned int const size , unsigned int const index ) { { if ( size >= 0U ) { if ( index < size ) { return ( 1U ) ; } } _1_stringEncoder ( 0 , encodeStrings_litStr0 ) ; printf ( encodeStrings_litStr0 , index ) ; return ( 0U ) ; } } void megaInit ( void ) { { encodeStrings_litStr0_i $ nit ( ) ; } } void encodeStrings_litStr0_i $ nit ( void ) { { } } void main ( void ) { { megaInit ( ) ; } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { case 0 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; } } }
>>>Func
METHOD pointer_compare
METHOD_RETURN int
PARAM void *location1
PARAM void *location2
<operator>.lessThan (unsigned long )location1 < (unsigned long )location2
RETURN return (-1); return (-1);
<operator>.cast (unsigned long )location1
<operator>.cast (unsigned long )location2
<operator>.minus -1
<operator>.greaterThan (unsigned long )location1 > (unsigned long )location2
RETURN return (1); return (1);
<operator>.cast (unsigned long )location1
<operator>.cast (unsigned long )location2
LITERAL 1 return (1);
RETURN return (0); return (0);
LITERAL 0 return (0);
UNKNOWN unsigned long unsigned long
UNKNOWN unsigned long unsigned long
>>>PDG&18 0->2 0->3 0->4 0->6 0->7 0->8 0->9 0->10 0->11 0->12 0->13 0->14 0->15 2->4 2->6 2->9 2->11 3->4 3->7 3->9 3->12 4->1 4->1 4->1 4->5 4->8 4->9 4->11 4->12 4->16 4->17 5->1 6->1 7->1 8->1 8->5 9->10 9->14 10->1 13->10 14->1 15->14
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; void main ( void ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int printf ( char const * format , ... ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; int pointer_compare ( void * location1 , void * location2 ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; int pointer_compare ( void * location1 , void * location2 ) { { if ( ( unsigned long ) location1 < ( unsigned long ) location2 ) { return ( -1 ) ; } else if ( ( unsigned long ) location1 > ( unsigned long ) location2 ) { return ( 1 ) ; } else { return ( 0 ) ; } } } void megaInit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { } } } void main ( void ) { { megaInit ( ) ; } }
>>>Func
METHOD toLowerCase
METHOD_RETURN char*
PARAM char *str
<operator>.assignment i = 0
RETURN return (str); return (str);
LITERAL 1 while (1)
IDENTIFIER str return (str);
<operator>.assignment tmp___0 = strlen(str)
<operator>.assignment tmp = tolower((int )*(str + i))
<operator>.assignment *(str + i) = (char )tmp
<operator>.postIncrement i ++
<operator>.logicalNot ! (i < tmp___0)
strlen strlen(str)
tolower tolower((int )*(str + i))
<operator>.cast (char )tmp
<operator>.lessThan i < tmp___0
<operator>.addition str + i
<operator>.addition str + i
<operator>.indirection *(str + i)
<operator>.cast (int )*(str + i)
UNKNOWN char char
UNKNOWN int int
<operator>.indirection *(str + i)
>>>PDG&23 0->2 0->3 0->5 0->6 0->9 0->10 0->12 0->14 0->15 0->16 0->17 2->1 2->6 2->12 3->1 3->1 3->15 4->1 6->4 7->1 7->1 7->15 8->1 8->1 8->9 8->14 9->1 9->1 9->1 10->1 10->1 10->15 11->1 11->1 11->7 11->8 11->9 11->10 11->11 11->12 11->13 11->14 11->15 11->16 11->17 11->18 11->19 11->20 11->21 11->22 12->1 12->6 12->7 12->16 12->17 13->1 13->8 14->1 15->1 15->1 15->10 15->11 15->11 15->16 15->17 16->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern int ( /* missing proto */ strlen ) ( ) ; void main ( void ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int printf ( char const * format , ... ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern int ( /* missing proto */ tolower ) ( ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; char * toLowerCase ( char * str ) ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; void megaInit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { } } } void main ( void ) { { megaInit ( ) ; } } char * toLowerCase ( char * str ) { int i ; int tmp ; int tmp___0 ; { i = 0 ; while ( 1 ) { tmp___0 = strlen ( str ) ; if ( ! ( i < tmp___0 ) ) { break ; } tmp = tolower ( ( int ) * ( str + i ) ) ; * ( str + i ) = ( char ) tmp ; i ++ ; } return ( str ) ; } }
>>>Func
METHOD _1_stringEncoder
METHOD_RETURN void
PARAM int n
PARAM char str[]
BLOCK <empty> <empty>
<operator>.assignment encodeStrings_i3 = 0
IDENTIFIER n switch(n)
LITERAL 2 <empty>
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 1 <empty>
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 0 <empty>
<operator>.assignment str[encodeStrings_i3] = 'N'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'u'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'm'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'b'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ':'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
>>>PDG&44 0->2 0->3 0->4 0->5 0->6 0->7 0->8 0->9 0->10 0->11 0->12 0->13 0->14 0->15 0->16 0->17 0->18 0->19 0->20 0->21 0->22 0->23 0->24 0->25 0->26 0->27 0->28 0->29 0->30 0->31 0->32 0->33 0->34 0->35 0->36 0->37 0->38 0->39 0->40 0->41 0->42 0->43 2->1 3->1 5->1 5->1 5->9 5->20 5->27 8->1 9->11 10->1 11->13 12->1 13->15 14->1 15->17 16->1 16->1 17->1 17->1 19->1 20->22 21->1 22->24 23->1 23->1 24->1 24->1 26->1 27->29 28->1 29->31 30->1 31->33 32->1 33->35 34->1 35->37 36->1 37->39 38->1 39->41 40->1 41->43 42->1 42->1 43->1 43->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; char * * _global_argv = ( char * * ) 0 ; extern int fcntl ( int filedes , int cmd , ... ) ; void encodeStrings_litStr2_i $ nit ( void ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; int main ( int _formal_argc , char * * _formal_argv , char * * _formal_envp ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; void encodeStrings_litStr0_i $ nit ( void ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; int _global_argc = 0 ; void megaInit ( void ) ; char * * _global_envp = ( char * * ) 0 ; extern int ( /* missing proto */ printf ) ( ) ; extern int ( /* missing proto */ fib ) ( ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int ( /* missing proto */ scanf ) ( ) ; extern void perror ( char const * str ) ; extern long clock ( void ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern double strtod ( char const * str , char const * endptr ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; void encodeStrings_litStr1_i $ nit ( void ) ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; char encodeStrings_litStr2 [ 5 ] ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; char encodeStrings_litStr1 [ 3 ] ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; char encodeStrings_litStr0 [ 9 ] ; void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { case 2 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 1 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 0 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; } } } void megaInit ( void ) { { encodeStrings_litStr2_i $ nit ( ) ; encodeStrings_litStr1_i $ nit ( ) ; encodeStrings_litStr0_i $ nit ( ) ; } } void encodeStrings_litStr1_i $ nit ( void ) { { } } int main ( int _formal_argc , char * * _formal_argv , char * * _formal_envp ) { int number ; int tmp ; int _BARRIER_0 ; { megaInit ( ) ; _global_argc = _formal_argc ; _global_argv = _formal_argv ; _global_envp = _formal_envp ; _BARRIER_0 = 1 ; _1_stringEncoder ( 0 , encodeStrings_litStr0 ) ; printf ( encodeStrings_litStr0 ) ; _1_stringEncoder ( 1 , encodeStrings_litStr1 ) ; scanf ( encodeStrings_litStr1 , & number ) ; tmp = fib ( number ) ; _1_stringEncoder ( 2 , encodeStrings_litStr2 ) ; printf ( encodeStrings_litStr2 , tmp ) ; return ( 0 ) ; } } void encodeStrings_litStr2_i $ nit ( void ) { { } } void encodeStrings_litStr0_i $ nit ( void ) { { } }
>>>Func
METHOD _1_stringEncoder
METHOD_RETURN void
PARAM int n
PARAM char str[]
BLOCK <empty> <empty>
<operator>.assignment encodeStrings_i3 = 0
IDENTIFIER n switch(n)
LITERAL 8 <empty>
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 7 <empty>
<operator>.assignment str[encodeStrings_i3] = 'B'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'm'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'g'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'i'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'c'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'i'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '!'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 6 <empty>
<operator>.assignment str[encodeStrings_i3] = 'V'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'o'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'l'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'u'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'c'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'h'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '!'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 5 <empty>
<operator>.assignment str[encodeStrings_i3] = 'C'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '#'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ':'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 4 <empty>
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 3 <empty>
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 2 <empty>
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 1 <empty>
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 0 <empty>
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
>>>PDG&142 0->2 0->3 0->4 0->5 0->6 0->7 0->8 0->9 0->10 0->11 0->12 0->13 0->14 0->15 0->16 0->17 0->18 0->19 0->20 0->21 0->22 0->23 0->24 0->25 0->26 0->27 0->28 0->29 0->30 0->31 0->32 0->33 0->34 0->35 0->36 0->37 0->38 0->39 0->40 0->41 0->42 0->43 0->44 0->45 0->46 0->47 0->48 0->49 0->50 0->51 0->52 0->53 0->54 0->55 0->56 0->57 0->58 0->59 0->60 0->61 0->62 0->63 0->64 0->65 0->66 0->67 0->68 0->69 0->70 0->71 0->72 0->73 0->74 0->75 0->76 0->77 0->78 0->79 0->80 0->81 0->82 0->83 0->84 0->85 0->86 0->87 0->88 0->89 0->90 0->91 0->92 0->93 0->94 0->95 0->96 0->97 0->98 0->99 0->100 0->101 0->102 0->103 0->104 0->105 0->106 0->107 0->108 0->109 0->110 0->111 0->112 0->113 0->114 0->115 0->116 0->117 0->118 0->119 0->120 0->121 0->122 0->123 0->124 0->125 0->126 0->127 0->128 0->129 0->130 0->131 0->132 0->133 0->134 0->135 0->136 0->137 0->138 0->139 0->140 0->141 2->1 3->1 5->1 5->1 5->9 5->18 5->47 5->86 5->109 5->116 5->123 5->130 5->137 8->1 9->11 10->1 11->13 12->1 13->15 14->1 14->1 15->1 15->1 17->1 18->20 20->22 21->1 22->24 23->1 24->26 25->1 26->28 28->30 29->1 30->32 32->34 33->1 34->36 35->1 36->38 37->1 38->40 39->1 40->42 41->1 42->44 43->1 43->1 44->1 44->1 46->1 47->49 48->1 49->51 50->1 51->53 52->1 53->55 54->1 55->57 57->59 59->61 61->63 62->1 63->65 64->1 65->67 66->1 67->69 68->1 69->71 71->73 72->1 73->75 74->1 75->77 76->1 77->79 78->1 79->81 80->1 81->83 82->1 82->1 83->1 83->1 85->1 86->88 87->1 88->90 89->1 90->92 91->1 92->94 94->96 95->1 96->98 97->1 98->100 99->1 100->102 101->1 102->104 103->1 104->106 105->1 105->1 106->1 106->1 108->1 109->111 110->1 111->113 112->1 112->1 113->1 113->1 115->1 116->118 117->1 118->120 119->1 119->1 120->1 120->1 122->1 123->125 124->1 125->127 126->1 126->1 127->1 127->1 129->1 130->132 131->1 132->134 133->1 133->1 134->1 134->1 136->1 137->139 138->1 139->141 140->1 140->1 141->1 141->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int ( /* missing proto */ puts ) ( ) ; char * * _global_argv = ( char * * ) 0 ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; void encodeStrings_litStr2_i $ nit ( void ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern int raise ( int sig ) ; void encodeStrings_litStr5_i $ nit ( void ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; void encodeStrings_litStr8_i $ nit ( void ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; int main ( int argc , char * * argv , char * * _formal_envp ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; void encodeStrings_litStr0_i $ nit ( void ) ; int _global_argc = 0 ; void megaInit ( void ) ; char * * _global_envp = ( char * * ) 0 ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; void encodeStrings_litStr3_i $ nit ( void ) ; extern int ( /* missing proto */ printf ) ( ) ; extern int ( /* missing proto */ scanf ) ( ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; void encodeStrings_litStr6_i $ nit ( void ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern double strtod ( char const * str , char const * endptr ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; void encodeStrings_litStr1_i $ nit ( void ) ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; void encodeStrings_litStr4_i $ nit ( void ) ; char encodeStrings_litStr8 [ 4 ] ; char encodeStrings_litStr7 [ 14 ] ; char encodeStrings_litStr6 [ 19 ] ; void encodeStrings_litStr7_i $ nit ( void ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; char encodeStrings_litStr5 [ 11 ] ; char encodeStrings_litStr4 [ 3 ] ; extern double sqrt ( double x ) ; extern int open ( char const * filename , int oflag , ... ) ; char encodeStrings_litStr3 [ 3 ] ; char encodeStrings_litStr2 [ 3 ] ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; char encodeStrings_litStr1 [ 3 ] ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; char encodeStrings_litStr0 [ 3 ] ; void encodeStrings_litStr1_i $ nit ( void ) { { } } void encodeStrings_litStr6_i $ nit ( void ) { { } } void encodeStrings_litStr0_i $ nit ( void ) { { } } void encodeStrings_litStr5_i $ nit ( void ) { { } } void encodeStrings_litStr2_i $ nit ( void ) { { } } void encodeStrings_litStr3_i $ nit ( void ) { { } } int main ( int argc , char * * argv , char * * _formal_envp ) { int a ; int b ; int c ; int d ; int e ; int f ; int r1 [ 16 ] ; int r2 [ 16 ] ; int _BARRIER_0 ; { megaInit ( ) ; _global_argc = argc ; _global_argv = argv ; _global_envp = _formal_envp ; _BARRIER_0 = 1 ; _1_stringEncoder ( 0 , encodeStrings_litStr0 ) ; scanf ( encodeStrings_litStr0 , & e ) ; f = 1 ; while ( f <= e ) { _1_stringEncoder ( 1 , encodeStrings_litStr1 ) ; scanf ( encodeStrings_litStr1 , & c ) ; a = 0 ; while ( a < 16 ) { _1_stringEncoder ( 2 , encodeStrings_litStr2 ) ; scanf ( encodeStrings_litStr2 , & b ) ; r1 [ b - 1 ] = a / 4 ; a ++ ; } _1_stringEncoder ( 3 , encodeStrings_litStr3 ) ; scanf ( encodeStrings_litStr3 , & d ) ; a = 0 ; while ( a < 16 ) { _1_stringEncoder ( 4 , encodeStrings_litStr4 ) ; scanf ( encodeStrings_litStr4 , & b ) ; r2 [ b - 1 ] = a / 4 ; a ++ ; } c -- ; d -- ; b = -1 ; a = 0 ; while ( 1 ) { if ( a < 16 ) { if ( ! ( b != -2 ) ) { break ; } } else { break ; } if ( r1 [ a ] == c ) { if ( r2 [ a ] == d ) { if ( b >= 0 ) { b = -2 ; } if ( b == -1 ) { b = a ; } } } a ++ ; } _1_stringEncoder ( 5 , encodeStrings_litStr5 ) ; printf ( encodeStrings_litStr5 , f ) ; if ( b == -1 ) { _1_stringEncoder ( 6 , encodeStrings_litStr6 ) ; puts ( encodeStrings_litStr6 ) ; } if ( b == -2 ) { _1_stringEncoder ( 7 , encodeStrings_litStr7 ) ; puts ( encodeStrings_litStr7 ) ; } if ( b >= 0 ) { _1_stringEncoder ( 8 , encodeStrings_litStr8 ) ; printf ( encodeStrings_litStr8 , b + 1 ) ; } f ++ ; } return ( 0 ) ; } } void megaInit ( void ) { { encodeStrings_litStr8_i $ nit ( ) ; encodeStrings_litStr7_i $ nit ( ) ; encodeStrings_litStr6_i $ nit ( ) ; encodeStrings_litStr5_i $ nit ( ) ; encodeStrings_litStr4_i $ nit ( ) ; encodeStrings_litStr3_i $ nit ( ) ; encodeStrings_litStr2_i $ nit ( ) ; encodeStrings_litStr1_i $ nit ( ) ; encodeStrings_litStr0_i $ nit ( ) ; } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { case 8 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 7 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 6 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 5 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 4 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 3 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 2 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 1 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 0 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; } } } void encodeStrings_litStr8_i $ nit ( void ) { { } } void encodeStrings_litStr7_i $ nit ( void ) { { } } void encodeStrings_litStr4_i $ nit ( void ) { { } }
>>>Func
METHOD maxProfit
METHOD_RETURN int
PARAM int *prices
PARAM int pricesSize
<operator>.assignment maxCur = 0
<operator>.assignment maxSoFar = 0
<operator>.assignment i = 1
RETURN return (maxSoFar); return (maxSoFar);
<operator>.lessThan i < pricesSize
IDENTIFIER maxSoFar return (maxSoFar);
<operator>.assignment maxCur = maxcmp(0  (maxCur + *(prices + i)) - *(prices + (i - 1)))
<operator>.assignment maxSoFar = maxcmp(maxSoFar, maxCur)
<operator>.postIncrement i ++
maxcmp maxcmp(0  (maxCur + *(prices + i)) - *(prices + (i - 1)))
maxcmp maxcmp(maxSoFar, maxCur)
<operator>.subtraction (maxCur + *(prices + i)) - *(prices + (i - 1))
<operator>.addition maxCur + *(prices + i)
<operator>.addition prices + (i - 1)
<operator>.addition prices + i
<operator>.subtraction i - 1
<operator>.indirection *(prices + (i - 1))
<operator>.indirection *(prices + i)
>>>PDG&22 0->2 0->3 0->4 0->5 0->6 0->8 0->9 0->12 0->13 0->14 0->15 0->16 0->17 0->18 0->19 2->1 2->17 2->18 3->8 4->1 4->1 4->15 4->16 5->1 5->1 5->9 5->14 6->1 6->8 7->1 8->1 8->1 8->1 8->8 8->10 8->11 8->12 8->13 8->14 8->15 8->16 8->17 8->18 8->18 8->19 8->19 8->20 8->21 9->7 10->1 10->1 10->14 11->1 11->1 11->1 11->9 11->14 12->1 12->8 13->1 13->10 13->10 14->1 14->11 14->11 14->15 14->16 15->1 15->1 15->13 15->13 16->1 17->1 17->1 19->12 19->17 19->17
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern int ( /* missing proto */ maxcmp ) ( ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; void main ( void ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int printf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern int scanf ( char const * format , ... ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern float strtof ( char const * str , char const * endptr ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; int maxProfit ( int * prices , int pricesSize ) ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; void megaInit ( void ) { { } } int maxProfit ( int * prices , int pricesSize ) { int maxCur ; int maxSoFar ; int i ; { maxCur = 0 ; maxSoFar = 0 ; i = 1 ; while ( i < pricesSize ) { maxCur = maxcmp ( 0 , ( maxCur + * ( prices + i ) ) - * ( prices + ( i - 1 ) ) ) ; maxSoFar = maxcmp ( maxSoFar , maxCur ) ; i ++ ; } return ( maxSoFar ) ; } } void main ( void ) { { megaInit ( ) ; } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { } } }
>>>Func
METHOD distanceBetweenBusStops
METHOD_RETURN int
PARAM int *distance
PARAM int distanceSize
PARAM int start
PARAM int destination
<operator>.assignment sum1 = 0
<operator>.assignment sum2 = 0
<operator>.assignment i = 0
RETURN return (tmp___0); return (tmp___0);
<operator>.greaterThan start > destination
<operator>.lessThan i < distanceSize
<operator>.lessThan sum1 < sum2
IDENTIFIER tmp___0 return (tmp___0);
<operator>.assignment tmp = start
<operator>.assignment start = destination
<operator>.assignment destination = tmp
<operator>.postIncrement i ++
<operator>.assignment tmp___0 = sum1
<operator>.greaterEqualsThan i >= start
<operator>.assignment tmp___0 = sum2
<operator>.lessThan i < destination
<operator>.assignmentPlus sum2 += *(distance + i)
<operator>.assignmentPlus sum1 += *(distance + i)
<operator>.assignmentPlus sum2 += *(distance + i)
<operator>.addition distance + i
<operator>.addition distance + i
<operator>.addition distance + i
<operator>.indirection *(distance + i)
<operator>.indirection *(distance + i)
<operator>.indirection *(distance + i)
>>>PDG&31 0->2 0->3 0->4 0->5 0->6 0->7 0->8 0->10 0->11 0->12 0->13 0->14 0->15 0->16 0->17 0->18 0->19 0->20 0->21 0->22 0->23 0->24 0->25 0->26 0->27 2->1 2->25 2->26 2->27 3->11 4->10 5->10 6->1 6->12 6->23 7->1 7->12 7->22 7->24 8->1 8->11 9->1 10->1 10->1 10->1 10->14 10->14 10->15 10->15 10->16 10->19 10->21 11->1 11->1 11->1 11->11 11->17 11->19 11->19 12->1 12->1 12->1 12->18 12->18 12->20 12->20 13->9 14->1 14->16 15->1 15->1 15->19 16->1 16->1 16->1 16->21 17->1 17->11 18->1 18->1 18->1 18->13 19->1 19->1 19->17 19->21 19->21 19->22 19->25 19->25 19->28 20->1 20->1 20->1 20->13 21->1 21->1 21->17 21->23 21->24 21->26 21->26 21->27 21->27 21->29 21->30 22->1 22->1 22->12 22->24 23->1 23->1 23->12 24->1 24->1 24->12 24->22 25->1 26->1 27->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; void main ( void ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int printf ( char const * format , ... ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; int distanceBetweenBusStops ( int * distance , int distanceSize , int start , int destination ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; int distanceBetweenBusStops ( int * distance , int distanceSize , int start , int destination ) { int sum1 ; int sum2 ; int tmp ; int i ; int tmp___0 ; { sum1 = 0 ; sum2 = 0 ; if ( start > destination ) { tmp = start ; start = destination ; destination = tmp ; } i = 0 ; while ( i < distanceSize ) { if ( i >= start ) { if ( i < destination ) { sum1 += * ( distance + i ) ; } else { sum2 += * ( distance + i ) ; } } else { sum2 += * ( distance + i ) ; } i ++ ; } if ( sum1 < sum2 ) { tmp___0 = sum1 ; } else { tmp___0 = sum2 ; } return ( tmp___0 ) ; } } void megaInit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { } } } void main ( void ) { { megaInit ( ) ; } }
>>>Func
METHOD findMedianSortedArrays
METHOD_RETURN double
PARAM int *nums1
PARAM int nums1Size
PARAM int *nums2
PARAM int nums2Size
<operator>.assignment index1 = 0
<operator>.assignment index2 = 0
<operator>.assignment __lengthofv = (unsigned long )(nums1Size + nums2Size)
<operator>.assignment tmp = __builtin_alloca(sizeof(*v) * __lengthofv)
<operator>.assignment v = (int *)tmp
<operator>.assignment v_index = 0
<operator>.assignment new_index = v_index / 2
<operator>.assignment i = 0
RETURN return ((double )*(v + new_index)); return ((double )*(v + new_index));
LITERAL 1 while (1)
<operator>.lessThan index1 < nums1Size
<operator>.lessThan index2 < nums2Size
<operator>.equals v_index == 1
<operator>.equals v_index % 2 == 0
<operator>.cast (double )*(v + new_index)
<operator>.cast (unsigned long )(nums1Size + nums2Size)
__builtin_alloca __builtin_alloca(sizeof(*v) * __lengthofv)
<operator>.cast (int *)tmp
RETURN return ((double )*(v + 0)); return ((double )*(v + 0));
<operator>.assignment n1 = (double )*(v + v_index / 2)
<operator>.assignment n2 = (double )*(v + (v_index / 2 - 1))
RETURN return ((n1 + n2) / (double )2); return ((n1 + n2) / (double )2);
<operator>.division v_index / 2
<operator>.addition nums1Size + nums2Size
<operator>.multiplication sizeof(*v) * __lengthofv
<operator>.lessThan index1 < nums1Size
<operator>.lessEqualsThan *(nums1 + index1) <= *(nums2 + index2)
<operator>.lessThan index1 < nums1Size
<operator>.lessThan index2 < nums2Size
<operator>.cast (double )*(v + 0)
<operator>.modulo v_index % 2
<operator>.division (n1 + n2) / (double )2
<operator>.sizeOf sizeof(*v)
<operator>.assignment tmp___0 = v_index
<operator>.postIncrement v_index ++
<operator>.assignment tmp___1 = index1
<operator>.postIncrement index1 ++
<operator>.assignment *(v + tmp___0) = *(nums1 + tmp___1)
<operator>.assignment tmp___4 = v_index
<operator>.postIncrement v_index ++
<operator>.assignment tmp___5 = index1
<operator>.postIncrement index1 ++
<operator>.assignment *(v + tmp___4) = *(nums1 + tmp___5)
<operator>.assignment tmp___6 = v_index
<operator>.postIncrement v_index ++
<operator>.assignment tmp___7 = index2
<operator>.postIncrement index2 ++
<operator>.assignment *(v + tmp___6) = *(nums2 + tmp___7)
<operator>.addition v + new_index
<operator>.logicalNot ! (index2 < nums2Size)
<operator>.assignment tmp___2 = v_index
<operator>.postIncrement v_index ++
<operator>.assignment tmp___3 = index2
<operator>.postIncrement index2 ++
<operator>.assignment *(v + tmp___2) = *(nums2 + tmp___3)
<operator>.addition n1 + n2
<operator>.cast (double )2
<operator>.addition nums1 + index1
<operator>.addition nums2 + index2
<operator>.addition v + 0
<operator>.addition v + v_index / 2
<operator>.addition v + (v_index / 2 - 1)
<operator>.lessThan index2 < nums2Size
<operator>.addition v + tmp___0
<operator>.addition nums1 + tmp___1
<operator>.addition v + tmp___4
<operator>.addition nums1 + tmp___5
<operator>.addition v + tmp___6
<operator>.addition nums2 + tmp___7
<operator>.division v_index / 2
<operator>.subtraction v_index / 2 - 1
<operator>.addition v + tmp___2
<operator>.addition nums2 + tmp___3
<operator>.division v_index / 2
UNKNOWN double double
<operator>.indirection *(v + new_index)
<operator>.cast (double )*(v + v_index / 2)
<operator>.cast (double )*(v + (v_index / 2 - 1))
<operator>.indirection *(nums1 + index1)
<operator>.indirection *(nums2 + index2)
UNKNOWN double double
<operator>.indirection *(v + 0)
UNKNOWN double double
<operator>.indirection *(v + v_index / 2)
UNKNOWN double double
<operator>.indirection *(v + (v_index / 2 - 1))
<operator>.indirection *(v + tmp___0)
<operator>.indirection *(nums1 + tmp___1)
<operator>.indirection *(v + tmp___4)
<operator>.indirection *(nums1 + tmp___5)
<operator>.indirection *(v + tmp___6)
<operator>.indirection *(nums2 + tmp___7)
UNKNOWN double double
<operator>.indirection *(v + tmp___2)
<operator>.indirection *(nums2 + tmp___3)
>>>PDG&101 0->2 0->3 0->4 0->5 0->6 0->7 0->8 0->10 0->11 0->13 0->15 0->16 0->17 0->18 0->19 0->21 0->23 0->28 0->29 0->30 0->31 0->33 0->34 0->36 0->37 0->39 0->40 0->41 0->42 0->44 0->45 0->46 0->47 0->49 0->50 0->51 0->52 0->54 0->56 0->57 0->58 0->59 0->61 0->62 0->63 0->64 0->65 0->66 0->67 0->68 0->69 0->70 0->71 0->72 0->73 0->74 0->75 0->76 0->77 0->78 0->79 2->1 2->63 2->72 3->8 3->16 3->21 3->29 3->31 4->1 4->64 4->74 5->8 5->17 5->21 5->29 5->68 6->1 6->16 6->31 7->1 7->17 7->68 8->1 8->1 8->30 9->1 9->1 9->10 9->23 10->1 10->1 10->54 10->65 10->66 10->67 10->69 10->71 10->73 10->77 11->1 11->18 11->39 11->40 11->44 11->45 11->49 11->50 11->56 11->57 12->54 14->1 16->1 16->1 16->1 16->33 16->33 16->33 17->1 17->1 17->1 17->34 17->34 17->34 18->1 18->1 18->19 18->24 18->35 18->36 18->36 18->65 18->86 18->87 19->12 19->13 19->14 19->20 19->25 19->26 19->27 19->28 19->37 19->54 19->61 19->62 19->66 19->67 19->75 19->76 19->79 19->80 19->81 19->82 19->83 19->88 19->89 19->90 19->91 19->98 20->14 21->1 22->1 22->9 23->1 24->1 25->37 25->61 26->37 26->61 27->1 28->12 28->12 30->1 30->22 31->16 31->16 31->41 31->42 31->55 31->63 31->68 32->1 32->1 32->1 32->39 32->40 32->41 32->42 32->43 32->56 32->57 32->58 32->59 32->60 32->69 32->70 32->77 32->78 32->92 32->93 32->99 32->100 33->1 33->1 33->1 33->33 33->44 33->45 33->46 33->46 33->47 33->47 33->48 33->71 33->72 33->94 33->95 34->1 34->1 34->1 34->34 34->49 34->50 34->51 34->51 34->52 34->52 34->53 34->73 34->74 34->96 34->97 35->1 35->1 35->24 36->19 36->19 36->28 36->75 37->27 38->1 39->1 39->69 40->1 40->18 40->39 40->44 40->45 40->49 40->50 40->56 40->57 41->1 41->70 42->1 42->16 42->31 43->1 43->1 43->1 44->1 44->71 45->1 45->18 45->44 45->49 45->50 46->1 46->72 47->1 47->33 48->1 48->1 48->1 49->1 49->73 50->1 50->18 50->49 51->1 51->74 52->1 52->34 53->1 53->1 53->1 55->1 55->31 55->32 55->63 55->64 55->84 55->85 56->1 56->77 57->1 57->18 57->39 57->40 57->44 57->45 57->49 57->50 57->56 58->1 58->78 59->1 59->17 59->68 60->1 60->1 60->1 63->1 64->1 65->1 68->17 68->17 68->55 68->55 68->58 68->59 68->64 69->1 70->1 70->1 71->1 72->1 72->1 73->1 74->1 74->1 75->66 75->66 75->79 76->67 76->67 77->1 78->1 78->1 79->76 79->76
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; void main ( void ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int printf ( char const * format , ... ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; double findMedianSortedArrays ( int * nums1 , int nums1Size , int * nums2 , int nums2Size ) ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; double findMedianSortedArrays ( int * nums1 , int nums1Size , int * nums2 , int nums2Size ) { int index1 ; int index2 ; int * v ; unsigned long __lengthofv ; void * tmp ; int v_index ; int tmp___0 ; int tmp___1 ; int tmp___2 ; int tmp___3 ; int tmp___4 ; int tmp___5 ; int tmp___6 ; int tmp___7 ; double n1 ; double n2 ; int new_index ; int i ; { index1 = 0 ; index2 = 0 ; __lengthofv = ( unsigned long ) ( nums1Size + nums2Size ) ; tmp = __builtin_alloca ( sizeof ( * v ) * __lengthofv ) ; v = ( int * ) tmp ; v_index = 0 ; while ( 1 ) { if ( index1 < nums1Size ) { if ( ! ( index2 < nums2Size ) ) { break ; } } else { break ; } if ( * ( nums1 + index1 ) <= * ( nums2 + index2 ) ) { tmp___0 = v_index ; v_index ++ ; tmp___1 = index1 ; index1 ++ ; * ( v + tmp___0 ) = * ( nums1 + tmp___1 ) ; } else { tmp___2 = v_index ; v_index ++ ; tmp___3 = index2 ; index2 ++ ; * ( v + tmp___2 ) = * ( nums2 + tmp___3 ) ; } } if ( index1 < nums1Size ) { while ( index1 < nums1Size ) { tmp___4 = v_index ; v_index ++ ; tmp___5 = index1 ; index1 ++ ; * ( v + tmp___4 ) = * ( nums1 + tmp___5 ) ; } } if ( index2 < nums2Size ) { while ( index2 < nums2Size ) { tmp___6 = v_index ; v_index ++ ; tmp___7 = index2 ; index2 ++ ; * ( v + tmp___6 ) = * ( nums2 + tmp___7 ) ; } } if ( v_index == 1 ) { return ( ( double ) * ( v + 0 ) ) ; } if ( v_index % 2 == 0 ) { n1 = ( double ) * ( v + v_index / 2 ) ; n2 = ( double ) * ( v + ( v_index / 2 - 1 ) ) ; return ( ( n1 + n2 ) / ( double ) 2 ) ; } new_index = v_index / 2 ; i = 0 ; return ( ( double ) * ( v + new_index ) ) ; } } void megaInit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { } } } void main ( void ) { { megaInit ( ) ; } }
>>>Func
METHOD three_digits
METHOD_RETURN int
PARAM int n
<operator>.assignment d = 0
<operator>.assignment p = 1
<operator>.assignment i = 0
RETURN return (d); return (d);
<operator>.lessThan i < 3
IDENTIFIER d return (d);
<operator>.assignment r = n % 10
<operator>.assignmentPlus d += r * p
<operator>.assignmentMultiplication p *= 10
<operator>.assignmentDivision n /= 10
<operator>.postIncrement i ++
<operator>.modulo n % 10
<operator>.multiplication r * p
>>>PDG&16 0->2 0->3 0->4 0->5 0->7 0->8 0->10 0->11 0->12 0->13 0->14 0->15 2->1 2->14 3->1 3->1 3->8 3->10 4->1 4->1 4->15 5->1 5->7 6->1 7->1 7->1 7->7 7->9 7->10 7->11 7->12 7->13 7->13 7->14 7->15 8->6 9->1 9->1 9->15 10->1 10->1 10->1 10->8 11->1 11->1 11->15 12->1 12->1 12->14 13->1 13->7 14->9 14->9 14->12 15->1 15->10 15->10 15->11
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; int three_digits ( int n ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; void main ( void ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int printf ( char const * format , ... ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; int three_digits ( int n ) { int r ; int d ; int p ; int i ; { d = 0 ; p = 1 ; i = 0 ; while ( i < 3 ) { r = n % 10 ; d += r * p ; p *= 10 ; n /= 10 ; i ++ ; } return ( d ) ; } } void megaInit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { } } } void main ( void ) { { megaInit ( ) ; } }
>>>Func
METHOD _1_stringEncoder
METHOD_RETURN void
PARAM int n
PARAM char str[]
BLOCK <empty> <empty>
<operator>.assignment encodeStrings_i3 = 0
IDENTIFIER n switch(n)
LITERAL 2 <empty>
<operator>.assignment str[encodeStrings_i3] = '\n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'T'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'h'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'o'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'c'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'l'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'o'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'f'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'i'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ':'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 1 <empty>
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 0 <empty>
<operator>.assignment str[encodeStrings_i3] = '\n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'E'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'y'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'o'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'u'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'c'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'i'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'm'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'l'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'u'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'm'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'b'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ':'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
>>>PDG&126 0->2 0->3 0->4 0->5 0->6 0->7 0->8 0->9 0->10 0->11 0->12 0->13 0->14 0->15 0->16 0->17 0->18 0->19 0->20 0->21 0->22 0->23 0->24 0->25 0->26 0->27 0->28 0->29 0->30 0->31 0->32 0->33 0->34 0->35 0->36 0->37 0->38 0->39 0->40 0->41 0->42 0->43 0->44 0->45 0->46 0->47 0->48 0->49 0->50 0->51 0->52 0->53 0->54 0->55 0->56 0->57 0->58 0->59 0->60 0->61 0->62 0->63 0->64 0->65 0->66 0->67 0->68 0->69 0->70 0->71 0->72 0->73 0->74 0->75 0->76 0->77 0->78 0->79 0->80 0->81 0->82 0->83 0->84 0->85 0->86 0->87 0->88 0->89 0->90 0->91 0->92 0->93 0->94 0->95 0->96 0->97 0->98 0->99 0->100 0->101 0->102 0->103 0->104 0->105 0->106 0->107 0->108 0->109 0->110 0->111 0->112 0->113 0->114 0->115 0->116 0->117 0->118 0->119 0->120 0->121 0->122 0->123 0->124 0->125 2->1 3->1 5->1 5->1 5->9 5->60 5->67 8->1 9->11 10->1 11->13 12->1 13->15 14->1 15->17 17->19 19->21 20->1 21->23 22->1 23->25 24->1 25->27 26->1 27->29 29->31 30->1 31->33 32->1 33->35 35->37 37->39 39->41 41->43 42->1 43->45 44->1 45->47 47->49 48->1 49->51 50->1 51->53 52->1 53->55 54->1 55->57 56->1 56->1 57->1 57->1 59->1 60->62 61->1 62->64 63->1 63->1 64->1 64->1 66->1 67->69 68->1 69->71 71->73 72->1 73->75 75->77 77->79 79->81 80->1 81->83 82->1 83->85 85->87 87->89 89->91 90->1 91->93 93->95 94->1 95->97 96->1 97->99 99->101 100->1 101->103 102->1 103->105 105->107 106->1 107->109 108->1 109->111 110->1 111->113 112->1 113->115 114->1 115->117 116->1 117->119 119->121 120->1 121->123 122->1 123->125 124->1 124->1 125->1 125->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; char * * _global_argv = ( char * * ) 0 ; extern int fcntl ( int filedes , int cmd , ... ) ; void encodeStrings_litStr2_i $ nit ( void ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; int main ( int _formal_argc , char * * _formal_argv , char * * _formal_envp ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; void encodeStrings_litStr0_i $ nit ( void ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; int _global_argc = 0 ; void megaInit ( void ) ; char * * _global_envp = ( char * * ) 0 ; extern int ( /* missing proto */ printf ) ( ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int ( /* missing proto */ scanf ) ( ) ; extern void perror ( char const * str ) ; extern long clock ( void ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern double strtod ( char const * str , char const * endptr ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; void encodeStrings_litStr1_i $ nit ( void ) ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; char encodeStrings_litStr2 [ 25 ] ; extern double log ( double x ) ; extern int ( /* missing proto */ decimal_to_octal ) ( ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; char encodeStrings_litStr1 [ 3 ] ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; char encodeStrings_litStr0 [ 30 ] ; void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { case 2 : str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 1 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 0 : str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; } } } void megaInit ( void ) { { encodeStrings_litStr2_i $ nit ( ) ; encodeStrings_litStr1_i $ nit ( ) ; encodeStrings_litStr0_i $ nit ( ) ; } } void encodeStrings_litStr1_i $ nit ( void ) { { } } int main ( int _formal_argc , char * * _formal_argv , char * * _formal_envp ) { int octalNumber ; int decimalNumber ; int _BARRIER_0 ; { megaInit ( ) ; _global_argc = _formal_argc ; _global_argv = _formal_argv ; _global_envp = _formal_envp ; _BARRIER_0 = 1 ; _1_stringEncoder ( 0 , encodeStrings_litStr0 ) ; printf ( encodeStrings_litStr0 ) ; _1_stringEncoder ( 1 , encodeStrings_litStr1 ) ; scanf ( encodeStrings_litStr1 , & decimalNumber ) ; octalNumber = decimal_to_octal ( decimalNumber ) ; _1_stringEncoder ( 2 , encodeStrings_litStr2 ) ; printf ( encodeStrings_litStr2 , decimalNumber , octalNumber ) ; return ( 0 ) ; } } void encodeStrings_litStr2_i $ nit ( void ) { { } } void encodeStrings_litStr0_i $ nit ( void ) { { } }
>>>Func
METHOD twoSum
METHOD_RETURN int*
PARAM int *nums
PARAM int numsSize
PARAM int target
PARAM int *returnSize
<operator>.assignment tmp = calloc(2  sizeof(int ))
<operator>.assignment ret = (int *)tmp
<operator>.assignment i = 0
<operator>.assignment *returnSize = 2
RETURN return (ret); return (ret);
<operator>.lessThan i < numsSize
IDENTIFIER ret return (ret);
calloc calloc(2  sizeof(int ))
<operator>.cast (int *)tmp
<operator>.assignment key = target - *(nums + i)
<operator>.assignment j = i + 1
<operator>.postIncrement i ++
<operator>.sizeOf sizeof(int )
<operator>.lessThan j < numsSize
<operator>.subtraction target - *(nums + i)
<operator>.addition i + 1
<operator>.postIncrement j ++
<operator>.equals *(nums + j) == key
<operator>.addition nums + i
<operator>.assignment *(ret + 0) = i
<operator>.assignment *(ret + 1) = j
<operator>.addition nums + j
<operator>.addition ret + 0
<operator>.addition ret + 1
<operator>.indirection *(nums + i)
<operator>.indirection *(nums + j)
<operator>.indirection *(ret + 0)
<operator>.indirection *(ret + 1)
>>>PDG&34 0->2 0->3 0->4 0->5 0->6 0->7 0->8 0->9 0->11 0->12 0->13 0->14 0->16 0->17 0->19 0->20 0->21 0->22 0->23 0->24 0->25 0->26 0->27 0->28 0->29 2->1 2->24 3->11 4->1 4->20 5->1 6->1 6->1 6->7 6->14 7->1 7->1 7->1 7->12 7->28 7->29 8->1 8->11 9->1 9->1 10->1 11->1 11->1 11->1 11->11 11->15 11->16 11->16 11->17 11->17 11->19 11->19 11->20 11->21 11->21 11->24 11->24 11->25 11->30 12->10 14->1 15->1 15->1 15->1 15->23 16->1 16->1 16->19 17->1 17->11 18->1 19->1 19->1 19->11 19->19 19->22 19->22 19->23 19->26 19->27 19->27 19->31 20->1 20->1 20->15 20->15 22->1 22->19 23->1 23->1 23->1 23->25 23->26 23->28 23->29 23->32 23->33 24->1 25->1 25->1 26->1 26->1 27->1 29->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int ( /* missing proto */ calloc ) ( ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; void main ( void ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int printf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern int scanf ( char const * format , ... ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern float strtof ( char const * str , char const * endptr ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; int * twoSum ( int * nums , int numsSize , int target , int * returnSize ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; void megaInit ( void ) { { } } int * twoSum ( int * nums , int numsSize , int target , int * returnSize ) { int i ; int j ; int * ret ; int tmp ; int key ; { tmp = calloc ( 2 , sizeof ( int ) ) ; ret = ( int * ) tmp ; i = 0 ; while ( i < numsSize ) { key = target - * ( nums + i ) ; j = i + 1 ; while ( j < numsSize ) { if ( * ( nums + j ) == key ) { * ( ret + 0 ) = i ; * ( ret + 1 ) = j ; } j ++ ; } i ++ ; } * returnSize = 2 ; return ( ret ) ; } } void main ( void ) { { megaInit ( ) ; } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { } } }
>>>Func
METHOD decimal2Octal
METHOD_RETURN void
PARAM long decimalnum
<operator>.assignment i = 1
<operator>.assignment quotient = decimalnum
<operator>.assignment j = i - 1
_1_stringEncoder _1_stringEncoder(1, encodeStrings_litStr1)
printf printf(encodeStrings_litStr1)
RETURN return; return;
<operator>.notEquals quotient != 0L
<operator>.greaterThan j > 0
<operator>.assignment tmp = i
<operator>.postIncrement i ++
<operator>.assignment octalNumber[tmp] = (int )(quotient % 8L)
<operator>.assignmentDivision quotient /= 8L
<operator>.subtraction i - 1
_1_stringEncoder _1_stringEncoder(0, encodeStrings_litStr0)
printf printf(encodeStrings_litStr0, octalNumber[j])
<operator>.postDecrement j --
<operator>.cast (int )(quotient % 8L)
<operator>.modulo quotient % 8L
<operator>.indirectIndexAccess octalNumber[tmp]
<operator>.indirectIndexAccess octalNumber[j]
UNKNOWN int int
>>>PDG&24 0->2 0->3 0->4 0->6 0->7 0->8 0->9 0->10 0->11 0->12 0->14 0->15 0->16 0->17 0->18 0->20 2->4 3->1 3->11 3->12 3->15 4->1 4->1 4->9 5->1 5->1 5->10 6->1 6->7 7->1 7->1 8->1 9->1 9->1 9->9 9->11 9->12 9->13 9->14 9->19 9->20 9->20 9->21 9->23 10->1 10->1 10->10 10->16 10->17 10->18 10->18 10->22 11->1 11->1 12->1 12->11 12->15 13->1 13->1 13->1 14->1 14->9 15->1 15->5 15->5 16->1 16->17 17->1 17->1 17->1 17->16 18->1 18->10 19->1 20->13 20->13 20->14 20->19 20->19
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int unlink ( char const * filename ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; void main ( void ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void encodeStrings_litStr0_i $ nit ( void ) ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int ( /* missing proto */ printf ) ( ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; void encodeStrings_litStr1_i $ nit ( void ) ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; void decimal2Octal ( long decimalnum ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern double sqrt ( double x ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; char encodeStrings_litStr1 [ 2 ] ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; char encodeStrings_litStr0 [ 3 ] ; void encodeStrings_litStr0_i $ nit ( void ) { { } } void main ( void ) { { megaInit ( ) ; } } void megaInit ( void ) { { encodeStrings_litStr1_i $ nit ( ) ; encodeStrings_litStr0_i $ nit ( ) ; } } void encodeStrings_litStr1_i $ nit ( void ) { { } } void decimal2Octal ( long decimalnum ) { long quotient ; int octalNumber [ 100 ] ; int i ; int j ; int tmp ; { i = 1 ; quotient = decimalnum ; while ( quotient != 0L ) { tmp = i ; i ++ ; octalNumber [ tmp ] = ( int ) ( quotient % 8L ) ; quotient /= 8L ; } j = i - 1 ; while ( j > 0 ) { _1_stringEncoder ( 0 , encodeStrings_litStr0 ) ; printf ( encodeStrings_litStr0 , octalNumber [ j ] ) ; j -- ; } _1_stringEncoder ( 1 , encodeStrings_litStr1 ) ; printf ( encodeStrings_litStr1 ) ; return ; } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { case 1 : str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 0 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; } } }
>>>Func
METHOD _1_stringEncoder
METHOD_RETURN void
PARAM int n
PARAM char str[]
BLOCK <empty> <empty>
<operator>.assignment encodeStrings_i3 = 0
IDENTIFIER n switch(n)
LITERAL 11 <empty>
<operator>.assignment str[encodeStrings_i3] = '\n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 10 <empty>
<operator>.assignment str[encodeStrings_i3] = 'D'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'F'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'S'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'f'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'o'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'm'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'i'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ':'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 9 <empty>
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 8 <empty>
<operator>.assignment str[encodeStrings_i3] = 'E'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'o'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'u'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'c'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'o'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'f'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'D'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'F'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'S'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 7 <empty>
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 6 <empty>
<operator>.assignment str[encodeStrings_i3] = 'E'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'i'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'i'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'o'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ':'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 5 <empty>
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 4 <empty>
<operator>.assignment str[encodeStrings_i3] = 'E'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'g'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'E'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'o'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'u'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'c'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ':'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 3 <empty>
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 2 <empty>
<operator>.assignment str[encodeStrings_i3] = 'E'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'h'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'u'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'm'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'b'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'o'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'f'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'g'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 1 <empty>
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 0 <empty>
<operator>.assignment str[encodeStrings_i3] = 'E'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'h'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'u'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'm'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'b'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'o'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'f'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'v'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'i'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'c'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
>>>PDG&331 0->2 0->3 0->4 0->5 0->6 0->7 0->8 0->9 0->10 0->11 0->12 0->13 0->14 0->15 0->16 0->17 0->18 0->19 0->20 0->21 0->22 0->23 0->24 0->25 0->26 0->27 0->28 0->29 0->30 0->31 0->32 0->33 0->34 0->35 0->36 0->37 0->38 0->39 0->40 0->41 0->42 0->43 0->44 0->45 0->46 0->47 0->48 0->49 0->50 0->51 0->52 0->53 0->54 0->55 0->56 0->57 0->58 0->59 0->60 0->61 0->62 0->63 0->64 0->65 0->66 0->67 0->68 0->69 0->70 0->71 0->72 0->73 0->74 0->75 0->76 0->77 0->78 0->79 0->80 0->81 0->82 0->83 0->84 0->85 0->86 0->87 0->88 0->89 0->90 0->91 0->92 0->93 0->94 0->95 0->96 0->97 0->98 0->99 0->100 0->101 0->102 0->103 0->104 0->105 0->106 0->107 0->108 0->109 0->110 0->111 0->112 0->113 0->114 0->115 0->116 0->117 0->118 0->119 0->120 0->121 0->122 0->123 0->124 0->125 0->126 0->127 0->128 0->129 0->130 0->131 0->132 0->133 0->134 0->135 0->136 0->137 0->138 0->139 0->140 0->141 0->142 0->143 0->144 0->145 0->146 0->147 0->148 0->149 0->150 0->151 0->152 0->153 0->154 0->155 0->156 0->157 0->158 0->159 0->160 0->161 0->162 0->163 0->164 0->165 0->166 0->167 0->168 0->169 0->170 0->171 0->172 0->173 0->174 0->175 0->176 0->177 0->178 0->179 0->180 0->181 0->182 0->183 0->184 0->185 0->186 0->187 0->188 0->189 0->190 0->191 0->192 0->193 0->194 0->195 0->196 0->197 0->198 0->199 0->200 0->201 0->202 0->203 0->204 0->205 0->206 0->207 0->208 0->209 0->210 0->211 0->212 0->213 0->214 0->215 0->216 0->217 0->218 0->219 0->220 0->221 0->222 0->223 0->224 0->225 0->226 0->227 0->228 0->229 0->230 0->231 0->232 0->233 0->234 0->235 0->236 0->237 0->238 0->239 0->240 0->241 0->242 0->243 0->244 0->245 0->246 0->247 0->248 0->249 0->250 0->251 0->252 0->253 0->254 0->255 0->256 0->257 0->258 0->259 0->260 0->261 0->262 0->263 0->264 0->265 0->266 0->267 0->268 0->269 0->270 0->271 0->272 0->273 0->274 0->275 0->276 0->277 0->278 0->279 0->280 0->281 0->282 0->283 0->284 0->285 0->286 0->287 0->288 0->289 0->290 0->291 0->292 0->293 0->294 0->295 0->296 0->297 0->298 0->299 0->300 0->301 0->302 0->303 0->304 0->305 0->306 0->307 0->308 0->309 0->310 0->311 0->312 0->313 0->314 0->315 0->316 0->317 0->318 0->319 0->320 0->321 0->322 0->323 0->324 0->325 0->326 0->327 0->328 0->329 0->330 2->1 3->1 5->1 5->1 5->9 5->14 5->49 5->56 5->99 5->106 5->147 5->154 5->203 5->210 5->265 5->272 8->1 9->11 10->1 10->1 11->1 11->1 13->1 14->16 15->1 16->18 17->1 18->20 20->22 21->1 22->24 23->1 24->26 25->1 26->28 27->1 28->30 30->32 31->1 32->34 33->1 34->36 35->1 36->38 37->1 38->40 39->1 40->42 41->1 42->44 43->1 44->46 45->1 45->1 46->1 46->1 48->1 49->51 50->1 51->53 52->1 52->1 53->1 53->1 55->1 56->58 57->1 58->60 59->1 60->62 62->64 64->66 66->68 67->1 68->70 70->72 71->1 72->74 73->1 74->76 75->1 76->78 77->1 78->80 80->82 81->1 82->84 83->1 84->86 85->1 86->88 87->1 88->90 89->1 90->92 91->1 92->94 93->1 94->96 95->1 95->1 96->1 96->1 98->1 99->101 100->1 101->103 102->1 102->1 103->1 103->1 105->1 106->108 108->110 110->112 112->114 113->1 114->116 116->118 117->1 118->120 119->1 120->122 121->1 122->124 124->126 126->128 128->130 129->1 130->132 131->1 132->134 133->1 134->136 135->1 136->138 137->1 138->140 139->1 140->142 141->1 142->144 143->1 143->1 144->1 144->1 146->1 147->149 148->1 149->151 150->1 150->1 151->1 151->1 154->156 156->158 157->1 158->160 160->162 162->164 163->1 164->166 165->1 166->168 168->170 169->1 170->172 171->1 172->174 173->1 174->176 175->1 176->178 178->180 180->182 182->184 183->1 184->186 185->1 186->188 187->1 188->190 189->1 190->192 191->1 192->194 193->1 194->196 195->1 196->198 197->1 198->200 199->1 199->1 200->1 200->1 202->1 203->205 204->1 205->207 206->1 206->1 207->1 207->1 209->1 210->212 212->214 214->216 216->218 218->220 220->222 221->1 222->224 223->1 224->226 226->228 228->230 229->1 230->232 231->1 232->234 233->1 234->236 235->1 236->238 238->240 239->1 240->242 242->244 243->1 244->246 245->1 246->248 247->1 248->250 250->252 251->1 252->254 253->1 254->256 255->1 256->258 257->1 258->260 259->1 260->262 261->1 261->1 262->1 262->1 264->1 265->267 266->1 267->269 268->1 268->1 269->1 269->1 271->1 272->274 274->276 276->278 278->280 280->282 282->284 284->286 285->1 286->288 288->290 290->292 291->1 292->294 293->1 294->296 295->1 296->298 297->1 298->300 300->302 302->304 304->306 305->1 306->308 307->1 308->310 309->1 310->312 311->1 312->314 314->316 315->1 316->318 317->1 318->320 319->1 320->322 321->1 322->324 323->1 324->326 325->1 326->328 327->1 328->330 329->1 329->1 330->1 330->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct Graph ; struct _IO_FILE ; struct timeval ; extern void exit ( int status ) ; extern int pthread_cond_signal ( int * cond ) ; extern int fclose ( void * stream ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; char * * _global_argv = ( char * * ) 0 ; extern int fcntl ( int filedes , int cmd , ... ) ; void encodeStrings_litStr2_i $ nit ( void ) ; extern int unlink ( char const * filename ) ; extern int ( /* missing proto */ addEdge ) ( ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; char encodeStrings_litStr11 [ 2 ] ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int pthread_mutex_lock ( int * mutex ) ; void encodeStrings_litStr5_i $ nit ( void ) ; char encodeStrings_litStr10 [ 17 ] ; void _1_stringEncoder ( int n , char str [ ] ) ; extern int raise ( int sig ) ; extern void abort ( ) ; void encodeStrings_litStr8_i $ nit ( void ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern int ( /* missing proto */ dfs ) ( ) ; extern unsigned long strlen ( char const * s ) ; int main ( int _formal_argc , char * * _formal_argv , char * * _formal_envp ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; void encodeStrings_litStr0_i $ nit ( void ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; int _global_argc = 0 ; char * * _global_envp = ( char * * ) 0 ; void megaInit ( void ) ; void encodeStrings_litStr3_i $ nit ( void ) ; extern int ( /* missing proto */ printf ) ( ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int ( /* missing proto */ scanf ) ( ) ; extern void perror ( char const * str ) ; extern long clock ( void ) ; void encodeStrings_litStr6_i $ nit ( void ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; void encodeStrings_litStr10_i $ nit ( void ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; void encodeStrings_litStr9_i $ nit ( void ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern double strtod ( char const * str , char const * endptr ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int ( /* missing proto */ createGraph ) ( ) ; void encodeStrings_litStr1_i $ nit ( void ) ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; char encodeStrings_litStr9 [ 3 ] ; void encodeStrings_litStr4_i $ nit ( void ) ; char encodeStrings_litStr8 [ 21 ] ; char encodeStrings_litStr7 [ 3 ] ; char encodeStrings_litStr6 [ 20 ] ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; void encodeStrings_litStr7_i $ nit ( void ) ; char encodeStrings_litStr5 [ 3 ] ; void encodeStrings_litStr11_i $ nit ( void ) ; extern int open ( char const * filename , int oflag , ... ) ; char encodeStrings_litStr4 [ 24 ] ; extern double sqrt ( double x ) ; char encodeStrings_litStr3 [ 3 ] ; char encodeStrings_litStr2 [ 27 ] ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; char encodeStrings_litStr1 [ 3 ] ; char encodeStrings_litStr0 [ 30 ] ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; void encodeStrings_litStr7_i $ nit ( void ) { { } } void encodeStrings_litStr4_i $ nit ( void ) { { } } void encodeStrings_litStr6_i $ nit ( void ) { { } } void encodeStrings_litStr1_i $ nit ( void ) { { } } void encodeStrings_litStr8_i $ nit ( void ) { { } } void encodeStrings_litStr5_i $ nit ( void ) { { } } void encodeStrings_litStr9_i $ nit ( void ) { { } } void encodeStrings_litStr11_i $ nit ( void ) { { } } void encodeStrings_litStr0_i $ nit ( void ) { { } } void megaInit ( void ) { { encodeStrings_litStr11_i $ nit ( ) ; encodeStrings_litStr10_i $ nit ( ) ; encodeStrings_litStr9_i $ nit ( ) ; encodeStrings_litStr8_i $ nit ( ) ; encodeStrings_litStr7_i $ nit ( ) ; encodeStrings_litStr6_i $ nit ( ) ; encodeStrings_litStr5_i $ nit ( ) ; encodeStrings_litStr4_i $ nit ( ) ; encodeStrings_litStr3_i $ nit ( ) ; encodeStrings_litStr2_i $ nit ( ) ; encodeStrings_litStr1_i $ nit ( ) ; encodeStrings_litStr0_i $ nit ( ) ; } } int main ( int _formal_argc , char * * _formal_argv , char * * _formal_envp ) { int vertices ; int edges ; int source ; int i ; int src ; int dst ; struct Graph * graph ; int tmp ; int _BARRIER_0 ; { megaInit ( ) ; _global_argc = _formal_argc ; _global_argv = _formal_argv ; _global_envp = _formal_envp ; _BARRIER_0 = 1 ; _1_stringEncoder ( 0 , encodeStrings_litStr0 ) ; printf ( encodeStrings_litStr0 ) ; _1_stringEncoder ( 1 , encodeStrings_litStr1 ) ; scanf ( encodeStrings_litStr1 , & vertices ) ; tmp = createGraph ( vertices ) ; graph = ( struct Graph * ) tmp ; _1_stringEncoder ( 2 , encodeStrings_litStr2 ) ; printf ( encodeStrings_litStr2 ) ; _1_stringEncoder ( 3 , encodeStrings_litStr3 ) ; scanf ( encodeStrings_litStr3 , & edges ) ; i = 0 ; while ( i < edges ) { _1_stringEncoder ( 4 , encodeStrings_litStr4 ) ; printf ( encodeStrings_litStr4 , i + 1 ) ; _1_stringEncoder ( 5 , encodeStrings_litStr5 ) ; scanf ( encodeStrings_litStr5 , & src ) ; _1_stringEncoder ( 6 , encodeStrings_litStr6 ) ; printf ( encodeStrings_litStr6 ) ; _1_stringEncoder ( 7 , encodeStrings_litStr7 ) ; scanf ( encodeStrings_litStr7 , & dst ) ; addEdge ( graph , src , dst ) ; i ++ ; } _1_stringEncoder ( 8 , encodeStrings_litStr8 ) ; printf ( encodeStrings_litStr8 ) ; _1_stringEncoder ( 9 , encodeStrings_litStr9 ) ; scanf ( encodeStrings_litStr9 , & source ) ; _1_stringEncoder ( 10 , encodeStrings_litStr10 ) ; printf ( encodeStrings_litStr10 , source ) ; dfs ( graph , source ) ; _1_stringEncoder ( 11 , encodeStrings_litStr11 ) ; printf ( encodeStrings_litStr11 ) ; return ( 0 ) ; } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { case 11 : str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 10 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 9 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 8 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 7 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 6 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 5 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 4 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 3 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 2 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 1 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 0 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; } } } void encodeStrings_litStr3_i $ nit ( void ) { { } } void encodeStrings_litStr2_i $ nit ( void ) { { } } void encodeStrings_litStr10_i $ nit ( void ) { { } }
>>>Func
METHOD Cmpdep
METHOD_RETURN int
PARAM void const   *a
PARAM void const   *b
RETURN return (*((int *)b) - *((int *)a)); return (*((int *)b) - *((int *)a));
<operator>.subtraction *((int *)b) - *((int *)a)
<operator>.cast (int *)b
<operator>.cast (int *)a
>>>PDG&8 0->2 0->3 0->6 0->7 2->7 3->6 4->1 5->1 5->1 5->1 5->4 6->1 7->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; void main ( void ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int printf ( char const * format , ... ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; int Cmpdep ( void const * a , void const * b ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; int Cmpdep ( void const * a , void const * b ) { { return ( * ( ( int * ) b ) - * ( ( int * ) a ) ) ; } } void megaInit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { } } } void main ( void ) { { megaInit ( ) ; } }
>>>Func
METHOD decimal_to_octal
METHOD_RETURN int
PARAM int decimal
<operator>.lessThan decimal < 8
<operator>.greaterThan decimal > 0
RETURN return (decimal); return (decimal);
<operator>.equals decimal == 0
IDENTIFIER decimal return (decimal);
RETURN return (0); return (0);
LITERAL 0 return (0);
<operator>.assignment tmp = decimal_to_octal(decimal / 8)
RETURN return (tmp * 10 + decimal % 8); return (tmp * 10 + decimal % 8);
<operator>.addition tmp * 10 + decimal % 8
decimal_to_octal decimal_to_octal(decimal / 8)
<operator>.division decimal / 8
<operator>.multiplication tmp * 10
<operator>.modulo decimal % 8
>>>PDG&17 0->2 0->3 0->4 0->6 0->7 0->8 0->9 0->14 0->15 0->16 2->3 3->1 3->4 3->4 3->6 3->6 4->1 4->1 4->5 4->6 4->6 4->7 5->1 6->8 6->10 6->11 6->12 6->13 6->14 6->14 6->15 6->16 7->5 8->1 9->8 10->15 11->1 12->11 13->10 14->13 14->13 14->16 15->12 15->12 16->12 16->12
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; void main ( void ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int printf ( char const * format , ... ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; int decimal_to_octal ( int decimal ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; int decimal_to_octal ( int decimal ) { int tmp ; { if ( decimal < 8 ) { if ( decimal > 0 ) { return ( decimal ) ; } else { goto _L ; } } else _L : /* CIL Label */ if ( decimal == 0 ) { return ( 0 ) ; } else { tmp = decimal_to_octal ( decimal / 8 ) ; return ( tmp * 10 + decimal % 8 ) ; } } } void megaInit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { } } } void main ( void ) { { megaInit ( ) ; } }
>>>Func
METHOD main
METHOD_RETURN int
PARAM int _formal_argc
PARAM char **_formal_argv
PARAM char **_formal_envp
megaInit megaInit()
<operator>.assignment _global_argc = _formal_argc
<operator>.assignment _global_argv = _formal_argv
<operator>.assignment _global_envp = _formal_envp
<operator>.assignment _BARRIER_0 = 1
_1_stringEncoder _1_stringEncoder(0, encodeStrings_litStr0)
scanf scanf(encodeStrings_litStr0, & lines)
<operator>.assignment i = 1
RETURN return (0); return (0);
<operator>.greaterThan lines > 0
LITERAL 0 return (0);
<operator>.assignment c = 0
_1_stringEncoder _1_stringEncoder(1, encodeStrings_litStr1)
scanf scanf(encodeStrings_litStr1, & s)
<operator>.assignment j = 0
_1_stringEncoder _1_stringEncoder(2, encodeStrings_litStr2)
scanf scanf(encodeStrings_litStr2, & q)
_1_stringEncoder _1_stringEncoder(3, encodeStrings_litStr3)
printf printf(encodeStrings_litStr3, i, c)
<operator>.postDecrement lines --
<operator>.postIncrement i ++
<operator>.lessThan j < s
<operator>.greaterEqualsThan q >= s
gets gets(sin[j])
<operator>.postIncrement j ++
<operator>.assignment j = 0
<operator>.assignment j = 0
<operator>.lessThan j < s
<operator>.lessThan j < q
<operator>.assignment used[j] = 0
<operator>.postIncrement j ++
gets gets(qin[j])
<operator>.assignment k = 0
<operator>.assignment clear = 1
<operator>.assignment k = 0
<operator>.postIncrement j ++
<operator>.lessThan k < s
<operator>.lessThan k < s
<operator>.equals clear == 1
<operator>.assignment tmp = strcmp(qin[j], sin[k])
<operator>.postIncrement k ++
<operator>.postIncrement k ++
<operator>.postIncrement c ++
<operator>.assignment k = 0
<operator>.assignment used[cleared] = 1
<operator>.equals tmp == 0
<operator>.equals used[k] == 0
<operator>.lessThan k < s
strcmp strcmp(qin[j], sin[k])
<operator>.assignment used[k] = 1
<operator>.assignment cleared = k
<operator>.assignment clear = 0
<operator>.assignment used[k] = 0
<operator>.postIncrement k ++
<operator>.addressOf & s
<operator>.addressOf & q
<operator>.indirectIndexAccess sin[j]
<operator>.indirectIndexAccess used[j]
<operator>.indirectIndexAccess qin[j]
<operator>.indirectIndexAccess used[cleared]
<operator>.indirectIndexAccess qin[j]
<operator>.indirectIndexAccess sin[k]
<operator>.indirectIndexAccess used[k]
<operator>.indirectIndexAccess used[k]
<operator>.indirectIndexAccess used[k]
>>>PDG&70 0->2 0->3 0->4 0->5 0->6 0->7 0->8 0->9 0->10 0->11 0->12 0->13 0->14 0->15 0->16 0->17 0->18 0->19 0->20 0->21 0->22 0->23 0->24 0->25 0->26 0->27 0->29 0->30 0->31 0->32 0->33 0->34 0->35 0->37 0->38 0->39 0->40 0->41 0->42 0->43 0->45 0->46 0->47 0->48 0->49 0->50 0->51 0->52 0->54 0->55 0->56 0->57 0->58 2->6 3->7 4->8 5->1 6->1 6->1 6->1 7->1 7->1 7->1 8->1 8->1 8->1 9->1 9->1 10->1 11->1 11->1 11->14 11->24 12->1 12->1 12->23 13->1 14->1 14->1 14->14 14->16 14->17 14->18 14->19 14->20 14->21 14->22 14->23 14->24 14->24 14->25 14->26 14->27 14->59 14->60 15->13 16->1 16->23 16->47 17->1 18->1 18->1 18->26 18->27 18->32 18->41 18->42 18->52 19->1 19->26 20->1 21->1 21->1 21->27 21->33 22->1 22->23 23->1 23->1 23->1 23->22 23->25 24->1 24->14 25->1 25->1 25->23 26->1 26->1 26->26 26->27 26->28 26->29 26->29 26->61 27->1 27->1 27->1 27->18 27->21 27->26 27->30 27->31 27->32 27->32 27->33 27->33 28->1 28->1 29->1 29->26 30->32 31->1 31->33 32->1 32->1 32->18 32->26 32->32 32->34 32->35 32->35 32->41 32->62 33->1 33->1 33->1 33->21 33->27 33->33 33->36 33->37 33->38 33->39 33->40 33->40 33->41 33->42 33->43 33->63 34->1 34->1 35->1 35->32 36->1 36->1 36->53 37->41 38->1 38->43 39->1 39->42 40->1 40->33 41->42 41->44 41->45 41->50 41->53 41->55 41->65 41->66 42->1 42->1 42->1 42->18 42->26 42->41 42->46 42->51 42->52 42->67 43->1 43->1 43->47 43->48 43->49 43->52 43->64 44->1 44->1 44->50 45->1 45->41 46->1 46->42 47->1 47->23 48->1 48->52 49->1 49->1 50->1 50->1 50->41 50->45 50->54 50->55 50->68 51->1 51->1 51->42 51->46 51->56 52->1 52->1 52->1 52->18 52->26 52->41 52->52 52->57 52->58 52->58 52->69 53->1 53->1 53->36 53->44 53->44 54->1 54->1 54->51 55->1 55->1 56->1 56->43 57->1 57->1 57->51 58->1 58->52
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern void exit ( int status ) ; extern int pthread_cond_signal ( int * cond ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; char * * _global_argv = ( char * * ) 0 ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; void encodeStrings_litStr2_i $ nit ( void ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern int raise ( int sig ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; int main ( int _formal_argc , char * * _formal_argv , char * * _formal_envp ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; void encodeStrings_litStr0_i $ nit ( void ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; int _global_argc = 0 ; void megaInit ( void ) ; char * * _global_envp = ( char * * ) 0 ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; void encodeStrings_litStr3_i $ nit ( void ) ; extern int ( /* missing proto */ printf ) ( ) ; extern int ( /* missing proto */ gets ) ( ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern int ( /* missing proto */ scanf ) ( ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern int ( /* missing proto */ strcmp ) ( ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; void encodeStrings_litStr1_i $ nit ( void ) ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; char encodeStrings_litStr3 [ 14 ] ; char encodeStrings_litStr2 [ 4 ] ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; char encodeStrings_litStr1 [ 4 ] ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; char encodeStrings_litStr0 [ 3 ] ; void encodeStrings_litStr2_i $ nit ( void ) { { } } int main ( int _formal_argc , char * * _formal_argv , char * * _formal_envp ) { int lines ; int i ; int j ; int k ; int c ; int s ; int q ; int clear ; int cleared ; char sin [ 101 ] [ 101 ] ; char qin [ 101 ] [ 101 ] ; int used [ 101 ] ; int tmp ; int _BARRIER_0 ; { megaInit ( ) ; _global_argc = _formal_argc ; _global_argv = _formal_argv ; _global_envp = _formal_envp ; _BARRIER_0 = 1 ; _1_stringEncoder ( 0 , encodeStrings_litStr0 ) ; scanf ( encodeStrings_litStr0 , & lines ) ; i = 1 ; while ( lines > 0 ) { c = 0 ; _1_stringEncoder ( 1 , encodeStrings_litStr1 ) ; scanf ( encodeStrings_litStr1 , & s ) ; j = 0 ; while ( j < s ) { gets ( sin [ j ] ) ; j ++ ; } _1_stringEncoder ( 2 , encodeStrings_litStr2 ) ; scanf ( encodeStrings_litStr2 , & q ) ; if ( q >= s ) { j = 0 ; while ( j < s ) { used [ j ] = 0 ; j ++ ; } j = 0 ; while ( j < q ) { gets ( qin [ j ] ) ; k = 0 ; while ( k < s ) { tmp = strcmp ( qin [ j ] , sin [ k ] ) ; if ( tmp == 0 ) { used [ k ] = 1 ; cleared = k ; break ; } k ++ ; } clear = 1 ; k = 0 ; while ( k < s ) { if ( used [ k ] == 0 ) { clear = 0 ; break ; } k ++ ; } if ( clear == 1 ) { c ++ ; k = 0 ; while ( k < s ) { used [ k ] = 0 ; k ++ ; } used [ cleared ] = 1 ; } j ++ ; } } _1_stringEncoder ( 3 , encodeStrings_litStr3 ) ; printf ( encodeStrings_litStr3 , i , c ) ; lines -- ; i ++ ; } return ( 0 ) ; } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { case 3 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 2 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 1 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 0 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; } } } void encodeStrings_litStr0_i $ nit ( void ) { { } } void encodeStrings_litStr3_i $ nit ( void ) { { } } void encodeStrings_litStr1_i $ nit ( void ) { { } } void megaInit ( void ) { { encodeStrings_litStr3_i $ nit ( ) ; encodeStrings_litStr2_i $ nit ( ) ; encodeStrings_litStr1_i $ nit ( ) ; encodeStrings_litStr0_i $ nit ( ) ; } }
>>>Func
METHOD binaryAddition
METHOD_RETURN int
PARAM int binary1
PARAM int binary2
<operator>.assignment i = 0
<operator>.assignment remainder = 0
<operator>.assignment binarySum = 0
<operator>.postDecrement i --
RETURN return (binarySum); return (binarySum);
LITERAL 1 while (1)
<operator>.notEquals remainder != 0
<operator>.greaterEqualsThan i >= 0
IDENTIFIER binarySum return (binarySum);
<operator>.assignment tmp = i
<operator>.postIncrement i ++
<operator>.assignment sum[tmp] = ((binary1 % 10 + binary2 % 10) + remainder) % 2
<operator>.assignment remainder = ((binary1 % 10 + binary2 % 10) + remainder) / 2
<operator>.assignmentDivision binary1 /= 10
<operator>.assignmentDivision binary2 /= 10
<operator>.assignment tmp___0 = i
<operator>.postIncrement i ++
<operator>.assignment sum[tmp___0] = remainder
<operator>.assignment tmp___1 = i
<operator>.postDecrement i --
<operator>.assignment binarySum = binarySum * 10 + sum[tmp___1]
<operator>.logicalNot ! (binary1 != 0)
<operator>.modulo ((binary1 % 10 + binary2 % 10) + remainder) % 2
<operator>.division ((binary1 % 10 + binary2 % 10) + remainder) / 2
<operator>.addition binarySum * 10 + sum[tmp___1]
<operator>.notEquals binary1 != 0
<operator>.logicalNot ! (binary2 != 0)
<operator>.addition (binary1 % 10 + binary2 % 10) + remainder
<operator>.addition (binary1 % 10 + binary2 % 10) + remainder
<operator>.multiplication binarySum * 10
<operator>.addition binary1 % 10 + binary2 % 10
<operator>.addition binary1 % 10 + binary2 % 10
<operator>.notEquals binary2 != 0
<operator>.modulo binary1 % 10
<operator>.modulo binary2 % 10
<operator>.modulo binary1 % 10
<operator>.modulo binary2 % 10
<operator>.indirectIndexAccess sum[tmp]
<operator>.indirectIndexAccess sum[tmp___0]
<operator>.indirectIndexAccess sum[tmp___1]
>>>PDG&44 0->2 0->3 0->4 0->5 0->6 0->7 0->9 0->10 0->11 0->12 0->13 0->14 0->17 0->18 0->19 0->20 0->21 0->22 0->23 0->26 0->27 0->29 0->31 0->32 0->33 0->36 0->37 0->38 0->39 0->40 2->1 2->29 3->1 3->36 3->38 4->1 4->7 4->13 4->14 4->19 4->20 5->1 5->10 5->26 5->27 5->31 5->32 6->1 6->1 6->12 6->33 7->1 7->11 8->1 10->1 10->1 10->19 10->20 10->21 10->21 10->42 11->1 11->1 11->11 11->22 11->22 11->23 11->23 11->24 11->28 11->33 11->43 12->8 13->1 13->1 14->1 14->7 14->13 14->19 14->20 15->1 15->1 15->1 16->1 16->1 16->10 16->26 16->27 16->31 16->32 17->1 17->1 17->29 18->1 18->1 18->36 18->38 19->1 19->1 20->1 20->7 21->1 21->1 21->1 22->1 22->1 23->1 23->11 24->1 24->1 24->1 24->12 24->33 25->1 25->1 25->13 25->14 25->15 25->16 25->17 25->18 25->25 25->26 25->27 25->29 25->30 25->31 25->32 25->34 25->35 25->36 25->37 25->38 25->39 25->40 25->41 26->15 26->15 27->1 27->16 27->16 28->1 28->1 29->1 29->25 29->25 29->37 30->1 30->1 30->13 30->14 30->15 30->16 30->17 30->18 30->25 30->26 30->27 30->29 30->31 30->32 30->34 30->35 30->37 30->38 30->39 30->40 30->41 32->1 33->24 33->24 33->28 33->28 35->1 35->1 36->1 36->30 36->30 36->38 37->26 37->26 37->31 37->31 37->34 37->34 37->39 38->26 38->26 38->31 38->31 38->34 38->34 38->40 39->17 39->27 39->27 39->32 39->32 39->35 39->35 40->18 40->27 40->27 40->32 40->32 40->35 40->35
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; int binaryAddition ( int binary1 , int binary2 ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; void main ( void ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int printf ( char const * format , ... ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; int binaryAddition ( int binary1 , int binary2 ) { int i ; int remainder ; int sum [ 20 ] ; int binarySum ; int tmp ; int tmp___0 ; int tmp___1 ; { i = 0 ; remainder = 0 ; binarySum = 0 ; while ( 1 ) { if ( ! ( binary1 != 0 ) ) { if ( ! ( binary2 != 0 ) ) { break ; } } tmp = i ; i ++ ; sum [ tmp ] = ( ( binary1 % 10 + binary2 % 10 ) + remainder ) % 2 ; remainder = ( ( binary1 % 10 + binary2 % 10 ) + remainder ) / 2 ; binary1 /= 10 ; binary2 /= 10 ; } if ( remainder != 0 ) { tmp___0 = i ; i ++ ; sum [ tmp___0 ] = remainder ; } i -- ; while ( i >= 0 ) { tmp___1 = i ; i -- ; binarySum = binarySum * 10 + sum [ tmp___1 ] ; } return ( binarySum ) ; } } void megaInit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { } } } void main ( void ) { { megaInit ( ) ; } }
>>>Func
METHOD _1_stringEncoder
METHOD_RETURN void
PARAM int n
PARAM char str[]
BLOCK <empty> <empty>
<operator>.assignment encodeStrings_i3 = 0
IDENTIFIER n switch(n)
LITERAL 0 <empty>
<operator>.assignment str[encodeStrings_i3] = 'P'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'o'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'u'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'c'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'o'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'f'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'w'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'o'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'b'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'i'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'y'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'u'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'm'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'b'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ':'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'l'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
>>>PDG&80 0->2 0->3 0->4 0->5 0->6 0->7 0->8 0->9 0->10 0->11 0->12 0->13 0->14 0->15 0->16 0->17 0->18 0->19 0->20 0->21 0->22 0->23 0->24 0->25 0->26 0->27 0->28 0->29 0->30 0->31 0->32 0->33 0->34 0->35 0->36 0->37 0->38 0->39 0->40 0->41 0->42 0->43 0->44 0->45 0->46 0->47 0->48 0->49 0->50 0->51 0->52 0->53 0->54 0->55 0->56 0->57 0->58 0->59 0->60 0->61 0->62 0->63 0->64 0->65 0->66 0->67 0->68 0->69 0->70 0->71 0->72 0->73 0->74 0->75 0->76 0->77 0->78 0->79 2->1 3->1 5->1 5->1 5->9 8->1 9->11 11->13 13->15 15->17 17->19 18->1 19->21 21->23 23->25 25->27 26->1 27->29 29->31 30->1 31->33 32->1 33->35 34->1 35->37 37->39 39->41 40->1 41->43 43->45 44->1 45->47 47->49 48->1 49->51 51->53 52->1 53->55 54->1 55->57 56->1 57->59 58->1 59->61 60->1 61->63 62->1 63->65 64->1 65->67 66->1 67->69 68->1 69->71 70->1 71->73 72->1 73->75 74->1 75->77 76->1 77->79 78->1 78->1 79->1 79->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; char * * _global_argv = ( char * * ) 0 ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern int ( /* missing proto */ binaryAddition ) ( ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; int main ( int argc , char * * argv , char * * _formal_envp ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; void encodeStrings_litStr0_i $ nit ( void ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; int _global_argc = 0 ; void megaInit ( void ) ; char * * _global_envp = ( char * * ) 0 ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int ( /* missing proto */ printf ) ( ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; char encodeStrings_litStr0 [ 36 ] ; int main ( int argc , char * * argv , char * * _formal_envp ) { long binary1 ; long binary2 ; long multiply ; int digit ; int factor ; int tmp ; int _BARRIER_0 ; { megaInit ( ) ; _global_argc = argc ; _global_argv = argv ; _global_envp = _formal_envp ; _BARRIER_0 = 1 ; if ( argc < 3 ) { return ( 1 ) ; } multiply = 0L ; factor = 1 ; binary1 = ( long ) * ( * ( argv + 1 ) + 0 ) ; binary2 = ( long ) * ( * ( argv + 2 ) + 0 ) ; while ( binary2 != 0L ) { digit = ( int ) ( binary2 % 10L ) ; if ( digit == 1 ) { binary1 *= ( long ) factor ; tmp = binaryAddition ( binary1 , multiply ) ; multiply = ( long ) tmp ; } else { binary1 *= ( long ) factor ; } binary2 /= 10L ; factor = 10 ; } _1_stringEncoder ( 0 , encodeStrings_litStr0 ) ; printf ( encodeStrings_litStr0 , multiply ) ; return ( 0 ) ; } } void encodeStrings_litStr0_i $ nit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { case 0 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; } } } void megaInit ( void ) { { encodeStrings_litStr0_i $ nit ( ) ; } }
>>>Func
METHOD APHash
METHOD_RETURN unsigned int
PARAM char *str
PARAM unsigned int len
<operator>.assignment hash = 2863311530U
<operator>.assignment i = 0U
<operator>.assignment i = 0U
RETURN return (hash); return (hash);
<operator>.lessThan i < len
IDENTIFIER hash return (hash);
<operators>.assignmentXor hash ^= tmp
<operator>.postIncrement str ++
<operator>.postIncrement i ++
<operator>.equals (i & 1U) == 0U
<operator>.assignment tmp = (hash << 7) ^ (unsigned int )*str * (hash >> 3)
<operator>.and i & 1U
<operator>.assignment tmp = ~ (((hash << 11) + (unsigned int )*str) ^ (hash >> 5))
<operator>.xor (hash << 7) ^ (unsigned int )*str * (hash >> 3)
<operator>.shiftLeft hash << 7
<operator>.multiplication (unsigned int )*str * (hash >> 3)
<operator>.not ~ (((hash << 11) + (unsigned int )*str) ^ (hash >> 5))
<operator>.cast (unsigned int )*str
<operator>.arithmeticShiftRight hash >> 3
<operator>.xor ((hash << 11) + (unsigned int )*str) ^ (hash >> 5)
<operator>.addition (hash << 11) + (unsigned int )*str
<operator>.arithmeticShiftRight hash >> 5
<operator>.shiftLeft hash << 11
<operator>.cast (unsigned int )*str
UNKNOWN unsigned int unsigned int
<operator>.indirection *str
UNKNOWN unsigned int unsigned int
<operator>.indirection *str
>>>PDG&32 0->2 0->3 0->4 0->5 0->6 0->8 0->9 0->10 0->11 0->12 0->13 0->15 0->18 0->22 0->25 0->26 2->1 2->11 3->8 4->1 4->1 4->9 4->18 4->26 6->1 6->8 7->1 8->1 8->1 8->1 8->8 8->10 8->11 8->12 8->13 8->15 8->15 9->7 10->1 10->1 10->9 10->18 10->26 11->1 11->1 12->1 12->8 13->1 13->1 13->14 13->16 13->17 13->18 13->19 13->20 13->21 13->22 13->23 13->24 13->25 13->26 13->27 13->28 13->29 13->30 13->31 14->1 14->1 14->10 15->12 15->13 15->13 16->1 16->1 16->10 17->1 17->1 17->14 17->14 18->17 18->17 18->22 19->1 19->1 19->17 19->17 20->1 20->16 21->1 22->10 22->19 22->19 23->1 23->1 23->20 23->20 24->1 24->1 25->10 25->23 25->23 26->23 26->23 26->24 26->24 26->25 27->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; void main ( void ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int printf ( char const * format , ... ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; unsigned int APHash ( char * str , unsigned int len ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; unsigned int APHash ( char * str , unsigned int len ) { unsigned int hash ; unsigned int i ; unsigned int tmp ; { hash = 2863311530U ; i = 0U ; i = 0U ; while ( i < len ) { if ( ( i & 1U ) == 0U ) { tmp = ( hash << 7 ) ^ ( unsigned int ) * str * ( hash >> 3 ) ; } else { tmp = ~ ( ( ( hash << 11 ) + ( unsigned int ) * str ) ^ ( hash >> 5 ) ) ; } hash ^= tmp ; str ++ ; i ++ ; } return ( hash ) ; } } void megaInit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { } } } void main ( void ) { { megaInit ( ) ; } }
>>>Func
METHOD test
METHOD_RETURN void
PARAM void
<operator>.assignment sets[0][0] = 0
<operator>.assignment sets[0][1] = 0
<operator>.assignment sets[1][0] = 1
<operator>.assignment sets[1][1] = 1
<operator>.assignment sets[2][0] = 2
<operator>.assignment sets[2][1] = 10
<operator>.assignment sets[3][0] = 3
<operator>.assignment sets[3][1] = 11
<operator>.assignment sets[4][0] = 4
<operator>.assignment sets[4][1] = 100
<operator>.assignment sets[5][0] = 6
<operator>.assignment sets[5][1] = 110
<operator>.assignment sets[6][0] = 7
<operator>.assignment sets[6][1] = 111
<operator>.assignment i = 0
<operator>.assignment size = (int )(sizeof(sets) / sizeof(sets[0]))
RETURN return; return;
<operator>.lessThan i < size
<operator>.cast (int )(sizeof(sets) / sizeof(sets[0]))
<operator>.assignment tmp = decimal_to_binary(sets[i][0])
assert assert(tmp == sets[i][1])
<operator>.postIncrement i ++
<operator>.sizeOf sizeof(sets)
<operator>.sizeOf sizeof(sets[0])
decimal_to_binary decimal_to_binary(sets[i][0])
<operator>.equals tmp == sets[i][1]
<operator>.indirectIndexAccess sets[i][0]
<operator>.indirectIndexAccess sets[i][1]
<operator>.indirectIndexAccess sets[i]
<operator>.indirectIndexAccess sets[i]
>>>PDG&33 0->2 0->3 0->4 0->5 0->6 0->7 0->8 0->9 0->10 0->11 0->12 0->13 0->14 0->15 0->16 0->17 0->19 0->20 0->24 0->28 2->1 3->1 3->1 4->1 4->1 5->1 5->1 6->1 6->1 7->1 7->1 8->1 8->1 9->1 9->1 10->1 10->1 11->1 11->1 12->1 12->1 13->1 13->1 14->1 14->1 15->1 15->1 16->1 16->1 17->1 17->20 18->1 18->1 18->20 19->1 20->1 20->1 20->1 20->20 20->22 20->23 20->24 20->24 20->27 20->28 20->29 20->30 20->31 20->32 21->1 22->1 22->1 22->28 23->1 23->1 24->1 24->20 25->1 26->1 27->1 27->22 28->1 28->1 28->23 28->23
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fclose ( void * stream ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int ( /* missing proto */ assert ) ( ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern int ( /* missing proto */ decimal_to_binary ) ( ) ; extern unsigned long strlen ( char const * s ) ; void main ( void ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int printf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern int scanf ( char const * format , ... ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; void test ( void ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; void test ( void ) { int sets [ 7 ] [ 2 ] ; int i ; int size ; int tmp ; { sets [ 0 ] [ 0 ] = 0 ; sets [ 0 ] [ 1 ] = 0 ; sets [ 1 ] [ 0 ] = 1 ; sets [ 1 ] [ 1 ] = 1 ; sets [ 2 ] [ 0 ] = 2 ; sets [ 2 ] [ 1 ] = 10 ; sets [ 3 ] [ 0 ] = 3 ; sets [ 3 ] [ 1 ] = 11 ; sets [ 4 ] [ 0 ] = 4 ; sets [ 4 ] [ 1 ] = 100 ; sets [ 5 ] [ 0 ] = 6 ; sets [ 5 ] [ 1 ] = 110 ; sets [ 6 ] [ 0 ] = 7 ; sets [ 6 ] [ 1 ] = 111 ; i = 0 ; size = ( int ) ( sizeof ( sets ) / sizeof ( sets [ 0 ] ) ) ; while ( i < size ) { tmp = decimal_to_binary ( sets [ i ] [ 0 ] ) ; assert ( tmp == sets [ i ] [ 1 ] ) ; i ++ ; } return ; } } void main ( void ) { { megaInit ( ) ; } } void megaInit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { } } }
>>>Func
METHOD main
METHOD_RETURN int
PARAM int _formal_argc
PARAM char **_formal_argv
PARAM char **_formal_envp
megaInit megaInit()
<operator>.assignment _global_argc = _formal_argc
<operator>.assignment _global_argv = _formal_argv
<operator>.assignment _global_envp = _formal_envp
<operator>.assignment _BARRIER_0 = 1
test_crc32 test_crc32()
RETURN return (0); return (0);
LITERAL 0 return (0);
>>>PDG&13 0->2 0->3 0->4 0->5 0->6 0->7 0->8 0->9 0->10 0->11 0->12 2->6 3->7 4->8 5->1 6->1 6->1 6->1 7->1 7->1 7->1 8->1 8->1 8->1 9->1 9->1 10->1 11->1 12->11
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fclose ( void * stream ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; char * * _global_argv = ( char * * ) 0 ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; int main ( int _formal_argc , char * * _formal_argv , char * * _formal_envp ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; int _global_argc = 0 ; char * * _global_envp = ( char * * ) 0 ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int printf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern int scanf ( char const * format , ... ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int ( /* missing proto */ test_crc32 ) ( ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { } } } void megaInit ( void ) { { } } int main ( int _formal_argc , char * * _formal_argv , char * * _formal_envp ) { int _BARRIER_0 ; { megaInit ( ) ; _global_argc = _formal_argc ; _global_argv = _formal_argv ; _global_envp = _formal_envp ; _BARRIER_0 = 1 ; test_crc32 ( ) ; return ( 0 ) ; } }
>>>Func
METHOD _1_stringEncoder
METHOD_RETURN void
PARAM int n
PARAM char str[]
BLOCK <empty> <empty>
<operator>.assignment encodeStrings_i3 = 0
IDENTIFIER n switch(n)
LITERAL 5 <empty>
<operator>.assignment str[encodeStrings_i3] = 'p'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'i'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'i'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'v'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '.'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '.'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '.'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 4 <empty>
<operator>.assignment str[encodeStrings_i3] = 'p'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'c'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'u'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'i'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'v'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '.'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '.'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '.'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 3 <empty>
<operator>.assignment str[encodeStrings_i3] = 'T'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '2'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '.'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '.'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '.'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '.'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 2 <empty>
<operator>.assignment str[encodeStrings_i3] = 'p'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'i'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'i'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'v'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '.'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '.'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '.'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 1 <empty>
<operator>.assignment str[encodeStrings_i3] = 'p'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'c'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'u'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'i'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'v'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '.'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '.'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '.'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 0 <empty>
<operator>.assignment str[encodeStrings_i3] = 'T'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '1'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '.'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '.'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '.'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '.'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
>>>PDG&229 0->2 0->3 0->4 0->5 0->6 0->7 0->8 0->9 0->10 0->11 0->12 0->13 0->14 0->15 0->16 0->17 0->18 0->19 0->20 0->21 0->22 0->23 0->24 0->25 0->26 0->27 0->28 0->29 0->30 0->31 0->32 0->33 0->34 0->35 0->36 0->37 0->38 0->39 0->40 0->41 0->42 0->43 0->44 0->45 0->46 0->47 0->48 0->49 0->50 0->51 0->52 0->53 0->54 0->55 0->56 0->57 0->58 0->59 0->60 0->61 0->62 0->63 0->64 0->65 0->66 0->67 0->68 0->69 0->70 0->71 0->72 0->73 0->74 0->75 0->76 0->77 0->78 0->79 0->80 0->81 0->82 0->83 0->84 0->85 0->86 0->87 0->88 0->89 0->90 0->91 0->92 0->93 0->94 0->95 0->96 0->97 0->98 0->99 0->100 0->101 0->102 0->103 0->104 0->105 0->106 0->107 0->108 0->109 0->110 0->111 0->112 0->113 0->114 0->115 0->116 0->117 0->118 0->119 0->120 0->121 0->122 0->123 0->124 0->125 0->126 0->127 0->128 0->129 0->130 0->131 0->132 0->133 0->134 0->135 0->136 0->137 0->138 0->139 0->140 0->141 0->142 0->143 0->144 0->145 0->146 0->147 0->148 0->149 0->150 0->151 0->152 0->153 0->154 0->155 0->156 0->157 0->158 0->159 0->160 0->161 0->162 0->163 0->164 0->165 0->166 0->167 0->168 0->169 0->170 0->171 0->172 0->173 0->174 0->175 0->176 0->177 0->178 0->179 0->180 0->181 0->182 0->183 0->184 0->185 0->186 0->187 0->188 0->189 0->190 0->191 0->192 0->193 0->194 0->195 0->196 0->197 0->198 0->199 0->200 0->201 0->202 0->203 0->204 0->205 0->206 0->207 0->208 0->209 0->210 0->211 0->212 0->213 0->214 0->215 0->216 0->217 0->218 0->219 0->220 0->221 0->222 0->223 0->224 0->225 0->226 0->227 0->228 2->1 3->1 5->1 5->1 5->9 5->52 5->95 5->120 5->163 5->206 8->1 9->11 11->13 13->15 14->1 15->17 17->19 18->1 19->21 20->1 21->23 23->25 25->27 27->29 28->1 29->31 30->1 31->33 32->1 33->35 34->1 35->37 36->1 37->39 38->1 39->41 41->43 43->45 44->1 45->47 46->1 47->49 48->1 48->1 49->1 49->1 51->1 52->54 53->1 54->56 56->58 58->60 60->62 61->1 62->64 64->66 66->68 68->70 69->1 70->72 71->1 72->74 73->1 74->76 75->1 76->78 77->1 78->80 79->1 80->82 81->1 82->84 84->86 86->88 87->1 88->90 89->1 90->92 91->1 91->1 92->1 92->1 94->1 95->97 96->1 97->99 98->1 99->101 100->1 101->103 103->105 104->1 105->107 107->109 109->111 111->113 112->1 113->115 114->1 115->117 116->1 116->1 117->1 117->1 119->1 120->122 122->124 124->126 125->1 126->128 128->130 129->1 130->132 131->1 132->134 134->136 136->138 138->140 139->1 140->142 141->1 142->144 143->1 144->146 145->1 146->148 147->1 148->150 149->1 150->152 152->154 154->156 155->1 156->158 157->1 158->160 159->1 159->1 160->1 160->1 162->1 163->165 164->1 165->167 167->169 169->171 171->173 172->1 173->175 175->177 177->179 179->181 180->1 181->183 182->1 183->185 184->1 185->187 186->1 187->189 188->1 189->191 190->1 191->193 192->1 193->195 195->197 197->199 198->1 199->201 200->1 201->203 202->1 202->1 203->1 203->1 205->1 206->208 207->1 208->210 209->1 210->212 211->1 212->214 214->216 215->1 216->218 218->220 220->222 222->224 223->1 224->226 225->1 226->228 227->1 227->1 228->1 228->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; void encodeStrings_litStr2_i $ nit ( void ) ; extern int unlink ( char const * filename ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int pthread_mutex_lock ( int * mutex ) ; extern int ( /* missing proto */ assert ) ( ) ; extern int raise ( int sig ) ; void encodeStrings_litStr5_i $ nit ( void ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern int getpagesize ( ) ; extern double ceil ( double x ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; void main ( void ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; void encodeStrings_litStr0_i $ nit ( void ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; void encodeStrings_litStr3_i $ nit ( void ) ; extern int ( /* missing proto */ printf ) ( ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern int scanf ( char const * format , ... ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern double strtod ( char const * str , char const * endptr ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; void test ( void ) ; extern int ( /* missing proto */ binarysearch2 ) ( ) ; extern int ( /* missing proto */ binarysearch1 ) ( ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; void encodeStrings_litStr1_i $ nit ( void ) ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; void encodeStrings_litStr4_i $ nit ( void ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; char encodeStrings_litStr5 [ 21 ] ; extern int open ( char const * filename , int oflag , ... ) ; char encodeStrings_litStr4 [ 21 ] ; extern double sqrt ( double x ) ; char encodeStrings_litStr3 [ 12 ] ; char encodeStrings_litStr2 [ 21 ] ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; char encodeStrings_litStr1 [ 21 ] ; char encodeStrings_litStr0 [ 12 ] ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; void encodeStrings_litStr1_i $ nit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { case 5 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 4 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 3 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 2 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 1 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 0 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; } } } void encodeStrings_litStr2_i $ nit ( void ) { { } } void main ( void ) { { megaInit ( ) ; } } void megaInit ( void ) { { encodeStrings_litStr5_i $ nit ( ) ; encodeStrings_litStr4_i $ nit ( ) ; encodeStrings_litStr3_i $ nit ( ) ; encodeStrings_litStr2_i $ nit ( ) ; encodeStrings_litStr1_i $ nit ( ) ; encodeStrings_litStr0_i $ nit ( ) ; } } void encodeStrings_litStr3_i $ nit ( void ) { { } } void test ( void ) { int arr [ 5 ] ; int n ; int x ; int result ; int tmp ; { arr [ 0 ] = 2 ; arr [ 1 ] = 3 ; arr [ 2 ] = 4 ; arr [ 3 ] = 10 ; arr [ 4 ] = 40 ; n = 5 ; _1_stringEncoder ( 0 , encodeStrings_litStr0 ) ; printf ( encodeStrings_litStr0 ) ; x = 10 ; tmp = binarysearch1 ( arr , 0 , n - 1 , x ) ; result = tmp ; assert ( result == 3 ) ; _1_stringEncoder ( 1 , encodeStrings_litStr1 ) ; printf ( encodeStrings_litStr1 ) ; result = binarysearch2 ( arr , 0 , n - 1 , x ) ; assert ( result == 3 ) ; _1_stringEncoder ( 2 , encodeStrings_litStr2 ) ; printf ( encodeStrings_litStr2 ) ; _1_stringEncoder ( 3 , encodeStrings_litStr3 ) ; printf ( encodeStrings_litStr3 ) ; x = 5 ; result = binarysearch1 ( arr , 0 , n - 1 , x ) ; assert ( result == -1 ) ; _1_stringEncoder ( 4 , encodeStrings_litStr4 ) ; printf ( encodeStrings_litStr4 ) ; result = binarysearch2 ( arr , 0 , n - 1 , x ) ; assert ( result == -1 ) ; _1_stringEncoder ( 5 , encodeStrings_litStr5 ) ; printf ( encodeStrings_litStr5 ) ; return ; } } void encodeStrings_litStr0_i $ nit ( void ) { { } } void encodeStrings_litStr5_i $ nit ( void ) { { } } void encodeStrings_litStr4_i $ nit ( void ) { { } }
>>>Func
METHOD string_nocase_compare
METHOD_RETURN int
PARAM void *string1
PARAM void *string2
<operator>.assignment p1 = (char *)string1
<operator>.assignment p2 = (char *)string2
RETURN return (0); return (0);
LITERAL 1 while (1)
LITERAL 0 return (0);
<operator>.cast (char *)string1
<operator>.cast (char *)string2
<operator>.assignment c1 = tolower((int )*p1)
<operator>.assignment c2 = tolower((int )*p2)
<operator>.postIncrement p1 ++
<operator>.postIncrement p2 ++
<operator>.notEquals c1 != c2
<operator>.equals c1 == 0
tolower tolower((int )*p1)
tolower tolower((int )*p2)
<operator>.cast (int )*p1
<operator>.cast (int )*p2
<operator>.lessThan c1 < c2
RETURN return (-1); return (-1);
<operator>.minus -1
RETURN return (1); return (1);
LITERAL 1 return (1);
UNKNOWN int int
<operator>.indirection *p1
UNKNOWN int int
<operator>.indirection *p2
>>>PDG&30 0->2 0->3 0->4 0->5 0->6 0->7 0->8 0->9 0->10 0->13 0->14 0->15 0->16 0->21 0->23 0->24 0->25 2->4 2->9 3->5 3->10 4->1 4->1 4->1 4->13 5->1 5->1 5->1 5->14 6->1 8->6 9->1 10->1 11->1 11->1 11->15 12->1 12->1 12->15 13->1 13->1 14->1 14->1 15->1 15->16 15->16 15->21 15->21 15->21 16->1 16->6 16->11 16->12 16->13 16->14 16->15 16->17 16->18 16->19 16->20 16->26 16->27 16->28 16->29 17->1 17->11 18->1 18->12 19->1 20->1 21->1 21->1 21->1 21->22 21->23 21->24 22->1 23->1 23->22 24->1 25->24
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; int string_nocase_compare ( void * string1 , void * string2 ) ; extern unsigned long strlen ( char const * s ) ; void main ( void ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int printf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern int scanf ( char const * format , ... ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern float strtof ( char const * str , char const * endptr ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern int ( /* missing proto */ tolower ) ( ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; void megaInit ( void ) { { } } int string_nocase_compare ( void * string1 , void * string2 ) { char * p1 ; char * p2 ; int c1 ; int c2 ; { p1 = ( char * ) string1 ; p2 = ( char * ) string2 ; while ( 1 ) { c1 = tolower ( ( int ) * p1 ) ; c2 = tolower ( ( int ) * p2 ) ; if ( c1 != c2 ) { if ( c1 < c2 ) { return ( -1 ) ; } else { return ( 1 ) ; } } if ( c1 == 0 ) { break ; } p1 ++ ; p2 ++ ; } return ( 0 ) ; } } void main ( void ) { { megaInit ( ) ; } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { } } }
>>>Func
METHOD _1_stringEncoder
METHOD_RETURN void
PARAM int n
PARAM char str[]
BLOCK <empty> <empty>
<operator>.assignment encodeStrings_i3 = 0
IDENTIFIER n switch(n)
LITERAL 3 <empty>
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 2 <empty>
<operator>.assignment str[encodeStrings_i3] = 'C'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'o'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'C'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'l'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'c'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'u'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'l'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'f'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'c'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'o'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'i'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'l'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'f'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'o'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'g'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'i'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'v'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'u'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'm'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'b'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '.'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 1 <empty>
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 0 <empty>
<operator>.assignment str[encodeStrings_i3] = 'E'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'w'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'h'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'o'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'l'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'u'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'm'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'b'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'o'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'F'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'i'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'i'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'F'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'c'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'o'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'i'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'l'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ':'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
>>>PDG&213 0->2 0->3 0->4 0->5 0->6 0->7 0->8 0->9 0->10 0->11 0->12 0->13 0->14 0->15 0->16 0->17 0->18 0->19 0->20 0->21 0->22 0->23 0->24 0->25 0->26 0->27 0->28 0->29 0->30 0->31 0->32 0->33 0->34 0->35 0->36 0->37 0->38 0->39 0->40 0->41 0->42 0->43 0->44 0->45 0->46 0->47 0->48 0->49 0->50 0->51 0->52 0->53 0->54 0->55 0->56 0->57 0->58 0->59 0->60 0->61 0->62 0->63 0->64 0->65 0->66 0->67 0->68 0->69 0->70 0->71 0->72 0->73 0->74 0->75 0->76 0->77 0->78 0->79 0->80 0->81 0->82 0->83 0->84 0->85 0->86 0->87 0->88 0->89 0->90 0->91 0->92 0->93 0->94 0->95 0->96 0->97 0->98 0->99 0->100 0->101 0->102 0->103 0->104 0->105 0->106 0->107 0->108 0->109 0->110 0->111 0->112 0->113 0->114 0->115 0->116 0->117 0->118 0->119 0->120 0->121 0->122 0->123 0->124 0->125 0->126 0->127 0->128 0->129 0->130 0->131 0->132 0->133 0->134 0->135 0->136 0->137 0->138 0->139 0->140 0->141 0->142 0->143 0->144 0->145 0->146 0->147 0->148 0->149 0->150 0->151 0->152 0->153 0->154 0->155 0->156 0->157 0->158 0->159 0->160 0->161 0->162 0->163 0->164 0->165 0->166 0->167 0->168 0->169 0->170 0->171 0->172 0->173 0->174 0->175 0->176 0->177 0->178 0->179 0->180 0->181 0->182 0->183 0->184 0->185 0->186 0->187 0->188 0->189 0->190 0->191 0->192 0->193 0->194 0->195 0->196 0->197 0->198 0->199 0->200 0->201 0->202 0->203 0->204 0->205 0->206 0->207 0->208 0->209 0->210 0->211 0->212 2->1 3->1 5->1 5->1 5->9 5->16 5->117 5->124 8->1 9->11 10->1 11->13 12->1 12->1 13->1 13->1 16->18 18->20 20->22 22->24 24->26 26->28 28->30 29->1 30->32 32->34 34->36 36->38 38->40 40->42 42->44 44->46 46->48 48->50 50->52 52->54 53->1 54->56 56->58 58->60 60->62 62->64 64->66 65->1 66->68 68->70 70->72 71->1 72->74 73->1 74->76 76->78 78->80 80->82 82->84 83->1 84->86 85->1 86->88 87->1 88->90 89->1 90->92 91->1 92->94 94->96 95->1 96->98 97->1 98->100 99->1 100->102 101->1 102->104 103->1 104->106 105->1 106->108 107->1 108->110 109->1 110->112 111->1 112->114 113->1 113->1 114->1 114->1 116->1 117->119 118->1 119->121 120->1 120->1 121->1 121->1 123->1 124->126 126->128 128->130 130->132 132->134 134->136 136->138 138->140 139->1 140->142 141->1 142->144 144->146 146->148 148->150 150->152 152->154 153->1 154->156 155->1 156->158 157->1 158->160 159->1 160->162 162->164 164->166 166->168 168->170 170->172 172->174 174->176 175->1 176->178 177->1 178->180 180->182 182->184 184->186 185->1 186->188 188->190 189->1 190->192 192->194 193->1 194->196 195->1 196->198 197->1 198->200 199->1 200->202 201->1 202->204 203->1 204->206 205->1 206->208 207->1 208->210 209->1 210->212 211->1 211->1 212->1 212->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern void exit ( int status ) ; extern int pthread_cond_signal ( int * cond ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; char * * _global_argv = ( char * * ) 0 ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; void encodeStrings_litStr2_i $ nit ( void ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int pthread_mutex_lock ( int * mutex ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; int main ( int _formal_argc , char * * _formal_argv , char * * _formal_envp ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; void encodeStrings_litStr0_i $ nit ( void ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; int _global_argc = 0 ; void megaInit ( void ) ; char * * _global_envp = ( char * * ) 0 ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; void encodeStrings_litStr3_i $ nit ( void ) ; extern int ( /* missing proto */ printf ) ( ) ; extern int ( /* missing proto */ scanf ) ( ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; void encodeStrings_litStr1_i $ nit ( void ) ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; char encodeStrings_litStr3 [ 3 ] ; char encodeStrings_litStr2 [ 50 ] ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; char encodeStrings_litStr1 [ 3 ] ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; char encodeStrings_litStr0 [ 45 ] ; void encodeStrings_litStr0_i $ nit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { case 3 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 2 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 1 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 0 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; } } } void encodeStrings_litStr1_i $ nit ( void ) { { } } void megaInit ( void ) { { encodeStrings_litStr3_i $ nit ( ) ; encodeStrings_litStr2_i $ nit ( ) ; encodeStrings_litStr1_i $ nit ( ) ; encodeStrings_litStr0_i $ nit ( ) ; } } void encodeStrings_litStr3_i $ nit ( void ) { { } } void encodeStrings_litStr2_i $ nit ( void ) { { } } int main ( int _formal_argc , char * * _formal_argv , char * * _formal_envp ) { int a [ 200 ] ; int n ; int counter ; int temp ; int i ; int _BARRIER_0 ; { megaInit ( ) ; _global_argc = _formal_argc ; _global_argv = _formal_argv ; _global_envp = _formal_envp ; _BARRIER_0 = 1 ; a [ 0 ] = 1 ; counter = 0 ; _1_stringEncoder ( 0 , encodeStrings_litStr0 ) ; printf ( encodeStrings_litStr0 ) ; _1_stringEncoder ( 1 , encodeStrings_litStr1 ) ; scanf ( encodeStrings_litStr1 , & n ) ; if ( n < 0 ) { _1_stringEncoder ( 2 , encodeStrings_litStr2 ) ; printf ( encodeStrings_litStr2 ) ; } else { while ( n >= 2 ) { temp = 0 ; i = 0 ; while ( i <= counter ) { temp = a [ i ] * n + temp ; a [ i ] = temp % 10 ; temp /= 10 ; i ++ ; } while ( temp > 0 ) { counter ++ ; a [ counter ] = temp % 10 ; temp /= 10 ; } n -- ; } i = counter ; while ( i >= 0 ) { _1_stringEncoder ( 3 , encodeStrings_litStr3 ) ; printf ( encodeStrings_litStr3 , a [ i ] ) ; i -- ; } } return ( 0 ) ; } }
>>>Func
METHOD cmpval
METHOD_RETURN int
PARAM void const   *a
PARAM void const   *b
RETURN return (*((int *)a) - *((int *)b)); return (*((int *)a) - *((int *)b));
<operator>.subtraction *((int *)a) - *((int *)b)
<operator>.cast (int *)a
<operator>.cast (int *)b
>>>PDG&8 0->2 0->3 0->6 0->7 2->6 3->7 4->1 5->1 5->1 5->1 5->4 6->1 7->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; void main ( void ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int printf ( char const * format , ... ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; int cmpval ( void const * a , void const * b ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; int cmpval ( void const * a , void const * b ) { { return ( * ( ( int * ) a ) - * ( ( int * ) b ) ) ; } } void megaInit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { } } } void main ( void ) { { megaInit ( ) ; } }
>>>Func
METHOD _1_stringEncoder
METHOD_RETURN void
PARAM int n
PARAM char str[]
BLOCK <empty> <empty>
<operator>.assignment encodeStrings_i3 = 0
IDENTIFIER n switch(n)
LITERAL 2 <empty>
<operator>.assignment str[encodeStrings_i3] = 'G'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'c'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'o'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'm'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'm'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'o'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'i'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'v'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'i'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'o'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ':'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 1 <empty>
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 0 <empty>
<operator>.assignment str[encodeStrings_i3] = 'I'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'p'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'u'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'w'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'o'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'u'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'm'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'b'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ':'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
>>>PDG&120 0->2 0->3 0->4 0->5 0->6 0->7 0->8 0->9 0->10 0->11 0->12 0->13 0->14 0->15 0->16 0->17 0->18 0->19 0->20 0->21 0->22 0->23 0->24 0->25 0->26 0->27 0->28 0->29 0->30 0->31 0->32 0->33 0->34 0->35 0->36 0->37 0->38 0->39 0->40 0->41 0->42 0->43 0->44 0->45 0->46 0->47 0->48 0->49 0->50 0->51 0->52 0->53 0->54 0->55 0->56 0->57 0->58 0->59 0->60 0->61 0->62 0->63 0->64 0->65 0->66 0->67 0->68 0->69 0->70 0->71 0->72 0->73 0->74 0->75 0->76 0->77 0->78 0->79 0->80 0->81 0->82 0->83 0->84 0->85 0->86 0->87 0->88 0->89 0->90 0->91 0->92 0->93 0->94 0->95 0->96 0->97 0->98 0->99 0->100 0->101 0->102 0->103 0->104 0->105 0->106 0->107 0->108 0->109 0->110 0->111 0->112 0->113 0->114 0->115 0->116 0->117 0->118 0->119 2->1 3->1 5->1 5->1 5->9 5->68 5->81 8->1 9->11 11->13 13->15 14->1 15->17 17->19 18->1 19->21 21->23 22->1 23->25 25->27 26->1 27->29 29->31 31->33 32->1 33->35 35->37 36->1 37->39 39->41 41->43 43->45 44->1 45->47 46->1 47->49 48->1 49->51 50->1 51->53 52->1 53->55 54->1 55->57 56->1 57->59 58->1 59->61 60->1 61->63 62->1 63->65 64->1 64->1 65->1 65->1 68->70 70->72 71->1 72->74 73->1 74->76 75->1 76->78 77->1 77->1 78->1 78->1 80->1 81->83 83->85 84->1 85->87 87->89 89->91 91->93 92->1 93->95 94->1 95->97 96->1 97->99 98->1 99->101 100->1 101->103 102->1 103->105 104->1 105->107 106->1 107->109 108->1 109->111 110->1 111->113 112->1 113->115 114->1 115->117 116->1 117->119 118->1 118->1 119->1 119->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; char * * _global_argv = ( char * * ) 0 ; extern int fcntl ( int filedes , int cmd , ... ) ; void encodeStrings_litStr2_i $ nit ( void ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; int main ( int _formal_argc , char * * _formal_argv , char * * _formal_envp ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; void encodeStrings_litStr0_i $ nit ( void ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; int _global_argc = 0 ; void megaInit ( void ) ; char * * _global_envp = ( char * * ) 0 ; extern int ( /* missing proto */ printf ) ( ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int ( /* missing proto */ scanf ) ( ) ; extern void perror ( char const * str ) ; extern long clock ( void ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern double strtod ( char const * str , char const * endptr ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int ( /* missing proto */ GCD ) ( ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; void encodeStrings_litStr1_i $ nit ( void ) ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; char encodeStrings_litStr2 [ 29 ] ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; char encodeStrings_litStr1 [ 6 ] ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; char encodeStrings_litStr0 [ 20 ] ; void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { case 2 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 1 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 0 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; } } } void megaInit ( void ) { { encodeStrings_litStr2_i $ nit ( ) ; encodeStrings_litStr1_i $ nit ( ) ; encodeStrings_litStr0_i $ nit ( ) ; } } void encodeStrings_litStr1_i $ nit ( void ) { { } } int main ( int _formal_argc , char * * _formal_argv , char * * _formal_envp ) { int a ; int b ; int tmp ; int _BARRIER_0 ; { megaInit ( ) ; _global_argc = _formal_argc ; _global_argv = _formal_argv ; _global_envp = _formal_envp ; _BARRIER_0 = 1 ; _1_stringEncoder ( 0 , encodeStrings_litStr0 ) ; printf ( encodeStrings_litStr0 ) ; _1_stringEncoder ( 1 , encodeStrings_litStr1 ) ; scanf ( encodeStrings_litStr1 , & a , & b ) ; tmp = GCD ( a , b ) ; _1_stringEncoder ( 2 , encodeStrings_litStr2 ) ; printf ( encodeStrings_litStr2 , tmp ) ; return ( 0 ) ; } } void encodeStrings_litStr2_i $ nit ( void ) { { } } void encodeStrings_litStr0_i $ nit ( void ) { { } }
>>>Func
METHOD main
METHOD_RETURN int
PARAM int _formal_argc
PARAM char **_formal_argv
PARAM char **_formal_envp
megaInit megaInit()
<operator>.assignment _global_argc = _formal_argc
<operator>.assignment _global_argv = _formal_argv
<operator>.assignment _global_envp = _formal_envp
<operator>.assignment _BARRIER_0 = 1
test test()
RETURN return (0); return (0);
LITERAL 0 return (0);
>>>PDG&13 0->2 0->3 0->4 0->5 0->6 0->7 0->8 0->9 0->10 0->11 0->12 2->6 3->7 4->8 5->1 6->1 6->1 6->1 7->1 7->1 7->1 8->1 8->1 8->1 9->1 9->1 10->1 11->1 12->11
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fclose ( void * stream ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; char * * _global_argv = ( char * * ) 0 ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; int main ( int _formal_argc , char * * _formal_argv , char * * _formal_envp ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; int _global_argc = 0 ; char * * _global_envp = ( char * * ) 0 ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int printf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern int scanf ( char const * format , ... ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int ( /* missing proto */ test ) ( ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { } } } void megaInit ( void ) { { } } int main ( int _formal_argc , char * * _formal_argv , char * * _formal_envp ) { int _BARRIER_0 ; { megaInit ( ) ; _global_argc = _formal_argc ; _global_argv = _formal_argv ; _global_envp = _formal_envp ; _BARRIER_0 = 1 ; test ( ) ; return ( 0 ) ; } }
>>>Func
METHOD max
METHOD_RETURN int
PARAM int a
PARAM int b
RETURN return (tmp); return (tmp);
<operator>.greaterThan a > b
IDENTIFIER tmp return (tmp);
<operator>.assignment tmp = a
<operator>.assignment tmp = b
>>>PDG&9 0->2 0->3 0->5 0->6 0->7 0->8 2->5 3->5 4->1 5->1 5->1 5->1 5->7 5->7 5->8 5->8 6->4 7->1 7->1 7->1 7->6 8->1 8->1 8->1 8->6
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; void main ( void ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int printf ( char const * format , ... ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; int max ( int a , int b ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { } } } void megaInit ( void ) { { } } int max ( int a , int b ) { int tmp ; { if ( a > b ) { tmp = a ; } else { tmp = b ; } return ( tmp ) ; } } void main ( void ) { { megaInit ( ) ; } }
>>>Func
METHOD check_anagram
METHOD_RETURN int
PARAM char *a
PARAM char *b
<operator>.assignment first[0] = 0
<operator>.assignment tmp = 1U
<operator>.assignment second[0] = 0
<operator>.assignment tmp___0 = 1U
<operator>.assignment c = 0
<operator>.assignment c = 0
<operator>.assignment c = 0
RETURN return (1); return (1);
<operator>.logicalNot ! (tmp >= 26U)
<operator>.logicalNot ! (tmp___0 >= 26U)
<operator>.notEquals (int )*(a + c) != 0
<operator>.notEquals (int )*(b + c) != 0
<operator>.lessThan c < 26
LITERAL 1 return (1);
<operator>.assignment first[tmp] = 0
<operator>.postIncrement tmp ++
<operator>.assignment second[tmp___0] = 0
<operator>.postIncrement tmp___0 ++
<operator>.postIncrement (first[(int )*(a + c) - 97]) ++
<operator>.postIncrement c ++
<operator>.postIncrement (second[(int )*(b + c) - 97]) ++
<operator>.postIncrement c ++
<operator>.postIncrement c ++
<operator>.greaterEqualsThan tmp >= 26U
<operator>.greaterEqualsThan tmp___0 >= 26U
<operator>.cast (int )*(a + c)
<operator>.cast (int )*(b + c)
<operator>.notEquals first[c] != second[c]
RETURN return (0); return (0);
<operator>.addition a + c
<operator>.subtraction (int )*(a + c) - 97
<operator>.addition b + c
<operator>.subtraction (int )*(b + c) - 97
LITERAL 0 return (0);
<operator>.addition a + c
<operator>.addition b + c
<operator>.indirectIndexAccess first[tmp]
<operator>.indirectIndexAccess second[tmp___0]
UNKNOWN int int
<operator>.indirection *(a + c)
<operator>.indirectIndexAccess first[(int )*(a + c) - 97]
UNKNOWN int int
<operator>.indirection *(b + c)
<operator>.indirectIndexAccess second[(int )*(b + c) - 97]
<operator>.indirectIndexAccess first[c]
<operator>.indirectIndexAccess second[c]
<operator>.cast (int )*(a + c)
<operator>.cast (int )*(b + c)
UNKNOWN int int
<operator>.indirection *(a + c)
UNKNOWN int int
<operator>.indirection *(b + c)
>>>PDG&56 0->2 0->3 0->4 0->5 0->6 0->7 0->8 0->9 0->10 0->11 0->14 0->15 0->16 0->17 0->18 0->19 0->20 0->21 0->23 0->25 0->26 0->27 0->28 0->32 0->33 0->34 0->35 0->36 0->37 0->38 0->39 2->33 3->35 4->1 4->1 5->1 5->27 6->1 6->1 7->1 7->28 8->23 8->33 8->38 9->25 9->35 9->39 10->1 10->16 11->1 12->1 12->1 12->12 12->18 12->19 12->27 12->40 13->1 13->1 13->13 13->20 13->21 13->28 13->41 14->1 14->1 14->14 14->22 14->23 14->29 14->33 14->34 14->38 14->42 14->43 14->44 14->50 14->52 14->53 15->1 15->1 15->15 15->24 15->25 15->30 15->35 15->36 15->39 15->45 15->46 15->47 15->51 15->54 15->55 16->1 16->1 16->11 16->26 16->31 16->48 16->49 17->11 18->1 18->1 19->1 19->27 20->1 20->1 21->1 21->28 22->1 22->1 23->1 23->33 23->38 24->1 24->1 25->1 25->35 25->39 26->1 26->16 27->1 27->12 27->12 27->19 28->1 28->13 28->13 28->21 29->1 30->1 31->1 31->1 31->1 31->16 31->26 31->32 32->1 33->1 35->1 37->32
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; int check_anagram ( char * a , char * b ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; void main ( void ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int printf ( char const * format , ... ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { } } } void megaInit ( void ) { { } } int check_anagram ( char * a , char * b ) { int first [ 26 ] ; unsigned int tmp ; int second [ 26 ] ; unsigned int tmp___0 ; int c ; { first [ 0 ] = 0 ; tmp = 1U ; while ( ! ( tmp >= 26U ) ) { first [ tmp ] = 0 ; tmp ++ ; } second [ 0 ] = 0 ; tmp___0 = 1U ; while ( ! ( tmp___0 >= 26U ) ) { second [ tmp___0 ] = 0 ; tmp___0 ++ ; } c = 0 ; while ( ( int ) * ( a + c ) != 0 ) { ( first [ ( int ) * ( a + c ) - 97 ] ) ++ ; c ++ ; } c = 0 ; while ( ( int ) * ( b + c ) != 0 ) { ( second [ ( int ) * ( b + c ) - 97 ] ) ++ ; c ++ ; } c = 0 ; while ( c < 26 ) { if ( first [ c ] != second [ c ] ) { return ( 0 ) ; } c ++ ; } return ( 1 ) ; } } void main ( void ) { { megaInit ( ) ; } }
>>>Func
METHOD findComplement
METHOD_RETURN int
PARAM int num
<operator>.assignment TotalBits = 0
<operator>.assignment temp = num
<operator>.assignment flipNumber = 1
<operator>.assignment i = 1
<operators>.assignmentXor num ^= flipNumber
RETURN return (num); return (num);
IDENTIFIER temp while (temp)
<operator>.lessThan i < TotalBits
IDENTIFIER num return (num);
<operator>.postIncrement TotalBits ++
<operators>.assignmentArithmeticShiftRight temp >>= 1
<operator>.assignment tmp = UINT32_C(1)
<operator>.assignmentPlus flipNumber += tmp << i
<operator>.postIncrement i ++
UINT32_C UINT32_C(1)
<operator>.shiftLeft tmp << i
>>>PDG&19 0->2 0->3 0->4 0->5 0->6 0->7 0->9 0->10 0->11 0->12 0->13 0->15 0->16 0->17 0->18 2->4 2->7 3->1 3->10 3->12 4->1 4->1 4->13 5->1 5->7 5->15 6->1 6->10 7->1 7->1 7->11 8->1 10->1 10->1 10->1 10->10 10->14 10->15 10->16 10->17 10->18 10->18 11->8 12->1 12->10 13->1 14->1 14->1 14->18 15->1 15->1 15->7 16->1 16->10 17->14 18->1 18->15 18->15 18->16
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; int findComplement ( int num ) ; extern unsigned long strlen ( char const * s ) ; void main ( void ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int printf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern int scanf ( char const * format , ... ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern float strtof ( char const * str , char const * endptr ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; extern int ( /* missing proto */ UINT32_C ) ( ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; void megaInit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { } } } void main ( void ) { { megaInit ( ) ; } } int findComplement ( int num ) { int TotalBits ; int temp ; int i ; int flipNumber ; int tmp ; { TotalBits = 0 ; temp = num ; while ( temp ) { TotalBits ++ ; temp >>= 1 ; } flipNumber = 1 ; i = 1 ; while ( i < TotalBits ) { tmp = UINT32_C ( 1 ) ; flipNumber += tmp << i ; i ++ ; } num ^= flipNumber ; return ( num ) ; } }
>>>Func
METHOD _1_stringEncoder
METHOD_RETURN void
PARAM int n
PARAM char str[]
BLOCK <empty> <empty>
<operator>.assignment encodeStrings_i3 = 0
IDENTIFIER n switch(n)
LITERAL 8 <empty>
<operator>.assignment str[encodeStrings_i3] = '\n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 7 <empty>
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 6 <empty>
<operator>.assignment str[encodeStrings_i3] = '\n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'S'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'o'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'y'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ':'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 5 <empty>
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 4 <empty>
<operator>.assignment str[encodeStrings_i3] = 'Y'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'o'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'u'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ':'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 3 <empty>
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 2 <empty>
<operator>.assignment str[encodeStrings_i3] = 'N'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'u'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'm'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'b'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '#'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ':'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 1 <empty>
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 0 <empty>
<operator>.assignment str[encodeStrings_i3] = 'E'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'h'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'i'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'z'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'o'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'f'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'h'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'y'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ':'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
>>>PDG&196 0->2 0->3 0->4 0->5 0->6 0->7 0->8 0->9 0->10 0->11 0->12 0->13 0->14 0->15 0->16 0->17 0->18 0->19 0->20 0->21 0->22 0->23 0->24 0->25 0->26 0->27 0->28 0->29 0->30 0->31 0->32 0->33 0->34 0->35 0->36 0->37 0->38 0->39 0->40 0->41 0->42 0->43 0->44 0->45 0->46 0->47 0->48 0->49 0->50 0->51 0->52 0->53 0->54 0->55 0->56 0->57 0->58 0->59 0->60 0->61 0->62 0->63 0->64 0->65 0->66 0->67 0->68 0->69 0->70 0->71 0->72 0->73 0->74 0->75 0->76 0->77 0->78 0->79 0->80 0->81 0->82 0->83 0->84 0->85 0->86 0->87 0->88 0->89 0->90 0->91 0->92 0->93 0->94 0->95 0->96 0->97 0->98 0->99 0->100 0->101 0->102 0->103 0->104 0->105 0->106 0->107 0->108 0->109 0->110 0->111 0->112 0->113 0->114 0->115 0->116 0->117 0->118 0->119 0->120 0->121 0->122 0->123 0->124 0->125 0->126 0->127 0->128 0->129 0->130 0->131 0->132 0->133 0->134 0->135 0->136 0->137 0->138 0->139 0->140 0->141 0->142 0->143 0->144 0->145 0->146 0->147 0->148 0->149 0->150 0->151 0->152 0->153 0->154 0->155 0->156 0->157 0->158 0->159 0->160 0->161 0->162 0->163 0->164 0->165 0->166 0->167 0->168 0->169 0->170 0->171 0->172 0->173 0->174 0->175 0->176 0->177 0->178 0->179 0->180 0->181 0->182 0->183 0->184 0->185 0->186 0->187 0->188 0->189 0->190 0->191 0->192 0->193 0->194 0->195 2->1 3->1 5->1 5->1 5->9 5->14 5->23 5->56 5->65 5->96 5->103 5->130 5->137 8->1 9->11 10->1 10->1 11->1 11->1 13->1 14->16 15->1 16->18 17->1 18->20 19->1 19->1 20->1 20->1 22->1 23->25 24->1 25->27 26->1 27->29 29->31 30->1 31->33 32->1 33->35 34->1 35->37 37->39 39->41 41->43 42->1 43->45 44->1 45->47 46->1 47->49 48->1 49->51 50->1 51->53 52->1 52->1 53->1 53->1 55->1 56->58 57->1 58->60 59->1 60->62 61->1 61->1 62->1 62->1 64->1 65->67 66->1 67->69 68->1 69->71 71->73 73->75 74->1 75->77 76->1 77->79 79->81 80->1 81->83 82->1 83->85 84->1 85->87 86->1 87->89 89->91 90->1 91->93 92->1 92->1 93->1 93->1 95->1 96->98 97->1 98->100 99->1 99->1 100->1 100->1 102->1 103->105 104->1 105->107 106->1 107->109 108->1 109->111 110->1 111->113 112->1 113->115 115->117 116->1 117->119 118->1 119->121 120->1 121->123 122->1 123->125 124->1 125->127 126->1 126->1 127->1 127->1 129->1 130->132 131->1 132->134 133->1 133->1 134->1 134->1 136->1 137->139 138->1 139->141 141->143 143->145 145->147 147->149 149->151 151->153 153->155 155->157 156->1 157->159 158->1 159->161 160->1 161->163 163->165 165->167 166->1 167->169 168->1 169->171 171->173 172->1 173->175 174->1 175->177 176->1 177->179 179->181 181->183 183->185 184->1 185->187 186->1 187->189 188->1 189->191 190->1 191->193 192->1 193->195 194->1 194->1 195->1 195->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fclose ( void * stream ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int close ( int filedes ) ; char * * _global_argv = ( char * * ) 0 ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int ( /* missing proto */ cocktailSort ) ( ) ; extern int fcntl ( int filedes , int cmd , ... ) ; void encodeStrings_litStr2_i $ nit ( void ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern int raise ( int sig ) ; void encodeStrings_litStr5_i $ nit ( void ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; void encodeStrings_litStr8_i $ nit ( void ) ; extern int ( /* missing proto */ malloc ) ( ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern int ( /* missing proto */ free ) ( ) ; extern unsigned long strlen ( char const * s ) ; int main ( int _formal_argc , char * * _formal_argv , char * * _formal_envp ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; void encodeStrings_litStr0_i $ nit ( void ) ; int _global_argc = 0 ; void megaInit ( void ) ; char * * _global_envp = ( char * * ) 0 ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; void encodeStrings_litStr3_i $ nit ( void ) ; extern int ( /* missing proto */ printf ) ( ) ; extern int ( /* missing proto */ scanf ) ( ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; void encodeStrings_litStr6_i $ nit ( void ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern double strtod ( char const * str , char const * endptr ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; void encodeStrings_litStr1_i $ nit ( void ) ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; void encodeStrings_litStr4_i $ nit ( void ) ; char encodeStrings_litStr8 [ 2 ] ; char encodeStrings_litStr7 [ 4 ] ; char encodeStrings_litStr6 [ 16 ] ; void encodeStrings_litStr7_i $ nit ( void ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; char encodeStrings_litStr5 [ 4 ] ; char encodeStrings_litStr4 [ 15 ] ; extern double sqrt ( double x ) ; extern int open ( char const * filename , int oflag , ... ) ; char encodeStrings_litStr3 [ 3 ] ; char encodeStrings_litStr2 [ 13 ] ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; char encodeStrings_litStr1 [ 3 ] ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; char encodeStrings_litStr0 [ 30 ] ; void encodeStrings_litStr1_i $ nit ( void ) { { } } void encodeStrings_litStr6_i $ nit ( void ) { { } } void encodeStrings_litStr0_i $ nit ( void ) { { } } void encodeStrings_litStr5_i $ nit ( void ) { { } } void encodeStrings_litStr2_i $ nit ( void ) { { } } void encodeStrings_litStr3_i $ nit ( void ) { { } } int main ( int _formal_argc , char * * _formal_argv , char * * _formal_envp ) { int i ; int n ; int * arr ; int tmp ; int _BARRIER_0 ; { megaInit ( ) ; _global_argc = _formal_argc ; _global_argv = _formal_argv ; _global_envp = _formal_envp ; _BARRIER_0 = 1 ; _1_stringEncoder ( 0 , encodeStrings_litStr0 ) ; printf ( encodeStrings_litStr0 ) ; _1_stringEncoder ( 1 , encodeStrings_litStr1 ) ; scanf ( encodeStrings_litStr1 , & n ) ; tmp = malloc ( 4UL * ( unsigned long ) n ) ; arr = ( int * ) tmp ; i = 0 ; while ( i < n ) { _1_stringEncoder ( 2 , encodeStrings_litStr2 ) ; printf ( encodeStrings_litStr2 , i + 1 ) ; _1_stringEncoder ( 3 , encodeStrings_litStr3 ) ; scanf ( encodeStrings_litStr3 , arr + i ) ; i ++ ; } _1_stringEncoder ( 4 , encodeStrings_litStr4 ) ; printf ( encodeStrings_litStr4 ) ; i = 0 ; while ( i < n ) { _1_stringEncoder ( 5 , encodeStrings_litStr5 ) ; printf ( encodeStrings_litStr5 , * ( arr + i ) ) ; i ++ ; } cocktailSort ( arr , n ) ; _1_stringEncoder ( 6 , encodeStrings_litStr6 ) ; printf ( encodeStrings_litStr6 ) ; i = 0 ; while ( i < n ) { _1_stringEncoder ( 7 , encodeStrings_litStr7 ) ; printf ( encodeStrings_litStr7 , * ( arr + i ) ) ; i ++ ; } _1_stringEncoder ( 8 , encodeStrings_litStr8 ) ; printf ( encodeStrings_litStr8 ) ; free ( arr ) ; return ( 0 ) ; } } void megaInit ( void ) { { encodeStrings_litStr8_i $ nit ( ) ; encodeStrings_litStr7_i $ nit ( ) ; encodeStrings_litStr6_i $ nit ( ) ; encodeStrings_litStr5_i $ nit ( ) ; encodeStrings_litStr4_i $ nit ( ) ; encodeStrings_litStr3_i $ nit ( ) ; encodeStrings_litStr2_i $ nit ( ) ; encodeStrings_litStr1_i $ nit ( ) ; encodeStrings_litStr0_i $ nit ( ) ; } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { case 8 : str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 7 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 6 : str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 5 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 4 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 3 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 2 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 1 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 0 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; } } } void encodeStrings_litStr8_i $ nit ( void ) { { } } void encodeStrings_litStr7_i $ nit ( void ) { { } } void encodeStrings_litStr4_i $ nit ( void ) { { } }
>>>Func
METHOD _1_stringEncoder
METHOD_RETURN void
PARAM int n
PARAM char str[]
BLOCK <empty> <empty>
<operator>.assignment encodeStrings_i3 = 0
IDENTIFIER n switch(n)
LITERAL 1 <empty>
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'l'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 0 <empty>
<operator>.assignment str[encodeStrings_i3] = 'E'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'c'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'i'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'm'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'l'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'u'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'm'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'b'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ':'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
>>>PDG&63 0->2 0->3 0->4 0->5 0->6 0->7 0->8 0->9 0->10 0->11 0->12 0->13 0->14 0->15 0->16 0->17 0->18 0->19 0->20 0->21 0->22 0->23 0->24 0->25 0->26 0->27 0->28 0->29 0->30 0->31 0->32 0->33 0->34 0->35 0->36 0->37 0->38 0->39 0->40 0->41 0->42 0->43 0->44 0->45 0->46 0->47 0->48 0->49 0->50 0->51 0->52 0->53 0->54 0->55 0->56 0->57 0->58 0->59 0->60 0->61 0->62 2->1 3->1 5->1 5->1 5->9 5->18 8->1 9->11 10->1 11->13 12->1 13->15 14->1 14->1 15->1 15->1 17->1 18->20 20->22 21->1 22->24 24->26 26->28 28->30 29->1 30->32 32->34 33->1 34->36 35->1 36->38 38->40 39->1 40->42 41->1 42->44 44->46 45->1 46->48 47->1 48->50 49->1 50->52 51->1 52->54 53->1 54->56 55->1 56->58 57->1 58->60 59->1 60->62 61->1 61->1 62->1 62->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fclose ( void * stream ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; char * * _global_argv = ( char * * ) 0 ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int ( /* missing proto */ decimal2Hexadecimal ) ( ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; int main ( int _formal_argc , char * * _formal_argv , char * * _formal_envp ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void encodeStrings_litStr0_i $ nit ( void ) ; int _global_argc = 0 ; void megaInit ( void ) ; char * * _global_envp = ( char * * ) 0 ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int ( /* missing proto */ printf ) ( ) ; extern int ( /* missing proto */ scanf ) ( ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern double strtod ( char const * str , char const * endptr ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern void signal ( int sig , void * func ) ; extern double difftime ( long tv1 , long tv0 ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; void encodeStrings_litStr1_i $ nit ( void ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; char encodeStrings_litStr1 [ 4 ] ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; char encodeStrings_litStr0 [ 23 ] ; int main ( int _formal_argc , char * * _formal_argv , char * * _formal_envp ) { long decimalnum ; int _BARRIER_0 ; { megaInit ( ) ; _global_argc = _formal_argc ; _global_argv = _formal_argv ; _global_envp = _formal_envp ; _BARRIER_0 = 1 ; _1_stringEncoder ( 0 , encodeStrings_litStr0 ) ; printf ( encodeStrings_litStr0 ) ; _1_stringEncoder ( 1 , encodeStrings_litStr1 ) ; scanf ( encodeStrings_litStr1 , & decimalnum ) ; decimal2Hexadecimal ( decimalnum ) ; return ( 0 ) ; } } void encodeStrings_litStr1_i $ nit ( void ) { { } } void megaInit ( void ) { { encodeStrings_litStr1_i $ nit ( ) ; encodeStrings_litStr0_i $ nit ( ) ; } } void encodeStrings_litStr0_i $ nit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { case 1 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 0 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; } } }
>>>Func
METHOD lengthOfLongestSubstring
METHOD_RETURN int
PARAM char *s
<operator>.assignment cur_max = 0
<operator>.assignment max = 0
<operator>.assignment end = 0
memset memset(counter  0  sizeof(int ) * 255UL)
RETURN return (max); return (max);
LITERAL 1 while (1)
<operator>.greaterEqualsThan cur_max >= max
IDENTIFIER max return (max);
<operator>.multiplication sizeof(int ) * 255UL
<operator>.assignment tmp = strlen(s)
<operator>.assignment max = cur_max
<operator>.sizeOf sizeof(int )
<operator>.logicalNot ! (end < tmp)
<operator>.equals counter[*(s + end)] == 0
strlen strlen(s)
<operator>.postIncrement (counter[*(s + end)]) ++
<operator>.postIncrement end ++
<operator>.postIncrement cur_max ++
<operator>.lessThan end < tmp
<operator>.assignment c = *(s + end)
memset memset(counter  0  255UL * sizeof(int ))
<operator>.assignment cur_max = 0
<operator>.greaterEqualsThan cur_max >= max
<operator>.notEquals (int )*(s + (end - 1)) != (int )c
<operator>.addition s + end
<operator>.multiplication 255UL * sizeof(int )
<operator>.assignment max = cur_max
<operator>.postDecrement end --
<operator>.addition s + end
<operator>.addition s + end
<operator>.sizeOf sizeof(int )
<operator>.cast (int )*(s + (end - 1))
<operator>.cast (int )c
<operator>.addition s + (end - 1)
<operator>.subtraction end - 1
<operator>.indirectIndexAccess counter[*(s + end)]
<operator>.indirection *(s + end)
<operator>.indirectIndexAccess counter[*(s + end)]
<operator>.indirection *(s + end)
<operator>.indirection *(s + end)
UNKNOWN int int
<operator>.indirection *(s + (end - 1))
UNKNOWN int int
>>>PDG&46 0->2 0->3 0->4 0->5 0->6 0->8 0->9 0->10 0->11 0->13 0->16 0->17 0->19 0->20 0->21 0->23 0->24 0->25 0->26 0->27 0->28 0->29 0->30 0->31 0->32 0->35 0->36 0->37 2->1 2->17 3->1 3->9 3->20 3->25 4->1 4->9 4->25 5->1 5->1 5->21 6->1 6->1 6->1 6->16 6->18 6->23 7->1 9->1 9->1 9->1 9->10 9->13 9->13 10->7 11->6 12->1 12->1 12->21 13->1 13->1 13->1 13->10 14->1 15->1 15->1 15->12 15->15 15->16 15->17 15->21 15->27 15->38 15->39 16->1 16->1 16->18 16->18 16->19 16->20 16->22 16->23 16->23 16->24 16->25 16->26 16->28 16->31 16->32 16->33 16->34 16->35 16->36 16->37 16->40 16->41 16->42 16->43 16->44 16->45 17->1 17->12 17->27 17->31 17->32 17->36 18->1 18->1 18->16 19->1 19->1 19->21 20->1 20->9 20->25 21->1 21->1 21->15 21->15 21->19 21->27 21->31 21->32 21->37 22->1 22->1 22->26 22->35 23->1 23->1 23->1 23->16 23->18 24->1 24->9 24->20 24->25 25->9 25->29 25->29 26->1 26->1 26->1 26->26 26->30 26->34 26->35 26->36 26->37 26->43 26->44 26->45 28->23 29->1 29->9 29->25 30->1 30->37 31->1 33->1 34->1 35->1 36->1 36->1 37->1 37->21 37->30 37->36 37->36
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern int ( /* missing proto */ strlen ) ( ) ; void main ( void ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int printf ( char const * format , ... ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; int lengthOfLongestSubstring ( char * s ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int ( /* missing proto */ memset ) ( ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; void megaInit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { } } } void main ( void ) { { megaInit ( ) ; } } int lengthOfLongestSubstring ( char * s ) { int cur_max ; int max ; int counter [ 255 ] ; int end ; char c ; int tmp ; { cur_max = 0 ; max = 0 ; end = 0 ; memset ( counter , 0 , sizeof ( int ) * 255UL ) ; while ( 1 ) { tmp = strlen ( s ) ; if ( ! ( end < tmp ) ) { break ; } if ( counter [ * ( s + end ) ] == 0 ) { ( counter [ * ( s + end ) ] ) ++ ; end ++ ; cur_max ++ ; } else { c = * ( s + end ) ; memset ( counter , 0 , 255UL * sizeof ( int ) ) ; if ( cur_max >= max ) { max = cur_max ; } cur_max = 0 ; while ( ( int ) * ( s + ( end - 1 ) ) != ( int ) c ) { end -- ; } } } if ( cur_max >= max ) { max = cur_max ; } return ( max ) ; } }
>>>Func
METHOD _1_stringEncoder
METHOD_RETURN void
PARAM int n
PARAM char str[]
BLOCK <empty> <empty>
<operator>.assignment encodeStrings_i3 = 0
IDENTIFIER n switch(n)
LITERAL 0 <empty>
<operator>.assignment str[encodeStrings_i3] = 'S'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'i'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'g'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'f'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'c'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'o'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'c'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'i'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'o'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ':'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
>>>PDG&72 0->2 0->3 0->4 0->5 0->6 0->7 0->8 0->9 0->10 0->11 0->12 0->13 0->14 0->15 0->16 0->17 0->18 0->19 0->20 0->21 0->22 0->23 0->24 0->25 0->26 0->27 0->28 0->29 0->30 0->31 0->32 0->33 0->34 0->35 0->36 0->37 0->38 0->39 0->40 0->41 0->42 0->43 0->44 0->45 0->46 0->47 0->48 0->49 0->50 0->51 0->52 0->53 0->54 0->55 0->56 0->57 0->58 0->59 0->60 0->61 0->62 0->63 0->64 0->65 0->66 0->67 0->68 0->69 0->70 0->71 2->1 3->1 5->1 5->1 5->9 8->1 9->11 11->13 13->15 15->17 17->19 18->1 19->21 21->23 23->25 24->1 25->27 27->29 29->31 30->1 31->33 33->35 35->37 37->39 39->41 40->1 41->43 43->45 45->47 46->1 47->49 49->51 50->1 51->53 52->1 53->55 54->1 55->57 56->1 57->59 58->1 59->61 60->1 61->63 62->1 63->65 64->1 65->67 66->1 67->69 68->1 69->71 70->1 70->1 71->1 71->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; char * * _global_argv = ( char * * ) 0 ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; int main ( int argc , char * * argv , char * * _formal_envp ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; void encodeStrings_litStr0_i $ nit ( void ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; int _global_argc = 0 ; void megaInit ( void ) ; char * * _global_envp = ( char * * ) 0 ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int ( /* missing proto */ printf ) ( ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern int ( /* missing proto */ stringConcat ) ( ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; char encodeStrings_litStr0 [ 32 ] ; int main ( int argc , char * * argv , char * * _formal_envp ) { char * str1 ; char * str2 ; int _BARRIER_0 ; { megaInit ( ) ; _global_argc = argc ; _global_argv = argv ; _global_envp = _formal_envp ; _BARRIER_0 = 1 ; if ( argc < 2 ) { return ( 1 ) ; } str1 = * ( argv + 1 ) ; str2 = * ( argv + 2 ) ; stringConcat ( str1 , str2 ) ; _1_stringEncoder ( 0 , encodeStrings_litStr0 ) ; printf ( encodeStrings_litStr0 , str1 ) ; return ( 0 ) ; } } void encodeStrings_litStr0_i $ nit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { case 0 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; } } } void megaInit ( void ) { { encodeStrings_litStr0_i $ nit ( ) ; } }
>>>Func
METHOD main
METHOD_RETURN int
PARAM int _formal_argc
PARAM char **_formal_argv
PARAM char **_formal_envp
megaInit megaInit()
<operator>.assignment _global_argc = _formal_argc
<operator>.assignment _global_argv = _formal_argv
<operator>.assignment _global_envp = _formal_envp
<operator>.assignment _BARRIER_0 = 1
_1_stringEncoder _1_stringEncoder(0, encodeStrings_litStr0)
scanf scanf(encodeStrings_litStr0, & n)
<operator>.assignment i = 0
RETURN return (0); return (0);
<operator>.lessThan i < n
LITERAL 0 return (0);
_1_stringEncoder _1_stringEncoder(1, encodeStrings_litStr1)
scanf scanf(encodeStrings_litStr1, & s)
<operator>.assignment j = 0
_1_stringEncoder _1_stringEncoder(2, encodeStrings_litStr2)
scanf scanf(encodeStrings_litStr2, & q)
<operator>.assignment k = 0
<operator>.assignment total = s
<operator>.assignment ch = 0
<operator>.assignment j = 0
_1_stringEncoder _1_stringEncoder(3, encodeStrings_litStr3)
printf printf(encodeStrings_litStr3, i + 1, ch)
<operator>.postIncrement i ++
<operator>.lessThan j < s
<operator>.lessThan k < q
<operator>.lessThan j < q
<operator>.assignment v[j] = 1
gets gets(ss[j])
<operator>.postIncrement j ++
gets gets(qs[k])
<operator>.postIncrement k ++
<operator>.assignment k = 0
<operator>.postIncrement j ++
<operator>.addition i + 1
<operator>.lessThan k < s
<operator>.assignment tmp = strcmp(ss[k], qs[j])
<operator>.postIncrement k ++
<operator>.equals tmp == 0
<operator>.equals total == 1
strcmp strcmp(ss[k], qs[j])
<operator>.equals v[k] == 1
<operator>.equals v[k] == 1
<operator>.assignment tmp___0 = strcmp(ss[k], qs[j])
<operator>.notEquals total != 1
<operator>.equals tmp___0 == 0
<operator>.postDecrement (v[k]) --
<operator>.postDecrement total --
strcmp strcmp(ss[k], qs[j])
<operator>.postIncrement ch ++
<operator>.assignment total = s
<operator>.assignment l = 0
<operator>.postDecrement (v[k]) --
<operator>.postDecrement total --
<operator>.lessThan l < s
<operator>.assignment v[l] = 1
<operator>.postIncrement l ++
<operator>.addressOf & s
<operator>.addressOf & q
<operator>.indirectIndexAccess v[j]
<operator>.indirectIndexAccess ss[j]
<operator>.indirectIndexAccess qs[k]
<operator>.indirectIndexAccess ss[k]
<operator>.indirectIndexAccess qs[j]
<operator>.indirectIndexAccess v[k]
<operator>.indirectIndexAccess v[k]
<operator>.indirectIndexAccess ss[k]
<operator>.indirectIndexAccess qs[j]
<operator>.indirectIndexAccess v[k]
<operator>.indirectIndexAccess v[k]
<operator>.indirectIndexAccess v[l]
>>>PDG&75 0->2 0->3 0->4 0->5 0->6 0->7 0->8 0->9 0->10 0->11 0->12 0->13 0->14 0->15 0->16 0->17 0->18 0->19 0->20 0->21 0->22 0->23 0->24 0->25 0->26 0->27 0->28 0->29 0->30 0->31 0->33 0->35 0->36 0->37 0->38 0->39 0->41 0->42 0->43 0->45 0->46 0->48 0->49 0->51 0->53 0->54 0->55 0->57 0->58 0->59 0->60 2->6 3->7 4->8 5->1 6->1 6->1 6->1 7->1 7->1 7->1 8->1 8->1 8->1 9->1 9->1 10->1 11->1 11->1 11->14 12->1 12->14 13->1 14->1 14->1 14->1 14->14 14->16 14->17 14->18 14->19 14->20 14->21 14->22 14->23 14->24 14->25 14->26 14->26 14->27 14->27 14->28 14->29 14->30 14->38 14->38 14->61 14->62 15->13 16->1 17->1 17->1 17->22 17->28 17->39 17->54 17->58 18->28 19->1 20->1 20->1 20->29 20->30 21->1 21->29 22->1 22->1 22->1 22->43 22->48 23->1 23->26 23->53 24->1 24->30 25->1 25->26 26->1 26->1 26->1 26->1 26->25 27->1 27->14 28->1 28->17 28->22 28->28 28->31 28->32 28->33 28->33 28->39 28->63 28->64 29->1 29->1 29->29 29->30 29->34 29->35 29->35 29->65 30->1 30->1 30->1 30->20 30->29 30->30 30->36 30->37 30->37 30->39 31->1 31->1 32->1 32->1 33->1 33->28 34->1 34->1 35->1 35->29 36->1 36->39 37->1 37->30 39->1 39->1 39->1 39->17 39->28 39->39 39->40 39->41 39->41 39->42 39->43 39->44 39->54 39->58 39->66 39->67 40->1 40->1 40->42 41->1 41->39 42->1 42->1 42->45 42->68 43->1 43->1 43->46 43->48 43->69 44->1 44->1 44->40 44->40 44->52 44->52 45->1 45->1 45->46 45->48 45->50 46->1 46->1 46->45 46->47 46->49 46->52 46->56 46->70 46->71 47->1 47->1 47->49 48->1 48->43 48->50 48->51 48->51 48->72 49->1 49->1 49->53 49->54 49->55 49->56 49->57 49->58 49->73 50->1 50->1 50->45 50->46 51->1 51->43 52->1 52->1 52->44 52->44 52->47 52->47 53->1 53->26 54->1 54->57 55->1 55->58 56->1 56->1 56->45 56->46 57->1 57->1 57->43 57->48 58->1 58->1 58->39 58->58 58->59 58->60 58->60 58->74 59->1 59->1 60->1 60->58
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern void exit ( int status ) ; extern int pthread_cond_signal ( int * cond ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; char * * _global_argv = ( char * * ) 0 ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; void encodeStrings_litStr2_i $ nit ( void ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern int raise ( int sig ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; int main ( int _formal_argc , char * * _formal_argv , char * * _formal_envp ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; void encodeStrings_litStr0_i $ nit ( void ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; int _global_argc = 0 ; void megaInit ( void ) ; char * * _global_envp = ( char * * ) 0 ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; void encodeStrings_litStr3_i $ nit ( void ) ; extern int ( /* missing proto */ printf ) ( ) ; extern int ( /* missing proto */ gets ) ( ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern int ( /* missing proto */ scanf ) ( ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern int ( /* missing proto */ strcmp ) ( ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; void encodeStrings_litStr1_i $ nit ( void ) ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; char encodeStrings_litStr3 [ 14 ] ; char encodeStrings_litStr2 [ 4 ] ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; char encodeStrings_litStr1 [ 4 ] ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; char encodeStrings_litStr0 [ 3 ] ; void encodeStrings_litStr2_i $ nit ( void ) { { } } int main ( int _formal_argc , char * * _formal_argv , char * * _formal_envp ) { int n ; int q ; int i ; int j ; int k ; int total ; int ch ; int s ; int v [ 150 ] ; int l ; char ss [ 150 ] [ 1100 ] ; char qs [ 150 ] [ 1100 ] ; int tmp ; int tmp___0 ; int _BARRIER_0 ; { megaInit ( ) ; _global_argc = _formal_argc ; _global_argv = _formal_argv ; _global_envp = _formal_envp ; _BARRIER_0 = 1 ; _1_stringEncoder ( 0 , encodeStrings_litStr0 ) ; scanf ( encodeStrings_litStr0 , & n ) ; i = 0 ; while ( i < n ) { _1_stringEncoder ( 1 , encodeStrings_litStr1 ) ; scanf ( encodeStrings_litStr1 , & s ) ; j = 0 ; while ( j < s ) { v [ j ] = 1 ; gets ( ss [ j ] ) ; j ++ ; } _1_stringEncoder ( 2 , encodeStrings_litStr2 ) ; scanf ( encodeStrings_litStr2 , & q ) ; k = 0 ; while ( k < q ) { gets ( qs [ k ] ) ; k ++ ; } total = s ; ch = 0 ; j = 0 ; while ( j < q ) { k = 0 ; while ( k < s ) { tmp = strcmp ( ss [ k ] , qs [ j ] ) ; if ( tmp == 0 ) { if ( v [ k ] == 1 ) { if ( total != 1 ) { ( v [ k ] ) -- ; total -- ; } } } if ( total == 1 ) { if ( v [ k ] == 1 ) { tmp___0 = strcmp ( ss [ k ] , qs [ j ] ) ; if ( tmp___0 == 0 ) { ch ++ ; total = s ; l = 0 ; while ( l < s ) { v [ l ] = 1 ; l ++ ; } ( v [ k ] ) -- ; total -- ; } } } k ++ ; } j ++ ; } _1_stringEncoder ( 3 , encodeStrings_litStr3 ) ; printf ( encodeStrings_litStr3 , i + 1 , ch ) ; i ++ ; } return ( 0 ) ; } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { case 3 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 2 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 1 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 0 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; } } } void encodeStrings_litStr0_i $ nit ( void ) { { } } void encodeStrings_litStr3_i $ nit ( void ) { { } } void encodeStrings_litStr1_i $ nit ( void ) { { } } void megaInit ( void ) { { encodeStrings_litStr3_i $ nit ( ) ; encodeStrings_litStr2_i $ nit ( ) ; encodeStrings_litStr1_i $ nit ( ) ; encodeStrings_litStr0_i $ nit ( ) ; } }
>>>Func
METHOD main
METHOD_RETURN int
PARAM int argc
PARAM char **argv
PARAM char **_formal_envp
BLOCK <empty> <empty>
megaInit megaInit()
<operator>.assignment _global_argc = argc
<operator>.assignment _global_argv = argv
<operator>.assignment _global_envp = _formal_envp
<operator>.assignment _BARRIER_0 = 1
readfile readfile(*(argv + 1))
exit exit(0)
<operator>.addition argv + 1
>>>PDG&14 0->2 0->3 0->4 0->5 0->6 0->7 0->8 0->9 0->10 0->12 0->13 2->7 3->8 3->13 4->9 6->1 7->1 7->1 7->1 8->1 8->1 9->1 9->1 9->1 10->1 10->1 11->1 11->1 13->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern int ( /* missing proto */ exit ) ( ) ; extern int fclose ( void * stream ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; char * * _global_argv = ( char * * ) 0 ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; int main ( int argc , char * * argv , char * * _formal_envp ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; int _global_argc = 0 ; char * * _global_envp = ( char * * ) 0 ; void megaInit ( void ) ; extern int printf ( char const * format , ... ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; extern int ( /* missing proto */ readfile ) ( ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { } } } void megaInit ( void ) { { } } int main ( int argc , char * * argv , char * * _formal_envp ) { int _BARRIER_0 ; { megaInit ( ) ; _global_argc = argc ; _global_argv = argv ; _global_envp = _formal_envp ; _BARRIER_0 = 1 ; readfile ( * ( argv + 1 ) ) ; exit ( 0 ) ; } }
>>>Func
METHOD _1_stringEncoder
METHOD_RETURN void
PARAM int n
PARAM char str[]
BLOCK <empty> <empty>
<operator>.assignment encodeStrings_i3 = 0
IDENTIFIER n switch(n)
LITERAL 13 <empty>
<operator>.assignment str[encodeStrings_i3] = '<'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '<'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '<'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '<'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'T'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'E'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'S'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'T'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'D'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'O'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'N'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'E'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '>'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '>'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '>'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '>'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 12 <empty>
<operator>.assignment str[encodeStrings_i3] = '9'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '9'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '9'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '9'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '9'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '9'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '9'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '9'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '9'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 11 <empty>
<operator>.assignment str[encodeStrings_i3] = '9'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '9'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '9'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '9'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '9'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '9'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '9'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '9'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '9'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 10 <empty>
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '2'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '3'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 9 <empty>
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '2'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '3'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 8 <empty>
<operator>.assignment str[encodeStrings_i3] = '-'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'h'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '2'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '3'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 7 <empty>
<operator>.assignment str[encodeStrings_i3] = '-'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'h'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '2'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '3'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 6 <empty>
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 5 <empty>
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 4 <empty>
<operator>.assignment str[encodeStrings_i3] = '-'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '1'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '2'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '3'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 3 <empty>
<operator>.assignment str[encodeStrings_i3] = '-'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '1'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '2'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '3'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 2 <empty>
<operator>.assignment str[encodeStrings_i3] = '1'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '2'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '3'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 1 <empty>
<operator>.assignment str[encodeStrings_i3] = '1'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '2'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '3'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 0 <empty>
<operator>.assignment str[encodeStrings_i3] = '<'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '<'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '<'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '<'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'T'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'E'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'S'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'T'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'F'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'U'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'N'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'C'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'T'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'I'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'O'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'N'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '>'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '>'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '>'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '>'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
>>>PDG&261 0->2 0->3 0->4 0->5 0->6 0->7 0->8 0->9 0->10 0->11 0->12 0->13 0->14 0->15 0->16 0->17 0->18 0->19 0->20 0->21 0->22 0->23 0->24 0->25 0->26 0->27 0->28 0->29 0->30 0->31 0->32 0->33 0->34 0->35 0->36 0->37 0->38 0->39 0->40 0->41 0->42 0->43 0->44 0->45 0->46 0->47 0->48 0->49 0->50 0->51 0->52 0->53 0->54 0->55 0->56 0->57 0->58 0->59 0->60 0->61 0->62 0->63 0->64 0->65 0->66 0->67 0->68 0->69 0->70 0->71 0->72 0->73 0->74 0->75 0->76 0->77 0->78 0->79 0->80 0->81 0->82 0->83 0->84 0->85 0->86 0->87 0->88 0->89 0->90 0->91 0->92 0->93 0->94 0->95 0->96 0->97 0->98 0->99 0->100 0->101 0->102 0->103 0->104 0->105 0->106 0->107 0->108 0->109 0->110 0->111 0->112 0->113 0->114 0->115 0->116 0->117 0->118 0->119 0->120 0->121 0->122 0->123 0->124 0->125 0->126 0->127 0->128 0->129 0->130 0->131 0->132 0->133 0->134 0->135 0->136 0->137 0->138 0->139 0->140 0->141 0->142 0->143 0->144 0->145 0->146 0->147 0->148 0->149 0->150 0->151 0->152 0->153 0->154 0->155 0->156 0->157 0->158 0->159 0->160 0->161 0->162 0->163 0->164 0->165 0->166 0->167 0->168 0->169 0->170 0->171 0->172 0->173 0->174 0->175 0->176 0->177 0->178 0->179 0->180 0->181 0->182 0->183 0->184 0->185 0->186 0->187 0->188 0->189 0->190 0->191 0->192 0->193 0->194 0->195 0->196 0->197 0->198 0->199 0->200 0->201 0->202 0->203 0->204 0->205 0->206 0->207 0->208 0->209 0->210 0->211 0->212 0->213 0->214 0->215 0->216 0->217 0->218 0->219 0->220 0->221 0->222 0->223 0->224 0->225 0->226 0->227 0->228 0->229 0->230 0->231 0->232 0->233 0->234 0->235 0->236 0->237 0->238 0->239 0->240 0->241 0->242 0->243 0->244 0->245 0->246 0->247 0->248 0->249 0->250 0->251 0->252 0->253 0->254 0->255 0->256 0->257 0->258 0->259 0->260 2->1 3->1 5->1 5->1 5->9 5->52 5->73 5->94 5->119 5->144 5->155 5->166 5->169 5->172 5->183 5->194 5->203 5->212 9->11 11->13 13->15 14->1 15->17 17->19 19->21 21->23 22->1 23->25 24->1 25->27 27->29 28->1 29->31 30->1 31->33 32->1 33->35 34->1 35->37 36->1 37->39 39->41 41->43 43->45 44->1 45->47 46->1 47->49 48->1 48->1 49->1 49->1 52->54 54->56 56->58 58->60 60->62 62->64 64->66 66->68 67->1 68->70 69->1 69->1 70->1 70->1 73->75 75->77 77->79 79->81 81->83 83->85 85->87 87->89 88->1 89->91 90->1 90->1 91->1 91->1 94->96 96->98 98->100 100->102 102->104 104->106 106->108 108->110 109->1 110->112 111->1 112->114 113->1 114->116 115->1 115->1 116->1 116->1 119->121 121->123 123->125 125->127 127->129 129->131 131->133 133->135 134->1 135->137 136->1 137->139 138->1 139->141 140->1 140->1 141->1 141->1 143->1 144->146 145->1 146->148 147->1 148->150 149->1 150->152 151->1 151->1 152->1 152->1 154->1 155->157 156->1 157->159 158->1 159->161 160->1 161->163 162->1 162->1 163->1 163->1 165->1 165->1 166->1 166->1 168->1 168->1 169->1 169->1 171->1 172->174 173->1 174->176 175->1 176->178 177->1 178->180 179->1 179->1 180->1 180->1 182->1 183->185 184->1 185->187 186->1 187->189 188->1 189->191 190->1 190->1 191->1 191->1 193->1 194->196 195->1 196->198 197->1 198->200 199->1 199->1 200->1 200->1 202->1 203->205 204->1 205->207 206->1 207->209 208->1 208->1 209->1 209->1 212->214 214->216 216->218 217->1 218->220 220->222 222->224 223->1 224->226 225->1 226->228 228->230 230->232 231->1 232->234 233->1 234->236 236->238 237->1 238->240 239->1 240->242 241->1 242->244 243->1 244->246 245->1 246->248 247->1 248->250 250->252 252->254 254->256 255->1 256->258 257->1 258->260 259->1 259->1 260->1 260->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern void exit ( int status ) ; extern int pthread_cond_signal ( int * cond ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; char encodeStrings_litStr13 [ 21 ] ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; char encodeStrings_litStr12 [ 10 ] ; void encodeStrings_litStr2_i $ nit ( void ) ; struct timeval { long tv_sec ; long tv_usec ; } ; char encodeStrings_litStr11 [ 10 ] ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int pthread_cond_init ( int * cond , int * attr ) ; void test_c_atoi ( void ) ; extern int pthread_mutex_lock ( int * mutex ) ; extern int ( /* missing proto */ assert ) ( ) ; char encodeStrings_litStr10 [ 12 ] ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; void encodeStrings_litStr5_i $ nit ( void ) ; extern void abort ( ) ; extern int ( /* missing proto */ c_atoi ) ( ) ; void encodeStrings_litStr8_i $ nit ( void ) ; extern int ( /* missing proto */ atoi ) ( ) ; void encodeStrings_litStr12_i $ nit ( void ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; void main ( void ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; void encodeStrings_litStr0_i $ nit ( void ) ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; void encodeStrings_litStr3_i $ nit ( void ) ; extern int ( /* missing proto */ printf ) ( ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; void encodeStrings_litStr6_i $ nit ( void ) ; void encodeStrings_litStr10_i $ nit ( void ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; void encodeStrings_litStr9_i $ nit ( void ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern float strtof ( char const * str , char const * endptr ) ; void encodeStrings_litStr13_i $ nit ( void ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern int strcmp ( char const * a , char const * b ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; void encodeStrings_litStr1_i $ nit ( void ) ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; char encodeStrings_litStr9 [ 12 ] ; void encodeStrings_litStr4_i $ nit ( void ) ; char encodeStrings_litStr8 [ 5 ] ; char encodeStrings_litStr7 [ 5 ] ; char encodeStrings_litStr6 [ 1 ] ; void encodeStrings_litStr7_i $ nit ( void ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; char encodeStrings_litStr5 [ 1 ] ; void encodeStrings_litStr11_i $ nit ( void ) ; extern int open ( char const * filename , int oflag , ... ) ; char encodeStrings_litStr4 [ 5 ] ; extern double sqrt ( double x ) ; char encodeStrings_litStr3 [ 5 ] ; char encodeStrings_litStr2 [ 4 ] ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; char encodeStrings_litStr1 [ 4 ] ; char encodeStrings_litStr0 [ 25 ] ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; void encodeStrings_litStr10_i $ nit ( void ) { { } } void encodeStrings_litStr7_i $ nit ( void ) { { } } void test_c_atoi ( void ) { int tmp ; int tmp___0 ; int tmp___1 ; int tmp___2 ; int tmp___3 ; int tmp___4 ; int tmp___5 ; int tmp___6 ; int tmp___7 ; int tmp___8 ; int tmp___9 ; int tmp___10 ; { _1_stringEncoder ( 0 , encodeStrings_litStr0 ) ; printf ( encodeStrings_litStr0 ) ; _1_stringEncoder ( 1 , encodeStrings_litStr1 ) ; tmp = c_atoi ( encodeStrings_litStr1 ) ; _1_stringEncoder ( 2 , encodeStrings_litStr2 ) ; tmp___0 = atoi ( encodeStrings_litStr2 ) ; assert ( tmp == tmp___0 ) ; _1_stringEncoder ( 3 , encodeStrings_litStr3 ) ; tmp___1 = c_atoi ( encodeStrings_litStr3 ) ; _1_stringEncoder ( 4 , encodeStrings_litStr4 ) ; tmp___2 = atoi ( encodeStrings_litStr4 ) ; assert ( tmp___1 == tmp___2 ) ; _1_stringEncoder ( 5 , encodeStrings_litStr5 ) ; tmp___3 = c_atoi ( encodeStrings_litStr5 ) ; _1_stringEncoder ( 6 , encodeStrings_litStr6 ) ; tmp___4 = atoi ( encodeStrings_litStr6 ) ; assert ( tmp___3 == tmp___4 ) ; _1_stringEncoder ( 7 , encodeStrings_litStr7 ) ; tmp___5 = c_atoi ( encodeStrings_litStr7 ) ; _1_stringEncoder ( 8 , encodeStrings_litStr8 ) ; tmp___6 = atoi ( encodeStrings_litStr8 ) ; assert ( tmp___5 == tmp___6 ) ; _1_stringEncoder ( 9 , encodeStrings_litStr9 ) ; tmp___7 = c_atoi ( encodeStrings_litStr9 ) ; _1_stringEncoder ( 10 , encodeStrings_litStr10 ) ; tmp___8 = atoi ( encodeStrings_litStr10 ) ; assert ( tmp___7 == tmp___8 ) ; _1_stringEncoder ( 11 , encodeStrings_litStr11 ) ; tmp___9 = c_atoi ( encodeStrings_litStr11 ) ; _1_stringEncoder ( 12 , encodeStrings_litStr12 ) ; tmp___10 = atoi ( encodeStrings_litStr12 ) ; assert ( tmp___9 == tmp___10 ) ; _1_stringEncoder ( 13 , encodeStrings_litStr13 ) ; printf ( encodeStrings_litStr13 ) ; return ; } } void encodeStrings_litStr4_i $ nit ( void ) { { } } void encodeStrings_litStr13_i $ nit ( void ) { { } } void main ( void ) { { megaInit ( ) ; } } void encodeStrings_litStr0_i $ nit ( void ) { { } } void encodeStrings_litStr9_i $ nit ( void ) { { } } void encodeStrings_litStr5_i $ nit ( void ) { { } } void encodeStrings_litStr1_i $ nit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { case 13 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 12 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 11 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 10 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 9 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 8 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 7 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 6 : str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 5 : str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 4 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 3 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 2 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 1 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 0 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; } } } void encodeStrings_litStr11_i $ nit ( void ) { { } } void encodeStrings_litStr3_i $ nit ( void ) { { } } void encodeStrings_litStr8_i $ nit ( void ) { { } } void encodeStrings_litStr12_i $ nit ( void ) { { } } void encodeStrings_litStr2_i $ nit ( void ) { { } } void encodeStrings_litStr6_i $ nit ( void ) { { } } void megaInit ( void ) { { encodeStrings_litStr13_i $ nit ( ) ; encodeStrings_litStr12_i $ nit ( ) ; encodeStrings_litStr11_i $ nit ( ) ; encodeStrings_litStr10_i $ nit ( ) ; encodeStrings_litStr9_i $ nit ( ) ; encodeStrings_litStr8_i $ nit ( ) ; encodeStrings_litStr7_i $ nit ( ) ; encodeStrings_litStr6_i $ nit ( ) ; encodeStrings_litStr5_i $ nit ( ) ; encodeStrings_litStr4_i $ nit ( ) ; encodeStrings_litStr3_i $ nit ( ) ; encodeStrings_litStr2_i $ nit ( ) ; encodeStrings_litStr1_i $ nit ( ) ; encodeStrings_litStr0_i $ nit ( ) ; } }
>>>Func
METHOD cmpint
METHOD_RETURN int
PARAM void const   *a
PARAM void const   *b
RETURN return (*((int *)a) - *((int *)b)); return (*((int *)a) - *((int *)b));
<operator>.subtraction *((int *)a) - *((int *)b)
<operator>.cast (int *)a
<operator>.cast (int *)b
>>>PDG&8 0->2 0->3 0->6 0->7 2->6 3->7 4->1 5->1 5->1 5->1 5->4 6->1 7->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; int cmpint ( void const * a , void const * b ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; void main ( void ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int printf ( char const * format , ... ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { } } } void megaInit ( void ) { { } } int cmpint ( void const * a , void const * b ) { { return ( * ( ( int * ) a ) - * ( ( int * ) b ) ) ; } } void main ( void ) { { megaInit ( ) ; } }
>>>Func
METHOD calculate
METHOD_RETURN int
PARAM int scount
PARAM int qcount
PARAM int *icount
<operator>.assignment tmp = malloc(sizeof(int ) * (unsigned long )scount)
<operator>.assignment flags = (int *)tmp
<operator>.assignment in = 0
<operator>.assignment count = 0
<operator>.assignment j = 0
RETURN return (count); return (count);
<operator>.lessThan j < scount
<operator>.lessThan in < qcount
IDENTIFIER count return (count);
malloc malloc(sizeof(int ) * (unsigned long )scount)
<operator>.cast (int *)tmp
<operator>.assignment *(flags + j) = 0
<operator>.postIncrement j ++
<operator>.postIncrement in ++
<operator>.multiplication sizeof(int ) * (unsigned long )scount
<operator>.notEquals *(flags + *(icount + in)) != 1
<operator>.sizeOf sizeof(int )
<operator>.cast (unsigned long )scount
<operator>.assignment *(flags + *(icount + in)) = 1
<operator>.assignment i = 0
<operator>.addition flags + j
<operator>.lessThan i < scount
<operator>.equals i == scount
<operator>.addition flags + *(icount + in)
<operator>.postIncrement i ++
<operator>.postIncrement count ++
<operator>.assignment i = 0
<operator>.assignment *(flags + *(icount + in)) = 1
<operator>.addition flags + *(icount + in)
<operator>.equals *(flags + i) == 0
<operator>.lessThan i < scount
<operator>.addition icount + in
<operator>.assignment *(flags + i) = 0
<operator>.postIncrement i ++
<operator>.addition icount + in
<operator>.addition flags + *(icount + in)
<operator>.addition flags + i
<operator>.addition flags + i
<operator>.addition icount + in
<operator>.indirection *(flags + j)
<operator>.indirection *(flags + *(icount + in))
<operator>.indirection *(flags + *(icount + in))
<operator>.indirection *(icount + in)
<operator>.indirection *(icount + in)
<operator>.indirection *(flags + *(icount + in))
<operator>.indirection *(flags + i)
<operator>.indirection *(flags + i)
<operator>.indirection *(icount + in)
>>>PDG&53 0->2 0->3 0->4 0->6 0->7 0->8 0->9 0->11 0->12 0->13 0->15 0->16 0->17 0->18 0->19 0->20 0->22 0->23 0->24 0->25 0->26 0->27 0->28 0->29 0->30 0->31 0->32 0->33 0->34 0->35 0->36 0->37 0->38 0->39 0->40 0->41 0->42 0->43 2->11 2->19 2->22 3->12 4->1 4->36 5->1 5->1 5->6 5->15 6->1 6->1 6->1 6->25 6->28 7->1 7->12 8->1 8->1 8->13 8->30 9->1 9->11 10->1 11->1 11->1 11->1 11->11 11->16 11->17 11->17 11->25 11->25 11->26 11->44 12->1 12->1 12->1 12->12 12->18 12->18 12->20 12->28 12->36 12->36 12->39 12->43 12->45 12->47 13->10 14->1 14->5 15->1 16->1 16->1 17->1 17->11 18->1 18->12 19->1 19->14 20->1 20->1 20->23 20->24 20->26 20->27 20->33 20->39 20->46 20->48 21->1 23->1 23->1 24->1 24->26 25->1 26->1 26->27 26->27 26->29 26->34 26->41 26->41 26->50 27->1 27->1 27->1 27->26 27->30 27->31 27->32 27->35 27->35 27->40 27->43 27->49 27->52 28->1 28->1 29->1 29->26 30->1 30->1 30->13 31->1 31->35 32->1 32->1 33->1 33->1 34->1 34->1 34->26 34->29 35->1 35->1 35->1 35->26 35->35 35->37 35->38 35->38 35->42 35->42 35->51 36->1 37->1 37->1 38->1 38->35 39->1 40->1 40->1 41->1 43->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern int ( /* missing proto */ malloc ) ( ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; void main ( void ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int printf ( char const * format , ... ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; int calculate ( int scount , int qcount , int * icount ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { } } } void megaInit ( void ) { { } } int calculate ( int scount , int qcount , int * icount ) { int * flags ; int tmp ; int j ; int i ; int in ; int count ; { tmp = malloc ( sizeof ( int ) * ( unsigned long ) scount ) ; flags = ( int * ) tmp ; in = 0 ; count = 0 ; j = 0 ; while ( j < scount ) { * ( flags + j ) = 0 ; j ++ ; } while ( in < qcount ) { if ( * ( flags + * ( icount + in ) ) != 1 ) { * ( flags + * ( icount + in ) ) = 1 ; i = 0 ; while ( i < scount ) { if ( * ( flags + i ) == 0 ) { break ; } i ++ ; } if ( i == scount ) { count ++ ; i = 0 ; while ( i < scount ) { * ( flags + i ) = 0 ; i ++ ; } * ( flags + * ( icount + in ) ) = 1 ; } } in ++ ; } return ( count ) ; } } void main ( void ) { { megaInit ( ) ; } }
>>>Func
METHOD searchInsert
METHOD_RETURN int
PARAM int *nums
PARAM int numsSize
PARAM int target
<operator>.assignment idx = numsSize - 1
RETURN return (0); return (0);
<operator>.greaterThan numsSize > 0
LITERAL 0 return (0);
<operator>.subtraction numsSize - 1
<operator>.assignment tmp = searchInsert(nums, numsSize - 1, target)
RETURN return (tmp); return (tmp);
<operator>.greaterThan target > *(nums + idx)
IDENTIFIER tmp return (tmp);
RETURN return (numsSize); return (numsSize);
searchInsert searchInsert(nums, numsSize - 1, target)
IDENTIFIER numsSize return (numsSize);
<operator>.subtraction numsSize - 1
<operator>.addition nums + idx
<operator>.indirection *(nums + idx)
>>>PDG&20 0->2 0->3 0->4 0->6 0->7 0->8 0->9 0->12 0->13 0->15 0->16 0->17 0->18 2->15 2->18 3->9 4->12 5->1 5->1 5->18 6->1 7->1 7->1 7->6 7->12 7->16 7->17 7->18 7->19 8->6 9->5 9->5 9->7 10->13 11->1 12->1 12->1 12->1 12->10 12->11 12->14 12->15 12->15 12->17 13->11 14->1 15->10 15->10 15->10 16->14 17->15 17->15 18->1 18->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; int searchInsert ( int * nums , int numsSize , int target ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; void main ( void ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int printf ( char const * format , ... ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { } } } void megaInit ( void ) { { } } int searchInsert ( int * nums , int numsSize , int target ) { int idx ; int tmp ; { idx = numsSize - 1 ; if ( numsSize > 0 ) { if ( target > * ( nums + idx ) ) { return ( numsSize ) ; } tmp = searchInsert ( nums , numsSize - 1 , target ) ; return ( tmp ) ; } return ( 0 ) ; } } void main ( void ) { { megaInit ( ) ; } }
>>>Func
METHOD _1_stringEncoder
METHOD_RETURN void
PARAM int n
PARAM char str[]
BLOCK <empty> <empty>
<operator>.assignment encodeStrings_i3 = 0
IDENTIFIER n switch(n)
LITERAL 4 <empty>
<operator>.assignment str[encodeStrings_i3] = 'T'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'p'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 3 <empty>
<operator>.assignment str[encodeStrings_i3] = 'H'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'l'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'l'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'o'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'w'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'o'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'l'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '!'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 2 <empty>
<operator>.assignment str[encodeStrings_i3] = 'H'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'l'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'l'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'o'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'w'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'o'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'l'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 1 <empty>
<operator>.assignment str[encodeStrings_i3] = 'H'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'l'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'l'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'o'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'W'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'o'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'l'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '!'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 0 <empty>
<operator>.assignment str[encodeStrings_i3] = 'H'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'l'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'l'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'o'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'W'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'o'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'l'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
>>>PDG&140 0->2 0->3 0->4 0->5 0->6 0->7 0->8 0->9 0->10 0->11 0->12 0->13 0->14 0->15 0->16 0->17 0->18 0->19 0->20 0->21 0->22 0->23 0->24 0->25 0->26 0->27 0->28 0->29 0->30 0->31 0->32 0->33 0->34 0->35 0->36 0->37 0->38 0->39 0->40 0->41 0->42 0->43 0->44 0->45 0->46 0->47 0->48 0->49 0->50 0->51 0->52 0->53 0->54 0->55 0->56 0->57 0->58 0->59 0->60 0->61 0->62 0->63 0->64 0->65 0->66 0->67 0->68 0->69 0->70 0->71 0->72 0->73 0->74 0->75 0->76 0->77 0->78 0->79 0->80 0->81 0->82 0->83 0->84 0->85 0->86 0->87 0->88 0->89 0->90 0->91 0->92 0->93 0->94 0->95 0->96 0->97 0->98 0->99 0->100 0->101 0->102 0->103 0->104 0->105 0->106 0->107 0->108 0->109 0->110 0->111 0->112 0->113 0->114 0->115 0->116 0->117 0->118 0->119 0->120 0->121 0->122 0->123 0->124 0->125 0->126 0->127 0->128 0->129 0->130 0->131 0->132 0->133 0->134 0->135 0->136 0->137 0->138 0->139 2->1 3->1 5->1 5->1 5->9 5->38 5->65 5->90 5->117 8->1 9->11 11->13 13->15 14->1 15->17 17->19 18->1 19->21 20->1 21->23 22->1 23->25 25->27 26->1 27->29 28->1 29->31 30->1 31->33 32->1 33->35 34->1 34->1 35->1 35->1 37->1 38->40 39->1 40->42 42->44 44->46 46->48 47->1 48->50 49->1 50->52 51->1 52->54 53->1 54->56 55->1 56->58 57->1 58->60 59->1 60->62 61->1 61->1 62->1 62->1 64->1 65->67 66->1 67->69 69->71 71->73 73->75 74->1 75->77 76->1 77->79 78->1 79->81 80->1 81->83 82->1 83->85 84->1 85->87 86->1 86->1 87->1 87->1 89->1 90->92 91->1 92->94 94->96 96->98 98->100 99->1 100->102 101->1 102->104 103->1 104->106 105->1 106->108 107->1 108->110 109->1 110->112 111->1 112->114 113->1 113->1 114->1 114->1 116->1 117->119 118->1 119->121 121->123 123->125 125->127 126->1 127->129 128->1 129->131 130->1 131->133 132->1 133->135 134->1 135->137 136->1 137->139 138->1 138->1 139->1 139->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fclose ( void * stream ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; void encodeStrings_litStr2_i $ nit ( void ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int ( /* missing proto */ assert ) ( ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; void main ( void ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; void encodeStrings_litStr0_i $ nit ( void ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void megaInit ( void ) ; extern int ( /* missing proto */ printf ) ( ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; void encodeStrings_litStr3_i $ nit ( void ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern int scanf ( char const * format , ... ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int ( /* missing proto */ xor8 ) ( ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; void encodeStrings_litStr1_i $ nit ( void ) ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; void encodeStrings_litStr4_i $ nit ( void ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; void test_xor8 ( void ) ; extern int open ( char const * filename , int oflag , ... ) ; char encodeStrings_litStr4 [ 14 ] ; extern double sqrt ( double x ) ; char encodeStrings_litStr3 [ 13 ] ; char encodeStrings_litStr2 [ 12 ] ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; char encodeStrings_litStr1 [ 13 ] ; char encodeStrings_litStr0 [ 12 ] ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; void test_xor8 ( void ) { int tmp ; int tmp___0 ; int tmp___1 ; int tmp___2 ; { _1_stringEncoder ( 0 , encodeStrings_litStr0 ) ; tmp = xor8 ( encodeStrings_litStr0 ) ; assert ( tmp == 228 ) ; _1_stringEncoder ( 1 , encodeStrings_litStr1 ) ; tmp___0 = xor8 ( encodeStrings_litStr1 ) ; assert ( tmp___0 == 195 ) ; _1_stringEncoder ( 2 , encodeStrings_litStr2 ) ; tmp___1 = xor8 ( encodeStrings_litStr2 ) ; assert ( tmp___1 == 196 ) ; _1_stringEncoder ( 3 , encodeStrings_litStr3 ) ; tmp___2 = xor8 ( encodeStrings_litStr3 ) ; assert ( tmp___2 == 163 ) ; _1_stringEncoder ( 4 , encodeStrings_litStr4 ) ; printf ( encodeStrings_litStr4 ) ; return ; } } void encodeStrings_litStr4_i $ nit ( void ) { { } } void encodeStrings_litStr1_i $ nit ( void ) { { } } void encodeStrings_litStr3_i $ nit ( void ) { { } } void main ( void ) { { megaInit ( ) ; } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { case 4 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 3 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 2 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 1 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 0 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; } } } void megaInit ( void ) { { encodeStrings_litStr4_i $ nit ( ) ; encodeStrings_litStr3_i $ nit ( ) ; encodeStrings_litStr2_i $ nit ( ) ; encodeStrings_litStr1_i $ nit ( ) ; encodeStrings_litStr0_i $ nit ( ) ; } } void encodeStrings_litStr2_i $ nit ( void ) { { } } void encodeStrings_litStr0_i $ nit ( void ) { { } }
>>>Func
METHOD _1_stringEncoder
METHOD_RETURN void
PARAM int n
PARAM char str[]
BLOCK <empty> <empty>
<operator>.assignment encodeStrings_i3 = 0
IDENTIFIER n switch(n)
LITERAL 3 <empty>
<operator>.assignment str[encodeStrings_i3] = 'i'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'f'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '-'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '2'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '-'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'l'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'o'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 2 <empty>
<operator>.assignment str[encodeStrings_i3] = 'i'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'f'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '-'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '2'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '-'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'w'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'i'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 1 <empty>
<operator>.assignment str[encodeStrings_i3] = 'i'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'f'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '-'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '1'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '-'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'l'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'o'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 0 <empty>
<operator>.assignment str[encodeStrings_i3] = 'i'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'f'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '-'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '1'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '-'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'w'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'i'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
>>>PDG&95 0->2 0->3 0->4 0->5 0->6 0->7 0->8 0->9 0->10 0->11 0->12 0->13 0->14 0->15 0->16 0->17 0->18 0->19 0->20 0->21 0->22 0->23 0->24 0->25 0->26 0->27 0->28 0->29 0->30 0->31 0->32 0->33 0->34 0->35 0->36 0->37 0->38 0->39 0->40 0->41 0->42 0->43 0->44 0->45 0->46 0->47 0->48 0->49 0->50 0->51 0->52 0->53 0->54 0->55 0->56 0->57 0->58 0->59 0->60 0->61 0->62 0->63 0->64 0->65 0->66 0->67 0->68 0->69 0->70 0->71 0->72 0->73 0->74 0->75 0->76 0->77 0->78 0->79 0->80 0->81 0->82 0->83 0->84 0->85 0->86 0->87 0->88 0->89 0->90 0->91 0->92 0->93 0->94 2->1 3->1 5->1 5->1 5->9 5->32 5->53 5->76 8->1 9->11 10->1 11->13 13->15 14->1 15->17 16->1 17->19 18->1 19->21 20->1 21->23 22->1 23->25 24->1 25->27 26->1 27->29 28->1 28->1 29->1 29->1 32->34 33->1 34->36 36->38 37->1 38->40 39->1 40->42 41->1 42->44 43->1 44->46 45->1 46->48 47->1 48->50 49->1 49->1 50->1 50->1 52->1 53->55 54->1 55->57 57->59 58->1 59->61 60->1 61->63 62->1 63->65 64->1 65->67 66->1 67->69 68->1 69->71 70->1 71->73 72->1 72->1 73->1 73->1 76->78 77->1 78->80 80->82 81->1 82->84 83->1 84->86 85->1 86->88 87->1 88->90 89->1 90->92 91->1 92->94 93->1 93->1 94->1 94->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern void exit ( int status ) ; extern int pthread_cond_signal ( int * cond ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; char * * _global_argv = ( char * * ) 0 ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; void encodeStrings_litStr2_i $ nit ( void ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int pthread_mutex_lock ( int * mutex ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; int main ( int argc , char * * argv , char * * _formal_envp ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; void encodeStrings_litStr0_i $ nit ( void ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; int _global_argc = 0 ; void megaInit ( void ) ; char * * _global_envp = ( char * * ) 0 ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; void encodeStrings_litStr3_i $ nit ( void ) ; extern int ( /* missing proto */ printf ) ( ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; void encodeStrings_litStr1_i $ nit ( void ) ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; char encodeStrings_litStr3 [ 11 ] ; char encodeStrings_litStr2 [ 10 ] ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; char encodeStrings_litStr1 [ 11 ] ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; char encodeStrings_litStr0 [ 10 ] ; void encodeStrings_litStr0_i $ nit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { case 3 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 2 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 1 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 0 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; } } } void encodeStrings_litStr1_i $ nit ( void ) { { } } void megaInit ( void ) { { encodeStrings_litStr3_i $ nit ( ) ; encodeStrings_litStr2_i $ nit ( ) ; encodeStrings_litStr1_i $ nit ( ) ; encodeStrings_litStr0_i $ nit ( ) ; } } void encodeStrings_litStr3_i $ nit ( void ) { { } } void encodeStrings_litStr2_i $ nit ( void ) { { } } int main ( int argc , char * * argv , char * * _formal_envp ) { unsigned char c ; int _BARRIER_0 ; { megaInit ( ) ; _global_argc = argc ; _global_argv = argv ; _global_envp = _formal_envp ; _BARRIER_0 = 1 ; c = ( unsigned char ) * ( * ( argv + 1 ) + 0 ) ; if ( ( int ) c > 85 ) { _1_stringEncoder ( 0 , encodeStrings_litStr0 ) ; printf ( encodeStrings_litStr0 ) ; } else { _1_stringEncoder ( 1 , encodeStrings_litStr1 ) ; printf ( encodeStrings_litStr1 ) ; } if ( ( int ) c < 170 ) { _1_stringEncoder ( 2 , encodeStrings_litStr2 ) ; printf ( encodeStrings_litStr2 ) ; } else { _1_stringEncoder ( 3 , encodeStrings_litStr3 ) ; printf ( encodeStrings_litStr3 ) ; } return ( 0 ) ; } }
>>>Func
METHOD _1_stringEncoder
METHOD_RETURN void
PARAM int n
PARAM char str[]
BLOCK <empty> <empty>
<operator>.assignment encodeStrings_i3 = 0
IDENTIFIER n switch(n)
LITERAL 0 <empty>
<operator>.assignment str[encodeStrings_i3] = 'S'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'u'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'm'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'i'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ':'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
>>>PDG&32 0->2 0->3 0->4 0->5 0->6 0->7 0->8 0->9 0->10 0->11 0->12 0->13 0->14 0->15 0->16 0->17 0->18 0->19 0->20 0->21 0->22 0->23 0->24 0->25 0->26 0->27 0->28 0->29 0->30 0->31 2->1 3->1 5->1 5->1 5->9 8->1 9->11 10->1 11->13 12->1 13->15 15->17 16->1 17->19 18->1 19->21 20->1 21->23 22->1 23->25 24->1 25->27 26->1 27->29 28->1 29->31 30->1 30->1 31->1 31->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; char * * _global_argv = ( char * * ) 0 ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; int main ( int argc , char * * argv , char * * _formal_envp ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; void encodeStrings_litStr0_i $ nit ( void ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; int _global_argc = 0 ; void megaInit ( void ) ; char * * _global_envp = ( char * * ) 0 ; extern int ( /* missing proto */ printf ) ( ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; char encodeStrings_litStr0 [ 12 ] ; void megaInit ( void ) { { encodeStrings_litStr0_i $ nit ( ) ; } } void encodeStrings_litStr0_i $ nit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { case 0 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; } } } int main ( int argc , char * * argv , char * * _formal_envp ) { int i ; int j ; int sum ; int _BARRIER_0 ; { megaInit ( ) ; _global_argc = argc ; _global_argv = argv ; _global_envp = _formal_envp ; _BARRIER_0 = 1 ; sum = 0 ; i = 0 ; while ( i < argc ) { j = 1 ; while ( j <= argc ) { sum += j ; j ++ ; } i ++ ; } _1_stringEncoder ( 0 , encodeStrings_litStr0 ) ; printf ( encodeStrings_litStr0 , sum ) ; return ( 0 ) ; } }
>>>Func
METHOD compare_asc
METHOD_RETURN int
PARAM void const   *x1
PARAM void const   *x2
<operator>.assignment t1 = *((int *)x1)
<operator>.assignment t2 = *((int *)x2)
RETURN return (0); return (0);
<operator>.lessThan t1 < t2
<operator>.greaterThan t1 > t2
<operator>.equals t1 == t2
LITERAL 0 return (0);
RETURN return (-1); return (-1);
RETURN return (1); return (1);
RETURN return (0); return (0);
<operator>.cast (int *)x1
<operator>.cast (int *)x2
<operator>.minus -1
LITERAL 1 return (1);
LITERAL 0 return (0);
>>>PDG&19 0->2 0->3 0->6 0->7 0->8 0->9 0->10 0->12 0->13 0->14 0->15 0->16 0->17 0->18 2->14 3->15 4->1 4->1 4->7 5->1 5->1 5->7 6->1 7->1 7->1 7->1 7->8 7->8 7->8 7->11 7->16 8->9 8->9 8->9 8->12 9->6 9->13 10->6 11->1 12->1 13->1 14->1 15->1 16->1 16->11 17->12 18->13
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; void main ( void ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int printf ( char const * format , ... ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; int compare_asc ( void const * x1 , void const * x2 ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; int compare_asc ( void const * x1 , void const * x2 ) { int t1 ; int t2 ; { t1 = * ( ( int * ) x1 ) ; t2 = * ( ( int * ) x2 ) ; if ( t1 < t2 ) { return ( -1 ) ; } if ( t1 > t2 ) { return ( 1 ) ; } if ( t1 == t2 ) { return ( 0 ) ; } return ( 0 ) ; } } void megaInit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { } } } void main ( void ) { { megaInit ( ) ; } }
>>>Func
METHOD reverseString
METHOD_RETURN void
PARAM char *s
PARAM int sSize
<operator>.assignment last = sSize - 1
<operator>.assignment i = 0
RETURN return; return;
<operator>.lessThan i < last
<operator>.subtraction sSize - 1
<operator>.assignment tmp = *(s + i)
<operator>.assignment *(s + i) = *(s + last)
<operator>.assignment *(s + last) = tmp
<operator>.postDecrement last --
<operator>.postIncrement i ++
<operator>.addition s + i
<operator>.addition s + i
<operator>.addition s + last
<operator>.addition s + last
<operator>.indirection *(s + i)
<operator>.indirection *(s + i)
<operator>.indirection *(s + last)
<operator>.indirection *(s + last)
>>>PDG&22 0->2 0->3 0->5 0->6 0->7 0->8 0->11 0->12 0->13 0->14 0->15 0->16 0->17 2->1 2->14 3->8 4->1 4->1 4->7 5->1 5->7 6->1 7->1 7->1 7->1 7->7 7->9 7->10 7->11 7->12 7->12 7->13 7->13 7->14 7->14 7->15 7->15 7->16 7->16 7->17 7->17 7->18 7->19 7->20 7->21 8->1 8->4 8->4 9->1 9->11 10->1 10->1 11->1 11->1 11->1 12->1 12->7 13->1 13->7 17->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; void reverseString ( char * s , int sSize ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; void main ( void ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int printf ( char const * format , ... ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; void reverseString ( char * s , int sSize ) { int last ; int i ; char tmp ; { last = sSize - 1 ; i = 0 ; while ( i < last ) { tmp = * ( s + i ) ; * ( s + i ) = * ( s + last ) ; * ( s + last ) = tmp ; last -- ; i ++ ; } return ; } } void megaInit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { } } } void main ( void ) { { megaInit ( ) ; } }
>>>Func
METHOD shuffle
METHOD_RETURN void
PARAM int *a
PARAM int n
<operator>.assignment i = 0
RETURN return; return;
<operator>.lessThan i < n
<operator>.assignment t = *(a + i)
<operator>.assignment tmp = rand()
<operator>.assignment r = tmp % n
<operator>.assignment *(a + i) = *(a + r)
<operator>.assignment *(a + r) = t
<operator>.postIncrement i ++
<operator>.modulo tmp % n
<operator>.addition a + i
<operator>.addition a + i
<operator>.addition a + r
<operator>.addition a + r
<operator>.indirection *(a + i)
rand rand()
<operator>.indirection *(a + i)
<operator>.indirection *(a + r)
<operator>.indirection *(a + r)
>>>PDG&23 0->2 0->3 0->4 0->5 0->6 0->8 0->11 0->12 0->13 0->14 0->15 0->16 0->17 2->1 2->14 3->6 4->1 4->6 5->1 6->1 6->1 6->1 6->6 6->7 6->8 6->9 6->10 6->11 6->12 6->12 6->13 6->13 6->14 6->14 6->15 6->15 6->16 6->17 6->18 6->19 6->20 6->21 6->22 7->1 7->11 8->1 8->1 8->13 9->1 9->1 9->16 9->17 10->1 10->1 11->1 11->1 11->1 12->1 12->6 13->1 13->6 13->9 13->9 17->1 17->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int ( /* missing proto */ rand ) ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; void main ( void ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int printf ( char const * format , ... ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; void shuffle ( int * a , int n ) ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; void shuffle ( int * a , int n ) { int i ; int t ; int r ; int tmp ; { i = 0 ; while ( i < n ) { t = * ( a + i ) ; tmp = rand ( ) ; r = tmp % n ; * ( a + i ) = * ( a + r ) ; * ( a + r ) = t ; i ++ ; } return ; } } void megaInit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { } } } void main ( void ) { { megaInit ( ) ; } }
>>>Func
METHOD max
METHOD_RETURN int
PARAM int a
PARAM int b
RETURN return (tmp); return (tmp);
<operator>.greaterEqualsThan a >= b
IDENTIFIER tmp return (tmp);
<operator>.assignment tmp = a
<operator>.assignment tmp = b
>>>PDG&9 0->2 0->3 0->5 0->6 0->7 0->8 2->5 3->5 4->1 5->1 5->1 5->1 5->7 5->7 5->8 5->8 6->4 7->1 7->1 7->1 7->6 8->1 8->1 8->1 8->6
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; void main ( void ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int printf ( char const * format , ... ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; int max ( int a , int b ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { } } } void megaInit ( void ) { { } } int max ( int a , int b ) { int tmp ; { if ( a >= b ) { tmp = a ; } else { tmp = b ; } return ( tmp ) ; } } void main ( void ) { { megaInit ( ) ; } }
>>>Func
METHOD _1_stringEncoder
METHOD_RETURN void
PARAM int n
PARAM char str[]
BLOCK <empty> <empty>
<operator>.assignment encodeStrings_i3 = 0
IDENTIFIER n switch(n)
LITERAL 2 <empty>
<operator>.assignment str[encodeStrings_i3] = 'l'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'o'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 1 <empty>
<operator>.assignment str[encodeStrings_i3] = 'w'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'i'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 0 <empty>
<operator>.assignment str[encodeStrings_i3] = 'U'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'g'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ':'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'p'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'o'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'g'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'm'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '-'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'm'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'g'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'u'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'm'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
>>>PDG&92 0->2 0->3 0->4 0->5 0->6 0->7 0->8 0->9 0->10 0->11 0->12 0->13 0->14 0->15 0->16 0->17 0->18 0->19 0->20 0->21 0->22 0->23 0->24 0->25 0->26 0->27 0->28 0->29 0->30 0->31 0->32 0->33 0->34 0->35 0->36 0->37 0->38 0->39 0->40 0->41 0->42 0->43 0->44 0->45 0->46 0->47 0->48 0->49 0->50 0->51 0->52 0->53 0->54 0->55 0->56 0->57 0->58 0->59 0->60 0->61 0->62 0->63 0->64 0->65 0->66 0->67 0->68 0->69 0->70 0->71 0->72 0->73 0->74 0->75 0->76 0->77 0->78 0->79 0->80 0->81 0->82 0->83 0->84 0->85 0->86 0->87 0->88 0->89 0->90 0->91 2->1 3->1 5->1 5->1 5->9 5->22 5->33 8->1 9->11 10->1 11->13 12->1 13->15 14->1 15->17 16->1 17->19 18->1 18->1 19->1 19->1 21->1 22->24 23->1 24->26 25->1 26->28 27->1 28->30 29->1 29->1 30->1 30->1 32->1 33->35 34->1 35->37 37->39 39->41 41->43 42->1 43->45 45->47 46->1 47->49 49->51 50->1 51->53 53->55 55->57 57->59 59->61 60->1 61->63 63->65 65->67 67->69 69->71 70->1 71->73 72->1 73->75 74->1 75->77 76->1 77->79 78->1 79->81 80->1 81->83 82->1 83->85 84->1 85->87 86->1 87->89 88->1 89->91 90->1 90->1 91->1 91->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; char * * _global_argv = ( char * * ) 0 ; void encodeStrings_litStr2_i $ nit ( void ) ; extern int unlink ( char const * filename ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern int raise ( int sig ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern double ceil ( double x ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; int main ( int argc , char * * argv , char * * _formal_envp ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; void encodeStrings_litStr0_i $ nit ( void ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; int _global_argc = 0 ; char * * _global_envp = ( char * * ) 0 ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int ( /* missing proto */ printf ) ( ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; void encodeStrings_litStr1_i $ nit ( void ) ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; char encodeStrings_litStr2 [ 6 ] ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; char encodeStrings_litStr1 [ 5 ] ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; char encodeStrings_litStr0 [ 30 ] ; void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { case 2 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 1 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 0 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; } } } void megaInit ( void ) { { encodeStrings_litStr2_i $ nit ( ) ; encodeStrings_litStr1_i $ nit ( ) ; encodeStrings_litStr0_i $ nit ( ) ; } } void encodeStrings_litStr0_i $ nit ( void ) { { } } void encodeStrings_litStr1_i $ nit ( void ) { { } } void encodeStrings_litStr2_i $ nit ( void ) { { } } int main ( int argc , char * * argv , char * * _formal_envp ) { unsigned char c ; int _BARRIER_0 ; { megaInit ( ) ; _global_argc = argc ; _global_argv = argv ; _global_envp = _formal_envp ; _BARRIER_0 = 1 ; if ( argc < 2 ) { _1_stringEncoder ( 0 , encodeStrings_litStr0 ) ; printf ( encodeStrings_litStr0 ) ; return ( 1 ) ; } c = ( unsigned char ) * ( * ( argv + 1 ) + 0 ) ; if ( ( int ) c > 127 ) { _1_stringEncoder ( 1 , encodeStrings_litStr1 ) ; printf ( encodeStrings_litStr1 ) ; } else { _1_stringEncoder ( 2 , encodeStrings_litStr2 ) ; printf ( encodeStrings_litStr2 ) ; } return ( 0 ) ; } }
>>>Func
METHOD _1_stringEncoder
METHOD_RETURN void
PARAM int n
PARAM char str[]
BLOCK <empty> <empty>
<operator>.assignment encodeStrings_i3 = 0
IDENTIFIER n switch(n)
LITERAL 3 <empty>
<operator>.assignment str[encodeStrings_i3] = 'C'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '#'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ':'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'I'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'M'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'P'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'O'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'S'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'S'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'I'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'B'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'L'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'E'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 2 <empty>
<operator>.assignment str[encodeStrings_i3] = 'C'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '#'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ':'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 1 <empty>
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 0 <empty>
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
>>>PDG&141 0->2 0->3 0->4 0->5 0->6 0->7 0->8 0->9 0->10 0->11 0->12 0->13 0->14 0->15 0->16 0->17 0->18 0->19 0->20 0->21 0->22 0->23 0->24 0->25 0->26 0->27 0->28 0->29 0->30 0->31 0->32 0->33 0->34 0->35 0->36 0->37 0->38 0->39 0->40 0->41 0->42 0->43 0->44 0->45 0->46 0->47 0->48 0->49 0->50 0->51 0->52 0->53 0->54 0->55 0->56 0->57 0->58 0->59 0->60 0->61 0->62 0->63 0->64 0->65 0->66 0->67 0->68 0->69 0->70 0->71 0->72 0->73 0->74 0->75 0->76 0->77 0->78 0->79 0->80 0->81 0->82 0->83 0->84 0->85 0->86 0->87 0->88 0->89 0->90 0->91 0->92 0->93 0->94 0->95 0->96 0->97 0->98 0->99 0->100 0->101 0->102 0->103 0->104 0->105 0->106 0->107 0->108 0->109 0->110 0->111 0->112 0->113 0->114 0->115 0->116 0->117 0->118 0->119 0->120 0->121 0->122 0->123 0->124 0->125 0->126 0->127 0->128 0->129 0->130 0->131 0->132 0->133 0->134 0->135 0->136 0->137 0->138 0->139 0->140 2->1 3->1 5->1 5->1 5->9 5->54 5->113 5->134 8->1 9->11 10->1 11->13 12->1 13->15 14->1 15->17 17->19 18->1 19->21 20->1 21->23 22->1 23->25 24->1 25->27 26->1 27->29 29->31 30->1 31->33 32->1 33->35 34->1 35->37 37->39 38->1 39->41 40->1 41->43 42->1 43->45 44->1 45->47 46->1 47->49 48->1 49->51 50->1 50->1 51->1 51->1 53->1 54->56 55->1 56->58 57->1 58->60 59->1 60->62 62->64 63->1 64->66 66->68 68->70 69->1 70->72 72->74 74->76 76->78 78->80 80->82 82->84 84->86 86->88 88->90 90->92 92->94 94->96 96->98 98->100 100->102 101->1 102->104 103->1 104->106 105->1 106->108 107->1 108->110 109->1 109->1 110->1 110->1 113->115 115->117 117->119 119->121 121->123 123->125 124->1 125->127 126->1 127->129 128->1 129->131 130->1 130->1 131->1 131->1 133->1 134->136 135->1 136->138 137->1 138->140 139->1 139->1 140->1 140->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern void exit ( int status ) ; extern int pthread_cond_signal ( int * cond ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; char * * _global_argv = ( char * * ) 0 ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; void encodeStrings_litStr2_i $ nit ( void ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int pthread_mutex_lock ( int * mutex ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; int main ( int _formal_argc , char * * _formal_argv , char * * _formal_envp ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; void encodeStrings_litStr0_i $ nit ( void ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; int _global_argc = 0 ; void megaInit ( void ) ; char * * _global_envp = ( char * * ) 0 ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; void encodeStrings_litStr3_i $ nit ( void ) ; extern int ( /* missing proto */ printf ) ( ) ; extern int ( /* missing proto */ scanf ) ( ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; void encodeStrings_litStr1_i $ nit ( void ) ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; char encodeStrings_litStr3 [ 22 ] ; char encodeStrings_litStr2 [ 29 ] ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; char encodeStrings_litStr1 [ 10 ] ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; char encodeStrings_litStr0 [ 4 ] ; void encodeStrings_litStr0_i $ nit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { case 3 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 2 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 1 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 0 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; } } } void encodeStrings_litStr1_i $ nit ( void ) { { } } void megaInit ( void ) { { encodeStrings_litStr3_i $ nit ( ) ; encodeStrings_litStr2_i $ nit ( ) ; encodeStrings_litStr1_i $ nit ( ) ; encodeStrings_litStr0_i $ nit ( ) ; } } void encodeStrings_litStr3_i $ nit ( void ) { { } } void encodeStrings_litStr2_i $ nit ( void ) { { } } int main ( int _formal_argc , char * * _formal_argv , char * * _formal_envp ) { int N ; int M ; int A ; int C ; int i0 ; int i1 ; int i2 ; int j0 ; int j1 ; int j2 ; int s ; int n ; int flag ; int _BARRIER_0 ; { megaInit ( ) ; _global_argc = _formal_argc ; _global_argv = _formal_argv ; _global_envp = _formal_envp ; _BARRIER_0 = 1 ; _1_stringEncoder ( 0 , encodeStrings_litStr0 ) ; scanf ( encodeStrings_litStr0 , & C ) ; n = 0 ; while ( n < C ) { _1_stringEncoder ( 1 , encodeStrings_litStr1 ) ; scanf ( encodeStrings_litStr1 , & N , & M , & A ) ; flag = 0 ; i0 = 0 ; while ( i0 <= N ) { j0 = 0 ; while ( j0 <= M ) { i1 = i0 ; while ( i1 <= N ) { j1 = 0 ; while ( j1 <= M ) { i2 = i1 ; while ( i2 <= N ) { j2 = 0 ; while ( j2 <= M ) { s = ( i1 - i0 ) * ( j2 - j0 ) - ( i2 - i0 ) * ( j1 - j0 ) ; if ( s == A ) { _1_stringEncoder ( 2 , encodeStrings_litStr2 ) ; printf ( encodeStrings_litStr2 , n + 1 , i0 , j0 , i1 , j1 , i2 , j2 ) ; goto end ; } j2 ++ ; } i2 ++ ; } j1 ++ ; } i1 ++ ; } j0 ++ ; } i0 ++ ; } _1_stringEncoder ( 3 , encodeStrings_litStr3 ) ; printf ( encodeStrings_litStr3 , n + 1 ) ; end : n ++ ; } return ( 0 ) ; } }
>>>Func
METHOD skip
METHOD_RETURN char*
PARAM char *str
RETURN return (str); return (str);
LITERAL 1 while (1)
IDENTIFIER str return (str);
<operator>.postIncrement str ++
<operator>.logicalNot ! ((int )*str == 32)
<operator>.equals (int )*str == 32
<operator>.logicalNot ! ((int )*str == 10)
<operator>.equals (int )*str == 10
<operator>.cast (int )*str
<operator>.cast (int )*str
UNKNOWN int int
<operator>.indirection *str
UNKNOWN int int
<operator>.indirection *str
>>>PDG&17 0->2 0->4 0->5 0->6 0->8 0->10 2->1 2->5 2->6 3->1 5->3 7->1 7->1 7->6 7->7 7->8 7->9 7->10 7->11 7->12 7->13 7->14 7->15 7->16 8->7 8->7 9->1 9->1 9->6 9->7 9->8 9->12 9->13 9->14 10->1 10->9 10->9 11->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; void main ( void ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void megaInit ( void ) ; char * skip ( char * str ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int printf ( char const * format , ... ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { } } } void megaInit ( void ) { { } } char * skip ( char * str ) { { while ( 1 ) { if ( ! ( ( int ) * str == 32 ) ) { if ( ! ( ( int ) * str == 10 ) ) { break ; } } str ++ ; } return ( str ) ; } } void main ( void ) { { megaInit ( ) ; } }
>>>Func
METHOD c_atoi
METHOD_RETURN int
PARAM char const   *str
<operator>.assignment i = 0
<operator>.assignment sign = 1
<operator>.assignment value = 0L
RETURN return ((int )value); return ((int )value);
LITERAL 1 while (1)
<operator>.equals (int const   )*(str + i) == 45
LITERAL 1 while (1)
<operator>.cast (int )value
<operator>.postIncrement i ++
<operator>.assignment sign = -1
<operator>.postIncrement i ++
<operator>.assignment prev = value
<operator>.assignment value = value * 10L + (long )(sign * (int )((int const   )*(str + i) - 48))
<operator>.postIncrement i ++
<operator>.lessEqualsThan (int const   )*(str + i) <= 13
<operator>.greaterEqualsThan (int const   )*(str + i) >= 48
<operator>.equals sign == 1
<operator>.minus -1
<operator>.equals (int const   )*(str + i) == 43
<operator>.addition value * 10L + (long )(sign * (int )((int const   )*(str + i) - 48))
<operator>.greaterEqualsThan (int const   )*(str + i) >= 9
<operator>.addition str + i
<operator>.assignment sign = 1
<operator>.postIncrement i ++
<operator>.lessEqualsThan (int const   )*(str + i) <= 57
<operator>.multiplication value * 10L
<operator>.cast (long )(sign * (int )((int const   )*(str + i) - 48))
<operator>.greaterThan prev > value
<operator>.equals (int const   )*(str + i) == 32
<operator>.multiplication sign * (int )((int const   )*(str + i) - 48)
RETURN return (-1); return (-1);
<operator>.equals sign == -1
<operator>.addition str + i
<operator>.addition str + i
<operator>.logicalNot ! ((int const   )*(str + i) != 0)
<operator>.cast (int )((int const   )*(str + i) - 48)
<operator>.minus -1
<operator>.logicalNot ! ((int const   )*(str + i) != 0)
<operator>.addition str + i
<operator>.subtraction (int const   )*(str + i) - 48
<operator>.minus -1
<operator>.lessThan prev < value
<operator>.addition str + i
<operator>.addition str + i
<operator>.notEquals (int const   )*(str + i) != 0
<operator>.cast (int const   )*(str + i)
RETURN return (0); return (0);
<operator>.addition str + i
<operator>.notEquals (int const   )*(str + i) != 0
LITERAL 0 return (0);
<operator>.addition str + i
<operator>.addition str + i
<operator>.addition str + i
UNKNOWN int int
<operator>.cast (int const   )*(str + i)
<operator>.cast (int const   )*(str + i)
UNKNOWN int const int const
<operator>.indirection *(str + i)
<operator>.cast (int const   )*(str + i)
UNKNOWN int const int const
<operator>.indirection *(str + i)
UNKNOWN long long
<operator>.cast (int const   )*(str + i)
UNKNOWN int const int const
<operator>.indirection *(str + i)
<operator>.cast (int const   )*(str + i)
UNKNOWN int const int const
<operator>.indirection *(str + i)
<operator>.cast (int const   )*(str + i)
UNKNOWN int const int const
<operator>.indirection *(str + i)
UNKNOWN int int
UNKNOWN int const int const
<operator>.indirection *(str + i)
<operator>.cast (int const   )*(str + i)
UNKNOWN int const int const
<operator>.indirection *(str + i)
<operator>.cast (int const   )*(str + i)
UNKNOWN int const int const
<operator>.indirection *(str + i)
UNKNOWN int const int const
<operator>.indirection *(str + i)
>>>PDG&85 0->2 0->3 0->4 0->5 0->7 0->8 0->9 0->10 0->11 0->13 0->14 0->16 0->17 0->18 0->19 0->20 0->21 0->23 0->24 0->25 0->26 0->27 0->28 0->30 0->31 0->32 0->34 0->35 0->36 0->39 0->41 0->42 0->43 0->44 0->45 0->46 0->47 0->49 0->50 0->51 0->52 0->53 0->54 0->55 2->24 2->35 2->36 2->41 2->50 3->1 3->11 3->13 3->16 3->24 3->26 3->35 3->36 3->41 3->45 3->46 3->50 3->53 3->54 3->55 4->1 4->32 5->1 5->10 5->14 5->28 6->1 8->1 8->12 8->13 8->20 8->21 8->41 8->61 8->66 8->67 10->6 11->1 11->13 11->16 11->24 11->26 11->35 11->36 11->41 11->45 11->46 11->50 11->53 11->54 11->55 12->1 12->32 13->1 13->16 13->36 13->46 13->53 13->54 14->1 14->30 14->44 15->1 15->1 15->10 15->14 15->28 15->30 15->44 16->1 16->36 16->46 16->53 16->54 17->1 17->23 17->31 17->45 17->50 17->65 17->69 17->70 17->71 17->75 17->76 18->1 18->6 18->10 18->27 18->46 18->56 18->68 18->72 18->73 19->1 19->1 19->30 19->34 19->34 19->43 20->12 21->1 21->25 21->26 22->1 22->1 23->1 23->31 23->40 23->50 23->51 23->55 23->71 23->75 23->76 23->80 23->83 23->84 25->1 25->32 26->1 26->16 26->36 26->46 26->53 26->54 27->1 27->6 27->10 27->37 27->47 27->54 27->56 27->77 27->81 27->82 28->15 28->15 28->22 28->22 29->1 30->1 30->1 30->1 30->10 30->14 30->28 30->33 30->34 30->39 30->43 30->44 30->44 31->1 31->40 31->51 31->55 31->80 31->83 31->84 32->1 32->15 32->15 32->19 32->22 32->22 32->29 32->29 33->1 34->1 34->6 34->10 34->16 34->18 34->32 34->36 34->44 34->56 34->58 34->62 34->63 37->1 37->1 37->6 37->10 37->14 37->15 37->19 37->22 37->28 37->29 37->32 37->38 37->42 37->48 37->53 37->56 37->64 37->74 37->78 37->79 38->1 39->1 39->33 40->11 40->17 40->35 40->57 40->59 40->60 42->1 42->32 42->32 42->38 42->38 43->34 44->1 44->6 44->10 44->10 44->14 44->16 44->18 44->28 44->36 44->49 44->56 44->58 44->62 44->63 47->37 47->37 48->1 49->1 51->40 51->40 52->49 53->1 53->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; int c_atoi ( char const * str ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; void main ( void ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int printf ( char const * format , ... ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { } } } void megaInit ( void ) { { } } int c_atoi ( char const * str ) { int i ; int sign ; long value ; long prev ; { i = 0 ; sign = 1 ; value = 0L ; while ( 1 ) { if ( ( int const ) * ( str + i ) <= 13 ) { if ( ( int const ) * ( str + i ) >= 9 ) { goto _L ; } else { goto _L___0 ; } } else _L___0 : /* CIL Label */ if ( ( int const ) * ( str + i ) == 32 ) { _L : /* CIL Label */ if ( ! ( ( int const ) * ( str + i ) != 0 ) ) { break ; } } else { break ; } i ++ ; } if ( ( int const ) * ( str + i ) == 45 ) { sign = -1 ; i ++ ; } else if ( ( int const ) * ( str + i ) == 43 ) { sign = 1 ; i ++ ; } while ( 1 ) { if ( ( int const ) * ( str + i ) >= 48 ) { if ( ( int const ) * ( str + i ) <= 57 ) { if ( ! ( ( int const ) * ( str + i ) != 0 ) ) { break ; } } else { break ; } } else { break ; } prev = value ; value = value * 10L + ( long ) ( sign * ( int ) ( ( int const ) * ( str + i ) - 48 ) ) ; if ( sign == 1 ) { if ( prev > value ) { return ( -1 ) ; } else { goto _L___1 ; } } else _L___1 : /* CIL Label */ if ( sign == -1 ) { if ( prev < value ) { return ( 0 ) ; } } i ++ ; } return ( ( int ) value ) ; } } void main ( void ) { { megaInit ( ) ; } }
>>>Func
METHOD plusOne
METHOD_RETURN int*
PARAM int *digits
PARAM int digitsSize
PARAM int *returnSize
<operator>.assignment i = digitsSize - 1
<operator>.assignment tmp = malloc((unsigned long )(digitsSize + 1) * sizeof(int ))
<operator>.assignment newdigit = (int *)tmp
<operator>.assignment *(newdigit + 0) = 1
<operator>.assignment i___0 = 1
<operator>.assignment *returnSize = digitsSize + 1
RETURN return (newdigit); return (newdigit);
<operator>.greaterEqualsThan i >= 0
<operator>.lessThan i___0 < digitsSize + 1
IDENTIFIER newdigit return (newdigit);
<operator>.subtraction digitsSize - 1
<operator>.postDecrement i --
malloc malloc((unsigned long )(digitsSize + 1) * sizeof(int ))
<operator>.cast (int *)tmp
<operator>.assignment *(newdigit + i___0) = *(digits + (i___0 - 1))
<operator>.postIncrement i___0 ++
<operator>.addition digitsSize + 1
<operator>.lessThan *(digits + i) < 9
<operator>.multiplication (unsigned long )(digitsSize + 1) * sizeof(int )
<operator>.addition newdigit + 0
<operator>.addition digitsSize + 1
<operator>.postIncrement (*(digits + i)) ++
<operator>.assignment *returnSize = digitsSize
RETURN return (digits); return (digits);
<operator>.cast (unsigned long )(digitsSize + 1)
<operator>.sizeOf sizeof(int )
IDENTIFIER digits return (digits);
<operator>.assignment *(digits + i) = 0
<operator>.addition digitsSize + 1
<operator>.addition newdigit + i___0
<operator>.addition digits + (i___0 - 1)
<operator>.addition digits + i
<operator>.subtraction i___0 - 1
<operator>.addition digits + i
<operator>.addition digits + i
<operator>.indirection *(newdigit + 0)
<operator>.indirection *returnSize
UNKNOWN int * int *
<operator>.indirection *(newdigit + i___0)
<operator>.indirection *(digits + (i___0 - 1))
<operator>.indirection *(digits + i)
UNKNOWN unsigned long unsigned long
<operator>.indirection *(digits + i)
<operator>.indirection *returnSize
<operator>.indirection *(digits + i)
>>>PDG&50 0->2 0->3 0->4 0->7 0->8 0->9 0->10 0->12 0->13 0->14 0->15 0->16 0->18 0->20 0->21 0->22 0->23 0->24 0->25 0->27 0->29 0->31 0->32 0->33 0->34 0->35 0->36 0->37 0->38 0->39 2->31 2->35 2->36 2->38 2->39 3->15 4->1 5->1 5->1 5->12 6->7 6->18 7->14 7->24 7->34 9->13 11->1 12->1 12->6 12->7 12->8 12->9 12->10 12->11 12->13 12->16 12->17 12->18 12->21 12->22 12->23 12->24 12->25 12->29 12->30 12->33 12->36 12->36 12->38 12->39 12->40 12->41 12->42 12->45 12->46 13->13 13->19 13->20 13->25 13->34 13->34 13->35 13->37 13->37 13->43 13->44 14->11 15->5 15->5 15->10 15->13 15->21 15->23 15->25 15->27 15->29 15->33 16->1 16->12 17->6 20->13 22->1 22->12 22->16 22->26 22->27 22->28 22->32 22->38 22->39 22->47 22->48 22->49 23->17 26->1 26->1 27->1 27->1 27->1 28->1 30->1 31->28 32->1 37->20 37->35 37->35 38->1 38->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern int ( /* missing proto */ malloc ) ( ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; void main ( void ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int printf ( char const * format , ... ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; int * plusOne ( int * digits , int digitsSize , int * returnSize ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; int * plusOne ( int * digits , int digitsSize , int * returnSize ) { int i ; int * newdigit ; int tmp ; int i___0 ; { i = digitsSize - 1 ; while ( i >= 0 ) { if ( * ( digits + i ) < 9 ) { ( * ( digits + i ) ) ++ ; * returnSize = digitsSize ; return ( digits ) ; } else { * ( digits + i ) = 0 ; } i -- ; } tmp = malloc ( ( unsigned long ) ( digitsSize + 1 ) * sizeof ( int ) ) ; newdigit = ( int * ) tmp ; * ( newdigit + 0 ) = 1 ; i___0 = 1 ; while ( i___0 < digitsSize + 1 ) { * ( newdigit + i___0 ) = * ( digits + ( i___0 - 1 ) ) ; i___0 ++ ; } * returnSize = digitsSize + 1 ; return ( newdigit ) ; } } void megaInit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { } } } void main ( void ) { { megaInit ( ) ; } }
>>>Func
METHOD max
METHOD_RETURN int
PARAM int a
PARAM int b
RETURN return (tmp); return (tmp);
<operator>.greaterThan a > b
IDENTIFIER tmp return (tmp);
<operator>.assignment tmp = a
<operator>.assignment tmp = b
>>>PDG&9 0->2 0->3 0->5 0->6 0->7 0->8 2->5 3->5 4->1 5->1 5->1 5->1 5->7 5->7 5->8 5->8 6->4 7->1 7->1 7->1 7->6 8->1 8->1 8->1 8->6
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; void main ( void ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int printf ( char const * format , ... ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; int max ( int a , int b ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { } } } void megaInit ( void ) { { } } int max ( int a , int b ) { int tmp ; { if ( a > b ) { tmp = a ; } else { tmp = b ; } return ( tmp ) ; } } void main ( void ) { { megaInit ( ) ; } }
>>>Func
METHOD main
METHOD_RETURN int
PARAM int _formal_argc
PARAM char **_formal_argv
PARAM char **_formal_envp
megaInit megaInit()
<operator>.assignment _global_argc = _formal_argc
<operator>.assignment _global_argv = _formal_argv
<operator>.assignment _global_envp = _formal_envp
<operator>.assignment _BARRIER_0 = 1
RETURN return (0); return (0);
LITERAL 0 return (0);
>>>PDG&12 0->2 0->3 0->4 0->5 0->6 0->7 0->8 0->9 0->10 0->11 2->6 3->7 4->8 5->1 6->1 6->1 6->1 7->1 7->1 7->1 8->1 8->1 8->1 9->1 9->1 10->1 11->10
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; char * * _global_argv = ( char * * ) 0 ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; int main ( int _formal_argc , char * * _formal_argv , char * * _formal_envp ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; int _global_argc = 0 ; void megaInit ( void ) ; char * * _global_envp = ( char * * ) 0 ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int printf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern int scanf ( char const * format , ... ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern float strtof ( char const * str , char const * endptr ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern double log ( double x ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; void megaInit ( void ) { { } } int main ( int _formal_argc , char * * _formal_argv , char * * _formal_envp ) { int _BARRIER_0 ; { megaInit ( ) ; _global_argc = _formal_argc ; _global_argv = _formal_argv ; _global_envp = _formal_envp ; _BARRIER_0 = 1 ; return ( 0 ) ; } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { } } }
>>>Func
METHOD _1_stringEncoder
METHOD_RETURN void
PARAM int n
PARAM char str[]
BLOCK <empty> <empty>
<operator>.assignment encodeStrings_i3 = 0
IDENTIFIER n switch(n)
LITERAL 0 <empty>
<operator>.assignment str[encodeStrings_i3] = 'S'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'u'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'm'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'i'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ':'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
>>>PDG&32 0->2 0->3 0->4 0->5 0->6 0->7 0->8 0->9 0->10 0->11 0->12 0->13 0->14 0->15 0->16 0->17 0->18 0->19 0->20 0->21 0->22 0->23 0->24 0->25 0->26 0->27 0->28 0->29 0->30 0->31 2->1 3->1 5->1 5->1 5->9 8->1 9->11 10->1 11->13 12->1 13->15 15->17 16->1 17->19 18->1 19->21 20->1 21->23 22->1 23->25 24->1 25->27 26->1 27->29 28->1 29->31 30->1 30->1 31->1 31->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; char * * _global_argv = ( char * * ) 0 ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; int main ( int argc , char * * argv , char * * _formal_envp ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; void encodeStrings_litStr0_i $ nit ( void ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; int _global_argc = 0 ; void megaInit ( void ) ; char * * _global_envp = ( char * * ) 0 ; extern int ( /* missing proto */ printf ) ( ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; char encodeStrings_litStr0 [ 12 ] ; void megaInit ( void ) { { encodeStrings_litStr0_i $ nit ( ) ; } } void encodeStrings_litStr0_i $ nit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { case 0 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; } } } int main ( int argc , char * * argv , char * * _formal_envp ) { int sum ; char const * str ; register char const * t ; int _BARRIER_0 ; { megaInit ( ) ; _global_argc = argc ; _global_argv = argv ; _global_envp = _formal_envp ; _BARRIER_0 = 1 ; sum = 0 ; str = ( char const * ) * ( argv + 1 ) ; t = str ; while ( * t ) { sum += ( int ) * t ; t ++ ; } _1_stringEncoder ( 0 , encodeStrings_litStr0 ) ; printf ( encodeStrings_litStr0 , sum ) ; return ( 0 ) ; } }
>>>Func
METHOD binarysearch1
METHOD_RETURN int
PARAM int const   *arr
PARAM int l
PARAM int r
PARAM int x
RETURN return (-1); return (-1);
<operator>.greaterEqualsThan r >= l
<operator>.minus -1
<operator>.assignment mid = l + (r - l) / 2
<operator>.assignment tmp___0 = binarysearch1(arr, mid + 1, r, x)
RETURN return (tmp___0); return (tmp___0);
<operator>.equals *(arr + mid) == (int const   )x
<operator>.greaterThan *(arr + mid) > (int const   )x
IDENTIFIER tmp___0 return (tmp___0);
<operator>.addition l + (r - l) / 2
RETURN return (mid); return (mid);
<operator>.assignment tmp = binarysearch1(arr, l, mid - 1, x)
RETURN return (tmp); return (tmp);
binarysearch1 binarysearch1(arr, mid + 1, r, x)
<operator>.division (r - l) / 2
<operator>.cast (int const   )x
IDENTIFIER mid return (mid);
<operator>.cast (int const   )x
IDENTIFIER tmp return (tmp);
<operator>.addition mid + 1
<operator>.subtraction r - l
<operator>.addition arr + mid
<operator>.addition arr + mid
binarysearch1 binarysearch1(arr, l, mid - 1, x)
<operator>.subtraction mid - 1
<operator>.indirection *(arr + mid)
<operator>.indirection *(arr + mid)
UNKNOWN int const int const
UNKNOWN int const int const
>>>PDG&35 0->2 0->3 0->4 0->5 0->7 0->8 0->9 0->12 0->13 0->14 0->15 0->19 0->20 0->21 0->22 0->23 0->24 0->25 0->26 0->27 0->28 0->29 0->30 2->19 2->27 2->28 2->29 3->7 4->7 5->12 5->13 5->19 5->21 5->23 5->29 6->1 7->1 7->6 7->8 7->9 7->12 7->15 7->20 7->21 7->26 7->26 7->26 7->27 7->31 7->33 8->6 9->1 9->1 9->19 9->22 9->25 9->27 9->28 9->30 10->14 11->1 12->1 12->1 12->1 12->13 12->16 12->23 12->28 12->32 12->34 13->10 13->11 13->17 13->18 13->19 13->25 13->29 13->30 14->11 15->1 15->1 16->1 17->24 18->1 19->10 19->10 19->10 19->10 20->1 20->9 20->9 20->15 20->15 21->1 22->16 24->18 26->1 26->9 26->15 26->19 26->20 26->20 26->29 27->1 27->1 29->17 29->17 29->17 29->17 30->29 30->29
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; void main ( void ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int printf ( char const * format , ... ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; int binarysearch1 ( int const * arr , int l , int r , int x ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; int binarysearch1 ( int const * arr , int l , int r , int x ) { int mid ; int tmp ; int tmp___0 ; { if ( r >= l ) { mid = l + ( r - l ) / 2 ; if ( * ( arr + mid ) == ( int const ) x ) { return ( mid ) ; } if ( * ( arr + mid ) > ( int const ) x ) { tmp = binarysearch1 ( arr , l , mid - 1 , x ) ; return ( tmp ) ; } tmp___0 = binarysearch1 ( arr , mid + 1 , r , x ) ; return ( tmp___0 ) ; } return ( -1 ) ; } } void megaInit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { } } } void main ( void ) { { megaInit ( ) ; } }
>>>Func
METHOD _1_stringEncoder
METHOD_RETURN void
PARAM int n
PARAM char str[]
BLOCK <empty> <empty>
<operator>.assignment encodeStrings_i3 = 0
IDENTIFIER n switch(n)
LITERAL 1 <empty>
<operator>.assignment str[encodeStrings_i3] = 'N'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'u'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'm'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'b'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'i'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'f'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'o'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'u'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '.'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 0 <empty>
<operator>.assignment str[encodeStrings_i3] = 'N'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'u'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'm'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'b'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'i'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'o'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'f'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'o'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'u'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '.'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
>>>PDG&89 0->2 0->3 0->4 0->5 0->6 0->7 0->8 0->9 0->10 0->11 0->12 0->13 0->14 0->15 0->16 0->17 0->18 0->19 0->20 0->21 0->22 0->23 0->24 0->25 0->26 0->27 0->28 0->29 0->30 0->31 0->32 0->33 0->34 0->35 0->36 0->37 0->38 0->39 0->40 0->41 0->42 0->43 0->44 0->45 0->46 0->47 0->48 0->49 0->50 0->51 0->52 0->53 0->54 0->55 0->56 0->57 0->58 0->59 0->60 0->61 0->62 0->63 0->64 0->65 0->66 0->67 0->68 0->69 0->70 0->71 0->72 0->73 0->74 0->75 0->76 0->77 0->78 0->79 0->80 0->81 0->82 0->83 0->84 0->85 0->86 0->87 0->88 2->1 3->1 5->1 5->1 5->9 5->46 8->1 9->11 11->13 12->1 13->15 14->1 15->17 16->1 17->19 18->1 19->21 21->23 22->1 23->25 24->1 25->27 26->1 27->29 28->1 29->31 30->1 31->33 32->1 33->35 34->1 35->37 36->1 37->39 38->1 39->41 40->1 41->43 42->1 42->1 43->1 43->1 45->1 46->48 48->50 49->1 50->52 51->1 52->54 53->1 54->56 55->1 56->58 58->60 59->1 60->62 61->1 62->64 64->66 66->68 68->70 69->1 70->72 71->1 72->74 73->1 74->76 75->1 76->78 77->1 78->80 79->1 80->82 81->1 82->84 83->1 84->86 85->1 86->88 87->1 87->1 88->1 88->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fclose ( void * stream ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; char * * _global_argv = ( char * * ) 0 ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; int main ( int argc , char * * argv , char * * _formal_envp ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void encodeStrings_litStr0_i $ nit ( void ) ; int _global_argc = 0 ; void megaInit ( void ) ; char * * _global_envp = ( char * * ) 0 ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int ( /* missing proto */ printf ) ( ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern double strtod ( char const * str , char const * endptr ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int ( /* missing proto */ binary ) ( ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern void signal ( int sig , void * func ) ; extern double difftime ( long tv1 , long tv0 ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; void encodeStrings_litStr1_i $ nit ( void ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; char encodeStrings_litStr1 [ 18 ] ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; char encodeStrings_litStr0 [ 22 ] ; int main ( int argc , char * * argv , char * * _formal_envp ) { int a [ 10 ] ; int i ; int m ; int c ; int l ; int u ; int _BARRIER_0 ; { megaInit ( ) ; _global_argc = argc ; _global_argv = argv ; _global_envp = _formal_envp ; _BARRIER_0 = 1 ; if ( argc < 12 ) { return ( 1 ) ; } i = 1 ; while ( i < argc - 1 ) { a [ i - 1 ] = ( int ) * ( * ( argv + i ) + 0 ) ; i ++ ; } m = ( int ) * ( * ( argv + ( argc - 1 ) ) + 0 ) ; l = 0 ; u = argc - 2 ; c = binary ( a , argc - 1 , m , l , u ) ; if ( c == 0 ) { _1_stringEncoder ( 0 , encodeStrings_litStr0 ) ; printf ( encodeStrings_litStr0 ) ; } else { _1_stringEncoder ( 1 , encodeStrings_litStr1 ) ; printf ( encodeStrings_litStr1 ) ; } return ( 0 ) ; } } void encodeStrings_litStr1_i $ nit ( void ) { { } } void megaInit ( void ) { { encodeStrings_litStr1_i $ nit ( ) ; encodeStrings_litStr0_i $ nit ( ) ; } } void encodeStrings_litStr0_i $ nit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { case 1 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 0 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; } } }
>>>Func
METHOD cycleSort
METHOD_RETURN void
PARAM int *arr
PARAM int n
<operator>.assignment writes = 0
<operator>.assignment cycle_start = 0
RETURN return; return;
<operator>.lessEqualsThan cycle_start <= n - 2
<operator>.assignment item = *(arr + cycle_start)
<operator>.assignment pos = cycle_start
<operator>.assignment i = cycle_start + 1
<operator>.postIncrement cycle_start ++
<operator>.subtraction n - 2
<operator>.lessThan i < n
<operator>.equals pos == cycle_start
<operator>.equals item == *(arr + pos)
<operator>.notEquals pos != cycle_start
<operator>.notEquals pos != cycle_start
<operator>.addition cycle_start + 1
<operator>.postIncrement i ++
<operator>.postIncrement pos ++
swap swap(& item, arr + pos)
<operator>.postIncrement writes ++
<operator>.assignment pos = cycle_start
<operator>.assignment i___0 = cycle_start + 1
<operator>.addition arr + cycle_start
<operator>.lessThan *(arr + i) < item
<operator>.lessThan i___0 < n
<operator>.equals item == *(arr + pos)
<operator>.notEquals item != *(arr + pos)
<operator>.postIncrement pos ++
<operator>.addition arr + pos
<operator>.addition arr + pos
<operator>.addition cycle_start + 1
<operator>.postIncrement i___0 ++
<operator>.postIncrement pos ++
swap swap(& item, arr + pos)
<operator>.postIncrement writes ++
<operator>.lessThan *(arr + i___0) < item
<operator>.addition arr + i
<operator>.postIncrement pos ++
<operator>.addition arr + pos
<operator>.addition arr + pos
<operator>.addition arr + pos
<operator>.addition arr + i___0
<operator>.indirection *(arr + cycle_start)
<operator>.indirection *(arr + pos)
<operator>.addressOf & item
<operator>.indirection *(arr + i)
<operator>.indirection *(arr + pos)
<operator>.indirection *(arr + pos)
<operator>.addressOf & item
<operator>.indirection *(arr + i___0)
>>>PDG&53 0->2 0->3 0->4 0->5 0->6 0->7 0->9 0->10 0->11 0->12 0->13 0->14 0->15 0->16 0->17 0->18 0->19 0->20 0->21 0->22 0->23 0->24 0->25 0->26 0->27 0->28 0->29 0->30 0->31 0->32 0->33 0->34 0->35 0->36 0->37 0->38 0->39 0->40 0->41 0->42 0->43 0->44 2->1 2->25 3->12 4->1 4->1 4->22 4->37 5->1 5->7 6->1 7->1 7->1 7->1 7->7 7->8 7->9 7->9 7->10 7->10 7->11 7->12 7->13 7->14 7->14 7->18 7->18 7->25 7->25 7->45 8->1 8->1 8->1 8->15 8->26 9->1 9->14 9->30 10->1 10->1 10->13 11->1 11->7 12->1 12->7 12->7 12->13 13->1 13->1 13->12 13->13 13->19 13->19 13->26 13->27 13->39 13->39 13->48 14->1 14->1 14->11 14->15 14->16 14->16 14->16 14->17 14->20 14->31 14->31 14->46 15->1 15->1 15->1 15->15 15->20 15->21 15->21 15->28 15->31 15->38 15->46 16->17 16->17 16->21 16->21 16->22 16->32 16->32 16->47 17->1 17->1 17->11 17->17 17->23 17->23 17->24 17->24 17->27 17->28 17->29 17->33 17->33 17->41 17->42 17->49 17->50 19->1 19->13 20->1 20->16 20->31 21->1 21->1 21->1 21->15 21->26 21->28 21->29 21->36 21->38 22->1 22->1 22->37 23->1 23->17 23->35 23->36 23->40 23->41 23->42 23->43 24->1 24->1 24->27 25->1 26->1 26->1 26->1 26->15 26->30 27->1 27->1 27->12 27->27 27->34 27->34 27->38 27->44 27->44 27->52 28->1 28->28 28->29 28->35 28->41 28->49 29->1 29->1 29->1 29->28 29->36 29->36 29->36 29->37 29->38 29->43 29->51 30->1 30->14 31->1 32->1 34->1 34->27 35->1 35->17 35->36 35->41 35->42 35->43 36->1 36->1 36->1 36->15 36->21 36->26 36->28 36->29 36->38 37->1 37->1 37->22 38->1 38->1 38->28 38->40 39->1 40->1 40->17 40->35 40->36 40->41 40->42 40->43 42->1 43->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; void cycleSort ( int * arr , int n ) ; extern unsigned long strlen ( char const * s ) ; void main ( void ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; extern int ( /* missing proto */ swap ) ( ) ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int printf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern int scanf ( char const * format , ... ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern float strtof ( char const * str , char const * endptr ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; void megaInit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { } } } void main ( void ) { { megaInit ( ) ; } } void cycleSort ( int * arr , int n ) { int writes ; int cycle_start ; int item ; int pos ; int i ; int i___0 ; { writes = 0 ; cycle_start = 0 ; while ( cycle_start <= n - 2 ) { item = * ( arr + cycle_start ) ; pos = cycle_start ; i = cycle_start + 1 ; while ( i < n ) { if ( * ( arr + i ) < item ) { pos ++ ; } i ++ ; } if ( pos == cycle_start ) { goto __Cont ; } while ( item == * ( arr + pos ) ) { pos ++ ; } if ( pos != cycle_start ) { swap ( & item , arr + pos ) ; writes ++ ; } while ( pos != cycle_start ) { pos = cycle_start ; i___0 = cycle_start + 1 ; while ( i___0 < n ) { if ( * ( arr + i___0 ) < item ) { pos ++ ; } i___0 ++ ; } while ( item == * ( arr + pos ) ) { pos ++ ; } if ( item != * ( arr + pos ) ) { swap ( & item , arr + pos ) ; writes ++ ; } } __Cont : /* CIL Label */ cycle_start ++ ; } return ; } }
>>>Func
METHOD main
METHOD_RETURN int
PARAM int _formal_argc
PARAM char **_formal_argv
PARAM char **_formal_envp
megaInit megaInit()
<operator>.assignment _global_argc = _formal_argc
<operator>.assignment _global_argv = _formal_argv
<operator>.assignment _global_envp = _formal_envp
<operator>.assignment _BARRIER_0 = 1
test_djb2 test_djb2()
RETURN return (0); return (0);
LITERAL 0 return (0);
>>>PDG&13 0->2 0->3 0->4 0->5 0->6 0->7 0->8 0->9 0->10 0->11 0->12 2->6 3->7 4->8 5->1 6->1 6->1 6->1 7->1 7->1 7->1 8->1 8->1 8->1 9->1 9->1 10->1 11->1 12->11
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fclose ( void * stream ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; char * * _global_argv = ( char * * ) 0 ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; int main ( int _formal_argc , char * * _formal_argv , char * * _formal_envp ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; int _global_argc = 0 ; char * * _global_envp = ( char * * ) 0 ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int printf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern int scanf ( char const * format , ... ) ; extern int ( /* missing proto */ test_djb2 ) ( ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { } } } void megaInit ( void ) { { } } int main ( int _formal_argc , char * * _formal_argv , char * * _formal_envp ) { int _BARRIER_0 ; { megaInit ( ) ; _global_argc = _formal_argc ; _global_argv = _formal_argv ; _global_envp = _formal_envp ; _BARRIER_0 = 1 ; test_djb2 ( ) ; return ( 0 ) ; } }
>>>Func
METHOD _1_stringEncoder
METHOD_RETURN void
PARAM int n
PARAM char str[]
BLOCK <empty> <empty>
<operator>.assignment encodeStrings_i3 = 0
IDENTIFIER n switch(n)
LITERAL 1 <empty>
<operator>.assignment str[encodeStrings_i3] = 'w'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'o'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'g'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'u'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'm'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'b'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'o'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'f'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'p'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'm'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 0 <empty>
<operator>.assignment str[encodeStrings_i3] = 'Y'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'o'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'u'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'u'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'm'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'b'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '+'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '5'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'i'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
>>>PDG&109 0->2 0->3 0->4 0->5 0->6 0->7 0->8 0->9 0->10 0->11 0->12 0->13 0->14 0->15 0->16 0->17 0->18 0->19 0->20 0->21 0->22 0->23 0->24 0->25 0->26 0->27 0->28 0->29 0->30 0->31 0->32 0->33 0->34 0->35 0->36 0->37 0->38 0->39 0->40 0->41 0->42 0->43 0->44 0->45 0->46 0->47 0->48 0->49 0->50 0->51 0->52 0->53 0->54 0->55 0->56 0->57 0->58 0->59 0->60 0->61 0->62 0->63 0->64 0->65 0->66 0->67 0->68 0->69 0->70 0->71 0->72 0->73 0->74 0->75 0->76 0->77 0->78 0->79 0->80 0->81 0->82 0->83 0->84 0->85 0->86 0->87 0->88 0->89 0->90 0->91 0->92 0->93 0->94 0->95 0->96 0->97 0->98 0->99 0->100 0->101 0->102 0->103 0->104 0->105 0->106 0->107 0->108 2->1 3->1 5->1 5->1 5->9 5->64 8->1 9->11 11->13 13->15 15->17 16->1 17->19 19->21 20->1 21->23 22->1 23->25 25->27 26->1 27->29 29->31 31->33 33->35 34->1 35->37 36->1 37->39 38->1 39->41 40->1 41->43 42->1 43->45 45->47 46->1 47->49 49->51 50->1 51->53 52->1 53->55 54->1 55->57 56->1 57->59 58->1 59->61 60->1 60->1 61->1 61->1 63->1 64->66 65->1 66->68 68->70 70->72 72->74 73->1 74->76 75->1 76->78 77->1 78->80 79->1 80->82 81->1 82->84 83->1 84->86 86->88 87->1 88->90 90->92 91->1 92->94 94->96 95->1 96->98 97->1 98->100 99->1 100->102 101->1 102->104 103->1 104->106 105->1 106->108 107->1 107->1 108->1 108->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; char * * _global_argv = ( char * * ) 0 ; extern int unlink ( char const * filename ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int ( /* missing proto */ test_c_atoi ) ( ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern int raise ( int sig ) ; extern int ( /* missing proto */ c_atoi ) ( ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int getpagesize ( ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; int main ( int argc , char * * argv , char * * _formal_envp ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; void encodeStrings_litStr0_i $ nit ( void ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; int _global_argc = 0 ; void megaInit ( void ) ; char * * _global_envp = ( char * * ) 0 ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int ( /* missing proto */ printf ) ( ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern double strtod ( char const * str , char const * endptr ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern void signal ( int sig , void * func ) ; extern double difftime ( long tv1 , long tv0 ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; void encodeStrings_litStr1_i $ nit ( void ) ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; char encodeStrings_litStr1 [ 27 ] ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; char encodeStrings_litStr0 [ 23 ] ; int main ( int argc , char * * argv , char * * _formal_envp ) { int tmp ; int _BARRIER_0 ; { megaInit ( ) ; _global_argc = argc ; _global_argv = argv ; _global_envp = _formal_envp ; _BARRIER_0 = 1 ; test_c_atoi ( ) ; if ( argc == 2 ) { tmp = c_atoi ( * ( argv + 1 ) ) ; _1_stringEncoder ( 0 , encodeStrings_litStr0 ) ; printf ( encodeStrings_litStr0 , tmp + 5 ) ; return ( 0 ) ; } _1_stringEncoder ( 1 , encodeStrings_litStr1 ) ; printf ( encodeStrings_litStr1 ) ; return ( 1 ) ; } } void encodeStrings_litStr0_i $ nit ( void ) { { } } void encodeStrings_litStr1_i $ nit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { case 1 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 0 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; } } } void megaInit ( void ) { { encodeStrings_litStr1_i $ nit ( ) ; encodeStrings_litStr0_i $ nit ( ) ; } }
>>>Func
METHOD _1_stringEncoder
METHOD_RETURN void
PARAM int n
PARAM char str[]
BLOCK <empty> <empty>
<operator>.assignment encodeStrings_i3 = 0
IDENTIFIER n switch(n)
LITERAL 1 <empty>
<operator>.assignment str[encodeStrings_i3] = 'i'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'f'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '-'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '2'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '-'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'l'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'o'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 0 <empty>
<operator>.assignment str[encodeStrings_i3] = 'i'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'f'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '-'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '2'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '-'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'w'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'i'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
>>>PDG&51 0->2 0->3 0->4 0->5 0->6 0->7 0->8 0->9 0->10 0->11 0->12 0->13 0->14 0->15 0->16 0->17 0->18 0->19 0->20 0->21 0->22 0->23 0->24 0->25 0->26 0->27 0->28 0->29 0->30 0->31 0->32 0->33 0->34 0->35 0->36 0->37 0->38 0->39 0->40 0->41 0->42 0->43 0->44 0->45 0->46 0->47 0->48 0->49 0->50 2->1 3->1 5->1 5->1 5->9 5->32 8->1 9->11 10->1 11->13 13->15 14->1 15->17 16->1 17->19 18->1 19->21 20->1 21->23 22->1 23->25 24->1 25->27 26->1 27->29 28->1 28->1 29->1 29->1 32->34 33->1 34->36 36->38 37->1 38->40 39->1 40->42 41->1 42->44 43->1 44->46 45->1 46->48 47->1 48->50 49->1 49->1 50->1 50->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; char * * _global_argv = ( char * * ) 0 ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern int raise ( int sig ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; int main ( int argc , char * * argv , char * * _formal_envp ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void encodeStrings_litStr0_i $ nit ( void ) ; int _global_argc = 0 ; void megaInit ( void ) ; char * * _global_envp = ( char * * ) 0 ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int ( /* missing proto */ printf ) ( ) ; extern int scanf ( char const * format , ... ) ; extern void perror ( char const * str ) ; extern long clock ( void ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern float strtof ( char const * str , char const * endptr ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern double strtod ( char const * str , char const * endptr ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; void encodeStrings_litStr1_i $ nit ( void ) ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; char encodeStrings_litStr1 [ 11 ] ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; char encodeStrings_litStr0 [ 10 ] ; void megaInit ( void ) { { encodeStrings_litStr1_i $ nit ( ) ; encodeStrings_litStr0_i $ nit ( ) ; } } void encodeStrings_litStr0_i $ nit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { case 1 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 0 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; } } } int main ( int argc , char * * argv , char * * _formal_envp ) { unsigned char x ; unsigned char c ; int _BARRIER_0 ; { megaInit ( ) ; _global_argc = argc ; _global_argv = argv ; _global_envp = _formal_envp ; _BARRIER_0 = 1 ; c = ( unsigned char ) * ( * ( argv + 1 ) + 0 ) ; if ( ( int ) c > 127 ) { x = ( unsigned char ) ( ( int ) c / 3 ) ; } else { x = ( unsigned char ) ( ( int ) c * 2 ) ; } if ( ( int ) x > 63 ) { _1_stringEncoder ( 0 , encodeStrings_litStr0 ) ; printf ( encodeStrings_litStr0 ) ; } else { _1_stringEncoder ( 1 , encodeStrings_litStr1 ) ; printf ( encodeStrings_litStr1 ) ; } return ( 0 ) ; } } void encodeStrings_litStr1_i $ nit ( void ) { { } }
>>>Func
METHOD _1_stringEncoder
METHOD_RETURN void
PARAM int n
PARAM char str[]
BLOCK <empty> <empty>
<operator>.assignment encodeStrings_i3 = 0
IDENTIFIER n switch(n)
LITERAL 2 <empty>
<operator>.assignment str[encodeStrings_i3] = 'T'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'h'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'q'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'u'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'i'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'v'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'l'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'h'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'x'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'c'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'i'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'm'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'l'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'v'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'l'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'u'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ':'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'l'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'X'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 1 <empty>
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'l'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 0 <empty>
<operator>.assignment str[encodeStrings_i3] = 'E'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'h'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'b'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'i'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'y'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'u'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'm'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'b'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ':'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
>>>PDG&146 0->2 0->3 0->4 0->5 0->6 0->7 0->8 0->9 0->10 0->11 0->12 0->13 0->14 0->15 0->16 0->17 0->18 0->19 0->20 0->21 0->22 0->23 0->24 0->25 0->26 0->27 0->28 0->29 0->30 0->31 0->32 0->33 0->34 0->35 0->36 0->37 0->38 0->39 0->40 0->41 0->42 0->43 0->44 0->45 0->46 0->47 0->48 0->49 0->50 0->51 0->52 0->53 0->54 0->55 0->56 0->57 0->58 0->59 0->60 0->61 0->62 0->63 0->64 0->65 0->66 0->67 0->68 0->69 0->70 0->71 0->72 0->73 0->74 0->75 0->76 0->77 0->78 0->79 0->80 0->81 0->82 0->83 0->84 0->85 0->86 0->87 0->88 0->89 0->90 0->91 0->92 0->93 0->94 0->95 0->96 0->97 0->98 0->99 0->100 0->101 0->102 0->103 0->104 0->105 0->106 0->107 0->108 0->109 0->110 0->111 0->112 0->113 0->114 0->115 0->116 0->117 0->118 0->119 0->120 0->121 0->122 0->123 0->124 0->125 0->126 0->127 0->128 0->129 0->130 0->131 0->132 0->133 0->134 0->135 0->136 0->137 0->138 0->139 0->140 0->141 0->142 0->143 0->144 0->145 2->1 3->1 5->1 5->1 5->9 5->86 5->95 8->1 9->11 11->13 13->15 15->17 17->19 18->1 19->21 21->23 23->25 25->27 27->29 29->31 31->33 32->1 33->35 34->1 35->37 37->39 38->1 39->41 41->43 42->1 43->45 45->47 46->1 47->49 49->51 50->1 51->53 52->1 53->55 54->1 55->57 57->59 59->61 61->63 62->1 63->65 64->1 65->67 67->69 68->1 69->71 70->1 71->73 72->1 73->75 74->1 75->77 76->1 77->79 78->1 79->81 80->1 81->83 82->1 82->1 83->1 83->1 85->1 86->88 87->1 88->90 89->1 90->92 91->1 91->1 92->1 92->1 94->1 95->97 97->99 99->101 101->103 103->105 105->107 106->1 107->109 108->1 109->111 111->113 113->115 115->117 116->1 117->119 119->121 120->1 121->123 123->125 124->1 125->127 127->129 128->1 129->131 130->1 131->133 132->1 133->135 134->1 135->137 136->1 137->139 138->1 139->141 140->1 141->143 142->1 143->145 144->1 144->1 145->1 145->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; char * * _global_argv = ( char * * ) 0 ; void encodeStrings_litStr2_i $ nit ( void ) ; extern int unlink ( char const * filename ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern int raise ( int sig ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern double ceil ( double x ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; int main ( int _formal_argc , char * * _formal_argv , char * * _formal_envp ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; void encodeStrings_litStr0_i $ nit ( void ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; int _global_argc = 0 ; char * * _global_envp = ( char * * ) 0 ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int ( /* missing proto */ printf ) ( ) ; extern int ( /* missing proto */ scanf ) ( ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; void encodeStrings_litStr1_i $ nit ( void ) ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; char encodeStrings_litStr2 [ 38 ] ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; char encodeStrings_litStr1 [ 4 ] ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; char encodeStrings_litStr0 [ 26 ] ; void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { case 2 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 1 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 0 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; } } } void megaInit ( void ) { { encodeStrings_litStr2_i $ nit ( ) ; encodeStrings_litStr1_i $ nit ( ) ; encodeStrings_litStr0_i $ nit ( ) ; } } void encodeStrings_litStr0_i $ nit ( void ) { { } } void encodeStrings_litStr1_i $ nit ( void ) { { } } void encodeStrings_litStr2_i $ nit ( void ) { { } } int main ( int _formal_argc , char * * _formal_argv , char * * _formal_envp ) { long binary ; long hexa ; long i ; long remainder ; int _BARRIER_0 ; { megaInit ( ) ; _global_argc = _formal_argc ; _global_argv = _formal_argv ; _global_envp = _formal_envp ; _BARRIER_0 = 1 ; hexa = 0L ; i = 1L ; _1_stringEncoder ( 0 , encodeStrings_litStr0 ) ; printf ( encodeStrings_litStr0 ) ; _1_stringEncoder ( 1 , encodeStrings_litStr1 ) ; scanf ( encodeStrings_litStr1 , & binary ) ; while ( binary != 0L ) { remainder = binary % 10L ; hexa += remainder * i ; i *= 2L ; binary /= 10L ; } _1_stringEncoder ( 2 , encodeStrings_litStr2 ) ; printf ( encodeStrings_litStr2 , hexa ) ; return ( 0 ) ; } }
>>>Func
METHOD rangeBitwiseAnd
METHOD_RETURN int
PARAM int m
PARAM int n
RETURN return (n); return (n);
<operator>.lessThan m < n
IDENTIFIER n return (n);
<operators>.assignmentAnd n &= n - 1
<operator>.subtraction n - 1
>>>PDG&9 0->2 0->3 0->5 0->6 0->7 0->8 2->5 3->5 4->1 5->1 5->1 5->1 5->5 5->6 5->7 5->8 5->8 6->4 8->7 8->7
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; void main ( void ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int printf ( char const * format , ... ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; int rangeBitwiseAnd ( int m , int n ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; int rangeBitwiseAnd ( int m , int n ) { { while ( m < n ) { n &= n - 1 ; } return ( n ) ; } } void megaInit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { } } } void main ( void ) { { megaInit ( ) ; } }
>>>Func
METHOD JSHash
METHOD_RETURN unsigned int
PARAM char *str
PARAM unsigned int len
<operator>.assignment hash = 1315423911U
<operator>.assignment i = 0U
<operator>.assignment i = 0U
RETURN return (hash); return (hash);
<operator>.lessThan i < len
IDENTIFIER hash return (hash);
<operators>.assignmentXor hash ^= ((hash << 5) + (unsigned int )*str) + (hash >> 2)
<operator>.postIncrement str ++
<operator>.postIncrement i ++
<operator>.addition ((hash << 5) + (unsigned int )*str) + (hash >> 2)
<operator>.addition (hash << 5) + (unsigned int )*str
<operator>.arithmeticShiftRight hash >> 2
<operator>.shiftLeft hash << 5
<operator>.cast (unsigned int )*str
UNKNOWN unsigned int unsigned int
<operator>.indirection *str
>>>PDG&20 0->2 0->3 0->4 0->5 0->6 0->8 0->9 0->10 0->11 0->12 0->15 0->16 2->1 2->11 3->8 4->1 4->1 4->9 4->16 6->1 6->8 7->1 8->1 8->1 8->1 8->8 8->10 8->11 8->12 8->12 8->13 8->14 8->15 8->16 8->17 8->18 8->19 9->7 10->1 10->1 10->9 10->16 11->1 11->1 12->1 12->8 13->1 13->1 14->1 14->1 15->10 15->10 15->13 15->13 16->10 16->10 16->13 16->13 16->14 16->14 16->15 17->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; void main ( void ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int printf ( char const * format , ... ) ; unsigned int JSHash ( char * str , unsigned int len ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { } } } void megaInit ( void ) { { } } unsigned int JSHash ( char * str , unsigned int len ) { unsigned int hash ; unsigned int i ; { hash = 1315423911U ; i = 0U ; i = 0U ; while ( i < len ) { hash ^= ( ( hash << 5 ) + ( unsigned int ) * str ) + ( hash >> 2 ) ; str ++ ; i ++ ; } return ( hash ) ; } } void main ( void ) { { megaInit ( ) ; } }
>>>Func
METHOD _1_stringEncoder
METHOD_RETURN void
PARAM int n
PARAM char str[]
BLOCK <empty> <empty>
<operator>.assignment encodeStrings_i3 = 0
IDENTIFIER n switch(n)
LITERAL 1 <empty>
<operator>.assignment str[encodeStrings_i3] = 'S'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'u'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'm'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'i'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ':'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 0 <empty>
<operator>.assignment str[encodeStrings_i3] = 'U'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'g'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ':'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'p'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'o'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'g'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'm'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '-'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'm'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'c'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'h'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
>>>PDG&85 0->2 0->3 0->4 0->5 0->6 0->7 0->8 0->9 0->10 0->11 0->12 0->13 0->14 0->15 0->16 0->17 0->18 0->19 0->20 0->21 0->22 0->23 0->24 0->25 0->26 0->27 0->28 0->29 0->30 0->31 0->32 0->33 0->34 0->35 0->36 0->37 0->38 0->39 0->40 0->41 0->42 0->43 0->44 0->45 0->46 0->47 0->48 0->49 0->50 0->51 0->52 0->53 0->54 0->55 0->56 0->57 0->58 0->59 0->60 0->61 0->62 0->63 0->64 0->65 0->66 0->67 0->68 0->69 0->70 0->71 0->72 0->73 0->74 0->75 0->76 0->77 0->78 0->79 0->80 0->81 0->82 0->83 0->84 2->1 3->1 5->1 5->1 5->9 5->34 8->1 9->11 10->1 11->13 12->1 13->15 15->17 16->1 17->19 18->1 19->21 20->1 21->23 22->1 23->25 24->1 25->27 26->1 27->29 28->1 29->31 30->1 30->1 31->1 31->1 33->1 34->36 35->1 36->38 38->40 40->42 42->44 43->1 44->46 46->48 47->1 48->50 50->52 51->1 52->54 53->1 54->56 56->58 58->60 60->62 61->1 62->64 63->1 64->66 66->68 67->1 68->70 69->1 70->72 71->1 72->74 73->1 74->76 75->1 76->78 77->1 78->80 79->1 80->82 81->1 82->84 83->1 83->1 84->1 84->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; char * * _global_argv = ( char * * ) 0 ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern int raise ( int sig ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; int main ( int argc , char * * argv , char * * _formal_envp ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void encodeStrings_litStr0_i $ nit ( void ) ; int _global_argc = 0 ; void megaInit ( void ) ; char * * _global_envp = ( char * * ) 0 ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int ( /* missing proto */ printf ) ( ) ; extern int scanf ( char const * format , ... ) ; extern void perror ( char const * str ) ; extern long clock ( void ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern float strtof ( char const * str , char const * endptr ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern double strtod ( char const * str , char const * endptr ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; void encodeStrings_litStr1_i $ nit ( void ) ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; char encodeStrings_litStr1 [ 12 ] ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; char encodeStrings_litStr0 [ 26 ] ; void megaInit ( void ) { { encodeStrings_litStr1_i $ nit ( ) ; encodeStrings_litStr0_i $ nit ( ) ; } } void encodeStrings_litStr0_i $ nit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { case 1 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 0 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; } } } int main ( int argc , char * * argv , char * * _formal_envp ) { int i ; int sum ; int _BARRIER_0 ; { megaInit ( ) ; _global_argc = argc ; _global_argv = argv ; _global_envp = _formal_envp ; _BARRIER_0 = 1 ; sum = 0 ; if ( argc < 2 ) { _1_stringEncoder ( 0 , encodeStrings_litStr0 ) ; printf ( encodeStrings_litStr0 ) ; return ( 1 ) ; } i = 0 ; while ( i < ( int ) * ( * ( argv + 1 ) + 0 ) ) { sum += i ; i ++ ; } _1_stringEncoder ( 1 , encodeStrings_litStr1 ) ; printf ( encodeStrings_litStr1 , sum ) ; return ( 0 ) ; } } void encodeStrings_litStr1_i $ nit ( void ) { { } }
>>>Func
METHOD compare
METHOD_RETURN int
PARAM void const   *a
PARAM void const   *b
RETURN return (*((int *)b) - *((int *)a)); return (*((int *)b) - *((int *)a));
<operator>.subtraction *((int *)b) - *((int *)a)
<operator>.cast (int *)b
<operator>.cast (int *)a
>>>PDG&8 0->2 0->3 0->6 0->7 2->7 3->6 4->1 5->1 5->1 5->1 5->4 6->1 7->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; int compare ( void const * a , void const * b ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; void main ( void ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int printf ( char const * format , ... ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; int compare ( void const * a , void const * b ) { { return ( * ( ( int * ) b ) - * ( ( int * ) a ) ) ; } } void megaInit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { } } } void main ( void ) { { megaInit ( ) ; } }
>>>Func
METHOD _1_stringEncoder
METHOD_RETURN void
PARAM int n
PARAM char str[]
BLOCK <empty> <empty>
<operator>.assignment encodeStrings_i3 = 0
IDENTIFIER n switch(n)
LITERAL 9 <empty>
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 8 <empty>
<operator>.assignment str[encodeStrings_i3] = 'E'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'o'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'u'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'c'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'o'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'f'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'b'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'f'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 7 <empty>
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 6 <empty>
<operator>.assignment str[encodeStrings_i3] = 'E'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'i'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'i'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'o'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ':'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 5 <empty>
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 4 <empty>
<operator>.assignment str[encodeStrings_i3] = 'E'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'g'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'E'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'o'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'u'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'c'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ':'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 3 <empty>
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 2 <empty>
<operator>.assignment str[encodeStrings_i3] = 'E'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'h'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'u'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'm'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'b'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'o'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'f'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'g'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 1 <empty>
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 0 <empty>
<operator>.assignment str[encodeStrings_i3] = 'E'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'h'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'u'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'm'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'b'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'o'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'f'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'v'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'i'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'c'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
>>>PDG&291 0->2 0->3 0->4 0->5 0->6 0->7 0->8 0->9 0->10 0->11 0->12 0->13 0->14 0->15 0->16 0->17 0->18 0->19 0->20 0->21 0->22 0->23 0->24 0->25 0->26 0->27 0->28 0->29 0->30 0->31 0->32 0->33 0->34 0->35 0->36 0->37 0->38 0->39 0->40 0->41 0->42 0->43 0->44 0->45 0->46 0->47 0->48 0->49 0->50 0->51 0->52 0->53 0->54 0->55 0->56 0->57 0->58 0->59 0->60 0->61 0->62 0->63 0->64 0->65 0->66 0->67 0->68 0->69 0->70 0->71 0->72 0->73 0->74 0->75 0->76 0->77 0->78 0->79 0->80 0->81 0->82 0->83 0->84 0->85 0->86 0->87 0->88 0->89 0->90 0->91 0->92 0->93 0->94 0->95 0->96 0->97 0->98 0->99 0->100 0->101 0->102 0->103 0->104 0->105 0->106 0->107 0->108 0->109 0->110 0->111 0->112 0->113 0->114 0->115 0->116 0->117 0->118 0->119 0->120 0->121 0->122 0->123 0->124 0->125 0->126 0->127 0->128 0->129 0->130 0->131 0->132 0->133 0->134 0->135 0->136 0->137 0->138 0->139 0->140 0->141 0->142 0->143 0->144 0->145 0->146 0->147 0->148 0->149 0->150 0->151 0->152 0->153 0->154 0->155 0->156 0->157 0->158 0->159 0->160 0->161 0->162 0->163 0->164 0->165 0->166 0->167 0->168 0->169 0->170 0->171 0->172 0->173 0->174 0->175 0->176 0->177 0->178 0->179 0->180 0->181 0->182 0->183 0->184 0->185 0->186 0->187 0->188 0->189 0->190 0->191 0->192 0->193 0->194 0->195 0->196 0->197 0->198 0->199 0->200 0->201 0->202 0->203 0->204 0->205 0->206 0->207 0->208 0->209 0->210 0->211 0->212 0->213 0->214 0->215 0->216 0->217 0->218 0->219 0->220 0->221 0->222 0->223 0->224 0->225 0->226 0->227 0->228 0->229 0->230 0->231 0->232 0->233 0->234 0->235 0->236 0->237 0->238 0->239 0->240 0->241 0->242 0->243 0->244 0->245 0->246 0->247 0->248 0->249 0->250 0->251 0->252 0->253 0->254 0->255 0->256 0->257 0->258 0->259 0->260 0->261 0->262 0->263 0->264 0->265 0->266 0->267 0->268 0->269 0->270 0->271 0->272 0->273 0->274 0->275 0->276 0->277 0->278 0->279 0->280 0->281 0->282 0->283 0->284 0->285 0->286 0->287 0->288 0->289 0->290 2->1 3->1 5->1 5->1 5->9 5->16 5->59 5->66 5->107 5->114 5->163 5->170 5->225 5->232 8->1 9->11 10->1 11->13 12->1 12->1 13->1 13->1 15->1 16->18 17->1 18->20 19->1 20->22 22->24 24->26 26->28 28->30 30->32 31->1 32->34 33->1 34->36 35->1 36->38 37->1 38->40 40->42 41->1 42->44 44->46 45->1 46->48 47->1 48->50 49->1 50->52 51->1 52->54 53->1 54->56 55->1 55->1 56->1 56->1 58->1 59->61 60->1 61->63 62->1 62->1 63->1 63->1 65->1 66->68 68->70 70->72 72->74 73->1 74->76 76->78 77->1 78->80 79->1 80->82 81->1 82->84 84->86 86->88 88->90 89->1 90->92 91->1 92->94 93->1 94->96 95->1 96->98 97->1 98->100 99->1 100->102 101->1 102->104 103->1 103->1 104->1 104->1 106->1 107->109 108->1 109->111 110->1 110->1 111->1 111->1 114->116 116->118 117->1 118->120 120->122 122->124 123->1 124->126 125->1 126->128 128->130 129->1 130->132 131->1 132->134 133->1 134->136 135->1 136->138 138->140 140->142 142->144 143->1 144->146 145->1 146->148 147->1 148->150 149->1 150->152 151->1 152->154 153->1 154->156 155->1 156->158 157->1 158->160 159->1 159->1 160->1 160->1 162->1 163->165 164->1 165->167 166->1 166->1 167->1 167->1 169->1 170->172 172->174 174->176 176->178 178->180 180->182 181->1 182->184 183->1 184->186 186->188 188->190 189->1 190->192 191->1 192->194 193->1 194->196 195->1 196->198 198->200 199->1 200->202 202->204 203->1 204->206 205->1 206->208 207->1 208->210 210->212 211->1 212->214 213->1 214->216 215->1 216->218 217->1 218->220 219->1 220->222 221->1 221->1 222->1 222->1 224->1 225->227 226->1 227->229 228->1 228->1 229->1 229->1 231->1 232->234 234->236 236->238 238->240 240->242 242->244 244->246 245->1 246->248 248->250 250->252 251->1 252->254 253->1 254->256 255->1 256->258 257->1 258->260 260->262 262->264 264->266 265->1 266->268 267->1 268->270 269->1 270->272 271->1 272->274 274->276 275->1 276->278 277->1 278->280 279->1 280->282 281->1 282->284 283->1 284->286 285->1 286->288 287->1 288->290 289->1 289->1 290->1 290->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct Graph ; struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; char * * _global_argv = ( char * * ) 0 ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int ( /* missing proto */ addEdge ) ( ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; void encodeStrings_litStr2_i $ nit ( void ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int pthread_mutex_lock ( int * mutex ) ; void encodeStrings_litStr5_i $ nit ( void ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern int raise ( int sig ) ; extern void abort ( ) ; void encodeStrings_litStr8_i $ nit ( void ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; int main ( int _formal_argc , char * * _formal_argv , char * * _formal_envp ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void encodeStrings_litStr0_i $ nit ( void ) ; int _global_argc = 0 ; void megaInit ( void ) ; char * * _global_envp = ( char * * ) 0 ; extern int ( /* missing proto */ bfs ) ( ) ; void encodeStrings_litStr3_i $ nit ( void ) ; extern int ( /* missing proto */ printf ) ( ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern void perror ( char const * str ) ; extern long clock ( void ) ; extern int ( /* missing proto */ scanf ) ( ) ; void encodeStrings_litStr6_i $ nit ( void ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; void encodeStrings_litStr9_i $ nit ( void ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern double strtod ( char const * str , char const * endptr ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int ( /* missing proto */ createGraph ) ( ) ; void encodeStrings_litStr1_i $ nit ( void ) ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; char encodeStrings_litStr9 [ 3 ] ; void encodeStrings_litStr4_i $ nit ( void ) ; char encodeStrings_litStr8 [ 21 ] ; char encodeStrings_litStr7 [ 3 ] ; char encodeStrings_litStr6 [ 20 ] ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; void encodeStrings_litStr7_i $ nit ( void ) ; char encodeStrings_litStr5 [ 3 ] ; extern int open ( char const * filename , int oflag , ... ) ; char encodeStrings_litStr4 [ 24 ] ; extern double sqrt ( double x ) ; char encodeStrings_litStr3 [ 3 ] ; char encodeStrings_litStr2 [ 27 ] ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; char encodeStrings_litStr1 [ 3 ] ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; char encodeStrings_litStr0 [ 30 ] ; void encodeStrings_litStr2_i $ nit ( void ) { { } } void encodeStrings_litStr3_i $ nit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { case 9 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 8 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 7 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 6 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 5 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 4 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 3 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 2 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 1 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 0 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; } } } void encodeStrings_litStr4_i $ nit ( void ) { { } } void encodeStrings_litStr0_i $ nit ( void ) { { } } void megaInit ( void ) { { encodeStrings_litStr9_i $ nit ( ) ; encodeStrings_litStr8_i $ nit ( ) ; encodeStrings_litStr7_i $ nit ( ) ; encodeStrings_litStr6_i $ nit ( ) ; encodeStrings_litStr5_i $ nit ( ) ; encodeStrings_litStr4_i $ nit ( ) ; encodeStrings_litStr3_i $ nit ( ) ; encodeStrings_litStr2_i $ nit ( ) ; encodeStrings_litStr1_i $ nit ( ) ; encodeStrings_litStr0_i $ nit ( ) ; } } void encodeStrings_litStr6_i $ nit ( void ) { { } } void encodeStrings_litStr9_i $ nit ( void ) { { } } int main ( int _formal_argc , char * * _formal_argv , char * * _formal_envp ) { int vertices ; int edges ; int source ; int i ; int src ; int dst ; struct Graph * graph ; int tmp ; int _BARRIER_0 ; { megaInit ( ) ; _global_argc = _formal_argc ; _global_argv = _formal_argv ; _global_envp = _formal_envp ; _BARRIER_0 = 1 ; _1_stringEncoder ( 0 , encodeStrings_litStr0 ) ; printf ( encodeStrings_litStr0 ) ; _1_stringEncoder ( 1 , encodeStrings_litStr1 ) ; scanf ( encodeStrings_litStr1 , & vertices ) ; tmp = createGraph ( vertices ) ; graph = ( struct Graph * ) tmp ; _1_stringEncoder ( 2 , encodeStrings_litStr2 ) ; printf ( encodeStrings_litStr2 ) ; _1_stringEncoder ( 3 , encodeStrings_litStr3 ) ; scanf ( encodeStrings_litStr3 , & edges ) ; i = 0 ; while ( i < edges ) { _1_stringEncoder ( 4 , encodeStrings_litStr4 ) ; printf ( encodeStrings_litStr4 , i + 1 ) ; _1_stringEncoder ( 5 , encodeStrings_litStr5 ) ; scanf ( encodeStrings_litStr5 , & src ) ; _1_stringEncoder ( 6 , encodeStrings_litStr6 ) ; printf ( encodeStrings_litStr6 ) ; _1_stringEncoder ( 7 , encodeStrings_litStr7 ) ; scanf ( encodeStrings_litStr7 , & dst ) ; addEdge ( graph , src , dst ) ; i ++ ; } _1_stringEncoder ( 8 , encodeStrings_litStr8 ) ; printf ( encodeStrings_litStr8 ) ; _1_stringEncoder ( 9 , encodeStrings_litStr9 ) ; scanf ( encodeStrings_litStr9 , & source ) ; bfs ( graph , source ) ; return ( 0 ) ; } } void encodeStrings_litStr8_i $ nit ( void ) { { } } void encodeStrings_litStr1_i $ nit ( void ) { { } } void encodeStrings_litStr5_i $ nit ( void ) { { } } void encodeStrings_litStr7_i $ nit ( void ) { { } }
>>>Func
METHOD main
METHOD_RETURN int
PARAM int _formal_argc
PARAM char **_formal_argv
PARAM char **_formal_envp
megaInit megaInit()
<operator>.assignment _global_argc = _formal_argc
<operator>.assignment _global_argv = _formal_argv
<operator>.assignment _global_envp = _formal_envp
<operator>.assignment _BARRIER_0 = 1
_1_stringEncoder _1_stringEncoder(0, encodeStrings_litStr0)
<operator>.assignment r = scanf(encodeStrings_litStr0, & t)
<operator>.assignment k = 0
<operator>.assignment k = 0
RETURN return (0); return (0);
<operator>.lessThan k < t
<operator>.lessThan k < t
LITERAL 0 return (0);
scanf scanf(encodeStrings_litStr0, & t)
_1_stringEncoder _1_stringEncoder(1, encodeStrings_litStr1)
<operator>.assignment r = scanf(encodeStrings_litStr1, & n)
<operator>.assignment len[k] = n
<operator>.assignment sum = 0
<operator>.assignment fraction = (double )1
<operator>.assignment smax = 32767
<operator>.assignment i = 0
<operator>.assignment tw = sum + 1
<operator>.assignment i = 0
<operator>.assignment i = 0
<operator>.postIncrement k ++
_1_stringEncoder _1_stringEncoder(3, encodeStrings_litStr3)
printf printf(encodeStrings_litStr3, k + 1)
<operator>.assignment i = 0
_1_stringEncoder _1_stringEncoder(5, encodeStrings_litStr5)
printf printf(encodeStrings_litStr5)
<operator>.postIncrement k ++
<operator>.lessThan i < n
<operator>.greaterThan tw > sum
<operator>.lessThan i < n
<operator>.lessThan i < n
<operator>.lessThan i < len[k]
scanf scanf(encodeStrings_litStr1, & n)
<operator>.cast (double )1
_1_stringEncoder _1_stringEncoder(2, encodeStrings_litStr2)
<operator>.assignment r = scanf(encodeStrings_litStr2, & points[i])
<operator>.assignmentPlus sum += points[i]
<operator>.postIncrement i ++
<operator>.addition sum + 1
<operator>.assignment tw = 0
<operator>.assignment max = -1
<operator>.assignment count = 0
<operator>.assignment i = 0
<operator>.assignment i = 0
<operator>.assignment smax = max
<operator>.assignment score[k][i] = (double )(max - points[i]) / (double )sum
<operator>.assignmentMinus fraction -= score[k][i]
<operator>.postIncrement i ++
<operator>.postIncrement i ++
<operator>.addition k + 1
_1_stringEncoder _1_stringEncoder(4, encodeStrings_litStr4)
printf printf(encodeStrings_litStr4  score[k][i] * (double )100)
<operator>.postIncrement i ++
<operator>.lessThan i < n
<operator>.lessThan i < n
<operator>.lessThan score[k][i] < (double )0
<operator>.lessEqualsThan points[i] <= max
scanf scanf(encodeStrings_litStr2, & points[i])
<operator>.minus -1
<operator>.postIncrement i ++
<operator>.assignment weight[i] = max - points[i]
<operator>.assignmentPlus tw += weight[i]
<operator>.postIncrement i ++
<operator>.division (double )(max - points[i]) / (double )sum
<operator>.assignment score[k][i] = (double )0
<operator>.assignmentPlus score[k][i] += fraction / (double )count
<operator>.multiplication score[k][i] * (double )100
<operator>.lessThan points[i] < smax
<operator>.lessThan weight[i] < 0
<operator>.cast (double )(max - points[i])
<operator>.cast (double )sum
<operator>.cast (double )0
<operator>.cast (double )100
<operator>.postIncrement count ++
<operator>.subtraction max - points[i]
<operator>.assignment weight[i] = 0
<operator>.subtraction max - points[i]
<operator>.cast (double )0
<operator>.division fraction / (double )count
<operator>.greaterThan points[i] > max
<operator>.cast (double )count
<operator>.assignment max = points[i]
<operator>.assignment maxi = i
<operator>.indirectIndexAccess len[k]
<operator>.addressOf & n
UNKNOWN double double
<operator>.indirectIndexAccess len[k]
<operator>.indirectIndexAccess points[i]
<operator>.indirectIndexAccess score[k][i]
<operator>.indirectIndexAccess score[k][i]
<operator>.addressOf & points[i]
<operator>.indirectIndexAccess score[k]
<operator>.indirectIndexAccess score[k][i]
<operator>.indirectIndexAccess score[k]
<operator>.indirectIndexAccess points[i]
<operator>.indirectIndexAccess score[k][i]
<operator>.indirectIndexAccess points[i]
<operator>.indirectIndexAccess weight[i]
<operator>.indirectIndexAccess weight[i]
UNKNOWN double double
UNKNOWN double double
<operator>.indirectIndexAccess score[k]
UNKNOWN double double
<operator>.indirectIndexAccess score[k][i]
<operator>.indirectIndexAccess score[k][i]
<operator>.indirectIndexAccess score[k]
UNKNOWN double double
<operator>.indirectIndexAccess points[i]
<operator>.indirectIndexAccess points[i]
<operator>.indirectIndexAccess weight[i]
<operator>.indirectIndexAccess points[i]
<operator>.indirectIndexAccess score[k]
UNKNOWN double double
<operator>.indirectIndexAccess score[k]
<operator>.indirectIndexAccess weight[i]
UNKNOWN double double
<operator>.indirectIndexAccess points[i]
<operator>.indirectIndexAccess points[i]
>>>PDG&127 0->2 0->3 0->4 0->5 0->6 0->7 0->8 0->9 0->10 0->12 0->13 0->14 0->15 0->16 0->17 0->18 0->19 0->21 0->22 0->23 0->24 0->25 0->26 0->27 0->28 0->29 0->30 0->31 0->32 0->33 0->34 0->35 0->36 0->37 0->38 0->39 0->40 0->41 0->42 0->43 0->45 0->46 0->47 0->48 0->50 0->51 0->52 0->53 0->55 0->56 0->57 0->58 0->59 0->60 0->61 0->62 0->63 0->64 0->65 0->67 0->68 0->70 0->71 0->72 0->73 0->75 0->76 0->77 0->79 0->80 0->81 0->82 0->83 0->84 0->85 0->86 0->87 0->88 0->89 0->91 2->6 3->7 4->8 5->1 6->1 6->1 6->1 7->1 7->1 7->1 8->1 8->1 8->1 9->1 9->1 10->1 11->1 11->1 12->15 13->1 13->16 14->1 15->15 15->16 15->19 15->20 15->21 15->22 15->23 15->24 15->25 15->26 15->27 15->28 15->29 15->29 15->36 15->37 15->38 15->39 15->41 15->42 15->47 15->92 15->93 15->94 16->1 16->1 16->1 16->16 16->30 16->31 16->31 16->32 16->33 16->34 16->35 16->35 16->40 16->58 16->58 16->95 17->14 18->1 18->1 18->11 18->15 18->16 19->1 20->1 20->1 21->1 21->1 21->40 22->1 22->26 22->37 22->45 22->47 23->1 23->1 23->1 23->55 23->87 24->1 24->1 24->76 25->36 26->1 26->1 26->37 27->38 28->1 28->39 29->1 29->15 30->1 30->31 31->1 31->1 31->1 31->30 32->1 32->40 33->1 33->34 34->1 34->1 34->33 35->1 35->16 36->36 36->38 36->43 36->44 36->45 36->46 36->46 36->62 36->66 36->96 36->99 36->105 37->1 37->1 37->1 37->37 37->48 37->49 37->50 37->51 37->52 37->53 37->62 37->63 37->67 37->72 37->79 38->38 38->39 38->54 38->55 38->56 38->56 38->64 38->72 38->78 38->79 38->80 38->85 38->97 38->98 38->100 38->101 38->102 38->108 38->109 38->110 38->111 38->119 39->1 39->1 39->1 39->21 39->36 39->39 39->41 39->57 39->57 39->65 39->103 40->1 40->1 40->1 40->40 40->59 40->60 40->61 40->61 40->75 40->81 40->95 40->104 40->114 40->115 41->1 41->1 41->20 41->21 41->36 41->38 41->39 41->62 41->63 43->1 44->1 44->1 45->1 45->1 45->26 45->37 45->47 46->1 46->36 48->1 48->37 48->70 49->1 49->1 49->53 49->65 49->83 49->85 49->88 50->1 50->1 50->82 50->87 50->89 51->62 52->63 53->1 53->1 53->1 53->76 54->1 54->1 54->64 55->1 55->1 55->1 55->87 56->1 56->38 57->1 57->39 59->1 59->60 60->1 60->1 60->1 60->59 61->1 61->40 62->62 62->63 62->68 62->68 62->76 62->91 62->116 63->38 63->62 63->63 63->69 63->70 63->71 63->71 63->77 63->83 63->106 63->107 63->117 63->118 64->1 64->1 64->55 64->73 64->74 64->75 64->86 64->112 64->120 64->121 65->1 65->1 65->1 65->45 65->66 65->74 65->76 65->83 65->85 65->85 65->87 65->89 65->113 65->122 65->124 66->1 66->1 66->44 66->45 66->65 66->76 66->83 66->85 66->88 66->90 67->49 68->1 68->62 69->1 69->1 69->77 70->1 70->1 70->37 71->1 71->63 72->1 72->1 72->54 72->54 73->1 73->1 73->55 73->74 73->75 74->1 74->1 74->1 74->75 75->1 75->1 75->60 75->60 76->1 76->1 76->45 76->65 76->66 76->82 76->83 76->85 76->88 76->88 76->125 77->1 77->70 77->84 77->123 78->1 79->1 82->1 82->1 82->87 82->89 83->1 83->45 83->53 83->65 83->65 83->66 83->69 83->69 83->76 83->85 83->85 84->1 84->70 85->1 85->1 85->45 85->65 85->65 85->66 85->72 85->72 85->76 85->78 85->78 85->83 87->1 87->1 87->74 87->74 88->1 88->1 88->45 88->53 88->65 88->65 88->66 88->76 88->83 88->83 88->85 88->85 88->90 88->90 88->91 88->126 89->1 90->1 90->1 90->53 90->65 90->83 90->85 90->88 91->1 91->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern void exit ( int status ) ; extern int pthread_cond_signal ( int * cond ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; char * * _global_argv = ( char * * ) 0 ; extern int fcntl ( int filedes , int cmd , ... ) ; void encodeStrings_litStr2_i $ nit ( void ) ; extern int unlink ( char const * filename ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int pthread_mutex_lock ( int * mutex ) ; extern int pthread_cond_init ( int * cond , int * attr ) ; void encodeStrings_litStr5_i $ nit ( void ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int getpagesize ( ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; int main ( int _formal_argc , char * * _formal_argv , char * * _formal_envp ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; void encodeStrings_litStr0_i $ nit ( void ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; int _global_argc = 0 ; void megaInit ( void ) ; char * * _global_envp = ( char * * ) 0 ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; void encodeStrings_litStr3_i $ nit ( void ) ; extern int ( /* missing proto */ printf ) ( ) ; extern int ( /* missing proto */ scanf ) ( ) ; extern void perror ( char const * str ) ; extern long clock ( void ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern double strtod ( char const * str , char const * endptr ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; void encodeStrings_litStr1_i $ nit ( void ) ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; void encodeStrings_litStr4_i $ nit ( void ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; char encodeStrings_litStr5 [ 2 ] ; extern int open ( char const * filename , int oflag , ... ) ; char encodeStrings_litStr4 [ 5 ] ; extern double sqrt ( double x ) ; char encodeStrings_litStr3 [ 10 ] ; char encodeStrings_litStr2 [ 3 ] ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; char encodeStrings_litStr1 [ 3 ] ; char encodeStrings_litStr0 [ 3 ] ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; int main ( int _formal_argc , char * * _formal_argv , char * * _formal_envp ) { int t ; int i ; int sum ; int max ; int k ; int n ; int r ; int weight [ 201 ] ; int tw ; int maxi ; int smax ; int count ; int points [ 201 ] ; int len [ 51 ] ; double score [ 51 ] [ 201 ] ; double fraction ; int _BARRIER_0 ; { megaInit ( ) ; _global_argc = _formal_argc ; _global_argv = _formal_argv ; _global_envp = _formal_envp ; _BARRIER_0 = 1 ; _1_stringEncoder ( 0 , encodeStrings_litStr0 ) ; r = scanf ( encodeStrings_litStr0 , & t ) ; k = 0 ; while ( k < t ) { _1_stringEncoder ( 1 , encodeStrings_litStr1 ) ; r = scanf ( encodeStrings_litStr1 , & n ) ; len [ k ] = n ; sum = 0 ; fraction = ( double ) 1 ; smax = 32767 ; i = 0 ; while ( i < n ) { _1_stringEncoder ( 2 , encodeStrings_litStr2 ) ; r = scanf ( encodeStrings_litStr2 , & points [ i ] ) ; sum += points [ i ] ; i ++ ; } tw = sum + 1 ; while ( tw > sum ) { tw = 0 ; max = -1 ; count = 0 ; i = 0 ; while ( i < n ) { if ( points [ i ] < smax ) { if ( points [ i ] > max ) { max = points [ i ] ; maxi = i ; } count ++ ; } i ++ ; } i = 0 ; while ( i < n ) { weight [ i ] = max - points [ i ] ; if ( weight [ i ] < 0 ) { weight [ i ] = 0 ; } tw += weight [ i ] ; i ++ ; } smax = max ; } i = 0 ; while ( i < n ) { score [ k ] [ i ] = ( double ) ( max - points [ i ] ) / ( double ) sum ; if ( score [ k ] [ i ] < ( double ) 0 ) { score [ k ] [ i ] = ( double ) 0 ; } fraction -= score [ k ] [ i ] ; i ++ ; } i = 0 ; while ( i < n ) { if ( points [ i ] <= max ) { score [ k ] [ i ] += fraction / ( double ) count ; } i ++ ; } k ++ ; } k = 0 ; while ( k < t ) { _1_stringEncoder ( 3 , encodeStrings_litStr3 ) ; printf ( encodeStrings_litStr3 , k + 1 ) ; i = 0 ; while ( i < len [ k ] ) { _1_stringEncoder ( 4 , encodeStrings_litStr4 ) ; printf ( encodeStrings_litStr4 , score [ k ] [ i ] * ( double ) 100 ) ; i ++ ; } _1_stringEncoder ( 5 , encodeStrings_litStr5 ) ; printf ( encodeStrings_litStr5 ) ; k ++ ; } return ( 0 ) ; } } void encodeStrings_litStr5_i $ nit ( void ) { { } } void encodeStrings_litStr3_i $ nit ( void ) { { } } void encodeStrings_litStr4_i $ nit ( void ) { { } } void encodeStrings_litStr0_i $ nit ( void ) { { } } void encodeStrings_litStr1_i $ nit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { case 5 : str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 4 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 3 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 2 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 1 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 0 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; } } } void megaInit ( void ) { { encodeStrings_litStr5_i $ nit ( ) ; encodeStrings_litStr4_i $ nit ( ) ; encodeStrings_litStr3_i $ nit ( ) ; encodeStrings_litStr2_i $ nit ( ) ; encodeStrings_litStr1_i $ nit ( ) ; encodeStrings_litStr0_i $ nit ( ) ; } } void encodeStrings_litStr2_i $ nit ( void ) { { } }
>>>Func
METHOD main
METHOD_RETURN int
PARAM int argc
PARAM char **argv
PARAM char **_formal_envp
megaInit megaInit()
<operator>.assignment _global_argc = argc
<operator>.assignment _global_argv = argv
<operator>.assignment _global_envp = _formal_envp
<operator>.assignment _BARRIER_0 = 1
<operator>.assignment sum = 0
<operator>.assignment i = 0
_1_stringEncoder _1_stringEncoder(0, encodeStrings_litStr0)
printf printf(encodeStrings_litStr0, sum)
RETURN return (0); return (0);
<operator>.lessThan i < (int )*(*(argv + 1) + 0)
LITERAL 0 return (0);
<operator>.assignment j = 0
<operator>.postIncrement i ++
<operator>.cast (int )*(*(argv + 1) + 0)
<operator>.lessThan j < (int )*(*(argv + 1) + 0)
<operator>.assignmentPlus sum += j
<operator>.postIncrement j ++
<operator>.addition *(argv + 1) + 0
<operator>.addition argv + 1
<operator>.addition *(argv + 1) + 0
<operator>.addition argv + 1
UNKNOWN int int
<operator>.indirection *(*(argv + 1) + 0)
<operator>.cast (int )*(*(argv + 1) + 0)
<operator>.indirection *(argv + 1)
UNKNOWN int int
<operator>.indirection *(*(argv + 1) + 0)
<operator>.indirection *(argv + 1)
>>>PDG&34 0->2 0->3 0->4 0->5 0->6 0->7 0->8 0->9 0->10 0->11 0->12 0->13 0->14 0->15 0->16 0->17 0->18 0->20 0->21 0->22 0->23 0->24 0->25 0->26 2->6 3->7 3->24 4->8 5->1 6->1 6->1 6->1 7->1 7->1 8->1 8->1 8->1 9->1 9->1 10->1 10->13 10->21 11->1 11->15 12->1 12->13 13->1 13->1 13->1 14->1 15->1 15->1 15->1 15->15 15->17 15->18 15->18 15->19 15->20 15->23 15->24 15->25 15->26 15->27 15->28 15->29 15->30 15->31 15->32 15->33 16->14 17->1 17->20 18->1 18->15 19->1 20->1 20->1 20->20 20->21 20->21 20->22 20->22 20->25 20->26 20->29 20->31 20->32 20->33 21->1 21->13 22->1 22->20 23->1 24->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; char * * _global_argv = ( char * * ) 0 ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; int main ( int argc , char * * argv , char * * _formal_envp ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; void encodeStrings_litStr0_i $ nit ( void ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; int _global_argc = 0 ; void megaInit ( void ) ; char * * _global_envp = ( char * * ) 0 ; extern int ( /* missing proto */ printf ) ( ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; char encodeStrings_litStr0 [ 12 ] ; void megaInit ( void ) { { encodeStrings_litStr0_i $ nit ( ) ; } } void encodeStrings_litStr0_i $ nit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { case 0 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; } } } int main ( int argc , char * * argv , char * * _formal_envp ) { int i ; int j ; int sum ; int _BARRIER_0 ; { megaInit ( ) ; _global_argc = argc ; _global_argv = argv ; _global_envp = _formal_envp ; _BARRIER_0 = 1 ; sum = 0 ; i = 0 ; while ( i < ( int ) * ( * ( argv + 1 ) + 0 ) ) { j = 0 ; while ( j < ( int ) * ( * ( argv + 1 ) + 0 ) ) { sum += j ; j ++ ; } i ++ ; } _1_stringEncoder ( 0 , encodeStrings_litStr0 ) ; printf ( encodeStrings_litStr0 , sum ) ; return ( 0 ) ; } }
>>>Func
METHOD cf
METHOD_RETURN int
PARAM void *a
PARAM void *b
<operator>.assignment x = (int *)a
<operator>.assignment y = (int *)b
RETURN return (*y - *x); return (*y - *x);
<operator>.subtraction *y - *x
<operator>.cast (int *)a
<operator>.cast (int *)b
>>>PDG&10 0->2 0->3 0->4 0->5 0->8 0->9 2->4 2->8 3->5 3->9 4->1 4->1 4->1 5->1 5->1 5->1 6->1 7->1 7->1 7->1 7->6 8->1 9->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; void main ( void ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; int cf ( void * a , void * b ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int printf ( char const * format , ... ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; int cf ( void * a , void * b ) { int * x ; int * y ; { x = ( int * ) a ; y = ( int * ) b ; return ( * y - * x ) ; } } void megaInit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { } } } void main ( void ) { { megaInit ( ) ; } }
>>>Func
METHOD _1_stringEncoder
METHOD_RETURN void
PARAM int n
PARAM char str[]
BLOCK <empty> <empty>
<operator>.assignment encodeStrings_i3 = 0
IDENTIFIER n switch(n)
LITERAL 3 <empty>
<operator>.assignment str[encodeStrings_i3] = 'S'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'o'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'y'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ':'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 2 <empty>
<operator>.assignment str[encodeStrings_i3] = 'I'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'i'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'i'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'l'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'y'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ':'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 1 <empty>
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 0 <empty>
<operator>.assignment str[encodeStrings_i3] = 'I'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'u'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'o'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'u'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'm'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'b'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ':'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
>>>PDG&139 0->2 0->3 0->4 0->5 0->6 0->7 0->8 0->9 0->10 0->11 0->12 0->13 0->14 0->15 0->16 0->17 0->18 0->19 0->20 0->21 0->22 0->23 0->24 0->25 0->26 0->27 0->28 0->29 0->30 0->31 0->32 0->33 0->34 0->35 0->36 0->37 0->38 0->39 0->40 0->41 0->42 0->43 0->44 0->45 0->46 0->47 0->48 0->49 0->50 0->51 0->52 0->53 0->54 0->55 0->56 0->57 0->58 0->59 0->60 0->61 0->62 0->63 0->64 0->65 0->66 0->67 0->68 0->69 0->70 0->71 0->72 0->73 0->74 0->75 0->76 0->77 0->78 0->79 0->80 0->81 0->82 0->83 0->84 0->85 0->86 0->87 0->88 0->89 0->90 0->91 0->92 0->93 0->94 0->95 0->96 0->97 0->98 0->99 0->100 0->101 0->102 0->103 0->104 0->105 0->106 0->107 0->108 0->109 0->110 0->111 0->112 0->113 0->114 0->115 0->116 0->117 0->118 0->119 0->120 0->121 0->122 0->123 0->124 0->125 0->126 0->127 0->128 0->129 0->130 0->131 0->132 0->133 0->134 0->135 0->136 0->137 0->138 2->1 3->1 5->1 5->1 5->9 5->40 5->73 5->80 8->1 9->11 10->1 11->13 13->15 14->1 15->17 16->1 17->19 18->1 19->21 21->23 23->25 25->27 26->1 27->29 28->1 29->31 30->1 31->33 32->1 33->35 34->1 35->37 36->1 36->1 37->1 37->1 39->1 40->42 41->1 42->44 44->46 45->1 46->48 47->1 48->50 50->52 51->1 52->54 54->56 56->58 58->60 59->1 60->62 61->1 62->64 63->1 64->66 65->1 66->68 67->1 68->70 69->1 69->1 70->1 70->1 72->1 73->75 74->1 75->77 76->1 76->1 77->1 77->1 79->1 80->82 82->84 84->86 86->88 88->90 90->92 92->94 93->1 94->96 96->98 98->100 100->102 102->104 104->106 105->1 106->108 108->110 109->1 110->112 112->114 113->1 114->116 116->118 117->1 118->120 119->1 120->122 121->1 122->124 123->1 124->126 125->1 126->128 127->1 128->130 129->1 130->132 131->1 132->134 133->1 134->136 135->1 136->138 137->1 137->1 138->1 138->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int ( /* missing proto */ sort ) ( ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; char * * _global_argv = ( char * * ) 0 ; extern int fcntl ( int filedes , int cmd , ... ) ; void encodeStrings_litStr2_i $ nit ( void ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern int ( /* missing proto */ malloc ) ( ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int rand ( ) ; extern int ( /* missing proto */ free ) ( ) ; extern unsigned long strlen ( char const * s ) ; int main ( int _formal_argc , char * * _formal_argv , char * * _formal_envp ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; void encodeStrings_litStr0_i $ nit ( void ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; int _global_argc = 0 ; void megaInit ( void ) ; char * * _global_envp = ( char * * ) 0 ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int ( /* missing proto */ printf ) ( ) ; void encodeStrings_litStr3_i $ nit ( void ) ; extern int ( /* missing proto */ scanf ) ( ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern double strtod ( char const * str , char const * endptr ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; void encodeStrings_litStr1_i $ nit ( void ) ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int ( /* missing proto */ display ) ( ) ; extern double sqrt ( double x ) ; extern int open ( char const * filename , int oflag , ... ) ; char encodeStrings_litStr3 [ 15 ] ; char encodeStrings_litStr2 [ 16 ] ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern double log ( double x ) ; char encodeStrings_litStr1 [ 3 ] ; char encodeStrings_litStr0 [ 30 ] ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; void encodeStrings_litStr1_i $ nit ( void ) { { } } void encodeStrings_litStr0_i $ nit ( void ) { { } } void encodeStrings_litStr2_i $ nit ( void ) { { } } int main ( int _formal_argc , char * * _formal_argv , char * * _formal_envp ) { int size ; int i ; int * numbers ; int tmp ; int _BARRIER_0 ; { megaInit ( ) ; _global_argc = _formal_argc ; _global_argv = _formal_argv ; _global_envp = _formal_envp ; _BARRIER_0 = 1 ; size = 6 ; tmp = malloc ( ( unsigned long ) size * 4UL ) ; numbers = ( int * ) tmp ; _1_stringEncoder ( 0 , encodeStrings_litStr0 ) ; printf ( encodeStrings_litStr0 , size ) ; i = 0 ; while ( i < size ) { _1_stringEncoder ( 1 , encodeStrings_litStr1 ) ; scanf ( encodeStrings_litStr1 , numbers + i ) ; i ++ ; } _1_stringEncoder ( 2 , encodeStrings_litStr2 ) ; printf ( encodeStrings_litStr2 ) ; display ( numbers , size ) ; sort ( numbers , size ) ; _1_stringEncoder ( 3 , encodeStrings_litStr3 ) ; printf ( encodeStrings_litStr3 ) ; display ( numbers , size ) ; free ( numbers ) ; return ( 0 ) ; } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { case 3 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 2 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 1 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 0 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; } } } void encodeStrings_litStr3_i $ nit ( void ) { { } } void megaInit ( void ) { { encodeStrings_litStr3_i $ nit ( ) ; encodeStrings_litStr2_i $ nit ( ) ; encodeStrings_litStr1_i $ nit ( ) ; encodeStrings_litStr0_i $ nit ( ) ; } }
>>>Func
METHOD string_nocase_equal
METHOD_RETURN int
PARAM void *string1
PARAM void *string2
<operator>.assignment tmp = string_nocase_compare((char *)string1  (char *)string2)
RETURN return (tmp == 0); return (tmp == 0);
<operator>.equals tmp == 0
string_nocase_compare string_nocase_compare((char *)string1  (char *)string2)
<operator>.cast (char *)string1
<operator>.cast (char *)string2
>>>PDG&10 0->2 0->3 0->6 0->7 0->8 0->9 2->7 2->8 3->7 3->9 4->1 4->1 4->6 5->1 6->1 6->1 6->5 7->1 7->1 7->4 7->4 8->1 9->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern int ( /* missing proto */ string_nocase_compare ) ( ) ; extern unsigned long strlen ( char const * s ) ; void main ( void ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int printf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern int scanf ( char const * format , ... ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern float strtof ( char const * str , char const * endptr ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; int string_nocase_equal ( void * string1 , void * string2 ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; void megaInit ( void ) { { } } int string_nocase_equal ( void * string1 , void * string2 ) { int tmp ; { tmp = string_nocase_compare ( ( char * ) string1 , ( char * ) string2 ) ; return ( tmp == 0 ) ; } } void main ( void ) { { megaInit ( ) ; } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { } } }
>>>Func
METHOD PJWHash
METHOD_RETURN unsigned int
PARAM char *str
PARAM unsigned int len
<operator>.assignment BitsInUnsignedInt = (unsigned int )(sizeof(unsigned int ) * 8UL)
<operator>.assignment ThreeQuarters = (BitsInUnsignedInt * 3U) / 4U
<operator>.assignment OneEighth = BitsInUnsignedInt / 8U
<operator>.assignment HighBits = 4294967295U << (BitsInUnsignedInt - OneEighth)
<operator>.assignment hash = 0U
<operator>.assignment test = 0U
<operator>.assignment i = 0U
<operator>.assignment i = 0U
RETURN return (hash); return (hash);
<operator>.lessThan i < len
IDENTIFIER hash return (hash);
<operator>.cast (unsigned int )(sizeof(unsigned int ) * 8UL)
<operator>.division (BitsInUnsignedInt * 3U) / 4U
<operator>.division BitsInUnsignedInt / 8U
<operator>.shiftLeft 4294967295U << (BitsInUnsignedInt - OneEighth)
<operator>.assignment hash = (hash << OneEighth) + (unsigned int )*str
<operator>.assignment test = hash & HighBits
<operator>.postIncrement str ++
<operator>.postIncrement i ++
<operator>.multiplication sizeof(unsigned int ) * 8UL
<operator>.multiplication BitsInUnsignedInt * 3U
<operator>.subtraction BitsInUnsignedInt - OneEighth
<operator>.notEquals test != 0U
<operator>.sizeOf sizeof(unsigned int )
<operator>.addition (hash << OneEighth) + (unsigned int )*str
<operator>.and hash & HighBits
<operator>.assignment hash = (hash ^ (test >> ThreeQuarters)) & ~ HighBits
<operator>.shiftLeft hash << OneEighth
<operator>.cast (unsigned int )*str
<operator>.and (hash ^ (test >> ThreeQuarters)) & ~ HighBits
<operator>.xor hash ^ (test >> ThreeQuarters)
<operator>.not ~ HighBits
<operator>.arithmeticShiftRight test >> ThreeQuarters
UNKNOWN unsigned int unsigned int
<operator>.indirection *str
>>>PDG&39 0->2 0->3 0->8 0->9 0->10 0->11 0->13 0->14 0->16 0->17 0->18 0->21 0->22 0->23 0->24 0->25 0->26 0->29 0->31 0->34 0->35 0->36 2->1 2->21 3->13 4->1 4->1 4->24 5->1 5->1 5->1 5->36 6->1 6->1 6->25 7->1 7->1 7->1 7->29 8->1 8->1 8->14 8->31 9->1 9->1 11->1 11->13 12->1 13->1 13->1 13->1 13->13 13->19 13->20 13->21 13->22 13->22 13->26 13->28 13->29 13->31 13->32 13->37 13->38 14->12 15->1 16->1 16->5 16->5 17->6 17->6 17->25 18->1 18->7 18->7 19->1 19->1 19->29 20->1 20->1 20->26 21->1 21->1 22->1 22->13 23->4 23->15 24->16 24->16 24->17 25->1 25->1 25->18 25->18 25->31 26->1 26->1 26->30 26->33 26->34 26->35 26->36 26->36 27->1 28->1 28->1 29->1 29->1 29->14 29->20 29->20 29->31 29->34 29->35 30->1 30->1 30->1 30->14 30->31 31->1 31->19 31->19 31->28 31->28 32->1 33->1 33->1 33->30 33->30 34->1 34->33 34->33 35->1 35->29 35->33 36->1 36->1 36->34 36->34
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; void main ( void ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int printf ( char const * format , ... ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; unsigned int PJWHash ( char * str , unsigned int len ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { } } } void megaInit ( void ) { { } } unsigned int PJWHash ( char * str , unsigned int len ) { unsigned int BitsInUnsignedInt ; unsigned int ThreeQuarters ; unsigned int OneEighth ; unsigned int HighBits ; unsigned int hash ; unsigned int test ; unsigned int i ; { BitsInUnsignedInt = ( unsigned int ) ( sizeof ( unsigned int ) * 8UL ) ; ThreeQuarters = ( BitsInUnsignedInt * 3U ) / 4U ; OneEighth = BitsInUnsignedInt / 8U ; HighBits = 4294967295U << ( BitsInUnsignedInt - OneEighth ) ; hash = 0U ; test = 0U ; i = 0U ; i = 0U ; while ( i < len ) { hash = ( hash << OneEighth ) + ( unsigned int ) * str ; test = hash & HighBits ; if ( test != 0U ) { hash = ( hash ^ ( test >> ThreeQuarters ) ) & ~ HighBits ; } str ++ ; i ++ ; } return ( hash ) ; } } void main ( void ) { { megaInit ( ) ; } }
>>>Func
METHOD _1_stringEncoder
METHOD_RETURN void
PARAM int n
PARAM char str[]
BLOCK <empty> <empty>
<operator>.assignment encodeStrings_i3 = 0
IDENTIFIER n switch(n)
LITERAL 4 <empty>
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 3 <empty>
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 2 <empty>
<operator>.assignment str[encodeStrings_i3] = 'E'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'l'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'm'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'i'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'y'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ':'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 1 <empty>
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 0 <empty>
<operator>.assignment str[encodeStrings_i3] = 'E'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'i'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'z'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'o'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'f'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'y'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '='
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
>>>PDG&138 0->2 0->3 0->4 0->5 0->6 0->7 0->8 0->9 0->10 0->11 0->12 0->13 0->14 0->15 0->16 0->17 0->18 0->19 0->20 0->21 0->22 0->23 0->24 0->25 0->26 0->27 0->28 0->29 0->30 0->31 0->32 0->33 0->34 0->35 0->36 0->37 0->38 0->39 0->40 0->41 0->42 0->43 0->44 0->45 0->46 0->47 0->48 0->49 0->50 0->51 0->52 0->53 0->54 0->55 0->56 0->57 0->58 0->59 0->60 0->61 0->62 0->63 0->64 0->65 0->66 0->67 0->68 0->69 0->70 0->71 0->72 0->73 0->74 0->75 0->76 0->77 0->78 0->79 0->80 0->81 0->82 0->83 0->84 0->85 0->86 0->87 0->88 0->89 0->90 0->91 0->92 0->93 0->94 0->95 0->96 0->97 0->98 0->99 0->100 0->101 0->102 0->103 0->104 0->105 0->106 0->107 0->108 0->109 0->110 0->111 0->112 0->113 0->114 0->115 0->116 0->117 0->118 0->119 0->120 0->121 0->122 0->123 0->124 0->125 0->126 0->127 0->128 0->129 0->130 0->131 0->132 0->133 0->134 0->135 0->136 0->137 2->1 3->1 5->1 5->1 5->9 5->18 5->25 5->86 5->93 8->1 9->11 10->1 11->13 12->1 13->15 14->1 14->1 15->1 15->1 17->1 18->20 19->1 20->22 21->1 21->1 22->1 22->1 24->1 25->27 27->29 29->31 31->33 33->35 35->37 36->1 37->39 38->1 39->41 41->43 43->45 44->1 45->47 47->49 48->1 49->51 50->1 51->53 53->55 54->1 55->57 56->1 57->59 59->61 60->1 61->63 62->1 63->65 65->67 67->69 69->71 70->1 71->73 72->1 73->75 74->1 75->77 76->1 77->79 78->1 79->81 80->1 81->83 82->1 82->1 83->1 83->1 85->1 86->88 87->1 88->90 89->1 89->1 90->1 90->1 92->1 93->95 94->1 95->97 96->1 97->99 99->101 101->103 103->105 104->1 105->107 106->1 107->109 108->1 109->111 110->1 111->113 113->115 114->1 115->117 116->1 117->119 119->121 121->123 123->125 124->1 125->127 126->1 127->129 128->1 129->131 131->133 132->1 133->135 134->1 135->137 136->1 136->1 137->1 137->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fclose ( void * stream ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; char * * _global_argv = ( char * * ) 0 ; extern int fcntl ( int filedes , int cmd , ... ) ; void encodeStrings_litStr2_i $ nit ( void ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern int ( /* missing proto */ malloc ) ( ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern int ( /* missing proto */ free ) ( ) ; extern unsigned long strlen ( char const * s ) ; int main ( int _formal_argc , char * * _formal_argv , char * * _formal_envp ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; void encodeStrings_litStr0_i $ nit ( void ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; int _global_argc = 0 ; void megaInit ( void ) ; char * * _global_envp = ( char * * ) 0 ; void encodeStrings_litStr3_i $ nit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int ( /* missing proto */ printf ) ( ) ; extern int ( /* missing proto */ scanf ) ( ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; void encodeStrings_litStr1_i $ nit ( void ) ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; void encodeStrings_litStr4_i $ nit ( void ) ; extern int ( /* missing proto */ memset ) ( ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; char encodeStrings_litStr4 [ 4 ] ; extern double sqrt ( double x ) ; char encodeStrings_litStr3 [ 3 ] ; char encodeStrings_litStr2 [ 30 ] ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; char encodeStrings_litStr1 [ 3 ] ; char encodeStrings_litStr0 [ 23 ] ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; void encodeStrings_litStr3_i $ nit ( void ) { { } } void encodeStrings_litStr2_i $ nit ( void ) { { } } void encodeStrings_litStr4_i $ nit ( void ) { { } } void encodeStrings_litStr0_i $ nit ( void ) { { } } void encodeStrings_litStr1_i $ nit ( void ) { { } } void megaInit ( void ) { { encodeStrings_litStr4_i $ nit ( ) ; encodeStrings_litStr3_i $ nit ( ) ; encodeStrings_litStr2_i $ nit ( ) ; encodeStrings_litStr1_i $ nit ( ) ; encodeStrings_litStr0_i $ nit ( ) ; } } int main ( int _formal_argc , char * * _formal_argv , char * * _formal_envp ) { int i ; int n ; int l ; int * a ; int tmp ; int * b ; int tmp___0 ; int _BARRIER_0 ; { megaInit ( ) ; _global_argc = _formal_argc ; _global_argv = _formal_argv ; _global_envp = _formal_envp ; _BARRIER_0 = 1 ; l = 0 ; _1_stringEncoder ( 0 , encodeStrings_litStr0 ) ; printf ( encodeStrings_litStr0 ) ; _1_stringEncoder ( 1 , encodeStrings_litStr1 ) ; scanf ( encodeStrings_litStr1 , & n ) ; tmp = malloc ( ( unsigned long ) n * 4UL ) ; a = ( int * ) tmp ; _1_stringEncoder ( 2 , encodeStrings_litStr2 ) ; printf ( encodeStrings_litStr2 , n ) ; i = 0 ; while ( i < n ) { _1_stringEncoder ( 3 , encodeStrings_litStr3 ) ; scanf ( encodeStrings_litStr3 , a + i ) ; if ( * ( a + i ) > l ) { l = * ( a + i ) ; } i ++ ; } tmp___0 = malloc ( ( unsigned long ) ( l + 1 ) * 4UL ) ; b = ( int * ) tmp___0 ; memset ( b , 0 , ( unsigned long ) ( l + 1 ) * 4UL ) ; i = 0 ; while ( i < n ) { ( * ( b + * ( a + i ) ) ) ++ ; i ++ ; } i = 0 ; while ( i < l + 1 ) { if ( * ( b + i ) > 0 ) { while ( * ( b + i ) != 0 ) { _1_stringEncoder ( 4 , encodeStrings_litStr4 ) ; printf ( encodeStrings_litStr4 , i ) ; ( * ( b + i ) ) -- ; } } i ++ ; } free ( a ) ; free ( b ) ; return ( 0 ) ; } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { case 4 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 3 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 2 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 1 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 0 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; } } }
>>>Func
METHOD init
METHOD_RETURN void
PARAM char *src
PARAM char *dest
<operator>.assignment tmp = strlen(src)
<operator>.assignment i = tmp - 1
<operator>.assignment tmp___0 = strlen(src)
<operator>.assignment *(dest + tmp___0) = (char )'\000'
RETURN return; return;
<operator>.greaterEqualsThan i >= 0
strlen strlen(src)
<operator>.subtraction tmp - 1
<operator>.assignment *(dest + i) = *(src + i)
<operator>.postDecrement i --
strlen strlen(src)
<operator>.cast (char )'\000'
<operator>.addition dest + tmp___0
<operator>.addition dest + i
<operator>.addition src + i
<operator>.indirection *(dest + i)
<operator>.indirection *(src + i)
>>>PDG&21 0->2 0->3 0->7 0->8 0->9 0->10 0->11 0->13 0->14 0->15 0->16 0->17 0->18 2->10 3->16 3->17 4->1 4->11 5->1 5->1 5->9 6->1 6->1 6->16 7->1 7->1 7->1 8->1 9->1 9->1 9->9 9->12 9->13 9->13 9->17 9->17 9->18 9->18 9->19 9->20 10->4 10->14 10->18 11->1 11->5 11->5 12->1 12->1 12->1 13->1 13->9 14->1 14->6 16->1 16->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern int ( /* missing proto */ strlen ) ( ) ; void main ( void ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int printf ( char const * format , ... ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; void init ( char * src , char * dest ) ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { } } } void megaInit ( void ) { { } } void init ( char * src , char * dest ) { int i ; int tmp ; int tmp___0 ; { tmp = strlen ( src ) ; i = tmp - 1 ; while ( i >= 0 ) { * ( dest + i ) = * ( src + i ) ; i -- ; } tmp___0 = strlen ( src ) ; * ( dest + tmp___0 ) = ( char ) ' \000 ' ; return ; } } void main ( void ) { { megaInit ( ) ; } }
>>>Func
METHOD _1_stringEncoder
METHOD_RETURN void
PARAM int n
PARAM char str[]
BLOCK <empty> <empty>
<operator>.assignment encodeStrings_i3 = 0
IDENTIFIER n switch(n)
LITERAL 0 <empty>
<operator>.assignment str[encodeStrings_i3] = 'S'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'u'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'm'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'i'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ':'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
>>>PDG&32 0->2 0->3 0->4 0->5 0->6 0->7 0->8 0->9 0->10 0->11 0->12 0->13 0->14 0->15 0->16 0->17 0->18 0->19 0->20 0->21 0->22 0->23 0->24 0->25 0->26 0->27 0->28 0->29 0->30 0->31 2->1 3->1 5->1 5->1 5->9 8->1 9->11 10->1 11->13 12->1 13->15 15->17 16->1 17->19 18->1 19->21 20->1 21->23 22->1 23->25 24->1 25->27 26->1 27->29 28->1 29->31 30->1 30->1 31->1 31->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; char * * _global_argv = ( char * * ) 0 ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; int main ( int argc , char * * argv , char * * _formal_envp ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; void encodeStrings_litStr0_i $ nit ( void ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; int _global_argc = 0 ; void megaInit ( void ) ; char * * _global_envp = ( char * * ) 0 ; extern int ( /* missing proto */ printf ) ( ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; char encodeStrings_litStr0 [ 12 ] ; void megaInit ( void ) { { encodeStrings_litStr0_i $ nit ( ) ; } } void encodeStrings_litStr0_i $ nit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { case 0 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; } } } int main ( int argc , char * * argv , char * * _formal_envp ) { int i ; int sum ; int _BARRIER_0 ; { megaInit ( ) ; _global_argc = argc ; _global_argv = argv ; _global_envp = _formal_envp ; _BARRIER_0 = 1 ; sum = 0 ; i = 0 ; while ( i < argc ) { sum += i ; i ++ ; } i = 1 ; while ( i <= 4 ) { sum += sum ; i ++ ; } _1_stringEncoder ( 0 , encodeStrings_litStr0 ) ; printf ( encodeStrings_litStr0 , sum ) ; return ( 0 ) ; } }
>>>Func
METHOD absF
METHOD_RETURN double
PARAM double n
<operator>.lessThan n < 0.0
RETURN return (- n); return (- n);
<operator>.minus - n
RETURN return (n); return (n);
IDENTIFIER n return (n);
>>>PDG&8 0->2 0->3 0->5 0->7 2->3 3->1 3->4 3->5 3->5 3->6 3->7 4->1 5->1 5->1 5->4 6->1 7->6
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; void main ( void ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int printf ( char const * format , ... ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; double absF ( double n ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; double absF ( double n ) { { if ( n < 0.0 ) { return ( - n ) ; } else { return ( n ) ; } } } void megaInit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { } } } void main ( void ) { { megaInit ( ) ; } }
>>>Func
METHOD process
METHOD_RETURN int
PARAM int d
<operator>.assignment ans = 0
<operator>.assignment i = 0
RETURN return (ans); return (ans);
IDENTIFIER d while (d)
IDENTIFIER ans return (ans);
<operator>.assignment dig = d % 10
<operator>.assignmentMultiplication dig *= dig
<operator>.assignmentPlus ans += dig
<operator>.assignmentDivision d /= 10
<operator>.postIncrement i ++
<operator>.modulo d % 10
>>>PDG&14 0->2 0->3 0->4 0->6 0->7 0->9 0->10 0->11 0->12 0->13 2->1 2->13 3->1 3->1 3->7 3->10 4->1 4->1 4->12 5->1 7->5 8->1 8->1 8->9 8->10 9->1 9->10 10->1 10->1 10->1 10->7 11->1 11->1 11->13 12->1 12->1 13->8 13->8 13->11
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; void main ( void ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int printf ( char const * format , ... ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; int process ( int d ) ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; int process ( int d ) { int i ; int ans ; int dig ; { ans = 0 ; i = 0 ; while ( d ) { dig = d % 10 ; dig *= dig ; ans += dig ; d /= 10 ; i ++ ; } return ( ans ) ; } } void megaInit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { } } } void main ( void ) { { megaInit ( ) ; } }
>>>Func
METHOD _1_stringEncoder
METHOD_RETURN void
PARAM int n
PARAM char str[]
BLOCK <empty> <empty>
<operator>.assignment encodeStrings_i3 = 0
IDENTIFIER n switch(n)
LITERAL 4 <empty>
<operator>.assignment str[encodeStrings_i3] = 'T'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'p'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 3 <empty>
<operator>.assignment str[encodeStrings_i3] = 'H'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'l'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'l'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'o'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'w'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'o'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'l'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '!'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 2 <empty>
<operator>.assignment str[encodeStrings_i3] = 'H'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'l'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'l'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'o'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'w'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'o'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'l'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 1 <empty>
<operator>.assignment str[encodeStrings_i3] = 'H'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'l'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'l'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'o'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'W'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'o'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'l'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '!'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 0 <empty>
<operator>.assignment str[encodeStrings_i3] = 'H'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'l'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'l'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'o'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'W'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'o'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'l'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
>>>PDG&140 0->2 0->3 0->4 0->5 0->6 0->7 0->8 0->9 0->10 0->11 0->12 0->13 0->14 0->15 0->16 0->17 0->18 0->19 0->20 0->21 0->22 0->23 0->24 0->25 0->26 0->27 0->28 0->29 0->30 0->31 0->32 0->33 0->34 0->35 0->36 0->37 0->38 0->39 0->40 0->41 0->42 0->43 0->44 0->45 0->46 0->47 0->48 0->49 0->50 0->51 0->52 0->53 0->54 0->55 0->56 0->57 0->58 0->59 0->60 0->61 0->62 0->63 0->64 0->65 0->66 0->67 0->68 0->69 0->70 0->71 0->72 0->73 0->74 0->75 0->76 0->77 0->78 0->79 0->80 0->81 0->82 0->83 0->84 0->85 0->86 0->87 0->88 0->89 0->90 0->91 0->92 0->93 0->94 0->95 0->96 0->97 0->98 0->99 0->100 0->101 0->102 0->103 0->104 0->105 0->106 0->107 0->108 0->109 0->110 0->111 0->112 0->113 0->114 0->115 0->116 0->117 0->118 0->119 0->120 0->121 0->122 0->123 0->124 0->125 0->126 0->127 0->128 0->129 0->130 0->131 0->132 0->133 0->134 0->135 0->136 0->137 0->138 0->139 2->1 3->1 5->1 5->1 5->9 5->38 5->65 5->90 5->117 8->1 9->11 11->13 13->15 14->1 15->17 17->19 18->1 19->21 20->1 21->23 22->1 23->25 25->27 26->1 27->29 28->1 29->31 30->1 31->33 32->1 33->35 34->1 34->1 35->1 35->1 37->1 38->40 39->1 40->42 42->44 44->46 46->48 47->1 48->50 49->1 50->52 51->1 52->54 53->1 54->56 55->1 56->58 57->1 58->60 59->1 60->62 61->1 61->1 62->1 62->1 64->1 65->67 66->1 67->69 69->71 71->73 73->75 74->1 75->77 76->1 77->79 78->1 79->81 80->1 81->83 82->1 83->85 84->1 85->87 86->1 86->1 87->1 87->1 89->1 90->92 91->1 92->94 94->96 96->98 98->100 99->1 100->102 101->1 102->104 103->1 104->106 105->1 106->108 107->1 108->110 109->1 110->112 111->1 112->114 113->1 113->1 114->1 114->1 116->1 117->119 118->1 119->121 121->123 123->125 125->127 126->1 127->129 128->1 129->131 130->1 131->133 132->1 133->135 134->1 135->137 136->1 137->139 138->1 138->1 139->1 139->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fclose ( void * stream ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; void encodeStrings_litStr2_i $ nit ( void ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int ( /* missing proto */ assert ) ( ) ; void test_adler32 ( void ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; void main ( void ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; void encodeStrings_litStr0_i $ nit ( void ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void megaInit ( void ) ; extern int ( /* missing proto */ printf ) ( ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; void encodeStrings_litStr3_i $ nit ( void ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern int scanf ( char const * format , ... ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern float strtof ( char const * str , char const * endptr ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern int ( /* missing proto */ adler32 ) ( ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; void encodeStrings_litStr1_i $ nit ( void ) ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; void encodeStrings_litStr4_i $ nit ( void ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; char encodeStrings_litStr4 [ 14 ] ; extern double sqrt ( double x ) ; char encodeStrings_litStr3 [ 13 ] ; char encodeStrings_litStr2 [ 12 ] ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; char encodeStrings_litStr1 [ 13 ] ; char encodeStrings_litStr0 [ 12 ] ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { case 4 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 3 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 2 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 1 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 0 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; } } } void encodeStrings_litStr4_i $ nit ( void ) { { } } void encodeStrings_litStr1_i $ nit ( void ) { { } } void encodeStrings_litStr3_i $ nit ( void ) { { } } void main ( void ) { { megaInit ( ) ; } } void test_adler32 ( void ) { int tmp ; int tmp___0 ; int tmp___1 ; int tmp___2 ; { _1_stringEncoder ( 0 , encodeStrings_litStr0 ) ; tmp = adler32 ( encodeStrings_litStr0 ) ; assert ( tmp == 403375133 ) ; _1_stringEncoder ( 1 , encodeStrings_litStr1 ) ; tmp___0 = adler32 ( encodeStrings_litStr1 ) ; assert ( tmp___0 == 474547262 ) ; _1_stringEncoder ( 2 , encodeStrings_litStr2 ) ; tmp___1 = adler32 ( encodeStrings_litStr2 ) ; assert ( tmp___1 == 413860925 ) ; _1_stringEncoder ( 3 , encodeStrings_litStr3 ) ; tmp___2 = adler32 ( encodeStrings_litStr3 ) ; assert ( tmp___2 == 487130206 ) ; _1_stringEncoder ( 4 , encodeStrings_litStr4 ) ; printf ( encodeStrings_litStr4 ) ; return ; } } void megaInit ( void ) { { encodeStrings_litStr4_i $ nit ( ) ; encodeStrings_litStr3_i $ nit ( ) ; encodeStrings_litStr2_i $ nit ( ) ; encodeStrings_litStr1_i $ nit ( ) ; encodeStrings_litStr0_i $ nit ( ) ; } } void encodeStrings_litStr2_i $ nit ( void ) { { } } void encodeStrings_litStr0_i $ nit ( void ) { { } }
>>>Func
METHOD _1_stringEncoder
METHOD_RETURN void
PARAM int n
PARAM char str[]
BLOCK <empty> <empty>
<operator>.assignment encodeStrings_i3 = 0
IDENTIFIER n switch(n)
LITERAL 0 <empty>
<operator>.assignment str[encodeStrings_i3] = 'S'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'u'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'm'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'i'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ':'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
>>>PDG&32 0->2 0->3 0->4 0->5 0->6 0->7 0->8 0->9 0->10 0->11 0->12 0->13 0->14 0->15 0->16 0->17 0->18 0->19 0->20 0->21 0->22 0->23 0->24 0->25 0->26 0->27 0->28 0->29 0->30 0->31 2->1 3->1 5->1 5->1 5->9 8->1 9->11 10->1 11->13 12->1 13->15 15->17 16->1 17->19 18->1 19->21 20->1 21->23 22->1 23->25 24->1 25->27 26->1 27->29 28->1 29->31 30->1 30->1 31->1 31->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; char * * _global_argv = ( char * * ) 0 ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; int main ( int argc , char * * argv , char * * _formal_envp ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; void encodeStrings_litStr0_i $ nit ( void ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; int _global_argc = 0 ; void megaInit ( void ) ; char * * _global_envp = ( char * * ) 0 ; extern int ( /* missing proto */ printf ) ( ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; char encodeStrings_litStr0 [ 12 ] ; void megaInit ( void ) { { encodeStrings_litStr0_i $ nit ( ) ; } } void encodeStrings_litStr0_i $ nit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { case 0 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; } } } int main ( int argc , char * * argv , char * * _formal_envp ) { int sum ; char const * str ; register char const * s ; register char const * t ; int _BARRIER_0 ; { megaInit ( ) ; _global_argc = argc ; _global_argv = argv ; _global_envp = _formal_envp ; _BARRIER_0 = 1 ; sum = 0 ; str = ( char const * ) * ( argv + 1 ) ; s = str ; while ( * s ) { t = str ; while ( * t ) { sum += ( int ) * t ; t ++ ; } s ++ ; } _1_stringEncoder ( 0 , encodeStrings_litStr0 ) ; printf ( encodeStrings_litStr0 , sum ) ; return ( 0 ) ; } }
>>>Func
METHOD _1_stringEncoder
METHOD_RETURN void
PARAM int n
PARAM char str[]
BLOCK <empty> <empty>
<operator>.assignment encodeStrings_i3 = 0
IDENTIFIER n switch(n)
LITERAL 4 <empty>
<operator>.assignment str[encodeStrings_i3] = 'C'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '#'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ':'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 3 <empty>
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 2 <empty>
<operator>.assignment str[encodeStrings_i3] = 'I'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'M'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'P'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'O'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'S'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'S'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'I'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'B'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'L'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'E'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 1 <empty>
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 0 <empty>
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
>>>PDG&90 0->2 0->3 0->4 0->5 0->6 0->7 0->8 0->9 0->10 0->11 0->12 0->13 0->14 0->15 0->16 0->17 0->18 0->19 0->20 0->21 0->22 0->23 0->24 0->25 0->26 0->27 0->28 0->29 0->30 0->31 0->32 0->33 0->34 0->35 0->36 0->37 0->38 0->39 0->40 0->41 0->42 0->43 0->44 0->45 0->46 0->47 0->48 0->49 0->50 0->51 0->52 0->53 0->54 0->55 0->56 0->57 0->58 0->59 0->60 0->61 0->62 0->63 0->64 0->65 0->66 0->67 0->68 0->69 0->70 0->71 0->72 0->73 0->74 0->75 0->76 0->77 0->78 0->79 0->80 0->81 0->82 0->83 0->84 0->85 0->86 0->87 0->88 0->89 2->1 3->1 5->1 5->1 5->9 5->38 5->45 5->70 5->85 8->1 9->11 10->1 11->13 12->1 13->15 14->1 15->17 17->19 18->1 19->21 21->23 23->25 24->1 25->27 26->1 27->29 28->1 29->31 30->1 31->33 32->1 33->35 34->1 34->1 35->1 35->1 37->1 38->40 39->1 40->42 41->1 41->1 42->1 42->1 45->47 46->1 47->49 48->1 49->51 50->1 51->53 53->55 54->1 55->57 56->1 57->59 58->1 59->61 60->1 61->63 62->1 63->65 64->1 65->67 66->1 66->1 67->1 67->1 70->72 72->74 74->76 76->78 77->1 78->80 79->1 80->82 81->1 81->1 82->1 82->1 84->1 85->87 86->1 87->89 88->1 88->1 89->1 89->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fclose ( void * stream ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; char * * _global_argv = ( char * * ) 0 ; extern int fcntl ( int filedes , int cmd , ... ) ; void encodeStrings_litStr2_i $ nit ( void ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; int main ( int _formal_argc , char * * _formal_argv , char * * _formal_envp ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; void encodeStrings_litStr0_i $ nit ( void ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; int _global_argc = 0 ; void megaInit ( void ) ; char * * _global_envp = ( char * * ) 0 ; void encodeStrings_litStr3_i $ nit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int ( /* missing proto */ printf ) ( ) ; extern long clock ( void ) ; extern int ( /* missing proto */ scanf ) ( ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; void encodeStrings_litStr1_i $ nit ( void ) ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; void encodeStrings_litStr4_i $ nit ( void ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; char encodeStrings_litStr4 [ 14 ] ; extern int ( /* missing proto */ max ) ( ) ; extern double sqrt ( double x ) ; char encodeStrings_litStr3 [ 3 ] ; char encodeStrings_litStr2 [ 12 ] ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; char encodeStrings_litStr1 [ 7 ] ; char encodeStrings_litStr0 [ 3 ] ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; void encodeStrings_litStr3_i $ nit ( void ) { { } } void encodeStrings_litStr2_i $ nit ( void ) { { } } void encodeStrings_litStr4_i $ nit ( void ) { { } } void encodeStrings_litStr0_i $ nit ( void ) { { } } void encodeStrings_litStr1_i $ nit ( void ) { { } } void megaInit ( void ) { { encodeStrings_litStr4_i $ nit ( ) ; encodeStrings_litStr3_i $ nit ( ) ; encodeStrings_litStr2_i $ nit ( ) ; encodeStrings_litStr1_i $ nit ( ) ; encodeStrings_litStr0_i $ nit ( ) ; } } int main ( int _formal_argc , char * * _formal_argv , char * * _formal_envp ) { int i ; int n ; int N ; int result ; int P ; int K ; int L ; int freq [ 1000 ] ; int tmp ; int _BARRIER_0 ; { megaInit ( ) ; _global_argc = _formal_argc ; _global_argv = _formal_argv ; _global_envp = _formal_envp ; _BARRIER_0 = 1 ; _1_stringEncoder ( 0 , encodeStrings_litStr0 ) ; scanf ( encodeStrings_litStr0 , & N ) ; n = 0 ; while ( n < N ) { result = 0 ; i = 0 ; while ( i < 1000 ) { freq [ i ] = 0 ; i ++ ; } _1_stringEncoder ( 1 , encodeStrings_litStr1 ) ; scanf ( encodeStrings_litStr1 , & P , & K , & L ) ; if ( P * K < L ) { _1_stringEncoder ( 2 , encodeStrings_litStr2 ) ; printf ( encodeStrings_litStr2 ) ; } i = 0 ; while ( i < L ) { _1_stringEncoder ( 3 , encodeStrings_litStr3 ) ; scanf ( encodeStrings_litStr3 , & freq [ i ] ) ; i ++ ; } i = 0 ; while ( i < L ) { tmp = max ( freq , L ) ; result += ( i / K + 1 ) * tmp ; i ++ ; } _1_stringEncoder ( 4 , encodeStrings_litStr4 ) ; printf ( encodeStrings_litStr4 , n + 1 , result ) ; n ++ ; } return ( 0 ) ; } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { case 4 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 3 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 2 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 1 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 0 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; } } }
>>>Func
METHOD main
METHOD_RETURN int
PARAM int _formal_argc
PARAM char **_formal_argv
PARAM char **_formal_envp
megaInit megaInit()
<operator>.assignment _global_argc = _formal_argc
<operator>.assignment _global_argv = _formal_argv
<operator>.assignment _global_envp = _formal_envp
<operator>.assignment _BARRIER_0 = 1
_1_stringEncoder _1_stringEncoder(0, encodeStrings_litStr0)
scanf scanf(encodeStrings_litStr0, & n)
<operator>.assignment tmp = factorial(2 * n)
<operator>.assignment f1 = (long )tmp
<operator>.assignment tmp___0 = factorial(n + 1)
<operator>.assignment f2 = (long )tmp___0
<operator>.assignment tmp___1 = factorial(n)
<operator>.assignment f3 = (long )tmp___1
<operator>.assignment C = (float )(f1 / (f2 * f3))
_1_stringEncoder _1_stringEncoder(1, encodeStrings_litStr1)
printf printf(encodeStrings_litStr1  (double )C)
RETURN return (0); return (0);
LITERAL 0 return (0);
factorial factorial(2 * n)
<operator>.cast (long )tmp
factorial factorial(n + 1)
<operator>.cast (long )tmp___0
factorial factorial(n)
<operator>.cast (long )tmp___1
<operator>.cast (float )(f1 / (f2 * f3))
<operator>.cast (double )C
<operator>.multiplication 2 * n
<operator>.addition n + 1
<operator>.division f1 / (f2 * f3)
<operator>.multiplication f2 * f3
>>>PDG&35 0->2 0->3 0->4 0->5 0->6 0->7 0->8 0->9 0->10 0->11 0->13 0->15 0->17 0->19 0->20 0->21 0->22 0->24 0->25 0->26 0->27 0->28 0->30 0->31 0->32 0->33 0->34 2->6 3->7 4->8 5->1 6->1 6->1 6->1 7->1 7->1 7->1 8->1 8->1 8->1 9->1 9->1 10->1 11->1 11->1 11->25 11->27 11->31 11->32 12->1 12->1 12->13 12->24 13->1 13->1 13->33 14->1 14->1 14->15 14->26 15->1 15->1 15->34 16->1 16->1 16->17 16->28 17->1 17->1 17->34 18->1 18->1 18->20 18->30 19->1 19->20 20->1 20->1 20->1 21->1 22->21 23->1 23->12 24->1 25->1 25->14 26->1 27->1 27->16 28->1 29->1 30->1 31->23 31->23 31->25 31->27 31->32 33->1 33->1 33->18 33->18 33->29 33->29 34->1 34->1 34->33 34->33
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fclose ( void * stream ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; char * * _global_argv = ( char * * ) 0 ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; int main ( int _formal_argc , char * * _formal_argv , char * * _formal_envp ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void encodeStrings_litStr0_i $ nit ( void ) ; int _global_argc = 0 ; void megaInit ( void ) ; char * * _global_envp = ( char * * ) 0 ; extern int ( /* missing proto */ factorial ) ( ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int ( /* missing proto */ printf ) ( ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern int ( /* missing proto */ scanf ) ( ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern double strtod ( char const * str , char const * endptr ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern void signal ( int sig , void * func ) ; extern double difftime ( long tv1 , long tv0 ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; void encodeStrings_litStr1_i $ nit ( void ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; char encodeStrings_litStr1 [ 6 ] ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; char encodeStrings_litStr0 [ 3 ] ; int main ( int _formal_argc , char * * _formal_argv , char * * _formal_envp ) { long f1 ; long f2 ; long f3 ; int n ; float C ; int tmp ; int tmp___0 ; int tmp___1 ; int _BARRIER_0 ; { megaInit ( ) ; _global_argc = _formal_argc ; _global_argv = _formal_argv ; _global_envp = _formal_envp ; _BARRIER_0 = 1 ; _1_stringEncoder ( 0 , encodeStrings_litStr0 ) ; scanf ( encodeStrings_litStr0 , & n ) ; tmp = factorial ( 2 * n ) ; f1 = ( long ) tmp ; tmp___0 = factorial ( n + 1 ) ; f2 = ( long ) tmp___0 ; tmp___1 = factorial ( n ) ; f3 = ( long ) tmp___1 ; C = ( float ) ( f1 / ( f2 * f3 ) ) ; _1_stringEncoder ( 1 , encodeStrings_litStr1 ) ; printf ( encodeStrings_litStr1 , ( double ) C ) ; return ( 0 ) ; } } void encodeStrings_litStr1_i $ nit ( void ) { { } } void megaInit ( void ) { { encodeStrings_litStr1_i $ nit ( ) ; encodeStrings_litStr0_i $ nit ( ) ; } } void encodeStrings_litStr0_i $ nit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { case 1 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 0 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; } } }
>>>Func
METHOD ELFHash
METHOD_RETURN unsigned int
PARAM char *str
PARAM unsigned int len
<operator>.assignment hash = 0U
<operator>.assignment x = 0U
<operator>.assignment i = 0U
<operator>.assignment i = 0U
RETURN return (hash); return (hash);
<operator>.lessThan i < len
IDENTIFIER hash return (hash);
<operator>.assignment hash = (hash << 4) + (unsigned int )*str
<operator>.assignment x = (unsigned int )((long )hash & 4026531840L)
<operators>.assignmentAnd hash &= ~ x
<operator>.postIncrement str ++
<operator>.postIncrement i ++
<operator>.notEquals x != 0U
<operator>.addition (hash << 4) + (unsigned int )*str
<operator>.cast (unsigned int )((long )hash & 4026531840L)
<operators>.assignmentXor hash ^= x >> 24
<operator>.not ~ x
<operator>.shiftLeft hash << 4
<operator>.cast (unsigned int )*str
<operator>.and (long )hash & 4026531840L
<operator>.cast (long )hash
<operator>.arithmeticShiftRight x >> 24
UNKNOWN unsigned int unsigned int
UNKNOWN unsigned int unsigned int
<operator>.indirection *str
UNKNOWN long long
>>>PDG&30 0->2 0->3 0->4 0->5 0->6 0->7 0->9 0->10 0->13 0->14 0->15 0->16 0->19 0->20 0->21 0->23 0->24 0->25 2->1 2->14 3->9 4->1 4->1 4->10 4->21 5->1 5->1 7->1 7->9 8->1 9->1 9->1 9->1 9->9 9->11 9->12 9->13 9->14 9->15 9->15 9->16 9->17 9->18 9->20 9->21 9->22 9->23 9->24 9->26 9->27 9->28 9->29 10->8 11->1 11->1 11->13 11->19 11->23 11->24 12->1 12->1 12->16 13->1 13->1 13->10 13->21 14->1 14->1 15->1 15->9 16->1 16->19 16->20 16->25 16->25 17->1 17->1 18->1 19->1 19->13 20->1 20->13 21->11 21->11 21->17 21->17 22->1 23->1 23->12 23->12 23->18 23->18 25->19 25->19 25->20
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; void main ( void ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int printf ( char const * format , ... ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; unsigned int ELFHash ( char * str , unsigned int len ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; unsigned int ELFHash ( char * str , unsigned int len ) { unsigned int hash ; unsigned int x ; unsigned int i ; { hash = 0U ; x = 0U ; i = 0U ; i = 0U ; while ( i < len ) { hash = ( hash << 4 ) + ( unsigned int ) * str ; x = ( unsigned int ) ( ( long ) hash & 4026531840L ) ; if ( x != 0U ) { hash ^= x >> 24 ; } hash &= ~ x ; str ++ ; i ++ ; } return ( hash ) ; } } void megaInit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { } } } void main ( void ) { { megaInit ( ) ; } }
>>>Func
METHOD main
METHOD_RETURN int
PARAM int argc
PARAM char **argv
PARAM char **_formal_envp
megaInit megaInit()
<operator>.assignment _global_argc = argc
<operator>.assignment _global_argv = argv
<operator>.assignment _global_envp = _formal_envp
<operator>.assignment _BARRIER_0 = 1
<operator>.assignment sum = 0
<operator>.assignment str = (char const   *)*(argv + 1)
<operator>.assignment t = str
_1_stringEncoder _1_stringEncoder(0, encodeStrings_litStr0)
printf printf(encodeStrings_litStr0, sum)
RETURN return (0); return (0);
LITERAL 0 return (0);
<operator>.cast (char const   *)*(argv + 1)
<operator>.postIncrement t ++
<operator>.greaterThan (int const   )*t > 127
<operator>.addition argv + 1
<operator>.assignmentPlus sum += (int )*t
<operator>.assignmentPlus sum += (int )*t
<operator>.cast (int )*t
<operator>.cast (int )*t
<operator>.indirection *t
<operator>.cast (int const   )*t
UNKNOWN int const int const
<operator>.indirection *t
UNKNOWN int int
<operator>.indirection *t
UNKNOWN int int
<operator>.indirection *t
>>>PDG&33 0->2 0->3 0->4 0->5 0->6 0->7 0->8 0->9 0->10 0->12 0->13 0->14 0->15 0->16 0->18 0->19 0->20 0->21 0->22 2->6 3->7 3->20 4->8 5->1 6->1 6->1 6->1 7->1 7->1 8->1 8->1 8->1 9->1 9->1 10->1 10->14 10->21 10->22 11->1 11->1 11->12 12->1 12->1 12->1 12->18 13->1 13->14 14->1 14->1 14->1 15->1 16->15 17->1 18->1 18->1 19->1 19->1 19->21 19->22 19->23 19->24 19->29 19->30 19->31 19->32 20->1 21->1 21->1 21->14 21->22 22->1 22->1 22->14 22->21 23->1 24->1 25->18 25->19 25->25 25->26 25->27 25->28
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; char * * _global_argv = ( char * * ) 0 ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; int main ( int argc , char * * argv , char * * _formal_envp ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; void encodeStrings_litStr0_i $ nit ( void ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; int _global_argc = 0 ; void megaInit ( void ) ; char * * _global_envp = ( char * * ) 0 ; extern int ( /* missing proto */ printf ) ( ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; char encodeStrings_litStr0 [ 12 ] ; void megaInit ( void ) { { encodeStrings_litStr0_i $ nit ( ) ; } } void encodeStrings_litStr0_i $ nit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { case 0 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; } } } int main ( int argc , char * * argv , char * * _formal_envp ) { int sum ; char const * str ; register char const * t ; int _BARRIER_0 ; { megaInit ( ) ; _global_argc = argc ; _global_argv = argv ; _global_envp = _formal_envp ; _BARRIER_0 = 1 ; sum = 0 ; str = ( char const * ) * ( argv + 1 ) ; t = str ; while ( * t ) { if ( ( int const ) * t > 127 ) { sum += ( int ) * t ; } else { sum += ( int ) * t ; } t ++ ; } _1_stringEncoder ( 0 , encodeStrings_litStr0 ) ; printf ( encodeStrings_litStr0 , sum ) ; return ( 0 ) ; } }
>>>Func
METHOD fibMonaccianSearch
METHOD_RETURN int
PARAM int *arr
PARAM int x
PARAM int n
<operator>.assignment fibMMm2 = 0
<operator>.assignment fibMMm1 = 1
<operator>.assignment fibM = fibMMm2 + fibMMm1
<operator>.assignment offset = -1
RETURN return (-1); return (-1);
<operator>.lessThan fibM < n
<operator>.greaterThan fibM > 1
IDENTIFIER fibMMm1 if (fibMMm1)
<operator>.minus -1
<operator>.addition fibMMm2 + fibMMm1
<operator>.assignment fibMMm2 = fibMMm1
<operator>.assignment fibMMm1 = fibM
<operator>.assignment fibM = fibMMm2 + fibMMm1
<operator>.minus -1
<operator>.assignment i = tmp
<operator>.lessThan offset + fibMMm2 < n - 1
<operator>.lessThan *(arr + i) < x
<operator>.equals *(arr + (offset + 1)) == x
<operator>.addition fibMMm2 + fibMMm1
<operator>.assignment tmp = offset + fibMMm2
<operator>.assignment fibM = fibMMm1
<operator>.assignment fibMMm1 = fibMMm2
<operator>.assignment fibMMm2 = fibM - fibMMm1
<operator>.assignment offset = i
RETURN return (offset + 1); return (offset + 1);
<operator>.addition offset + fibMMm2
<operator>.subtraction n - 1
<operator>.assignment tmp = n - 1
<operator>.addition offset + 1
<operator>.addition offset + fibMMm2
<operator>.addition arr + i
<operator>.subtraction fibM - fibMMm1
<operator>.greaterThan *(arr + i) > x
<operator>.addition arr + (offset + 1)
<operator>.subtraction n - 1
<operator>.assignment fibM = fibMMm2
<operator>.assignmentMinus fibMMm1 -= fibMMm2
<operator>.assignment fibMMm2 = fibM - fibMMm1
<operator>.addition offset + 1
RETURN return (i); return (i);
<operator>.addition arr + i
<operator>.subtraction fibM - fibMMm1
IDENTIFIER i return (i);
<operator>.indirection *(arr + i)
<operator>.indirection *(arr + (offset + 1))
<operator>.indirection *(arr + i)
>>>PDG&51 0->2 0->3 0->4 0->5 0->6 0->7 0->10 0->11 0->12 0->13 0->14 0->15 0->16 0->17 0->18 0->19 0->20 0->21 0->22 0->23 0->24 0->25 0->26 0->28 0->30 0->31 0->33 0->34 0->35 0->36 0->37 0->38 0->39 0->40 0->41 0->43 0->45 0->46 0->47 2->35 2->38 3->21 3->22 4->10 5->1 5->7 5->14 5->20 5->24 5->26 5->30 5->34 5->40 5->41 6->1 6->7 6->14 6->15 6->25 6->41 7->1 7->1 7->10 8->1 8->1 8->20 8->30 8->33 8->38 8->43 9->1 10->1 10->10 10->11 10->15 10->16 10->16 10->17 10->23 10->31 11->1 11->1 11->9 11->13 11->19 11->20 11->21 11->22 11->30 11->31 11->35 11->38 11->43 11->48 11->49 13->9 14->1 15->1 15->17 15->20 15->23 15->24 15->26 15->30 15->34 15->40 15->41 16->1 16->15 16->17 16->23 16->25 16->41 17->1 17->1 17->10 18->8 19->1 19->1 19->28 19->35 19->45 19->47 20->1 20->1 20->1 20->24 20->32 20->34 20->39 21->1 21->11 21->22 21->25 21->26 21->27 21->28 21->36 21->37 21->37 21->45 21->50 22->9 22->13 22->29 22->33 23->1 24->1 24->1 24->19 25->1 25->36 26->1 26->36 27->1 27->1 27->20 27->24 27->26 27->30 27->34 27->40 27->41 28->1 28->20 28->30 28->33 28->38 28->43 29->1 30->1 30->1 31->1 31->20 31->20 31->39 32->1 32->1 32->19 33->29 34->1 34->1 36->1 36->11 36->25 36->27 36->27 36->41 37->1 37->1 37->1 37->11 37->21 37->22 37->40 37->41 37->42 37->44 37->46 39->1 39->31 39->32 39->32 40->1 40->46 41->1 41->46 42->1 42->1 42->20 42->24 42->26 42->30 42->34 42->40 42->41 44->1 45->1 45->1 46->1 46->11 46->25 46->41 46->42 46->42 47->44
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; int fibMonaccianSearch ( int * arr , int x , int n ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; void main ( void ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int printf ( char const * format , ... ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; int fibMonaccianSearch ( int * arr , int x , int n ) { int fibMMm2 ; int fibMMm1 ; int fibM ; int offset ; int i ; int tmp ; { fibMMm2 = 0 ; fibMMm1 = 1 ; fibM = fibMMm2 + fibMMm1 ; while ( fibM < n ) { fibMMm2 = fibMMm1 ; fibMMm1 = fibM ; fibM = fibMMm2 + fibMMm1 ; } offset = -1 ; while ( fibM > 1 ) { if ( offset + fibMMm2 < n - 1 ) { tmp = offset + fibMMm2 ; } else { tmp = n - 1 ; } i = tmp ; if ( * ( arr + i ) < x ) { fibM = fibMMm1 ; fibMMm1 = fibMMm2 ; fibMMm2 = fibM - fibMMm1 ; offset = i ; } else if ( * ( arr + i ) > x ) { fibM = fibMMm2 ; fibMMm1 -= fibMMm2 ; fibMMm2 = fibM - fibMMm1 ; } else { return ( i ) ; } } if ( fibMMm1 ) { if ( * ( arr + ( offset + 1 ) ) == x ) { return ( offset + 1 ) ; } } return ( -1 ) ; } } void megaInit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { } } } void main ( void ) { { megaInit ( ) ; } }
>>>Func
METHOD int_hash
METHOD_RETURN unsigned int
PARAM void *vlocation
<operator>.assignment location = (int *)vlocation
RETURN return ((unsigned int )*location); return ((unsigned int )*location);
<operator>.cast (unsigned int )*location
<operator>.cast (int *)vlocation
>>>PDG&7 0->2 0->3 0->6 2->3 2->6 3->1 3->1 3->1 4->1 5->1 5->1 5->4 6->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; void main ( void ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int printf ( char const * format , ... ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; unsigned int int_hash ( void * vlocation ) ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { } } } void megaInit ( void ) { { } } unsigned int int_hash ( void * vlocation ) { int * location ; { location = ( int * ) vlocation ; return ( ( unsigned int ) * location ) ; } } void main ( void ) { { megaInit ( ) ; } }
>>>Func
METHOD myAtoi
METHOD_RETURN int
PARAM char *str
<operator>.assignment minusFlag = 0
<operator>.assignment tmp = strlen(str)
<operator>.assignment length = tmp
<operator>.assignment result = 0L
<operator>.assignment counter = 0
<operator>.assignmentPlus str += counter
<operator>.assignment counter = 0
<operator>.assignment i = 0
<operator>.assignment i___0 = 0
RETURN return ((int )result); return ((int )result);
<operator>.equals (int )*(str + counter) == 32
<operator>.lessThan i < length
<operator>.greaterThan counter > 0
<operator>.greaterThan result > 2147483647L
<operator>.cast (int )result
strlen strlen(str)
<operator>.postIncrement counter ++
<operator>.assignment numberBuffer[counter] = *(str + i)
<operator>.postIncrement counter ++
<operator>.postIncrement i ++
<operator>.postIncrement i___0 ++
<operator>.postDecrement counter --
RETURN return (2147483647); return (2147483647);
<operator>.cast (int )*(str + counter)
<operator>.equals i == 0
<operator>.greaterThan counter > 10
<operator>.lessThan (int )*(str + i) < 48
<operator>.equals counter == 0
IDENTIFIER minusFlag if (minusFlag)
LITERAL 2147483647 return (2147483647);
<operator>.assignment tmp___0 = pow(10.0, counter - 1)
<operator>.assignmentMinus result -= (long )(((int )numberBuffer[i___0] - 48) * tmp___0)
<operator>.lessThan result < (-0x7FFFFFFF-1)
<operator>.addition str + counter
<operator>.equals (int )*(str + 0) == 45
IDENTIFIER minusFlag if (minusFlag)
<operator>.equals (int )*(str + i) == 48
<operator>.addition str + i
<operator>.assignment tmp___1 = pow(10.0, counter - 1)
<operator>.assignmentPlus result += (long )(((int )numberBuffer[i___0] - 48) * tmp___1)
RETURN return ((-0x7FFFFFFF-1)); return ((-0x7FFFFFFF-1));
<operator>.assignment minusFlag = 1
<operator>.postIncrement i ++
RETURN return ((-0x7FFFFFFF-1)); return ((-0x7FFFFFFF-1));
<operator>.greaterThan (int )*(str + i) > 57
pow pow(10.0, counter - 1)
<operator>.cast (long )(((int )numberBuffer[i___0] - 48) * tmp___0)
<operator>.subtraction -0x7FFFFFFF-1
<operator>.subtraction -0x7FFFFFFF-1
<operator>.cast (int )*(str + 0)
<operator>.subtraction -0x7FFFFFFF-1
RETURN return (2147483647); return (2147483647);
<operator>.addition str + i
<operator>.cast (int )*(str + i)
<operator>.subtraction counter - 1
<operator>.multiplication ((int )numberBuffer[i___0] - 48) * tmp___0
pow pow(10.0, counter - 1)
<operator>.cast (long )(((int )numberBuffer[i___0] - 48) * tmp___1)
<operator>.minus -0x7FFFFFFF
<operator>.equals (int )*(str + 0) == 43
LITERAL 2147483647 return (2147483647);
<operator>.subtraction (int )numberBuffer[i___0] - 48
<operator>.subtraction counter - 1
<operator>.multiplication ((int )numberBuffer[i___0] - 48) * tmp___1
<operator>.minus -0x7FFFFFFF
<operator>.addition str + 0
<operator>.postIncrement i ++
<operator>.minus -0x7FFFFFFF
<operator>.addition str + i
<operator>.subtraction (int )numberBuffer[i___0] - 48
<operator>.cast (int )*(str + 0)
<operator>.addition str + i
<operator>.addition str + 0
UNKNOWN int int
UNKNOWN int int
<operator>.indirection *(str + counter)
<operator>.indirectIndexAccess numberBuffer[counter]
<operator>.indirection *(str + i)
<operator>.cast (int )*(str + i)
UNKNOWN int int
<operator>.indirection *(str + i)
UNKNOWN long long
UNKNOWN int int
<operator>.indirection *(str + 0)
<operator>.cast (int )*(str + i)
UNKNOWN int int
<operator>.indirection *(str + i)
UNKNOWN long long
UNKNOWN int int
<operator>.indirection *(str + i)
<operator>.cast (int )numberBuffer[i___0]
UNKNOWN int int
<operator>.indirectIndexAccess numberBuffer[i___0]
<operator>.cast (int )numberBuffer[i___0]
UNKNOWN int int
<operator>.indirection *(str + 0)
UNKNOWN int int
<operator>.indirectIndexAccess numberBuffer[i___0]
>>>PDG&101 0->2 0->3 0->5 0->6 0->7 0->8 0->9 0->10 0->11 0->13 0->14 0->15 0->16 0->17 0->18 0->19 0->21 0->22 0->23 0->24 0->25 0->27 0->28 0->29 0->30 0->31 0->32 0->34 0->35 0->36 0->37 0->38 0->39 0->40 0->42 0->44 0->45 0->47 0->48 0->50 0->51 0->53 0->54 0->55 0->57 0->58 0->59 0->61 0->62 0->63 0->64 0->65 0->66 0->67 0->68 0->69 0->70 0->71 0->72 0->74 0->75 2->18 3->1 3->1 4->1 4->1 4->5 5->1 5->1 5->14 6->1 6->1 6->16 6->34 6->42 7->8 7->19 7->36 8->1 8->1 8->40 8->55 8->68 8->74 8->75 9->1 9->15 9->28 10->1 10->14 11->23 12->1 13->1 13->1 13->13 13->19 13->26 13->36 13->77 13->78 14->1 14->1 14->11 14->15 14->16 14->27 14->27 14->28 15->15 15->23 15->24 15->33 15->34 15->41 15->42 15->48 15->49 15->57 15->57 15->58 15->59 15->60 15->64 15->65 15->65 15->66 15->72 15->84 15->90 15->93 15->94 15->95 15->96 15->99 15->100 16->25 16->35 16->35 16->50 16->61 17->12 18->4 18->8 18->36 19->1 19->8 19->36 20->1 20->1 20->1 21->1 21->15 21->28 22->1 22->14 24->15 25->1 26->1 27->1 27->1 27->22 27->37 27->40 27->45 27->52 27->55 27->68 27->69 27->71 27->74 27->85 27->86 28->1 28->1 28->15 28->29 28->30 28->46 28->53 28->54 28->55 28->70 28->81 28->82 28->83 29->1 29->11 29->15 29->16 29->47 29->74 29->87 29->91 29->92 30->1 30->15 30->20 30->21 30->21 30->28 30->39 30->40 30->56 30->71 30->79 30->80 30->88 30->89 32->25 33->58 34->16 34->42 35->12 35->17 35->17 35->43 35->51 35->67 35->76 37->1 37->1 37->44 37->45 37->62 37->73 37->75 37->97 37->98 39->1 39->1 39->20 39->21 39->40 39->79 39->80 40->1 41->66 42->16 42->34 43->1 44->1 44->1 45->1 45->1 45->22 45->40 45->55 45->71 45->74 46->1 47->1 47->1 47->11 47->14 47->15 47->16 47->22 47->30 48->33 48->33 50->35 50->35 51->43 52->1 53->1 53->1 53->46 54->1 56->1 57->24 57->48 57->48 58->34 58->34 58->49 58->49 59->41 59->41 61->50 62->1 62->1 62->69 63->54 64->58 64->58 65->24 65->59 65->59 66->42 66->42 66->60 66->60 67->51 68->1 69->1 69->1 69->22 69->40 69->55 69->71 69->74 70->53 71->1 72->66 72->66 73->1 75->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern int ( /* missing proto */ strlen ) ( ) ; void main ( void ) ; extern int ( /* missing proto */ pow ) ( ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int printf ( char const * format , ... ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; int myAtoi ( char * str ) ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; void megaInit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { } } } void main ( void ) { { megaInit ( ) ; } } int myAtoi ( char * str ) { int minusFlag ; int length ; int tmp ; long result ; char numberBuffer [ 11 ] ; int counter ; int i ; int i___0 ; int tmp___0 ; int tmp___1 ; { minusFlag = 0 ; tmp = strlen ( str ) ; length = tmp ; result = 0L ; counter = 0 ; while ( ( int ) * ( str + counter ) == 32 ) { counter ++ ; } str += counter ; counter = 0 ; i = 0 ; while ( i < length ) { if ( i == 0 ) { if ( ( int ) * ( str + 0 ) == 45 ) { minusFlag = 1 ; i ++ ; } else if ( ( int ) * ( str + 0 ) == 43 ) { i ++ ; } } if ( counter > 10 ) { if ( minusFlag ) { return ( ( -0x7FFFFFFF - 1 ) ) ; } else { return ( 2147483647 ) ; } } if ( ( int ) * ( str + i ) < 48 ) { break ; } else if ( ( int ) * ( str + i ) > 57 ) { break ; } if ( counter == 0 ) { if ( ( int ) * ( str + i ) == 48 ) { goto __Cont ; } } numberBuffer [ counter ] = * ( str + i ) ; counter ++ ; __Cont : /* CIL Label */ i ++ ; } i___0 = 0 ; while ( counter > 0 ) { if ( minusFlag ) { tmp___0 = pow ( 10.0 , counter - 1 ) ; result -= ( long ) ( ( ( int ) numberBuffer [ i___0 ] - 48 ) * tmp___0 ) ; } else { tmp___1 = pow ( 10.0 , counter - 1 ) ; result += ( long ) ( ( ( int ) numberBuffer [ i___0 ] - 48 ) * tmp___1 ) ; } i___0 ++ ; counter -- ; } if ( result > 2147483647L ) { return ( 2147483647 ) ; } else if ( result < ( -0x7FFFFFFF - 1 ) ) { return ( ( -0x7FFFFFFF - 1 ) ) ; } return ( ( int ) result ) ; } }
>>>Func
METHOD _1_stringEncoder
METHOD_RETURN void
PARAM int n
PARAM char str[]
BLOCK <empty> <empty>
<operator>.assignment encodeStrings_i3 = 0
IDENTIFIER n switch(n)
LITERAL 2 <empty>
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 1 <empty>
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 0 <empty>
<operator>.assignment str[encodeStrings_i3] = '\n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'E'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'y'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'b'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'i'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'y'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'u'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'm'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'b'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '='
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
>>>PDG&80 0->2 0->3 0->4 0->5 0->6 0->7 0->8 0->9 0->10 0->11 0->12 0->13 0->14 0->15 0->16 0->17 0->18 0->19 0->20 0->21 0->22 0->23 0->24 0->25 0->26 0->27 0->28 0->29 0->30 0->31 0->32 0->33 0->34 0->35 0->36 0->37 0->38 0->39 0->40 0->41 0->42 0->43 0->44 0->45 0->46 0->47 0->48 0->49 0->50 0->51 0->52 0->53 0->54 0->55 0->56 0->57 0->58 0->59 0->60 0->61 0->62 0->63 0->64 0->65 0->66 0->67 0->68 0->69 0->70 0->71 0->72 0->73 0->74 0->75 0->76 0->77 0->78 0->79 2->1 3->1 5->1 5->1 5->9 5->18 5->25 8->1 9->11 10->1 11->13 12->1 13->15 14->1 14->1 15->1 15->1 17->1 18->20 19->1 20->22 21->1 21->1 22->1 22->1 24->1 25->27 27->29 28->1 29->31 31->33 32->1 33->35 35->37 37->39 39->41 41->43 43->45 45->47 47->49 49->51 50->1 51->53 53->55 54->1 55->57 57->59 58->1 59->61 61->63 62->1 63->65 64->1 65->67 66->1 67->69 68->1 69->71 70->1 71->73 72->1 73->75 74->1 75->77 76->1 77->79 78->1 78->1 79->1 79->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; char * * _global_argv = ( char * * ) 0 ; void encodeStrings_litStr2_i $ nit ( void ) ; extern int unlink ( char const * filename ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern int raise ( int sig ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern double ceil ( double x ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; int main ( int _formal_argc , char * * _formal_argv , char * * _formal_envp ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; void encodeStrings_litStr0_i $ nit ( void ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; int _global_argc = 0 ; char * * _global_envp = ( char * * ) 0 ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int ( /* missing proto */ printf ) ( ) ; extern int ( /* missing proto */ scanf ) ( ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; void encodeStrings_litStr1_i $ nit ( void ) ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; char encodeStrings_litStr2 [ 4 ] ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; char encodeStrings_litStr1 [ 3 ] ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; char encodeStrings_litStr0 [ 28 ] ; void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { case 2 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 1 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 0 : str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; } } } void megaInit ( void ) { { encodeStrings_litStr2_i $ nit ( ) ; encodeStrings_litStr1_i $ nit ( ) ; encodeStrings_litStr0_i $ nit ( ) ; } } void encodeStrings_litStr0_i $ nit ( void ) { { } } void encodeStrings_litStr1_i $ nit ( void ) { { } } void encodeStrings_litStr2_i $ nit ( void ) { { } } int main ( int _formal_argc , char * * _formal_argv , char * * _formal_envp ) { int remainder ; int number ; int decimal_number ; int temp ; int _BARRIER_0 ; { megaInit ( ) ; _global_argc = _formal_argc ; _global_argv = _formal_argv ; _global_envp = _formal_envp ; _BARRIER_0 = 1 ; number = 0 ; decimal_number = 0 ; temp = 1 ; _1_stringEncoder ( 0 , encodeStrings_litStr0 ) ; printf ( encodeStrings_litStr0 ) ; _1_stringEncoder ( 1 , encodeStrings_litStr1 ) ; scanf ( encodeStrings_litStr1 , & number ) ; while ( number > 0 ) { remainder = number % 10 ; number /= 10 ; decimal_number += remainder * temp ; temp *= 2 ; } _1_stringEncoder ( 2 , encodeStrings_litStr2 ) ; printf ( encodeStrings_litStr2 , decimal_number ) ; return ( 0 ) ; } }
>>>Func
METHOD main
METHOD_RETURN int
PARAM int _formal_argc
PARAM char **_formal_argv
PARAM char **_formal_envp
megaInit megaInit()
<operator>.assignment _global_argc = _formal_argc
<operator>.assignment _global_argv = _formal_argv
<operator>.assignment _global_envp = _formal_envp
<operator>.assignment _BARRIER_0 = 1
test test()
RETURN return (0); return (0);
LITERAL 0 return (0);
>>>PDG&13 0->2 0->3 0->4 0->5 0->6 0->7 0->8 0->9 0->10 0->11 0->12 2->6 3->7 4->8 5->1 6->1 6->1 6->1 7->1 7->1 7->1 8->1 8->1 8->1 9->1 9->1 10->1 11->1 12->11
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fclose ( void * stream ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; char * * _global_argv = ( char * * ) 0 ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; int main ( int _formal_argc , char * * _formal_argv , char * * _formal_envp ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; int _global_argc = 0 ; char * * _global_envp = ( char * * ) 0 ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int printf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern int scanf ( char const * format , ... ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int ( /* missing proto */ test ) ( ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { } } } void megaInit ( void ) { { } } int main ( int _formal_argc , char * * _formal_argv , char * * _formal_envp ) { int _BARRIER_0 ; { megaInit ( ) ; _global_argc = _formal_argc ; _global_argv = _formal_argv ; _global_envp = _formal_envp ; _BARRIER_0 = 1 ; test ( ) ; return ( 0 ) ; } }
>>>Func
METHOD isGreaterThan
METHOD_RETURN int
PARAM char *a
PARAM char *b
<operator>.assignment tmp = strlen(a)
<operator>.assignment tmp___0 = strlen(b)
<operator>.assignment tmp___1 = strlen(a)
<operator>.assignment tmp___2 = strlen(b)
<operator>.assignment tmp___3 = strlen(a)
<operator>.assignment tmp___4 = strlen(a)
<operator>.assignment i = tmp___4 - 1
RETURN return (-1); return (-1);
<operator>.greaterThan tmp > tmp___0
<operator>.lessThan tmp___1 < tmp___2
<operator>.equals tmp___3 == 1
<operator>.greaterEqualsThan i >= 0
<operator>.minus -1
strlen strlen(a)
strlen strlen(b)
RETURN return (1); return (1);
strlen strlen(a)
strlen strlen(b)
RETURN return (0); return (0);
strlen strlen(a)
strlen strlen(a)
<operator>.subtraction tmp___4 - 1
<operator>.postDecrement i --
LITERAL 1 return (1);
LITERAL 0 return (0);
<operator>.greaterThan (int )*(a + 0) > (int )*(b + 0)
<operator>.greaterThan (int )*(a + i) > (int )*(b + i)
<operator>.lessThan (int )*(a + i) < (int )*(b + i)
RETURN return (1); return (1);
RETURN return (1); return (1);
RETURN return (0); return (0);
LITERAL 1 return (1);
RETURN return (0); return (0);
LITERAL 1 return (1);
LITERAL 0 return (0);
LITERAL 0 return (0);
<operator>.addition a + 0
<operator>.addition b + 0
<operator>.addition a + i
<operator>.addition b + i
<operator>.addition a + i
<operator>.addition b + i
<operator>.cast (int )*(a + 0)
<operator>.cast (int )*(b + 0)
<operator>.cast (int )*(a + i)
<operator>.cast (int )*(b + i)
<operator>.cast (int )*(a + i)
<operator>.cast (int )*(b + i)
UNKNOWN int int
<operator>.indirection *(a + 0)
UNKNOWN int int
<operator>.indirection *(b + 0)
UNKNOWN int int
<operator>.indirection *(a + i)
UNKNOWN int int
<operator>.indirection *(b + i)
UNKNOWN int int
<operator>.indirection *(a + i)
UNKNOWN int int
<operator>.indirection *(b + i)
>>>PDG&64 0->2 0->3 0->12 0->13 0->14 0->15 0->16 0->17 0->18 0->19 0->20 0->21 0->22 0->23 0->24 0->25 0->26 0->27 0->28 0->32 0->33 0->34 0->35 0->36 0->37 0->38 0->39 0->40 0->41 0->42 0->43 0->44 0->45 2->17 3->18 4->1 4->1 4->12 5->1 5->1 5->12 6->13 7->13 8->14 9->25 10->15 11->1 12->1 12->1 12->1 12->6 12->7 12->13 12->19 12->20 12->21 13->8 13->14 13->22 13->23 14->9 14->10 14->15 14->24 14->25 14->29 14->40 14->41 14->46 14->47 14->52 14->53 14->54 14->55 15->11 15->16 15->26 15->30 15->42 15->42 15->43 15->43 15->44 15->45 15->48 15->49 15->56 15->57 15->58 15->59 16->11 17->1 17->4 17->20 18->1 18->5 18->21 19->1 20->6 20->23 21->7 21->41 21->43 22->1 23->8 23->24 23->40 24->9 24->42 25->10 25->10 26->15 27->19 28->22 29->32 29->36 30->31 30->33 30->44 30->45 30->50 30->51 30->60 30->61 30->62 30->63 31->15 31->26 31->34 32->1 33->1 34->1 35->32 36->1 37->33 38->34 39->36
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; int isGreaterThan ( char * a , char * b ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern int ( /* missing proto */ strlen ) ( ) ; void main ( void ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int printf ( char const * format , ... ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; int isGreaterThan ( char * a , char * b ) { int tmp ; int tmp___0 ; int tmp___1 ; int tmp___2 ; int tmp___3 ; int i ; int tmp___4 ; { tmp = strlen ( a ) ; tmp___0 = strlen ( b ) ; if ( tmp > tmp___0 ) { return ( 1 ) ; } tmp___1 = strlen ( a ) ; tmp___2 = strlen ( b ) ; if ( tmp___1 < tmp___2 ) { return ( 0 ) ; } tmp___3 = strlen ( a ) ; if ( tmp___3 == 1 ) { if ( ( int ) * ( a + 0 ) > ( int ) * ( b + 0 ) ) { return ( 1 ) ; } else { return ( 0 ) ; } } tmp___4 = strlen ( a ) ; i = tmp___4 - 1 ; while ( i >= 0 ) { if ( ( int ) * ( a + i ) > ( int ) * ( b + i ) ) { return ( 1 ) ; } if ( ( int ) * ( a + i ) < ( int ) * ( b + i ) ) { return ( 0 ) ; } i -- ; } return ( -1 ) ; } } void megaInit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { } } } void main ( void ) { { megaInit ( ) ; } }
>>>Func
METHOD _1_stringEncoder
METHOD_RETURN void
PARAM int n
PARAM char str[]
BLOCK <empty> <empty>
<operator>.assignment encodeStrings_i3 = 0
IDENTIFIER n switch(n)
LITERAL 8 <empty>
<operator>.assignment str[encodeStrings_i3] = 'E'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'l'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'm'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'm'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'o'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'v'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'i'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ':'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 7 <empty>
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 6 <empty>
<operator>.assignment str[encodeStrings_i3] = 'E'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'l'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'm'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'o'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'b'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'i'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ':'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 5 <empty>
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 4 <empty>
<operator>.assignment str[encodeStrings_i3] = 'E'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'y'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'o'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'u'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'c'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'h'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'o'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'i'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'c'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ':'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 3 <empty>
<operator>.assignment str[encodeStrings_i3] = '3'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ':'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'x'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'i'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 2 <empty>
<operator>.assignment str[encodeStrings_i3] = '2'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ':'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'R'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'm'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'o'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'v'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 1 <empty>
<operator>.assignment str[encodeStrings_i3] = '1'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ':'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'I'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 0 <empty>
<operator>.assignment str[encodeStrings_i3] = '\n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'M'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'u'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ':'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
>>>PDG&264 0->2 0->3 0->4 0->5 0->6 0->7 0->8 0->9 0->10 0->11 0->12 0->13 0->14 0->15 0->16 0->17 0->18 0->19 0->20 0->21 0->22 0->23 0->24 0->25 0->26 0->27 0->28 0->29 0->30 0->31 0->32 0->33 0->34 0->35 0->36 0->37 0->38 0->39 0->40 0->41 0->42 0->43 0->44 0->45 0->46 0->47 0->48 0->49 0->50 0->51 0->52 0->53 0->54 0->55 0->56 0->57 0->58 0->59 0->60 0->61 0->62 0->63 0->64 0->65 0->66 0->67 0->68 0->69 0->70 0->71 0->72 0->73 0->74 0->75 0->76 0->77 0->78 0->79 0->80 0->81 0->82 0->83 0->84 0->85 0->86 0->87 0->88 0->89 0->90 0->91 0->92 0->93 0->94 0->95 0->96 0->97 0->98 0->99 0->100 0->101 0->102 0->103 0->104 0->105 0->106 0->107 0->108 0->109 0->110 0->111 0->112 0->113 0->114 0->115 0->116 0->117 0->118 0->119 0->120 0->121 0->122 0->123 0->124 0->125 0->126 0->127 0->128 0->129 0->130 0->131 0->132 0->133 0->134 0->135 0->136 0->137 0->138 0->139 0->140 0->141 0->142 0->143 0->144 0->145 0->146 0->147 0->148 0->149 0->150 0->151 0->152 0->153 0->154 0->155 0->156 0->157 0->158 0->159 0->160 0->161 0->162 0->163 0->164 0->165 0->166 0->167 0->168 0->169 0->170 0->171 0->172 0->173 0->174 0->175 0->176 0->177 0->178 0->179 0->180 0->181 0->182 0->183 0->184 0->185 0->186 0->187 0->188 0->189 0->190 0->191 0->192 0->193 0->194 0->195 0->196 0->197 0->198 0->199 0->200 0->201 0->202 0->203 0->204 0->205 0->206 0->207 0->208 0->209 0->210 0->211 0->212 0->213 0->214 0->215 0->216 0->217 0->218 0->219 0->220 0->221 0->222 0->223 0->224 0->225 0->226 0->227 0->228 0->229 0->230 0->231 0->232 0->233 0->234 0->235 0->236 0->237 0->238 0->239 0->240 0->241 0->242 0->243 0->244 0->245 0->246 0->247 0->248 0->249 0->250 0->251 0->252 0->253 0->254 0->255 0->256 0->257 0->258 0->259 0->260 0->261 0->262 0->263 2->1 3->1 5->1 5->1 5->9 5->58 5->65 5->128 5->135 5->176 5->195 5->218 5->241 8->1 9->11 10->1 11->13 13->15 15->17 17->19 18->1 19->21 20->1 21->23 23->25 24->1 25->27 27->29 28->1 29->31 30->1 31->33 32->1 33->35 34->1 35->37 37->39 39->41 40->1 41->43 42->1 43->45 44->1 45->47 46->1 47->49 48->1 49->51 50->1 51->53 52->1 53->55 54->1 54->1 55->1 55->1 57->1 58->60 59->1 60->62 61->1 61->1 62->1 62->1 64->1 65->67 67->69 69->71 71->73 73->75 75->77 77->79 78->1 79->81 81->83 82->1 83->85 85->87 87->89 89->91 91->93 93->95 94->1 95->97 97->99 98->1 99->101 101->103 103->105 104->1 105->107 106->1 107->109 108->1 109->111 111->113 112->1 113->115 114->1 115->117 116->1 117->119 118->1 119->121 120->1 121->123 122->1 123->125 124->1 124->1 125->1 125->1 127->1 128->130 129->1 130->132 131->1 131->1 132->1 132->1 134->1 135->137 136->1 137->139 138->1 139->141 141->143 143->145 145->147 146->1 147->149 149->151 150->1 151->153 152->1 153->155 155->157 157->159 158->1 159->161 160->1 161->163 162->1 163->165 164->1 165->167 166->1 167->169 168->1 169->171 170->1 171->173 172->1 172->1 173->1 173->1 175->1 176->178 177->1 178->180 179->1 180->182 181->1 182->184 183->1 184->186 185->1 186->188 187->1 188->190 189->1 190->192 191->1 191->1 192->1 192->1 194->1 195->197 196->1 197->199 198->1 199->201 201->203 202->1 203->205 204->1 205->207 206->1 207->209 208->1 209->211 210->1 211->213 212->1 213->215 214->1 214->1 215->1 215->1 217->1 218->220 219->1 220->222 221->1 222->224 223->1 224->226 225->1 226->228 227->1 228->230 229->1 230->232 231->1 232->234 233->1 234->236 235->1 236->238 237->1 237->1 238->1 238->1 241->243 243->245 245->247 247->249 248->1 249->251 250->1 251->253 252->1 253->255 254->1 255->257 256->1 257->259 258->1 259->261 260->1 261->263 262->1 262->1 263->1 263->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fclose ( void * stream ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; char * * _global_argv = ( char * * ) 0 ; void encodeStrings_litStr2_i $ nit ( void ) ; extern int unlink ( char const * filename ) ; extern int fcntl ( int filedes , int cmd , ... ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int pthread_mutex_lock ( int * mutex ) ; extern int pthread_cond_init ( int * cond , int * attr ) ; void encodeStrings_litStr5_i $ nit ( void ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern int raise ( int sig ) ; extern void abort ( ) ; void encodeStrings_litStr8_i $ nit ( void ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int getpagesize ( ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; int main ( int _formal_argc , char * * _formal_argv , char * * _formal_envp ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void encodeStrings_litStr0_i $ nit ( void ) ; int _global_argc = 0 ; void megaInit ( void ) ; char * * _global_envp = ( char * * ) 0 ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int ( /* missing proto */ printf ) ( ) ; void encodeStrings_litStr3_i $ nit ( void ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern int ( /* missing proto */ scanf ) ( ) ; void encodeStrings_litStr6_i $ nit ( void ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern void signal ( int sig , void * func ) ; extern int ( /* missing proto */ insert ) ( ) ; extern double difftime ( long tv1 , long tv0 ) ; extern int ( /* missing proto */ destroyqueue ) ( ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; void encodeStrings_litStr1_i $ nit ( void ) ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; void encodeStrings_litStr4_i $ nit ( void ) ; char encodeStrings_litStr8 [ 24 ] ; extern int ( /* missing proto */ createqueue ) ( ) ; char encodeStrings_litStr7 [ 3 ] ; char encodeStrings_litStr6 [ 31 ] ; void encodeStrings_litStr7_i $ nit ( void ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; char encodeStrings_litStr5 [ 3 ] ; extern int open ( char const * filename , int oflag , ... ) ; char encodeStrings_litStr4 [ 20 ] ; extern int ( /* missing proto */ removes ) ( ) ; extern double sqrt ( double x ) ; char encodeStrings_litStr3 [ 9 ] ; char encodeStrings_litStr2 [ 11 ] ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; char encodeStrings_litStr1 [ 11 ] ; extern int ( /* missing proto */ show ) ( ) ; char encodeStrings_litStr0 [ 12 ] ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; void encodeStrings_litStr6_i $ nit ( void ) { { } } void megaInit ( void ) { { encodeStrings_litStr8_i $ nit ( ) ; encodeStrings_litStr7_i $ nit ( ) ; encodeStrings_litStr6_i $ nit ( ) ; encodeStrings_litStr5_i $ nit ( ) ; encodeStrings_litStr4_i $ nit ( ) ; encodeStrings_litStr3_i $ nit ( ) ; encodeStrings_litStr2_i $ nit ( ) ; encodeStrings_litStr1_i $ nit ( ) ; encodeStrings_litStr0_i $ nit ( ) ; } } void encodeStrings_litStr4_i $ nit ( void ) { { } } int main ( int _formal_argc , char * * _formal_argv , char * * _formal_envp ) { int x ; int ch ; int _BARRIER_0 ; { megaInit ( ) ; _global_argc = _formal_argc ; _global_argv = _formal_argv ; _global_envp = _formal_envp ; _BARRIER_0 = 1 ; createqueue ( ) ; while ( 1 ) { _1_stringEncoder ( 0 , encodeStrings_litStr0 ) ; printf ( encodeStrings_litStr0 ) ; _1_stringEncoder ( 1 , encodeStrings_litStr1 ) ; printf ( encodeStrings_litStr1 ) ; _1_stringEncoder ( 2 , encodeStrings_litStr2 ) ; printf ( encodeStrings_litStr2 ) ; _1_stringEncoder ( 3 , encodeStrings_litStr3 ) ; printf ( encodeStrings_litStr3 ) ; _1_stringEncoder ( 4 , encodeStrings_litStr4 ) ; printf ( encodeStrings_litStr4 ) ; _1_stringEncoder ( 5 , encodeStrings_litStr5 ) ; scanf ( encodeStrings_litStr5 , & ch ) ; switch ( ch ) { case 1 : _1_stringEncoder ( 6 , encodeStrings_litStr6 ) ; printf ( encodeStrings_litStr6 ) ; _1_stringEncoder ( 7 , encodeStrings_litStr7 ) ; scanf ( encodeStrings_litStr7 , & x ) ; insert ( x ) ; show ( ) ; break ; case 2 : x = removes ( ) ; _1_stringEncoder ( 8 , encodeStrings_litStr8 ) ; printf ( encodeStrings_litStr8 , x ) ; show ( ) ; break ; case 3 : break ; } if ( ! ( ch != 3 ) ) { break ; } } destroyqueue ( ) ; return ( 0 ) ; } } void encodeStrings_litStr1_i $ nit ( void ) { { } } void encodeStrings_litStr2_i $ nit ( void ) { { } } void encodeStrings_litStr3_i $ nit ( void ) { { } } void encodeStrings_litStr8_i $ nit ( void ) { { } } void encodeStrings_litStr5_i $ nit ( void ) { { } } void encodeStrings_litStr7_i $ nit ( void ) { { } } void encodeStrings_litStr0_i $ nit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { case 8 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 7 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 6 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 5 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 4 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 3 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 2 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 1 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 0 : str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; } } }
>>>Func
METHOD max
METHOD_RETURN int
PARAM int a
PARAM int b
RETURN return (tmp); return (tmp);
<operator>.greaterThan a > b
IDENTIFIER tmp return (tmp);
<operator>.assignment tmp = a
<operator>.assignment tmp = b
>>>PDG&9 0->2 0->3 0->5 0->6 0->7 0->8 2->5 3->5 4->1 5->1 5->1 5->1 5->7 5->7 5->8 5->8 6->4 7->1 7->1 7->1 7->6 8->1 8->1 8->1 8->6
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; void main ( void ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int printf ( char const * format , ... ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; int max ( int a , int b ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { } } } void megaInit ( void ) { { } } int max ( int a , int b ) { int tmp ; { if ( a > b ) { tmp = a ; } else { tmp = b ; } return ( tmp ) ; } } void main ( void ) { { megaInit ( ) ; } }
>>>Func
METHOD main
METHOD_RETURN int
PARAM int argc
PARAM char **argv
PARAM char **_formal_envp
megaInit megaInit()
<operator>.assignment _global_argc = argc
<operator>.assignment _global_argv = argv
<operator>.assignment _global_envp = _formal_envp
<operator>.assignment _BARRIER_0 = 1
<operator>.assignment sum = 0
<operator>.assignment i = 0
<operator>.assignment i = 0
_1_stringEncoder _1_stringEncoder(0, encodeStrings_litStr0)
printf printf(encodeStrings_litStr0, sum)
RETURN return (0); return (0);
<operator>.lessThan i < (int )*(*(argv + 1) + 0)
<operator>.lessThan i < (int )*(*(argv + 1) + 0)
LITERAL 0 return (0);
<operator>.assignmentPlus sum += i
<operator>.postIncrement i ++
<operator>.assignmentPlus sum += i
<operator>.postIncrement i ++
<operator>.cast (int )*(*(argv + 1) + 0)
<operator>.addition *(argv + 1) + 0
<operator>.addition *(argv + 1) + 0
<operator>.addition argv + 1
<operator>.addition argv + 1
<operator>.cast (int )*(*(argv + 1) + 0)
UNKNOWN int int
<operator>.indirection *(*(argv + 1) + 0)
UNKNOWN int int
<operator>.indirection *(*(argv + 1) + 0)
<operator>.indirection *(argv + 1)
<operator>.indirection *(argv + 1)
>>>PDG&35 0->2 0->3 0->4 0->5 0->6 0->7 0->8 0->9 0->10 0->11 0->12 0->13 0->14 0->15 0->16 0->17 0->18 0->19 0->20 0->21 0->22 0->24 0->25 0->26 0->27 2->6 3->7 3->26 3->27 4->8 5->1 6->1 6->1 6->1 7->1 7->1 8->1 8->1 8->1 9->1 9->1 10->1 10->14 10->19 10->21 11->16 12->1 12->17 13->1 13->14 14->1 14->1 14->1 15->1 16->16 16->19 16->19 16->20 16->20 16->24 16->26 16->28 16->29 16->30 16->33 17->1 17->1 17->1 17->17 17->21 17->21 17->22 17->22 17->23 17->25 17->27 17->31 17->32 17->34 18->15 19->1 19->14 19->21 20->1 20->16 21->1 21->14 22->1 22->17 23->1 25->1 27->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; char * * _global_argv = ( char * * ) 0 ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; int main ( int argc , char * * argv , char * * _formal_envp ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; void encodeStrings_litStr0_i $ nit ( void ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; int _global_argc = 0 ; void megaInit ( void ) ; char * * _global_envp = ( char * * ) 0 ; extern int ( /* missing proto */ printf ) ( ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; char encodeStrings_litStr0 [ 12 ] ; void megaInit ( void ) { { encodeStrings_litStr0_i $ nit ( ) ; } } void encodeStrings_litStr0_i $ nit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { case 0 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; } } } int main ( int argc , char * * argv , char * * _formal_envp ) { int i ; int sum ; int _BARRIER_0 ; { megaInit ( ) ; _global_argc = argc ; _global_argv = argv ; _global_envp = _formal_envp ; _BARRIER_0 = 1 ; sum = 0 ; i = 0 ; while ( i < ( int ) * ( * ( argv + 1 ) + 0 ) ) { sum += i ; i ++ ; } i = 0 ; while ( i < ( int ) * ( * ( argv + 1 ) + 0 ) ) { sum += i ; i ++ ; } _1_stringEncoder ( 0 , encodeStrings_litStr0 ) ; printf ( encodeStrings_litStr0 , sum ) ; return ( 0 ) ; } }
>>>Func
METHOD cmpval
METHOD_RETURN int
PARAM void const   *a
PARAM void const   *b
RETURN return (*((int *)a) - *((int *)b)); return (*((int *)a) - *((int *)b));
<operator>.subtraction *((int *)a) - *((int *)b)
<operator>.cast (int *)a
<operator>.cast (int *)b
>>>PDG&8 0->2 0->3 0->6 0->7 2->6 3->7 4->1 5->1 5->1 5->1 5->4 6->1 7->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; void main ( void ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int printf ( char const * format , ... ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; int cmpval ( void const * a , void const * b ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; int cmpval ( void const * a , void const * b ) { { return ( * ( ( int * ) a ) - * ( ( int * ) b ) ) ; } } void megaInit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { } } } void main ( void ) { { megaInit ( ) ; } }
>>>Func
METHOD binary
METHOD_RETURN int
PARAM int *a
PARAM int n
PARAM int m
PARAM int l
PARAM int u
<operator>.assignment c = 0
RETURN return (0); return (0);
<operator>.lessEqualsThan l <= u
LITERAL 0 return (0);
<operator>.assignment mid = (l + u) / 2
<operator>.equals m == *(a + mid)
RETURN return (c); return (c);
<operator>.division (l + u) / 2
<operator>.assignment c = 1
IDENTIFIER c return (c);
<operator>.addition l + u
<operator>.addition a + mid
<operator>.lessThan m < *(a + mid)
<operator>.assignment tmp = binary(a, n, m, l, mid - 1)
RETURN return (tmp); return (tmp);
IDENTIFIER tmp return (tmp);
<operator>.assignment tmp___0 = binary(a, n, m, mid + 1, u)
RETURN return (tmp___0); return (tmp___0);
<operator>.addition a + mid
binary binary(a, n, m, l, mid - 1)
IDENTIFIER tmp___0 return (tmp___0);
<operator>.subtraction mid - 1
binary binary(a, n, m, mid + 1, u)
<operator>.addition mid + 1
<operator>.indirection *(a + mid)
<operator>.indirection *(a + mid)
>>>PDG&33 0->2 0->3 0->4 0->5 0->6 0->7 0->8 0->9 0->10 0->12 0->14 0->15 0->16 0->17 0->18 0->19 0->22 0->25 0->26 0->27 0->28 0->29 0->30 2->18 2->25 2->26 2->29 3->26 3->29 4->12 5->9 6->9 7->1 7->1 7->16 8->1 9->1 9->11 9->12 9->13 9->14 9->14 9->14 9->17 9->17 9->17 9->18 9->26 9->29 9->31 10->8 11->1 11->1 11->18 11->25 11->28 11->29 11->30 12->1 12->8 12->15 12->19 12->19 12->25 12->32 13->1 14->1 14->11 14->11 16->13 17->1 19->1 19->1 19->20 19->21 19->23 19->24 19->26 19->26 19->28 19->29 19->29 19->30 20->1 20->1 20->1 20->22 21->1 22->21 23->27 24->1 26->1 26->1 26->1 26->1 26->1 26->20 26->20 26->20 26->20 26->20 27->24 28->1 28->26 28->26 29->23 29->23 29->23 29->23 29->23
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; void main ( void ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int printf ( char const * format , ... ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; int binary ( int * a , int n , int m , int l , int u ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { } } } void megaInit ( void ) { { } } int binary ( int * a , int n , int m , int l , int u ) { int mid ; int c ; int tmp ; int tmp___0 ; { c = 0 ; if ( l <= u ) { mid = ( l + u ) / 2 ; if ( m == * ( a + mid ) ) { c = 1 ; } else if ( m < * ( a + mid ) ) { tmp = binary ( a , n , m , l , mid - 1 ) ; return ( tmp ) ; } else { tmp___0 = binary ( a , n , m , mid + 1 , u ) ; return ( tmp___0 ) ; } } else { return ( c ) ; } return ( 0 ) ; } } void main ( void ) { { megaInit ( ) ; } }
>>>Func
METHOD _1_stringEncoder
METHOD_RETURN void
PARAM int n
PARAM char str[]
BLOCK <empty> <empty>
<operator>.assignment encodeStrings_i3 = 0
IDENTIFIER n switch(n)
LITERAL 1 <empty>
<operator>.assignment str[encodeStrings_i3] = 'i'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'f'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '-'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '2'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '-'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'l'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'o'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 0 <empty>
<operator>.assignment str[encodeStrings_i3] = 'i'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'f'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '-'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '2'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '-'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'w'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'i'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
>>>PDG&51 0->2 0->3 0->4 0->5 0->6 0->7 0->8 0->9 0->10 0->11 0->12 0->13 0->14 0->15 0->16 0->17 0->18 0->19 0->20 0->21 0->22 0->23 0->24 0->25 0->26 0->27 0->28 0->29 0->30 0->31 0->32 0->33 0->34 0->35 0->36 0->37 0->38 0->39 0->40 0->41 0->42 0->43 0->44 0->45 0->46 0->47 0->48 0->49 0->50 2->1 3->1 5->1 5->1 5->9 5->32 8->1 9->11 10->1 11->13 13->15 14->1 15->17 16->1 17->19 18->1 19->21 20->1 21->23 22->1 23->25 24->1 25->27 26->1 27->29 28->1 28->1 29->1 29->1 32->34 33->1 34->36 36->38 37->1 38->40 39->1 40->42 41->1 42->44 43->1 44->46 45->1 46->48 47->1 48->50 49->1 49->1 50->1 50->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; char * * _global_argv = ( char * * ) 0 ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern int raise ( int sig ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; int main ( int argc , char * * argv , char * * _formal_envp ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void encodeStrings_litStr0_i $ nit ( void ) ; int _global_argc = 0 ; void megaInit ( void ) ; char * * _global_envp = ( char * * ) 0 ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int ( /* missing proto */ printf ) ( ) ; extern int scanf ( char const * format , ... ) ; extern void perror ( char const * str ) ; extern long clock ( void ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern float strtof ( char const * str , char const * endptr ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern double strtod ( char const * str , char const * endptr ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; void encodeStrings_litStr1_i $ nit ( void ) ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; char encodeStrings_litStr1 [ 11 ] ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; char encodeStrings_litStr0 [ 10 ] ; void megaInit ( void ) { { encodeStrings_litStr1_i $ nit ( ) ; encodeStrings_litStr0_i $ nit ( ) ; } } void encodeStrings_litStr0_i $ nit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { case 1 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 0 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; } } } int main ( int argc , char * * argv , char * * _formal_envp ) { unsigned char x ; unsigned char c ; int _BARRIER_0 ; { megaInit ( ) ; _global_argc = argc ; _global_argv = argv ; _global_envp = _formal_envp ; _BARRIER_0 = 1 ; c = ( unsigned char ) * ( * ( argv + 1 ) + 0 ) ; if ( ( int ) c > 127 ) { x = ( unsigned char ) ( ( int ) c / 3 ) ; } else { x = ( unsigned char ) ( ( int ) c * 2 ) ; } if ( ( int ) x == 63 ) { _1_stringEncoder ( 0 , encodeStrings_litStr0 ) ; printf ( encodeStrings_litStr0 ) ; } else { _1_stringEncoder ( 1 , encodeStrings_litStr1 ) ; printf ( encodeStrings_litStr1 ) ; } return ( 0 ) ; } } void encodeStrings_litStr1_i $ nit ( void ) { { } }
>>>Func
METHOD retrieve_index_from_hash
METHOD_RETURN unsigned int
PARAM long long const   hash
PARAM unsigned int const   capacity
RETURN return ((unsigned int )((long long const   )(capacity - 1U) & (hash ^ (hash >> 12)))); return ((unsigned int )((long long const   )(capacity - 1U) & (hash ^ (hash >> 12))));
<operator>.cast (unsigned int )((long long const   )(capacity - 1U) & (hash ^ (hash >> 12)))
<operator>.and (long long const   )(capacity - 1U) & (hash ^ (hash >> 12))
<operator>.cast (long long const   )(capacity - 1U)
<operator>.xor hash ^ (hash >> 12)
<operator>.subtraction capacity - 1U
<operator>.arithmeticShiftRight hash >> 12
>>>PDG&11 0->2 0->3 0->8 0->9 0->10 2->10 3->9 4->1 5->1 5->1 5->4 6->1 6->1 6->5 6->5 7->1 8->1 8->1 8->6 8->6 9->1 9->6 9->6 9->7 9->7 10->8 10->8
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; void main ( void ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int printf ( char const * format , ... ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; unsigned int retrieve_index_from_hash ( long long const hash , unsigned int const capacity ) ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; unsigned int retrieve_index_from_hash ( long long const hash , unsigned int const capacity ) { { return ( ( unsigned int ) ( ( long long const ) ( capacity - 1U ) & ( hash ^ ( hash >> 12 ) ) ) ) ; } } void megaInit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { } } } void main ( void ) { { megaInit ( ) ; } }
>>>Func
METHOD _1_stringEncoder
METHOD_RETURN void
PARAM int n
PARAM char str[]
BLOCK <empty> <empty>
<operator>.assignment encodeStrings_i3 = 0
IDENTIFIER n switch(n)
LITERAL 0 <empty>
<operator>.assignment str[encodeStrings_i3] = 'S'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'u'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'm'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'i'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ':'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
>>>PDG&32 0->2 0->3 0->4 0->5 0->6 0->7 0->8 0->9 0->10 0->11 0->12 0->13 0->14 0->15 0->16 0->17 0->18 0->19 0->20 0->21 0->22 0->23 0->24 0->25 0->26 0->27 0->28 0->29 0->30 0->31 2->1 3->1 5->1 5->1 5->9 8->1 9->11 10->1 11->13 12->1 13->15 15->17 16->1 17->19 18->1 19->21 20->1 21->23 22->1 23->25 24->1 25->27 26->1 27->29 28->1 29->31 30->1 30->1 31->1 31->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; char * * _global_argv = ( char * * ) 0 ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; int main ( int argc , char * * argv , char * * _formal_envp ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; void encodeStrings_litStr0_i $ nit ( void ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; int _global_argc = 0 ; void megaInit ( void ) ; char * * _global_envp = ( char * * ) 0 ; extern int ( /* missing proto */ printf ) ( ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; char encodeStrings_litStr0 [ 12 ] ; void megaInit ( void ) { { encodeStrings_litStr0_i $ nit ( ) ; } } void encodeStrings_litStr0_i $ nit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { case 0 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; } } } int main ( int argc , char * * argv , char * * _formal_envp ) { int i ; int sum ; int _BARRIER_0 ; { megaInit ( ) ; _global_argc = argc ; _global_argv = argv ; _global_envp = _formal_envp ; _BARRIER_0 = 1 ; sum = 0 ; if ( ( int ) * ( * ( argv + 1 ) + 0 ) > 127 ) { sum ++ ; } i = 0 ; while ( i < argc ) { sum += i ; i ++ ; } _1_stringEncoder ( 0 , encodeStrings_litStr0 ) ; printf ( encodeStrings_litStr0 , sum ) ; return ( 0 ) ; } }
>>>Func
METHOD adaline_activation
METHOD_RETURN int
PARAM double x
RETURN return (tmp); return (tmp);
<operator>.greaterThan x > (double )0
IDENTIFIER tmp return (tmp);
<operator>.assignment tmp = 1
<operator>.cast (double )0
<operator>.assignment tmp = -1
<operator>.minus -1
>>>PDG&10 0->2 0->4 0->5 0->6 0->7 0->9 2->4 3->1 4->1 4->1 4->1 4->6 4->8 4->9 5->3 6->1 6->1 6->5 8->1 8->1 8->1 8->5 9->8
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; int adaline_activation ( double x ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; void main ( void ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int printf ( char const * format , ... ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { } } } void megaInit ( void ) { { } } int adaline_activation ( double x ) { int tmp ; { if ( x > ( double ) 0 ) { tmp = 1 ; } else { tmp = -1 ; } return ( tmp ) ; } } void main ( void ) { { megaInit ( ) ; } }
>>>Func
METHOD _1_stringEncoder
METHOD_RETURN void
PARAM int n
PARAM char str[]
BLOCK <empty> <empty>
<operator>.assignment encodeStrings_i3 = 0
IDENTIFIER n switch(n)
LITERAL 5 <empty>
<operator>.assignment str[encodeStrings_i3] = 'S'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'o'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'y'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ':'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 4 <empty>
<operator>.assignment str[encodeStrings_i3] = 'O'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'i'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'g'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'i'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'l'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'y'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ':'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 3 <empty>
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 2 <empty>
<operator>.assignment str[encodeStrings_i3] = 'E'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'h'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'l'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'm'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'o'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'f'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'h'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'y'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 1 <empty>
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 0 <empty>
<operator>.assignment str[encodeStrings_i3] = 'E'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'i'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'z'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'o'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'f'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'y'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ':'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
>>>PDG&199 0->2 0->3 0->4 0->5 0->6 0->7 0->8 0->9 0->10 0->11 0->12 0->13 0->14 0->15 0->16 0->17 0->18 0->19 0->20 0->21 0->22 0->23 0->24 0->25 0->26 0->27 0->28 0->29 0->30 0->31 0->32 0->33 0->34 0->35 0->36 0->37 0->38 0->39 0->40 0->41 0->42 0->43 0->44 0->45 0->46 0->47 0->48 0->49 0->50 0->51 0->52 0->53 0->54 0->55 0->56 0->57 0->58 0->59 0->60 0->61 0->62 0->63 0->64 0->65 0->66 0->67 0->68 0->69 0->70 0->71 0->72 0->73 0->74 0->75 0->76 0->77 0->78 0->79 0->80 0->81 0->82 0->83 0->84 0->85 0->86 0->87 0->88 0->89 0->90 0->91 0->92 0->93 0->94 0->95 0->96 0->97 0->98 0->99 0->100 0->101 0->102 0->103 0->104 0->105 0->106 0->107 0->108 0->109 0->110 0->111 0->112 0->113 0->114 0->115 0->116 0->117 0->118 0->119 0->120 0->121 0->122 0->123 0->124 0->125 0->126 0->127 0->128 0->129 0->130 0->131 0->132 0->133 0->134 0->135 0->136 0->137 0->138 0->139 0->140 0->141 0->142 0->143 0->144 0->145 0->146 0->147 0->148 0->149 0->150 0->151 0->152 0->153 0->154 0->155 0->156 0->157 0->158 0->159 0->160 0->161 0->162 0->163 0->164 0->165 0->166 0->167 0->168 0->169 0->170 0->171 0->172 0->173 0->174 0->175 0->176 0->177 0->178 0->179 0->180 0->181 0->182 0->183 0->184 0->185 0->186 0->187 0->188 0->189 0->190 0->191 0->192 0->193 0->194 0->195 0->196 0->197 0->198 2->1 3->1 5->1 5->1 5->9 5->40 5->75 5->82 5->149 5->156 8->1 9->11 10->1 11->13 13->15 14->1 15->17 16->1 17->19 18->1 19->21 21->23 23->25 25->27 26->1 27->29 28->1 29->31 30->1 31->33 32->1 33->35 34->1 35->37 36->1 36->1 37->1 37->1 39->1 40->42 42->44 44->46 45->1 46->48 47->1 48->50 49->1 50->52 52->54 53->1 54->56 56->58 58->60 60->62 61->1 62->64 63->1 64->66 65->1 66->68 67->1 68->70 69->1 70->72 71->1 71->1 72->1 72->1 74->1 75->77 76->1 77->79 78->1 78->1 79->1 79->1 81->1 82->84 84->86 86->88 88->90 90->92 92->94 94->96 96->98 98->100 100->102 102->104 103->1 104->106 106->108 107->1 108->110 110->112 111->1 112->114 114->116 115->1 116->118 118->120 119->1 120->122 121->1 122->124 124->126 125->1 126->128 127->1 128->130 129->1 130->132 131->1 132->134 134->136 136->138 137->1 138->140 139->1 140->142 141->1 142->144 143->1 144->146 145->1 145->1 146->1 146->1 148->1 149->151 150->1 151->153 152->1 152->1 153->1 153->1 155->1 156->158 157->1 158->160 159->1 160->162 162->164 164->166 166->168 167->1 168->170 169->1 170->172 171->1 172->174 173->1 174->176 176->178 177->1 178->180 179->1 180->182 181->1 182->184 184->186 186->188 187->1 188->190 189->1 190->192 191->1 192->194 193->1 194->196 195->1 196->198 197->1 197->1 198->1 198->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; char * * _global_argv = ( char * * ) 0 ; extern int fcntl ( int filedes , int cmd , ... ) ; void encodeStrings_litStr2_i $ nit ( void ) ; extern int unlink ( char const * filename ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int pthread_mutex_lock ( int * mutex ) ; void encodeStrings_litStr5_i $ nit ( void ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern int ( /* missing proto */ malloc ) ( ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern double ceil ( double x ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern int ( /* missing proto */ free ) ( ) ; extern unsigned long strlen ( char const * s ) ; int main ( int argc , char const * * argv , char * * _formal_envp ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; void encodeStrings_litStr0_i $ nit ( void ) ; int _global_argc = 0 ; void megaInit ( void ) ; char * * _global_envp = ( char * * ) 0 ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; void encodeStrings_litStr3_i $ nit ( void ) ; extern int ( /* missing proto */ printf ) ( ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern int ( /* missing proto */ scanf ) ( ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern double strtod ( char const * str , char const * endptr ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int ( /* missing proto */ insertionSort ) ( ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; void encodeStrings_litStr1_i $ nit ( void ) ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; void encodeStrings_litStr4_i $ nit ( void ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; char encodeStrings_litStr5 [ 15 ] ; extern int ( /* missing proto */ display ) ( ) ; extern int open ( char const * filename , int oflag , ... ) ; char encodeStrings_litStr4 [ 17 ] ; extern double sqrt ( double x ) ; char encodeStrings_litStr3 [ 3 ] ; char encodeStrings_litStr2 [ 33 ] ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; char encodeStrings_litStr1 [ 3 ] ; char encodeStrings_litStr0 [ 22 ] ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; void encodeStrings_litStr2_i $ nit ( void ) { { } } void encodeStrings_litStr3_i $ nit ( void ) { { } } void encodeStrings_litStr1_i $ nit ( void ) { { } } void encodeStrings_litStr0_i $ nit ( void ) { { } } int main ( int argc , char const * * argv , char * * _formal_envp ) { int n ; int i ; int * arr ; int tmp ; int _BARRIER_0 ; { megaInit ( ) ; _global_argc = argc ; _global_argv = argv ; _global_envp = _formal_envp ; _BARRIER_0 = 1 ; _1_stringEncoder ( 0 , encodeStrings_litStr0 ) ; printf ( encodeStrings_litStr0 ) ; _1_stringEncoder ( 1 , encodeStrings_litStr1 ) ; scanf ( encodeStrings_litStr1 , & n ) ; _1_stringEncoder ( 2 , encodeStrings_litStr2 ) ; printf ( encodeStrings_litStr2 ) ; tmp = malloc ( ( unsigned long ) n * 4UL ) ; arr = ( int * ) tmp ; i = 0 ; while ( i < n ) { _1_stringEncoder ( 3 , encodeStrings_litStr3 ) ; scanf ( encodeStrings_litStr3 , arr + i ) ; i ++ ; } _1_stringEncoder ( 4 , encodeStrings_litStr4 ) ; printf ( encodeStrings_litStr4 ) ; display ( arr , n ) ; insertionSort ( arr , n ) ; _1_stringEncoder ( 5 , encodeStrings_litStr5 ) ; printf ( encodeStrings_litStr5 ) ; display ( arr , n ) ; free ( arr ) ; return ( 0 ) ; } } void encodeStrings_litStr4_i $ nit ( void ) { { } } void megaInit ( void ) { { encodeStrings_litStr5_i $ nit ( ) ; encodeStrings_litStr4_i $ nit ( ) ; encodeStrings_litStr3_i $ nit ( ) ; encodeStrings_litStr2_i $ nit ( ) ; encodeStrings_litStr1_i $ nit ( ) ; encodeStrings_litStr0_i $ nit ( ) ; } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { case 5 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 4 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 3 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 2 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 1 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 0 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; } } } void encodeStrings_litStr5_i $ nit ( void ) { { } }
>>>Func
METHOD power
METHOD_RETURN int
PARAM int x
PARAM unsigned int y
<operator>.assignment tmp___1 = power(x, y / 2U)
<operator>.assignment tmp___2 = power(x, y / 2U)
RETURN return ((x * tmp___1) * tmp___2); return ((x * tmp___1) * tmp___2);
<operator>.equals y == 0U
<operator>.equals y % 2U == 0U
<operator>.multiplication (x * tmp___1) * tmp___2
RETURN return (1); return (1);
<operator>.assignment tmp = power(x, y / 2U)
<operator>.assignment tmp___0 = power(x, y / 2U)
RETURN return (tmp * tmp___0); return (tmp * tmp___0);
power power(x, y / 2U)
power power(x, y / 2U)
LITERAL 1 return (1);
<operator>.modulo y % 2U
<operator>.multiplication tmp * tmp___0
<operator>.division y / 2U
<operator>.division y / 2U
<operator>.multiplication x * tmp___1
power power(x, y / 2U)
power power(x, y / 2U)
<operator>.division y / 2U
<operator>.division y / 2U
>>>PDG&26 0->2 0->3 0->7 0->8 0->9 0->10 0->14 0->15 0->16 0->17 0->18 0->19 0->20 0->21 0->22 0->23 0->24 0->25 2->1 2->14 2->22 3->7 4->21 5->9 6->1 7->1 7->1 7->8 7->10 7->17 7->17 8->4 8->5 8->6 8->9 8->11 8->12 8->13 8->14 8->15 8->18 8->19 8->20 8->21 8->22 8->23 8->24 8->25 9->6 10->1 11->18 12->18 13->1 14->4 14->4 14->15 15->5 15->5 15->21 16->10 17->8 17->8 17->19 17->24 18->13 19->14 19->14 19->20 20->15 20->15 21->9 21->9 22->11 22->11 22->23 23->12 23->12 24->22 24->22 24->25 25->23 25->23
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; void main ( void ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int printf ( char const * format , ... ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; int power ( int x , unsigned int y ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; int power ( int x , unsigned int y ) { int tmp ; int tmp___0 ; int tmp___1 ; int tmp___2 ; { if ( y == 0U ) { return ( 1 ) ; } if ( y % 2U == 0U ) { tmp = power ( x , y / 2U ) ; tmp___0 = power ( x , y / 2U ) ; return ( tmp * tmp___0 ) ; } tmp___1 = power ( x , y / 2U ) ; tmp___2 = power ( x , y / 2U ) ; return ( ( x * tmp___1 ) * tmp___2 ) ; } } void megaInit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { } } } void main ( void ) { { megaInit ( ) ; } }
>>>Func
METHOD _1_stringEncoder
METHOD_RETURN void
PARAM int n
PARAM char str[]
BLOCK <empty> <empty>
<operator>.assignment encodeStrings_i3 = 0
IDENTIFIER n switch(n)
LITERAL 3 <empty>
<operator>.assignment str[encodeStrings_i3] = 'i'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'f'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '-'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '1'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '-'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'l'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'o'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 2 <empty>
<operator>.assignment str[encodeStrings_i3] = 'i'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'f'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '-'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '2'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '-'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'l'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'o'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 1 <empty>
<operator>.assignment str[encodeStrings_i3] = 'i'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'f'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '-'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '2'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '-'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'w'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'i'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 0 <empty>
<operator>.assignment str[encodeStrings_i3] = 'i'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'f'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '-'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '1'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '-'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'w'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'i'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
>>>PDG&95 0->2 0->3 0->4 0->5 0->6 0->7 0->8 0->9 0->10 0->11 0->12 0->13 0->14 0->15 0->16 0->17 0->18 0->19 0->20 0->21 0->22 0->23 0->24 0->25 0->26 0->27 0->28 0->29 0->30 0->31 0->32 0->33 0->34 0->35 0->36 0->37 0->38 0->39 0->40 0->41 0->42 0->43 0->44 0->45 0->46 0->47 0->48 0->49 0->50 0->51 0->52 0->53 0->54 0->55 0->56 0->57 0->58 0->59 0->60 0->61 0->62 0->63 0->64 0->65 0->66 0->67 0->68 0->69 0->70 0->71 0->72 0->73 0->74 0->75 0->76 0->77 0->78 0->79 0->80 0->81 0->82 0->83 0->84 0->85 0->86 0->87 0->88 0->89 0->90 0->91 0->92 0->93 0->94 2->1 3->1 5->1 5->1 5->9 5->32 5->55 5->76 8->1 9->11 10->1 11->13 13->15 14->1 15->17 16->1 17->19 18->1 19->21 20->1 21->23 22->1 23->25 24->1 25->27 26->1 27->29 28->1 28->1 29->1 29->1 31->1 32->34 33->1 34->36 36->38 37->1 38->40 39->1 40->42 41->1 42->44 43->1 44->46 45->1 46->48 47->1 48->50 49->1 50->52 51->1 51->1 52->1 52->1 55->57 56->1 57->59 59->61 60->1 61->63 62->1 63->65 64->1 65->67 66->1 67->69 68->1 69->71 70->1 71->73 72->1 72->1 73->1 73->1 76->78 77->1 78->80 80->82 81->1 82->84 83->1 84->86 85->1 86->88 87->1 88->90 89->1 90->92 91->1 92->94 93->1 93->1 94->1 94->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern void exit ( int status ) ; extern int pthread_cond_signal ( int * cond ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; char * * _global_argv = ( char * * ) 0 ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; void encodeStrings_litStr2_i $ nit ( void ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int pthread_mutex_lock ( int * mutex ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; int main ( int argc , char * * argv , char * * _formal_envp ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; void encodeStrings_litStr0_i $ nit ( void ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; int _global_argc = 0 ; void megaInit ( void ) ; char * * _global_envp = ( char * * ) 0 ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; void encodeStrings_litStr3_i $ nit ( void ) ; extern int ( /* missing proto */ printf ) ( ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; void encodeStrings_litStr1_i $ nit ( void ) ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; char encodeStrings_litStr3 [ 11 ] ; char encodeStrings_litStr2 [ 11 ] ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; char encodeStrings_litStr1 [ 10 ] ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; char encodeStrings_litStr0 [ 10 ] ; void encodeStrings_litStr0_i $ nit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { case 3 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 2 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 1 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 0 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; } } } void encodeStrings_litStr1_i $ nit ( void ) { { } } void megaInit ( void ) { { encodeStrings_litStr3_i $ nit ( ) ; encodeStrings_litStr2_i $ nit ( ) ; encodeStrings_litStr1_i $ nit ( ) ; encodeStrings_litStr0_i $ nit ( ) ; } } void encodeStrings_litStr3_i $ nit ( void ) { { } } void encodeStrings_litStr2_i $ nit ( void ) { { } } int main ( int argc , char * * argv , char * * _formal_envp ) { unsigned char c ; int _BARRIER_0 ; { megaInit ( ) ; _global_argc = argc ; _global_argv = argv ; _global_envp = _formal_envp ; _BARRIER_0 = 1 ; c = ( unsigned char ) * ( * ( argv + 1 ) + 0 ) ; if ( ( int ) c > 63 ) { _1_stringEncoder ( 0 , encodeStrings_litStr0 ) ; printf ( encodeStrings_litStr0 ) ; if ( ( int ) c > 127 ) { _1_stringEncoder ( 1 , encodeStrings_litStr1 ) ; printf ( encodeStrings_litStr1 ) ; } else { _1_stringEncoder ( 2 , encodeStrings_litStr2 ) ; printf ( encodeStrings_litStr2 ) ; } } else { _1_stringEncoder ( 3 , encodeStrings_litStr3 ) ; printf ( encodeStrings_litStr3 ) ; } return ( 0 ) ; } }
>>>Func
METHOD sort0
METHOD_RETURN int
PARAM void const   *data1
PARAM void const   *data2
<operator>.assignment I1 = (double *)data1
<operator>.assignment I2 = (double *)data2
RETURN return (0); return (0);
<operator>.greaterThan *(I1 + 0) > *(I2 + 0)
<operator>.lessThan *(I1 + 0) < *(I2 + 0)
LITERAL 0 return (0);
<operator>.cast (double *)data1
<operator>.cast (double *)data2
RETURN return (1); return (1);
RETURN return (-1); return (-1);
LITERAL 1 return (1);
<operator>.minus -1
<operator>.addition I1 + 0
<operator>.addition I2 + 0
<operator>.addition I1 + 0
<operator>.addition I2 + 0
<operator>.indirection *(I1 + 0)
<operator>.indirection *(I2 + 0)
>>>PDG&22 0->2 0->3 0->4 0->5 0->6 0->9 0->10 0->11 0->12 0->14 0->15 0->16 0->17 0->18 0->19 2->4 2->10 3->5 3->11 4->1 4->1 4->16 4->18 5->1 5->1 5->17 5->19 6->1 7->1 7->1 7->1 7->8 7->12 7->18 7->19 7->20 7->21 8->6 8->13 8->15 9->6 10->1 11->1 12->1 13->1 14->12 15->13 16->1 17->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; int sort0 ( void const * data1 , void const * data2 ) ; extern unsigned long strlen ( char const * s ) ; void main ( void ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int printf ( char const * format , ... ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; int sort0 ( void const * data1 , void const * data2 ) { double * I1 ; double * I2 ; { I1 = ( double * ) data1 ; I2 = ( double * ) data2 ; if ( * ( I1 + 0 ) > * ( I2 + 0 ) ) { return ( 1 ) ; } if ( * ( I1 + 0 ) < * ( I2 + 0 ) ) { return ( -1 ) ; } return ( 0 ) ; } } void megaInit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { } } } void main ( void ) { { megaInit ( ) ; } }
>>>Func
METHOD max
METHOD_RETURN int
PARAM int *freq
PARAM int L
<operator>.assignment m = *(freq + 0)
<operator>.assignment i = 0
<operator>.assignment i = 0
RETURN return (m); return (m);
<operator>.lessThan i < L
<operator>.lessThan i < L
IDENTIFIER m return (m);
<operator>.postIncrement i ++
<operator>.postIncrement i ++
<operator>.addition freq + 0
<operator>.lessThan m < *(freq + i)
<operator>.equals m - *(freq + i) == 0
<operator>.assignment m = *(freq + i)
<operator>.assignment *(freq + i) = 0
<operator>.subtraction m - *(freq + i)
<operator>.addition freq + i
<operator>.addition freq + i
<operator>.addition freq + i
<operator>.addition freq + i
<operator>.indirection *(freq + i)
<operator>.indirection *(freq + i)
<operator>.indirection *(freq + i)
<operator>.indirection *(freq + i)
>>>PDG&27 0->2 0->3 0->5 0->6 0->8 0->9 0->10 0->11 0->12 0->13 0->14 0->15 0->17 0->18 0->19 0->20 0->21 0->22 2->13 2->19 2->21 2->22 3->8 4->1 4->1 4->1 4->10 4->14 4->18 5->8 6->1 6->9 7->1 8->8 8->9 8->11 8->11 8->14 8->19 8->19 8->20 8->23 9->1 9->1 9->1 9->12 9->15 9->18 9->21 9->21 9->22 9->25 10->7 11->1 11->8 12->1 12->9 13->1 14->1 14->1 14->1 14->10 14->16 14->18 14->20 14->24 15->1 15->1 15->9 15->12 15->17 15->22 15->26 16->1 16->1 16->1 16->10 16->14 16->18 17->1 17->1 18->1 18->1 18->10 18->15 18->15 19->1 20->1 21->1 22->1 22->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; void main ( void ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int printf ( char const * format , ... ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; int max ( int * freq , int L ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { } } } void megaInit ( void ) { { } } int max ( int * freq , int L ) { int i ; int m ; { m = * ( freq + 0 ) ; i = 0 ; while ( i < L ) { if ( m < * ( freq + i ) ) { m = * ( freq + i ) ; } i ++ ; } i = 0 ; while ( i < L ) { if ( m - * ( freq + i ) == 0 ) { * ( freq + i ) = 0 ; break ; } i ++ ; } return ( m ) ; } } void main ( void ) { { megaInit ( ) ; } }
>>>Func
METHOD SDBMHash
METHOD_RETURN unsigned int
PARAM char *str
PARAM unsigned int len
<operator>.assignment hash = 0U
<operator>.assignment i = 0U
<operator>.assignment i = 0U
RETURN return (hash); return (hash);
<operator>.lessThan i < len
IDENTIFIER hash return (hash);
<operator>.assignment hash = (((unsigned int )*str + (hash << 6)) + (hash << 16)) - hash
<operator>.postIncrement str ++
<operator>.postIncrement i ++
<operator>.subtraction (((unsigned int )*str + (hash << 6)) + (hash << 16)) - hash
<operator>.addition ((unsigned int )*str + (hash << 6)) + (hash << 16)
<operator>.addition (unsigned int )*str + (hash << 6)
<operator>.shiftLeft hash << 16
<operator>.cast (unsigned int )*str
<operator>.shiftLeft hash << 6
UNKNOWN unsigned int unsigned int
<operator>.indirection *str
>>>PDG&21 0->2 0->3 0->4 0->5 0->6 0->8 0->9 0->11 0->12 0->13 0->16 0->18 2->1 2->11 3->8 4->1 4->1 4->9 4->18 6->1 6->8 7->1 8->1 8->1 8->1 8->8 8->10 8->11 8->12 8->12 8->13 8->14 8->15 8->16 8->17 8->18 8->19 8->20 9->7 10->1 10->1 10->1 10->9 10->18 11->1 11->1 12->1 12->8 13->1 13->10 13->10 14->1 14->1 15->1 15->1 16->13 16->13 16->14 16->14 17->1 18->13 18->13 18->14 18->14 18->15 18->15 18->16
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; void main ( void ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int printf ( char const * format , ... ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; unsigned int SDBMHash ( char * str , unsigned int len ) ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { } } } void megaInit ( void ) { { } } unsigned int SDBMHash ( char * str , unsigned int len ) { unsigned int hash ; unsigned int i ; { hash = 0U ; i = 0U ; i = 0U ; while ( i < len ) { hash = ( ( ( unsigned int ) * str + ( hash << 6 ) ) + ( hash << 16 ) ) - hash ; str ++ ; i ++ ; } return ( hash ) ; } } void main ( void ) { { megaInit ( ) ; } }
>>>Func
METHOD stringConcat
METHOD_RETURN void
PARAM char *str1
PARAM char *str2
<operator>.assignment i = 0
<operator>.assignment j = 0
<operator>.assignment *(str1 + i) = (char )'\000'
RETURN return; return;
<operator>.notEquals (int )*(str1 + i) != 0
<operator>.notEquals (int )*(str2 + j) != 0
<operator>.postIncrement i ++
<operator>.assignment *(str1 + i) = *(str2 + j)
<operator>.postIncrement i ++
<operator>.postIncrement j ++
<operator>.cast (char )'\000'
<operator>.cast (int )*(str2 + j)
<operator>.addition str1 + i
<operator>.addition str1 + i
<operator>.addition str2 + j
<operator>.addition str1 + i
<operator>.addition str2 + j
<operator>.cast (int )*(str1 + i)
UNKNOWN int int
<operator>.indirection *(str1 + i)
UNKNOWN int int
<operator>.indirection *(str2 + j)
<operator>.indirection *(str1 + i)
<operator>.indirection *(str2 + j)
>>>PDG&28 0->2 0->3 0->4 0->5 0->6 0->7 0->8 0->9 0->10 0->12 0->13 0->14 0->16 0->17 0->18 0->19 0->20 2->16 2->17 2->19 3->18 4->1 4->10 4->12 4->16 4->17 4->19 5->1 5->13 5->18 5->20 6->1 6->1 6->1 7->1 8->1 8->1 8->8 8->10 8->17 8->21 8->22 8->23 9->1 9->1 9->9 9->11 9->12 9->13 9->15 9->18 9->19 9->20 9->24 9->25 9->26 9->27 10->1 10->12 10->16 10->17 10->19 11->1 12->1 12->16 12->19 13->1 13->18 13->20 15->1 16->1 16->1 18->1 18->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; void main ( void ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int printf ( char const * format , ... ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; void stringConcat ( char * str1 , char * str2 ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { } } } void megaInit ( void ) { { } } void stringConcat ( char * str1 , char * str2 ) { int i ; int j ; { i = 0 ; j = 0 ; while ( ( int ) * ( str1 + i ) != 0 ) { i ++ ; } while ( ( int ) * ( str2 + j ) != 0 ) { * ( str1 + i ) = * ( str2 + j ) ; i ++ ; j ++ ; } * ( str1 + i ) = ( char ) ' \000 ' ; return ; } } void main ( void ) { { megaInit ( ) ; } }
>>>Func
METHOD _1_stringEncoder
METHOD_RETURN void
PARAM int n
PARAM char str[]
BLOCK <empty> <empty>
<operator>.assignment encodeStrings_i3 = 0
IDENTIFIER n switch(n)
LITERAL 1 <empty>
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 0 <empty>
<operator>.assignment str[encodeStrings_i3] = 'E'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'q'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'u'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'i'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'v'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'l'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'o'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'c'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'l'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'v'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'l'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'u'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'o'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'f'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'c'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'i'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'm'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'l'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'u'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'm'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'b'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ':'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
>>>PDG&109 0->2 0->3 0->4 0->5 0->6 0->7 0->8 0->9 0->10 0->11 0->12 0->13 0->14 0->15 0->16 0->17 0->18 0->19 0->20 0->21 0->22 0->23 0->24 0->25 0->26 0->27 0->28 0->29 0->30 0->31 0->32 0->33 0->34 0->35 0->36 0->37 0->38 0->39 0->40 0->41 0->42 0->43 0->44 0->45 0->46 0->47 0->48 0->49 0->50 0->51 0->52 0->53 0->54 0->55 0->56 0->57 0->58 0->59 0->60 0->61 0->62 0->63 0->64 0->65 0->66 0->67 0->68 0->69 0->70 0->71 0->72 0->73 0->74 0->75 0->76 0->77 0->78 0->79 0->80 0->81 0->82 0->83 0->84 0->85 0->86 0->87 0->88 0->89 0->90 0->91 0->92 0->93 0->94 0->95 0->96 0->97 0->98 0->99 0->100 0->101 0->102 0->103 0->104 0->105 0->106 0->107 0->108 2->1 3->1 5->1 5->1 5->9 5->16 8->1 9->11 10->1 11->13 12->1 12->1 13->1 13->1 15->1 16->18 17->1 18->20 20->22 22->24 24->26 26->28 28->30 30->32 32->34 34->36 36->38 38->40 40->42 41->1 42->44 44->46 46->48 48->50 49->1 50->52 52->54 54->56 56->58 58->60 60->62 61->1 62->64 63->1 64->66 66->68 68->70 70->72 71->1 72->74 73->1 74->76 76->78 77->1 78->80 79->1 80->82 82->84 83->1 84->86 85->1 86->88 87->1 88->90 89->1 90->92 91->1 92->94 93->1 94->96 96->98 97->1 98->100 99->1 100->102 101->1 102->104 103->1 104->106 105->1 106->108 107->1 107->1 108->1 108->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; char * * _global_argv = ( char * * ) 0 ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern int raise ( int sig ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; int main ( int argc , char * * argv , char * * _formal_envp ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void encodeStrings_litStr0_i $ nit ( void ) ; int _global_argc = 0 ; void megaInit ( void ) ; char * * _global_envp = ( char * * ) 0 ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int ( /* missing proto */ printf ) ( ) ; extern int scanf ( char const * format , ... ) ; extern void perror ( char const * str ) ; extern long clock ( void ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern float strtof ( char const * str , char const * endptr ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern double strtod ( char const * str , char const * endptr ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; void encodeStrings_litStr1_i $ nit ( void ) ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; char encodeStrings_litStr1 [ 3 ] ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; char encodeStrings_litStr0 [ 47 ] ; void megaInit ( void ) { { encodeStrings_litStr1_i $ nit ( ) ; encodeStrings_litStr0_i $ nit ( ) ; } } void encodeStrings_litStr0_i $ nit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { case 1 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 0 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; } } } int main ( int argc , char * * argv , char * * _formal_envp ) { long decimalNumber ; long quotient ; int octalNumber [ 100 ] ; int i ; int j ; int tmp ; int _BARRIER_0 ; { megaInit ( ) ; _global_argc = argc ; _global_argv = argv ; _global_envp = _formal_envp ; _BARRIER_0 = 1 ; if ( argc < 2 ) { return ( 1 ) ; } i = 1 ; decimalNumber = ( long ) ( ( int ) * ( * ( argv + 1 ) + 0 ) ) ; quotient = decimalNumber ; while ( quotient != 0L ) { tmp = i ; i ++ ; octalNumber [ tmp ] = ( int ) ( quotient % 8L ) ; quotient /= 8L ; } _1_stringEncoder ( 0 , encodeStrings_litStr0 ) ; printf ( encodeStrings_litStr0 , decimalNumber ) ; j = i - 1 ; while ( j > 0 ) { _1_stringEncoder ( 1 , encodeStrings_litStr1 ) ; printf ( encodeStrings_litStr1 , octalNumber [ j ] ) ; j -- ; } return ( 0 ) ; } } void encodeStrings_litStr1_i $ nit ( void ) { { } }
>>>Func
METHOD DEKHash
METHOD_RETURN unsigned int
PARAM char *str
PARAM unsigned int len
<operator>.assignment hash = len
<operator>.assignment i = 0U
<operator>.assignment i = 0U
RETURN return (hash); return (hash);
<operator>.lessThan i < len
IDENTIFIER hash return (hash);
<operator>.assignment hash = ((hash << 5) ^ (hash >> 27)) ^ (unsigned int )*str
<operator>.postIncrement str ++
<operator>.postIncrement i ++
<operator>.xor ((hash << 5) ^ (hash >> 27)) ^ (unsigned int )*str
<operator>.xor (hash << 5) ^ (hash >> 27)
<operator>.cast (unsigned int )*str
<operator>.shiftLeft hash << 5
<operator>.arithmeticShiftRight hash >> 27
UNKNOWN unsigned int unsigned int
<operator>.indirection *str
>>>PDG&20 0->2 0->3 0->4 0->5 0->6 0->8 0->9 0->11 0->12 0->16 0->17 2->1 2->11 3->4 3->8 4->1 4->1 4->9 4->16 6->1 6->8 7->1 8->1 8->1 8->1 8->8 8->10 8->11 8->12 8->12 8->13 8->14 8->15 8->16 8->17 8->18 8->19 9->7 10->1 10->1 10->1 10->9 10->16 11->1 11->1 12->1 12->8 13->1 13->1 13->10 13->10 14->1 14->1 14->13 14->13 15->1 16->14 16->14 16->17 17->14 17->14
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; unsigned int DEKHash ( char * str , unsigned int len ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; void main ( void ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int printf ( char const * format , ... ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; unsigned int DEKHash ( char * str , unsigned int len ) { unsigned int hash ; unsigned int i ; { hash = len ; i = 0U ; i = 0U ; while ( i < len ) { hash = ( ( hash << 5 ) ^ ( hash >> 27 ) ) ^ ( unsigned int ) * str ; str ++ ; i ++ ; } return ( hash ) ; } } void megaInit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { } } } void main ( void ) { { megaInit ( ) ; } }
>>>Func
METHOD maxcmp
METHOD_RETURN int
PARAM int a
PARAM int b
RETURN return (tmp); return (tmp);
<operator>.greaterEqualsThan a >= b
IDENTIFIER tmp return (tmp);
<operator>.assignment tmp = a
<operator>.assignment tmp = b
>>>PDG&9 0->2 0->3 0->5 0->6 0->7 0->8 2->5 3->5 4->1 5->1 5->1 5->1 5->7 5->7 5->8 5->8 6->4 7->1 7->1 7->1 7->6 8->1 8->1 8->1 8->6
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; int maxcmp ( int a , int b ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; void main ( void ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int printf ( char const * format , ... ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; int maxcmp ( int a , int b ) { int tmp ; { if ( a >= b ) { tmp = a ; } else { tmp = b ; } return ( tmp ) ; } } void megaInit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { } } } void main ( void ) { { megaInit ( ) ; } }
>>>Func
METHOD sort
METHOD_RETURN void
PARAM double *x
PARAM int len
<operator>.assignment k = 0
RETURN return; return;
<operator>.lessEqualsThan k <= len - 2
<operator>.assignment m = k
<operator>.assignment j = k + 1
<operator>.assignment hold = *(x + m)
<operator>.assignment *(x + m) = *(x + k)
<operator>.assignment *(x + k) = hold
<operator>.postIncrement k ++
<operator>.subtraction len - 2
<operator>.lessEqualsThan j <= len - 1
<operator>.addition k + 1
<operator>.postIncrement j ++
<operator>.subtraction len - 1
<operator>.greaterThan *(x + j) > *(x + m)
<operator>.addition x + m
<operator>.addition x + m
<operator>.addition x + k
<operator>.addition x + k
<operator>.assignment m = j
<operator>.addition x + j
<operator>.addition x + m
<operator>.indirection *(x + m)
<operator>.indirection *(x + m)
<operator>.indirection *(x + k)
<operator>.indirection *(x + k)
<operator>.indirection *(x + j)
<operator>.indirection *(x + m)
>>>PDG&32 0->2 0->3 0->4 0->5 0->6 0->7 0->8 0->11 0->12 0->13 0->14 0->15 0->16 0->17 0->19 0->20 0->21 0->22 0->23 0->24 0->25 2->1 2->19 2->24 2->25 3->13 4->1 4->6 5->1 6->1 6->1 6->1 6->6 6->7 6->7 6->8 6->8 6->9 6->10 6->11 6->12 6->12 6->13 6->14 6->15 6->15 6->17 6->19 6->20 6->21 6->21 6->22 6->22 6->26 6->27 6->28 6->29 7->1 7->19 7->20 7->25 8->1 8->1 8->14 9->1 9->11 10->1 10->1 11->1 11->1 11->1 12->1 12->6 13->1 13->6 13->6 13->17 14->1 14->1 14->1 14->14 14->16 14->16 14->17 14->18 14->23 14->24 14->24 14->25 14->30 14->31 16->1 16->14 17->13 17->14 17->14 18->1 18->1 18->23 20->1 22->1 23->1 23->19 23->20 23->25
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; void sort ( double * x , int len ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; void main ( void ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int printf ( char const * format , ... ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; void sort ( double * x , int len ) { int k ; int j ; int m ; double hold ; { k = 0 ; while ( k <= len - 2 ) { m = k ; j = k + 1 ; while ( j <= len - 1 ) { if ( * ( x + j ) > * ( x + m ) ) { m = j ; } j ++ ; } hold = * ( x + m ) ; * ( x + m ) = * ( x + k ) ; * ( x + k ) = hold ; k ++ ; } return ; } } void megaInit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { } } } void main ( void ) { { megaInit ( ) ; } }
>>>Func
METHOD countPalin
METHOD_RETURN int
PARAM char *s
PARAM int head
PARAM int tail
PARAM int len
<operator>.assignment ret = tmp
RETURN return (ret); return (ret);
<operator>.equals (int )*(s + head) == (int )*(s + tail)
IDENTIFIER ret if (ret)
IDENTIFIER ret return (ret);
<operator>.assignment tmp = 1
<operator>.cast (int )*(s + head)
<operator>.cast (int )*(s + tail)
<operator>.assignment tmp = 0
<operator>.greaterEqualsThan head - 1 >= 0
<operator>.addition s + head
<operator>.addition s + tail
<operator>.subtraction head - 1
<operator>.lessThan tail + 1 < len
<operator>.assignment tmp___0 = countPalin(s, head - 1, tail + 1, len)
<operator>.assignmentPlus ret += tmp___0
<operator>.addition tail + 1
countPalin countPalin(s, head - 1, tail + 1, len)
<operator>.subtraction head - 1
<operator>.addition tail + 1
>>>PDG&26 0->2 0->3 0->4 0->5 0->6 0->9 0->10 0->11 0->14 0->15 0->16 0->17 0->18 0->19 0->21 0->22 0->23 0->24 0->25 2->16 2->17 2->23 3->16 3->18 4->17 4->19 4->22 4->23 4->25 5->1 5->19 6->1 6->1 6->1 6->10 6->21 7->1 8->1 8->1 8->1 8->11 8->14 10->7 11->1 11->6 12->1 13->1 14->1 14->6 15->1 15->1 15->19 15->22 16->1 17->1 17->1 18->1 18->15 18->15 18->24 19->1 19->1 19->1 19->20 19->21 19->23 19->23 19->24 19->25 20->1 20->1 20->21 21->1 21->1 21->1 21->10 22->1 23->1 23->1 23->1 23->1 23->20 23->20 23->20 23->20 24->1 24->23 24->23 25->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; void main ( void ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int printf ( char const * format , ... ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; int countPalin ( char * s , int head , int tail , int len ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; int countPalin ( char * s , int head , int tail , int len ) { int ret ; int tmp ; int tmp___0 ; { if ( ( int ) * ( s + head ) == ( int ) * ( s + tail ) ) { tmp = 1 ; } else { tmp = 0 ; } ret = tmp ; if ( ret ) { if ( head - 1 >= 0 ) { if ( tail + 1 < len ) { tmp___0 = countPalin ( s , head - 1 , tail + 1 , len ) ; ret += tmp___0 ; } } } return ( ret ) ; } } void megaInit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { } } } void main ( void ) { { megaInit ( ) ; } }
>>>Func
METHOD numJewelsInStones
METHOD_RETURN int
PARAM char *j
PARAM char *s
<operator>.assignment tmp = strlen(s)
<operator>.assignment lens = tmp
<operator>.assignment tmp___0 = strlen(j)
<operator>.assignment lenj = tmp___0
<operator>.assignment sol = 0
memset memset(cnt  0  sizeof(cnt))
<operator>.assignment i = 0
<operator>.assignment i___0 = 0
RETURN return (sol); return (sol);
<operator>.lessThan i < lenj
<operator>.lessThan i___0 < lens
IDENTIFIER sol return (sol);
strlen strlen(s)
strlen strlen(j)
<operator>.postIncrement (cnt[*(j + i)]) ++
<operator>.postIncrement i ++
<operator>.assignmentPlus sol += cnt[*(s + i___0)]
<operator>.postIncrement i___0 ++
<operator>.addition j + i
<operator>.addition s + i___0
<operator>.indirectIndexAccess cnt[*(j + i)]
<operator>.indirectIndexAccess cnt[*(s + i___0)]
<operator>.indirection *(j + i)
<operator>.indirection *(s + i___0)
>>>PDG&28 0->2 0->3 0->5 0->7 0->8 0->9 0->10 0->11 0->13 0->14 0->15 0->16 0->17 0->19 0->20 0->21 0->22 0->23 2->17 3->16 4->1 4->1 4->5 5->1 5->1 5->14 6->1 6->1 6->7 7->1 7->1 7->13 8->1 8->1 8->15 8->20 9->1 9->1 9->18 9->20 10->1 10->13 11->1 11->14 12->1 13->1 13->1 13->1 13->13 13->18 13->19 13->19 13->22 13->22 13->24 13->26 14->1 14->1 14->1 14->14 14->20 14->21 14->21 14->23 14->23 14->25 14->27 15->12 16->1 16->4 16->23 17->1 17->6 17->22 18->1 18->1 19->1 19->13 20->1 20->1 20->1 20->15 21->1 21->14 22->1 23->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern int ( /* missing proto */ strlen ) ( ) ; void main ( void ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int printf ( char const * format , ... ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int gethostname ( char * name , unsigned long namelen ) ; int numJewelsInStones ( char * j , char * s ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int ( /* missing proto */ memset ) ( ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; void megaInit ( void ) { { } } int numJewelsInStones ( char * j , char * s ) { int cnt [ 500 ] ; int lens ; int tmp ; int lenj ; int tmp___0 ; int sol ; int i ; int i___0 ; { tmp = strlen ( s ) ; lens = tmp ; tmp___0 = strlen ( j ) ; lenj = tmp___0 ; sol = 0 ; memset ( cnt , 0 , sizeof ( cnt ) ) ; i = 0 ; while ( i < lenj ) { ( cnt [ * ( j + i ) ] ) ++ ; i ++ ; } i___0 = 0 ; while ( i___0 < lens ) { sol += cnt [ * ( s + i___0 ) ] ; i___0 ++ ; } return ( sol ) ; } } void main ( void ) { { megaInit ( ) ; } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { } } }
>>>Func
METHOD _1_stringEncoder
METHOD_RETURN void
PARAM int n
PARAM char str[]
BLOCK <empty> <empty>
<operator>.assignment encodeStrings_i3 = 0
IDENTIFIER n switch(n)
LITERAL 3 <empty>
<operator>.assignment str[encodeStrings_i3] = 'F'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'l'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 2 <empty>
<operator>.assignment str[encodeStrings_i3] = 'T'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'u'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 1 <empty>
<operator>.assignment str[encodeStrings_i3] = 'F'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'l'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 0 <empty>
<operator>.assignment str[encodeStrings_i3] = 'T'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'u'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
>>>PDG&63 0->2 0->3 0->4 0->5 0->6 0->7 0->8 0->9 0->10 0->11 0->12 0->13 0->14 0->15 0->16 0->17 0->18 0->19 0->20 0->21 0->22 0->23 0->24 0->25 0->26 0->27 0->28 0->29 0->30 0->31 0->32 0->33 0->34 0->35 0->36 0->37 0->38 0->39 0->40 0->41 0->42 0->43 0->44 0->45 0->46 0->47 0->48 0->49 0->50 0->51 0->52 0->53 0->54 0->55 0->56 0->57 0->58 0->59 0->60 0->61 0->62 2->1 3->1 5->1 5->1 5->9 5->24 5->37 5->52 8->1 9->11 10->1 11->13 12->1 13->15 14->1 15->17 16->1 17->19 18->1 19->21 20->1 20->1 21->1 21->1 23->1 24->26 25->1 26->28 27->1 28->30 29->1 30->32 31->1 32->34 33->1 33->1 34->1 34->1 36->1 37->39 38->1 39->41 40->1 41->43 42->1 43->45 44->1 45->47 46->1 47->49 48->1 48->1 49->1 49->1 51->1 52->54 53->1 54->56 55->1 56->58 57->1 58->60 59->1 60->62 61->1 61->1 62->1 62->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern void exit ( int status ) ; extern int pthread_cond_signal ( int * cond ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; char * * _global_argv = ( char * * ) 0 ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; void encodeStrings_litStr2_i $ nit ( void ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern int raise ( int sig ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; int main ( int _formal_argc , char * * _formal_argv , char * * _formal_envp ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; void encodeStrings_litStr0_i $ nit ( void ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; int _global_argc = 0 ; void megaInit ( void ) ; char * * _global_envp = ( char * * ) 0 ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; void encodeStrings_litStr3_i $ nit ( void ) ; extern int ( /* missing proto */ printf ) ( ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; void encodeStrings_litStr1_i $ nit ( void ) ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int ( /* missing proto */ isArmstrong ) ( ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; char encodeStrings_litStr3 [ 7 ] ; char encodeStrings_litStr2 [ 6 ] ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; char encodeStrings_litStr1 [ 7 ] ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; char encodeStrings_litStr0 [ 6 ] ; void encodeStrings_litStr2_i $ nit ( void ) { { } } int main ( int _formal_argc , char * * _formal_argv , char * * _formal_envp ) { int x ; int tmp ; int tmp___0 ; int _BARRIER_0 ; { megaInit ( ) ; _global_argc = _formal_argc ; _global_argv = _formal_argv ; _global_envp = _formal_envp ; _BARRIER_0 = 1 ; x = 153 ; tmp = isArmstrong ( x ) ; if ( tmp == 1 ) { _1_stringEncoder ( 0 , encodeStrings_litStr0 ) ; printf ( encodeStrings_litStr0 ) ; } else { _1_stringEncoder ( 1 , encodeStrings_litStr1 ) ; printf ( encodeStrings_litStr1 ) ; } x = 1253 ; tmp___0 = isArmstrong ( x ) ; if ( tmp___0 == 1 ) { _1_stringEncoder ( 2 , encodeStrings_litStr2 ) ; printf ( encodeStrings_litStr2 ) ; } else { _1_stringEncoder ( 3 , encodeStrings_litStr3 ) ; printf ( encodeStrings_litStr3 ) ; } return ( 0 ) ; } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { case 3 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 2 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 1 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 0 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; } } } void encodeStrings_litStr0_i $ nit ( void ) { { } } void encodeStrings_litStr3_i $ nit ( void ) { { } } void encodeStrings_litStr1_i $ nit ( void ) { { } } void megaInit ( void ) { { encodeStrings_litStr3_i $ nit ( ) ; encodeStrings_litStr2_i $ nit ( ) ; encodeStrings_litStr1_i $ nit ( ) ; encodeStrings_litStr0_i $ nit ( ) ; } }
>>>Func
METHOD _1_stringEncoder
METHOD_RETURN void
PARAM int n
PARAM char str[]
BLOCK <empty> <empty>
<operator>.assignment encodeStrings_i3 = 0
IDENTIFIER n switch(n)
LITERAL 5 <empty>
<operator>.assignment str[encodeStrings_i3] = 'S'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'o'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'y'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ':'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 4 <empty>
<operator>.assignment str[encodeStrings_i3] = 'O'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'i'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'g'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'i'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'l'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'y'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ':'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 3 <empty>
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 2 <empty>
<operator>.assignment str[encodeStrings_i3] = 'E'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'h'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'l'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'm'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'o'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'f'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'h'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'y'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 1 <empty>
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 0 <empty>
<operator>.assignment str[encodeStrings_i3] = 'E'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'i'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'z'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'o'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'f'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'y'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ':'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
>>>PDG&199 0->2 0->3 0->4 0->5 0->6 0->7 0->8 0->9 0->10 0->11 0->12 0->13 0->14 0->15 0->16 0->17 0->18 0->19 0->20 0->21 0->22 0->23 0->24 0->25 0->26 0->27 0->28 0->29 0->30 0->31 0->32 0->33 0->34 0->35 0->36 0->37 0->38 0->39 0->40 0->41 0->42 0->43 0->44 0->45 0->46 0->47 0->48 0->49 0->50 0->51 0->52 0->53 0->54 0->55 0->56 0->57 0->58 0->59 0->60 0->61 0->62 0->63 0->64 0->65 0->66 0->67 0->68 0->69 0->70 0->71 0->72 0->73 0->74 0->75 0->76 0->77 0->78 0->79 0->80 0->81 0->82 0->83 0->84 0->85 0->86 0->87 0->88 0->89 0->90 0->91 0->92 0->93 0->94 0->95 0->96 0->97 0->98 0->99 0->100 0->101 0->102 0->103 0->104 0->105 0->106 0->107 0->108 0->109 0->110 0->111 0->112 0->113 0->114 0->115 0->116 0->117 0->118 0->119 0->120 0->121 0->122 0->123 0->124 0->125 0->126 0->127 0->128 0->129 0->130 0->131 0->132 0->133 0->134 0->135 0->136 0->137 0->138 0->139 0->140 0->141 0->142 0->143 0->144 0->145 0->146 0->147 0->148 0->149 0->150 0->151 0->152 0->153 0->154 0->155 0->156 0->157 0->158 0->159 0->160 0->161 0->162 0->163 0->164 0->165 0->166 0->167 0->168 0->169 0->170 0->171 0->172 0->173 0->174 0->175 0->176 0->177 0->178 0->179 0->180 0->181 0->182 0->183 0->184 0->185 0->186 0->187 0->188 0->189 0->190 0->191 0->192 0->193 0->194 0->195 0->196 0->197 0->198 2->1 3->1 5->1 5->1 5->9 5->40 5->75 5->82 5->149 5->156 8->1 9->11 10->1 11->13 13->15 14->1 15->17 16->1 17->19 18->1 19->21 21->23 23->25 25->27 26->1 27->29 28->1 29->31 30->1 31->33 32->1 33->35 34->1 35->37 36->1 36->1 37->1 37->1 39->1 40->42 42->44 44->46 45->1 46->48 47->1 48->50 49->1 50->52 52->54 53->1 54->56 56->58 58->60 60->62 61->1 62->64 63->1 64->66 65->1 66->68 67->1 68->70 69->1 70->72 71->1 71->1 72->1 72->1 74->1 75->77 76->1 77->79 78->1 78->1 79->1 79->1 81->1 82->84 84->86 86->88 88->90 90->92 92->94 94->96 96->98 98->100 100->102 102->104 103->1 104->106 106->108 107->1 108->110 110->112 111->1 112->114 114->116 115->1 116->118 118->120 119->1 120->122 121->1 122->124 124->126 125->1 126->128 127->1 128->130 129->1 130->132 131->1 132->134 134->136 136->138 137->1 138->140 139->1 140->142 141->1 142->144 143->1 144->146 145->1 145->1 146->1 146->1 148->1 149->151 150->1 151->153 152->1 152->1 153->1 153->1 155->1 156->158 157->1 158->160 159->1 160->162 162->164 164->166 166->168 167->1 168->170 169->1 170->172 171->1 172->174 173->1 174->176 176->178 177->1 178->180 179->1 180->182 181->1 182->184 184->186 186->188 187->1 188->190 189->1 190->192 191->1 192->194 193->1 194->196 195->1 196->198 197->1 197->1 198->1 198->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; char * * _global_argv = ( char * * ) 0 ; extern int fcntl ( int filedes , int cmd , ... ) ; void encodeStrings_litStr2_i $ nit ( void ) ; extern int unlink ( char const * filename ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int pthread_mutex_lock ( int * mutex ) ; void encodeStrings_litStr5_i $ nit ( void ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern int ( /* missing proto */ malloc ) ( ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int ( /* missing proto */ bead_sort ) ( ) ; extern double ceil ( double x ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern int ( /* missing proto */ free ) ( ) ; extern unsigned long strlen ( char const * s ) ; int main ( int argc , char const * * argv , char * * _formal_envp ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; void encodeStrings_litStr0_i $ nit ( void ) ; int _global_argc = 0 ; void megaInit ( void ) ; char * * _global_envp = ( char * * ) 0 ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; void encodeStrings_litStr3_i $ nit ( void ) ; extern int ( /* missing proto */ printf ) ( ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern int ( /* missing proto */ scanf ) ( ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern double strtod ( char const * str , char const * endptr ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; void encodeStrings_litStr1_i $ nit ( void ) ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; void encodeStrings_litStr4_i $ nit ( void ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; char encodeStrings_litStr5 [ 15 ] ; extern int ( /* missing proto */ display ) ( ) ; extern int open ( char const * filename , int oflag , ... ) ; char encodeStrings_litStr4 [ 17 ] ; extern double sqrt ( double x ) ; char encodeStrings_litStr3 [ 3 ] ; char encodeStrings_litStr2 [ 33 ] ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; char encodeStrings_litStr1 [ 3 ] ; char encodeStrings_litStr0 [ 22 ] ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; void encodeStrings_litStr2_i $ nit ( void ) { { } } void encodeStrings_litStr3_i $ nit ( void ) { { } } void encodeStrings_litStr1_i $ nit ( void ) { { } } void encodeStrings_litStr0_i $ nit ( void ) { { } } int main ( int argc , char const * * argv , char * * _formal_envp ) { int n ; int i ; int * arr ; int tmp ; int _BARRIER_0 ; { megaInit ( ) ; _global_argc = argc ; _global_argv = argv ; _global_envp = _formal_envp ; _BARRIER_0 = 1 ; _1_stringEncoder ( 0 , encodeStrings_litStr0 ) ; printf ( encodeStrings_litStr0 ) ; _1_stringEncoder ( 1 , encodeStrings_litStr1 ) ; scanf ( encodeStrings_litStr1 , & n ) ; _1_stringEncoder ( 2 , encodeStrings_litStr2 ) ; printf ( encodeStrings_litStr2 ) ; tmp = malloc ( ( unsigned long ) n * 4UL ) ; arr = ( int * ) tmp ; i = 0 ; while ( i < n ) { _1_stringEncoder ( 3 , encodeStrings_litStr3 ) ; scanf ( encodeStrings_litStr3 , arr + i ) ; i ++ ; } _1_stringEncoder ( 4 , encodeStrings_litStr4 ) ; printf ( encodeStrings_litStr4 ) ; display ( arr , n ) ; bead_sort ( arr , n ) ; _1_stringEncoder ( 5 , encodeStrings_litStr5 ) ; printf ( encodeStrings_litStr5 ) ; display ( arr , n ) ; free ( arr ) ; return ( 0 ) ; } } void encodeStrings_litStr4_i $ nit ( void ) { { } } void megaInit ( void ) { { encodeStrings_litStr5_i $ nit ( ) ; encodeStrings_litStr4_i $ nit ( ) ; encodeStrings_litStr3_i $ nit ( ) ; encodeStrings_litStr2_i $ nit ( ) ; encodeStrings_litStr1_i $ nit ( ) ; encodeStrings_litStr0_i $ nit ( ) ; } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { case 5 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 4 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 3 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 2 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 1 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 0 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; } } } void encodeStrings_litStr5_i $ nit ( void ) { { } }
>>>Func
METHOD _1_stringEncoder
METHOD_RETURN void
PARAM int n
PARAM char str[]
BLOCK <empty> <empty>
<operator>.assignment encodeStrings_i3 = 0
IDENTIFIER n switch(n)
LITERAL 1 <empty>
<operator>.assignment str[encodeStrings_i3] = '\n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 0 <empty>
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
>>>PDG&21 0->2 0->3 0->4 0->5 0->6 0->7 0->8 0->9 0->10 0->11 0->12 0->13 0->14 0->15 0->16 0->17 0->18 0->19 0->20 2->1 3->1 5->1 5->1 5->9 5->14 8->1 9->11 10->1 10->1 11->1 11->1 13->1 14->16 15->1 16->18 17->1 18->20 19->1 19->1 20->1 20->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int unlink ( char const * filename ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; void main ( void ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void encodeStrings_litStr0_i $ nit ( void ) ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int ( /* missing proto */ printf ) ( ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; void encodeStrings_litStr1_i $ nit ( void ) ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; void display ( int const * arr , int n ) ; extern double sqrt ( double x ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; char encodeStrings_litStr1 [ 2 ] ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; char encodeStrings_litStr0 [ 4 ] ; void encodeStrings_litStr0_i $ nit ( void ) { { } } void main ( void ) { { megaInit ( ) ; } } void megaInit ( void ) { { encodeStrings_litStr1_i $ nit ( ) ; encodeStrings_litStr0_i $ nit ( ) ; } } void encodeStrings_litStr1_i $ nit ( void ) { { } } void display ( int const * arr , int n ) { int i ; { i = 0 ; while ( i < n ) { _1_stringEncoder ( 0 , encodeStrings_litStr0 ) ; printf ( encodeStrings_litStr0 , * ( arr + i ) ) ; i ++ ; } _1_stringEncoder ( 1 , encodeStrings_litStr1 ) ; printf ( encodeStrings_litStr1 ) ; return ; } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { case 1 : str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 0 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; } } }
>>>Func
METHOD swap
METHOD_RETURN void
PARAM int *first
PARAM int *second
<operator>.assignment temp = *first
<operator>.assignment *first = *second
<operator>.assignment *second = temp
RETURN return; return;
>>>PDG&8 0->2 0->3 0->6 0->7 2->1 3->1 4->1 4->6 5->1 5->1 6->1 6->1 6->1 7->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; void main ( void ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void swap ( int * first , int * second ) ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int printf ( char const * format , ... ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; void swap ( int * first , int * second ) { int temp ; { temp = * first ; * first = * second ; * second = temp ; return ; } } void megaInit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { } } } void main ( void ) { { megaInit ( ) ; } }
>>>Func
METHOD string_hash
METHOD_RETURN unsigned int
PARAM void *string
<operator>.assignment result = 5381U
<operator>.assignment p = (unsigned char *)string
RETURN return (result); return (result);
<operator>.notEquals (int )*p != 0
IDENTIFIER result return (result);
<operator>.cast (unsigned char *)string
<operator>.assignment result = ((result << 5) + result) + (unsigned int )*p
<operator>.postIncrement p ++
<operator>.cast (int )*p
<operator>.addition ((result << 5) + result) + (unsigned int )*p
<operator>.addition (result << 5) + result
<operator>.shiftLeft result << 5
UNKNOWN int int
<operator>.indirection *p
<operator>.cast (unsigned int )*p
UNKNOWN unsigned int unsigned int
<operator>.indirection *p
>>>PDG&20 0->2 0->3 0->4 0->6 0->7 0->8 0->9 0->10 0->12 0->13 0->14 2->4 2->8 3->1 3->1 3->7 3->14 4->1 4->1 4->1 4->10 5->1 6->1 6->1 6->6 6->9 6->10 6->11 6->12 6->13 6->14 6->15 6->16 6->17 6->18 6->19 7->5 8->1 9->1 9->1 9->1 9->7 9->14 10->1 10->1 11->1 12->1 12->1 13->1 14->9 14->9 14->12 14->12 14->13 14->13
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; void main ( void ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int printf ( char const * format , ... ) ; unsigned int string_hash ( void * string ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; unsigned int string_hash ( void * string ) { unsigned int result ; unsigned char * p ; { result = 5381U ; p = ( unsigned char * ) string ; while ( ( int ) * p != 0 ) { result = ( ( result << 5 ) + result ) + ( unsigned int ) * p ; p ++ ; } return ( result ) ; } } void megaInit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { } } } void main ( void ) { { megaInit ( ) ; } }
>>>Func
METHOD main
METHOD_RETURN int
PARAM int _formal_argc
PARAM char **_formal_argv
PARAM char **_formal_envp
megaInit megaInit()
<operator>.assignment _global_argc = _formal_argc
<operator>.assignment _global_argv = _formal_argv
<operator>.assignment _global_envp = _formal_envp
<operator>.assignment _BARRIER_0 = 1
test test()
RETURN return (0); return (0);
LITERAL 0 return (0);
>>>PDG&13 0->2 0->3 0->4 0->5 0->6 0->7 0->8 0->9 0->10 0->11 0->12 2->6 3->7 4->8 5->1 6->1 6->1 6->1 7->1 7->1 7->1 8->1 8->1 8->1 9->1 9->1 10->1 11->1 12->11
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fclose ( void * stream ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; char * * _global_argv = ( char * * ) 0 ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; int main ( int _formal_argc , char * * _formal_argv , char * * _formal_envp ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; int _global_argc = 0 ; char * * _global_envp = ( char * * ) 0 ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int printf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern int scanf ( char const * format , ... ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int ( /* missing proto */ test ) ( ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { } } } void megaInit ( void ) { { } } int main ( int _formal_argc , char * * _formal_argv , char * * _formal_envp ) { int _BARRIER_0 ; { megaInit ( ) ; _global_argc = _formal_argc ; _global_argv = _formal_argv ; _global_envp = _formal_envp ; _BARRIER_0 = 1 ; test ( ) ; return ( 0 ) ; } }
>>>Func
METHOD moveZeroes
METHOD_RETURN void
PARAM int *nums
PARAM int numsSize
<operator>.assignment i = 0
<operator>.assignment start = 0
<operator>.assignment i = 0
RETURN return; return;
<operator>.lessThan i < numsSize
<operator>.lessThan start < numsSize
<operator>.postIncrement i ++
<operator>.assignment *(nums + start) = 0
<operator>.postIncrement start ++
<operator>.assignment tmp = start
<operator>.postIncrement start ++
<operator>.assignment *(nums + tmp) = *(nums + i)
<operator>.addition nums + i
<operator>.addition nums + start
<operator>.addition nums + tmp
<operator>.addition nums + i
<operator>.indirection *(nums + i)
<operator>.indirection *(nums + start)
<operator>.indirection *(nums + tmp)
<operator>.indirection *(nums + i)
>>>PDG&24 0->2 0->3 0->4 0->5 0->6 0->7 0->8 0->9 0->10 0->11 0->12 0->13 0->14 0->16 0->17 0->18 0->19 2->1 2->16 2->17 3->8 5->1 5->9 5->13 5->14 6->1 6->8 7->1 8->1 8->1 8->8 8->9 8->10 8->10 8->16 8->16 8->19 8->20 9->1 9->1 9->1 9->9 9->11 9->12 9->12 9->17 9->17 9->21 10->1 10->8 11->1 11->1 12->1 12->9 13->1 13->18 14->1 14->9 14->13 15->1 15->1 15->1 16->1 17->1 18->1 19->1 20->13 20->14 20->15 20->18 20->19 20->22 20->23
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; void moveZeroes ( int * nums , int numsSize ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; void main ( void ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int printf ( char const * format , ... ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; void moveZeroes ( int * nums , int numsSize ) { int i ; int start ; int tmp ; { i = 0 ; start = 0 ; i = 0 ; while ( i < numsSize ) { if ( * ( nums + i ) ) { tmp = start ; start ++ ; * ( nums + tmp ) = * ( nums + i ) ; } i ++ ; } while ( start < numsSize ) { * ( nums + start ) = 0 ; start ++ ; } return ; } } void megaInit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { } } } void main ( void ) { { megaInit ( ) ; } }
>>>Func
METHOD findgcd
METHOD_RETURN int
PARAM int x
PARAM int y
RETURN return (x); return (x);
<operator>.notEquals x != y
IDENTIFIER x return (x);
<operator>.greaterThan x > y
<operator>.assignment tmp = findgcd(x - y, y)
RETURN return (tmp); return (tmp);
IDENTIFIER tmp return (tmp);
<operator>.assignment tmp___0 = findgcd(x, y - x)
RETURN return (tmp___0); return (tmp___0);
findgcd findgcd(x - y, y)
IDENTIFIER tmp___0 return (tmp___0);
<operator>.subtraction x - y
findgcd findgcd(x, y - x)
<operator>.subtraction y - x
>>>PDG&18 0->2 0->3 0->5 0->6 0->7 0->10 0->13 0->14 0->15 0->16 0->17 2->5 3->5 4->1 5->1 5->4 5->6 5->7 5->7 5->7 6->4 7->1 7->8 7->9 7->11 7->12 7->13 7->15 7->15 7->15 7->16 7->17 7->17 7->17 8->1 8->1 8->1 8->10 9->1 10->9 11->14 12->1 13->1 13->1 13->8 13->8 14->12 15->1 15->13 15->13 16->11 16->11 17->16 17->16
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; void main ( void ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int printf ( char const * format , ... ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; int findgcd ( int x , int y ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; int findgcd ( int x , int y ) { int tmp ; int tmp___0 ; { while ( x != y ) { if ( x > y ) { tmp = findgcd ( x - y , y ) ; return ( tmp ) ; } else { tmp___0 = findgcd ( x , y - x ) ; return ( tmp___0 ) ; } } return ( x ) ; } } void megaInit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { } } } void main ( void ) { { megaInit ( ) ; } }
>>>Func
METHOD factorial
METHOD_RETURN long
PARAM int x
<operator>.assignment fac = (long )x
<operator>.assignment i = 1
RETURN return (fac); return (fac);
<operator>.lessThan i < x
IDENTIFIER fac return (fac);
<operator>.cast (long )x
<operator>.assignmentMultiplication fac *= (long )(x - i)
<operator>.postIncrement i ++
<operator>.cast (long )(x - i)
<operator>.subtraction x - i
UNKNOWN long long
>>>PDG&14 0->2 0->3 0->4 0->6 0->7 0->8 0->9 0->10 0->12 2->3 2->6 2->8 3->1 3->1 3->1 3->7 3->9 4->1 4->6 5->1 6->1 6->1 6->1 6->6 6->9 6->10 6->11 6->12 6->12 6->12 6->13 7->5 9->1 9->1 9->1 9->7 10->1 10->6 11->1 12->6 12->9 12->9 12->10 12->11 12->11
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; void main ( void ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void megaInit ( void ) ; long factorial ( int x ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int printf ( char const * format , ... ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { } } } void megaInit ( void ) { { } } long factorial ( int x ) { int i ; long fac ; { fac = ( long ) x ; i = 1 ; while ( i < x ) { fac *= ( long ) ( x - i ) ; i ++ ; } return ( fac ) ; } } void main ( void ) { { megaInit ( ) ; } }
>>>Func
METHOD fib
METHOD_RETURN int
PARAM int n
<operator>.assignment a = 1
<operator>.assignment b = 1
<operator>.assignment i = 3
RETURN return (b); return (b);
<operator>.lessEqualsThan i <= n
IDENTIFIER b return (b);
<operator>.assignment c = a + b
<operator>.assignment a = b
<operator>.assignment b = c
<operator>.postIncrement i ++
<operator>.addition a + b
>>>PDG&14 0->2 0->3 0->4 0->5 0->7 0->8 0->9 0->10 0->11 0->12 0->13 2->7 3->1 3->1 3->9 3->13 4->1 4->1 4->8 4->9 4->10 4->13 5->1 5->7 6->1 7->1 7->1 7->1 7->7 7->9 7->10 7->11 7->12 7->12 7->13 8->6 9->1 9->1 9->11 10->1 10->1 10->9 10->13 11->1 11->1 11->1 11->8 11->9 11->10 11->13 12->1 12->7
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; void main ( void ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int printf ( char const * format , ... ) ; int fib ( int n ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { } } } void megaInit ( void ) { { } } int fib ( int n ) { int a ; int b ; int i ; int c ; { a = 1 ; b = 1 ; i = 3 ; while ( i <= n ) { c = a + b ; a = b ; b = c ; i ++ ; } return ( b ) ; } } void main ( void ) { { megaInit ( ) ; } }
>>>Func
METHOD singleNumber
METHOD_RETURN int
PARAM int *nums
PARAM int numsSize
<operator>.assignment result = 0
<operator>.assignment i = 0
RETURN return (result); return (result);
<operator>.lessThan i < numsSize
IDENTIFIER result return (result);
<operators>.assignmentXor result ^= *(nums + i)
<operator>.postIncrement i ++
<operator>.addition nums + i
<operator>.indirection *(nums + i)
>>>PDG&13 0->2 0->3 0->4 0->5 0->7 0->8 0->9 0->10 0->11 2->1 2->11 3->7 4->1 4->1 4->8 4->9 5->1 5->7 6->1 7->1 7->1 7->1 7->7 7->9 7->10 7->10 7->11 7->11 7->12 8->6 9->1 9->1 9->8 10->1 10->7 11->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; void main ( void ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int printf ( char const * format , ... ) ; extern int scanf ( char const * format , ... ) ; int singleNumber ( int * nums , int numsSize ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; int singleNumber ( int * nums , int numsSize ) { int i ; int result ; { result = 0 ; i = 0 ; while ( i < numsSize ) { result ^= * ( nums + i ) ; i ++ ; } return ( result ) ; } } void megaInit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { } } } void main ( void ) { { megaInit ( ) ; } }
>>>Func
METHOD checkforbase
METHOD_RETURN int
PARAM int x
PARAM int basei
<operator>.assignment k = -1
<operator>.assignment cont = 0
RETURN return (1); return (1);
LITERAL 1 while (1)
<operator>.notEquals x != 1
LITERAL 1 return (1);
<operator>.minus -1
<operator>.assignment k = x
<operator>.assignment tmp = baseconv(x, basei)
<operator>.assignment x = process(tmp)
<operator>.postIncrement cont ++
RETURN return (0); return (0);
<operator>.notEquals k != x
LITERAL 0 return (0);
baseconv baseconv(x, basei)
process process(tmp)
<operator>.notEquals x != 1
<operator>.logicalNot ! (cont < 10)
<operator>.lessThan cont < 10
>>>PDG&23 0->2 0->3 0->5 0->6 0->7 0->8 0->9 0->10 0->11 0->14 0->15 0->16 0->17 0->18 0->19 0->20 0->22 2->8 2->16 3->1 3->18 4->1 4->1 4->1 4->16 5->1 5->1 5->22 6->1 8->1 8->1 8->6 8->15 9->6 10->4 11->1 11->1 11->16 12->1 12->1 12->19 13->1 13->1 13->8 13->16 14->1 14->1 14->22 15->1 16->1 16->1 16->8 16->20 16->20 17->15 18->1 18->12 18->12 19->1 19->13 20->8 20->11 20->18 20->21 20->22 21->1 21->1 21->11 21->12 21->13 21->14 21->16 21->18 21->19 22->1 22->14 22->21 22->21
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fclose ( void * stream ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; int checkforbase ( int x , int basei ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int ( /* missing proto */ baseconv ) ( ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; void main ( void ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int printf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern int scanf ( char const * format , ... ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int ( /* missing proto */ process ) ( ) ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; int checkforbase ( int x , int basei ) { int k ; int cont ; int tmp ; { k = -1 ; cont = 0 ; while ( 1 ) { if ( k != x ) { if ( x != 1 ) { if ( ! ( cont < 10 ) ) { break ; } } else { break ; } } else { break ; } k = x ; tmp = baseconv ( x , basei ) ; x = process ( tmp ) ; cont ++ ; } if ( x != 1 ) { return ( 0 ) ; } return ( 1 ) ; } } void main ( void ) { { megaInit ( ) ; } } void megaInit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { } } }
>>>Func
METHOD main
METHOD_RETURN int
PARAM int argc
PARAM char **argv
PARAM char **_formal_envp
megaInit megaInit()
<operator>.assignment _global_argc = argc
<operator>.assignment _global_argv = argv
<operator>.assignment _global_envp = _formal_envp
<operator>.assignment _BARRIER_0 = 1
<operator>.assignment sum = 0
<operator>.assignment i = 0
<operator>.assignment i = 1
_1_stringEncoder _1_stringEncoder(0, encodeStrings_litStr0)
printf printf(encodeStrings_litStr0, sum)
RETURN return (0); return (0);
<operator>.lessThan i < argc
<operator>.lessEqualsThan i <= (int )*(*(argv + 1) + 0)
LITERAL 0 return (0);
<operator>.assignmentPlus sum += i
<operator>.postIncrement i ++
<operator>.assignmentPlus sum += sum
<operator>.postIncrement i ++
<operator>.cast (int )*(*(argv + 1) + 0)
<operator>.addition *(argv + 1) + 0
<operator>.addition argv + 1
UNKNOWN int int
<operator>.indirection *(*(argv + 1) + 0)
<operator>.indirection *(argv + 1)
>>>PDG&29 0->2 0->3 0->4 0->5 0->6 0->7 0->8 0->9 0->10 0->11 0->12 0->13 0->14 0->15 0->16 0->17 0->18 0->19 0->20 0->21 0->22 0->24 0->25 2->6 2->16 3->7 3->25 4->8 5->1 6->1 6->1 7->1 7->1 8->1 8->1 8->1 9->1 9->1 10->1 10->14 10->19 10->21 11->1 11->16 12->1 12->17 13->1 13->14 14->1 14->1 14->1 15->1 16->1 16->1 16->16 16->19 16->19 16->20 16->20 17->1 17->1 17->1 17->17 17->21 17->22 17->22 17->23 17->24 17->25 17->26 17->27 17->28 18->15 19->1 19->14 19->21 20->1 20->16 21->1 21->14 22->1 22->17 23->1 24->1 25->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; char * * _global_argv = ( char * * ) 0 ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; int main ( int argc , char * * argv , char * * _formal_envp ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; void encodeStrings_litStr0_i $ nit ( void ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; int _global_argc = 0 ; void megaInit ( void ) ; char * * _global_envp = ( char * * ) 0 ; extern int ( /* missing proto */ printf ) ( ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; char encodeStrings_litStr0 [ 12 ] ; void megaInit ( void ) { { encodeStrings_litStr0_i $ nit ( ) ; } } void encodeStrings_litStr0_i $ nit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { case 0 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; } } } int main ( int argc , char * * argv , char * * _formal_envp ) { int i ; int sum ; int _BARRIER_0 ; { megaInit ( ) ; _global_argc = argc ; _global_argv = argv ; _global_envp = _formal_envp ; _BARRIER_0 = 1 ; sum = 0 ; i = 0 ; while ( i < argc ) { sum += i ; i ++ ; } i = 1 ; while ( i <= ( int ) * ( * ( argv + 1 ) + 0 ) ) { sum += sum ; i ++ ; } _1_stringEncoder ( 0 , encodeStrings_litStr0 ) ; printf ( encodeStrings_litStr0 , sum ) ; return ( 0 ) ; } }
>>>Func
METHOD _1_stringEncoder
METHOD_RETURN void
PARAM int n
PARAM char str[]
BLOCK <empty> <empty>
<operator>.assignment encodeStrings_i3 = 0
IDENTIFIER n switch(n)
LITERAL 0 <empty>
<operator>.assignment str[encodeStrings_i3] = 'S'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'u'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'm'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'i'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ':'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
>>>PDG&32 0->2 0->3 0->4 0->5 0->6 0->7 0->8 0->9 0->10 0->11 0->12 0->13 0->14 0->15 0->16 0->17 0->18 0->19 0->20 0->21 0->22 0->23 0->24 0->25 0->26 0->27 0->28 0->29 0->30 0->31 2->1 3->1 5->1 5->1 5->9 8->1 9->11 10->1 11->13 12->1 13->15 15->17 16->1 17->19 18->1 19->21 20->1 21->23 22->1 23->25 24->1 25->27 26->1 27->29 28->1 29->31 30->1 30->1 31->1 31->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; char * * _global_argv = ( char * * ) 0 ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; int main ( int argc , char * * argv , char * * _formal_envp ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; void encodeStrings_litStr0_i $ nit ( void ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; int _global_argc = 0 ; void megaInit ( void ) ; char * * _global_envp = ( char * * ) 0 ; extern int ( /* missing proto */ printf ) ( ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; char encodeStrings_litStr0 [ 12 ] ; void megaInit ( void ) { { encodeStrings_litStr0_i $ nit ( ) ; } } void encodeStrings_litStr0_i $ nit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { case 0 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; } } } int main ( int argc , char * * argv , char * * _formal_envp ) { int i ; int sum ; int _BARRIER_0 ; { megaInit ( ) ; _global_argc = argc ; _global_argv = argv ; _global_envp = _formal_envp ; _BARRIER_0 = 1 ; sum = 0 ; i = 0 ; while ( i < argc ) { if ( ( int ) * ( * ( argv + i ) + 0 ) > 127 ) { sum ++ ; } sum += i ; i ++ ; } _1_stringEncoder ( 0 , encodeStrings_litStr0 ) ; printf ( encodeStrings_litStr0 , sum ) ; return ( 0 ) ; } }
>>>Func
METHOD _1_stringEncoder
METHOD_RETURN void
PARAM int n
PARAM char str[]
BLOCK <empty> <empty>
<operator>.assignment encodeStrings_i3 = 0
IDENTIFIER n switch(n)
LITERAL 4 <empty>
<operator>.assignment str[encodeStrings_i3] = 'T'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'p'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 3 <empty>
<operator>.assignment str[encodeStrings_i3] = 'H'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'l'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'l'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'o'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'w'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'o'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'l'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '!'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 2 <empty>
<operator>.assignment str[encodeStrings_i3] = 'H'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'l'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'l'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'o'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'w'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'o'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'l'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 1 <empty>
<operator>.assignment str[encodeStrings_i3] = 'H'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'l'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'l'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'o'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'W'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'o'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'l'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '!'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 0 <empty>
<operator>.assignment str[encodeStrings_i3] = 'H'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'l'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'l'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'o'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'W'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'o'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'l'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
>>>PDG&140 0->2 0->3 0->4 0->5 0->6 0->7 0->8 0->9 0->10 0->11 0->12 0->13 0->14 0->15 0->16 0->17 0->18 0->19 0->20 0->21 0->22 0->23 0->24 0->25 0->26 0->27 0->28 0->29 0->30 0->31 0->32 0->33 0->34 0->35 0->36 0->37 0->38 0->39 0->40 0->41 0->42 0->43 0->44 0->45 0->46 0->47 0->48 0->49 0->50 0->51 0->52 0->53 0->54 0->55 0->56 0->57 0->58 0->59 0->60 0->61 0->62 0->63 0->64 0->65 0->66 0->67 0->68 0->69 0->70 0->71 0->72 0->73 0->74 0->75 0->76 0->77 0->78 0->79 0->80 0->81 0->82 0->83 0->84 0->85 0->86 0->87 0->88 0->89 0->90 0->91 0->92 0->93 0->94 0->95 0->96 0->97 0->98 0->99 0->100 0->101 0->102 0->103 0->104 0->105 0->106 0->107 0->108 0->109 0->110 0->111 0->112 0->113 0->114 0->115 0->116 0->117 0->118 0->119 0->120 0->121 0->122 0->123 0->124 0->125 0->126 0->127 0->128 0->129 0->130 0->131 0->132 0->133 0->134 0->135 0->136 0->137 0->138 0->139 2->1 3->1 5->1 5->1 5->9 5->38 5->65 5->90 5->117 8->1 9->11 11->13 13->15 14->1 15->17 17->19 18->1 19->21 20->1 21->23 22->1 23->25 25->27 26->1 27->29 28->1 29->31 30->1 31->33 32->1 33->35 34->1 34->1 35->1 35->1 37->1 38->40 39->1 40->42 42->44 44->46 46->48 47->1 48->50 49->1 50->52 51->1 52->54 53->1 54->56 55->1 56->58 57->1 58->60 59->1 60->62 61->1 61->1 62->1 62->1 64->1 65->67 66->1 67->69 69->71 71->73 73->75 74->1 75->77 76->1 77->79 78->1 79->81 80->1 81->83 82->1 83->85 84->1 85->87 86->1 86->1 87->1 87->1 89->1 90->92 91->1 92->94 94->96 96->98 98->100 99->1 100->102 101->1 102->104 103->1 104->106 105->1 106->108 107->1 108->110 109->1 110->112 111->1 112->114 113->1 113->1 114->1 114->1 116->1 117->119 118->1 119->121 121->123 123->125 125->127 126->1 127->129 128->1 129->131 130->1 131->133 132->1 133->135 134->1 135->137 136->1 137->139 138->1 138->1 139->1 139->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fclose ( void * stream ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; void encodeStrings_litStr2_i $ nit ( void ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int ( /* missing proto */ assert ) ( ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int ( /* missing proto */ djb2 ) ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; void main ( void ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; void encodeStrings_litStr0_i $ nit ( void ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void megaInit ( void ) ; extern int ( /* missing proto */ printf ) ( ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; void encodeStrings_litStr3_i $ nit ( void ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern int scanf ( char const * format , ... ) ; void test_djb2 ( void ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern float strtof ( char const * str , char const * endptr ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; void encodeStrings_litStr1_i $ nit ( void ) ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; void encodeStrings_litStr4_i $ nit ( void ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; char encodeStrings_litStr4 [ 14 ] ; extern double sqrt ( double x ) ; char encodeStrings_litStr3 [ 13 ] ; char encodeStrings_litStr2 [ 12 ] ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; char encodeStrings_litStr1 [ 13 ] ; char encodeStrings_litStr0 [ 12 ] ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; void test_djb2 ( void ) { int tmp ; int tmp___0 ; int tmp___1 ; int tmp___2 ; { _1_stringEncoder ( 0 , encodeStrings_litStr0 ) ; tmp = djb2 ( encodeStrings_litStr0 ) ; assert ( ( unsigned long ) tmp == 0xbfe6210387781081UL ) ; _1_stringEncoder ( 1 , encodeStrings_litStr1 ) ; tmp___0 = djb2 ( encodeStrings_litStr1 ) ; assert ( ( unsigned long ) tmp___0 == 0xbcaa4174767a20c2UL ) ; _1_stringEncoder ( 2 , encodeStrings_litStr2 ) ; tmp___1 = djb2 ( encodeStrings_litStr2 ) ; assert ( ( unsigned long ) tmp___1 == 0xbfe6210389bb20a1UL ) ; _1_stringEncoder ( 3 , encodeStrings_litStr3 ) ; tmp___2 = djb2 ( encodeStrings_litStr3 ) ; assert ( ( unsigned long ) tmp___2 == 0xbcaa4174c11f34e2UL ) ; _1_stringEncoder ( 4 , encodeStrings_litStr4 ) ; printf ( encodeStrings_litStr4 ) ; return ; } } void encodeStrings_litStr4_i $ nit ( void ) { { } } void encodeStrings_litStr1_i $ nit ( void ) { { } } void encodeStrings_litStr3_i $ nit ( void ) { { } } void main ( void ) { { megaInit ( ) ; } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { case 4 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 3 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 2 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 1 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 0 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; } } } void megaInit ( void ) { { encodeStrings_litStr4_i $ nit ( ) ; encodeStrings_litStr3_i $ nit ( ) ; encodeStrings_litStr2_i $ nit ( ) ; encodeStrings_litStr1_i $ nit ( ) ; encodeStrings_litStr0_i $ nit ( ) ; } } void encodeStrings_litStr2_i $ nit ( void ) { { } } void encodeStrings_litStr0_i $ nit ( void ) { { } }
>>>Func
METHOD baseconv
METHOD_RETURN int
PARAM int d
PARAM int b
<operator>.assignment i = 0
<operator>.assignment len = i
<operator>.assignment i = 0
<operator>.assignment ans = 0
<operator>.assignment i = 0
RETURN return (ans); return (ans);
<operator>.equals b == 10
IDENTIFIER d while (d)
<operator>.lessThan i < len
<operator>.lessThan i < len
IDENTIFIER ans return (ans);
RETURN return (d); return (d);
<operator>.assignment invdigits[i] = d % b
<operator>.assignmentDivision d /= b
<operator>.postIncrement i ++
<operator>.assignment digits[i] = invdigits[(len - i) - 1]
<operator>.postIncrement i ++
<operator>.assignmentMultiplication ans *= 10
<operator>.assignmentPlus ans += digits[i]
<operator>.postIncrement i ++
IDENTIFIER d return (d);
<operator>.modulo d % b
<operator>.subtraction (len - i) - 1
<operator>.subtraction len - i
<operator>.indirectIndexAccess invdigits[i]
<operator>.indirectIndexAccess digits[i]
<operator>.indirectIndexAccess invdigits[(len - i) - 1]
<operator>.indirectIndexAccess digits[i]
>>>PDG&32 0->2 0->3 0->4 0->5 0->6 0->7 0->8 0->10 0->11 0->12 0->13 0->14 0->17 0->18 0->20 0->21 0->22 0->23 0->24 0->25 0->26 0->27 2->1 2->24 2->25 3->10 4->5 4->18 5->12 6->12 7->14 7->21 8->13 9->1 10->1 10->1 10->4 10->5 10->6 10->7 10->8 10->9 10->12 10->13 10->15 10->16 10->17 10->18 10->25 10->25 10->28 12->12 12->13 12->19 12->20 12->26 12->27 12->27 12->27 12->29 12->30 13->13 13->21 13->22 13->23 13->23 13->31 14->9 15->1 17->25 18->5 19->22 20->12 21->22 22->14 22->21 23->13 24->15 25->16 25->16 25->17 25->17 27->12 27->20 27->26 27->26
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; int baseconv ( int d , int b ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; void main ( void ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int printf ( char const * format , ... ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; int baseconv ( int d , int b ) { int invdigits [ 20 ] ; int digits [ 20 ] ; int i ; int len ; int ans ; { if ( b == 10 ) { return ( d ) ; } i = 0 ; while ( d ) { invdigits [ i ] = d % b ; d /= b ; i ++ ; } len = i ; i = 0 ; while ( i < len ) { digits [ i ] = invdigits [ ( len - i ) - 1 ] ; i ++ ; } ans = 0 ; i = 0 ; while ( i < len ) { ans *= 10 ; ans += digits [ i ] ; i ++ ; } return ( ans ) ; } } void megaInit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { } } } void main ( void ) { { megaInit ( ) ; } }
>>>Func
METHOD fib
METHOD_RETURN int
PARAM int number
<operator>.equals number == 1
RETURN return (1); return (1);
LITERAL 1 return (1);
<operator>.equals number == 2
RETURN return (1); return (1);
LITERAL 1 return (1);
<operator>.assignment tmp = fib(number - 1)
<operator>.assignment tmp___0 = fib(number - 2)
RETURN return (tmp + tmp___0); return (tmp + tmp___0);
<operator>.addition tmp + tmp___0
fib fib(number - 1)
fib fib(number - 2)
<operator>.subtraction number - 1
<operator>.subtraction number - 2
>>>PDG&17 0->2 0->3 0->4 0->5 0->6 0->7 0->8 0->12 0->15 0->16 2->3 3->1 3->1 3->4 3->6 3->6 4->1 5->4 6->7 6->9 6->10 6->11 6->12 6->13 6->14 6->15 6->15 6->16 7->1 8->7 9->12 10->12 11->1 12->11 13->9 14->10 15->13 15->13 15->16 16->14 16->14
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; void main ( void ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int printf ( char const * format , ... ) ; int fib ( int number ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { } } } void megaInit ( void ) { { } } int fib ( int number ) { int tmp ; int tmp___0 ; { if ( number == 1 ) { return ( 1 ) ; } else if ( number == 2 ) { return ( 1 ) ; } else { tmp = fib ( number - 1 ) ; tmp___0 = fib ( number - 2 ) ; return ( tmp + tmp___0 ) ; } } } void main ( void ) { { megaInit ( ) ; } }
>>>Func
METHOD _1_stringEncoder
METHOD_RETURN void
PARAM int n
PARAM char str[]
BLOCK <empty> <empty>
<operator>.assignment encodeStrings_i3 = 0
IDENTIFIER n switch(n)
LITERAL 4 <empty>
<operator>.assignment str[encodeStrings_i3] = 'T'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'p'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 3 <empty>
<operator>.assignment str[encodeStrings_i3] = 'H'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'l'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'l'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'o'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'w'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'o'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'l'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '!'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 2 <empty>
<operator>.assignment str[encodeStrings_i3] = 'H'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'l'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'l'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'o'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'w'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'o'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'l'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 1 <empty>
<operator>.assignment str[encodeStrings_i3] = 'H'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'l'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'l'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'o'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'W'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'o'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'l'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '!'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 0 <empty>
<operator>.assignment str[encodeStrings_i3] = 'H'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'l'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'l'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'o'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'W'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'o'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'l'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
>>>PDG&140 0->2 0->3 0->4 0->5 0->6 0->7 0->8 0->9 0->10 0->11 0->12 0->13 0->14 0->15 0->16 0->17 0->18 0->19 0->20 0->21 0->22 0->23 0->24 0->25 0->26 0->27 0->28 0->29 0->30 0->31 0->32 0->33 0->34 0->35 0->36 0->37 0->38 0->39 0->40 0->41 0->42 0->43 0->44 0->45 0->46 0->47 0->48 0->49 0->50 0->51 0->52 0->53 0->54 0->55 0->56 0->57 0->58 0->59 0->60 0->61 0->62 0->63 0->64 0->65 0->66 0->67 0->68 0->69 0->70 0->71 0->72 0->73 0->74 0->75 0->76 0->77 0->78 0->79 0->80 0->81 0->82 0->83 0->84 0->85 0->86 0->87 0->88 0->89 0->90 0->91 0->92 0->93 0->94 0->95 0->96 0->97 0->98 0->99 0->100 0->101 0->102 0->103 0->104 0->105 0->106 0->107 0->108 0->109 0->110 0->111 0->112 0->113 0->114 0->115 0->116 0->117 0->118 0->119 0->120 0->121 0->122 0->123 0->124 0->125 0->126 0->127 0->128 0->129 0->130 0->131 0->132 0->133 0->134 0->135 0->136 0->137 0->138 0->139 2->1 3->1 5->1 5->1 5->9 5->38 5->65 5->90 5->117 8->1 9->11 11->13 13->15 14->1 15->17 17->19 18->1 19->21 20->1 21->23 22->1 23->25 25->27 26->1 27->29 28->1 29->31 30->1 31->33 32->1 33->35 34->1 34->1 35->1 35->1 37->1 38->40 39->1 40->42 42->44 44->46 46->48 47->1 48->50 49->1 50->52 51->1 52->54 53->1 54->56 55->1 56->58 57->1 58->60 59->1 60->62 61->1 61->1 62->1 62->1 64->1 65->67 66->1 67->69 69->71 71->73 73->75 74->1 75->77 76->1 77->79 78->1 79->81 80->1 81->83 82->1 83->85 84->1 85->87 86->1 86->1 87->1 87->1 89->1 90->92 91->1 92->94 94->96 96->98 98->100 99->1 100->102 101->1 102->104 103->1 104->106 105->1 106->108 107->1 108->110 109->1 110->112 111->1 112->114 113->1 113->1 114->1 114->1 116->1 117->119 118->1 119->121 121->123 123->125 125->127 126->1 127->129 128->1 129->131 130->1 131->133 132->1 133->135 134->1 135->137 136->1 137->139 138->1 138->1 139->1 139->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fclose ( void * stream ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; void encodeStrings_litStr2_i $ nit ( void ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int ( /* missing proto */ assert ) ( ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; void main ( void ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; void encodeStrings_litStr0_i $ nit ( void ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void megaInit ( void ) ; extern int ( /* missing proto */ printf ) ( ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; void encodeStrings_litStr3_i $ nit ( void ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern int scanf ( char const * format , ... ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern float strtof ( char const * str , char const * endptr ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int ( /* missing proto */ crc32 ) ( ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; void encodeStrings_litStr1_i $ nit ( void ) ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; void encodeStrings_litStr4_i $ nit ( void ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; char encodeStrings_litStr4 [ 14 ] ; extern double sqrt ( double x ) ; char encodeStrings_litStr3 [ 13 ] ; char encodeStrings_litStr2 [ 12 ] ; extern double log ( double x ) ; void test_crc32 ( void ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; char encodeStrings_litStr1 [ 13 ] ; char encodeStrings_litStr0 [ 12 ] ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; void test_crc32 ( void ) { int tmp ; int tmp___0 ; int tmp___1 ; int tmp___2 ; { _1_stringEncoder ( 0 , encodeStrings_litStr0 ) ; tmp = crc32 ( encodeStrings_litStr0 ) ; assert ( tmp == 1243066710 ) ; _1_stringEncoder ( 1 , encodeStrings_litStr1 ) ; tmp___0 = crc32 ( encodeStrings_litStr1 ) ; assert ( tmp___0 == 472456355 ) ; _1_stringEncoder ( 2 , encodeStrings_litStr2 ) ; tmp___1 = crc32 ( encodeStrings_litStr2 ) ; assert ( ( long ) tmp___1 == 2346098258L ) ; _1_stringEncoder ( 3 , encodeStrings_litStr3 ) ; tmp___2 = crc32 ( encodeStrings_litStr3 ) ; assert ( tmp___2 == 461707669 ) ; _1_stringEncoder ( 4 , encodeStrings_litStr4 ) ; printf ( encodeStrings_litStr4 ) ; return ; } } void encodeStrings_litStr4_i $ nit ( void ) { { } } void encodeStrings_litStr1_i $ nit ( void ) { { } } void encodeStrings_litStr3_i $ nit ( void ) { { } } void main ( void ) { { megaInit ( ) ; } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { case 4 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 3 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 2 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 1 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 0 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; } } } void megaInit ( void ) { { encodeStrings_litStr4_i $ nit ( ) ; encodeStrings_litStr3_i $ nit ( ) ; encodeStrings_litStr2_i $ nit ( ) ; encodeStrings_litStr1_i $ nit ( ) ; encodeStrings_litStr0_i $ nit ( ) ; } } void encodeStrings_litStr2_i $ nit ( void ) { { } } void encodeStrings_litStr0_i $ nit ( void ) { { } }
>>>Func
METHOD _1_stringEncoder
METHOD_RETURN void
PARAM int n
PARAM char str[]
BLOCK <empty> <empty>
<operator>.assignment encodeStrings_i3 = 0
IDENTIFIER n switch(n)
LITERAL 5 <empty>
<operator>.assignment str[encodeStrings_i3] = 'S'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'o'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'y'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ':'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 4 <empty>
<operator>.assignment str[encodeStrings_i3] = 'O'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'i'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'g'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'i'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'l'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'y'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ':'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 3 <empty>
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 2 <empty>
<operator>.assignment str[encodeStrings_i3] = 'E'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'h'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'l'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'm'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'o'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'f'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'h'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'y'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 1 <empty>
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 0 <empty>
<operator>.assignment str[encodeStrings_i3] = 'E'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'i'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'z'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'o'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'f'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'y'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ':'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
>>>PDG&199 0->2 0->3 0->4 0->5 0->6 0->7 0->8 0->9 0->10 0->11 0->12 0->13 0->14 0->15 0->16 0->17 0->18 0->19 0->20 0->21 0->22 0->23 0->24 0->25 0->26 0->27 0->28 0->29 0->30 0->31 0->32 0->33 0->34 0->35 0->36 0->37 0->38 0->39 0->40 0->41 0->42 0->43 0->44 0->45 0->46 0->47 0->48 0->49 0->50 0->51 0->52 0->53 0->54 0->55 0->56 0->57 0->58 0->59 0->60 0->61 0->62 0->63 0->64 0->65 0->66 0->67 0->68 0->69 0->70 0->71 0->72 0->73 0->74 0->75 0->76 0->77 0->78 0->79 0->80 0->81 0->82 0->83 0->84 0->85 0->86 0->87 0->88 0->89 0->90 0->91 0->92 0->93 0->94 0->95 0->96 0->97 0->98 0->99 0->100 0->101 0->102 0->103 0->104 0->105 0->106 0->107 0->108 0->109 0->110 0->111 0->112 0->113 0->114 0->115 0->116 0->117 0->118 0->119 0->120 0->121 0->122 0->123 0->124 0->125 0->126 0->127 0->128 0->129 0->130 0->131 0->132 0->133 0->134 0->135 0->136 0->137 0->138 0->139 0->140 0->141 0->142 0->143 0->144 0->145 0->146 0->147 0->148 0->149 0->150 0->151 0->152 0->153 0->154 0->155 0->156 0->157 0->158 0->159 0->160 0->161 0->162 0->163 0->164 0->165 0->166 0->167 0->168 0->169 0->170 0->171 0->172 0->173 0->174 0->175 0->176 0->177 0->178 0->179 0->180 0->181 0->182 0->183 0->184 0->185 0->186 0->187 0->188 0->189 0->190 0->191 0->192 0->193 0->194 0->195 0->196 0->197 0->198 2->1 3->1 5->1 5->1 5->9 5->40 5->75 5->82 5->149 5->156 8->1 9->11 10->1 11->13 13->15 14->1 15->17 16->1 17->19 18->1 19->21 21->23 23->25 25->27 26->1 27->29 28->1 29->31 30->1 31->33 32->1 33->35 34->1 35->37 36->1 36->1 37->1 37->1 39->1 40->42 42->44 44->46 45->1 46->48 47->1 48->50 49->1 50->52 52->54 53->1 54->56 56->58 58->60 60->62 61->1 62->64 63->1 64->66 65->1 66->68 67->1 68->70 69->1 70->72 71->1 71->1 72->1 72->1 74->1 75->77 76->1 77->79 78->1 78->1 79->1 79->1 81->1 82->84 84->86 86->88 88->90 90->92 92->94 94->96 96->98 98->100 100->102 102->104 103->1 104->106 106->108 107->1 108->110 110->112 111->1 112->114 114->116 115->1 116->118 118->120 119->1 120->122 121->1 122->124 124->126 125->1 126->128 127->1 128->130 129->1 130->132 131->1 132->134 134->136 136->138 137->1 138->140 139->1 140->142 141->1 142->144 143->1 144->146 145->1 145->1 146->1 146->1 148->1 149->151 150->1 151->153 152->1 152->1 153->1 153->1 155->1 156->158 157->1 158->160 159->1 160->162 162->164 164->166 166->168 167->1 168->170 169->1 170->172 171->1 172->174 173->1 174->176 176->178 177->1 178->180 179->1 180->182 181->1 182->184 184->186 186->188 187->1 188->190 189->1 190->192 191->1 192->194 193->1 194->196 195->1 196->198 197->1 197->1 198->1 198->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; char * * _global_argv = ( char * * ) 0 ; extern int fcntl ( int filedes , int cmd , ... ) ; void encodeStrings_litStr2_i $ nit ( void ) ; extern int unlink ( char const * filename ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int pthread_mutex_lock ( int * mutex ) ; void encodeStrings_litStr5_i $ nit ( void ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern int ( /* missing proto */ malloc ) ( ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern double ceil ( double x ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern int ( /* missing proto */ free ) ( ) ; extern int ( /* missing proto */ cycleSort ) ( ) ; extern unsigned long strlen ( char const * s ) ; int main ( int _formal_argc , char * * _formal_argv , char * * _formal_envp ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; void encodeStrings_litStr0_i $ nit ( void ) ; int _global_argc = 0 ; void megaInit ( void ) ; char * * _global_envp = ( char * * ) 0 ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; void encodeStrings_litStr3_i $ nit ( void ) ; extern int ( /* missing proto */ printf ) ( ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern int ( /* missing proto */ scanf ) ( ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern double strtod ( char const * str , char const * endptr ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; void encodeStrings_litStr1_i $ nit ( void ) ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; void encodeStrings_litStr4_i $ nit ( void ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; char encodeStrings_litStr5 [ 15 ] ; extern int ( /* missing proto */ display ) ( ) ; extern int open ( char const * filename , int oflag , ... ) ; char encodeStrings_litStr4 [ 17 ] ; extern double sqrt ( double x ) ; char encodeStrings_litStr3 [ 3 ] ; char encodeStrings_litStr2 [ 33 ] ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; char encodeStrings_litStr1 [ 3 ] ; char encodeStrings_litStr0 [ 22 ] ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; void encodeStrings_litStr2_i $ nit ( void ) { { } } void encodeStrings_litStr3_i $ nit ( void ) { { } } void encodeStrings_litStr1_i $ nit ( void ) { { } } void encodeStrings_litStr0_i $ nit ( void ) { { } } int main ( int _formal_argc , char * * _formal_argv , char * * _formal_envp ) { int n ; int i ; int * arr ; int tmp ; int _BARRIER_0 ; { megaInit ( ) ; _global_argc = _formal_argc ; _global_argv = _formal_argv ; _global_envp = _formal_envp ; _BARRIER_0 = 1 ; _1_stringEncoder ( 0 , encodeStrings_litStr0 ) ; printf ( encodeStrings_litStr0 ) ; _1_stringEncoder ( 1 , encodeStrings_litStr1 ) ; scanf ( encodeStrings_litStr1 , & n ) ; _1_stringEncoder ( 2 , encodeStrings_litStr2 ) ; printf ( encodeStrings_litStr2 ) ; tmp = malloc ( ( unsigned long ) n * 4UL ) ; arr = ( int * ) tmp ; i = 0 ; while ( i < n ) { _1_stringEncoder ( 3 , encodeStrings_litStr3 ) ; scanf ( encodeStrings_litStr3 , arr + i ) ; i ++ ; } _1_stringEncoder ( 4 , encodeStrings_litStr4 ) ; printf ( encodeStrings_litStr4 ) ; display ( arr , n ) ; cycleSort ( arr , n ) ; _1_stringEncoder ( 5 , encodeStrings_litStr5 ) ; printf ( encodeStrings_litStr5 ) ; display ( arr , n ) ; free ( arr ) ; return ( 0 ) ; } } void encodeStrings_litStr4_i $ nit ( void ) { { } } void megaInit ( void ) { { encodeStrings_litStr5_i $ nit ( ) ; encodeStrings_litStr4_i $ nit ( ) ; encodeStrings_litStr3_i $ nit ( ) ; encodeStrings_litStr2_i $ nit ( ) ; encodeStrings_litStr1_i $ nit ( ) ; encodeStrings_litStr0_i $ nit ( ) ; } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { case 5 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 4 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 3 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 2 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 1 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 0 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; } } } void encodeStrings_litStr5_i $ nit ( void ) { { } }
>>>Func
METHOD main
METHOD_RETURN int
PARAM int _formal_argc
PARAM char **_formal_argv
PARAM char **_formal_envp
megaInit megaInit()
<operator>.assignment _global_argc = _formal_argc
<operator>.assignment _global_argv = _formal_argv
<operator>.assignment _global_envp = _formal_envp
<operator>.assignment _BARRIER_0 = 1
_1_stringEncoder _1_stringEncoder(0, encodeStrings_litStr0)
scanf scanf(encodeStrings_litStr0, & N)
<operator>.assignment n = 0
RETURN return (0); return (0);
<operator>.lessThan n < N
LITERAL 0 return (0);
_1_stringEncoder _1_stringEncoder(1, encodeStrings_litStr1)
scanf scanf(encodeStrings_litStr1, & K)
_1_stringEncoder _1_stringEncoder(2, encodeStrings_litStr2)
scanf scanf(encodeStrings_litStr2, str)
<operator>.assignment len = strlen(str)
<operator>.assignment min = 100000
_1_stringEncoder _1_stringEncoder(3, encodeStrings_litStr3)
printf printf(encodeStrings_litStr3, n + 1, min + 1)
<operator>.postIncrement n ++
IDENTIFIER K switch(K)
strlen strlen(str)
LITERAL 2 <empty>
<operator>.assignment p[0] = 0
LITERAL 3 <empty>
<operator>.assignment p[0] = 0
LITERAL 4 <empty>
<operator>.assignment p[0] = 0
LITERAL 5 <empty>
<operator>.assignment p[0] = 0
<operator>.addition n + 1
<operator>.addition min + 1
<operator>.lessThan p[0] < K
<operator>.lessThan p[0] < K
<operator>.lessThan p[0] < K
<operator>.lessThan p[0] < K
<operator>.assignment p[1] = 0
<operator>.postIncrement (p[0]) ++
<operator>.assignment p[1] = 0
<operator>.postIncrement (p[0]) ++
<operator>.assignment p[1] = 0
<operator>.postIncrement (p[0]) ++
<operator>.assignment p[1] = 0
<operator>.postIncrement (p[0]) ++
<operator>.lessThan p[1] < K
<operator>.lessThan p[1] < K
<operator>.lessThan p[1] < K
<operator>.lessThan p[1] < K
<operator>.postIncrement (p[1]) ++
<operator>.postIncrement (p[1]) ++
<operator>.postIncrement (p[1]) ++
<operator>.postIncrement (p[1]) ++
<operator>.notEquals p[1] != p[0]
<operator>.notEquals p[1] != p[0]
<operator>.notEquals p[1] != p[0]
<operator>.notEquals p[1] != p[0]
<operator>.assignment i = 0
<operator>.assignment c = 0
<operator>.assignment i = 1
<operator>.assignment p[2] = 0
<operator>.assignment p[2] = 0
<operator>.assignment p[2] = 0
<operator>.lessThan i < len / K
<operator>.lessThan i < len
<operator>.lessThan c < min
<operator>.lessThan p[2] < K
<operator>.lessThan p[2] < K
<operator>.lessThan p[2] < K
<operator>.assignment j = 0
<operator>.postIncrement i ++
<operator>.postIncrement i ++
<operator>.assignment min = c
<operator>.postIncrement (p[2]) ++
<operator>.postIncrement (p[2]) ++
<operator>.postIncrement (p[2]) ++
<operator>.division len / K
<operator>.lessThan j < K
<operator>.notEquals (int )str2[i] != (int )str2[i - 1]
<operator>.notEquals p[2] != p[0]
<operator>.notEquals p[2] != p[0]
<operator>.notEquals p[2] != p[0]
<operator>.assignment str2[i * K + p[j]] = str[i * K + j]
<operator>.postIncrement j ++
<operator>.postIncrement c ++
<operator>.cast (int )str2[i]
<operator>.cast (int )str2[i - 1]
<operator>.notEquals p[2] != p[1]
<operator>.notEquals p[2] != p[1]
<operator>.notEquals p[2] != p[1]
<operator>.assignment i = 0
<operator>.assignment c = 0
<operator>.assignment i = 1
<operator>.assignment p[3] = 0
<operator>.assignment p[3] = 0
<operator>.addition i * K + p[j]
<operator>.addition i * K + j
<operator>.subtraction i - 1
<operator>.lessThan i < len / K
<operator>.lessThan i < len
<operator>.lessThan c < min
<operator>.lessThan p[3] < K
<operator>.lessThan p[3] < K
<operator>.multiplication i * K
<operator>.multiplication i * K
<operator>.assignment j = 0
<operator>.postIncrement i ++
<operator>.postIncrement i ++
<operator>.assignment min = c
<operator>.postIncrement (p[3]) ++
<operator>.postIncrement (p[3]) ++
<operator>.division len / K
<operator>.lessThan j < K
<operator>.notEquals (int )str2[i] != (int )str2[i - 1]
<operator>.notEquals p[3] != p[0]
<operator>.notEquals p[3] != p[0]
<operator>.assignment str2[i * K + p[j]] = str[i * K + j]
<operator>.postIncrement j ++
<operator>.postIncrement c ++
<operator>.cast (int )str2[i]
<operator>.cast (int )str2[i - 1]
<operator>.notEquals p[3] != p[1]
<operator>.notEquals p[3] != p[1]
<operator>.addition i * K + p[j]
<operator>.addition i * K + j
<operator>.subtraction i - 1
<operator>.notEquals p[3] != p[2]
<operator>.notEquals p[3] != p[2]
<operator>.multiplication i * K
<operator>.multiplication i * K
<operator>.assignment i = 0
<operator>.assignment str2[len] = (char)0
<operator>.assignment c = 0
<operator>.assignment i = 1
<operator>.assignment p[4] = 0
<operator>.lessThan i < len / K
<operator>.lessThan i < len
<operator>.lessThan c < min
<operator>.lessThan p[4] < K
<operator>.assignment j = 0
<operator>.postIncrement i ++
<operator>.cast (char)0
<operator>.postIncrement i ++
<operator>.assignment min = c
<operator>.postIncrement (p[4]) ++
<operator>.division len / K
<operator>.lessThan j < K
<operator>.notEquals (int )str2[i] != (int )str2[i - 1]
<operator>.notEquals p[4] != p[0]
<operator>.assignment str2[i * K + p[j]] = str[i * K + j]
<operator>.postIncrement j ++
<operator>.postIncrement c ++
<operator>.cast (int )str2[i]
<operator>.cast (int )str2[i - 1]
<operator>.notEquals p[4] != p[1]
<operator>.addition i * K + p[j]
<operator>.addition i * K + j
<operator>.subtraction i - 1
<operator>.notEquals p[4] != p[2]
<operator>.multiplication i * K
<operator>.multiplication i * K
<operator>.notEquals p[4] != p[3]
<operator>.assignment i = 0
<operator>.assignment c = 0
<operator>.assignment i = 1
<operator>.lessThan i < len / K
<operator>.lessThan i < len
<operator>.lessThan c < min
<operator>.assignment j = 0
<operator>.postIncrement i ++
<operator>.postIncrement i ++
<operator>.assignment min = c
<operator>.division len / K
<operator>.lessThan j < K
<operator>.notEquals (int )str2[i] != (int )str2[i - 1]
<operator>.assignment str2[i * K + p[j]] = str[i * K + j]
<operator>.postIncrement j ++
<operator>.postIncrement c ++
<operator>.cast (int )str2[i]
<operator>.cast (int )str2[i - 1]
<operator>.addition i * K + p[j]
<operator>.addition i * K + j
<operator>.subtraction i - 1
<operator>.multiplication i * K
<operator>.multiplication i * K
<operator>.addressOf & K
<operator>.indirectIndexAccess p[0]
<operator>.indirectIndexAccess p[0]
<operator>.indirectIndexAccess p[0]
<operator>.indirectIndexAccess p[0]
<operator>.indirectIndexAccess p[0]
<operator>.indirectIndexAccess p[0]
<operator>.indirectIndexAccess p[0]
<operator>.indirectIndexAccess p[0]
<operator>.indirectIndexAccess p[1]
<operator>.indirectIndexAccess p[0]
<operator>.indirectIndexAccess p[1]
<operator>.indirectIndexAccess p[0]
<operator>.indirectIndexAccess p[1]
<operator>.indirectIndexAccess p[0]
<operator>.indirectIndexAccess p[1]
<operator>.indirectIndexAccess p[0]
<operator>.indirectIndexAccess p[1]
<operator>.indirectIndexAccess p[1]
<operator>.indirectIndexAccess p[1]
<operator>.indirectIndexAccess p[1]
<operator>.indirectIndexAccess p[1]
<operator>.indirectIndexAccess p[1]
<operator>.indirectIndexAccess p[1]
<operator>.indirectIndexAccess p[1]
<operator>.indirectIndexAccess p[1]
<operator>.indirectIndexAccess p[0]
<operator>.indirectIndexAccess p[1]
<operator>.indirectIndexAccess p[0]
<operator>.indirectIndexAccess p[1]
<operator>.indirectIndexAccess p[0]
<operator>.indirectIndexAccess p[1]
<operator>.indirectIndexAccess p[0]
<operator>.indirectIndexAccess p[2]
<operator>.indirectIndexAccess p[2]
<operator>.indirectIndexAccess p[2]
<operator>.indirectIndexAccess p[2]
<operator>.indirectIndexAccess p[2]
<operator>.indirectIndexAccess p[2]
<operator>.indirectIndexAccess p[2]
<operator>.indirectIndexAccess p[2]
<operator>.indirectIndexAccess p[2]
<operator>.indirectIndexAccess p[2]
<operator>.indirectIndexAccess p[0]
<operator>.indirectIndexAccess p[2]
<operator>.indirectIndexAccess p[0]
<operator>.indirectIndexAccess p[2]
<operator>.indirectIndexAccess p[0]
<operator>.indirectIndexAccess str2[i * K + p[j]]
<operator>.indirectIndexAccess str[i * K + j]
UNKNOWN int int
<operator>.indirectIndexAccess str2[i]
UNKNOWN int int
<operator>.indirectIndexAccess str2[i - 1]
<operator>.indirectIndexAccess p[2]
<operator>.indirectIndexAccess p[1]
<operator>.indirectIndexAccess p[2]
<operator>.indirectIndexAccess p[1]
<operator>.indirectIndexAccess p[2]
<operator>.indirectIndexAccess p[1]
<operator>.indirectIndexAccess p[j]
<operator>.indirectIndexAccess p[3]
<operator>.indirectIndexAccess p[3]
<operator>.indirectIndexAccess p[3]
<operator>.indirectIndexAccess p[3]
<operator>.indirectIndexAccess p[3]
<operator>.indirectIndexAccess p[3]
<operator>.indirectIndexAccess p[3]
<operator>.indirectIndexAccess p[0]
<operator>.indirectIndexAccess p[3]
<operator>.indirectIndexAccess p[0]
<operator>.indirectIndexAccess str2[i * K + p[j]]
<operator>.indirectIndexAccess str[i * K + j]
UNKNOWN int int
<operator>.indirectIndexAccess str2[i]
UNKNOWN int int
<operator>.indirectIndexAccess str2[i - 1]
<operator>.indirectIndexAccess p[3]
<operator>.indirectIndexAccess p[1]
<operator>.indirectIndexAccess p[3]
<operator>.indirectIndexAccess p[1]
<operator>.indirectIndexAccess p[j]
<operator>.indirectIndexAccess p[3]
<operator>.indirectIndexAccess p[2]
<operator>.indirectIndexAccess p[3]
<operator>.indirectIndexAccess p[2]
<operator>.indirectIndexAccess str2[len]
<operator>.indirectIndexAccess p[4]
UNKNOWN char char
<operator>.indirectIndexAccess p[4]
<operator>.indirectIndexAccess p[4]
<operator>.indirectIndexAccess p[4]
<operator>.indirectIndexAccess p[0]
<operator>.indirectIndexAccess str2[i * K + p[j]]
<operator>.indirectIndexAccess str[i * K + j]
UNKNOWN int int
<operator>.indirectIndexAccess str2[i]
UNKNOWN int int
<operator>.indirectIndexAccess str2[i - 1]
<operator>.indirectIndexAccess p[4]
<operator>.indirectIndexAccess p[1]
<operator>.indirectIndexAccess p[j]
<operator>.indirectIndexAccess p[4]
<operator>.indirectIndexAccess p[2]
<operator>.indirectIndexAccess p[4]
<operator>.indirectIndexAccess p[3]
<operator>.indirectIndexAccess str2[i * K + p[j]]
<operator>.indirectIndexAccess str[i * K + j]
UNKNOWN int int
<operator>.indirectIndexAccess str2[i]
UNKNOWN int int
<operator>.indirectIndexAccess str2[i - 1]
<operator>.indirectIndexAccess p[j]
>>>PDG&302 0->2 0->3 0->4 0->5 0->6 0->7 0->8 0->9 0->10 0->11 0->12 0->13 0->14 0->15 0->16 0->17 0->18 0->19 0->21 0->22 0->23 0->24 0->25 0->26 0->27 0->28 0->29 0->30 0->31 0->32 0->33 0->34 0->35 0->36 0->37 0->38 0->39 0->40 0->41 0->43 0->45 0->47 0->49 0->50 0->51 0->52 0->61 0->62 0->63 0->64 0->65 0->66 0->67 0->68 0->69 0->70 0->71 0->72 0->73 0->74 0->75 0->76 0->80 0->81 0->87 0->88 0->94 0->95 0->96 0->97 0->98 0->100 0->101 0->102 0->103 0->104 0->105 0->106 0->107 0->108 0->109 0->110 0->111 0->112 0->115 0->116 0->121 0->122 0->128 0->129 0->132 0->133 0->134 0->135 0->136 0->137 0->138 0->139 0->140 0->141 0->142 0->143 0->144 0->145 0->146 0->147 0->149 0->150 0->154 0->155 0->160 0->161 0->163 0->164 0->166 0->167 0->168 0->169 0->170 0->171 0->172 0->173 0->174 0->175 0->176 0->177 0->180 0->181 0->185 0->186 0->187 0->188 2->6 3->7 4->8 5->1 6->1 6->1 6->1 7->1 7->1 7->1 8->1 8->1 8->1 9->1 9->1 10->1 11->1 11->1 11->14 12->1 12->14 13->1 14->1 14->1 14->1 14->14 14->16 14->17 14->18 14->19 14->20 14->21 14->22 14->23 14->23 14->24 14->24 14->26 14->28 14->30 14->32 14->34 14->35 14->35 14->36 14->37 14->38 14->39 14->40 14->189 14->190 14->191 14->192 14->193 14->194 14->195 14->196 14->197 15->13 16->1 17->1 17->1 17->37 17->38 17->39 17->40 17->49 17->50 17->51 17->52 17->70 17->71 17->72 17->80 17->81 17->105 17->106 17->107 17->108 17->115 17->116 17->132 17->133 17->142 17->149 17->150 17->163 17->164 17->176 17->177 17->187 17->188 18->1 19->1 19->26 20->1 20->1 20->1 20->80 20->115 20->149 20->176 21->1 21->23 21->36 21->69 21->104 21->141 21->171 22->1 22->23 23->1 23->1 23->1 23->1 23->22 24->1 24->14 26->1 26->19 26->20 26->86 26->120 26->153 26->179 28->1 28->37 30->1 30->38 32->1 32->39 34->1 34->40 36->1 37->1 37->1 37->1 37->17 37->37 37->38 37->39 37->40 37->41 37->42 37->42 37->49 37->49 37->57 37->194 37->198 37->199 37->206 38->1 38->1 38->1 38->17 38->37 38->38 38->39 38->40 38->43 38->44 38->44 38->50 38->50 38->58 38->195 38->200 38->201 38->207 39->1 39->1 39->1 39->17 39->37 39->38 39->39 39->40 39->45 39->46 39->46 39->51 39->51 39->59 39->196 39->202 39->203 39->208 40->1 40->1 40->1 40->17 40->37 40->38 40->39 40->40 40->47 40->48 40->48 40->52 40->52 40->60 40->197 40->204 40->205 40->209 41->1 41->49 42->1 42->37 43->1 43->50 44->1 44->38 45->1 45->51 46->1 46->39 47->1 47->52 48->1 48->40 49->1 49->1 49->37 49->49 49->53 49->57 49->57 49->80 49->206 49->210 49->214 49->215 50->1 50->1 50->38 50->50 50->54 50->58 50->58 50->70 50->207 50->211 50->216 50->217 51->1 51->1 51->39 51->51 51->55 51->59 51->59 51->71 51->208 51->212 51->218 51->219 52->1 52->1 52->40 52->52 52->56 52->60 52->60 52->72 52->209 52->213 52->220 52->221 53->1 53->49 54->1 54->50 55->1 55->51 56->1 56->52 57->1 57->42 57->53 57->61 57->62 57->63 57->67 57->68 57->69 57->80 58->1 58->44 58->54 58->64 58->70 58->83 58->91 58->222 58->225 59->1 59->46 59->55 59->65 59->71 59->84 59->92 59->223 59->226 60->1 60->48 60->56 60->66 60->72 60->85 60->93 60->224 60->227 61->1 61->67 62->1 62->69 62->88 63->1 63->68 64->1 64->70 65->1 65->71 66->1 66->72 67->1 67->1 67->67 67->73 67->74 67->74 67->80 67->81 67->107 68->1 68->1 68->1 68->68 68->75 68->80 68->82 68->89 68->90 68->101 68->101 68->239 68->240 68->241 68->242 69->1 69->1 69->23 69->36 69->76 69->76 70->1 70->1 70->50 70->70 70->77 70->83 70->83 70->115 70->225 70->228 70->231 70->232 71->1 71->1 71->51 71->71 71->78 71->84 71->84 71->105 71->226 71->229 71->233 71->234 72->1 72->1 72->52 72->72 72->79 72->85 72->85 72->106 72->227 72->230 72->235 72->236 73->1 73->81 74->1 74->67 75->1 75->68 76->1 76->1 76->23 76->36 76->69 77->1 77->70 78->1 78->71 79->1 79->72 80->49 80->67 80->67 80->68 80->81 81->1 81->1 81->80 81->81 81->86 81->87 81->87 81->99 81->100 81->100 81->107 81->107 81->108 81->237 81->238 81->249 82->1 82->1 82->1 82->88 83->1 83->44 83->58 83->77 83->91 83->91 83->243 83->244 84->1 84->46 84->59 84->78 84->92 84->92 84->118 84->245 84->246 85->1 85->48 85->60 85->79 85->93 85->93 85->119 85->247 85->248 86->1 86->1 86->1 87->1 87->81 88->1 88->69 89->1 90->1 91->1 91->54 91->77 91->94 91->95 91->96 91->102 91->103 91->104 91->115 92->1 92->55 92->78 92->97 92->105 92->125 92->130 92->250 92->252 93->1 93->56 93->79 93->98 93->106 93->126 93->131 93->251 93->253 94->1 94->102 95->1 95->104 95->122 96->1 96->103 97->1 97->105 98->1 98->106 99->1 100->1 101->75 102->1 102->1 102->102 102->109 102->110 102->110 102->115 102->116 102->132 103->1 103->1 103->1 103->103 103->111 103->115 103->117 103->123 103->124 103->129 103->129 103->262 103->263 103->264 103->265 104->1 104->1 104->23 104->36 104->112 104->112 105->1 105->1 105->71 105->105 105->113 105->118 105->118 105->149 105->252 105->254 105->256 105->257 106->1 106->1 106->72 106->106 106->114 106->119 106->119 106->142 106->253 106->255 106->258 106->259 107->99 107->99 107->108 107->108 108->74 108->81 108->100 108->100 108->107 109->1 109->116 110->1 110->102 111->1 111->103 112->1 112->1 112->23 112->36 112->104 113->1 113->105 114->1 114->106 115->70 115->102 115->102 115->103 115->116 116->1 116->1 116->115 116->116 116->120 116->121 116->121 116->127 116->128 116->128 116->132 116->132 116->133 116->260 116->261 116->270 117->1 117->1 117->1 117->122 118->1 118->46 118->59 118->84 118->113 118->125 118->125 118->266 118->267 119->1 119->48 119->60 119->85 119->114 119->126 119->126 119->152 119->268 119->269 120->1 120->1 120->1 121->1 121->116 122->1 122->104 123->1 124->1 125->1 125->55 125->92 125->113 125->130 125->130 125->271 125->272 126->1 126->56 126->93 126->114 126->131 126->131 126->158 126->273 126->274 127->1 128->1 129->111 130->1 130->78 130->113 130->134 130->135 130->136 130->137 130->139 130->140 130->141 130->145 130->149 130->275 130->277 131->1 131->79 131->114 131->138 131->142 131->162 131->165 131->276 131->278 132->127 132->127 132->133 132->133 133->110 133->116 133->128 133->128 133->132 134->1 134->139 135->1 135->1 135->1 136->1 136->141 136->155 137->1 137->140 138->1 138->142 139->1 139->1 139->139 139->143 139->144 139->144 139->149 139->150 139->163 140->1 140->1 140->1 140->140 140->146 140->149 140->151 140->156 140->157 140->161 140->161 140->284 140->285 140->286 140->287 141->1 141->1 141->23 141->36 141->147 141->147 142->1 142->1 142->106 142->142 142->148 142->152 142->152 142->176 142->278 142->279 142->280 142->281 143->1 143->150 144->1 144->139 146->1 146->140 147->1 147->1 147->23 147->36 147->141 148->1 148->142 149->105 149->139 149->139 149->140 149->150 150->1 150->1 150->149 150->150 150->153 150->154 150->154 150->159 150->160 150->160 150->163 150->163 150->164 150->282 150->283 150->290 151->1 151->1 151->1 151->155 152->1 152->48 152->60 152->85 152->119 152->148 152->158 152->158 152->288 152->289 153->1 153->1 153->1 154->1 154->150 155->1 155->141 156->1 157->1 158->1 158->56 158->93 158->126 158->148 158->162 158->162 158->291 158->292 159->1 160->1 161->146 162->1 162->79 162->131 162->148 162->165 162->165 162->293 162->294 163->159 163->159 163->164 163->164 164->144 164->150 164->160 164->160 164->163 165->1 165->114 165->148 165->166 165->167 165->168 165->169 165->170 165->171 165->176 166->1 166->169 167->1 167->171 167->181 168->1 168->170 169->1 169->1 169->169 169->172 169->173 169->173 169->176 169->177 169->187 170->1 170->1 170->1 170->170 170->174 170->176 170->178 170->182 170->183 170->186 170->186 170->297 170->298 170->299 170->300 171->1 171->1 171->23 171->36 171->175 171->175 172->1 172->177 173->1 173->169 174->1 174->170 175->1 175->1 175->23 175->36 175->171 176->142 176->169 176->169 176->170 176->177 177->1 177->1 177->176 177->177 177->179 177->180 177->180 177->184 177->185 177->185 177->187 177->187 177->188 177->295 177->296 177->301 178->1 178->1 178->1 178->181 179->1 179->1 179->1 180->1 180->177 181->1 181->171 182->1 183->1 184->1 185->1 186->174 187->184 187->184 187->188 187->188 188->173 188->177 188->185 188->185 188->187
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern void exit ( int status ) ; extern int pthread_cond_signal ( int * cond ) ; extern int fclose ( void * stream ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int close ( int filedes ) ; char * * _global_argv = ( char * * ) 0 ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; void encodeStrings_litStr2_i $ nit ( void ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int pthread_mutex_lock ( int * mutex ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern int ( /* missing proto */ strlen ) ( ) ; int main ( int _formal_argc , char * * _formal_argv , char * * _formal_envp ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; void encodeStrings_litStr0_i $ nit ( void ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; int _global_argc = 0 ; void megaInit ( void ) ; char * * _global_envp = ( char * * ) 0 ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; void encodeStrings_litStr3_i $ nit ( void ) ; extern int ( /* missing proto */ printf ) ( ) ; extern int ( /* missing proto */ scanf ) ( ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; void encodeStrings_litStr1_i $ nit ( void ) ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; char encodeStrings_litStr3 [ 14 ] ; char encodeStrings_litStr2 [ 4 ] ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; char encodeStrings_litStr1 [ 4 ] ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; char encodeStrings_litStr0 [ 4 ] ; void encodeStrings_litStr0_i $ nit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { case 3 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 2 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 1 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 0 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; } } } void encodeStrings_litStr1_i $ nit ( void ) { { } } void megaInit ( void ) { { encodeStrings_litStr3_i $ nit ( ) ; encodeStrings_litStr2_i $ nit ( ) ; encodeStrings_litStr1_i $ nit ( ) ; encodeStrings_litStr0_i $ nit ( ) ; } } void encodeStrings_litStr3_i $ nit ( void ) { { } } void encodeStrings_litStr2_i $ nit ( void ) { { } } int main ( int _formal_argc , char * * _formal_argv , char * * _formal_envp ) { int N ; int K ; char str [ 1050 ] ; char str2 [ 1050 ] ; int p [ 10 ] ; int i ; int j ; int len ; int n ; int c ; int min ; int _BARRIER_0 ; { megaInit ( ) ; _global_argc = _formal_argc ; _global_argv = _formal_argv ; _global_envp = _formal_envp ; _BARRIER_0 = 1 ; _1_stringEncoder ( 0 , encodeStrings_litStr0 ) ; scanf ( encodeStrings_litStr0 , & N ) ; n = 0 ; while ( n < N ) { _1_stringEncoder ( 1 , encodeStrings_litStr1 ) ; scanf ( encodeStrings_litStr1 , & K ) ; _1_stringEncoder ( 2 , encodeStrings_litStr2 ) ; scanf ( encodeStrings_litStr2 , str ) ; len = strlen ( str ) ; min = 100000 ; switch ( K ) { case 2 : p [ 0 ] = 0 ; while ( p [ 0 ] < K ) { p [ 1 ] = 0 ; while ( p [ 1 ] < K ) { if ( p [ 1 ] != p [ 0 ] ) { i = 0 ; while ( i < len / K ) { j = 0 ; while ( j < K ) { str2 [ i * K + p [ j ] ] = str [ i * K + j ] ; j ++ ; } i ++ ; } c = 0 ; i = 1 ; while ( i < len ) { if ( ( int ) str2 [ i ] != ( int ) str2 [ i - 1 ] ) { c ++ ; } i ++ ; } if ( c < min ) { min = c ; } } ( p [ 1 ] ) ++ ; } ( p [ 0 ] ) ++ ; } break ; case 3 : p [ 0 ] = 0 ; while ( p [ 0 ] < K ) { p [ 1 ] = 0 ; while ( p [ 1 ] < K ) { if ( p [ 1 ] != p [ 0 ] ) { p [ 2 ] = 0 ; while ( p [ 2 ] < K ) { if ( p [ 2 ] != p [ 0 ] ) { if ( p [ 2 ] != p [ 1 ] ) { i = 0 ; while ( i < len / K ) { j = 0 ; while ( j < K ) { str2 [ i * K + p [ j ] ] = str [ i * K + j ] ; j ++ ; } i ++ ; } c = 0 ; i = 1 ; while ( i < len ) { if ( ( int ) str2 [ i ] != ( int ) str2 [ i - 1 ] ) { c ++ ; } i ++ ; } if ( c < min ) { min = c ; } } } ( p [ 2 ] ) ++ ; } } ( p [ 1 ] ) ++ ; } ( p [ 0 ] ) ++ ; } break ; case 4 : p [ 0 ] = 0 ; while ( p [ 0 ] < K ) { p [ 1 ] = 0 ; while ( p [ 1 ] < K ) { if ( p [ 1 ] != p [ 0 ] ) { p [ 2 ] = 0 ; while ( p [ 2 ] < K ) { if ( p [ 2 ] != p [ 0 ] ) { if ( p [ 2 ] != p [ 1 ] ) { p [ 3 ] = 0 ; while ( p [ 3 ] < K ) { if ( p [ 3 ] != p [ 0 ] ) { if ( p [ 3 ] != p [ 1 ] ) { if ( p [ 3 ] != p [ 2 ] ) { i = 0 ; while ( i < len / K ) { j = 0 ; while ( j < K ) { str2 [ i * K + p [ j ] ] = str [ i * K + j ] ; j ++ ; } i ++ ; } str2 [ len ] = ( char ) 0 ; c = 0 ; i = 1 ; while ( i < len ) { if ( ( int ) str2 [ i ] != ( int ) str2 [ i - 1 ] ) { c ++ ; } i ++ ; } if ( c < min ) { min = c ; } } } } ( p [ 3 ] ) ++ ; } } } ( p [ 2 ] ) ++ ; } } ( p [ 1 ] ) ++ ; } ( p [ 0 ] ) ++ ; } break ; case 5 : p [ 0 ] = 0 ; while ( p [ 0 ] < K ) { p [ 1 ] = 0 ; while ( p [ 1 ] < K ) { if ( p [ 1 ] != p [ 0 ] ) { p [ 2 ] = 0 ; while ( p [ 2 ] < K ) { if ( p [ 2 ] != p [ 0 ] ) { if ( p [ 2 ] != p [ 1 ] ) { p [ 3 ] = 0 ; while ( p [ 3 ] < K ) { if ( p [ 3 ] != p [ 0 ] ) { if ( p [ 3 ] != p [ 1 ] ) { if ( p [ 3 ] != p [ 2 ] ) { p [ 4 ] = 0 ; while ( p [ 4 ] < K ) { if ( p [ 4 ] != p [ 0 ] ) { if ( p [ 4 ] != p [ 1 ] ) { if ( p [ 4 ] != p [ 2 ] ) { if ( p [ 4 ] != p [ 3 ] ) { i = 0 ; while ( i < len / K ) { j = 0 ; while ( j < K ) { str2 [ i * K + p [ j ] ] = str [ i * K + j ] ; j ++ ; } i ++ ; } c = 0 ; i = 1 ; while ( i < len ) { if ( ( int ) str2 [ i ] != ( int ) str2 [ i - 1 ] ) { c ++ ; } i ++ ; } if ( c < min ) { min = c ; } } } } } ( p [ 4 ] ) ++ ; } } } } ( p [ 3 ] ) ++ ; } } } ( p [ 2 ] ) ++ ; } } ( p [ 1 ] ) ++ ; } ( p [ 0 ] ) ++ ; } break ; } _1_stringEncoder ( 3 , encodeStrings_litStr3 ) ; printf ( encodeStrings_litStr3 , n + 1 , min + 1 ) ; n ++ ; } return ( 0 ) ; } }
>>>Func
METHOD stringCompare
METHOD_RETURN int
PARAM char *str1
PARAM char *str2
<operator>.assignment i = 0
<operator>.assignment flag = 0
LITERAL 1 while (1)
<operator>.equals flag == 0
<operator>.postIncrement i ++
<operator>.notEquals (int )*(str1 + i) != 0
<operator>.notEquals (int )*(str1 + i) != (int )*(str2 + i)
<operator>.equals (int )*(str1 + i) == 0
RETURN return (0); return (0);
<operator>.assignment flag = 1
LITERAL 0 return (0);
<operator>.logicalNot ! ((int )*(str2 + i) != 0)
<operator>.cast (int )*(str1 + i)
<operator>.equals (int )*(str2 + i) == 0
RETURN return (0); return (0);
RETURN return (1); return (1);
LITERAL 0 return (0);
<operator>.addition str1 + i
<operator>.notEquals (int )*(str2 + i) != 0
<operator>.addition str1 + i
<operator>.addition str2 + i
<operator>.addition str1 + i
<operator>.cast (int )*(str2 + i)
LITERAL 1 return (1);
RETURN return (0); return (0);
LITERAL 0 return (0);
<operator>.addition str2 + i
<operator>.addition str2 + i
<operator>.cast (int )*(str1 + i)
<operator>.cast (int )*(str1 + i)
<operator>.cast (int )*(str2 + i)
UNKNOWN int int
<operator>.indirection *(str1 + i)
UNKNOWN int int
<operator>.indirection *(str1 + i)
UNKNOWN int int
<operator>.indirection *(str2 + i)
UNKNOWN int int
<operator>.indirection *(str1 + i)
<operator>.cast (int )*(str2 + i)
UNKNOWN int int
<operator>.indirection *(str2 + i)
UNKNOWN int int
<operator>.indirection *(str2 + i)
>>>PDG&48 0->2 0->3 0->4 0->5 0->6 0->7 0->8 0->9 0->11 0->12 0->13 0->14 0->17 0->18 0->19 0->20 0->21 0->22 0->23 0->24 0->25 0->27 0->28 0->29 0->30 0->31 2->21 2->25 3->24 3->30 3->31 4->1 4->8 4->21 4->23 4->24 4->25 4->30 4->31 5->1 5->7 7->1 7->1 7->11 7->12 7->16 7->25 7->41 7->42 8->1 8->21 8->23 8->24 8->25 8->30 8->31 9->1 9->15 9->22 9->31 9->43 9->46 9->47 10->1 10->8 10->9 10->13 10->21 10->32 10->35 10->36 11->1 11->1 11->17 11->18 11->26 11->30 11->44 11->45 12->1 13->1 13->7 14->12 15->1 15->1 15->10 15->23 15->24 15->33 15->34 15->37 15->38 15->39 15->40 16->1 17->1 17->1 17->19 17->28 18->1 19->1 20->18 22->15 22->15 25->1 26->1 27->19 28->1 29->28 30->1 30->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; int stringCompare ( char * str1 , char * str2 ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; void main ( void ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int printf ( char const * format , ... ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; int stringCompare ( char * str1 , char * str2 ) { int i ; int flag ; { i = 0 ; flag = 0 ; while ( 1 ) { if ( ( int ) * ( str1 + i ) != 0 ) { if ( ! ( ( int ) * ( str2 + i ) != 0 ) ) { break ; } } else { break ; } if ( ( int ) * ( str1 + i ) != ( int ) * ( str2 + i ) ) { flag = 1 ; break ; } i ++ ; } if ( flag == 0 ) { if ( ( int ) * ( str1 + i ) == 0 ) { if ( ( int ) * ( str2 + i ) == 0 ) { return ( 1 ) ; } else { return ( 0 ) ; } } else { return ( 0 ) ; } } else { return ( 0 ) ; } } } void megaInit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { } } } void main ( void ) { { megaInit ( ) ; } }
>>>Func
METHOD fill_overlap
METHOD_RETURN void
PARAM char *needle
PARAM int len_needle
PARAM int *overlap
<operator>.assignment len = 0
<operator>.assignment i = 0
<operator>.assignment *(overlap + 0) = 0
<operator>.assignment i = 1
RETURN return; return;
<operator>.lessThan i < len_needle
<operator>.addition overlap + 0
<operator>.equals (int )*(needle + i) == (int )*(needle + len)
<operator>.postIncrement len ++
<operator>.assignment tmp = i
<operator>.postIncrement i ++
<operator>.assignment *(overlap + tmp) = len
<operator>.cast (int )*(needle + i)
<operator>.cast (int )*(needle + len)
IDENTIFIER len if (len)
<operator>.addition needle + i
<operator>.addition needle + len
<operator>.addition overlap + tmp
<operator>.assignment len = *(overlap + (len - 1))
<operator>.assignment tmp___0 = i
<operator>.postIncrement i ++
<operator>.assignment *(overlap + tmp___0) = 0
<operator>.addition overlap + (len - 1)
<operator>.subtraction len - 1
<operator>.addition overlap + tmp___0
UNKNOWN int int
<operator>.indirection *(needle + i)
UNKNOWN int int
<operator>.indirection *(needle + len)
<operator>.indirection *(overlap + tmp)
<operator>.indirection *(overlap + (len - 1))
<operator>.indirection *(overlap + tmp___0)
>>>PDG&37 0->2 0->3 0->4 0->5 0->6 0->7 0->8 0->9 0->10 0->11 0->13 0->14 0->15 0->16 0->19 0->20 0->21 0->22 0->24 0->25 0->26 0->27 0->28 0->29 2->1 2->20 3->10 4->11 4->22 4->27 4->29 5->1 5->1 5->13 5->21 5->28 6->1 7->1 7->1 8->1 8->10 9->1 10->1 10->1 10->1 10->10 10->12 10->14 10->15 10->17 10->18 10->20 10->20 10->21 10->24 10->25 10->30 10->31 10->32 10->33 11->1 12->1 12->1 12->1 12->13 12->14 12->15 12->16 12->22 12->23 12->24 12->25 12->26 12->27 12->28 12->29 12->34 12->35 12->36 13->1 13->16 13->21 13->28 14->1 14->22 15->1 15->10 16->1 16->1 16->1 17->1 18->1 21->1 21->1 22->1 22->1 23->1 23->1 23->1 23->13 23->21 23->28 24->1 24->29 25->1 25->10 26->1 26->1 27->1 27->1 28->27 28->27 29->1 29->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; void main ( void ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int printf ( char const * format , ... ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; void fill_overlap ( char * needle , int len_needle , int * overlap ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; void fill_overlap ( char * needle , int len_needle , int * overlap ) { int len ; int i ; int tmp ; int tmp___0 ; { len = 0 ; i = 0 ; * ( overlap + 0 ) = 0 ; i = 1 ; while ( i < len_needle ) { if ( ( int ) * ( needle + i ) == ( int ) * ( needle + len ) ) { len ++ ; tmp = i ; i ++ ; * ( overlap + tmp ) = len ; } else if ( len ) { len = * ( overlap + ( len - 1 ) ) ; } else { tmp___0 = i ; i ++ ; * ( overlap + tmp___0 ) = 0 ; } } return ; } } void megaInit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { } } } void main ( void ) { { megaInit ( ) ; } }
>>>Func
METHOD main
METHOD_RETURN int
PARAM int _formal_argc
PARAM char **_formal_argv
PARAM char **_formal_envp
megaInit megaInit()
<operator>.assignment _global_argc = _formal_argc
<operator>.assignment _global_argv = _formal_argv
<operator>.assignment _global_envp = _formal_envp
<operator>.assignment _BARRIER_0 = 1
_1_stringEncoder _1_stringEncoder(0, encodeStrings_litStr0)
scanf scanf(encodeStrings_litStr0, & n)
<operator>.assignment i = 0
RETURN return (0); return (0);
<operator>.lessThan i < n
LITERAL 0 return (0);
_1_stringEncoder _1_stringEncoder(1, encodeStrings_litStr1)
scanf scanf(encodeStrings_litStr1, & ns)
<operator>.assignment tmp = getchar()
<operator>.assignment c = (char )tmp
<operator>.assignment j = 0
_1_stringEncoder _1_stringEncoder(2, encodeStrings_litStr2)
scanf scanf(encodeStrings_litStr2, & nq)
<operator>.assignment tmp___2 = getchar()
<operator>.assignment c = (char )tmp___2
<operator>.assignment j = 0
<operator>.assignment dini = 0
<operator>.assignment switches = 0
_1_stringEncoder _1_stringEncoder(3, encodeStrings_litStr3)
printf printf(encodeStrings_litStr3, i + 1, switches - 1)
<operator>.postIncrement i ++
<operator>.lessThan j < ns
<operator>.lessThan j < nq
<operator>.lessThan dini < nq
<operator>.equals switches == 0
<operator>.cast (char )tmp
<operator>.assignment s[j] = 0
<operator>.assignment p = 1
<operator>.postIncrement j ++
<operator>.cast (char )tmp___2
<operator>.assignment q[j] = 0
<operator>.assignment p = 1
<operator>.postIncrement j ++
<operator>.assignment melhor = -1
<operator>.assignment j = 0
<operator>.assignment dini2 = dini
<operator>.assignment dini = melhor
<operator>.postIncrement switches ++
<operator>.postIncrement switches ++
<operator>.addition i + 1
<operator>.subtraction switches - 1
LITERAL 1 while (1)
LITERAL 1 while (1)
LITERAL 1 while (1)
<operator>.assignment tmp___1 = getchar()
<operator>.assignment c = (char )tmp___1
<operator>.assignment tmp___0 = p
<operator>.postIncrement p ++
<operator>.assignmentPlus s[j] += ((int )c * (int )c) * tmp___0
<operator>.assignment tmp___4 = getchar()
<operator>.assignment c = (char )tmp___4
<operator>.assignment tmp___3 = p
<operator>.postIncrement p ++
<operator>.assignmentPlus q[j] += ((int )c * (int )c) * tmp___3
<operator>.minus -1
<operator>.postIncrement j ++
<operator>.assignment dini2 = dini
<operator>.logicalNot ! ((int )c != 10)
<operator>.logicalNot ! ((int )c != 10)
<operator>.lessThan j < ns
<operator>.equals s[j] == q[dini2]
LITERAL 1 while (1)
<operator>.equals melhor == -1
<operator>.lessThan melhor < dini2
<operator>.cast (char )tmp___1
<operator>.multiplication ((int )c * (int )c) * tmp___0
<operator>.cast (char )tmp___4
<operator>.multiplication ((int )c * (int )c) * tmp___3
<operator>.postIncrement dini2 ++
<operator>.assignment melhor = dini2
<operator>.assignment melhor = dini2
<operator>.notEquals (int )c != 10
<operator>.multiplication (int )c * (int )c
<operator>.notEquals (int )c != 10
<operator>.multiplication (int )c * (int )c
<operator>.logicalNot ! (dini2 < nq)
<operator>.notEquals s[j] != q[dini2]
<operator>.minus -1
<operator>.cast (int )c
<operator>.cast (int )c
<operator>.cast (int )c
<operator>.cast (int )c
<operator>.cast (int )c
<operator>.cast (int )c
<operator>.lessThan dini2 < nq
<operator>.logicalNot ! (dini2 < nq)
<operator>.lessThan dini2 < nq
<operator>.addressOf & ns
getchar getchar()
<operator>.addressOf & nq
getchar getchar()
UNKNOWN char char
UNKNOWN char char
<operator>.indirectIndexAccess s[j]
<operator>.indirectIndexAccess q[j]
getchar getchar()
<operator>.indirectIndexAccess s[j]
getchar getchar()
<operator>.indirectIndexAccess q[j]
UNKNOWN char char
UNKNOWN char char
<operator>.indirectIndexAccess s[j]
<operator>.indirectIndexAccess q[dini2]
UNKNOWN int int
UNKNOWN int int
UNKNOWN int int
UNKNOWN int int
UNKNOWN int int
UNKNOWN int int
<operator>.indirectIndexAccess s[j]
<operator>.indirectIndexAccess q[dini2]
>>>PDG&121 0->2 0->3 0->4 0->5 0->6 0->7 0->8 0->9 0->10 0->11 0->12 0->13 0->14 0->15 0->16 0->17 0->18 0->19 0->20 0->21 0->22 0->23 0->24 0->25 0->26 0->27 0->28 0->29 0->30 0->31 0->32 0->33 0->34 0->35 0->36 0->37 0->38 0->39 0->40 0->41 0->42 0->44 0->45 0->46 0->47 0->48 0->49 0->50 0->51 0->52 0->53 0->54 0->55 0->56 0->57 0->59 0->60 0->61 0->62 0->64 0->65 0->66 0->69 0->71 0->72 0->73 0->74 0->75 0->76 0->77 0->78 0->79 0->80 0->81 0->82 0->83 0->84 0->87 0->88 0->89 0->90 0->91 0->92 0->93 0->94 0->96 2->6 3->7 4->8 5->1 6->1 6->1 6->1 7->1 7->1 7->1 8->1 8->1 8->1 9->1 9->1 10->1 11->1 11->1 11->14 12->1 12->14 13->1 14->1 14->1 14->1 14->14 14->16 14->17 14->18 14->19 14->20 14->21 14->22 14->23 14->24 14->25 14->26 14->27 14->28 14->29 14->29 14->30 14->30 14->31 14->32 14->33 14->34 14->35 14->39 14->49 14->49 14->50 14->97 14->98 14->99 14->100 14->101 14->102 15->13 16->1 17->1 17->1 17->31 17->69 18->1 18->19 18->35 19->1 19->1 20->31 21->1 22->1 22->1 22->32 22->33 22->94 22->96 23->1 23->1 23->24 23->39 24->1 24->1 24->1 25->1 25->32 26->1 26->33 27->1 27->34 27->47 28->1 28->29 29->1 29->1 29->1 29->1 29->28 30->1 30->14 31->1 31->1 31->17 31->31 31->36 31->37 31->38 31->38 31->54 31->55 31->67 31->69 31->74 31->81 31->88 31->103 31->105 31->109 31->113 32->1 32->1 32->32 32->33 32->40 32->41 32->42 32->42 32->59 32->60 32->68 32->76 32->83 32->91 32->104 32->107 32->110 32->116 33->1 33->1 33->1 33->22 33->32 33->33 33->43 33->44 33->45 33->45 33->46 33->47 33->64 33->66 33->69 33->94 34->1 34->48 34->48 34->50 35->1 36->1 36->1 36->58 36->70 37->1 37->1 37->56 37->57 38->1 38->31 39->1 40->1 40->1 40->63 41->1 41->1 41->61 41->62 42->1 42->32 43->1 43->1 43->46 43->72 44->1 44->1 44->69 45->1 45->1 45->94 46->1 46->1 46->33 47->1 47->34 48->1 48->50 50->1 50->29 50->29 54->1 54->55 54->74 55->1 55->1 55->81 55->82 55->88 55->89 55->90 56->1 56->75 57->1 57->1 57->56 58->1 58->1 58->1 58->70 59->1 59->1 59->60 59->76 60->1 60->1 60->83 60->84 60->91 60->92 60->93 61->1 61->77 62->1 62->1 62->61 63->1 63->1 63->1 64->43 65->1 65->1 65->69 66->1 66->1 66->94 67->1 67->1 67->54 67->55 67->56 67->57 67->58 67->67 67->74 67->75 67->81 67->82 67->88 67->89 67->90 67->105 67->106 67->109 67->113 67->114 67->115 68->1 68->1 68->59 68->60 68->61 68->62 68->63 68->68 68->76 68->77 68->83 68->84 68->91 68->92 68->93 68->107 68->108 68->110 68->116 68->117 68->118 69->1 69->1 69->1 69->17 69->31 69->65 69->85 69->94 70->1 70->1 70->1 70->72 70->73 70->86 70->86 70->86 70->87 70->119 70->120 72->1 72->1 72->73 72->79 73->1 73->46 73->72 73->80 73->80 74->1 75->1 75->1 75->58 75->58 76->1 77->1 77->1 77->63 77->63 78->1 78->73 78->79 78->96 79->1 79->73 80->1 80->46 80->72 81->1 81->67 81->67 82->1 82->75 83->1 83->68 83->68 84->1 84->77 85->1 85->1 85->65 85->66 85->69 85->70 85->111 85->112 86->1 86->1 86->1 86->70 86->70 86->95 86->96 87->72 91->1 93->1 94->1 94->33 94->73 94->79 94->85 94->85 94->96 94->96 95->1 95->1 95->78 95->86 95->119 95->120 96->33 96->73 96->78 96->79 96->94 96->95 96->95
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern void exit ( int status ) ; extern int pthread_cond_signal ( int * cond ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; char * * _global_argv = ( char * * ) 0 ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; void encodeStrings_litStr2_i $ nit ( void ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern int raise ( int sig ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; int main ( int _formal_argc , char * * _formal_argv , char * * _formal_envp ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; void encodeStrings_litStr0_i $ nit ( void ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; int _global_argc = 0 ; void megaInit ( void ) ; char * * _global_envp = ( char * * ) 0 ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; void encodeStrings_litStr3_i $ nit ( void ) ; extern int ( /* missing proto */ printf ) ( ) ; extern int ( /* missing proto */ scanf ) ( ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; void encodeStrings_litStr1_i $ nit ( void ) ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; char encodeStrings_litStr3 [ 14 ] ; char encodeStrings_litStr2 [ 3 ] ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; char encodeStrings_litStr1 [ 3 ] ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; char encodeStrings_litStr0 [ 3 ] ; extern int ( /* missing proto */ getchar ) ( ) ; void encodeStrings_litStr2_i $ nit ( void ) { { } } int main ( int _formal_argc , char * * _formal_argv , char * * _formal_envp ) { char c ; int n ; int i ; int j ; int ns ; int nq ; int melhor ; int p ; int dini ; int dini2 ; int switches ; int s [ 100 ] ; int q [ 1000 ] ; int tmp ; int tmp___0 ; int tmp___1 ; int tmp___2 ; int tmp___3 ; int tmp___4 ; int _BARRIER_0 ; { megaInit ( ) ; _global_argc = _formal_argc ; _global_argv = _formal_argv ; _global_envp = _formal_envp ; _BARRIER_0 = 1 ; _1_stringEncoder ( 0 , encodeStrings_litStr0 ) ; scanf ( encodeStrings_litStr0 , & n ) ; i = 0 ; while ( i < n ) { _1_stringEncoder ( 1 , encodeStrings_litStr1 ) ; scanf ( encodeStrings_litStr1 , & ns ) ; tmp = getchar ( ) ; c = ( char ) tmp ; j = 0 ; while ( j < ns ) { s [ j ] = 0 ; p = 1 ; while ( 1 ) { tmp___1 = getchar ( ) ; c = ( char ) tmp___1 ; if ( ! ( ( int ) c != 10 ) ) { break ; } tmp___0 = p ; p ++ ; s [ j ] += ( ( int ) c * ( int ) c ) * tmp___0 ; } j ++ ; } _1_stringEncoder ( 2 , encodeStrings_litStr2 ) ; scanf ( encodeStrings_litStr2 , & nq ) ; tmp___2 = getchar ( ) ; c = ( char ) tmp___2 ; j = 0 ; while ( j < nq ) { q [ j ] = 0 ; p = 1 ; while ( 1 ) { tmp___4 = getchar ( ) ; c = ( char ) tmp___4 ; if ( ! ( ( int ) c != 10 ) ) { break ; } tmp___3 = p ; p ++ ; q [ j ] += ( ( int ) c * ( int ) c ) * tmp___3 ; } j ++ ; } dini = 0 ; switches = 0 ; while ( dini < nq ) { melhor = -1 ; j = 0 ; dini2 = dini ; while ( 1 ) { if ( j < ns ) { if ( ! ( dini2 < nq ) ) { break ; } } else { break ; } if ( s [ j ] == q [ dini2 ] ) { goto __Cont ; } while ( 1 ) { if ( s [ j ] != q [ dini2 ] ) { if ( ! ( dini2 < nq ) ) { break ; } } else { break ; } dini2 ++ ; } if ( melhor == -1 ) { melhor = dini2 ; } if ( melhor < dini2 ) { melhor = dini2 ; } __Cont : /* CIL Label */ j ++ ; dini2 = dini ; } dini = melhor ; switches ++ ; } if ( switches == 0 ) { switches ++ ; } _1_stringEncoder ( 3 , encodeStrings_litStr3 ) ; printf ( encodeStrings_litStr3 , i + 1 , switches - 1 ) ; i ++ ; } return ( 0 ) ; } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { case 3 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 2 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 1 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 0 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; } } } void encodeStrings_litStr0_i $ nit ( void ) { { } } void encodeStrings_litStr3_i $ nit ( void ) { { } } void encodeStrings_litStr1_i $ nit ( void ) { { } } void megaInit ( void ) { { encodeStrings_litStr3_i $ nit ( ) ; encodeStrings_litStr2_i $ nit ( ) ; encodeStrings_litStr1_i $ nit ( ) ; encodeStrings_litStr0_i $ nit ( ) ; } }
>>>Func
METHOD main
METHOD_RETURN int
PARAM int _formal_argc
PARAM char **_formal_argv
PARAM char **_formal_envp
megaInit megaInit()
<operator>.assignment _global_argc = _formal_argc
<operator>.assignment _global_argv = _formal_argv
<operator>.assignment _global_envp = _formal_envp
<operator>.assignment _BARRIER_0 = 1
test test()
RETURN return (0); return (0);
LITERAL 0 return (0);
>>>PDG&13 0->2 0->3 0->4 0->5 0->6 0->7 0->8 0->9 0->10 0->11 0->12 2->6 3->7 4->8 5->1 6->1 6->1 6->1 7->1 7->1 7->1 8->1 8->1 8->1 9->1 9->1 10->1 11->1 12->11
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fclose ( void * stream ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; char * * _global_argv = ( char * * ) 0 ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; int main ( int _formal_argc , char * * _formal_argv , char * * _formal_envp ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; int _global_argc = 0 ; char * * _global_envp = ( char * * ) 0 ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int printf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern int scanf ( char const * format , ... ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int ( /* missing proto */ test ) ( ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { } } } void megaInit ( void ) { { } } int main ( int _formal_argc , char * * _formal_argv , char * * _formal_envp ) { int _BARRIER_0 ; { megaInit ( ) ; _global_argc = _formal_argc ; _global_argv = _formal_argv ; _global_envp = _formal_envp ; _BARRIER_0 = 1 ; test ( ) ; return ( 0 ) ; } }
>>>Func
METHOD main
METHOD_RETURN int
PARAM int argc
PARAM char **argv
PARAM char **_formal_envp
megaInit megaInit()
<operator>.assignment _global_argc = argc
<operator>.assignment _global_argv = argv
<operator>.assignment _global_envp = _formal_envp
<operator>.assignment _BARRIER_0 = 1
<operator>.assignment i = 1
<operator>.assignment i = argc - 3
_1_stringEncoder _1_stringEncoder(0, encodeStrings_litStr0)
printf printf(encodeStrings_litStr0)
<operator>.assignment i = 0
RETURN return (0); return (0);
<operator>.lessThan i < argc
<operator>.greaterEqualsThan i >= 0
<operator>.lessThan i < argc - 1
LITERAL 0 return (0);
<operator>.assignment a[i - 1] = (int )*(*(argv + i) + 0)
<operator>.postIncrement i ++
<operator>.subtraction argc - 3
<operator>.assignment j = 0
<operator>.postDecrement i --
_1_stringEncoder _1_stringEncoder(1, encodeStrings_litStr1)
printf printf(encodeStrings_litStr1, a[i])
<operator>.postIncrement i ++
<operator>.lessEqualsThan j <= i
<operator>.subtraction argc - 1
<operator>.cast (int )*(*(argv + i) + 0)
<operator>.postIncrement j ++
<operator>.subtraction i - 1
<operator>.greaterThan a[j] > a[j + 1]
<operator>.addition *(argv + i) + 0
<operator>.assignment temp = a[j]
<operator>.assignment a[j] = a[j + 1]
<operator>.assignment a[j + 1] = temp
<operator>.addition argv + i
<operator>.addition j + 1
<operator>.addition j + 1
<operator>.addition j + 1
<operator>.indirectIndexAccess a[i - 1]
<operator>.indirectIndexAccess a[i]
UNKNOWN int int
<operator>.indirection *(*(argv + i) + 0)
<operator>.indirection *(argv + i)
<operator>.indirectIndexAccess a[j]
<operator>.indirectIndexAccess a[j + 1]
<operator>.indirectIndexAccess a[j]
<operator>.indirectIndexAccess a[j]
<operator>.indirectIndexAccess a[j + 1]
<operator>.indirectIndexAccess a[j + 1]
>>>PDG&53 0->2 0->3 0->4 0->5 0->6 0->7 0->8 0->9 0->10 0->12 0->13 0->14 0->15 0->16 0->17 0->18 0->19 0->21 0->22 0->23 0->24 0->25 0->26 0->27 0->28 0->29 0->31 0->32 0->34 0->37 0->38 0->39 0->40 0->41 2->6 2->16 3->7 3->38 4->8 5->1 6->1 6->1 7->1 7->1 7->1 8->1 8->1 8->1 9->1 9->1 10->1 10->16 11->1 11->1 11->17 12->1 12->13 13->1 13->1 14->1 14->18 15->1 16->1 16->16 16->20 16->21 16->22 16->30 16->32 16->32 16->34 16->38 16->42 16->44 16->45 16->46 17->1 17->17 17->23 17->24 17->28 17->28 18->1 18->1 18->1 18->18 18->25 18->26 18->27 18->27 18->29 18->43 19->15 20->1 20->1 20->1 21->1 21->16 22->11 22->11 22->29 23->1 23->28 24->1 24->17 25->1 25->26 26->1 26->1 26->1 26->25 27->1 27->18 28->1 28->1 28->24 28->28 28->31 28->31 28->33 28->39 28->39 28->40 28->41 28->47 28->48 29->1 29->18 29->18 30->1 31->1 31->28 32->21 32->38 33->1 33->1 33->1 33->35 33->35 33->36 33->36 33->37 33->40 33->41 33->49 33->50 33->51 33->52 34->1 35->1 35->37 36->1 36->1 36->33 37->1 37->1 37->1 37->33 38->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; char * * _global_argv = ( char * * ) 0 ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern int raise ( int sig ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; int main ( int argc , char * * argv , char * * _formal_envp ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void encodeStrings_litStr0_i $ nit ( void ) ; int _global_argc = 0 ; void megaInit ( void ) ; char * * _global_envp = ( char * * ) 0 ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int ( /* missing proto */ printf ) ( ) ; extern int scanf ( char const * format , ... ) ; extern void perror ( char const * str ) ; extern long clock ( void ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern float strtof ( char const * str , char const * endptr ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern double strtod ( char const * str , char const * endptr ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; void encodeStrings_litStr1_i $ nit ( void ) ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; char encodeStrings_litStr1 [ 4 ] ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; char encodeStrings_litStr0 [ 16 ] ; void megaInit ( void ) { { encodeStrings_litStr1_i $ nit ( ) ; encodeStrings_litStr0_i $ nit ( ) ; } } void encodeStrings_litStr0_i $ nit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { case 1 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 0 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; } } } int main ( int argc , char * * argv , char * * _formal_envp ) { int temp ; int i ; int j ; int a [ 10 ] ; int _BARRIER_0 ; { megaInit ( ) ; _global_argc = argc ; _global_argv = argv ; _global_envp = _formal_envp ; _BARRIER_0 = 1 ; i = 1 ; while ( i < argc ) { a [ i - 1 ] = ( int ) * ( * ( argv + i ) + 0 ) ; i ++ ; } i = argc - 3 ; while ( i >= 0 ) { j = 0 ; while ( j <= i ) { if ( a [ j ] > a [ j + 1 ] ) { temp = a [ j ] ; a [ j ] = a [ j + 1 ] ; a [ j + 1 ] = temp ; } j ++ ; } i -- ; } _1_stringEncoder ( 0 , encodeStrings_litStr0 ) ; printf ( encodeStrings_litStr0 ) ; i = 0 ; while ( i < argc - 1 ) { _1_stringEncoder ( 1 , encodeStrings_litStr1 ) ; printf ( encodeStrings_litStr1 , a [ i ] ) ; i ++ ; } return ( 0 ) ; } } void encodeStrings_litStr1_i $ nit ( void ) { { } }
>>>Func
METHOD main
METHOD_RETURN int
PARAM int _formal_argc
PARAM char **_formal_argv
PARAM char **_formal_envp
megaInit megaInit()
<operator>.assignment _global_argc = _formal_argc
<operator>.assignment _global_argv = _formal_argv
<operator>.assignment _global_envp = _formal_envp
<operator>.assignment _BARRIER_0 = 1
test test()
RETURN return (0); return (0);
LITERAL 0 return (0);
>>>PDG&13 0->2 0->3 0->4 0->5 0->6 0->7 0->8 0->9 0->10 0->11 0->12 2->6 3->7 4->8 5->1 6->1 6->1 6->1 7->1 7->1 7->1 8->1 8->1 8->1 9->1 9->1 10->1 11->1 12->11
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fclose ( void * stream ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; char * * _global_argv = ( char * * ) 0 ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; int main ( int _formal_argc , char * * _formal_argv , char * * _formal_envp ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; int _global_argc = 0 ; char * * _global_envp = ( char * * ) 0 ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int printf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern int scanf ( char const * format , ... ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int ( /* missing proto */ test ) ( ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { } } } void megaInit ( void ) { { } } int main ( int _formal_argc , char * * _formal_argv , char * * _formal_envp ) { int _BARRIER_0 ; { megaInit ( ) ; _global_argc = _formal_argc ; _global_argv = _formal_argv ; _global_envp = _formal_envp ; _BARRIER_0 = 1 ; test ( ) ; return ( 0 ) ; } }
>>>Func
METHOD init_marked
METHOD_RETURN void
PARAM char *got
PARAM int s
<operator>.assignment i = 0
RETURN return; return;
<operator>.lessThan i < s
<operator>.assignment *(got + i) = (char )'\000'
<operator>.postIncrement i ++
<operator>.cast (char )'\000'
<operator>.addition got + i
<operator>.indirection *(got + i)
UNKNOWN char char
>>>PDG&13 0->2 0->3 0->4 0->5 0->6 0->7 0->8 0->9 0->10 2->1 2->10 3->6 4->1 4->6 5->1 6->1 6->1 6->1 6->6 6->7 6->8 6->8 6->9 6->10 6->10 6->11 6->12 7->1 7->1 7->1 8->1 8->6 10->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; void init_marked ( char * got , int s ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; void main ( void ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int printf ( char const * format , ... ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; void init_marked ( char * got , int s ) { int i ; { i = 0 ; while ( i < s ) { * ( got + i ) = ( char ) ' \000 ' ; i ++ ; } return ; } } void megaInit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { } } } void main ( void ) { { megaInit ( ) ; } }
>>>Func
METHOD _1_stringEncoder
METHOD_RETURN void
PARAM int n
PARAM char str[]
BLOCK <empty> <empty>
<operator>.assignment encodeStrings_i3 = 0
IDENTIFIER n switch(n)
LITERAL 9 <empty>
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 8 <empty>
<operator>.assignment str[encodeStrings_i3] = 'E'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'w'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'i'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'g'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'h'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ':'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 7 <empty>
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 6 <empty>
<operator>.assignment str[encodeStrings_i3] = 'E'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'i'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'i'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'o'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ':'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 5 <empty>
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 4 <empty>
<operator>.assignment str[encodeStrings_i3] = '\n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'E'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'g'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'E'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'o'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'u'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'c'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ':'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 3 <empty>
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 2 <empty>
<operator>.assignment str[encodeStrings_i3] = 'E'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'u'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'm'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'b'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'o'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'f'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'g'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ':'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 1 <empty>
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 0 <empty>
<operator>.assignment str[encodeStrings_i3] = 'E'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'u'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'm'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'b'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'o'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'f'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'v'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'i'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'c'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ':'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
>>>PDG&269 0->2 0->3 0->4 0->5 0->6 0->7 0->8 0->9 0->10 0->11 0->12 0->13 0->14 0->15 0->16 0->17 0->18 0->19 0->20 0->21 0->22 0->23 0->24 0->25 0->26 0->27 0->28 0->29 0->30 0->31 0->32 0->33 0->34 0->35 0->36 0->37 0->38 0->39 0->40 0->41 0->42 0->43 0->44 0->45 0->46 0->47 0->48 0->49 0->50 0->51 0->52 0->53 0->54 0->55 0->56 0->57 0->58 0->59 0->60 0->61 0->62 0->63 0->64 0->65 0->66 0->67 0->68 0->69 0->70 0->71 0->72 0->73 0->74 0->75 0->76 0->77 0->78 0->79 0->80 0->81 0->82 0->83 0->84 0->85 0->86 0->87 0->88 0->89 0->90 0->91 0->92 0->93 0->94 0->95 0->96 0->97 0->98 0->99 0->100 0->101 0->102 0->103 0->104 0->105 0->106 0->107 0->108 0->109 0->110 0->111 0->112 0->113 0->114 0->115 0->116 0->117 0->118 0->119 0->120 0->121 0->122 0->123 0->124 0->125 0->126 0->127 0->128 0->129 0->130 0->131 0->132 0->133 0->134 0->135 0->136 0->137 0->138 0->139 0->140 0->141 0->142 0->143 0->144 0->145 0->146 0->147 0->148 0->149 0->150 0->151 0->152 0->153 0->154 0->155 0->156 0->157 0->158 0->159 0->160 0->161 0->162 0->163 0->164 0->165 0->166 0->167 0->168 0->169 0->170 0->171 0->172 0->173 0->174 0->175 0->176 0->177 0->178 0->179 0->180 0->181 0->182 0->183 0->184 0->185 0->186 0->187 0->188 0->189 0->190 0->191 0->192 0->193 0->194 0->195 0->196 0->197 0->198 0->199 0->200 0->201 0->202 0->203 0->204 0->205 0->206 0->207 0->208 0->209 0->210 0->211 0->212 0->213 0->214 0->215 0->216 0->217 0->218 0->219 0->220 0->221 0->222 0->223 0->224 0->225 0->226 0->227 0->228 0->229 0->230 0->231 0->232 0->233 0->234 0->235 0->236 0->237 0->238 0->239 0->240 0->241 0->242 0->243 0->244 0->245 0->246 0->247 0->248 0->249 0->250 0->251 0->252 0->253 0->254 0->255 0->256 0->257 0->258 0->259 0->260 0->261 0->262 0->263 0->264 0->265 0->266 0->267 0->268 2->1 3->1 5->1 5->1 5->9 5->16 5->47 5->54 5->95 5->102 5->153 5->160 5->209 5->216 8->1 9->11 10->1 11->13 12->1 12->1 13->1 13->1 15->1 16->18 17->1 18->20 20->22 22->24 23->1 24->26 26->28 27->1 28->30 29->1 30->32 31->1 32->34 33->1 34->36 35->1 36->38 37->1 38->40 39->1 40->42 41->1 42->44 43->1 43->1 44->1 44->1 46->1 47->49 48->1 49->51 50->1 50->1 51->1 51->1 53->1 54->56 56->58 58->60 60->62 61->1 62->64 64->66 65->1 66->68 67->1 68->70 69->1 70->72 72->74 74->76 76->78 77->1 78->80 79->1 80->82 81->1 82->84 83->1 84->86 85->1 86->88 87->1 88->90 89->1 90->92 91->1 91->1 92->1 92->1 94->1 95->97 96->1 97->99 98->1 98->1 99->1 99->1 102->104 104->106 106->108 107->1 108->110 110->112 112->114 113->1 114->116 115->1 116->118 118->120 119->1 120->122 121->1 122->124 123->1 124->126 125->1 126->128 128->130 130->132 132->134 133->1 134->136 135->1 136->138 137->1 138->140 139->1 140->142 141->1 142->144 143->1 144->146 145->1 146->148 147->1 148->150 149->1 149->1 150->1 150->1 152->1 153->155 154->1 155->157 156->1 156->1 157->1 157->1 159->1 160->162 162->164 163->1 164->166 166->168 168->170 170->172 171->1 172->174 173->1 174->176 175->1 176->178 177->1 178->180 180->182 181->1 182->184 184->186 185->1 186->188 187->1 188->190 190->192 192->194 193->1 194->196 195->1 196->198 197->1 198->200 199->1 200->202 201->1 202->204 203->1 204->206 205->1 205->1 206->1 206->1 208->1 209->211 210->1 211->213 212->1 212->1 213->1 213->1 215->1 216->218 218->220 220->222 222->224 224->226 226->228 227->1 228->230 229->1 230->232 231->1 232->234 233->1 234->236 236->238 238->240 240->242 241->1 242->244 243->1 244->246 246->248 247->1 248->250 250->252 251->1 252->254 253->1 254->256 255->1 256->258 257->1 258->260 259->1 260->262 261->1 262->264 263->1 264->266 265->1 266->268 267->1 267->1 268->1 268->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct Graph ; struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; char * * _global_argv = ( char * * ) 0 ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int ( /* missing proto */ addEdge ) ( ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; void encodeStrings_litStr2_i $ nit ( void ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int pthread_mutex_lock ( int * mutex ) ; void encodeStrings_litStr5_i $ nit ( void ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern int raise ( int sig ) ; extern void abort ( ) ; void encodeStrings_litStr8_i $ nit ( void ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; int main ( int _formal_argc , char * * _formal_argv , char * * _formal_envp ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void encodeStrings_litStr0_i $ nit ( void ) ; int _global_argc = 0 ; void megaInit ( void ) ; char * * _global_envp = ( char * * ) 0 ; extern int ( /* missing proto */ FloydWarshall ) ( ) ; void encodeStrings_litStr3_i $ nit ( void ) ; extern int ( /* missing proto */ printf ) ( ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern void perror ( char const * str ) ; extern long clock ( void ) ; extern int ( /* missing proto */ scanf ) ( ) ; void encodeStrings_litStr6_i $ nit ( void ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; void encodeStrings_litStr9_i $ nit ( void ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern double strtod ( char const * str , char const * endptr ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int ( /* missing proto */ createGraph ) ( ) ; void encodeStrings_litStr1_i $ nit ( void ) ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; char encodeStrings_litStr9 [ 3 ] ; void encodeStrings_litStr4_i $ nit ( void ) ; char encodeStrings_litStr8 [ 15 ] ; char encodeStrings_litStr7 [ 3 ] ; char encodeStrings_litStr6 [ 20 ] ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; void encodeStrings_litStr7_i $ nit ( void ) ; char encodeStrings_litStr5 [ 3 ] ; extern int open ( char const * filename , int oflag , ... ) ; char encodeStrings_litStr4 [ 25 ] ; extern double sqrt ( double x ) ; char encodeStrings_litStr3 [ 3 ] ; char encodeStrings_litStr2 [ 24 ] ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; char encodeStrings_litStr1 [ 3 ] ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; char encodeStrings_litStr0 [ 27 ] ; void encodeStrings_litStr2_i $ nit ( void ) { { } } void encodeStrings_litStr3_i $ nit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { case 9 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 8 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 7 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 6 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 5 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 4 : str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 3 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 2 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 1 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 0 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; } } } void encodeStrings_litStr4_i $ nit ( void ) { { } } void encodeStrings_litStr0_i $ nit ( void ) { { } } void megaInit ( void ) { { encodeStrings_litStr9_i $ nit ( ) ; encodeStrings_litStr8_i $ nit ( ) ; encodeStrings_litStr7_i $ nit ( ) ; encodeStrings_litStr6_i $ nit ( ) ; encodeStrings_litStr5_i $ nit ( ) ; encodeStrings_litStr4_i $ nit ( ) ; encodeStrings_litStr3_i $ nit ( ) ; encodeStrings_litStr2_i $ nit ( ) ; encodeStrings_litStr1_i $ nit ( ) ; encodeStrings_litStr0_i $ nit ( ) ; } } void encodeStrings_litStr6_i $ nit ( void ) { { } } void encodeStrings_litStr9_i $ nit ( void ) { { } } int main ( int _formal_argc , char * * _formal_argv , char * * _formal_envp ) { int V ; int E ; int src ; int dst ; int weight ; struct Graph G ; int i ; int _BARRIER_0 ; { megaInit ( ) ; _global_argc = _formal_argc ; _global_argv = _formal_argv ; _global_envp = _formal_envp ; _BARRIER_0 = 1 ; _1_stringEncoder ( 0 , encodeStrings_litStr0 ) ; printf ( encodeStrings_litStr0 ) ; _1_stringEncoder ( 1 , encodeStrings_litStr1 ) ; scanf ( encodeStrings_litStr1 , & V ) ; _1_stringEncoder ( 2 , encodeStrings_litStr2 ) ; printf ( encodeStrings_litStr2 ) ; _1_stringEncoder ( 3 , encodeStrings_litStr3 ) ; scanf ( encodeStrings_litStr3 , & E ) ; createGraph ( & G , V ) ; i = 0 ; while ( i < E ) { _1_stringEncoder ( 4 , encodeStrings_litStr4 ) ; printf ( encodeStrings_litStr4 , i + 1 ) ; _1_stringEncoder ( 5 , encodeStrings_litStr5 ) ; scanf ( encodeStrings_litStr5 , & src ) ; _1_stringEncoder ( 6 , encodeStrings_litStr6 ) ; printf ( encodeStrings_litStr6 ) ; _1_stringEncoder ( 7 , encodeStrings_litStr7 ) ; scanf ( encodeStrings_litStr7 , & dst ) ; _1_stringEncoder ( 8 , encodeStrings_litStr8 ) ; printf ( encodeStrings_litStr8 ) ; _1_stringEncoder ( 9 , encodeStrings_litStr9 ) ; scanf ( encodeStrings_litStr9 , & weight ) ; addEdge ( & G , src , dst , weight ) ; i ++ ; } FloydWarshall ( & G ) ; return ( 0 ) ; } } void encodeStrings_litStr8_i $ nit ( void ) { { } } void encodeStrings_litStr1_i $ nit ( void ) { { } } void encodeStrings_litStr5_i $ nit ( void ) { { } } void encodeStrings_litStr7_i $ nit ( void ) { { } }
>>>Func
METHOD strrev
METHOD_RETURN void
PARAM char *str
strcpy strcpy(p, str)
<operator>.assignment i = 0
<operator>.assignment tmp = strlen(str)
<operator>.assignment k = tmp
<operator>.assignment j = k - 1
<operator>.assignment *(str + i) = (char )'\000'
RETURN return; return;
<operator>.lessThan i < k
strlen strlen(str)
<operator>.subtraction k - 1
<operator>.assignment *(str + i) = p[j]
<operator>.postIncrement i ++
<operator>.postDecrement j --
<operator>.cast (char )'\000'
<operator>.addition str + i
<operator>.addition str + i
<operator>.indirection *(str + i)
<operator>.indirectIndexAccess p[j]
>>>PDG&21 0->2 0->3 0->4 0->6 0->8 0->9 0->10 0->11 0->12 0->14 0->15 0->16 0->17 0->18 2->3 3->1 3->1 3->11 3->13 4->1 4->10 5->1 5->1 5->6 6->1 6->1 6->12 7->1 7->1 7->1 7->15 8->1 8->1 8->1 9->1 10->1 10->1 10->10 10->13 10->14 10->14 10->15 10->17 10->18 10->18 10->19 10->20 11->5 11->17 11->18 12->7 12->7 12->10 13->1 13->1 14->1 14->10 15->1 15->1 17->1 17->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern int ( /* missing proto */ strlen ) ( ) ; void main ( void ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern int ( /* missing proto */ strcpy ) ( ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int printf ( char const * format , ... ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; void strrev ( char * str ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; void megaInit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { } } } void main ( void ) { { megaInit ( ) ; } } void strrev ( char * str ) { char p [ 30 ] ; int i ; int k ; int tmp ; int j ; { strcpy ( p , str ) ; i = 0 ; tmp = strlen ( str ) ; k = tmp ; j = k - 1 ; while ( i < k ) { * ( str + i ) = p [ j ] ; i ++ ; j -- ; } * ( str + i ) = ( char ) ' \000 ' ; return ; } }
>>>Func
METHOD _1_stringEncoder
METHOD_RETURN void
PARAM int n
PARAM char str[]
BLOCK <empty> <empty>
<operator>.assignment encodeStrings_i3 = 0
IDENTIFIER n switch(n)
LITERAL 11 <empty>
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 10 <empty>
<operator>.assignment str[encodeStrings_i3] = '\n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'E'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'o'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'u'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'c'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ':'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 9 <empty>
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 8 <empty>
<operator>.assignment str[encodeStrings_i3] = 'E'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'w'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'i'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'g'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'h'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ':'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 7 <empty>
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 6 <empty>
<operator>.assignment str[encodeStrings_i3] = 'E'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'i'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'i'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'o'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ':'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 5 <empty>
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 4 <empty>
<operator>.assignment str[encodeStrings_i3] = '\n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'E'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'g'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'E'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'o'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'u'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'c'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ':'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 3 <empty>
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 2 <empty>
<operator>.assignment str[encodeStrings_i3] = 'E'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'u'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'm'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'b'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'o'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'f'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'g'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ':'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 1 <empty>
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 0 <empty>
<operator>.assignment str[encodeStrings_i3] = 'E'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'u'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'm'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'b'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'o'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'f'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'v'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'i'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'c'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ':'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
>>>PDG&307 0->2 0->3 0->4 0->5 0->6 0->7 0->8 0->9 0->10 0->11 0->12 0->13 0->14 0->15 0->16 0->17 0->18 0->19 0->20 0->21 0->22 0->23 0->24 0->25 0->26 0->27 0->28 0->29 0->30 0->31 0->32 0->33 0->34 0->35 0->36 0->37 0->38 0->39 0->40 0->41 0->42 0->43 0->44 0->45 0->46 0->47 0->48 0->49 0->50 0->51 0->52 0->53 0->54 0->55 0->56 0->57 0->58 0->59 0->60 0->61 0->62 0->63 0->64 0->65 0->66 0->67 0->68 0->69 0->70 0->71 0->72 0->73 0->74 0->75 0->76 0->77 0->78 0->79 0->80 0->81 0->82 0->83 0->84 0->85 0->86 0->87 0->88 0->89 0->90 0->91 0->92 0->93 0->94 0->95 0->96 0->97 0->98 0->99 0->100 0->101 0->102 0->103 0->104 0->105 0->106 0->107 0->108 0->109 0->110 0->111 0->112 0->113 0->114 0->115 0->116 0->117 0->118 0->119 0->120 0->121 0->122 0->123 0->124 0->125 0->126 0->127 0->128 0->129 0->130 0->131 0->132 0->133 0->134 0->135 0->136 0->137 0->138 0->139 0->140 0->141 0->142 0->143 0->144 0->145 0->146 0->147 0->148 0->149 0->150 0->151 0->152 0->153 0->154 0->155 0->156 0->157 0->158 0->159 0->160 0->161 0->162 0->163 0->164 0->165 0->166 0->167 0->168 0->169 0->170 0->171 0->172 0->173 0->174 0->175 0->176 0->177 0->178 0->179 0->180 0->181 0->182 0->183 0->184 0->185 0->186 0->187 0->188 0->189 0->190 0->191 0->192 0->193 0->194 0->195 0->196 0->197 0->198 0->199 0->200 0->201 0->202 0->203 0->204 0->205 0->206 0->207 0->208 0->209 0->210 0->211 0->212 0->213 0->214 0->215 0->216 0->217 0->218 0->219 0->220 0->221 0->222 0->223 0->224 0->225 0->226 0->227 0->228 0->229 0->230 0->231 0->232 0->233 0->234 0->235 0->236 0->237 0->238 0->239 0->240 0->241 0->242 0->243 0->244 0->245 0->246 0->247 0->248 0->249 0->250 0->251 0->252 0->253 0->254 0->255 0->256 0->257 0->258 0->259 0->260 0->261 0->262 0->263 0->264 0->265 0->266 0->267 0->268 0->269 0->270 0->271 0->272 0->273 0->274 0->275 0->276 0->277 0->278 0->279 0->280 0->281 0->282 0->283 0->284 0->285 0->286 0->287 0->288 0->289 0->290 0->291 0->292 0->293 0->294 0->295 0->296 0->297 0->298 0->299 0->300 0->301 0->302 0->303 0->304 0->305 0->306 2->1 3->1 5->1 5->1 5->9 5->16 5->47 5->54 5->85 5->92 5->133 5->140 5->191 5->198 5->247 5->254 8->1 9->11 10->1 11->13 12->1 12->1 13->1 13->1 15->1 16->18 17->1 18->20 19->1 20->22 21->1 22->24 24->26 26->28 27->1 28->30 29->1 30->32 31->1 32->34 33->1 34->36 35->1 36->38 37->1 38->40 39->1 40->42 41->1 42->44 43->1 43->1 44->1 44->1 46->1 47->49 48->1 49->51 50->1 50->1 51->1 51->1 53->1 54->56 55->1 56->58 58->60 60->62 61->1 62->64 64->66 65->1 66->68 67->1 68->70 69->1 70->72 71->1 72->74 73->1 74->76 75->1 76->78 77->1 78->80 79->1 80->82 81->1 81->1 82->1 82->1 84->1 85->87 86->1 87->89 88->1 88->1 89->1 89->1 91->1 92->94 94->96 96->98 98->100 99->1 100->102 102->104 103->1 104->106 105->1 106->108 107->1 108->110 110->112 112->114 114->116 115->1 116->118 117->1 118->120 119->1 120->122 121->1 122->124 123->1 124->126 125->1 126->128 127->1 128->130 129->1 129->1 130->1 130->1 132->1 133->135 134->1 135->137 136->1 136->1 137->1 137->1 140->142 142->144 144->146 145->1 146->148 148->150 150->152 151->1 152->154 153->1 154->156 156->158 157->1 158->160 159->1 160->162 161->1 162->164 163->1 164->166 166->168 168->170 170->172 171->1 172->174 173->1 174->176 175->1 176->178 177->1 178->180 179->1 180->182 181->1 182->184 183->1 184->186 185->1 186->188 187->1 187->1 188->1 188->1 190->1 191->193 192->1 193->195 194->1 194->1 195->1 195->1 197->1 198->200 200->202 201->1 202->204 204->206 206->208 208->210 209->1 210->212 211->1 212->214 213->1 214->216 215->1 216->218 218->220 219->1 220->222 222->224 223->1 224->226 225->1 226->228 228->230 230->232 231->1 232->234 233->1 234->236 235->1 236->238 237->1 238->240 239->1 240->242 241->1 242->244 243->1 243->1 244->1 244->1 246->1 247->249 248->1 249->251 250->1 250->1 251->1 251->1 253->1 254->256 256->258 258->260 260->262 262->264 264->266 265->1 266->268 267->1 268->270 269->1 270->272 271->1 272->274 274->276 276->278 278->280 279->1 280->282 281->1 282->284 284->286 285->1 286->288 288->290 289->1 290->292 291->1 292->294 293->1 294->296 295->1 296->298 297->1 298->300 299->1 300->302 301->1 302->304 303->1 304->306 305->1 305->1 306->1 306->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct Graph ; struct _IO_FILE ; struct timeval ; extern void exit ( int status ) ; extern int pthread_cond_signal ( int * cond ) ; extern int fclose ( void * stream ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int ( /* missing proto */ BellmanFord ) ( ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; char * * _global_argv = ( char * * ) 0 ; extern int fcntl ( int filedes , int cmd , ... ) ; void encodeStrings_litStr2_i $ nit ( void ) ; extern int unlink ( char const * filename ) ; extern int ( /* missing proto */ addEdge ) ( ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; char encodeStrings_litStr11 [ 3 ] ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int pthread_mutex_lock ( int * mutex ) ; void encodeStrings_litStr5_i $ nit ( void ) ; char encodeStrings_litStr10 [ 15 ] ; void _1_stringEncoder ( int n , char str [ ] ) ; extern int raise ( int sig ) ; extern void abort ( ) ; void encodeStrings_litStr8_i $ nit ( void ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; int main ( int _formal_argc , char * * _formal_argv , char * * _formal_envp ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; void encodeStrings_litStr0_i $ nit ( void ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; int _global_argc = 0 ; char * * _global_envp = ( char * * ) 0 ; void megaInit ( void ) ; void encodeStrings_litStr3_i $ nit ( void ) ; extern int ( /* missing proto */ printf ) ( ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int ( /* missing proto */ scanf ) ( ) ; extern void perror ( char const * str ) ; extern long clock ( void ) ; void encodeStrings_litStr6_i $ nit ( void ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; void encodeStrings_litStr10_i $ nit ( void ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; void encodeStrings_litStr9_i $ nit ( void ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern double strtod ( char const * str , char const * endptr ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int ( /* missing proto */ createGraph ) ( ) ; void encodeStrings_litStr1_i $ nit ( void ) ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; char encodeStrings_litStr9 [ 3 ] ; void encodeStrings_litStr4_i $ nit ( void ) ; char encodeStrings_litStr8 [ 15 ] ; char encodeStrings_litStr7 [ 3 ] ; char encodeStrings_litStr6 [ 20 ] ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; void encodeStrings_litStr7_i $ nit ( void ) ; char encodeStrings_litStr5 [ 3 ] ; void encodeStrings_litStr11_i $ nit ( void ) ; extern int open ( char const * filename , int oflag , ... ) ; char encodeStrings_litStr4 [ 25 ] ; extern double sqrt ( double x ) ; char encodeStrings_litStr3 [ 3 ] ; char encodeStrings_litStr2 [ 24 ] ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; char encodeStrings_litStr1 [ 3 ] ; char encodeStrings_litStr0 [ 27 ] ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; void encodeStrings_litStr7_i $ nit ( void ) { { } } void encodeStrings_litStr4_i $ nit ( void ) { { } } void encodeStrings_litStr6_i $ nit ( void ) { { } } void encodeStrings_litStr1_i $ nit ( void ) { { } } void encodeStrings_litStr8_i $ nit ( void ) { { } } void encodeStrings_litStr5_i $ nit ( void ) { { } } void encodeStrings_litStr9_i $ nit ( void ) { { } } void encodeStrings_litStr11_i $ nit ( void ) { { } } void encodeStrings_litStr0_i $ nit ( void ) { { } } void megaInit ( void ) { { encodeStrings_litStr11_i $ nit ( ) ; encodeStrings_litStr10_i $ nit ( ) ; encodeStrings_litStr9_i $ nit ( ) ; encodeStrings_litStr8_i $ nit ( ) ; encodeStrings_litStr7_i $ nit ( ) ; encodeStrings_litStr6_i $ nit ( ) ; encodeStrings_litStr5_i $ nit ( ) ; encodeStrings_litStr4_i $ nit ( ) ; encodeStrings_litStr3_i $ nit ( ) ; encodeStrings_litStr2_i $ nit ( ) ; encodeStrings_litStr1_i $ nit ( ) ; encodeStrings_litStr0_i $ nit ( ) ; } } int main ( int _formal_argc , char * * _formal_argv , char * * _formal_envp ) { int V ; int E ; int gsrc ; int src ; int dst ; int weight ; struct Graph G ; int i ; int _BARRIER_0 ; { megaInit ( ) ; _global_argc = _formal_argc ; _global_argv = _formal_argv ; _global_envp = _formal_envp ; _BARRIER_0 = 1 ; _1_stringEncoder ( 0 , encodeStrings_litStr0 ) ; printf ( encodeStrings_litStr0 ) ; _1_stringEncoder ( 1 , encodeStrings_litStr1 ) ; scanf ( encodeStrings_litStr1 , & V ) ; _1_stringEncoder ( 2 , encodeStrings_litStr2 ) ; printf ( encodeStrings_litStr2 ) ; _1_stringEncoder ( 3 , encodeStrings_litStr3 ) ; scanf ( encodeStrings_litStr3 , & E ) ; createGraph ( & G , V , E ) ; i = 0 ; while ( i < E ) { _1_stringEncoder ( 4 , encodeStrings_litStr4 ) ; printf ( encodeStrings_litStr4 , i + 1 ) ; _1_stringEncoder ( 5 , encodeStrings_litStr5 ) ; scanf ( encodeStrings_litStr5 , & src ) ; _1_stringEncoder ( 6 , encodeStrings_litStr6 ) ; printf ( encodeStrings_litStr6 ) ; _1_stringEncoder ( 7 , encodeStrings_litStr7 ) ; scanf ( encodeStrings_litStr7 , & dst ) ; _1_stringEncoder ( 8 , encodeStrings_litStr8 ) ; printf ( encodeStrings_litStr8 ) ; _1_stringEncoder ( 9 , encodeStrings_litStr9 ) ; scanf ( encodeStrings_litStr9 , & weight ) ; addEdge ( & G , src , dst , weight ) ; i ++ ; } _1_stringEncoder ( 10 , encodeStrings_litStr10 ) ; printf ( encodeStrings_litStr10 ) ; _1_stringEncoder ( 11 , encodeStrings_litStr11 ) ; scanf ( encodeStrings_litStr11 , & gsrc ) ; BellmanFord ( & G , gsrc ) ; return ( 0 ) ; } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { case 11 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 10 : str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 9 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 8 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 7 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 6 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 5 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 4 : str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 3 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 2 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 1 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 0 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; } } } void encodeStrings_litStr3_i $ nit ( void ) { { } } void encodeStrings_litStr2_i $ nit ( void ) { { } } void encodeStrings_litStr10_i $ nit ( void ) { { } }
>>>Func
METHOD _1_stringEncoder
METHOD_RETURN void
PARAM int n
PARAM char str[]
BLOCK <empty> <empty>
<operator>.assignment encodeStrings_i3 = 0
IDENTIFIER n switch(n)
LITERAL 2 <empty>
<operator>.assignment str[encodeStrings_i3] = 'U'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'g'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ':'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'p'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'o'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'g'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'm'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '-'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'm'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'c'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'h'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'c'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 1 <empty>
<operator>.assignment str[encodeStrings_i3] = 'l'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'o'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 0 <empty>
<operator>.assignment str[encodeStrings_i3] = 'w'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'i'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
>>>PDG&94 0->2 0->3 0->4 0->5 0->6 0->7 0->8 0->9 0->10 0->11 0->12 0->13 0->14 0->15 0->16 0->17 0->18 0->19 0->20 0->21 0->22 0->23 0->24 0->25 0->26 0->27 0->28 0->29 0->30 0->31 0->32 0->33 0->34 0->35 0->36 0->37 0->38 0->39 0->40 0->41 0->42 0->43 0->44 0->45 0->46 0->47 0->48 0->49 0->50 0->51 0->52 0->53 0->54 0->55 0->56 0->57 0->58 0->59 0->60 0->61 0->62 0->63 0->64 0->65 0->66 0->67 0->68 0->69 0->70 0->71 0->72 0->73 0->74 0->75 0->76 0->77 0->78 0->79 0->80 0->81 0->82 0->83 0->84 0->85 0->86 0->87 0->88 0->89 0->90 0->91 0->92 0->93 2->1 3->1 5->1 5->1 5->9 5->72 5->85 8->1 9->11 10->1 11->13 13->15 15->17 17->19 18->1 19->21 21->23 22->1 23->25 25->27 26->1 27->29 28->1 29->31 31->33 33->35 35->37 36->1 37->39 38->1 39->41 41->43 42->1 43->45 45->47 46->1 47->49 49->51 50->1 51->53 53->55 55->57 56->1 57->59 58->1 59->61 60->1 61->63 62->1 63->65 64->1 65->67 66->1 67->69 68->1 68->1 69->1 69->1 71->1 72->74 73->1 74->76 75->1 76->78 77->1 78->80 79->1 80->82 81->1 81->1 82->1 82->1 84->1 85->87 86->1 87->89 88->1 89->91 90->1 91->93 92->1 92->1 93->1 93->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; char * * _global_argv = ( char * * ) 0 ; void encodeStrings_litStr2_i $ nit ( void ) ; extern int unlink ( char const * filename ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern int raise ( int sig ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern double ceil ( double x ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; int main ( int argc , char * * argv , char * * _formal_envp ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; void encodeStrings_litStr0_i $ nit ( void ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; int _global_argc = 0 ; char * * _global_envp = ( char * * ) 0 ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int ( /* missing proto */ printf ) ( ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; void encodeStrings_litStr1_i $ nit ( void ) ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; char encodeStrings_litStr2 [ 31 ] ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; char encodeStrings_litStr1 [ 6 ] ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; char encodeStrings_litStr0 [ 5 ] ; void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { case 2 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 1 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 0 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; } } } void megaInit ( void ) { { encodeStrings_litStr2_i $ nit ( ) ; encodeStrings_litStr1_i $ nit ( ) ; encodeStrings_litStr0_i $ nit ( ) ; } } void encodeStrings_litStr0_i $ nit ( void ) { { } } void encodeStrings_litStr1_i $ nit ( void ) { { } } void encodeStrings_litStr2_i $ nit ( void ) { { } } int main ( int argc , char * * argv , char * * _formal_envp ) { unsigned char c ; int _BARRIER_0 ; { megaInit ( ) ; _global_argc = argc ; _global_argv = argv ; _global_envp = _formal_envp ; _BARRIER_0 = 1 ; c = ( unsigned char ) * ( * ( argv + 1 ) + 0 ) ; if ( argc > 1 ) { if ( ( int ) c > 127 ) { _1_stringEncoder ( 0 , encodeStrings_litStr0 ) ; printf ( encodeStrings_litStr0 ) ; } else { _1_stringEncoder ( 1 , encodeStrings_litStr1 ) ; printf ( encodeStrings_litStr1 ) ; } } else { _1_stringEncoder ( 2 , encodeStrings_litStr2 ) ; printf ( encodeStrings_litStr2 ) ; } return ( 0 ) ; } }
>>>Func
METHOD compare_desc
METHOD_RETURN int
PARAM void const   *x1
PARAM void const   *x2
<operator>.assignment t1 = *((int *)x1)
<operator>.assignment t2 = *((int *)x2)
RETURN return (0); return (0);
<operator>.greaterThan t1 > t2
<operator>.lessThan t1 < t2
<operator>.equals t1 == t2
LITERAL 0 return (0);
RETURN return (-1); return (-1);
RETURN return (1); return (1);
RETURN return (0); return (0);
<operator>.cast (int *)x1
<operator>.cast (int *)x2
<operator>.minus -1
LITERAL 1 return (1);
LITERAL 0 return (0);
>>>PDG&19 0->2 0->3 0->6 0->7 0->8 0->9 0->10 0->12 0->13 0->14 0->15 0->16 0->17 0->18 2->14 3->15 4->1 4->1 4->7 5->1 5->1 5->7 6->1 7->1 7->1 7->1 7->8 7->8 7->8 7->11 7->16 8->9 8->9 8->9 8->12 9->6 9->13 10->6 11->1 12->1 13->1 14->1 15->1 16->1 16->11 17->12 18->13
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; int compare_desc ( void const * x1 , void const * x2 ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; void main ( void ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int printf ( char const * format , ... ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { } } } void megaInit ( void ) { { } } int compare_desc ( void const * x1 , void const * x2 ) { int t1 ; int t2 ; { t1 = * ( ( int * ) x1 ) ; t2 = * ( ( int * ) x2 ) ; if ( t1 > t2 ) { return ( -1 ) ; } if ( t1 < t2 ) { return ( 1 ) ; } if ( t1 == t2 ) { return ( 0 ) ; } return ( 0 ) ; } } void main ( void ) { { megaInit ( ) ; } }
>>>Func
METHOD _1_stringEncoder
METHOD_RETURN void
PARAM int n
PARAM char str[]
BLOCK <empty> <empty>
<operator>.assignment encodeStrings_i3 = 0
IDENTIFIER n switch(n)
LITERAL 0 <empty>
<operator>.assignment str[encodeStrings_i3] = 'S'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'u'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'm'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'i'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ':'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
>>>PDG&32 0->2 0->3 0->4 0->5 0->6 0->7 0->8 0->9 0->10 0->11 0->12 0->13 0->14 0->15 0->16 0->17 0->18 0->19 0->20 0->21 0->22 0->23 0->24 0->25 0->26 0->27 0->28 0->29 0->30 0->31 2->1 3->1 5->1 5->1 5->9 8->1 9->11 10->1 11->13 12->1 13->15 15->17 16->1 17->19 18->1 19->21 20->1 21->23 22->1 23->25 24->1 25->27 26->1 27->29 28->1 29->31 30->1 30->1 31->1 31->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; char * * _global_argv = ( char * * ) 0 ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; int main ( int argc , char * * argv , char * * _formal_envp ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; void encodeStrings_litStr0_i $ nit ( void ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; int _global_argc = 0 ; void megaInit ( void ) ; char * * _global_envp = ( char * * ) 0 ; extern int ( /* missing proto */ printf ) ( ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; char encodeStrings_litStr0 [ 12 ] ; void megaInit ( void ) { { encodeStrings_litStr0_i $ nit ( ) ; } } void encodeStrings_litStr0_i $ nit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { case 0 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; } } } int main ( int argc , char * * argv , char * * _formal_envp ) { int i ; int sum ; int _BARRIER_0 ; { megaInit ( ) ; _global_argc = argc ; _global_argv = argv ; _global_envp = _formal_envp ; _BARRIER_0 = 1 ; sum = 0 ; i = 0 ; while ( i < 127 ) { sum += i ; i ++ ; } _1_stringEncoder ( 0 , encodeStrings_litStr0 ) ; printf ( encodeStrings_litStr0 , sum ) ; return ( 0 ) ; } }
>>>Func
METHOD max
METHOD_RETURN double
PARAM double n1
PARAM double n2
<operator>.greaterThan n1 > n2
RETURN return (n1); return (n1);
IDENTIFIER n1 return (n1);
RETURN return (n2); return (n2);
IDENTIFIER n2 return (n2);
>>>PDG&9 0->2 0->3 0->4 0->6 0->8 2->4 3->4 4->1 4->1 4->1 4->5 4->6 4->7 4->8 5->1 6->5 7->1 8->7
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; void main ( void ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int printf ( char const * format , ... ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; double max ( double n1 , double n2 ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { } } } void megaInit ( void ) { { } } double max ( double n1 , double n2 ) { { if ( n1 > n2 ) { return ( n1 ) ; } else { return ( n2 ) ; } } } void main ( void ) { { megaInit ( ) ; } }
>>>Func
METHOD cmpval
METHOD_RETURN int
PARAM void const   *a
PARAM void const   *b
RETURN return (*((int *)a) - *((int *)b)); return (*((int *)a) - *((int *)b));
<operator>.subtraction *((int *)a) - *((int *)b)
<operator>.cast (int *)a
<operator>.cast (int *)b
>>>PDG&8 0->2 0->3 0->6 0->7 2->6 3->7 4->1 5->1 5->1 5->1 5->4 6->1 7->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; void main ( void ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int printf ( char const * format , ... ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; int cmpval ( void const * a , void const * b ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; int cmpval ( void const * a , void const * b ) { { return ( * ( ( int * ) a ) - * ( ( int * ) b ) ) ; } } void megaInit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { } } } void main ( void ) { { megaInit ( ) ; } }
>>>Func
METHOD _1_stringEncoder
METHOD_RETURN void
PARAM int n
PARAM char str[]
BLOCK <empty> <empty>
<operator>.assignment encodeStrings_i3 = 0
IDENTIFIER n switch(n)
LITERAL 0 <empty>
<operator>.assignment str[encodeStrings_i3] = '\n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'F'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'c'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'o'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'i'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'l'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'o'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'f'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'i'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ':'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
>>>PDG&58 0->2 0->3 0->4 0->5 0->6 0->7 0->8 0->9 0->10 0->11 0->12 0->13 0->14 0->15 0->16 0->17 0->18 0->19 0->20 0->21 0->22 0->23 0->24 0->25 0->26 0->27 0->28 0->29 0->30 0->31 0->32 0->33 0->34 0->35 0->36 0->37 0->38 0->39 0->40 0->41 0->42 0->43 0->44 0->45 0->46 0->47 0->48 0->49 0->50 0->51 0->52 0->53 0->54 0->55 0->56 0->57 2->1 3->1 5->1 5->1 5->9 9->11 10->1 11->13 13->15 14->1 15->17 16->1 17->19 19->21 20->1 21->23 23->25 24->1 25->27 26->1 27->29 29->31 30->1 31->33 32->1 33->35 35->37 37->39 39->41 41->43 42->1 43->45 44->1 45->47 46->1 47->49 48->1 49->51 50->1 51->53 52->1 53->55 54->1 55->57 56->1 56->1 57->1 57->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; char * * _global_argv = ( char * * ) 0 ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern int ( /* missing proto */ fact ) ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; int main ( int argc , char * * argv , char * * _formal_envp ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; void encodeStrings_litStr0_i $ nit ( void ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; int _global_argc = 0 ; void megaInit ( void ) ; char * * _global_envp = ( char * * ) 0 ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int ( /* missing proto */ printf ) ( ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; char encodeStrings_litStr0 [ 25 ] ; int main ( int argc , char * * argv , char * * _formal_envp ) { int num ; int f ; int _BARRIER_0 ; { megaInit ( ) ; _global_argc = argc ; _global_argv = argv ; _global_envp = _formal_envp ; _BARRIER_0 = 1 ; if ( argc < 2 ) { return ( 1 ) ; } num = ( int ) * ( * ( argv + 1 ) + 0 ) ; f = fact ( num ) ; _1_stringEncoder ( 0 , encodeStrings_litStr0 ) ; printf ( encodeStrings_litStr0 , num , f ) ; return ( 0 ) ; } } void encodeStrings_litStr0_i $ nit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { case 0 : str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; } } } void megaInit ( void ) { { encodeStrings_litStr0_i $ nit ( ) ; } }
>>>Func
METHOD _1_stringEncoder
METHOD_RETURN void
PARAM int n
PARAM char str[]
BLOCK <empty> <empty>
<operator>.assignment encodeStrings_i3 = 0
IDENTIFIER n switch(n)
LITERAL 1 <empty>
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'l'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 0 <empty>
<operator>.assignment str[encodeStrings_i3] = 'E'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'h'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'c'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'i'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'm'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'l'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'u'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'm'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'b'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ':'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
>>>PDG&71 0->2 0->3 0->4 0->5 0->6 0->7 0->8 0->9 0->10 0->11 0->12 0->13 0->14 0->15 0->16 0->17 0->18 0->19 0->20 0->21 0->22 0->23 0->24 0->25 0->26 0->27 0->28 0->29 0->30 0->31 0->32 0->33 0->34 0->35 0->36 0->37 0->38 0->39 0->40 0->41 0->42 0->43 0->44 0->45 0->46 0->47 0->48 0->49 0->50 0->51 0->52 0->53 0->54 0->55 0->56 0->57 0->58 0->59 0->60 0->61 0->62 0->63 0->64 0->65 0->66 0->67 0->68 0->69 0->70 2->1 3->1 5->1 5->1 5->9 5->18 8->1 9->11 10->1 11->13 12->1 13->15 14->1 14->1 15->1 15->1 17->1 18->20 20->22 22->24 24->26 26->28 28->30 29->1 30->32 31->1 32->34 34->36 36->38 37->1 38->40 40->42 41->1 42->44 43->1 44->46 46->48 47->1 48->50 49->1 50->52 52->54 53->1 54->56 55->1 56->58 57->1 58->60 59->1 60->62 61->1 62->64 63->1 64->66 65->1 66->68 67->1 68->70 69->1 69->1 70->1 70->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fclose ( void * stream ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; char * * _global_argv = ( char * * ) 0 ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; int main ( int _formal_argc , char * * _formal_argv , char * * _formal_envp ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void encodeStrings_litStr0_i $ nit ( void ) ; int _global_argc = 0 ; void megaInit ( void ) ; char * * _global_envp = ( char * * ) 0 ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int ( /* missing proto */ printf ) ( ) ; extern int ( /* missing proto */ scanf ) ( ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern double strtod ( char const * str , char const * endptr ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern void signal ( int sig , void * func ) ; extern double difftime ( long tv1 , long tv0 ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; void encodeStrings_litStr1_i $ nit ( void ) ; extern int ( /* missing proto */ decimal2Octal ) ( ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; char encodeStrings_litStr1 [ 4 ] ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; char encodeStrings_litStr0 [ 27 ] ; int main ( int _formal_argc , char * * _formal_argv , char * * _formal_envp ) { long decimalnum ; int _BARRIER_0 ; { megaInit ( ) ; _global_argc = _formal_argc ; _global_argv = _formal_argv ; _global_envp = _formal_envp ; _BARRIER_0 = 1 ; _1_stringEncoder ( 0 , encodeStrings_litStr0 ) ; printf ( encodeStrings_litStr0 ) ; _1_stringEncoder ( 1 , encodeStrings_litStr1 ) ; scanf ( encodeStrings_litStr1 , & decimalnum ) ; decimal2Octal ( decimalnum ) ; return ( 0 ) ; } } void encodeStrings_litStr1_i $ nit ( void ) { { } } void megaInit ( void ) { { encodeStrings_litStr1_i $ nit ( ) ; encodeStrings_litStr0_i $ nit ( ) ; } } void encodeStrings_litStr0_i $ nit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { case 1 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 0 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; } } }
>>>Func
METHOD main
METHOD_RETURN int
PARAM int _formal_argc
PARAM char **_formal_argv
PARAM char **_formal_envp
megaInit megaInit()
<operator>.assignment _global_argc = _formal_argc
<operator>.assignment _global_argv = _formal_argv
<operator>.assignment _global_envp = _formal_envp
<operator>.assignment _BARRIER_0 = 1
_1_stringEncoder _1_stringEncoder(0, encodeStrings_litStr0)
scanf scanf(encodeStrings_litStr0, & t)
<operator>.assignment ti = 1
RETURN return (0); return (0);
<operator>.lessEqualsThan ti <= t
LITERAL 0 return (0);
_1_stringEncoder _1_stringEncoder(1, encodeStrings_litStr1)
scanf scanf(encodeStrings_litStr1, & n)
<operator>.assignment sum = 0
<operator>.assignment i = 0
<operator>.assignment maeflg = 0
<operator>.assignment pass = n
<operator>.assignment num = ((long double )2 * (long double )sum) / (long double )n
<operator>.assignment tmp = (long double )(100.0 / (double )sum)
<operator>.assignment i = 0
_1_stringEncoder _1_stringEncoder(3, encodeStrings_litStr3)
printf printf(encodeStrings_litStr3, ti)
<operator>.assignment i = 0
putchar putchar(10)
<operator>.postIncrement ti ++
<operator>.lessThan i < n
LITERAL 1 while (1)
<operator>.lessThan i < n
<operator>.lessThan i < n
_1_stringEncoder _1_stringEncoder(2, encodeStrings_litStr2)
scanf scanf(encodeStrings_litStr2, & s[i])
<operator>.assignmentPlus sum += s[i]
<operator>.postIncrement i ++
<operator>.division ((long double )2 * (long double )sum) / (long double )n
<operator>.assignment k = 0
<operator>.assignment flg = k
<operator>.assignment i = 0
<operator>.assignment maeflg = flg
<operator>.assignment pass = n - flg
<operator>.assignment num = (long double )(2 * sum - k) / (long double )pass
<operator>.cast (long double )(100.0 / (double )sum)
<operator>.postIncrement i ++
<operator>.assignment tmp___0 = MAX(ans[i], 0)
_1_stringEncoder _1_stringEncoder(4, encodeStrings_litStr4)
printf printf(encodeStrings_litStr4, tmp___0)
<operator>.postIncrement i ++
<operator>.multiplication (long double )2 * (long double )sum
<operator>.cast (long double )n
<operator>.lessThan i < n
<operator>.equals flg == maeflg
<operator>.division 100.0 / (double )sum
<operator>.lessThan (long double )s[i] < num
<operator>.cast (long double )2
<operator>.cast (long double )sum
<operator>.postIncrement i ++
<operator>.subtraction n - flg
<operator>.division (long double )(2 * sum - k) / (long double )pass
<operator>.cast (double )sum
<operator>.assignment ans[i] = tmp * (num - (long double )s[i])
MAX MAX(ans[i], 0)
<operator>.greaterEqualsThan (long double )s[i] >= num
<operator>.cast (long double )(2 * sum - k)
<operator>.cast (long double )pass
<operator>.cast (long double )s[i]
<operator>.assignment ans[i] = (long double )0
<operator>.postIncrement flg ++
<operator>.assignmentPlus k += s[i]
<operator>.subtraction 2 * sum - k
<operator>.multiplication tmp * (num - (long double )s[i])
<operator>.cast (long double )s[i]
<operator>.multiplication 2 * sum
<operator>.subtraction num - (long double )s[i]
<operator>.cast (long double )0
<operator>.cast (long double )s[i]
<operator>.addressOf & n
UNKNOWN long double long double
<operator>.addressOf & s[i]
<operator>.indirectIndexAccess s[i]
UNKNOWN long double long double
<operator>.indirectIndexAccess s[i]
UNKNOWN long double long double
UNKNOWN long double long double
UNKNOWN double double
<operator>.indirectIndexAccess ans[i]
UNKNOWN long double long double
UNKNOWN long double long double
UNKNOWN long double long double
<operator>.indirectIndexAccess s[i]
<operator>.indirectIndexAccess ans[i]
<operator>.indirectIndexAccess ans[i]
UNKNOWN long double long double
<operator>.indirectIndexAccess s[i]
<operator>.indirectIndexAccess s[i]
UNKNOWN long double long double
UNKNOWN long double long double
<operator>.indirectIndexAccess s[i]
>>>PDG&101 0->2 0->3 0->4 0->5 0->6 0->7 0->8 0->9 0->10 0->11 0->12 0->13 0->14 0->15 0->16 0->17 0->18 0->19 0->20 0->21 0->24 0->25 0->26 0->27 0->28 0->29 0->30 0->31 0->32 0->33 0->34 0->36 0->37 0->38 0->39 0->40 0->41 0->42 0->46 0->48 0->49 0->50 0->51 0->52 0->53 0->54 0->55 0->56 0->57 0->58 0->59 0->60 0->61 0->62 0->64 0->65 0->67 0->69 0->70 0->71 0->72 0->73 0->75 0->76 0->77 2->6 3->7 4->8 5->1 6->1 6->1 6->1 7->1 7->1 7->1 8->1 8->1 8->1 9->1 9->1 10->1 11->1 11->1 11->14 12->1 12->14 13->1 14->1 14->1 14->1 14->14 14->16 14->17 14->18 14->19 14->20 14->21 14->22 14->23 14->24 14->25 14->26 14->26 14->27 14->28 14->29 14->30 14->32 14->33 14->38 14->39 14->40 14->41 14->45 14->51 14->52 14->53 14->54 14->55 14->57 14->58 14->62 14->79 14->80 14->83 14->85 14->86 14->87 15->13 16->1 17->1 17->1 17->21 17->30 17->32 17->33 17->38 17->52 17->53 17->60 18->1 18->36 18->51 18->55 18->58 18->62 18->75 19->30 20->1 20->1 20->54 21->1 21->1 22->1 22->1 22->1 22->56 22->65 23->1 23->1 23->1 23->73 24->32 25->1 25->26 26->1 26->1 26->25 26->29 27->1 27->33 28->1 29->1 29->14 30->21 30->30 30->32 30->34 30->35 30->36 30->37 30->37 30->38 30->52 30->53 30->81 30->82 30->84 32->32 32->33 32->46 32->46 32->56 32->68 32->91 32->92 33->1 33->1 33->1 33->17 33->30 33->33 33->47 33->48 33->49 33->50 33->50 33->64 33->88 34->1 35->1 35->1 35->36 35->56 35->65 35->68 35->71 35->74 35->76 35->78 36->1 36->1 36->51 36->55 36->58 36->62 36->75 37->1 37->30 38->1 38->1 38->22 38->22 39->1 39->40 39->71 39->72 40->1 40->1 40->54 40->70 41->53 42->1 42->1 42->54 43->1 43->1 43->61 43->67 44->1 44->1 44->1 44->56 44->65 45->1 46->1 46->32 47->1 47->1 47->49 48->1 48->49 49->1 49->1 49->1 49->48 50->1 50->33 51->1 51->1 51->38 51->38 53->32 53->53 53->59 53->59 53->60 53->65 53->74 53->95 53->96 54->1 54->1 54->1 54->39 54->40 54->41 54->42 54->42 54->43 54->44 54->53 54->54 54->60 54->60 54->61 54->66 54->67 54->72 54->75 54->89 54->90 55->1 55->23 55->23 55->45 55->45 56->1 56->1 56->1 56->63 56->69 56->73 56->76 56->76 56->77 56->78 56->93 56->94 56->98 56->99 56->100 59->1 59->53 60->1 60->32 60->43 60->43 60->53 61->1 61->1 61->44 61->44 62->1 63->1 63->1 63->1 63->64 64->1 64->47 64->47 65->1 65->1 65->1 65->56 65->70 65->71 65->97 66->1 67->1 68->1 69->1 69->1 69->1 69->64 70->1 70->54 71->1 71->1 71->1 71->72 72->1 72->1 72->61 72->61 72->66 72->66 73->1 73->1 73->63 73->63 74->1 75->55 75->62 75->72 75->72 76->1 76->1 76->56 76->73 76->73 78->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int ( /* missing proto */ putchar ) ( ) ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fclose ( void * stream ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; char * * _global_argv = ( char * * ) 0 ; extern int fcntl ( int filedes , int cmd , ... ) ; void encodeStrings_litStr2_i $ nit ( void ) ; extern int unlink ( char const * filename ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int pthread_mutex_lock ( int * mutex ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; int main ( int _formal_argc , char * * _formal_argv , char * * _formal_envp ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; void encodeStrings_litStr0_i $ nit ( void ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; int _global_argc = 0 ; void megaInit ( void ) ; char * * _global_envp = ( char * * ) 0 ; void encodeStrings_litStr3_i $ nit ( void ) ; extern int ( /* missing proto */ printf ) ( ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int ( /* missing proto */ scanf ) ( ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern int ( /* missing proto */ MAX ) ( ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern int strcmp ( char const * a , char const * b ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; void encodeStrings_litStr1_i $ nit ( void ) ; void encodeStrings_litStr4_i $ nit ( void ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; char encodeStrings_litStr4 [ 5 ] ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; char encodeStrings_litStr3 [ 10 ] ; char encodeStrings_litStr2 [ 3 ] ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern double log ( double x ) ; char encodeStrings_litStr1 [ 3 ] ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; char encodeStrings_litStr0 [ 3 ] ; void encodeStrings_litStr3_i $ nit ( void ) { { } } void encodeStrings_litStr2_i $ nit ( void ) { { } } void encodeStrings_litStr1_i $ nit ( void ) { { } } void megaInit ( void ) { { encodeStrings_litStr4_i $ nit ( ) ; encodeStrings_litStr3_i $ nit ( ) ; encodeStrings_litStr2_i $ nit ( ) ; encodeStrings_litStr1_i $ nit ( ) ; encodeStrings_litStr0_i $ nit ( ) ; } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { case 4 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 3 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 2 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 1 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 0 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; } } } int main ( int _formal_argc , char * * _formal_argv , char * * _formal_envp ) { int t ; int ti ; int i ; int k ; int n ; int s [ 200 ] ; int sum ; int pass ; int flg ; int maeflg ; long double ans [ 200 ] ; long double tmp ; long double num ; int tmp___0 ; int _BARRIER_0 ; { megaInit ( ) ; _global_argc = _formal_argc ; _global_argv = _formal_argv ; _global_envp = _formal_envp ; _BARRIER_0 = 1 ; _1_stringEncoder ( 0 , encodeStrings_litStr0 ) ; scanf ( encodeStrings_litStr0 , & t ) ; ti = 1 ; while ( ti <= t ) { _1_stringEncoder ( 1 , encodeStrings_litStr1 ) ; scanf ( encodeStrings_litStr1 , & n ) ; sum = 0 ; i = 0 ; while ( i < n ) { _1_stringEncoder ( 2 , encodeStrings_litStr2 ) ; scanf ( encodeStrings_litStr2 , & s [ i ] ) ; sum += s [ i ] ; i ++ ; } maeflg = 0 ; pass = n ; num = ( ( long double ) 2 * ( long double ) sum ) / ( long double ) n ; while ( 1 ) { k = 0 ; flg = k ; i = 0 ; while ( i < n ) { if ( ( long double ) s [ i ] >= num ) { flg ++ ; k += s [ i ] ; } i ++ ; } if ( flg == maeflg ) { break ; } maeflg = flg ; pass = n - flg ; num = ( long double ) ( 2 * sum - k ) / ( long double ) pass ; } tmp = ( long double ) ( 100.0 / ( double ) sum ) ; i = 0 ; while ( i < n ) { if ( ( long double ) s [ i ] < num ) { ans [ i ] = tmp * ( num - ( long double ) s [ i ] ) ; } else { ans [ i ] = ( long double ) 0 ; } i ++ ; } _1_stringEncoder ( 3 , encodeStrings_litStr3 ) ; printf ( encodeStrings_litStr3 , ti ) ; i = 0 ; while ( i < n ) { tmp___0 = MAX ( ans [ i ] , 0 ) ; _1_stringEncoder ( 4 , encodeStrings_litStr4 ) ; printf ( encodeStrings_litStr4 , tmp___0 ) ; i ++ ; } putchar ( 10 ) ; ti ++ ; } return ( 0 ) ; } } void encodeStrings_litStr4_i $ nit ( void ) { { } } void encodeStrings_litStr0_i $ nit ( void ) { { } }
>>>Func
METHOD main
METHOD_RETURN int
PARAM int argc
PARAM char **argv
PARAM char **_formal_envp
megaInit megaInit()
<operator>.assignment _global_argc = argc
<operator>.assignment _global_argv = argv
<operator>.assignment _global_envp = _formal_envp
<operator>.assignment _BARRIER_0 = 1
<operator>.assignment sum = 0
<operator>.assignment str = (char const   *)*(argv + 1)
<operator>.assignment i = 0
<operator>.assignment t = str
_1_stringEncoder _1_stringEncoder(0, encodeStrings_litStr0)
printf printf(encodeStrings_litStr0, sum)
RETURN return (0); return (0);
<operator>.lessThan i < 16
LITERAL 0 return (0);
<operator>.cast (char const   *)*(argv + 1)
<operator>.assignmentPlus sum += i
<operator>.postIncrement i ++
<operator>.assignmentPlus sum += (int )*t
<operator>.postIncrement t ++
<operator>.addition argv + 1
<operator>.cast (int )*t
<operator>.indirection *t
UNKNOWN int int
<operator>.indirection *t
>>>PDG&29 0->2 0->3 0->4 0->5 0->6 0->7 0->8 0->9 0->10 0->12 0->13 0->14 0->15 0->16 0->17 0->18 0->20 0->21 0->22 0->23 0->24 2->6 3->7 3->24 4->8 5->1 6->1 6->1 6->1 7->1 7->1 8->1 8->1 8->1 9->1 9->1 10->1 10->15 10->20 10->22 11->1 11->1 11->13 12->1 12->17 13->1 13->1 13->1 13->23 14->1 14->15 15->1 15->1 15->1 16->1 17->1 17->1 17->17 17->20 17->20 17->21 17->21 18->16 19->1 20->1 20->15 20->22 21->1 21->17 22->1 22->1 22->15 23->1 23->1 24->1 25->1 26->22 26->23 26->25 26->26 26->27 26->28
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; char * * _global_argv = ( char * * ) 0 ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; int main ( int argc , char * * argv , char * * _formal_envp ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; void encodeStrings_litStr0_i $ nit ( void ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; int _global_argc = 0 ; void megaInit ( void ) ; char * * _global_envp = ( char * * ) 0 ; extern int ( /* missing proto */ printf ) ( ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; char encodeStrings_litStr0 [ 12 ] ; void megaInit ( void ) { { encodeStrings_litStr0_i $ nit ( ) ; } } void encodeStrings_litStr0_i $ nit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { case 0 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; } } } int main ( int argc , char * * argv , char * * _formal_envp ) { int i ; int sum ; char const * str ; register char const * t ; int _BARRIER_0 ; { megaInit ( ) ; _global_argc = argc ; _global_argv = argv ; _global_envp = _formal_envp ; _BARRIER_0 = 1 ; sum = 0 ; str = ( char const * ) * ( argv + 1 ) ; i = 0 ; while ( i < 16 ) { sum += i ; i ++ ; } t = str ; while ( * t ) { sum += ( int ) * t ; t ++ ; } _1_stringEncoder ( 0 , encodeStrings_litStr0 ) ; printf ( encodeStrings_litStr0 , sum ) ; return ( 0 ) ; } }
>>>Func
METHOD order
METHOD_RETURN int
PARAM int x
<operator>.assignment n = 0
RETURN return (n); return (n);
IDENTIFIER x while (x)
IDENTIFIER n return (n);
<operator>.postIncrement n ++
<operator>.assignmentDivision x /= 10
>>>PDG&9 0->2 0->3 0->5 0->6 0->7 0->8 2->1 2->8 3->1 3->1 3->6 3->7 4->1 6->4 7->1 7->1 7->6 8->1 8->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; void main ( void ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int printf ( char const * format , ... ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; int order ( int x ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; int order ( int x ) { int n ; { n = 0 ; while ( x ) { n ++ ; x /= 10 ; } return ( n ) ; } } void megaInit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { } } } void main ( void ) { { megaInit ( ) ; } }
>>>Func
METHOD string_nocase_hash
METHOD_RETURN unsigned int
PARAM void *string
<operator>.assignment result = 5381U
<operator>.assignment p = (unsigned char *)string
RETURN return (result); return (result);
<operator>.notEquals (int )*p != 0
IDENTIFIER result return (result);
<operator>.cast (unsigned char *)string
<operator>.assignment tmp = tolower((int )*p)
<operator>.assignment result = ((result << 5) + result) + (unsigned int )tmp
<operator>.postIncrement p ++
<operator>.cast (int )*p
tolower tolower((int )*p)
<operator>.addition ((result << 5) + result) + (unsigned int )tmp
<operator>.addition (result << 5) + result
<operator>.cast (unsigned int )tmp
<operator>.shiftLeft result << 5
UNKNOWN int int
<operator>.indirection *p
<operator>.cast (int )*p
UNKNOWN int int
<operator>.indirection *p
UNKNOWN unsigned int unsigned int
>>>PDG&24 0->2 0->3 0->4 0->6 0->7 0->8 0->10 0->11 0->14 0->15 0->16 0->17 2->4 2->8 3->1 3->1 3->7 3->17 4->1 4->1 4->1 4->11 5->1 6->1 6->1 6->6 6->9 6->10 6->11 6->12 6->13 6->14 6->15 6->16 6->17 6->18 6->19 6->20 6->21 6->22 6->23 7->5 8->1 9->1 9->1 9->10 9->14 9->16 10->1 10->1 10->1 10->7 10->17 11->1 11->1 12->1 13->9 14->1 14->1 15->1 16->1 17->10 17->10 17->14 17->14 17->15 17->15
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; unsigned int string_nocase_hash ( void * string ) ; extern unsigned long strlen ( char const * s ) ; void main ( void ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int printf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern int scanf ( char const * format , ... ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern float strtof ( char const * str , char const * endptr ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern int ( /* missing proto */ tolower ) ( ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; void megaInit ( void ) { { } } unsigned int string_nocase_hash ( void * string ) { unsigned int result ; unsigned char * p ; int tmp ; { result = 5381U ; p = ( unsigned char * ) string ; while ( ( int ) * p != 0 ) { tmp = tolower ( ( int ) * p ) ; result = ( ( result << 5 ) + result ) + ( unsigned int ) tmp ; p ++ ; } return ( result ) ; } } void main ( void ) { { megaInit ( ) ; } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { } } }
>>>Func
METHOD _1_stringEncoder
METHOD_RETURN void
PARAM int n
PARAM char str[]
BLOCK <empty> <empty>
<operator>.assignment encodeStrings_i3 = 0
IDENTIFIER n switch(n)
LITERAL 1 <empty>
<operator>.assignment str[encodeStrings_i3] = 'S'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'u'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'm'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'i'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ':'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 0 <empty>
<operator>.assignment str[encodeStrings_i3] = 'S'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'u'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'm'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'i'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ':'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
>>>PDG&57 0->2 0->3 0->4 0->5 0->6 0->7 0->8 0->9 0->10 0->11 0->12 0->13 0->14 0->15 0->16 0->17 0->18 0->19 0->20 0->21 0->22 0->23 0->24 0->25 0->26 0->27 0->28 0->29 0->30 0->31 0->32 0->33 0->34 0->35 0->36 0->37 0->38 0->39 0->40 0->41 0->42 0->43 0->44 0->45 0->46 0->47 0->48 0->49 0->50 0->51 0->52 0->53 0->54 0->55 0->56 2->1 3->1 5->1 5->1 5->9 5->34 8->1 9->11 10->1 11->13 12->1 13->15 15->17 16->1 17->19 18->1 19->21 20->1 21->23 22->1 23->25 24->1 25->27 26->1 27->29 28->1 29->31 30->1 30->1 31->1 31->1 33->1 34->36 35->1 36->38 37->1 38->40 40->42 41->1 42->44 43->1 44->46 45->1 46->48 47->1 48->50 49->1 50->52 51->1 52->54 53->1 54->56 55->1 55->1 56->1 56->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; char * * _global_argv = ( char * * ) 0 ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern int raise ( int sig ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; int main ( int argc , char * * argv , char * * _formal_envp ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void encodeStrings_litStr0_i $ nit ( void ) ; int _global_argc = 0 ; void megaInit ( void ) ; char * * _global_envp = ( char * * ) 0 ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int ( /* missing proto */ printf ) ( ) ; extern int scanf ( char const * format , ... ) ; extern void perror ( char const * str ) ; extern long clock ( void ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern float strtof ( char const * str , char const * endptr ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern double strtod ( char const * str , char const * endptr ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; void encodeStrings_litStr1_i $ nit ( void ) ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; char encodeStrings_litStr1 [ 12 ] ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; char encodeStrings_litStr0 [ 12 ] ; void megaInit ( void ) { { encodeStrings_litStr1_i $ nit ( ) ; encodeStrings_litStr0_i $ nit ( ) ; } } void encodeStrings_litStr0_i $ nit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { case 1 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 0 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; } } } int main ( int argc , char * * argv , char * * _formal_envp ) { int i ; int sum ; int _BARRIER_0 ; { megaInit ( ) ; _global_argc = argc ; _global_argv = argv ; _global_envp = _formal_envp ; _BARRIER_0 = 1 ; sum = 0 ; i = 0 ; while ( i < ( int ) * ( * ( argv + 1 ) + 0 ) ) { sum += i ; i ++ ; } if ( sum == 8128 ) { _1_stringEncoder ( 0 , encodeStrings_litStr0 ) ; printf ( encodeStrings_litStr0 , sum ) ; } else { _1_stringEncoder ( 1 , encodeStrings_litStr1 ) ; printf ( encodeStrings_litStr1 , sum ) ; } return ( 0 ) ; } } void encodeStrings_litStr1_i $ nit ( void ) { { } }
>>>Func
METHOD isP
METHOD_RETURN int
PARAM unsigned long long x
<operator>.assignment n = (char)0
<operator>.assignment i = (char)0
RETURN return (1); return (1);
IDENTIFIER x while (x)
<operator>.lessThan (int )i < ((int )n + 1) / 2
LITERAL 1 return (1);
<operator>.cast (char)0
<operator>.assignment v[n] = (char )(x % 10ULL)
<operator>.assignmentDivision x /= 10ULL
<operator>.assignment n = (char )((int )n + 1)
<operator>.cast (char)0
<operator>.assignment i = (char )((int )i + 1)
<operator>.cast (int )i
<operator>.division ((int )n + 1) / 2
<operator>.notEquals (int )v[i] != (int )v[((int )n - (int )i) - 1]
<operator>.cast (char )(x % 10ULL)
<operator>.cast (char )((int )n + 1)
<operator>.addition (int )n + 1
RETURN return (0); return (0);
<operator>.cast (char )((int )i + 1)
<operator>.modulo x % 10ULL
<operator>.addition (int )n + 1
<operator>.cast (int )n
<operator>.cast (int )v[i]
<operator>.cast (int )v[((int )n - (int )i) - 1]
LITERAL 0 return (0);
<operator>.addition (int )i + 1
<operator>.cast (int )n
<operator>.cast (int )i
<operator>.subtraction ((int )n - (int )i) - 1
<operator>.subtraction (int )n - (int )i
<operator>.cast (int )n
<operator>.cast (int )i
UNKNOWN int int
UNKNOWN char char
UNKNOWN int int
UNKNOWN int int
<operator>.indirectIndexAccess v[i]
UNKNOWN int int
<operator>.indirectIndexAccess v[((int )n - (int )i) - 1]
UNKNOWN int int
UNKNOWN int int
UNKNOWN int int
>>>PDG&46 0->2 0->3 0->4 0->5 0->6 0->7 0->8 0->9 0->11 0->12 0->13 0->14 0->15 0->16 0->19 0->20 0->21 0->22 0->23 0->24 0->25 0->28 0->29 0->30 0->31 0->32 0->33 0->34 0->35 2->1 2->23 3->1 3->12 3->16 3->19 3->20 3->24 3->25 3->30 4->1 4->1 4->7 4->14 4->15 4->22 4->29 4->31 4->33 4->35 5->1 7->1 7->1 7->5 7->17 7->26 7->27 7->32 7->33 7->34 7->35 7->39 7->40 7->41 7->42 7->44 7->45 8->5 10->1 10->1 10->1 11->1 11->1 11->23 12->1 12->1 12->16 12->19 12->20 12->24 12->25 12->30 14->1 14->1 14->7 14->15 14->22 14->29 14->31 14->33 14->35 16->1 16->7 16->7 17->1 17->1 17->1 17->7 17->14 17->15 17->16 17->20 17->21 17->22 17->25 17->29 17->31 17->36 17->37 17->38 17->43 18->1 21->1 22->1 23->10 23->10 23->11 23->18 23->18 26->1 27->1 28->21 32->1 33->1 33->1 33->32 33->32 34->1 35->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; void main ( void ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int printf ( char const * format , ... ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; int isP ( unsigned long long x ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; int isP ( unsigned long long x ) { char v [ 14 ] ; char i ; char n ; { n = ( char ) 0 ; while ( x ) { v [ n ] = ( char ) ( x % 10ULL ) ; x /= 10ULL ; n = ( char ) ( ( int ) n + 1 ) ; } i = ( char ) 0 ; while ( ( int ) i < ( ( int ) n + 1 ) / 2 ) { if ( ( int ) v [ i ] != ( int ) v [ ( ( int ) n - ( int ) i ) - 1 ] ) { return ( 0 ) ; } i = ( char ) ( ( int ) i + 1 ) ; } return ( 1 ) ; } } void megaInit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { } } } void main ( void ) { { megaInit ( ) ; } }
>>>Func
METHOD _1_stringEncoder
METHOD_RETURN void
PARAM int n
PARAM char str[]
BLOCK <empty> <empty>
<operator>.assignment encodeStrings_i3 = 0
IDENTIFIER n switch(n)
LITERAL 1 <empty>
<operator>.assignment str[encodeStrings_i3] = 'S'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'u'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'm'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'i'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ':'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 0 <empty>
<operator>.assignment str[encodeStrings_i3] = 'U'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'g'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ':'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'p'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'o'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'g'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'm'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '-'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'm'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'c'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'h'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
>>>PDG&85 0->2 0->3 0->4 0->5 0->6 0->7 0->8 0->9 0->10 0->11 0->12 0->13 0->14 0->15 0->16 0->17 0->18 0->19 0->20 0->21 0->22 0->23 0->24 0->25 0->26 0->27 0->28 0->29 0->30 0->31 0->32 0->33 0->34 0->35 0->36 0->37 0->38 0->39 0->40 0->41 0->42 0->43 0->44 0->45 0->46 0->47 0->48 0->49 0->50 0->51 0->52 0->53 0->54 0->55 0->56 0->57 0->58 0->59 0->60 0->61 0->62 0->63 0->64 0->65 0->66 0->67 0->68 0->69 0->70 0->71 0->72 0->73 0->74 0->75 0->76 0->77 0->78 0->79 0->80 0->81 0->82 0->83 0->84 2->1 3->1 5->1 5->1 5->9 5->34 8->1 9->11 10->1 11->13 12->1 13->15 15->17 16->1 17->19 18->1 19->21 20->1 21->23 22->1 23->25 24->1 25->27 26->1 27->29 28->1 29->31 30->1 30->1 31->1 31->1 33->1 34->36 35->1 36->38 38->40 40->42 42->44 43->1 44->46 46->48 47->1 48->50 50->52 51->1 52->54 53->1 54->56 56->58 58->60 60->62 61->1 62->64 63->1 64->66 66->68 67->1 68->70 69->1 70->72 71->1 72->74 73->1 74->76 75->1 76->78 77->1 78->80 79->1 80->82 81->1 82->84 83->1 83->1 84->1 84->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; char * * _global_argv = ( char * * ) 0 ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern int raise ( int sig ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; int main ( int argc , char * * argv , char * * _formal_envp ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void encodeStrings_litStr0_i $ nit ( void ) ; int _global_argc = 0 ; void megaInit ( void ) ; char * * _global_envp = ( char * * ) 0 ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int ( /* missing proto */ printf ) ( ) ; extern int scanf ( char const * format , ... ) ; extern void perror ( char const * str ) ; extern long clock ( void ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern float strtof ( char const * str , char const * endptr ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern double strtod ( char const * str , char const * endptr ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; void encodeStrings_litStr1_i $ nit ( void ) ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; char encodeStrings_litStr1 [ 12 ] ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; char encodeStrings_litStr0 [ 26 ] ; void megaInit ( void ) { { encodeStrings_litStr1_i $ nit ( ) ; encodeStrings_litStr0_i $ nit ( ) ; } } void encodeStrings_litStr0_i $ nit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { case 1 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 0 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; } } } int main ( int argc , char * * argv , char * * _formal_envp ) { int i ; int sum ; int _BARRIER_0 ; { megaInit ( ) ; _global_argc = argc ; _global_argv = argv ; _global_envp = _formal_envp ; _BARRIER_0 = 1 ; sum = 0 ; i = 0 ; while ( i < ( int ) * ( * ( argv + 1 ) + 0 ) ) { if ( argc < 2 ) { _1_stringEncoder ( 0 , encodeStrings_litStr0 ) ; printf ( encodeStrings_litStr0 ) ; return ( 1 ) ; } sum += i ; i ++ ; } _1_stringEncoder ( 1 , encodeStrings_litStr1 ) ; printf ( encodeStrings_litStr1 , sum ) ; return ( 0 ) ; } } void encodeStrings_litStr1_i $ nit ( void ) { { } }
>>>Func
METHOD removeDuplicates
METHOD_RETURN int
PARAM int *nums
PARAM int numsSize
<operator>.assignment count = 0
<operator>.assignment i = 1
RETURN return (numsSize - count); return (numsSize - count);
<operator>.lessThan i < numsSize
<operator>.subtraction numsSize - count
<operator>.postIncrement i ++
<operator>.equals *(nums + i) == *(nums + (i - 1))
<operator>.postIncrement count ++
<operator>.assignment *(nums + (i - count)) = *(nums + i)
<operator>.addition nums + i
<operator>.addition nums + (i - 1)
<operator>.subtraction i - 1
<operator>.addition nums + (i - count)
<operator>.addition nums + i
<operator>.subtraction i - count
<operator>.indirection *(nums + i)
<operator>.indirection *(nums + (i - 1))
<operator>.indirection *(nums + (i - count))
<operator>.indirection *(nums + i)
>>>PDG&23 0->2 0->3 0->4 0->5 0->7 0->8 0->9 0->11 0->13 0->14 0->15 0->16 0->17 0->18 2->1 2->13 3->7 4->1 4->8 4->11 4->18 5->1 5->7 6->1 7->1 7->1 7->7 7->8 7->9 7->10 7->13 7->13 7->14 7->15 7->15 7->19 7->20 8->1 8->1 8->1 8->6 9->1 9->7 10->1 10->1 10->1 10->11 10->12 10->16 10->17 10->18 10->21 10->22 11->1 11->8 11->18 12->1 12->1 12->1 14->1 14->1 15->9 15->14 15->14 15->18 16->1 17->1 18->8 18->9 18->11 18->16 18->16 18->17
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; void main ( void ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int printf ( char const * format , ... ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; int removeDuplicates ( int * nums , int numsSize ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { } } } void megaInit ( void ) { { } } int removeDuplicates ( int * nums , int numsSize ) { int count ; int i ; { count = 0 ; i = 1 ; while ( i < numsSize ) { if ( * ( nums + i ) == * ( nums + ( i - 1 ) ) ) { count ++ ; } else { * ( nums + ( i - count ) ) = * ( nums + i ) ; } i ++ ; } return ( numsSize - count ) ; } } void main ( void ) { { megaInit ( ) ; } }
>>>Func
METHOD main
METHOD_RETURN int
PARAM int argc
PARAM char **argv
PARAM char **_formal_envp
megaInit megaInit()
<operator>.assignment _global_argc = argc
<operator>.assignment _global_argv = argv
<operator>.assignment _global_envp = _formal_envp
<operator>.assignment _BARRIER_0 = 1
<operator>.assignment sum = 0
<operator>.assignment i = 0
_1_stringEncoder _1_stringEncoder(0, encodeStrings_litStr0)
printf printf(encodeStrings_litStr0, sum)
RETURN return (0); return (0);
<operator>.lessThan i < argc
LITERAL 0 return (0);
<operator>.assignment j = 1
<operator>.postIncrement i ++
<operator>.lessEqualsThan j <= (int )*(*(argv + 1) + 0)
<operator>.assignmentPlus sum += j
<operator>.postIncrement j ++
<operator>.cast (int )*(*(argv + 1) + 0)
<operator>.addition *(argv + 1) + 0
<operator>.addition argv + 1
UNKNOWN int int
<operator>.indirection *(*(argv + 1) + 0)
<operator>.indirection *(argv + 1)
>>>PDG&28 0->2 0->3 0->4 0->5 0->6 0->7 0->8 0->9 0->10 0->11 0->12 0->13 0->14 0->15 0->16 0->17 0->18 0->19 0->20 0->21 0->23 0->24 2->6 2->15 3->7 3->24 4->8 5->1 6->1 6->1 7->1 7->1 7->1 8->1 8->1 8->1 9->1 9->1 10->1 10->13 10->20 11->1 11->15 12->1 12->13 13->1 13->1 13->1 14->1 15->1 15->1 15->1 15->15 15->17 15->18 15->18 15->19 15->22 15->23 15->24 15->25 15->26 15->27 16->14 17->1 17->19 18->1 18->15 19->1 19->1 19->1 19->19 19->20 19->20 19->21 19->21 19->22 19->23 19->24 19->25 19->26 19->27 20->1 20->13 21->1 21->19 22->1 23->1 24->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; char * * _global_argv = ( char * * ) 0 ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; int main ( int argc , char * * argv , char * * _formal_envp ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; void encodeStrings_litStr0_i $ nit ( void ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; int _global_argc = 0 ; void megaInit ( void ) ; char * * _global_envp = ( char * * ) 0 ; extern int ( /* missing proto */ printf ) ( ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; char encodeStrings_litStr0 [ 12 ] ; void megaInit ( void ) { { encodeStrings_litStr0_i $ nit ( ) ; } } void encodeStrings_litStr0_i $ nit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { case 0 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; } } } int main ( int argc , char * * argv , char * * _formal_envp ) { int i ; int j ; int sum ; int _BARRIER_0 ; { megaInit ( ) ; _global_argc = argc ; _global_argv = argv ; _global_envp = _formal_envp ; _BARRIER_0 = 1 ; sum = 0 ; i = 0 ; while ( i < argc ) { j = 1 ; while ( j <= ( int ) * ( * ( argv + 1 ) + 0 ) ) { sum += j ; j ++ ; } i ++ ; } _1_stringEncoder ( 0 , encodeStrings_litStr0 ) ; printf ( encodeStrings_litStr0 , sum ) ; return ( 0 ) ; } }
>>>Func
METHOD inorderTraversal
METHOD_RETURN int*
PARAM struct TreeNode *root
PARAM int *returnSize
<operator>.assignment tmp = malloc(256UL * sizeof(int ))
<operator>.assignment res = (int *)tmp
<operator>.assignment *returnSize = 0
processTraversal processTraversal(root, res, returnSize)
RETURN return (res); return (res);
IDENTIFIER res return (res);
malloc malloc(256UL * sizeof(int ))
<operator>.cast (int *)tmp
<operator>.multiplication 256UL * sizeof(int )
<operator>.sizeOf sizeof(int )
>>>PDG&14 0->2 0->3 0->5 0->6 0->7 0->9 0->11 0->12 2->7 3->7 4->1 4->1 4->5 4->11 5->1 5->1 5->7 6->1 6->1 6->7 7->1 7->1 7->1 7->1 7->9 8->1 9->8 10->1 10->4 11->1 12->10 13->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct TreeNode ; struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fclose ( void * stream ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int ( /* missing proto */ processTraversal ) ( ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern int ( /* missing proto */ malloc ) ( ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; void main ( void ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int printf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern int scanf ( char const * format , ... ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; int * inorderTraversal ( struct TreeNode * root , int * returnSize ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { } } } void main ( void ) { { megaInit ( ) ; } } void megaInit ( void ) { { } } int * inorderTraversal ( struct TreeNode * root , int * returnSize ) { int * res ; int tmp ; { tmp = malloc ( 256UL * sizeof ( int ) ) ; res = ( int * ) tmp ; * returnSize = 0 ; processTraversal ( root , res , returnSize ) ; return ( res ) ; } }
>>>Func
METHOD sort_d
METHOD_RETURN void
PARAM long *a
PARAM long n
<operator>.assignment i = 0L
RETURN return; return;
<operator>.lessThan i < n - 1L
<operator>.assignment mi = 0L
<operator>.assignment mv = *(a + mi)
<operator>.assignment j = 1L
<operator>.assignment *(a + mi) = *(a + ((n - 1L) - i))
<operator>.assignment *(a + ((n - 1L) - i)) = mv
<operator>.postIncrement i ++
<operator>.subtraction n - 1L
<operator>.lessThan j < n - i
<operator>.postIncrement j ++
<operator>.addition a + mi
<operator>.subtraction n - i
<operator>.lessThan *(a + j) < mv
<operator>.addition a + mi
<operator>.addition a + ((n - 1L) - i)
<operator>.addition a + ((n - 1L) - i)
<operator>.assignment mv = *(a + j)
<operator>.assignment mi = j
<operator>.subtraction (n - 1L) - i
<operator>.subtraction (n - 1L) - i
<operator>.subtraction n - 1L
<operator>.subtraction n - 1L
<operator>.addition a + j
<operator>.addition a + j
<operator>.indirection *(a + mi)
<operator>.indirection *(a + mi)
<operator>.indirection *(a + ((n - 1L) - i))
<operator>.indirection *(a + ((n - 1L) - i))
<operator>.indirection *(a + j)
<operator>.indirection *(a + j)
>>>PDG&36 0->2 0->3 0->4 0->5 0->6 0->7 0->9 0->11 0->12 0->13 0->14 0->15 0->16 0->17 0->18 0->19 0->20 0->21 0->23 0->24 0->25 0->26 0->27 0->28 0->29 2->1 2->16 3->13 4->1 4->6 5->1 6->1 6->1 6->1 6->6 6->7 6->8 6->9 6->10 6->11 6->12 6->13 6->14 6->16 6->17 6->17 6->19 6->20 6->21 6->24 6->25 6->26 6->27 6->30 6->31 6->32 6->33 7->1 7->16 7->19 8->1 8->11 8->18 9->1 9->14 10->1 10->1 11->1 11->1 11->1 12->1 12->6 13->1 13->6 13->6 13->17 14->1 14->1 14->1 14->14 14->15 14->15 14->17 14->18 14->23 14->28 14->28 14->29 14->34 15->1 15->14 17->14 17->14 17->24 17->26 18->1 18->1 18->11 18->22 18->23 18->29 18->35 19->1 21->1 21->1 22->1 22->1 22->11 22->18 23->1 23->19 24->20 24->20 24->25 25->12 25->21 25->21 26->24 26->24 26->27 27->13 27->25 27->25
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; void main ( void ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void megaInit ( void ) ; void sort_d ( long * a , long n ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int printf ( char const * format , ... ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { } } } void megaInit ( void ) { { } } void sort_d ( long * a , long n ) { long i ; long j ; long mi ; long mv ; { i = 0L ; while ( i < n - 1L ) { mi = 0L ; mv = * ( a + mi ) ; j = 1L ; while ( j < n - i ) { if ( * ( a + j ) < mv ) { mv = * ( a + j ) ; mi = j ; } j ++ ; } * ( a + mi ) = * ( a + ( ( n - 1L ) - i ) ) ; * ( a + ( ( n - 1L ) - i ) ) = mv ; i ++ ; } return ; } } void main ( void ) { { megaInit ( ) ; } }
>>>Func
METHOD has_feature
METHOD_RETURN int
PARAM char **features
PARAM char *feature
PARAM int n
<operator>.assignment i = 0
RETURN return (0); return (0);
<operator>.lessThan i < n
LITERAL 0 return (0);
<operator>.assignment tmp = strcmp(*(features + i), feature)
<operator>.postIncrement i ++
<operator>.equals tmp == 0
strcmp strcmp(*(features + i), feature)
RETURN return (1); return (1);
LITERAL 1 return (1);
<operator>.addition features + i
<operator>.indirection *(features + i)
>>>PDG&17 0->2 0->3 0->4 0->5 0->6 0->7 0->8 0->10 0->11 0->12 0->13 0->14 0->15 2->15 3->12 4->7 5->1 5->7 6->1 7->1 7->1 7->6 7->9 7->10 7->11 7->12 7->15 7->15 7->16 8->6 9->1 9->1 9->11 10->1 10->7 11->1 11->1 11->7 11->10 11->13 12->1 12->1 12->9 12->9 13->1 14->13 15->1 15->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; int has_feature ( char * * features , char * feature , int n ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; void main ( void ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int printf ( char const * format , ... ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int ( /* missing proto */ strcmp ) ( ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { } } } void megaInit ( void ) { { } } int has_feature ( char * * features , char * feature , int n ) { int i ; int tmp ; { i = 0 ; while ( i < n ) { tmp = strcmp ( * ( features + i ) , feature ) ; if ( tmp == 0 ) { return ( 1 ) ; } i ++ ; } return ( 0 ) ; } } void main ( void ) { { megaInit ( ) ; } }
>>>Func
METHOD _1_stringEncoder
METHOD_RETURN void
PARAM int n
PARAM char str[]
BLOCK <empty> <empty>
<operator>.assignment encodeStrings_i3 = 0
IDENTIFIER n switch(n)
LITERAL 3 <empty>
<operator>.assignment str[encodeStrings_i3] = 'i'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'f'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '-'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '2'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '-'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'l'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'o'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 2 <empty>
<operator>.assignment str[encodeStrings_i3] = 'i'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'f'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '-'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '2'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '-'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'w'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'i'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 1 <empty>
<operator>.assignment str[encodeStrings_i3] = 'i'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'f'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '-'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '1'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '-'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'l'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'o'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 0 <empty>
<operator>.assignment str[encodeStrings_i3] = 'i'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'f'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '-'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '1'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '-'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'w'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'i'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
>>>PDG&95 0->2 0->3 0->4 0->5 0->6 0->7 0->8 0->9 0->10 0->11 0->12 0->13 0->14 0->15 0->16 0->17 0->18 0->19 0->20 0->21 0->22 0->23 0->24 0->25 0->26 0->27 0->28 0->29 0->30 0->31 0->32 0->33 0->34 0->35 0->36 0->37 0->38 0->39 0->40 0->41 0->42 0->43 0->44 0->45 0->46 0->47 0->48 0->49 0->50 0->51 0->52 0->53 0->54 0->55 0->56 0->57 0->58 0->59 0->60 0->61 0->62 0->63 0->64 0->65 0->66 0->67 0->68 0->69 0->70 0->71 0->72 0->73 0->74 0->75 0->76 0->77 0->78 0->79 0->80 0->81 0->82 0->83 0->84 0->85 0->86 0->87 0->88 0->89 0->90 0->91 0->92 0->93 0->94 2->1 3->1 5->1 5->1 5->9 5->32 5->53 5->76 8->1 9->11 10->1 11->13 13->15 14->1 15->17 16->1 17->19 18->1 19->21 20->1 21->23 22->1 23->25 24->1 25->27 26->1 27->29 28->1 28->1 29->1 29->1 32->34 33->1 34->36 36->38 37->1 38->40 39->1 40->42 41->1 42->44 43->1 44->46 45->1 46->48 47->1 48->50 49->1 49->1 50->1 50->1 52->1 53->55 54->1 55->57 57->59 58->1 59->61 60->1 61->63 62->1 63->65 64->1 65->67 66->1 67->69 68->1 69->71 70->1 71->73 72->1 72->1 73->1 73->1 76->78 77->1 78->80 80->82 81->1 82->84 83->1 84->86 85->1 86->88 87->1 88->90 89->1 90->92 91->1 92->94 93->1 93->1 94->1 94->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern void exit ( int status ) ; extern int pthread_cond_signal ( int * cond ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; char * * _global_argv = ( char * * ) 0 ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; void encodeStrings_litStr2_i $ nit ( void ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int pthread_mutex_lock ( int * mutex ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; int main ( int argc , char * * argv , char * * _formal_envp ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; void encodeStrings_litStr0_i $ nit ( void ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; int _global_argc = 0 ; void megaInit ( void ) ; char * * _global_envp = ( char * * ) 0 ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; void encodeStrings_litStr3_i $ nit ( void ) ; extern int ( /* missing proto */ printf ) ( ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; void encodeStrings_litStr1_i $ nit ( void ) ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; char encodeStrings_litStr3 [ 11 ] ; char encodeStrings_litStr2 [ 10 ] ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; char encodeStrings_litStr1 [ 11 ] ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; char encodeStrings_litStr0 [ 10 ] ; void encodeStrings_litStr0_i $ nit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { case 3 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 2 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 1 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 0 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; } } } void encodeStrings_litStr1_i $ nit ( void ) { { } } void megaInit ( void ) { { encodeStrings_litStr3_i $ nit ( ) ; encodeStrings_litStr2_i $ nit ( ) ; encodeStrings_litStr1_i $ nit ( ) ; encodeStrings_litStr0_i $ nit ( ) ; } } void encodeStrings_litStr3_i $ nit ( void ) { { } } void encodeStrings_litStr2_i $ nit ( void ) { { } } int main ( int argc , char * * argv , char * * _formal_envp ) { unsigned char c ; int _BARRIER_0 ; { megaInit ( ) ; _global_argc = argc ; _global_argv = argv ; _global_envp = _formal_envp ; _BARRIER_0 = 1 ; c = ( unsigned char ) * ( * ( argv + 1 ) + 0 ) ; if ( ( int ) c > 127 ) { _1_stringEncoder ( 0 , encodeStrings_litStr0 ) ; printf ( encodeStrings_litStr0 ) ; } else { _1_stringEncoder ( 1 , encodeStrings_litStr1 ) ; printf ( encodeStrings_litStr1 ) ; } if ( ( int ) c == 63 ) { _1_stringEncoder ( 2 , encodeStrings_litStr2 ) ; printf ( encodeStrings_litStr2 ) ; } else { _1_stringEncoder ( 3 , encodeStrings_litStr3 ) ; printf ( encodeStrings_litStr3 ) ; } return ( 0 ) ; } }
>>>Func
METHOD _1_stringEncoder
METHOD_RETURN void
PARAM int n
PARAM char str[]
BLOCK <empty> <empty>
<operator>.assignment encodeStrings_i3 = 0
IDENTIFIER n switch(n)
LITERAL 1 <empty>
<operator>.assignment str[encodeStrings_i3] = 'S'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'u'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'm'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'i'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ':'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 0 <empty>
<operator>.assignment str[encodeStrings_i3] = 'U'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'g'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ':'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'p'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'o'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'g'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'm'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '-'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'm'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'c'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'h'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
>>>PDG&85 0->2 0->3 0->4 0->5 0->6 0->7 0->8 0->9 0->10 0->11 0->12 0->13 0->14 0->15 0->16 0->17 0->18 0->19 0->20 0->21 0->22 0->23 0->24 0->25 0->26 0->27 0->28 0->29 0->30 0->31 0->32 0->33 0->34 0->35 0->36 0->37 0->38 0->39 0->40 0->41 0->42 0->43 0->44 0->45 0->46 0->47 0->48 0->49 0->50 0->51 0->52 0->53 0->54 0->55 0->56 0->57 0->58 0->59 0->60 0->61 0->62 0->63 0->64 0->65 0->66 0->67 0->68 0->69 0->70 0->71 0->72 0->73 0->74 0->75 0->76 0->77 0->78 0->79 0->80 0->81 0->82 0->83 0->84 2->1 3->1 5->1 5->1 5->9 5->34 8->1 9->11 10->1 11->13 12->1 13->15 15->17 16->1 17->19 18->1 19->21 20->1 21->23 22->1 23->25 24->1 25->27 26->1 27->29 28->1 29->31 30->1 30->1 31->1 31->1 33->1 34->36 35->1 36->38 38->40 40->42 42->44 43->1 44->46 46->48 47->1 48->50 50->52 51->1 52->54 53->1 54->56 56->58 58->60 60->62 61->1 62->64 63->1 64->66 66->68 67->1 68->70 69->1 70->72 71->1 72->74 73->1 74->76 75->1 76->78 77->1 78->80 79->1 80->82 81->1 82->84 83->1 83->1 84->1 84->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; char * * _global_argv = ( char * * ) 0 ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern int raise ( int sig ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; int main ( int argc , char * * argv , char * * _formal_envp ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void encodeStrings_litStr0_i $ nit ( void ) ; int _global_argc = 0 ; void megaInit ( void ) ; char * * _global_envp = ( char * * ) 0 ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int ( /* missing proto */ printf ) ( ) ; extern int scanf ( char const * format , ... ) ; extern void perror ( char const * str ) ; extern long clock ( void ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern float strtof ( char const * str , char const * endptr ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern double strtod ( char const * str , char const * endptr ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; void encodeStrings_litStr1_i $ nit ( void ) ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; char encodeStrings_litStr1 [ 12 ] ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; char encodeStrings_litStr0 [ 26 ] ; void megaInit ( void ) { { encodeStrings_litStr1_i $ nit ( ) ; encodeStrings_litStr0_i $ nit ( ) ; } } void encodeStrings_litStr0_i $ nit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { case 1 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 0 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; } } } int main ( int argc , char * * argv , char * * _formal_envp ) { int i ; int sum ; int _BARRIER_0 ; { megaInit ( ) ; _global_argc = argc ; _global_argv = argv ; _global_envp = _formal_envp ; _BARRIER_0 = 1 ; sum = 0 ; if ( argc < 2 ) { _1_stringEncoder ( 0 , encodeStrings_litStr0 ) ; printf ( encodeStrings_litStr0 ) ; return ( 1 ) ; } i = 0 ; while ( i < argc ) { sum += i ; i ++ ; } _1_stringEncoder ( 1 , encodeStrings_litStr1 ) ; printf ( encodeStrings_litStr1 , sum ) ; return ( 0 ) ; } } void encodeStrings_litStr1_i $ nit ( void ) { { } }
>>>Func
METHOD binarysearch2
METHOD_RETURN int
PARAM int const   *arr
PARAM int l
PARAM int r
PARAM int x
<operator>.assignment mid = l + (r - l) / 2
RETURN return (mid); return (mid);
<operator>.notEquals *(arr + mid) != (int const   )x
IDENTIFIER mid return (mid);
<operator>.addition l + (r - l) / 2
<operator>.assignment mid = l + (r - l) / 2
<operator>.division (r - l) / 2
<operator>.cast (int const   )x
<operator>.lessEqualsThan r <= l
<operator>.greaterThan *(arr + mid) > (int const   )x
<operator>.subtraction r - l
<operator>.addition arr + mid
RETURN return (-1); return (-1);
<operator>.assignment r = mid - 1
<operator>.addition l + (r - l) / 2
<operator>.minus -1
<operator>.cast (int const   )x
<operator>.assignment l = mid + 1
<operator>.division (r - l) / 2
<operator>.lessThan r < 0
<operator>.addition arr + mid
<operator>.subtraction mid - 1
<operator>.subtraction r - l
RETURN return (-1); return (-1);
<operator>.addition mid + 1
<operator>.minus -1
<operator>.indirection *(arr + mid)
UNKNOWN int const int const
<operator>.indirection *(arr + mid)
UNKNOWN int const int const
>>>PDG&36 0->2 0->3 0->4 0->5 0->6 0->8 0->9 0->10 0->11 0->12 0->13 0->14 0->15 0->16 0->17 0->20 0->21 0->22 0->23 0->24 0->25 0->26 0->27 0->28 0->30 0->31 2->17 3->16 4->16 5->8 5->13 6->1 6->1 6->9 6->17 6->23 6->26 6->27 6->30 7->1 8->1 8->1 8->1 8->7 8->14 9->7 10->1 11->1 11->1 11->9 11->17 11->23 11->26 11->27 11->30 12->1 12->6 12->6 12->10 12->10 13->1 14->1 14->1 14->1 14->18 14->21 14->25 14->25 14->28 15->1 15->19 15->23 15->27 15->30 16->6 16->10 16->12 16->12 16->14 16->14 17->1 17->1 18->1 19->1 19->1 19->28 20->1 21->1 21->18 23->1 23->1 23->28 24->1 24->11 24->11 24->20 24->20 25->1 25->8 25->11 25->13 25->15 25->17 25->20 25->22 25->24 25->26 25->28 25->28 25->29 25->31 25->32 25->33 25->34 25->35 27->19 27->19 28->11 28->14 28->14 28->20 28->24 28->24 29->1 31->29
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; void main ( void ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int printf ( char const * format , ... ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; int binarysearch2 ( int const * arr , int l , int r , int x ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; int binarysearch2 ( int const * arr , int l , int r , int x ) { int mid ; { mid = l + ( r - l ) / 2 ; while ( * ( arr + mid ) != ( int const ) x ) { if ( r <= l ) { return ( -1 ) ; } else if ( r < 0 ) { return ( -1 ) ; } if ( * ( arr + mid ) > ( int const ) x ) { r = mid - 1 ; } else { l = mid + 1 ; } mid = l + ( r - l ) / 2 ; } return ( mid ) ; } } void megaInit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { } } } void main ( void ) { { megaInit ( ) ; } }
>>>Func
METHOD sort1
METHOD_RETURN int
PARAM void const   *data1
PARAM void const   *data2
<operator>.assignment I1 = (double *)data1
<operator>.assignment I2 = (double *)data2
RETURN return (0); return (0);
<operator>.greaterThan *(I1 + 1) > *(I2 + 1)
<operator>.lessThan *(I1 + 1) < *(I2 + 1)
LITERAL 0 return (0);
<operator>.cast (double *)data1
<operator>.cast (double *)data2
RETURN return (1); return (1);
RETURN return (-1); return (-1);
LITERAL 1 return (1);
<operator>.minus -1
<operator>.addition I1 + 1
<operator>.addition I2 + 1
<operator>.addition I1 + 1
<operator>.addition I2 + 1
<operator>.indirection *(I1 + 1)
<operator>.indirection *(I2 + 1)
>>>PDG&22 0->2 0->3 0->4 0->5 0->6 0->9 0->10 0->11 0->12 0->14 0->15 0->16 0->17 0->18 0->19 2->4 2->10 3->5 3->11 4->1 4->1 4->16 4->18 5->1 5->1 5->17 5->19 6->1 7->1 7->1 7->1 7->8 7->12 7->18 7->19 7->20 7->21 8->6 8->13 8->15 9->6 10->1 11->1 12->1 13->1 14->12 15->13 16->1 17->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; int sort1 ( void const * data1 , void const * data2 ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; void main ( void ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int printf ( char const * format , ... ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; int sort1 ( void const * data1 , void const * data2 ) { double * I1 ; double * I2 ; { I1 = ( double * ) data1 ; I2 = ( double * ) data2 ; if ( * ( I1 + 1 ) > * ( I2 + 1 ) ) { return ( 1 ) ; } if ( * ( I1 + 1 ) < * ( I2 + 1 ) ) { return ( -1 ) ; } return ( 0 ) ; } } void megaInit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { } } } void main ( void ) { { megaInit ( ) ; } }
>>>Func
METHOD abbreviate
METHOD_RETURN char*
PARAM char const   *phrase
strcpy strcpy(str, phrase)
<operator>.assignment p_str = str
_1_stringEncoder _1_stringEncoder(0, encodeStrings_litStr0)
strcpy strcpy(acr, encodeStrings_litStr0)
<operator>.assignment counter = 0
<operator>.assignment index = 0
<operator>.assignment i = 0
<operator>.assignment i = 0
<operator>.postIncrement counter ++
<operator>.assignment tmp = malloc((unsigned long )counter * 8UL)
<operator>.assignment words = (char **)tmp
<operator>.assignment i = 0
<operator>.assignment p_str = str
<operator>.assignment p_start = p_str
<operator>.assignment *p_str = (char)0
strncat strncat(*(words + index), p_start, 80)
<operator>.postIncrement index ++
<operator>.assignment i = 0
<operator>.assignment i = 0
free free(words)
RETURN return (acr); return (acr);
LITERAL 1 while (1)
<operator>.lessThan i < counter
LITERAL 1 while (1)
<operator>.lessThan i < index
<operator>.lessThan i < counter
IDENTIFIER acr return (acr);
malloc malloc((unsigned long )counter * 8UL)
<operator>.cast (char **)tmp
<operator>.assignment tmp___0 = malloc(80UL)
<operator>.assignment *(words + i) = (char *)tmp___0
_1_stringEncoder _1_stringEncoder(1, encodeStrings_litStr1)
strcpy strcpy(*(words + i), encodeStrings_litStr1)
<operator>.postIncrement i ++
<operator>.cast (char)0
<operator>.assignment tmp___1 = toupper((int )*(*(words + i) + 0))
<operator>.assignment *(*(words + i) + 0) = (char )tmp___1
<operator>.assignment *(*(words + i) + 1) = (char)0
strcat strcat(acr  *(words + i))
<operator>.postIncrement i ++
free free(*(words + i))
<operator>.postIncrement i ++
IDENTIFIER p_str if (p_str)
<operator>.equals (int )*p_str == 32
<operator>.lessThan i < 80
<operator>.multiplication (unsigned long )counter * 8UL
IDENTIFIER p_str if (p_str)
<operator>.equals (int )*p_str == 32
<operator>.lessEqualsThan i <= 80
<operator>.addition words + index
<operator>.postIncrement counter ++
<operator>.postIncrement p_str ++
<operator>.postIncrement i ++
<operator>.cast (unsigned long )counter
malloc malloc(80UL)
<operator>.cast (char *)tmp___0
<operator>.assignment *p_str = (char)0
strncat strncat(*(words + index), p_start, 80)
<operator>.postIncrement index ++
<operator>.assignment p_start = p_str + 1
<operator>.postIncrement p_str ++
<operator>.postIncrement i ++
toupper toupper((int )*(*(words + i) + 0))
<operator>.cast (char )tmp___1
<operator>.cast (char)0
<operator>.logicalNot ! (i < 80)
<operator>.addition words + i
<operator>.addition words + i
<operator>.logicalNot ! (i <= 80)
<operator>.cast (int )*p_str
<operator>.addition *(words + i) + 0
<operator>.addition *(words + i) + 1
<operator>.addition words + i
<operator>.addition words + i
<operator>.cast (char)0
<operator>.addition p_str + 1
<operator>.lessThan i < 80
<operator>.lessEqualsThan i <= 80
<operator>.addition words + index
<operator>.addition *(words + i) + 0
<operator>.addition words + i
<operator>.addition words + i
<operator>.addition words + i
<operator>.indirection *(words + i)
<operator>.indirection *(words + i)
<operator>.indirection *(*(words + i) + 0)
<operator>.indirection *(*(words + i) + 1)
<operator>.indirection *(words + i)
<operator>.indirection *(words + i)
<operator>.cast (int )*p_str
UNKNOWN char * char *
<operator>.cast (int )*(*(words + i) + 0)
UNKNOWN char char
UNKNOWN char char
UNKNOWN int int
<operator>.indirection *p_str
UNKNOWN int int
<operator>.indirection *p_str
<operator>.indirection *p_str
<operator>.indirection *(words + index)
UNKNOWN int int
<operator>.indirection *(*(words + i) + 0)
<operator>.indirection *(words + i)
<operator>.indirection *(words + i)
UNKNOWN char char
<operator>.indirection *(words + i)
>>>PDG&109 0->2 0->3 0->4 0->5 0->6 0->7 0->8 0->9 0->10 0->11 0->13 0->14 0->15 0->16 0->17 0->18 0->19 0->20 0->21 0->22 0->24 0->25 0->26 0->27 0->28 0->29 0->31 0->33 0->34 0->35 0->36 0->37 0->39 0->40 0->41 0->42 0->44 0->45 0->46 0->47 0->48 0->49 0->50 0->51 0->52 0->53 0->54 0->55 0->56 0->57 0->58 0->59 0->60 0->61 0->62 0->63 0->64 0->66 0->67 0->69 0->70 0->73 0->74 0->75 0->76 0->77 0->78 0->79 0->80 0->81 0->82 0->83 0->84 0->85 2->3 3->1 3->1 3->4 3->15 4->54 5->1 5->6 6->1 6->1 6->1 6->29 6->41 7->1 7->11 7->53 8->1 8->19 8->52 8->61 8->81 9->79 11->1 11->25 11->48 11->56 12->1 12->1 12->13 12->31 13->1 13->1 13->22 13->52 13->69 13->70 13->75 13->76 13->81 13->83 13->84 13->85 14->25 15->1 15->1 15->16 15->62 15->63 15->78 16->1 16->1 16->18 16->60 17->1 17->1 17->1 18->1 18->1 18->1 19->1 19->27 20->27 21->1 21->28 22->1 23->1 25->25 25->28 25->32 25->33 25->34 25->35 25->36 25->36 25->57 25->58 25->69 25->69 25->70 25->70 25->80 25->86 25->87 25->93 27->1 27->1 27->27 27->38 27->39 27->40 27->41 27->42 27->42 27->65 27->66 27->67 27->73 27->74 27->75 27->75 27->82 27->83 27->83 27->84 27->84 27->85 27->85 27->88 27->89 27->90 27->94 27->95 27->96 27->103 27->104 27->105 27->106 27->108 28->1 28->1 28->1 28->28 28->43 28->44 28->44 28->76 28->76 28->91 29->23 30->1 30->12 31->1 32->1 32->1 32->33 32->58 33->1 33->1 34->1 34->35 35->1 35->1 35->1 35->34 36->1 36->25 38->1 38->1 38->39 38->66 39->1 39->1 39->1 40->1 40->1 40->1 41->1 41->1 41->1 41->29 42->1 42->27 43->1 44->1 44->28 46->1 46->1 46->53 47->1 47->54 47->55 47->55 47->79 48->1 48->30 48->30 50->1 50->1 50->59 50->60 50->61 50->62 50->77 50->78 50->81 50->101 50->102 50->107 51->1 51->63 51->64 51->64 51->80 53->11 54->1 55->1 55->79 57->32 58->1 59->50 59->62 59->63 59->72 59->78 61->19 61->52 61->81 62->1 62->1 62->18 62->60 63->1 63->1 63->62 63->78 64->1 64->80 65->1 65->38 66->1 68->1 68->1 68->46 68->47 68->68 68->79 68->92 68->97 68->98 71->1 71->1 71->50 71->51 71->71 71->72 71->80 71->99 71->100 78->1 79->47 79->68 79->68 80->51 80->71 80->71
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int unlink ( char const * filename ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern int raise ( int sig ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern int ( /* missing proto */ malloc ) ( ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern double ceil ( double x ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern int ( /* missing proto */ free ) ( ) ; extern unsigned long strlen ( char const * s ) ; void main ( void ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern int ( /* missing proto */ strcpy ) ( ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; void encodeStrings_litStr0_i $ nit ( void ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int printf ( char const * format , ... ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; char * abbreviate ( char const * phrase ) ; extern void signal ( int sig , void * func ) ; extern int ( /* missing proto */ toupper ) ( ) ; extern long time ( long * tloc ) ; extern int ( /* missing proto */ strcat ) ( ) ; typedef struct _IO_FILE FILE ; void encodeStrings_litStr1_i $ nit ( void ) ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern int ( /* missing proto */ strncat ) ( ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; char encodeStrings_litStr1 [ 1 ] ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; char encodeStrings_litStr0 [ 1 ] ; void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { case 1 : str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 0 : str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; } } } char * abbreviate ( char const * phrase ) { char str [ 80 ] ; char * p_str ; static char acr [ 80 ] ; int counter ; int index ; int i ; char * * words ; int tmp ; int tmp___0 ; char * p_start ; int tmp___1 ; { strcpy ( str , phrase ) ; p_str = str ; _1_stringEncoder ( 0 , encodeStrings_litStr0 ) ; strcpy ( acr , encodeStrings_litStr0 ) ; counter = 0 ; index = 0 ; i = 0 ; while ( 1 ) { if ( p_str ) { if ( ! ( i < 80 ) ) { break ; } } else { break ; } if ( ( int ) * p_str == 32 ) { counter ++ ; } if ( i < 80 ) { p_str ++ ; i ++ ; } } i = 0 ; counter ++ ; tmp = malloc ( ( unsigned long ) counter * 8UL ) ; words = ( char * * ) tmp ; i = 0 ; while ( i < counter ) { tmp___0 = malloc ( 80UL ) ; * ( words + i ) = ( char * ) tmp___0 ; _1_stringEncoder ( 1 , encodeStrings_litStr1 ) ; strcpy ( * ( words + i ) , encodeStrings_litStr1 ) ; i ++ ; } p_str = str ; p_start = p_str ; while ( 1 ) { if ( p_str ) { if ( ! ( i <= 80 ) ) { break ; } } else { break ; } if ( ( int ) * p_str == 32 ) { * p_str = ( char ) 0 ; strncat ( * ( words + index ) , p_start , 80 ) ; index ++ ; p_start = p_str + 1 ; } if ( i <= 80 ) { p_str ++ ; i ++ ; } } * p_str = ( char ) 0 ; strncat ( * ( words + index ) , p_start , 80 ) ; index ++ ; i = 0 ; while ( i < index ) { tmp___1 = toupper ( ( int ) * ( * ( words + i ) + 0 ) ) ; * ( * ( words + i ) + 0 ) = ( char ) tmp___1 ; * ( * ( words + i ) + 1 ) = ( char ) 0 ; strcat ( acr , * ( words + i ) ) ; i ++ ; } i = 0 ; while ( i < counter ) { free ( * ( words + i ) ) ; i ++ ; } free ( words ) ; return ( acr ) ; } } void megaInit ( void ) { { encodeStrings_litStr1_i $ nit ( ) ; encodeStrings_litStr0_i $ nit ( ) ; } } void encodeStrings_litStr0_i $ nit ( void ) { { } } void encodeStrings_litStr1_i $ nit ( void ) { { } } void main ( void ) { { megaInit ( ) ; } }
>>>Func
METHOD generate
METHOD_RETURN int**
PARAM int numRows
PARAM int *returnSize
PARAM int **returnColumnSizes
<operator>.assignment *returnSize = numRows
<operator>.assignment tmp = malloc((unsigned long )numRows * sizeof(int *))
<operator>.assignment ans = (int **)tmp
<operator>.assignment tmp___0 = malloc((unsigned long )numRows * sizeof(int ))
<operator>.assignment *returnColumnSizes = (int *)tmp___0
<operator>.assignment i = 0
<operator>.assignment *(*(ans + 0) + 0) = 1
<operator>.assignment i___0 = 1
RETURN return (ans); return (ans);
<operator>.lessThan i < numRows
<operator>.lessThan i___0 < numRows
IDENTIFIER ans return (ans);
malloc malloc((unsigned long )numRows * sizeof(int *))
<operator>.cast (int **)tmp
malloc malloc((unsigned long )numRows * sizeof(int ))
<operator>.cast (int *)tmp___0
<operator>.assignment *(*returnColumnSizes + i) = i + 1
<operator>.assignment tmp___1 = malloc((unsigned long )(i + 1) * sizeof(int ))
<operator>.assignment *(ans + i) = (int *)tmp___1
<operator>.postIncrement i ++
<operator>.assignment *(*(ans + i___0) + 0) = 1
<operator>.assignment j = 1
<operator>.assignment *(*(ans + i___0) + i___0) = 1
<operator>.postIncrement i___0 ++
<operator>.multiplication (unsigned long )numRows * sizeof(int *)
<operator>.multiplication (unsigned long )numRows * sizeof(int )
<operator>.addition *(ans + 0) + 0
<operator>.lessThan j < i___0
<operator>.cast (unsigned long )numRows
<operator>.cast (unsigned long )numRows
<operator>.sizeOf sizeof(int )
<operator>.addition i + 1
malloc malloc((unsigned long )(i + 1) * sizeof(int ))
<operator>.cast (int *)tmp___1
<operator>.assignment *(*(ans + i___0) + j) = *(*(ans + (i___0 - 1)) + (j - 1)) + *(*(ans + (i___0 - 1)) + j)
<operator>.postIncrement j ++
<operator>.addition *returnColumnSizes + i
<operator>.multiplication (unsigned long )(i + 1) * sizeof(int )
<operator>.addition ans + i
<operator>.addition ans + 0
<operator>.addition *(ans + i___0) + 0
<operator>.addition *(ans + i___0) + i___0
<operator>.cast (unsigned long )(i + 1)
<operator>.sizeOf sizeof(int )
<operator>.addition *(*(ans + (i___0 - 1)) + (j - 1)) + *(*(ans + (i___0 - 1)) + j)
<operator>.addition i + 1
<operator>.addition ans + i___0
<operator>.addition *(ans + i___0) + j
<operator>.addition ans + i___0
<operator>.addition *(ans + (i___0 - 1)) + (j - 1)
<operator>.addition *(ans + (i___0 - 1)) + j
<operator>.addition ans + i___0
<operator>.subtraction j - 1
<operator>.addition ans + (i___0 - 1)
<operator>.addition ans + (i___0 - 1)
<operator>.subtraction i___0 - 1
<operator>.subtraction i___0 - 1
<operator>.indirection *(*returnColumnSizes + i)
<operator>.indirection *(ans + i)
<operator>.indirection *(*(ans + i___0) + 0)
<operator>.indirection *(*(ans + i___0) + i___0)
UNKNOWN int * int *
<operator>.indirection *returnColumnSizes
<operator>.indirection *(ans + i___0)
<operator>.indirection *(*(ans + i___0) + j)
<operator>.indirection *(ans + i___0)
UNKNOWN unsigned long unsigned long
<operator>.indirection *(*(ans + (i___0 - 1)) + (j - 1))
<operator>.indirection *(*(ans + (i___0 - 1)) + j)
<operator>.indirection *(ans + i___0)
<operator>.indirection *(ans + (i___0 - 1))
<operator>.indirection *(ans + (i___0 - 1))
>>>PDG&77 0->2 0->3 0->4 0->5 0->7 0->9 0->10 0->11 0->12 0->14 0->15 0->16 0->18 0->20 0->21 0->23 0->24 0->25 0->26 0->27 0->28 0->29 0->30 0->31 0->32 0->33 0->34 0->36 0->38 0->40 0->41 0->42 0->43 0->44 0->45 0->46 0->47 0->50 0->51 0->52 0->53 0->55 0->56 0->57 0->58 0->59 0->60 0->61 2->5 2->14 2->29 2->30 2->33 2->34 3->1 4->1 5->1 5->1 6->1 6->1 6->7 6->18 7->1 7->1 7->16 7->43 7->44 7->51 7->53 7->56 7->58 7->59 8->1 8->1 8->9 8->20 9->1 9->1 9->1 9->41 10->1 10->14 11->1 11->1 12->1 12->15 13->1 14->1 14->1 14->14 14->15 14->21 14->21 14->22 14->23 14->24 14->24 14->36 14->36 14->37 14->38 14->41 14->41 14->42 14->42 14->43 14->43 14->47 14->47 14->48 14->50 14->50 14->62 14->63 14->66 14->67 14->71 15->1 15->1 15->1 15->15 15->25 15->26 15->27 15->28 15->32 15->32 15->45 15->46 15->51 15->51 15->53 15->64 15->65 15->68 15->70 16->13 17->1 17->6 18->1 19->1 19->8 20->1 21->1 21->1 22->1 22->1 22->23 22->38 23->1 23->1 23->1 24->1 24->14 25->1 25->1 26->1 26->32 27->1 27->1 28->1 28->15 29->17 30->1 30->19 31->1 32->1 32->1 32->28 32->32 32->39 32->40 32->46 32->49 32->52 32->52 32->53 32->54 32->55 32->56 32->56 32->57 32->57 32->58 32->59 32->60 32->60 32->61 32->69 32->72 32->73 32->74 32->75 32->76 35->1 37->1 37->22 38->1 39->1 39->1 39->1 40->1 40->32 41->1 42->1 42->37 44->1 46->1 47->1 48->1 49->1 49->1 53->1 54->1 55->1 57->40 57->54 57->54 57->55 59->1 60->58 60->58 60->61 61->32 61->59 61->59
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern int ( /* missing proto */ malloc ) ( ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; void main ( void ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int printf ( char const * format , ... ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; int * * generate ( int numRows , int * returnSize , int * * returnColumnSizes ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; int * * generate ( int numRows , int * returnSize , int * * returnColumnSizes ) { int * * ans ; int tmp ; int tmp___0 ; int i ; int tmp___1 ; int i___0 ; int j ; { * returnSize = numRows ; tmp = malloc ( ( unsigned long ) numRows * sizeof ( int * ) ) ; ans = ( int * * ) tmp ; tmp___0 = malloc ( ( unsigned long ) numRows * sizeof ( int ) ) ; * returnColumnSizes = ( int * ) tmp___0 ; i = 0 ; while ( i < numRows ) { * ( * returnColumnSizes + i ) = i + 1 ; tmp___1 = malloc ( ( unsigned long ) ( i + 1 ) * sizeof ( int ) ) ; * ( ans + i ) = ( int * ) tmp___1 ; i ++ ; } * ( * ( ans + 0 ) + 0 ) = 1 ; i___0 = 1 ; while ( i___0 < numRows ) { * ( * ( ans + i___0 ) + 0 ) = 1 ; j = 1 ; while ( j < i___0 ) { * ( * ( ans + i___0 ) + j ) = * ( * ( ans + ( i___0 - 1 ) ) + ( j - 1 ) ) + * ( * ( ans + ( i___0 - 1 ) ) + j ) ; j ++ ; } * ( * ( ans + i___0 ) + i___0 ) = 1 ; i___0 ++ ; } return ( ans ) ; } } void megaInit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { } } } void main ( void ) { { megaInit ( ) ; } }
>>>Func
METHOD my_free
METHOD_RETURN void
PARAM void *p
RETURN return; return;
my_free_hook my_free_hook(p)
free free(p)
<operator>.addressOf & my_free_hook
>>>PDG&7 0->2 0->3 0->4 0->5 2->4 2->5 3->1 4->1 4->1 5->1 6->4 6->5
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; void my_free ( void * p ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern int ( /* missing proto */ free ) ( ) ; extern unsigned long strlen ( char const * s ) ; void main ( void ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int printf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern int scanf ( char const * format , ... ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern float strtof ( char const * str , char const * endptr ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int ( /* missing proto */ my_free_hook ) ( ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; void megaInit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { } } } void main ( void ) { { megaInit ( ) ; } } void my_free ( void * p ) { { if ( & my_free_hook ) { my_free_hook ( p ) ; } else { free ( p ) ; } return ; } }
>>>Func
METHOD DJBHash
METHOD_RETURN unsigned int
PARAM char *str
PARAM unsigned int len
<operator>.assignment hash = 5381U
<operator>.assignment i = 0U
<operator>.assignment i = 0U
RETURN return (hash); return (hash);
<operator>.lessThan i < len
IDENTIFIER hash return (hash);
<operator>.assignment hash = ((hash << 5) + hash) + (unsigned int )*str
<operator>.postIncrement str ++
<operator>.postIncrement i ++
<operator>.addition ((hash << 5) + hash) + (unsigned int )*str
<operator>.addition (hash << 5) + hash
<operator>.cast (unsigned int )*str
<operator>.shiftLeft hash << 5
UNKNOWN unsigned int unsigned int
<operator>.indirection *str
>>>PDG&19 0->2 0->3 0->4 0->5 0->6 0->8 0->9 0->10 0->11 0->12 0->13 0->14 0->16 2->1 2->11 3->8 4->1 4->1 4->9 4->16 6->1 6->8 7->1 8->1 8->1 8->1 8->8 8->10 8->11 8->12 8->12 8->13 8->14 8->15 8->16 8->17 8->18 9->7 10->1 10->1 10->1 10->9 10->16 11->1 11->1 12->1 12->8 13->1 13->1 14->1 15->1 16->10 16->10 16->13 16->13 16->14 16->14
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; void main ( void ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void megaInit ( void ) ; unsigned int DJBHash ( char * str , unsigned int len ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int printf ( char const * format , ... ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { } } } void megaInit ( void ) { { } } unsigned int DJBHash ( char * str , unsigned int len ) { unsigned int hash ; unsigned int i ; { hash = 5381U ; i = 0U ; i = 0U ; while ( i < len ) { hash = ( ( hash << 5 ) + hash ) + ( unsigned int ) * str ; str ++ ; i ++ ; } return ( hash ) ; } } void main ( void ) { { megaInit ( ) ; } }
>>>Func
METHOD main
METHOD_RETURN int
PARAM int argc
PARAM char **argv
PARAM char **_formal_envp
megaInit megaInit()
<operator>.assignment _global_argc = argc
<operator>.assignment _global_argv = argv
<operator>.assignment _global_envp = _formal_envp
<operator>.assignment _BARRIER_0 = 1
<operator>.assignment sum = 0
<operator>.assignment i = 0
_1_stringEncoder _1_stringEncoder(0, encodeStrings_litStr0)
printf printf(encodeStrings_litStr0, sum)
RETURN return (0); return (0);
<operator>.lessThan i < (int )*(*(argv + 1) + 0)
LITERAL 0 return (0);
<operator>.postIncrement i ++
<operator>.cast (int )*(*(argv + 1) + 0)
<operator>.equals (int )*(*(argv + 1) + 0) == 127
<operator>.assignmentPlus sum += i
<operator>.addition *(argv + 1) + 0
<operator>.assignmentMultiplication sum *= i
<operator>.addition argv + 1
<operator>.addition *(argv + 1) + 0
<operator>.addition argv + 1
UNKNOWN int int
<operator>.indirection *(*(argv + 1) + 0)
<operator>.cast (int )*(*(argv + 1) + 0)
<operator>.indirection *(argv + 1)
UNKNOWN int int
<operator>.indirection *(*(argv + 1) + 0)
<operator>.indirection *(argv + 1)
>>>PDG&33 0->2 0->3 0->4 0->5 0->6 0->7 0->8 0->9 0->10 0->11 0->12 0->13 0->14 0->15 0->16 0->17 0->19 0->20 0->21 0->22 0->23 0->24 0->25 2->6 3->7 3->23 4->8 5->1 6->1 6->1 6->1 7->1 7->1 8->1 8->1 8->1 9->1 9->1 10->1 10->13 10->20 10->22 11->1 11->15 12->1 12->13 13->1 13->1 13->1 14->1 15->1 15->1 15->1 15->15 15->17 15->17 15->18 15->19 15->20 15->21 15->22 15->23 15->24 15->25 15->26 15->27 15->28 15->29 15->30 15->31 15->32 16->14 17->1 17->15 18->1 19->1 19->20 19->22 20->1 20->13 20->22 21->1 22->1 22->13 22->20 23->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; char * * _global_argv = ( char * * ) 0 ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; int main ( int argc , char * * argv , char * * _formal_envp ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; void encodeStrings_litStr0_i $ nit ( void ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; int _global_argc = 0 ; void megaInit ( void ) ; char * * _global_envp = ( char * * ) 0 ; extern int ( /* missing proto */ printf ) ( ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; char encodeStrings_litStr0 [ 12 ] ; void megaInit ( void ) { { encodeStrings_litStr0_i $ nit ( ) ; } } void encodeStrings_litStr0_i $ nit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { case 0 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; } } } int main ( int argc , char * * argv , char * * _formal_envp ) { int i ; int sum ; int _BARRIER_0 ; { megaInit ( ) ; _global_argc = argc ; _global_argv = argv ; _global_envp = _formal_envp ; _BARRIER_0 = 1 ; sum = 0 ; i = 0 ; while ( i < ( int ) * ( * ( argv + 1 ) + 0 ) ) { if ( ( int ) * ( * ( argv + 1 ) + 0 ) == 127 ) { sum += i ; } else { sum *= i ; } i ++ ; } _1_stringEncoder ( 0 , encodeStrings_litStr0 ) ; printf ( encodeStrings_litStr0 , sum ) ; return ( 0 ) ; } }
>>>Func
METHOD rotate
METHOD_RETURN void
PARAM int *nums
PARAM int numsSize
PARAM int k
<operator>.assignment i = 1
RETURN return; return;
<operator>.lessEqualsThan i <= k
<operator>.assignment lastElement = *(nums + (numsSize - 1))
<operator>.assignment j = numsSize - 1
<operator>.assignment *(nums + 0) = lastElement
<operator>.postIncrement i ++
<operator>.greaterThan j > 0
<operator>.subtraction numsSize - 1
<operator>.assignment *(nums + j) = *(nums + (j - 1))
<operator>.postDecrement j --
<operator>.addition nums + (numsSize - 1)
<operator>.addition nums + 0
<operator>.subtraction numsSize - 1
<operator>.addition nums + j
<operator>.addition nums + (j - 1)
<operator>.subtraction j - 1
<operator>.indirection *(nums + (numsSize - 1))
<operator>.indirection *(nums + 0)
<operator>.indirection *(nums + j)
<operator>.indirection *(nums + (j - 1))
>>>PDG&26 0->2 0->3 0->4 0->5 0->6 0->7 0->10 0->11 0->12 0->13 0->15 0->16 0->17 0->18 0->19 0->20 0->21 2->1 2->16 3->1 3->18 4->7 5->1 5->7 6->1 7->1 7->1 7->1 7->7 7->8 7->9 7->10 7->11 7->11 7->12 7->13 7->16 7->17 7->18 7->22 7->23 8->1 8->1 8->10 9->1 9->1 9->12 10->1 10->1 10->1 11->1 11->7 12->1 12->1 12->12 12->14 12->15 12->19 12->19 12->20 12->21 12->21 12->24 12->25 13->1 13->9 13->9 13->18 14->1 14->1 14->1 15->1 15->12 17->1 18->13 18->16 18->16 20->1 21->15 21->20 21->20
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; void main ( void ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int printf ( char const * format , ... ) ; void rotate ( int * nums , int numsSize , int k ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; void rotate ( int * nums , int numsSize , int k ) { int i ; int j ; int lastElement ; { i = 1 ; while ( i <= k ) { lastElement = * ( nums + ( numsSize - 1 ) ) ; j = numsSize - 1 ; while ( j > 0 ) { * ( nums + j ) = * ( nums + ( j - 1 ) ) ; j -- ; } * ( nums + 0 ) = lastElement ; i ++ ; } return ; } } void megaInit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { } } } void main ( void ) { { megaInit ( ) ; } }
>>>Func
METHOD main
METHOD_RETURN int
PARAM int _formal_argc
PARAM char **_formal_argv
PARAM char **_formal_envp
megaInit megaInit()
<operator>.assignment _global_argc = _formal_argc
<operator>.assignment _global_argv = _formal_argv
<operator>.assignment _global_envp = _formal_envp
<operator>.assignment _BARRIER_0 = 1
test test()
RETURN return (0); return (0);
LITERAL 0 return (0);
>>>PDG&13 0->2 0->3 0->4 0->5 0->6 0->7 0->8 0->9 0->10 0->11 0->12 2->6 3->7 4->8 5->1 6->1 6->1 6->1 7->1 7->1 7->1 8->1 8->1 8->1 9->1 9->1 10->1 11->1 12->11
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fclose ( void * stream ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; char * * _global_argv = ( char * * ) 0 ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; int main ( int _formal_argc , char * * _formal_argv , char * * _formal_envp ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; int _global_argc = 0 ; char * * _global_envp = ( char * * ) 0 ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int printf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern int scanf ( char const * format , ... ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int ( /* missing proto */ test ) ( ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { } } } void megaInit ( void ) { { } } int main ( int _formal_argc , char * * _formal_argv , char * * _formal_envp ) { int _BARRIER_0 ; { megaInit ( ) ; _global_argc = _formal_argc ; _global_argv = _formal_argv ; _global_envp = _formal_envp ; _BARRIER_0 = 1 ; test ( ) ; return ( 0 ) ; } }
>>>Func
METHOD main
METHOD_RETURN int
PARAM int _formal_argc
PARAM char **_formal_argv
PARAM char **_formal_envp
megaInit megaInit()
<operator>.assignment _global_argc = _formal_argc
<operator>.assignment _global_argv = _formal_argv
<operator>.assignment _global_envp = _formal_envp
<operator>.assignment _BARRIER_0 = 1
setup setup()
solve solve()
RETURN return (0); return (0);
LITERAL 0 return (0);
>>>PDG&14 0->2 0->3 0->4 0->5 0->6 0->7 0->8 0->9 0->10 0->11 0->12 0->13 2->6 3->7 4->8 5->1 6->1 6->1 6->1 7->1 7->1 7->1 8->1 8->1 8->1 9->1 9->1 10->1 11->1 12->1 13->12
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int ( /* missing proto */ solve ) ( ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; char * * _global_argv = ( char * * ) 0 ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern int getpagesize ( ) ; extern double ceil ( double x ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; int main ( int _formal_argc , char * * _formal_argv , char * * _formal_envp ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; int _global_argc = 0 ; void megaInit ( void ) ; char * * _global_envp = ( char * * ) 0 ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int printf ( char const * format , ... ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int ( /* missing proto */ setup ) ( ) ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { } } } int main ( int _formal_argc , char * * _formal_argv , char * * _formal_envp ) { int _BARRIER_0 ; { megaInit ( ) ; _global_argc = _formal_argc ; _global_argv = _formal_argv ; _global_envp = _formal_envp ; _BARRIER_0 = 1 ; setup ( ) ; solve ( ) ; return ( 0 ) ; } } void megaInit ( void ) { { } }
>>>Func
METHOD mult
METHOD_RETURN unsigned long
PARAM unsigned long m1
PARAM unsigned long m2
PARAM unsigned long M
<operator>.assignment max = 4294967295UL / m1
<operator>.lessThan m1 < m2
<operator>.lessEqualsThan m2 <= max
<operator>.assignment aux = m1
<operator>.assignment m1 = m2
<operator>.assignment m2 = aux
<operator>.division 4294967295UL / m1
RETURN return ((m1 * m2) % M); return ((m1 * m2) % M);
<operator>.modulo (m1 * m2) % M
<operator>.assignment tmp = mult(m1, m2 - max, M)
RETURN return (((m1 * max) % M + tmp) % M); return (((m1 * max) % M + tmp) % M);
<operator>.modulo ((m1 * max) % M + tmp) % M
<operator>.multiplication m1 * m2
mult mult(m1, m2 - max, M)
<operator>.subtraction m2 - max
<operator>.addition (m1 * max) % M + tmp
<operator>.modulo (m1 * max) % M
<operator>.multiplication m1 * max
>>>PDG&23 0->2 0->3 0->4 0->6 0->7 0->8 0->9 0->10 0->11 0->13 0->16 0->17 0->18 0->19 0->20 0->21 0->22 2->6 3->6 4->13 4->18 5->1 5->1 5->7 6->1 6->7 6->8 6->8 6->9 6->9 6->10 6->11 7->1 7->1 7->12 7->13 7->14 7->15 7->16 7->17 7->17 7->18 7->19 7->19 7->19 7->20 7->21 7->22 8->1 8->10 9->1 9->11 10->1 10->1 10->7 11->5 11->5 11->17 11->18 12->1 13->1 13->1 13->1 13->12 14->16 14->20 15->1 16->15 17->1 17->1 17->13 17->13 18->14 18->14 18->14 18->21 18->22 19->18 19->18 19->22 21->16 21->16 21->20 21->20 22->21 22->21
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; void main ( void ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int printf ( char const * format , ... ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; unsigned long mult ( unsigned long m1 , unsigned long m2 , unsigned long M ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; unsigned long mult ( unsigned long m1 , unsigned long m2 , unsigned long M ) { unsigned long aux ; unsigned long max ; unsigned long tmp ; { if ( m1 < m2 ) { aux = m1 ; m1 = m2 ; m2 = aux ; } max = 4294967295UL / m1 ; if ( m2 <= max ) { return ( ( m1 * m2 ) % M ) ; } else { tmp = mult ( m1 , m2 - max , M ) ; return ( ( ( m1 * max ) % M + tmp ) % M ) ; } } } void megaInit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { } } } void main ( void ) { { megaInit ( ) ; } }
>>>Func
METHOD int_equal
METHOD_RETURN int
PARAM void *vlocation1
PARAM void *vlocation2
<operator>.assignment location1 = (int *)vlocation1
<operator>.assignment location2 = (int *)vlocation2
RETURN return (*location1 == *location2); return (*location1 == *location2);
<operator>.equals *location1 == *location2
<operator>.cast (int *)vlocation1
<operator>.cast (int *)vlocation2
>>>PDG&10 0->2 0->3 0->4 0->5 0->8 0->9 2->4 2->8 3->5 3->9 4->1 4->1 4->1 5->1 5->1 5->1 6->1 7->1 7->1 7->1 7->6 8->1 9->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; void main ( void ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int printf ( char const * format , ... ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; int int_equal ( void * vlocation1 , void * vlocation2 ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { } } } void megaInit ( void ) { { } } int int_equal ( void * vlocation1 , void * vlocation2 ) { int * location1 ; int * location2 ; { location1 = ( int * ) vlocation1 ; location2 = ( int * ) vlocation2 ; return ( * location1 == * location2 ) ; } } void main ( void ) { { megaInit ( ) ; } }
>>>Func
METHOD _1_stringEncoder
METHOD_RETURN void
PARAM int n
PARAM char str[]
BLOCK <empty> <empty>
<operator>.assignment encodeStrings_i3 = 0
IDENTIFIER n switch(n)
LITERAL 2 <empty>
<operator>.assignment str[encodeStrings_i3] = 'l'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'o'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 1 <empty>
<operator>.assignment str[encodeStrings_i3] = 'w'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'i'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 0 <empty>
<operator>.assignment str[encodeStrings_i3] = 'U'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'g'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ':'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'p'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'o'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'g'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'm'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '-'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'm'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'g'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'u'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'm'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
>>>PDG&92 0->2 0->3 0->4 0->5 0->6 0->7 0->8 0->9 0->10 0->11 0->12 0->13 0->14 0->15 0->16 0->17 0->18 0->19 0->20 0->21 0->22 0->23 0->24 0->25 0->26 0->27 0->28 0->29 0->30 0->31 0->32 0->33 0->34 0->35 0->36 0->37 0->38 0->39 0->40 0->41 0->42 0->43 0->44 0->45 0->46 0->47 0->48 0->49 0->50 0->51 0->52 0->53 0->54 0->55 0->56 0->57 0->58 0->59 0->60 0->61 0->62 0->63 0->64 0->65 0->66 0->67 0->68 0->69 0->70 0->71 0->72 0->73 0->74 0->75 0->76 0->77 0->78 0->79 0->80 0->81 0->82 0->83 0->84 0->85 0->86 0->87 0->88 0->89 0->90 0->91 2->1 3->1 5->1 5->1 5->9 5->22 5->33 8->1 9->11 10->1 11->13 12->1 13->15 14->1 15->17 16->1 17->19 18->1 18->1 19->1 19->1 21->1 22->24 23->1 24->26 25->1 26->28 27->1 28->30 29->1 29->1 30->1 30->1 32->1 33->35 34->1 35->37 37->39 39->41 41->43 42->1 43->45 45->47 46->1 47->49 49->51 50->1 51->53 53->55 55->57 57->59 59->61 60->1 61->63 63->65 65->67 67->69 69->71 70->1 71->73 72->1 73->75 74->1 75->77 76->1 77->79 78->1 79->81 80->1 81->83 82->1 83->85 84->1 85->87 86->1 87->89 88->1 89->91 90->1 90->1 91->1 91->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; char * * _global_argv = ( char * * ) 0 ; void encodeStrings_litStr2_i $ nit ( void ) ; extern int unlink ( char const * filename ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern int raise ( int sig ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern double ceil ( double x ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; int main ( int argc , char * * argv , char * * _formal_envp ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; void encodeStrings_litStr0_i $ nit ( void ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; int _global_argc = 0 ; char * * _global_envp = ( char * * ) 0 ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int ( /* missing proto */ printf ) ( ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; void encodeStrings_litStr1_i $ nit ( void ) ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; char encodeStrings_litStr2 [ 6 ] ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; char encodeStrings_litStr1 [ 5 ] ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; char encodeStrings_litStr0 [ 30 ] ; void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { case 2 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 1 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 0 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; } } } void megaInit ( void ) { { encodeStrings_litStr2_i $ nit ( ) ; encodeStrings_litStr1_i $ nit ( ) ; encodeStrings_litStr0_i $ nit ( ) ; } } void encodeStrings_litStr0_i $ nit ( void ) { { } } void encodeStrings_litStr1_i $ nit ( void ) { { } } void encodeStrings_litStr2_i $ nit ( void ) { { } } int main ( int argc , char * * argv , char * * _formal_envp ) { unsigned char c ; int _BARRIER_0 ; { megaInit ( ) ; _global_argc = argc ; _global_argv = argv ; _global_envp = _formal_envp ; _BARRIER_0 = 1 ; if ( argc < 2 ) { _1_stringEncoder ( 0 , encodeStrings_litStr0 ) ; printf ( encodeStrings_litStr0 ) ; return ( 1 ) ; } c = ( unsigned char ) * ( * ( argv + 1 ) + 0 ) ; if ( ( int ) c == 127 ) { _1_stringEncoder ( 1 , encodeStrings_litStr1 ) ; printf ( encodeStrings_litStr1 ) ; } else { _1_stringEncoder ( 2 , encodeStrings_litStr2 ) ; printf ( encodeStrings_litStr2 ) ; } return ( 0 ) ; } }
>>>Func
METHOD maxSubArray
METHOD_RETURN int
PARAM int *nums
PARAM int numsSize
<operator>.assignment maxSoFar = *(nums + 0)
<operator>.assignment maxEndingHere = *(nums + 0)
<operator>.assignment i = 1
RETURN return (maxSoFar); return (maxSoFar);
<operator>.lessThan i < numsSize
IDENTIFIER maxSoFar return (maxSoFar);
<operator>.assignment maxEndingHere = maxcmp(maxEndingHere + *(nums + i)  *(nums + i))
<operator>.assignment maxSoFar = maxcmp(maxSoFar, maxEndingHere)
<operator>.postIncrement i ++
<operator>.addition nums + 0
<operator>.addition nums + 0
maxcmp maxcmp(maxEndingHere + *(nums + i)  *(nums + i))
maxcmp maxcmp(maxSoFar, maxEndingHere)
<operator>.addition maxEndingHere + *(nums + i)
<operator>.addition nums + i
<operator>.addition nums + i
<operator>.indirection *(nums + i)
<operator>.indirection *(nums + i)
>>>PDG&22 0->2 0->3 0->6 0->8 0->9 0->12 0->13 0->14 0->15 0->16 0->17 0->18 0->19 2->13 2->14 2->18 2->19 3->8 4->1 4->1 4->9 4->16 5->1 5->1 5->1 5->15 5->17 6->1 6->8 7->1 8->1 8->1 8->1 8->8 8->10 8->11 8->12 8->12 8->15 8->16 8->17 8->18 8->18 8->19 8->19 8->20 8->21 9->7 10->1 10->1 10->16 11->1 11->1 11->1 11->9 11->16 12->1 12->8 14->1 15->1 15->1 15->10 15->10 16->1 16->11 16->11 16->15 16->17 18->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; int maxSubArray ( int * nums , int numsSize ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern int ( /* missing proto */ maxcmp ) ( ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; void main ( void ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int printf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern int scanf ( char const * format , ... ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern float strtof ( char const * str , char const * endptr ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; void megaInit ( void ) { { } } int maxSubArray ( int * nums , int numsSize ) { int maxSoFar ; int maxEndingHere ; int i ; { maxSoFar = * ( nums + 0 ) ; maxEndingHere = * ( nums + 0 ) ; i = 1 ; while ( i < numsSize ) { maxEndingHere = maxcmp ( maxEndingHere + * ( nums + i ) , * ( nums + i ) ) ; maxSoFar = maxcmp ( maxSoFar , maxEndingHere ) ; i ++ ; } return ( maxSoFar ) ; } } void main ( void ) { { megaInit ( ) ; } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { } } }
>>>Func
METHOD _1_stringEncoder
METHOD_RETURN void
PARAM int n
PARAM char str[]
BLOCK <empty> <empty>
<operator>.assignment encodeStrings_i3 = 0
IDENTIFIER n switch(n)
LITERAL 2 <empty>
<operator>.assignment str[encodeStrings_i3] = 'T'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'h'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'h'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'm'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'i'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ':'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 1 <empty>
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 0 <empty>
<operator>.assignment str[encodeStrings_i3] = 'E'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'h'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'v'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'l'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'u'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'o'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'f'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '('
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'f'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'o'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'm'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '0'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment,str[encodeStrings_i3] = ')'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ':'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
>>>PDG&144 0->2 0->3 0->4 0->5 0->6 0->7 0->8 0->9 0->10 0->11 0->12 0->13 0->14 0->15 0->16 0->17 0->18 0->19 0->20 0->21 0->22 0->23 0->24 0->25 0->26 0->27 0->28 0->29 0->30 0->31 0->32 0->33 0->34 0->35 0->36 0->37 0->38 0->39 0->40 0->41 0->42 0->43 0->44 0->45 0->46 0->47 0->48 0->49 0->50 0->51 0->52 0->53 0->54 0->55 0->56 0->57 0->58 0->59 0->60 0->61 0->62 0->63 0->64 0->65 0->66 0->67 0->68 0->69 0->70 0->71 0->72 0->73 0->74 0->75 0->76 0->77 0->78 0->79 0->80 0->81 0->82 0->83 0->84 0->85 0->86 0->87 0->88 0->89 0->90 0->91 0->92 0->93 0->94 0->95 0->96 0->97 0->98 0->99 0->100 0->101 0->102 0->103 0->104 0->105 0->106 0->107 0->108 0->109 0->110 0->111 0->112 0->113 0->114 0->115 0->116 0->117 0->118 0->119 0->120 0->121 0->122 0->123 0->124 0->125 0->126 0->127 0->128 0->129 0->130 0->131 0->132 0->133 0->134 0->135 0->136 0->137 0->138 0->139 0->140 0->141 0->142 0->143 2->1 3->1 5->1 5->1 5->9 5->56 5->63 8->1 9->11 11->13 13->15 15->17 16->1 17->19 19->21 20->1 21->23 23->25 24->1 25->27 26->1 27->29 28->1 29->31 30->1 31->33 33->35 34->1 35->37 36->1 37->39 39->41 40->1 41->43 43->45 44->1 45->47 46->1 47->49 48->1 49->51 50->1 51->53 52->1 52->1 53->1 53->1 55->1 56->58 57->1 58->60 59->1 59->1 60->1 60->1 62->1 63->65 65->67 67->69 69->71 71->73 73->75 75->77 76->1 77->79 79->81 81->83 82->1 83->85 85->87 86->1 87->89 88->1 89->91 90->1 91->93 93->95 95->97 97->99 99->101 101->103 102->1 103->105 104->1 105->107 107->109 109->111 111->113 112->1 113->115 115->117 116->1 117->119 118->1 119->121 121->123 122->1 123->125 124->1 125->127 126->1 127->129 128->1 129->131 131->133 132->1 133->135 135->137 136->1 137->139 138->1 139->141 140->1 141->143 142->1 142->1 143->1 143->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; char * * _global_argv = ( char * * ) 0 ; extern int fcntl ( int filedes , int cmd , ... ) ; void encodeStrings_litStr2_i $ nit ( void ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int ( /* missing proto */ atoi ) ( ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; int main ( int argc , char * * argv , char * * _formal_envp ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; void encodeStrings_litStr0_i $ nit ( void ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; int _global_argc = 0 ; void megaInit ( void ) ; char * * _global_envp = ( char * * ) 0 ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int ( /* missing proto */ printf ) ( ) ; extern int ( /* missing proto */ fib ) ( ) ; extern int ( /* missing proto */ scanf ) ( ) ; extern void perror ( char const * str ) ; extern long clock ( void ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern double strtod ( char const * str , char const * endptr ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; void encodeStrings_litStr1_i $ nit ( void ) ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; char encodeStrings_litStr2 [ 23 ] ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; char encodeStrings_litStr1 [ 3 ] ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; char encodeStrings_litStr0 [ 41 ] ; void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { case 2 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 1 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 0 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; } } } void megaInit ( void ) { { encodeStrings_litStr2_i $ nit ( ) ; encodeStrings_litStr1_i $ nit ( ) ; encodeStrings_litStr0_i $ nit ( ) ; } } void encodeStrings_litStr1_i $ nit ( void ) { { } } int main ( int argc , char * * argv , char * * _formal_envp ) { int number ; int tmp ; int _BARRIER_0 ; { megaInit ( ) ; _global_argc = argc ; _global_argv = argv ; _global_envp = _formal_envp ; _BARRIER_0 = 1 ; if ( argc == 2 ) { number = atoi ( * ( argv + 1 ) ) ; } else { _1_stringEncoder ( 0 , encodeStrings_litStr0 ) ; printf ( encodeStrings_litStr0 ) ; _1_stringEncoder ( 1 , encodeStrings_litStr1 ) ; scanf ( encodeStrings_litStr1 , & number ) ; } tmp = fib ( number ) ; _1_stringEncoder ( 2 , encodeStrings_litStr2 ) ; printf ( encodeStrings_litStr2 , tmp ) ; return ( 0 ) ; } } void encodeStrings_litStr2_i $ nit ( void ) { { } } void encodeStrings_litStr0_i $ nit ( void ) { { } }
>>>Func
METHOD _1_stringEncoder
METHOD_RETURN void
PARAM int n
PARAM char str[]
BLOCK <empty> <empty>
<operator>.assignment encodeStrings_i3 = 0
IDENTIFIER n switch(n)
LITERAL 1 <empty>
<operator>.assignment str[encodeStrings_i3] = 'B'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'o'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'h'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'i'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'g'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'o'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'q'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'u'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'l'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 0 <empty>
<operator>.assignment str[encodeStrings_i3] = 'B'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'o'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'h'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'i'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'g'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'q'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'u'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'l'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '.'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
>>>PDG&111 0->2 0->3 0->4 0->5 0->6 0->7 0->8 0->9 0->10 0->11 0->12 0->13 0->14 0->15 0->16 0->17 0->18 0->19 0->20 0->21 0->22 0->23 0->24 0->25 0->26 0->27 0->28 0->29 0->30 0->31 0->32 0->33 0->34 0->35 0->36 0->37 0->38 0->39 0->40 0->41 0->42 0->43 0->44 0->45 0->46 0->47 0->48 0->49 0->50 0->51 0->52 0->53 0->54 0->55 0->56 0->57 0->58 0->59 0->60 0->61 0->62 0->63 0->64 0->65 0->66 0->67 0->68 0->69 0->70 0->71 0->72 0->73 0->74 0->75 0->76 0->77 0->78 0->79 0->80 0->81 0->82 0->83 0->84 0->85 0->86 0->87 0->88 0->89 0->90 0->91 0->92 0->93 0->94 0->95 0->96 0->97 0->98 0->99 0->100 0->101 0->102 0->103 0->104 0->105 0->106 0->107 0->108 0->109 0->110 2->1 3->1 5->1 5->1 5->9 5->64 8->1 9->11 11->13 13->15 14->1 15->17 17->19 19->21 21->23 23->25 24->1 25->27 27->29 28->1 29->31 30->1 31->33 33->35 35->37 36->1 37->39 39->41 41->43 42->1 43->45 44->1 45->47 46->1 47->49 48->1 49->51 50->1 51->53 52->1 53->55 54->1 55->57 56->1 57->59 58->1 59->61 60->1 60->1 61->1 61->1 63->1 64->66 65->1 66->68 68->70 69->1 70->72 72->74 74->76 75->1 76->78 78->80 79->1 80->82 81->1 82->84 83->1 84->86 85->1 86->88 88->90 90->92 91->1 92->94 94->96 95->1 96->98 97->1 98->100 99->1 100->102 101->1 102->104 103->1 104->106 105->1 106->108 107->1 108->110 109->1 109->1 110->1 110->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int ( /* missing proto */ stringCompare ) ( ) ; extern int fclose ( void * stream ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; char * * _global_argv = ( char * * ) 0 ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; int main ( int argc , char * * argv , char * * _formal_envp ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void encodeStrings_litStr0_i $ nit ( void ) ; int _global_argc = 0 ; void megaInit ( void ) ; char * * _global_envp = ( char * * ) 0 ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int ( /* missing proto */ printf ) ( ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern double strtod ( char const * str , char const * endptr ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern void signal ( int sig , void * func ) ; extern double difftime ( long tv1 , long tv0 ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; void encodeStrings_litStr1_i $ nit ( void ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; char encodeStrings_litStr1 [ 27 ] ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; char encodeStrings_litStr0 [ 24 ] ; int main ( int argc , char * * argv , char * * _formal_envp ) { int compare ; char * str1 ; char * str2 ; int _BARRIER_0 ; { megaInit ( ) ; _global_argc = argc ; _global_argv = argv ; _global_envp = _formal_envp ; _BARRIER_0 = 1 ; if ( argc < 2 ) { return ( 1 ) ; } str1 = * ( argv + 1 ) ; str2 = * ( argv + 2 ) ; compare = stringCompare ( str1 , str2 ) ; if ( compare == 1 ) { _1_stringEncoder ( 0 , encodeStrings_litStr0 ) ; printf ( encodeStrings_litStr0 ) ; } else { _1_stringEncoder ( 1 , encodeStrings_litStr1 ) ; printf ( encodeStrings_litStr1 ) ; } return ( 0 ) ; } } void encodeStrings_litStr1_i $ nit ( void ) { { } } void megaInit ( void ) { { encodeStrings_litStr1_i $ nit ( ) ; encodeStrings_litStr0_i $ nit ( ) ; } } void encodeStrings_litStr0_i $ nit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { case 1 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 0 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; } } }
>>>Func
METHOD main
METHOD_RETURN int
PARAM int argc
PARAM char **argv
PARAM char **_formal_envp
megaInit megaInit()
<operator>.assignment _global_argc = argc
<operator>.assignment _global_argv = argv
<operator>.assignment _global_envp = _formal_envp
<operator>.assignment _BARRIER_0 = 1
<operator>.assignment sum = 0
<operator>.assignment i = 0
<operator>.assignment i = 0
_1_stringEncoder _1_stringEncoder(0, encodeStrings_litStr0)
printf printf(encodeStrings_litStr0, sum)
RETURN return (0); return (0);
<operator>.lessThan i < 127
<operator>.lessThan i < (int )*(*(argv + 1) + 0)
LITERAL 0 return (0);
<operator>.assignmentPlus sum += i
<operator>.postIncrement i ++
<operator>.assignmentPlus sum += i
<operator>.postIncrement i ++
<operator>.cast (int )*(*(argv + 1) + 0)
<operator>.addition *(argv + 1) + 0
<operator>.addition argv + 1
UNKNOWN int int
<operator>.indirection *(*(argv + 1) + 0)
<operator>.indirection *(argv + 1)
>>>PDG&29 0->2 0->3 0->4 0->5 0->6 0->7 0->8 0->9 0->10 0->11 0->12 0->13 0->14 0->15 0->16 0->17 0->18 0->19 0->20 0->21 0->22 0->24 0->25 2->6 3->7 3->25 4->8 5->1 6->1 6->1 6->1 7->1 7->1 8->1 8->1 8->1 9->1 9->1 10->1 10->14 10->19 10->21 11->16 12->1 12->17 13->1 13->14 14->1 14->1 14->1 15->1 16->1 16->16 16->19 16->19 16->20 16->20 17->1 17->1 17->1 17->17 17->21 17->21 17->22 17->22 17->23 17->24 17->25 17->26 17->27 17->28 18->15 19->1 19->14 19->21 20->1 20->16 21->1 21->14 22->1 22->17 23->1 24->1 25->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; char * * _global_argv = ( char * * ) 0 ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; int main ( int argc , char * * argv , char * * _formal_envp ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; void encodeStrings_litStr0_i $ nit ( void ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; int _global_argc = 0 ; void megaInit ( void ) ; char * * _global_envp = ( char * * ) 0 ; extern int ( /* missing proto */ printf ) ( ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; char encodeStrings_litStr0 [ 12 ] ; void megaInit ( void ) { { encodeStrings_litStr0_i $ nit ( ) ; } } void encodeStrings_litStr0_i $ nit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { case 0 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; } } } int main ( int argc , char * * argv , char * * _formal_envp ) { int i ; int sum ; int _BARRIER_0 ; { megaInit ( ) ; _global_argc = argc ; _global_argv = argv ; _global_envp = _formal_envp ; _BARRIER_0 = 1 ; sum = 0 ; i = 0 ; while ( i < 127 ) { sum += i ; i ++ ; } i = 0 ; while ( i < ( int ) * ( * ( argv + 1 ) + 0 ) ) { sum += i ; i ++ ; } _1_stringEncoder ( 0 , encodeStrings_litStr0 ) ; printf ( encodeStrings_litStr0 , sum ) ; return ( 0 ) ; } }
>>>Func
METHOD sort
METHOD_RETURN void
PARAM int *numbers
PARAM int size
<operator>.assignment pos = 0
RETURN return; return;
<operator>.lessThan pos < size
<operator>.greaterEqualsThan *(numbers + pos) >= *(numbers + (pos - 1))
<operator>.postIncrement pos ++
<operator>.assignment tmp = *(numbers + (pos - 1))
<operator>.assignment *(numbers + (pos - 1)) = *(numbers + pos)
<operator>.assignment *(numbers + pos) = tmp
<operator>.postDecrement pos --
<operator>.addition numbers + pos
<operator>.addition numbers + (pos - 1)
<operator>.equals pos == 0
<operator>.subtraction pos - 1
<operator>.assignment pos = 1
<operator>.addition numbers + (pos - 1)
<operator>.addition numbers + (pos - 1)
<operator>.addition numbers + pos
<operator>.addition numbers + pos
<operator>.subtraction pos - 1
<operator>.subtraction pos - 1
<operator>.indirection *(numbers + pos)
<operator>.indirection *(numbers + (pos - 1))
<operator>.indirection *(numbers + (pos - 1))
<operator>.indirection *(numbers + (pos - 1))
<operator>.indirection *(numbers + pos)
<operator>.indirection *(numbers + pos)
>>>PDG&30 0->2 0->3 0->4 0->5 0->6 0->8 0->11 0->12 0->13 0->14 0->15 0->16 0->17 0->18 0->19 0->20 0->21 0->22 0->23 2->1 2->13 3->6 4->1 4->6 5->1 6->1 6->1 6->1 6->6 6->7 6->13 6->13 6->14 6->16 6->16 6->24 6->25 7->1 7->1 7->1 7->8 7->9 7->10 7->11 7->12 7->15 7->18 7->19 7->20 7->21 7->22 7->23 7->26 7->27 7->28 7->29 8->1 8->6 9->1 9->11 10->1 10->1 11->1 11->1 11->1 12->1 12->15 14->1 14->1 15->1 15->6 15->17 16->8 16->14 16->14 16->22 17->1 17->6 19->1 21->1 22->18 22->18 22->23 23->12 23->19 23->19 23->20 23->21
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; void sort ( int * numbers , int size ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; void main ( void ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int printf ( char const * format , ... ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; void sort ( int * numbers , int size ) { int pos ; int tmp ; { pos = 0 ; while ( pos < size ) { if ( * ( numbers + pos ) >= * ( numbers + ( pos - 1 ) ) ) { pos ++ ; } else { tmp = * ( numbers + ( pos - 1 ) ) ; * ( numbers + ( pos - 1 ) ) = * ( numbers + pos ) ; * ( numbers + pos ) = tmp ; pos -- ; if ( pos == 0 ) { pos = 1 ; } } } return ; } } void megaInit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { } } } void main ( void ) { { megaInit ( ) ; } }
>>>Func
METHOD main
METHOD_RETURN int
PARAM int argc
PARAM char **argv
PARAM char **_formal_envp
megaInit megaInit()
<operator>.assignment _global_argc = argc
<operator>.assignment _global_argv = argv
<operator>.assignment _global_envp = _formal_envp
<operator>.assignment _BARRIER_0 = 1
<operator>.assignment sum = 0
<operator>.assignment i = 0
_1_stringEncoder _1_stringEncoder(0, encodeStrings_litStr0)
printf printf(encodeStrings_litStr0, sum)
RETURN return (0); return (0);
<operator>.lessThan i < 127
LITERAL 0 return (0);
<operator>.assignment j = 0
<operator>.postIncrement i ++
<operator>.lessThan j < (int )*(*(argv + 1) + 0)
<operator>.assignmentPlus sum += j
<operator>.postIncrement j ++
<operator>.cast (int )*(*(argv + 1) + 0)
<operator>.addition *(argv + 1) + 0
<operator>.addition argv + 1
UNKNOWN int int
<operator>.indirection *(*(argv + 1) + 0)
<operator>.indirection *(argv + 1)
>>>PDG&28 0->2 0->3 0->4 0->5 0->6 0->7 0->8 0->9 0->10 0->11 0->12 0->13 0->14 0->15 0->16 0->17 0->18 0->19 0->20 0->21 0->23 0->24 2->6 3->7 3->24 4->8 5->1 6->1 6->1 6->1 7->1 7->1 7->1 8->1 8->1 8->1 9->1 9->1 10->1 10->13 10->20 11->1 11->15 12->1 12->13 13->1 13->1 13->1 14->1 15->1 15->1 15->15 15->17 15->18 15->18 15->19 15->22 15->23 15->24 15->25 15->26 15->27 16->14 17->1 17->19 18->1 18->15 19->1 19->1 19->1 19->19 19->20 19->20 19->21 19->21 19->22 19->23 19->24 19->25 19->26 19->27 20->1 20->13 21->1 21->19 22->1 23->1 24->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; char * * _global_argv = ( char * * ) 0 ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; int main ( int argc , char * * argv , char * * _formal_envp ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; void encodeStrings_litStr0_i $ nit ( void ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; int _global_argc = 0 ; void megaInit ( void ) ; char * * _global_envp = ( char * * ) 0 ; extern int ( /* missing proto */ printf ) ( ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; char encodeStrings_litStr0 [ 12 ] ; void megaInit ( void ) { { encodeStrings_litStr0_i $ nit ( ) ; } } void encodeStrings_litStr0_i $ nit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { case 0 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; } } } int main ( int argc , char * * argv , char * * _formal_envp ) { int i ; int j ; int sum ; int _BARRIER_0 ; { megaInit ( ) ; _global_argc = argc ; _global_argv = argv ; _global_envp = _formal_envp ; _BARRIER_0 = 1 ; sum = 0 ; i = 0 ; while ( i < 127 ) { j = 0 ; while ( j < ( int ) * ( * ( argv + 1 ) + 0 ) ) { sum += j ; j ++ ; } i ++ ; } _1_stringEncoder ( 0 , encodeStrings_litStr0 ) ; printf ( encodeStrings_litStr0 , sum ) ; return ( 0 ) ; } }
>>>Func
METHOD countAndSay
METHOD_RETURN char*
PARAM int n
<operator>.assignment result = 1.0
<operator>.assignment i = 0
<operator>.assignment convert = (int )result
<operator>.assignment tmp = malloc(convert + 4)
<operator>.assignment arr = (char *)tmp
<operator>.assignment *(arr + 0) = (char )'1'
<operator>.assignment *(arr + 1) = (char )'\000'
<operator>.assignment i___0 = 2
RETURN return (arr); return (arr);
<operator>.lessThan i < n - 1
<operator>.lessEqualsThan i___0 <= n
IDENTIFIER arr return (arr);
<operator>.assignmentMultiplication result *= 1.4
<operator>.postIncrement i ++
<operator>.cast (int )result
malloc malloc(convert + 4)
<operator>.cast (char *)tmp
<operator>.cast (char )'1'
<operator>.cast (char )'\000'
<operator>.assignment length = strlen(arr)
<operator>.assignment __lengthofnewArr = (unsigned long )(length * 2)
<operator>.assignment tmp___0 = __builtin_alloca(sizeof(*newArr) * __lengthofnewArr)
<operator>.assignment newArr = (char *)tmp___0
strcpy strcpy(newArr, arr)
<operator>.assignment k = 0
<operator>.assignment j = 0
<operator>.assignment count = 1
<operator>.postIncrement i___0 ++
<operator>.subtraction n - 1
<operator>.addition convert + 4
<operator>.addition arr + 0
<operator>.addition arr + 1
<operator>.notEquals (int )*(newArr + j) != 0
strlen strlen(arr)
<operator>.cast (unsigned long )(length * 2)
__builtin_alloca __builtin_alloca(sizeof(*newArr) * __lengthofnewArr)
<operator>.cast (char *)tmp___0
<operator>.multiplication length * 2
<operator>.multiplication sizeof(*newArr) * __lengthofnewArr
<operator>.cast (int )*(newArr + j)
<operator>.equals (int )*(newArr + j) == (int )*(newArr + (j + 1))
<operator>.sizeOf sizeof(*newArr)
<operator>.postIncrement count ++
<operator>.postIncrement j ++
<operator>.addition newArr + j
<operator>.cast (int )*(newArr + (j + 1))
<operator>.assignment *(arr + k) = (char )(48 + count)
<operator>.assignment *(arr + (k + 1)) = *(newArr + j)
<operator>.assignment *(arr + (k + 2)) = (char )'\000'
<operator>.postIncrement j ++
<operator>.assignmentPlus k += 2
<operator>.assignment count = 1
<operator>.addition newArr + j
<operator>.addition newArr + (j + 1)
<operator>.cast (char )(48 + count)
<operator>.cast (char )'\000'
<operator>.addition j + 1
<operator>.addition arr + k
<operator>.addition 48 + count
<operator>.addition arr + (k + 1)
<operator>.addition newArr + j
<operator>.addition arr + (k + 2)
<operator>.addition k + 1
<operator>.addition k + 2
UNKNOWN unsigned long unsigned long
UNKNOWN char * char *
UNKNOWN int int
<operator>.indirection *(newArr + j)
<operator>.indirection *newArr
<operator>.cast (int )*(newArr + j)
UNKNOWN int int
<operator>.indirection *(newArr + j)
UNKNOWN int int
<operator>.indirection *(newArr + (j + 1))
<operator>.indirection *(arr + k)
<operator>.indirection *(arr + (k + 1))
<operator>.indirection *(newArr + j)
<operator>.indirection *(arr + (k + 2))
UNKNOWN char char
UNKNOWN char char
>>>PDG&83 0->2 0->3 0->4 0->5 0->7 0->8 0->9 0->10 0->12 0->13 0->14 0->15 0->16 0->17 0->18 0->19 0->20 0->21 0->25 0->26 0->27 0->28 0->29 0->30 0->31 0->32 0->33 0->34 0->35 0->36 0->39 0->40 0->41 0->45 0->46 0->47 0->49 0->51 0->52 0->53 0->54 0->55 0->56 0->57 0->58 0->59 0->60 0->61 0->62 0->63 0->64 0->65 0->66 2->31 3->1 3->5 3->15 3->17 4->1 4->12 5->1 5->1 5->18 5->32 6->1 6->1 6->7 6->19 7->1 7->1 7->14 7->33 7->34 7->36 8->1 8->1 8->1 9->1 9->1 9->1 10->1 10->13 11->1 12->1 12->1 12->1 12->12 12->15 12->16 12->16 12->31 13->1 13->1 13->1 13->13 13->22 13->23 13->24 13->25 13->26 13->27 13->28 13->29 13->30 13->30 13->35 13->36 13->37 13->38 13->39 13->40 13->41 13->42 13->44 13->47 13->67 13->68 13->69 13->70 13->71 14->11 15->1 15->5 15->17 16->1 16->12 17->1 18->1 18->6 19->1 22->1 22->1 22->40 23->1 23->1 23->41 24->1 24->1 24->25 24->39 25->1 25->1 25->26 26->1 26->1 26->14 26->36 26->47 26->60 26->62 26->64 27->1 27->1 27->53 27->60 27->62 27->64 27->65 27->66 28->1 28->46 28->47 28->52 28->55 28->56 28->59 28->63 29->1 29->1 29->45 29->49 29->57 29->61 30->1 30->13 31->12 31->12 31->13 32->1 34->1 35->1 35->1 35->35 35->42 35->43 35->47 35->48 35->55 35->56 35->59 35->69 35->70 35->72 35->73 35->74 35->75 35->76 36->22 36->26 37->1 38->1 38->24 39->1 40->1 40->23 40->23 40->37 40->37 41->1 41->38 42->1 43->1 43->1 43->45 43->46 43->49 43->50 43->51 43->52 43->53 43->54 43->57 43->58 43->60 43->61 43->62 43->63 43->64 43->65 43->66 43->77 43->78 43->79 43->80 43->81 43->82 44->1 45->1 45->1 45->49 45->57 45->61 46->1 46->47 46->52 46->55 46->56 46->59 46->63 47->1 47->1 48->1 49->1 49->1 49->1 50->1 50->1 51->1 51->1 51->1 52->1 52->46 52->47 52->55 52->56 52->59 52->63 53->1 53->1 53->60 53->62 53->64 53->65 53->66 54->1 54->1 54->45 54->49 54->57 54->61 56->1 57->1 62->1 64->1 64->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; char * countAndSay ( int n ) ; extern int ( /* missing proto */ malloc ) ( ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern int ( /* missing proto */ strlen ) ( ) ; void main ( void ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern int ( /* missing proto */ strcpy ) ( ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int printf ( char const * format , ... ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; void megaInit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { } } } void main ( void ) { { megaInit ( ) ; } } char * countAndSay ( int n ) { double result ; int i ; int k ; int j ; int count ; int convert ; char * arr ; int tmp ; int i___0 ; int length ; char * newArr ; unsigned long __lengthofnewArr ; void * tmp___0 ; { result = 1.0 ; i = 0 ; while ( i < n - 1 ) { result *= 1.4 ; i ++ ; } convert = ( int ) result ; tmp = malloc ( convert + 4 ) ; arr = ( char * ) tmp ; * ( arr + 0 ) = ( char ) ' ' ; * ( arr + 1 ) = ( char ) ' \000 ' ; i___0 = 2 ; while ( i___0 <= n ) { length = strlen ( arr ) ; __lengthofnewArr = ( unsigned long ) ( length * 2 ) ; tmp___0 = __builtin_alloca ( sizeof ( * newArr ) * __lengthofnewArr ) ; newArr = ( char * ) tmp___0 ; strcpy ( newArr , arr ) ; k = 0 ; j = 0 ; count = 1 ; while ( ( int ) * ( newArr + j ) != 0 ) { if ( ( int ) * ( newArr + j ) == ( int ) * ( newArr + ( j + 1 ) ) ) { count ++ ; j ++ ; } else { * ( arr + k ) = ( char ) ( 48 + count ) ; * ( arr + ( k + 1 ) ) = * ( newArr + j ) ; * ( arr + ( k + 2 ) ) = ( char ) ' \000 ' ; j ++ ; k += 2 ; count = 1 ; } } i___0 ++ ; } return ( arr ) ; } }
>>>Func
METHOD _1_stringEncoder
METHOD_RETURN void
PARAM int n
PARAM char str[]
BLOCK <empty> <empty>
<operator>.assignment encodeStrings_i3 = 0
IDENTIFIER n switch(n)
LITERAL 3 <empty>
<operator>.assignment str[encodeStrings_i3] = 'i'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'f'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '-'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '1'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '-'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'l'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'o'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 2 <empty>
<operator>.assignment str[encodeStrings_i3] = 'i'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'f'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '-'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '2'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '-'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'l'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'o'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 1 <empty>
<operator>.assignment str[encodeStrings_i3] = 'i'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'f'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '-'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '2'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '-'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'w'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'i'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 0 <empty>
<operator>.assignment str[encodeStrings_i3] = 'i'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'f'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '-'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '1'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '-'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'w'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'i'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
>>>PDG&95 0->2 0->3 0->4 0->5 0->6 0->7 0->8 0->9 0->10 0->11 0->12 0->13 0->14 0->15 0->16 0->17 0->18 0->19 0->20 0->21 0->22 0->23 0->24 0->25 0->26 0->27 0->28 0->29 0->30 0->31 0->32 0->33 0->34 0->35 0->36 0->37 0->38 0->39 0->40 0->41 0->42 0->43 0->44 0->45 0->46 0->47 0->48 0->49 0->50 0->51 0->52 0->53 0->54 0->55 0->56 0->57 0->58 0->59 0->60 0->61 0->62 0->63 0->64 0->65 0->66 0->67 0->68 0->69 0->70 0->71 0->72 0->73 0->74 0->75 0->76 0->77 0->78 0->79 0->80 0->81 0->82 0->83 0->84 0->85 0->86 0->87 0->88 0->89 0->90 0->91 0->92 0->93 0->94 2->1 3->1 5->1 5->1 5->9 5->32 5->55 5->76 8->1 9->11 10->1 11->13 13->15 14->1 15->17 16->1 17->19 18->1 19->21 20->1 21->23 22->1 23->25 24->1 25->27 26->1 27->29 28->1 28->1 29->1 29->1 31->1 32->34 33->1 34->36 36->38 37->1 38->40 39->1 40->42 41->1 42->44 43->1 44->46 45->1 46->48 47->1 48->50 49->1 50->52 51->1 51->1 52->1 52->1 55->57 56->1 57->59 59->61 60->1 61->63 62->1 63->65 64->1 65->67 66->1 67->69 68->1 69->71 70->1 71->73 72->1 72->1 73->1 73->1 76->78 77->1 78->80 80->82 81->1 82->84 83->1 84->86 85->1 86->88 87->1 88->90 89->1 90->92 91->1 92->94 93->1 93->1 94->1 94->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern void exit ( int status ) ; extern int pthread_cond_signal ( int * cond ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; char * * _global_argv = ( char * * ) 0 ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; void encodeStrings_litStr2_i $ nit ( void ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int pthread_mutex_lock ( int * mutex ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; int main ( int argc , char * * argv , char * * _formal_envp ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; void encodeStrings_litStr0_i $ nit ( void ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; int _global_argc = 0 ; void megaInit ( void ) ; char * * _global_envp = ( char * * ) 0 ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; void encodeStrings_litStr3_i $ nit ( void ) ; extern int ( /* missing proto */ printf ) ( ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; void encodeStrings_litStr1_i $ nit ( void ) ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; char encodeStrings_litStr3 [ 11 ] ; char encodeStrings_litStr2 [ 11 ] ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; char encodeStrings_litStr1 [ 10 ] ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; char encodeStrings_litStr0 [ 10 ] ; void encodeStrings_litStr0_i $ nit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { case 3 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 2 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 1 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 0 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; } } } void encodeStrings_litStr1_i $ nit ( void ) { { } } void megaInit ( void ) { { encodeStrings_litStr3_i $ nit ( ) ; encodeStrings_litStr2_i $ nit ( ) ; encodeStrings_litStr1_i $ nit ( ) ; encodeStrings_litStr0_i $ nit ( ) ; } } void encodeStrings_litStr3_i $ nit ( void ) { { } } void encodeStrings_litStr2_i $ nit ( void ) { { } } int main ( int argc , char * * argv , char * * _formal_envp ) { unsigned char c ; unsigned char x ; int _BARRIER_0 ; { megaInit ( ) ; _global_argc = argc ; _global_argv = argv ; _global_envp = _formal_envp ; _BARRIER_0 = 1 ; c = ( unsigned char ) * ( * ( argv + 1 ) + 0 ) ; if ( ( int ) c > 63 ) { _1_stringEncoder ( 0 , encodeStrings_litStr0 ) ; printf ( encodeStrings_litStr0 ) ; x = ( unsigned char ) ( ( ( int ) c / 3 ) * 2 ) ; if ( ( int ) x == 127 ) { _1_stringEncoder ( 1 , encodeStrings_litStr1 ) ; printf ( encodeStrings_litStr1 ) ; } else { _1_stringEncoder ( 2 , encodeStrings_litStr2 ) ; printf ( encodeStrings_litStr2 ) ; } } else { _1_stringEncoder ( 3 , encodeStrings_litStr3 ) ; printf ( encodeStrings_litStr3 ) ; } return ( 0 ) ; } }
>>>Func
METHOD _1_stringEncoder
METHOD_RETURN void
PARAM int n
PARAM char str[]
BLOCK <empty> <empty>
<operator>.assignment encodeStrings_i3 = 0
IDENTIFIER n switch(n)
LITERAL 0 <empty>
<operator>.assignment str[encodeStrings_i3] = 'G'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'C'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'D'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'o'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'f'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'i'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ':'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
>>>PDG&58 0->2 0->3 0->4 0->5 0->6 0->7 0->8 0->9 0->10 0->11 0->12 0->13 0->14 0->15 0->16 0->17 0->18 0->19 0->20 0->21 0->22 0->23 0->24 0->25 0->26 0->27 0->28 0->29 0->30 0->31 0->32 0->33 0->34 0->35 0->36 0->37 0->38 0->39 0->40 0->41 0->42 0->43 0->44 0->45 0->46 0->47 0->48 0->49 0->50 0->51 0->52 0->53 0->54 0->55 0->56 0->57 2->1 3->1 5->1 5->1 5->9 8->1 9->11 10->1 11->13 12->1 13->15 15->17 16->1 17->19 18->1 19->21 21->23 23->25 25->27 27->29 28->1 29->31 30->1 31->33 33->35 35->37 37->39 39->41 41->43 42->1 43->45 44->1 45->47 46->1 47->49 48->1 49->51 50->1 51->53 52->1 53->55 54->1 55->57 56->1 56->1 57->1 57->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; char * * _global_argv = ( char * * ) 0 ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; int main ( int argc , char * * argv , char * * _formal_envp ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; void encodeStrings_litStr0_i $ nit ( void ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; int _global_argc = 0 ; void megaInit ( void ) ; char * * _global_envp = ( char * * ) 0 ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int ( /* missing proto */ printf ) ( ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern int ( /* missing proto */ findgcd ) ( ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; char encodeStrings_litStr0 [ 25 ] ; int main ( int argc , char * * argv , char * * _formal_envp ) { int n1 ; int n2 ; int gcd ; int _BARRIER_0 ; { megaInit ( ) ; _global_argc = argc ; _global_argv = argv ; _global_envp = _formal_envp ; _BARRIER_0 = 1 ; if ( argc < 3 ) { return ( 1 ) ; } n1 = ( int ) * ( * ( argv + 1 ) + 0 ) ; n2 = ( int ) * ( * ( argv + 2 ) + 0 ) ; gcd = findgcd ( n1 , n2 ) ; _1_stringEncoder ( 0 , encodeStrings_litStr0 ) ; printf ( encodeStrings_litStr0 , n1 , n2 , gcd ) ; return ( 0 ) ; } } void encodeStrings_litStr0_i $ nit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { case 0 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; } } } void megaInit ( void ) { { encodeStrings_litStr0_i $ nit ( ) ; } }
>>>Func
METHOD hammingDistance
METHOD_RETURN int
PARAM int x
PARAM int y
<operator>.assignment difference = x ^ y
<operator>.assignment TotalBits = (int )(sizeof(difference) * 8UL)
<operator>.assignment distance = 0
<operator>.assignment i = 0
RETURN return (distance); return (distance);
<operator>.lessThan i < TotalBits
IDENTIFIER distance return (distance);
<operator>.xor x ^ y
<operator>.cast (int )(sizeof(difference) * 8UL)
<operator>.assignment tmp = UINT32_C(1)
<operator>.postIncrement i ++
<operator>.multiplication sizeof(difference) * 8UL
<operator>.and difference & (tmp << i)
<operator>.sizeOf sizeof(difference)
UINT32_C UINT32_C(1)
<operator>.postIncrement distance ++
<operator>.shiftLeft tmp << i
>>>PDG&21 0->2 0->3 0->6 0->7 0->9 0->10 0->11 0->14 0->15 0->16 0->18 0->19 0->20 2->11 3->11 4->1 4->1 5->1 5->1 5->9 6->1 6->1 6->10 6->19 7->1 7->9 8->1 9->1 9->1 9->1 9->9 9->13 9->14 9->16 9->18 9->20 9->20 10->8 11->1 11->1 11->4 11->4 12->1 13->1 13->1 13->20 14->1 14->9 15->5 15->12 16->1 16->1 16->1 16->19 17->1 18->13 19->1 19->1 19->10 20->1 20->14 20->16 20->16
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; void main ( void ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int printf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern int scanf ( char const * format , ... ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern float strtof ( char const * str , char const * endptr ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; int hammingDistance ( int x , int y ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; extern int ( /* missing proto */ UINT32_C ) ( ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; void megaInit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { } } } void main ( void ) { { megaInit ( ) ; } } int hammingDistance ( int x , int y ) { int difference ; int TotalBits ; int i ; int distance ; int tmp ; { difference = x ^ y ; TotalBits = ( int ) ( sizeof ( difference ) * 8UL ) ; distance = 0 ; i = 0 ; while ( i < TotalBits ) { tmp = UINT32_C ( 1 ) ; if ( difference & ( tmp << i ) ) { distance ++ ; } i ++ ; } return ( distance ) ; } }
>>>Func
METHOD _1_stringEncoder
METHOD_RETURN void
PARAM int n
PARAM char str[]
BLOCK <empty> <empty>
<operator>.assignment encodeStrings_i3 = 0
IDENTIFIER n switch(n)
LITERAL 0 <empty>
<operator>.assignment str[encodeStrings_i3] = 'S'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'u'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'm'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'i'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ':'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
>>>PDG&32 0->2 0->3 0->4 0->5 0->6 0->7 0->8 0->9 0->10 0->11 0->12 0->13 0->14 0->15 0->16 0->17 0->18 0->19 0->20 0->21 0->22 0->23 0->24 0->25 0->26 0->27 0->28 0->29 0->30 0->31 2->1 3->1 5->1 5->1 5->9 8->1 9->11 10->1 11->13 12->1 13->15 15->17 16->1 17->19 18->1 19->21 20->1 21->23 22->1 23->25 24->1 25->27 26->1 27->29 28->1 29->31 30->1 30->1 31->1 31->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; char * * _global_argv = ( char * * ) 0 ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; int main ( int argc , char * * argv , char * * _formal_envp ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; void encodeStrings_litStr0_i $ nit ( void ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; int _global_argc = 0 ; void megaInit ( void ) ; char * * _global_envp = ( char * * ) 0 ; extern int ( /* missing proto */ printf ) ( ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; char encodeStrings_litStr0 [ 12 ] ; void megaInit ( void ) { { encodeStrings_litStr0_i $ nit ( ) ; } } void encodeStrings_litStr0_i $ nit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { case 0 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; } } } int main ( int argc , char * * argv , char * * _formal_envp ) { int i ; int sum ; int _BARRIER_0 ; { megaInit ( ) ; _global_argc = argc ; _global_argv = argv ; _global_envp = _formal_envp ; _BARRIER_0 = 1 ; sum = 0 ; i = 0 ; while ( i < ( int ) * ( * ( argv + 1 ) + 0 ) ) { if ( sum > 8128 ) { sum *= i ; } else { sum += i ; } i ++ ; } _1_stringEncoder ( 0 , encodeStrings_litStr0 ) ; printf ( encodeStrings_litStr0 , sum ) ; return ( 0 ) ; } }
>>>Func
METHOD _1_stringEncoder
METHOD_RETURN void
PARAM int n
PARAM char str[]
BLOCK <empty> <empty>
<operator>.assignment encodeStrings_i3 = 0
IDENTIFIER n switch(n)
LITERAL 2 <empty>
<operator>.assignment str[encodeStrings_i3] = 'U'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'g'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ':'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'p'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'o'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'g'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'm'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '-'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'm'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'c'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'h'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'c'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 1 <empty>
<operator>.assignment str[encodeStrings_i3] = 'l'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'o'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 0 <empty>
<operator>.assignment str[encodeStrings_i3] = 'w'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'i'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
>>>PDG&94 0->2 0->3 0->4 0->5 0->6 0->7 0->8 0->9 0->10 0->11 0->12 0->13 0->14 0->15 0->16 0->17 0->18 0->19 0->20 0->21 0->22 0->23 0->24 0->25 0->26 0->27 0->28 0->29 0->30 0->31 0->32 0->33 0->34 0->35 0->36 0->37 0->38 0->39 0->40 0->41 0->42 0->43 0->44 0->45 0->46 0->47 0->48 0->49 0->50 0->51 0->52 0->53 0->54 0->55 0->56 0->57 0->58 0->59 0->60 0->61 0->62 0->63 0->64 0->65 0->66 0->67 0->68 0->69 0->70 0->71 0->72 0->73 0->74 0->75 0->76 0->77 0->78 0->79 0->80 0->81 0->82 0->83 0->84 0->85 0->86 0->87 0->88 0->89 0->90 0->91 0->92 0->93 2->1 3->1 5->1 5->1 5->9 5->72 5->85 8->1 9->11 10->1 11->13 13->15 15->17 17->19 18->1 19->21 21->23 22->1 23->25 25->27 26->1 27->29 28->1 29->31 31->33 33->35 35->37 36->1 37->39 38->1 39->41 41->43 42->1 43->45 45->47 46->1 47->49 49->51 50->1 51->53 53->55 55->57 56->1 57->59 58->1 59->61 60->1 61->63 62->1 63->65 64->1 65->67 66->1 67->69 68->1 68->1 69->1 69->1 71->1 72->74 73->1 74->76 75->1 76->78 77->1 78->80 79->1 80->82 81->1 81->1 82->1 82->1 84->1 85->87 86->1 87->89 88->1 89->91 90->1 91->93 92->1 92->1 93->1 93->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; char * * _global_argv = ( char * * ) 0 ; void encodeStrings_litStr2_i $ nit ( void ) ; extern int unlink ( char const * filename ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern int raise ( int sig ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern double ceil ( double x ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; int main ( int argc , char * * argv , char * * _formal_envp ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; void encodeStrings_litStr0_i $ nit ( void ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; int _global_argc = 0 ; char * * _global_envp = ( char * * ) 0 ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int ( /* missing proto */ printf ) ( ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; void encodeStrings_litStr1_i $ nit ( void ) ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; char encodeStrings_litStr2 [ 31 ] ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; char encodeStrings_litStr1 [ 6 ] ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; char encodeStrings_litStr0 [ 5 ] ; void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { case 2 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 1 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 0 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; } } } void megaInit ( void ) { { encodeStrings_litStr2_i $ nit ( ) ; encodeStrings_litStr1_i $ nit ( ) ; encodeStrings_litStr0_i $ nit ( ) ; } } void encodeStrings_litStr0_i $ nit ( void ) { { } } void encodeStrings_litStr1_i $ nit ( void ) { { } } void encodeStrings_litStr2_i $ nit ( void ) { { } } int main ( int argc , char * * argv , char * * _formal_envp ) { unsigned char c ; int _BARRIER_0 ; { megaInit ( ) ; _global_argc = argc ; _global_argv = argv ; _global_envp = _formal_envp ; _BARRIER_0 = 1 ; c = ( unsigned char ) * ( * ( argv + 1 ) + 0 ) ; if ( argc > 1 ) { if ( ( int ) c == 127 ) { _1_stringEncoder ( 0 , encodeStrings_litStr0 ) ; printf ( encodeStrings_litStr0 ) ; } else { _1_stringEncoder ( 1 , encodeStrings_litStr1 ) ; printf ( encodeStrings_litStr1 ) ; } } else { _1_stringEncoder ( 2 , encodeStrings_litStr2 ) ; printf ( encodeStrings_litStr2 ) ; } return ( 0 ) ; } }
>>>Func
METHOD romanToInt
METHOD_RETURN int
PARAM char *s
<operator>.assignment romanToInt___0 = 0
<operator>.assignment i = 0
RETURN return (romanToInt___0); return (romanToInt___0);
LITERAL 1 while (1)
IDENTIFIER romanToInt___0 return (romanToInt___0);
<operator>.assignment tmp___2 = strlen(s)
<operator>.postIncrement i ++
<operator>.logicalNot ! (i < tmp___2)
<operator>.cast (int )*(s + i)
strlen strlen(s)
LITERAL 73 <empty>
<operator>.assignment tmp = strlen(s)
<operator>.postIncrement romanToInt___0 ++
LITERAL 86 <empty>
<operator>.assignmentPlus romanToInt___0 += 5
LITERAL 88 <empty>
<operator>.assignment tmp___0 = strlen(s)
<operator>.assignmentPlus romanToInt___0 += 10
LITERAL 76 <empty>
<operator>.assignmentPlus romanToInt___0 += 50
LITERAL 67 <empty>
<operator>.assignment tmp___1 = strlen(s)
<operator>.assignmentPlus romanToInt___0 += 100
LITERAL 68 <empty>
<operator>.assignmentPlus romanToInt___0 += 500
LITERAL 77 <empty>
<operator>.assignmentPlus romanToInt___0 += 1000
<operator>.lessThan i < tmp___2
<operator>.lessThan i + 1 < tmp
<operator>.lessThan i + 1 < tmp___0
<operator>.lessThan i + 1 < tmp___1
<operator>.addition s + i
strlen strlen(s)
strlen strlen(s)
strlen strlen(s)
<operator>.addition i + 1
<operator>.equals (int )*(s + (i + 1)) == 86
<operator>.addition i + 1
<operator>.equals (int )*(s + (i + 1)) == 76
<operator>.addition i + 1
<operator>.equals (int )*(s + (i + 1)) == 68
<operator>.postDecrement romanToInt___0 --
<operator>.assignmentMinus romanToInt___0 -= 10
<operator>.assignmentMinus romanToInt___0 -= 100
<operator>.cast (int )*(s + (i + 1))
<operator>.cast (int )*(s + (i + 1))
<operator>.cast (int )*(s + (i + 1))
<operator>.equals (int )*(s + (i + 1)) == 88
<operator>.equals (int )*(s + (i + 1)) == 67
<operator>.equals (int )*(s + (i + 1)) == 77
<operator>.addition s + (i + 1)
<operator>.postDecrement romanToInt___0 --
<operator>.addition s + (i + 1)
<operator>.assignmentMinus romanToInt___0 -= 10
<operator>.addition s + (i + 1)
<operator>.assignmentMinus romanToInt___0 -= 100
<operator>.addition i + 1
<operator>.cast (int )*(s + (i + 1))
<operator>.addition i + 1
<operator>.cast (int )*(s + (i + 1))
<operator>.addition i + 1
<operator>.cast (int )*(s + (i + 1))
<operator>.addition s + (i + 1)
<operator>.addition s + (i + 1)
<operator>.addition s + (i + 1)
<operator>.addition i + 1
<operator>.addition i + 1
<operator>.addition i + 1
UNKNOWN int int
<operator>.indirection *(s + i)
UNKNOWN int int
<operator>.indirection *(s + (i + 1))
UNKNOWN int int
<operator>.indirection *(s + (i + 1))
UNKNOWN int int
<operator>.indirection *(s + (i + 1))
UNKNOWN int int
<operator>.indirection *(s + (i + 1))
UNKNOWN int int
<operator>.indirection *(s + (i + 1))
UNKNOWN int int
<operator>.indirection *(s + (i + 1))
>>>PDG&85 0->2 0->3 0->4 0->6 0->7 0->9 0->12 0->13 0->15 0->16 0->17 0->18 0->20 0->21 0->22 0->23 0->25 0->26 0->27 0->28 0->29 0->30 0->31 0->32 0->33 0->34 0->35 0->36 0->37 0->38 0->39 0->40 0->41 0->42 0->43 0->44 0->45 0->46 0->50 0->51 0->52 0->53 0->54 0->55 0->56 0->57 0->58 0->59 0->61 0->63 0->65 0->66 0->67 0->68 0->69 0->70 2->1 2->12 3->1 3->1 3->7 3->15 3->17 3->20 3->22 3->25 3->27 3->29 3->44 3->45 3->46 3->54 3->56 3->58 4->1 4->1 4->30 5->1 7->5 8->1 8->1 8->30 9->1 9->1 9->30 10->1 10->1 10->8 10->9 10->10 10->11 10->12 10->30 10->34 10->71 10->72 11->1 11->1 11->14 11->17 11->19 11->22 11->24 11->27 11->29 11->31 11->32 11->33 11->35 11->36 11->37 11->38 11->40 11->42 12->1 12->8 12->34 12->35 12->36 12->37 14->1 14->1 14->31 15->1 15->1 15->7 15->17 15->20 15->22 15->25 15->27 15->29 15->44 15->45 15->46 15->54 15->56 15->58 17->1 17->1 17->7 17->15 17->20 17->22 17->25 17->27 17->29 17->44 17->45 17->46 17->54 17->56 17->58 19->1 19->1 19->32 20->1 20->1 20->7 20->15 20->17 20->22 20->25 20->27 20->29 20->44 20->45 20->46 20->54 20->56 20->58 22->1 22->1 22->7 22->15 22->17 22->20 22->25 22->27 22->29 22->44 22->45 22->46 22->54 22->56 22->58 24->1 24->1 24->33 25->1 25->1 25->7 25->15 25->17 25->20 25->22 25->27 25->29 25->44 25->45 25->46 25->54 25->56 25->58 27->1 27->1 27->7 27->15 27->17 27->20 27->22 27->25 27->29 27->44 27->45 27->46 27->54 27->56 27->58 29->1 29->1 29->7 29->15 29->17 29->20 29->22 29->25 29->27 29->44 29->45 29->46 29->54 29->56 29->58 30->1 30->1 30->9 30->10 30->10 30->31 30->32 30->33 30->34 30->38 30->40 30->42 30->53 30->55 30->57 30->59 30->61 30->63 30->65 30->66 30->67 30->68 30->69 30->70 31->1 31->1 31->1 31->15 31->39 31->47 31->53 31->59 31->73 31->74 32->1 32->1 32->1 32->20 32->41 32->48 32->55 32->61 32->75 32->76 33->1 33->1 33->1 33->25 33->43 33->49 33->57 33->63 33->77 33->78 34->1 35->1 35->12 35->14 35->53 35->65 36->1 36->12 36->19 36->55 36->66 37->1 37->12 37->24 37->57 37->67 39->1 39->1 39->44 39->50 39->60 39->65 39->68 39->79 39->80 41->1 41->1 41->45 41->51 41->62 41->66 41->69 41->81 41->82 43->1 43->1 43->46 43->52 43->64 43->67 43->70 43->83 43->84 44->1 44->1 44->7 44->15 44->17 44->20 44->22 44->25 44->27 44->29 44->45 44->46 44->54 44->56 44->58 45->1 45->1 45->7 45->15 45->17 45->20 45->22 45->25 45->27 45->29 45->44 45->46 45->54 45->56 45->58 46->1 46->1 46->7 46->15 46->17 46->20 46->22 46->25 46->27 46->29 46->44 46->45 46->54 46->56 46->58 47->1 48->1 49->1 50->1 50->1 50->15 50->54 51->1 51->1 51->20 51->56 52->1 52->1 52->25 52->58 53->1 53->1 54->1 54->1 54->7 54->15 54->17 54->20 54->22 54->25 54->27 54->29 54->44 54->45 54->46 54->56 54->58 55->1 55->1 56->1 56->1 56->7 56->15 56->17 56->20 56->22 56->25 56->27 56->29 56->44 56->45 56->46 56->54 56->58 57->1 57->1 58->1 58->1 58->7 58->15 58->17 58->20 58->22 58->25 58->27 58->29 58->44 58->45 58->46 58->54 58->56 60->1 62->1 64->1 65->1 65->1 66->1 66->1 67->1 67->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; int romanToInt ( char * s ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern int ( /* missing proto */ strlen ) ( ) ; void main ( void ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int printf ( char const * format , ... ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; int romanToInt ( char * s ) { int romanToInt___0 ; int i ; int tmp ; int tmp___0 ; int tmp___1 ; int tmp___2 ; { romanToInt___0 = 0 ; i = 0 ; while ( 1 ) { tmp___2 = strlen ( s ) ; if ( ! ( i < tmp___2 ) ) { break ; } switch ( ( int ) * ( s + i ) ) { case 73 : tmp = strlen ( s ) ; if ( i + 1 < tmp ) { if ( ( int ) * ( s + ( i + 1 ) ) == 86 ) { romanToInt___0 -- ; break ; } else if ( ( int ) * ( s + ( i + 1 ) ) == 88 ) { romanToInt___0 -- ; break ; } } romanToInt___0 ++ ; break ; case 86 : romanToInt___0 += 5 ; break ; case 88 : tmp___0 = strlen ( s ) ; if ( i + 1 < tmp___0 ) { if ( ( int ) * ( s + ( i + 1 ) ) == 76 ) { romanToInt___0 -= 10 ; break ; } else if ( ( int ) * ( s + ( i + 1 ) ) == 67 ) { romanToInt___0 -= 10 ; break ; } } romanToInt___0 += 10 ; break ; case 76 : romanToInt___0 += 50 ; break ; case 67 : tmp___1 = strlen ( s ) ; if ( i + 1 < tmp___1 ) { if ( ( int ) * ( s + ( i + 1 ) ) == 68 ) { romanToInt___0 -= 100 ; break ; } else if ( ( int ) * ( s + ( i + 1 ) ) == 77 ) { romanToInt___0 -= 100 ; break ; } } romanToInt___0 += 100 ; break ; case 68 : romanToInt___0 += 500 ; break ; case 77 : romanToInt___0 += 1000 ; break ; default : break ; } i ++ ; } return ( romanToInt___0 ) ; } } void megaInit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { } } } void main ( void ) { { megaInit ( ) ; } }
>>>Func
METHOD _1_stringEncoder
METHOD_RETURN void
PARAM int n
PARAM char str[]
BLOCK <empty> <empty>
<operator>.assignment encodeStrings_i3 = 0
IDENTIFIER n switch(n)
LITERAL 1 <empty>
<operator>.assignment str[encodeStrings_i3] = 'i'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'o'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'A'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'm'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'o'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'g'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'u'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'm'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'b'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '.'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 0 <empty>
<operator>.assignment str[encodeStrings_i3] = 'i'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'A'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'm'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'o'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'g'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'u'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'm'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'b'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '.'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
>>>PDG&113 0->2 0->3 0->4 0->5 0->6 0->7 0->8 0->9 0->10 0->11 0->12 0->13 0->14 0->15 0->16 0->17 0->18 0->19 0->20 0->21 0->22 0->23 0->24 0->25 0->26 0->27 0->28 0->29 0->30 0->31 0->32 0->33 0->34 0->35 0->36 0->37 0->38 0->39 0->40 0->41 0->42 0->43 0->44 0->45 0->46 0->47 0->48 0->49 0->50 0->51 0->52 0->53 0->54 0->55 0->56 0->57 0->58 0->59 0->60 0->61 0->62 0->63 0->64 0->65 0->66 0->67 0->68 0->69 0->70 0->71 0->72 0->73 0->74 0->75 0->76 0->77 0->78 0->79 0->80 0->81 0->82 0->83 0->84 0->85 0->86 0->87 0->88 0->89 0->90 0->91 0->92 0->93 0->94 0->95 0->96 0->97 0->98 0->99 0->100 0->101 0->102 0->103 0->104 0->105 0->106 0->107 0->108 0->109 0->110 0->111 0->112 2->1 3->1 5->1 5->1 5->9 5->66 8->1 9->11 11->13 13->15 15->17 17->19 19->21 21->23 22->1 23->25 25->27 27->29 28->1 29->31 31->33 33->35 34->1 35->37 36->1 37->39 39->41 40->1 41->43 43->45 44->1 45->47 46->1 47->49 48->1 49->51 50->1 51->53 52->1 53->55 54->1 55->57 56->1 57->59 58->1 59->61 60->1 61->63 62->1 62->1 63->1 63->1 65->1 66->68 68->70 70->72 71->1 72->74 74->76 76->78 77->1 78->80 80->82 82->84 83->1 84->86 85->1 86->88 88->90 89->1 90->92 92->94 93->1 94->96 95->1 96->98 97->1 98->100 99->1 100->102 101->1 102->104 103->1 104->106 105->1 106->108 107->1 108->110 109->1 110->112 111->1 111->1 112->1 112->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; char * * _global_argv = ( char * * ) 0 ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern int raise ( int sig ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; int main ( int argc , char * * argv , char * * _formal_envp ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void encodeStrings_litStr0_i $ nit ( void ) ; int _global_argc = 0 ; void megaInit ( void ) ; char * * _global_envp = ( char * * ) 0 ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int ( /* missing proto */ printf ) ( ) ; extern int scanf ( char const * format , ... ) ; extern void perror ( char const * str ) ; extern long clock ( void ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern float strtof ( char const * str , char const * endptr ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern double strtod ( char const * str , char const * endptr ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; void encodeStrings_litStr1_i $ nit ( void ) ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; char encodeStrings_litStr1 [ 28 ] ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; char encodeStrings_litStr0 [ 24 ] ; void megaInit ( void ) { { encodeStrings_litStr1_i $ nit ( ) ; encodeStrings_litStr0_i $ nit ( ) ; } } void encodeStrings_litStr0_i $ nit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { case 1 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 0 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; } } } int main ( int argc , char * * argv , char * * _formal_envp ) { int n ; int n1 ; int rem ; int num ; int _BARRIER_0 ; { megaInit ( ) ; _global_argc = argc ; _global_argv = argv ; _global_envp = _formal_envp ; _BARRIER_0 = 1 ; if ( argc < 2 ) { return ( 1 ) ; } num = 0 ; n = ( int ) * ( * ( argv + 1 ) + 0 ) ; n1 = n ; while ( n1 != 0 ) { rem = n1 % 10 ; num += ( rem * rem ) * rem ; n1 /= 10 ; } if ( num == n ) { _1_stringEncoder ( 0 , encodeStrings_litStr0 ) ; printf ( encodeStrings_litStr0 ) ; } else { _1_stringEncoder ( 1 , encodeStrings_litStr1 ) ; printf ( encodeStrings_litStr1 ) ; } return ( 0 ) ; } } void encodeStrings_litStr1_i $ nit ( void ) { { } }
>>>Func
METHOD _1_stringEncoder
METHOD_RETURN void
PARAM int n
PARAM char str[]
BLOCK <empty> <empty>
<operator>.assignment encodeStrings_i3 = 0
IDENTIFIER n switch(n)
LITERAL 1 <empty>
<operator>.assignment str[encodeStrings_i3] = 'l'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'o'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 0 <empty>
<operator>.assignment str[encodeStrings_i3] = 'w'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'i'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
>>>PDG&31 0->2 0->3 0->4 0->5 0->6 0->7 0->8 0->9 0->10 0->11 0->12 0->13 0->14 0->15 0->16 0->17 0->18 0->19 0->20 0->21 0->22 0->23 0->24 0->25 0->26 0->27 0->28 0->29 0->30 2->1 3->1 5->1 5->1 5->9 5->22 8->1 9->11 10->1 11->13 12->1 13->15 14->1 15->17 16->1 17->19 18->1 18->1 19->1 19->1 21->1 22->24 23->1 24->26 25->1 26->28 27->1 28->30 29->1 29->1 30->1 30->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; char * * _global_argv = ( char * * ) 0 ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern int raise ( int sig ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; int main ( int argc , char * * argv , char * * _formal_envp ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void encodeStrings_litStr0_i $ nit ( void ) ; int _global_argc = 0 ; void megaInit ( void ) ; char * * _global_envp = ( char * * ) 0 ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int ( /* missing proto */ printf ) ( ) ; extern int scanf ( char const * format , ... ) ; extern void perror ( char const * str ) ; extern long clock ( void ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern float strtof ( char const * str , char const * endptr ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern double strtod ( char const * str , char const * endptr ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; void encodeStrings_litStr1_i $ nit ( void ) ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; char encodeStrings_litStr1 [ 6 ] ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; char encodeStrings_litStr0 [ 5 ] ; void megaInit ( void ) { { encodeStrings_litStr1_i $ nit ( ) ; encodeStrings_litStr0_i $ nit ( ) ; } } void encodeStrings_litStr0_i $ nit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { case 1 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 0 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; } } } int main ( int argc , char * * argv , char * * _formal_envp ) { unsigned char c ; int _BARRIER_0 ; { megaInit ( ) ; _global_argc = argc ; _global_argv = argv ; _global_envp = _formal_envp ; _BARRIER_0 = 1 ; c = ( unsigned char ) * ( * ( argv + 1 ) + 0 ) ; if ( ( int ) c == 127 ) { _1_stringEncoder ( 0 , encodeStrings_litStr0 ) ; printf ( encodeStrings_litStr0 ) ; } else { _1_stringEncoder ( 1 , encodeStrings_litStr1 ) ; printf ( encodeStrings_litStr1 ) ; } return ( 0 ) ; } } void encodeStrings_litStr1_i $ nit ( void ) { { } }
>>>Func
METHOD _1_stringEncoder
METHOD_RETURN void
PARAM int n
PARAM char str[]
BLOCK <empty> <empty>
<operator>.assignment encodeStrings_i3 = 0
IDENTIFIER n switch(n)
LITERAL 2 <empty>
<operator>.assignment str[encodeStrings_i3] = '\n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'O'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'c'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'l'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'q'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'u'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'i'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'v'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'l'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'i'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ':'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 1 <empty>
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 0 <empty>
<operator>.assignment str[encodeStrings_i3] = 'E'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'h'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'b'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'i'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'y'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'o'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ':'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
>>>PDG&110 0->2 0->3 0->4 0->5 0->6 0->7 0->8 0->9 0->10 0->11 0->12 0->13 0->14 0->15 0->16 0->17 0->18 0->19 0->20 0->21 0->22 0->23 0->24 0->25 0->26 0->27 0->28 0->29 0->30 0->31 0->32 0->33 0->34 0->35 0->36 0->37 0->38 0->39 0->40 0->41 0->42 0->43 0->44 0->45 0->46 0->47 0->48 0->49 0->50 0->51 0->52 0->53 0->54 0->55 0->56 0->57 0->58 0->59 0->60 0->61 0->62 0->63 0->64 0->65 0->66 0->67 0->68 0->69 0->70 0->71 0->72 0->73 0->74 0->75 0->76 0->77 0->78 0->79 0->80 0->81 0->82 0->83 0->84 0->85 0->86 0->87 0->88 0->89 0->90 0->91 0->92 0->93 0->94 0->95 0->96 0->97 0->98 0->99 0->100 0->101 0->102 0->103 0->104 0->105 0->106 0->107 0->108 0->109 2->1 3->1 5->1 5->1 5->9 5->60 5->67 8->1 9->11 10->1 11->13 12->1 13->15 15->17 17->19 19->21 21->23 23->25 24->1 25->27 26->1 27->29 29->31 30->1 31->33 32->1 33->35 34->1 35->37 36->1 37->39 38->1 39->41 40->1 41->43 43->45 44->1 45->47 46->1 47->49 48->1 49->51 50->1 51->53 52->1 53->55 54->1 55->57 56->1 56->1 57->1 57->1 59->1 60->62 61->1 62->64 63->1 63->1 64->1 64->1 66->1 67->69 69->71 71->73 73->75 75->77 77->79 78->1 79->81 80->1 81->83 82->1 83->85 85->87 86->1 87->89 88->1 89->91 91->93 92->1 93->95 94->1 95->97 96->1 97->99 99->101 100->1 101->103 102->1 103->105 104->1 105->107 106->1 107->109 108->1 108->1 109->1 109->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int ( /* missing proto */ three_digits ) ( ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; char * * _global_argv = ( char * * ) 0 ; extern int fcntl ( int filedes , int cmd , ... ) ; void encodeStrings_litStr2_i $ nit ( void ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; int main ( int _formal_argc , char * * _formal_argv , char * * _formal_envp ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; void encodeStrings_litStr0_i $ nit ( void ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; int _global_argc = 0 ; void megaInit ( void ) ; char * * _global_envp = ( char * * ) 0 ; extern int ( /* missing proto */ printf ) ( ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int ( /* missing proto */ scanf ) ( ) ; extern void perror ( char const * str ) ; extern long clock ( void ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern double strtod ( char const * str , char const * endptr ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; void encodeStrings_litStr1_i $ nit ( void ) ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; char encodeStrings_litStr2 [ 25 ] ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; char encodeStrings_litStr1 [ 3 ] ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; char encodeStrings_litStr0 [ 22 ] ; void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { case 2 : str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 1 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 0 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; } } } void megaInit ( void ) { { encodeStrings_litStr2_i $ nit ( ) ; encodeStrings_litStr1_i $ nit ( ) ; encodeStrings_litStr0_i $ nit ( ) ; } } void encodeStrings_litStr1_i $ nit ( void ) { { } } int main ( int _formal_argc , char * * _formal_argv , char * * _formal_envp ) { int binary_num ; int d ; int base ; int remainder ; int td ; int res ; int ord ; int _BARRIER_0 ; { megaInit ( ) ; _global_argc = _formal_argc ; _global_argv = _formal_argv ; _global_envp = _formal_envp ; _BARRIER_0 = 1 ; d = 0 ; base = 1 ; res = 0 ; ord = 1 ; _1_stringEncoder ( 0 , encodeStrings_litStr0 ) ; printf ( encodeStrings_litStr0 ) ; _1_stringEncoder ( 1 , encodeStrings_litStr1 ) ; scanf ( encodeStrings_litStr1 , & binary_num ) ; while ( binary_num > 0 ) { if ( binary_num > 111 ) { td = three_digits ( binary_num ) ; } else { td = binary_num ; } binary_num /= 1000 ; d = 0 ; base = 1 ; while ( td > 0 ) { remainder = td % 10 ; td /= 10 ; d += base * remainder ; base *= 2 ; } res += d * ord ; ord *= 10 ; } _1_stringEncoder ( 2 , encodeStrings_litStr2 ) ; printf ( encodeStrings_litStr2 , res ) ; return ( 0 ) ; } } void encodeStrings_litStr2_i $ nit ( void ) { { } } void encodeStrings_litStr0_i $ nit ( void ) { { } }
>>>Func
METHOD _1_stringEncoder
METHOD_RETURN void
PARAM int n
PARAM char str[]
BLOCK <empty> <empty>
<operator>.assignment encodeStrings_i3 = 0
IDENTIFIER n switch(n)
LITERAL 5 <empty>
<operator>.assignment str[encodeStrings_i3] = 'I'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'M'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'P'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'O'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'S'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'S'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'I'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'B'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'L'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'E'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 4 <empty>
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 3 <empty>
<operator>.assignment str[encodeStrings_i3] = 'I'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'M'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'P'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'O'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'S'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'S'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'I'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'B'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'L'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'E'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 2 <empty>
<operator>.assignment str[encodeStrings_i3] = 'C'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '#'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ':'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 1 <empty>
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 0 <empty>
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
>>>PDG&141 0->2 0->3 0->4 0->5 0->6 0->7 0->8 0->9 0->10 0->11 0->12 0->13 0->14 0->15 0->16 0->17 0->18 0->19 0->20 0->21 0->22 0->23 0->24 0->25 0->26 0->27 0->28 0->29 0->30 0->31 0->32 0->33 0->34 0->35 0->36 0->37 0->38 0->39 0->40 0->41 0->42 0->43 0->44 0->45 0->46 0->47 0->48 0->49 0->50 0->51 0->52 0->53 0->54 0->55 0->56 0->57 0->58 0->59 0->60 0->61 0->62 0->63 0->64 0->65 0->66 0->67 0->68 0->69 0->70 0->71 0->72 0->73 0->74 0->75 0->76 0->77 0->78 0->79 0->80 0->81 0->82 0->83 0->84 0->85 0->86 0->87 0->88 0->89 0->90 0->91 0->92 0->93 0->94 0->95 0->96 0->97 0->98 0->99 0->100 0->101 0->102 0->103 0->104 0->105 0->106 0->107 0->108 0->109 0->110 0->111 0->112 0->113 0->114 0->115 0->116 0->117 0->118 0->119 0->120 0->121 0->122 0->123 0->124 0->125 0->126 0->127 0->128 0->129 0->130 0->131 0->132 0->133 0->134 0->135 0->136 0->137 0->138 0->139 0->140 2->1 3->1 5->1 5->1 5->9 5->34 5->73 5->98 5->121 5->136 9->11 10->1 11->13 12->1 13->15 14->1 15->17 17->19 18->1 19->21 20->1 21->23 22->1 23->25 24->1 25->27 26->1 27->29 28->1 29->31 30->1 30->1 31->1 31->1 34->36 36->38 38->40 40->42 42->44 44->46 46->48 48->50 50->52 52->54 54->56 56->58 58->60 60->62 61->1 62->64 63->1 64->66 65->1 66->68 67->1 68->70 69->1 69->1 70->1 70->1 73->75 74->1 75->77 76->1 77->79 78->1 79->81 81->83 82->1 83->85 84->1 85->87 86->1 87->89 88->1 89->91 90->1 91->93 92->1 93->95 94->1 94->1 95->1 95->1 97->1 98->100 99->1 100->102 101->1 102->104 103->1 104->106 106->108 107->1 108->110 109->1 110->112 111->1 112->114 113->1 114->116 115->1 116->118 117->1 117->1 118->1 118->1 121->123 123->125 125->127 127->129 128->1 129->131 130->1 131->133 132->1 132->1 133->1 133->1 135->1 136->138 137->1 138->140 139->1 139->1 140->1 140->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int ( /* missing proto */ ABS ) ( ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; char * * _global_argv = ( char * * ) 0 ; extern int fcntl ( int filedes , int cmd , ... ) ; void encodeStrings_litStr2_i $ nit ( void ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; void encodeStrings_litStr5_i $ nit ( void ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern int raise ( int sig ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; int main ( int _formal_argc , char * * _formal_argv , char * * _formal_envp ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; void encodeStrings_litStr0_i $ nit ( void ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; int _global_argc = 0 ; void megaInit ( void ) ; char * * _global_envp = ( char * * ) 0 ; void encodeStrings_litStr3_i $ nit ( void ) ; extern int ( /* missing proto */ printf ) ( ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern int ( /* missing proto */ scanf ) ( ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; void encodeStrings_litStr1_i $ nit ( void ) ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; void encodeStrings_litStr4_i $ nit ( void ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; char encodeStrings_litStr5 [ 12 ] ; char encodeStrings_litStr4 [ 19 ] ; extern double sqrt ( double x ) ; extern int open ( char const * filename , int oflag , ... ) ; char encodeStrings_litStr3 [ 12 ] ; char encodeStrings_litStr2 [ 11 ] ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; char encodeStrings_litStr1 [ 7 ] ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; char encodeStrings_litStr0 [ 3 ] ; void encodeStrings_litStr4_i $ nit ( void ) { { } } void encodeStrings_litStr3_i $ nit ( void ) { { } } void encodeStrings_litStr1_i $ nit ( void ) { { } } void megaInit ( void ) { { encodeStrings_litStr5_i $ nit ( ) ; encodeStrings_litStr4_i $ nit ( ) ; encodeStrings_litStr3_i $ nit ( ) ; encodeStrings_litStr2_i $ nit ( ) ; encodeStrings_litStr1_i $ nit ( ) ; encodeStrings_litStr0_i $ nit ( ) ; } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { case 5 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 4 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 3 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 2 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 1 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 0 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; } } } void encodeStrings_litStr0_i $ nit ( void ) { { } } void encodeStrings_litStr5_i $ nit ( void ) { { } } int main ( int _formal_argc , char * * _formal_argv , char * * _formal_envp ) { int c ; int n ; int m ; int a ; int t ; int xa ; int ya ; int xb ; int yb ; int xc ; int yc ; int ar ; int nf ; int _BARRIER_0 ; { megaInit ( ) ; _global_argc = _formal_argc ; _global_argv = _formal_argv ; _global_envp = _formal_envp ; _BARRIER_0 = 1 ; _1_stringEncoder ( 0 , encodeStrings_litStr0 ) ; scanf ( encodeStrings_litStr0 , & c ) ; t = 1 ; while ( t <= c ) { _1_stringEncoder ( 1 , encodeStrings_litStr1 ) ; scanf ( encodeStrings_litStr1 , & n , & m , & a ) ; _1_stringEncoder ( 2 , encodeStrings_litStr2 ) ; printf ( encodeStrings_litStr2 , t ) ; if ( a > n * m ) { _1_stringEncoder ( 3 , encodeStrings_litStr3 ) ; printf ( encodeStrings_litStr3 ) ; goto __Cont ; } nf = 1 ; xa = 0 ; while ( 1 ) { if ( xa <= n ) { if ( ! nf ) { break ; } } else { break ; } xb = 0 ; while ( 1 ) { if ( xb <= n ) { if ( ! nf ) { break ; } } else { break ; } xc = 0 ; while ( 1 ) { if ( xc <= n ) { if ( ! nf ) { break ; } } else { break ; } ya = 0 ; while ( 1 ) { if ( ya <= m ) { if ( ! nf ) { break ; } } else { break ; } yb = 0 ; while ( 1 ) { if ( yb <= m ) { if ( ! nf ) { break ; } } else { break ; } yc = 0 ; while ( 1 ) { if ( yc <= m ) { if ( ! nf ) { break ; } } else { break ; } ar = ABS ( ( ( xb * ya - xa * yb ) + ( xc * yb - xb * yc ) ) + ( xa * yc - xc * ya ) ) ; if ( ar == a ) { _1_stringEncoder ( 4 , encodeStrings_litStr4 ) ; printf ( encodeStrings_litStr4 , xa , ya , xb , yb , xc , yc ) ; nf = 0 ; } yc ++ ; } yb ++ ; } ya ++ ; } xc ++ ; } xb ++ ; } xa ++ ; } if ( nf ) { _1_stringEncoder ( 5 , encodeStrings_litStr5 ) ; printf ( encodeStrings_litStr5 ) ; } __Cont : /* CIL Label */ t ++ ; } return ( 0 ) ; } } void encodeStrings_litStr2_i $ nit ( void ) { { } }
>>>Func
METHOD main
METHOD_RETURN int
PARAM int argc
PARAM char **argv
PARAM char **_formal_envp
megaInit megaInit()
<operator>.assignment _global_argc = argc
<operator>.assignment _global_argv = argv
<operator>.assignment _global_envp = _formal_envp
<operator>.assignment _BARRIER_0 = 1
<operator>.assignment sum = 0
<operator>.assignment str = (char const   *)*(argv + 1)
<operator>.assignment i = 0
<operator>.assignment t = str
_1_stringEncoder _1_stringEncoder(0, encodeStrings_litStr0)
printf printf(encodeStrings_litStr0, sum)
RETURN return (0); return (0);
<operator>.lessThan i < (int )*(*(argv + 1) + 0)
LITERAL 0 return (0);
<operator>.assignmentPlus sum += i
<operator>.postIncrement i ++
<operator>.assignmentPlus sum += (int )*t
<operator>.postIncrement t ++
<operator>.cast (int )*(*(argv + 1) + 0)
<operator>.addition argv + 1
<operator>.cast (int )*t
<operator>.addition *(argv + 1) + 0
<operator>.addition argv + 1
<operator>.indirection *t
UNKNOWN int int
<operator>.indirection *(*(argv + 1) + 0)
UNKNOWN int int
<operator>.indirection *t
<operator>.indirection *(argv + 1)
>>>PDG&34 0->2 0->3 0->4 0->5 0->6 0->7 0->8 0->9 0->10 0->12 0->13 0->14 0->15 0->16 0->17 0->18 0->19 0->20 0->21 0->22 0->24 0->26 0->27 2->6 3->7 3->24 3->27 4->8 5->1 6->1 6->1 6->1 7->1 7->1 8->1 8->1 8->1 9->1 9->1 10->1 10->15 10->19 10->21 11->1 11->1 11->13 12->1 12->17 13->1 13->1 13->1 13->22 14->1 14->15 15->1 15->1 15->1 16->1 17->1 17->1 17->1 17->17 17->19 17->19 17->20 17->20 17->23 17->26 17->27 17->29 17->30 17->33 18->16 19->1 19->15 19->21 20->1 20->17 21->1 21->1 21->15 22->1 22->1 23->1 25->1 26->1 27->1 28->21 28->22 28->25 28->28 28->31 28->32
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; char * * _global_argv = ( char * * ) 0 ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; int main ( int argc , char * * argv , char * * _formal_envp ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; void encodeStrings_litStr0_i $ nit ( void ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; int _global_argc = 0 ; void megaInit ( void ) ; char * * _global_envp = ( char * * ) 0 ; extern int ( /* missing proto */ printf ) ( ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; char encodeStrings_litStr0 [ 12 ] ; void megaInit ( void ) { { encodeStrings_litStr0_i $ nit ( ) ; } } void encodeStrings_litStr0_i $ nit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { case 0 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; } } } int main ( int argc , char * * argv , char * * _formal_envp ) { int i ; int sum ; char const * str ; register char const * t ; int _BARRIER_0 ; { megaInit ( ) ; _global_argc = argc ; _global_argv = argv ; _global_envp = _formal_envp ; _BARRIER_0 = 1 ; sum = 0 ; str = ( char const * ) * ( argv + 1 ) ; i = 0 ; while ( i < ( int ) * ( * ( argv + 1 ) + 0 ) ) { sum += i ; i ++ ; } t = str ; while ( * t ) { sum += ( int ) * t ; t ++ ; } _1_stringEncoder ( 0 , encodeStrings_litStr0 ) ; printf ( encodeStrings_litStr0 , sum ) ; return ( 0 ) ; } }
>>>Func
METHOD read_intx
METHOD_RETURN int
PARAM char **s
<operator>.assignment p = *s
<operator>.assignment ret = strtoul(p, & p, 10)
<operator>.assignment *s = p
RETURN return (ret); return (ret);
LITERAL 1 while (1)
IDENTIFIER ret return (ret);
<operator>.assignment tmp = isspace((int )*p)
<operator>.postIncrement p ++
strtoul strtoul(p, & p, 10)
<operator>.logicalNot ! tmp
isspace isspace((int )*p)
<operator>.cast (int )*p
UNKNOWN int int
<operator>.indirection *p
>>>PDG&17 0->2 0->5 0->7 0->8 0->10 0->11 0->12 2->1 3->1 3->10 3->11 4->1 4->1 4->1 4->8 5->1 5->1 5->1 6->1 8->6 9->1 9->1 9->12 10->1 10->11 11->1 11->4 11->4 11->4 11->5 11->5 12->1 12->1 12->9 12->10 12->12 12->13 12->14 12->15 12->16 13->1 13->9 14->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern int ( /* missing proto */ strtoul ) ( ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; void main ( void ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int printf ( char const * format , ... ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern int ( /* missing proto */ isspace ) ( ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; int read_intx ( char * * s ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; void megaInit ( void ) { { } } int read_intx ( char * * s ) { char * p ; int ret ; int tmp ; { p = * s ; while ( 1 ) { tmp = isspace ( ( int ) * p ) ; if ( ! tmp ) { break ; } p ++ ; } ret = strtoul ( p , & p , 10 ) ; * s = p ; return ( ret ) ; } } void main ( void ) { { megaInit ( ) ; } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { } } }
>>>Func
METHOD BKDRHash
METHOD_RETURN unsigned int
PARAM char *str
PARAM unsigned int len
<operator>.assignment seed = 131U
<operator>.assignment hash = 0U
<operator>.assignment i = 0U
<operator>.assignment i = 0U
RETURN return (hash); return (hash);
<operator>.lessThan i < len
IDENTIFIER hash return (hash);
<operator>.assignment hash = hash * seed + (unsigned int )*str
<operator>.postIncrement str ++
<operator>.postIncrement i ++
<operator>.addition hash * seed + (unsigned int )*str
<operator>.multiplication hash * seed
<operator>.cast (unsigned int )*str
UNKNOWN unsigned int unsigned int
<operator>.indirection *str
>>>PDG&19 0->2 0->3 0->4 0->5 0->6 0->7 0->9 0->10 0->12 0->13 0->15 2->1 2->12 3->9 4->1 4->1 4->15 5->1 5->1 5->10 5->15 7->1 7->9 8->1 9->1 9->1 9->1 9->9 9->11 9->12 9->13 9->13 9->14 9->15 9->16 9->17 9->18 10->8 11->1 11->1 11->1 11->10 11->15 12->1 12->1 13->1 13->9 14->1 14->1 15->1 15->11 15->11 15->14 15->14 16->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; void main ( void ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int printf ( char const * format , ... ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; unsigned int BKDRHash ( char * str , unsigned int len ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; unsigned int BKDRHash ( char * str , unsigned int len ) { unsigned int seed ; unsigned int hash ; unsigned int i ; { seed = 131U ; hash = 0U ; i = 0U ; i = 0U ; while ( i < len ) { hash = hash * seed + ( unsigned int ) * str ; str ++ ; i ++ ; } return ( hash ) ; } } void megaInit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { } } } void main ( void ) { { megaInit ( ) ; } }
>>>Func
METHOD main
METHOD_RETURN int
PARAM int argc
PARAM char **argv
PARAM char **_formal_envp
megaInit megaInit()
<operator>.assignment _global_argc = argc
<operator>.assignment _global_argv = argv
<operator>.assignment _global_envp = _formal_envp
<operator>.assignment _BARRIER_0 = 1
<operator>.assignment i = 0
<operator>.assignment remainder = 0
<operator>.assignment binary1 = (long )*(*(argv + 1) + 0)
<operator>.assignment binary2 = (long )*(*(argv + 2) + 0)
<operator>.postDecrement i --
_1_stringEncoder _1_stringEncoder(0, encodeStrings_litStr0)
printf printf(encodeStrings_litStr0)
_1_stringEncoder _1_stringEncoder(2, encodeStrings_litStr2)
printf printf(encodeStrings_litStr2)
RETURN return (0); return (0);
<operator>.lessThan argc < 3
LITERAL 1 while (1)
<operator>.notEquals remainder != 0
<operator>.greaterEqualsThan i >= 0
LITERAL 0 return (0);
RETURN return (1); return (1);
<operator>.assignment tmp = i
<operator>.postIncrement i ++
<operator>.assignment sum[tmp] = (int )(((binary1 % 10L + binary2 % 10L) + (long )remainder) % 2L)
<operator>.assignment remainder = (int )(((binary1 % 10L + binary2 % 10L) + (long )remainder) / 2L)
<operator>.assignmentDivision binary1 /= 10L
<operator>.assignmentDivision binary2 /= 10L
<operator>.assignment tmp___0 = i
<operator>.postIncrement i ++
<operator>.assignment sum[tmp___0] = remainder
<operator>.assignment tmp___1 = i
<operator>.postDecrement i --
_1_stringEncoder _1_stringEncoder(1, encodeStrings_litStr1)
printf printf(encodeStrings_litStr1, sum[tmp___1])
LITERAL 1 return (1);
<operator>.logicalNot ! (binary1 != 0L)
<operator>.addition *(argv + 1) + 0
<operator>.addition *(argv + 2) + 0
<operator>.cast (int )(((binary1 % 10L + binary2 % 10L) + (long )remainder) % 2L)
<operator>.cast (int )(((binary1 % 10L + binary2 % 10L) + (long )remainder) / 2L)
<operator>.notEquals binary1 != 0L
<operator>.logicalNot ! (binary2 != 0L)
<operator>.modulo ((binary1 % 10L + binary2 % 10L) + (long )remainder) % 2L
<operator>.division ((binary1 % 10L + binary2 % 10L) + (long )remainder) / 2L
<operator>.addition argv + 1
<operator>.addition argv + 2
<operator>.addition (binary1 % 10L + binary2 % 10L) + (long )remainder
<operator>.addition (binary1 % 10L + binary2 % 10L) + (long )remainder
<operator>.notEquals binary2 != 0L
<operator>.addition binary1 % 10L + binary2 % 10L
<operator>.cast (long )remainder
<operator>.addition binary1 % 10L + binary2 % 10L
<operator>.cast (long )remainder
<operator>.modulo binary1 % 10L
<operator>.modulo binary2 % 10L
<operator>.modulo binary1 % 10L
<operator>.modulo binary2 % 10L
<operator>.cast (long )*(*(argv + 1) + 0)
<operator>.cast (long )*(*(argv + 2) + 0)
UNKNOWN long long
<operator>.indirection *(*(argv + 1) + 0)
UNKNOWN long long
<operator>.indirection *(*(argv + 2) + 0)
<operator>.indirectIndexAccess sum[tmp]
<operator>.indirectIndexAccess sum[tmp___0]
<operator>.indirectIndexAccess sum[tmp___1]
<operator>.indirection *(argv + 1)
<operator>.indirection *(argv + 2)
UNKNOWN int int
UNKNOWN int int
UNKNOWN long long
UNKNOWN long long
>>>PDG&77 0->2 0->3 0->4 0->5 0->6 0->7 0->8 0->9 0->10 0->11 0->14 0->15 0->16 0->17 0->18 0->19 0->20 0->21 0->22 0->23 0->24 0->25 0->26 0->27 0->30 0->31 0->32 0->33 0->34 0->35 0->36 0->37 0->38 0->39 0->41 0->42 0->45 0->47 0->48 0->49 0->50 0->51 0->52 0->53 0->55 0->57 0->58 0->59 0->60 0->61 2->6 2->20 3->7 3->49 3->50 4->8 5->1 6->1 6->1 7->1 7->1 7->1 8->1 8->1 8->1 9->1 9->1 10->14 10->26 10->27 10->32 10->33 11->22 11->47 11->48 11->51 11->52 11->55 11->57 12->45 13->53 13->59 14->23 15->16 17->18 19->1 20->1 20->1 20->10 20->11 20->12 20->13 20->14 20->15 20->16 20->17 20->18 20->19 20->22 20->23 20->25 20->40 20->41 20->42 20->45 20->49 20->50 20->62 20->63 20->64 20->65 20->66 20->67 20->71 20->72 22->32 22->33 22->34 22->34 22->69 23->23 23->35 23->35 23->36 23->36 23->37 23->38 23->70 24->19 25->1 27->14 27->26 27->32 27->33 29->22 29->47 29->48 29->51 29->52 29->55 29->57 30->45 31->53 31->59 33->14 36->23 37->38 38->37 39->25 40->26 40->27 40->28 40->29 40->30 40->31 40->40 40->43 40->44 40->45 40->46 40->47 40->48 40->51 40->52 40->53 40->54 40->55 40->56 40->57 40->58 40->59 40->60 40->61 40->68 40->73 40->74 40->75 40->76 45->40 45->40 45->58 46->26 46->27 46->28 46->29 46->30 46->31 46->40 46->43 46->44 46->45 46->47 46->48 46->51 46->52 46->54 46->55 46->56 46->57 46->58 46->59 46->60 46->61 46->68 46->73 46->74 46->75 46->76 47->28 47->28 47->43 47->43 48->29 48->29 48->44 48->44 53->46 53->46 53->59 58->47 58->47 58->51 58->51 58->54 58->54 58->60 59->47 59->47 59->51 59->51 59->54 59->54 59->61 60->30 60->48 60->48 60->52 60->52 60->56 60->56 61->31 61->48 61->48 61->52 61->52 61->56 61->56
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; char * * _global_argv = ( char * * ) 0 ; void encodeStrings_litStr2_i $ nit ( void ) ; extern int unlink ( char const * filename ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern int raise ( int sig ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern double ceil ( double x ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; int main ( int argc , char * * argv , char * * _formal_envp ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; void encodeStrings_litStr0_i $ nit ( void ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; int _global_argc = 0 ; char * * _global_envp = ( char * * ) 0 ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int ( /* missing proto */ printf ) ( ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; void encodeStrings_litStr1_i $ nit ( void ) ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; char encodeStrings_litStr2 [ 2 ] ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; char encodeStrings_litStr1 [ 3 ] ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; char encodeStrings_litStr0 [ 28 ] ; void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { case 2 : str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 1 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 0 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; } } } void megaInit ( void ) { { encodeStrings_litStr2_i $ nit ( ) ; encodeStrings_litStr1_i $ nit ( ) ; encodeStrings_litStr0_i $ nit ( ) ; } } void encodeStrings_litStr0_i $ nit ( void ) { { } } void encodeStrings_litStr1_i $ nit ( void ) { { } } void encodeStrings_litStr2_i $ nit ( void ) { { } } int main ( int argc , char * * argv , char * * _formal_envp ) { long binary1 ; long binary2 ; int i ; int remainder ; int sum [ 20 ] ; int tmp ; int tmp___0 ; int tmp___1 ; int _BARRIER_0 ; { megaInit ( ) ; _global_argc = argc ; _global_argv = argv ; _global_envp = _formal_envp ; _BARRIER_0 = 1 ; if ( argc < 3 ) { return ( 1 ) ; } i = 0 ; remainder = 0 ; binary1 = ( long ) * ( * ( argv + 1 ) + 0 ) ; binary2 = ( long ) * ( * ( argv + 2 ) + 0 ) ; while ( 1 ) { if ( ! ( binary1 != 0L ) ) { if ( ! ( binary2 != 0L ) ) { break ; } } tmp = i ; i ++ ; sum [ tmp ] = ( int ) ( ( ( binary1 % 10L + binary2 % 10L ) + ( long ) remainder ) % 2L ) ; remainder = ( int ) ( ( ( binary1 % 10L + binary2 % 10L ) + ( long ) remainder ) / 2L ) ; binary1 /= 10L ; binary2 /= 10L ; } if ( remainder != 0 ) { tmp___0 = i ; i ++ ; sum [ tmp___0 ] = remainder ; } i -- ; _1_stringEncoder ( 0 , encodeStrings_litStr0 ) ; printf ( encodeStrings_litStr0 ) ; while ( i >= 0 ) { tmp___1 = i ; i -- ; _1_stringEncoder ( 1 , encodeStrings_litStr1 ) ; printf ( encodeStrings_litStr1 , sum [ tmp___1 ] ) ; } _1_stringEncoder ( 2 , encodeStrings_litStr2 ) ; printf ( encodeStrings_litStr2 ) ; return ( 0 ) ; } }
>>>Func
METHOD insertionSort
METHOD_RETURN void
PARAM int *arr
PARAM int size
<operator>.assignment i = 0
RETURN return; return;
<operator>.lessThan i < size
<operator>.assignment j = i - 1
<operator>.assignment key = *(arr + i)
<operator>.assignment index = binarySearch(arr, key, 0, j)
<operator>.assignment *(arr + (j + 1)) = key
<operator>.postIncrement i ++
<operator>.greaterEqualsThan j >= index
<operator>.subtraction i - 1
binarySearch binarySearch(arr, key, 0, j)
<operator>.assignment *(arr + (j + 1)) = *(arr + j)
<operator>.postDecrement j --
<operator>.addition arr + i
<operator>.addition arr + (j + 1)
<operator>.addition j + 1
<operator>.addition arr + (j + 1)
<operator>.addition arr + j
<operator>.addition j + 1
<operator>.indirection *(arr + i)
<operator>.indirection *(arr + (j + 1))
<operator>.indirection *(arr + (j + 1))
<operator>.indirection *(arr + j)
>>>PDG&27 0->2 0->3 0->4 0->5 0->6 0->10 0->11 0->12 0->13 0->14 0->16 0->17 0->18 0->19 0->20 0->21 0->22 2->1 2->14 2->17 3->6 4->1 4->6 5->1 6->1 6->1 6->1 6->6 6->7 6->8 6->9 6->10 6->11 6->12 6->13 6->13 6->14 6->17 6->18 6->19 6->23 6->24 7->1 7->1 7->14 8->1 8->1 8->14 9->1 9->1 9->12 10->1 10->1 10->1 11->1 11->6 12->1 12->1 12->12 12->15 12->16 12->16 12->18 12->19 12->20 12->20 12->21 12->21 12->22 12->22 12->25 12->26 13->7 13->7 13->11 13->17 14->9 14->9 14->9 14->9 14->10 14->12 14->17 14->18 14->20 14->21 15->1 15->1 16->1 16->12 18->1 18->1 19->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; void main ( void ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int printf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern int scanf ( char const * format , ... ) ; extern int ( /* missing proto */ binarySearch ) ( ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern float strtof ( char const * str , char const * endptr ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; void insertionSort ( int * arr , int size ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; void megaInit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { } } } void main ( void ) { { megaInit ( ) ; } } void insertionSort ( int * arr , int size ) { int i ; int j ; int key ; int index ; { i = 0 ; while ( i < size ) { j = i - 1 ; key = * ( arr + i ) ; index = binarySearch ( arr , key , 0 , j ) ; while ( j >= index ) { * ( arr + ( j + 1 ) ) = * ( arr + j ) ; j -- ; } * ( arr + ( j + 1 ) ) = key ; i ++ ; } return ; } }
>>>Func
METHOD countSubstrings
METHOD_RETURN int
PARAM char *s
<operator>.assignment tmp = strlen(s)
<operator>.assignment len = tmp
<operator>.assignment count = 0
<operator>.assignment i = 0
RETURN return (count); return (count);
<operator>.lessThan i < len
IDENTIFIER count return (count);
strlen strlen(s)
<operator>.assignment tmp___0 = countPalin(s, i, i, len)
<operator>.assignmentPlus count += tmp___0
<operator>.postIncrement i ++
<operator>.notEquals i != len - 1
countPalin countPalin(s, i, i, len)
<operator>.assignment tmp___1 = countPalin(s, i, i + 1, len)
<operator>.assignmentPlus count += tmp___1
<operator>.subtraction len - 1
countPalin countPalin(s, i, i + 1, len)
<operator>.addition i + 1
>>>PDG&21 0->2 0->4 0->5 0->6 0->8 0->9 0->10 0->12 0->13 0->14 0->15 0->17 0->18 0->19 0->20 2->10 3->1 3->1 3->4 4->1 4->1 4->8 5->1 5->1 5->9 5->12 6->1 6->8 7->1 8->1 8->1 8->1 8->8 8->11 8->12 8->13 8->14 8->15 8->15 8->15 8->18 9->7 10->1 10->3 10->15 11->1 11->1 11->12 12->1 12->1 12->1 12->9 12->17 13->1 13->8 14->1 14->1 14->13 14->16 14->17 14->19 14->19 14->20 14->20 15->1 15->11 15->11 15->11 15->14 15->18 15->19 16->1 16->1 16->17 17->1 17->1 17->1 17->9 17->12 18->8 18->14 18->14 18->19 19->1 19->1 19->8 19->13 19->15 19->16 19->16 19->16 19->16
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern int ( /* missing proto */ strlen ) ( ) ; void main ( void ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int printf ( char const * format , ... ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern int ( /* missing proto */ countPalin ) ( ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; int countSubstrings ( char * s ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; void megaInit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { } } } void main ( void ) { { megaInit ( ) ; } } int countSubstrings ( char * s ) { int len ; int tmp ; int i ; int count ; int tmp___0 ; int tmp___1 ; { tmp = strlen ( s ) ; len = tmp ; count = 0 ; i = 0 ; while ( i < len ) { tmp___0 = countPalin ( s , i , i , len ) ; count += tmp___0 ; if ( i != len - 1 ) { tmp___1 = countPalin ( s , i , i + 1 , len ) ; count += tmp___1 ; } i ++ ; } return ( count ) ; } }
>>>Func
METHOD peakIndexInMountainArray
METHOD_RETURN int
PARAM int *A
PARAM int ASize
<operator>.assignment low = 1
<operator>.assignment high = ASize
RETURN return (-1); return (-1);
<operator>.lessEqualsThan low <= high
<operator>.minus -1
<operator>.assignment mid = low + (high - low) / 2
<operator>.lessThan *(A + (mid - 1)) < *(A + mid)
<operator>.addition low + (high - low) / 2
<operator>.division (high - low) / 2
<operator>.greaterThan *(A + mid) > *(A + (mid + 1))
<operator>.subtraction high - low
<operator>.addition A + (mid - 1)
<operator>.addition A + mid
RETURN return (mid); return (mid);
<operator>.lessThan *(A + (mid - 1)) < *(A + mid)
<operator>.subtraction mid - 1
IDENTIFIER mid return (mid);
<operator>.addition A + mid
<operator>.addition A + (mid + 1)
<operator>.lessThan *(A + mid) < *(A + (mid + 1))
<operator>.assignment high = mid - 1
<operator>.addition mid + 1
<operator>.addition A + (mid - 1)
<operator>.addition A + mid
<operator>.assignment low = mid + 1
<operator>.subtraction mid - 1
<operator>.assignment high = mid - 1
<operator>.subtraction mid - 1
<operator>.addition A + mid
<operator>.addition A + (mid + 1)
<operator>.addition mid + 1
<operator>.addition mid + 1
<operator>.subtraction mid - 1
<operator>.indirection *(A + (mid - 1))
<operator>.indirection *(A + mid)
<operator>.indirection *(A + mid)
<operator>.indirection *(A + (mid + 1))
<operator>.indirection *(A + (mid - 1))
<operator>.indirection *(A + mid)
<operator>.indirection *(A + mid)
<operator>.indirection *(A + (mid + 1))
>>>PDG&45 0->2 0->3 0->4 0->5 0->7 0->8 0->9 0->11 0->12 0->14 0->15 0->16 0->19 0->20 0->21 0->22 0->25 0->26 0->27 0->28 0->29 0->31 0->32 0->33 0->34 0->35 0->36 2->15 3->5 4->1 4->7 5->1 5->1 5->7 6->1 7->1 7->6 7->8 7->9 7->10 7->11 7->12 7->14 7->14 7->14 7->15 7->16 7->19 7->37 7->38 8->6 9->1 9->1 9->19 10->1 10->1 10->7 10->13 10->18 10->21 10->22 10->25 10->26 10->27 10->29 10->39 10->40 10->41 10->42 11->1 11->1 12->1 12->9 12->9 12->11 12->11 13->1 13->1 13->1 13->7 13->17 13->18 13->26 13->27 13->29 13->41 13->42 14->1 14->7 14->7 14->9 14->11 14->12 14->12 15->1 17->1 18->23 18->24 18->31 18->32 18->33 18->35 18->43 18->44 19->15 19->15 19->16 19->20 19->21 19->22 19->25 19->29 20->17 22->1 22->1 23->1 23->28 23->30 23->34 23->36 24->1 24->7 25->1 28->1 28->7 29->26 29->26 29->27 29->28 29->31 29->32 29->33 29->34 29->35 29->36 30->1 30->7 31->24 31->24 36->30 36->30
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; void main ( void ) ; int peakIndexInMountainArray ( int * A , int ASize ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int printf ( char const * format , ... ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; int peakIndexInMountainArray ( int * A , int ASize ) { int low ; int high ; int mid ; { low = 1 ; high = ASize ; while ( low <= high ) { mid = low + ( high - low ) / 2 ; if ( * ( A + ( mid - 1 ) ) < * ( A + mid ) ) { if ( * ( A + mid ) > * ( A + ( mid + 1 ) ) ) { return ( mid ) ; } else { goto _L ; } } else _L : /* CIL Label */ if ( * ( A + ( mid - 1 ) ) < * ( A + mid ) ) { if ( * ( A + mid ) < * ( A + ( mid + 1 ) ) ) { low = mid + 1 ; } else { high = mid - 1 ; } } else { high = mid - 1 ; } } return ( -1 ) ; } } void megaInit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { } } } void main ( void ) { { megaInit ( ) ; } }
>>>Func
METHOD min
METHOD_RETURN int
PARAM int a
PARAM int b
RETURN return (tmp); return (tmp);
<operator>.lessThan a < b
IDENTIFIER tmp return (tmp);
<operator>.assignment tmp = a
<operator>.assignment tmp = b
>>>PDG&9 0->2 0->3 0->5 0->6 0->7 0->8 2->5 3->5 4->1 5->1 5->1 5->1 5->7 5->7 5->8 5->8 6->4 7->1 7->1 7->1 7->6 8->1 8->1 8->1 8->6
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; int min ( int a , int b ) ; extern unsigned long strlen ( char const * s ) ; void main ( void ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int printf ( char const * format , ... ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; int min ( int a , int b ) { int tmp ; { if ( a < b ) { tmp = a ; } else { tmp = b ; } return ( tmp ) ; } } void megaInit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { } } } void main ( void ) { { megaInit ( ) ; } }
>>>Func
METHOD main
METHOD_RETURN int
PARAM int _formal_argc
PARAM char **_formal_argv
PARAM char **_formal_envp
megaInit megaInit()
<operator>.assignment _global_argc = _formal_argc
<operator>.assignment _global_argv = _formal_argv
<operator>.assignment _global_envp = _formal_envp
<operator>.assignment _BARRIER_0 = 1
test test()
RETURN return (0); return (0);
LITERAL 0 return (0);
>>>PDG&13 0->2 0->3 0->4 0->5 0->6 0->7 0->8 0->9 0->10 0->11 0->12 2->6 3->7 4->8 5->1 6->1 6->1 6->1 7->1 7->1 7->1 8->1 8->1 8->1 9->1 9->1 10->1 11->1 12->11
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fclose ( void * stream ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; char * * _global_argv = ( char * * ) 0 ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; int main ( int _formal_argc , char * * _formal_argv , char * * _formal_envp ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; int _global_argc = 0 ; char * * _global_envp = ( char * * ) 0 ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int printf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern int scanf ( char const * format , ... ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int ( /* missing proto */ test ) ( ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { } } } void megaInit ( void ) { { } } int main ( int _formal_argc , char * * _formal_argv , char * * _formal_envp ) { int _BARRIER_0 ; { megaInit ( ) ; _global_argc = _formal_argc ; _global_argv = _formal_argv ; _global_envp = _formal_envp ; _BARRIER_0 = 1 ; test ( ) ; return ( 0 ) ; } }
>>>Func
METHOD _1_stringEncoder
METHOD_RETURN void
PARAM int n
PARAM char str[]
BLOCK <empty> <empty>
<operator>.assignment encodeStrings_i3 = 0
IDENTIFIER n switch(n)
LITERAL 1 <empty>
<operator>.assignment str[encodeStrings_i3] = '\n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 0 <empty>
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
>>>PDG&21 0->2 0->3 0->4 0->5 0->6 0->7 0->8 0->9 0->10 0->11 0->12 0->13 0->14 0->15 0->16 0->17 0->18 0->19 0->20 2->1 3->1 5->1 5->1 5->9 5->14 8->1 9->11 10->1 10->1 11->1 11->1 13->1 14->16 15->1 16->18 17->1 18->20 19->1 19->1 20->1 20->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int unlink ( char const * filename ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; void main ( void ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void encodeStrings_litStr0_i $ nit ( void ) ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int ( /* missing proto */ printf ) ( ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; void encodeStrings_litStr1_i $ nit ( void ) ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; void display ( int * arr , int n ) ; extern double sqrt ( double x ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; char encodeStrings_litStr1 [ 2 ] ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; char encodeStrings_litStr0 [ 4 ] ; void encodeStrings_litStr0_i $ nit ( void ) { { } } void main ( void ) { { megaInit ( ) ; } } void megaInit ( void ) { { encodeStrings_litStr1_i $ nit ( ) ; encodeStrings_litStr0_i $ nit ( ) ; } } void encodeStrings_litStr1_i $ nit ( void ) { { } } void display ( int * arr , int n ) { int i ; { i = 0 ; while ( i < n ) { _1_stringEncoder ( 0 , encodeStrings_litStr0 ) ; printf ( encodeStrings_litStr0 , * ( arr + i ) ) ; i ++ ; } _1_stringEncoder ( 1 , encodeStrings_litStr1 ) ; printf ( encodeStrings_litStr1 ) ; return ; } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { case 1 : str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 0 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; } } }
>>>Func
METHOD majorityElement
METHOD_RETURN int
PARAM int *nums
PARAM int numsSize
<operator>.assignment count = 1
<operator>.assignment majorNum = *(nums + 0)
<operator>.assignment i = 1
RETURN return (majorNum); return (majorNum);
<operator>.lessThan i < numsSize
IDENTIFIER majorNum return (majorNum);
<operator>.postIncrement i ++
<operator>.addition nums + 0
<operator>.equals count == 0
<operator>.assignment majorNum = *(nums + i)
<operator>.postIncrement count ++
<operator>.equals majorNum == *(nums + i)
<operator>.addition nums + i
<operator>.postIncrement count ++
<operator>.postDecrement count --
<operator>.addition nums + i
<operator>.indirection *(nums + i)
<operator>.indirection *(nums + i)
>>>PDG&22 0->2 0->3 0->4 0->6 0->8 0->9 0->10 0->11 0->12 0->14 0->15 0->16 0->17 0->18 0->19 2->11 2->16 2->19 3->8 4->1 4->1 4->12 5->1 5->1 5->1 5->9 5->15 6->1 6->8 7->1 8->1 8->1 8->1 8->8 8->10 8->10 8->12 8->16 8->19 9->7 10->1 10->8 11->1 12->1 12->13 12->14 12->14 12->15 12->16 12->17 12->18 12->19 12->20 12->21 13->1 13->1 13->1 13->9 13->15 14->1 14->1 14->12 15->1 15->1 15->1 15->9 15->17 15->18 16->1 17->1 17->1 17->12 18->1 18->1 18->12 19->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; int majorityElement ( int * nums , int numsSize ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; void main ( void ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int printf ( char const * format , ... ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { } } } void megaInit ( void ) { { } } int majorityElement ( int * nums , int numsSize ) { int count ; int majorNum ; int i ; { count = 1 ; majorNum = * ( nums + 0 ) ; i = 1 ; while ( i < numsSize ) { if ( count == 0 ) { majorNum = * ( nums + i ) ; count ++ ; } else if ( majorNum == * ( nums + i ) ) { count ++ ; } else { count -- ; } i ++ ; } return ( majorNum ) ; } } void main ( void ) { { megaInit ( ) ; } }
>>>Func
METHOD btrace
METHOD_RETURN void
PARAM void
<operator>.assignment n = backtrace(buf, 4096)
backtrace_symbols_fd backtrace_symbols_fd(buf, n, 1)
RETURN return; return;
backtrace backtrace(buf, 4096)
>>>PDG&7 0->2 0->4 0->5 0->6 2->1 3->1 3->1 3->4 4->1 4->1 4->1 5->1 6->3 6->3 6->4
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int ( /* missing proto */ backtrace_symbols_fd ) ( ) ; extern int fclose ( void * stream ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int close ( int filedes ) ; extern int ( /* missing proto */ backtrace ) ( ) ; void btrace ( void ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; void main ( void ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int printf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern int scanf ( char const * format , ... ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { } } } void main ( void ) { { megaInit ( ) ; } } void megaInit ( void ) { { } } void btrace ( void ) { int n ; void * buf [ 4096 ] ; { n = backtrace ( buf , 4096 ) ; backtrace_symbols_fd ( buf , n , 1 ) ; return ; } }
>>>Func
METHOD next_step
METHOD_RETURN int
PARAM int x
PARAM int base
<operator>.assignment r = 0
RETURN return (r); return (r);
<operator>.greaterThan x > 0
IDENTIFIER r return (r);
<operator>.assignment d = x % base
<operator>.assignmentDivision x /= base
<operator>.assignmentPlus r += d * d
<operator>.modulo x % base
<operator>.multiplication d * d
>>>PDG&13 0->2 0->3 0->4 0->6 0->7 0->9 0->10 0->11 0->12 2->6 3->1 3->11 4->1 4->1 4->7 4->10 5->1 6->1 6->1 6->6 6->8 6->9 6->10 6->11 6->11 6->12 7->5 8->1 8->1 8->12 9->1 9->1 9->6 10->1 10->1 10->1 10->7 11->8 11->8 11->9 11->9 12->1 12->10
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; void main ( void ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int printf ( char const * format , ... ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; int next_step ( int x , int base ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; int next_step ( int x , int base ) { int r ; int d ; { r = 0 ; while ( x > 0 ) { d = x % base ; x /= base ; r += d * d ; } return ( r ) ; } } void megaInit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { } } } void main ( void ) { { megaInit ( ) ; } }
>>>Func
METHOD _1_stringEncoder
METHOD_RETURN void
PARAM int n
PARAM char str[]
BLOCK <empty> <empty>
<operator>.assignment encodeStrings_i3 = 0
IDENTIFIER n switch(n)
LITERAL 3 <empty>
<operator>.assignment str[encodeStrings_i3] = 'i'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'f'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '-'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '2'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '-'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'l'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'o'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 2 <empty>
<operator>.assignment str[encodeStrings_i3] = 'i'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'f'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '-'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '2'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '-'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'w'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'i'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 1 <empty>
<operator>.assignment str[encodeStrings_i3] = 'i'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'f'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '-'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '1'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '-'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'l'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'o'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 0 <empty>
<operator>.assignment str[encodeStrings_i3] = 'i'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'f'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '-'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '1'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '-'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'w'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'i'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
>>>PDG&95 0->2 0->3 0->4 0->5 0->6 0->7 0->8 0->9 0->10 0->11 0->12 0->13 0->14 0->15 0->16 0->17 0->18 0->19 0->20 0->21 0->22 0->23 0->24 0->25 0->26 0->27 0->28 0->29 0->30 0->31 0->32 0->33 0->34 0->35 0->36 0->37 0->38 0->39 0->40 0->41 0->42 0->43 0->44 0->45 0->46 0->47 0->48 0->49 0->50 0->51 0->52 0->53 0->54 0->55 0->56 0->57 0->58 0->59 0->60 0->61 0->62 0->63 0->64 0->65 0->66 0->67 0->68 0->69 0->70 0->71 0->72 0->73 0->74 0->75 0->76 0->77 0->78 0->79 0->80 0->81 0->82 0->83 0->84 0->85 0->86 0->87 0->88 0->89 0->90 0->91 0->92 0->93 0->94 2->1 3->1 5->1 5->1 5->9 5->32 5->53 5->76 8->1 9->11 10->1 11->13 13->15 14->1 15->17 16->1 17->19 18->1 19->21 20->1 21->23 22->1 23->25 24->1 25->27 26->1 27->29 28->1 28->1 29->1 29->1 32->34 33->1 34->36 36->38 37->1 38->40 39->1 40->42 41->1 42->44 43->1 44->46 45->1 46->48 47->1 48->50 49->1 49->1 50->1 50->1 52->1 53->55 54->1 55->57 57->59 58->1 59->61 60->1 61->63 62->1 63->65 64->1 65->67 66->1 67->69 68->1 69->71 70->1 71->73 72->1 72->1 73->1 73->1 76->78 77->1 78->80 80->82 81->1 82->84 83->1 84->86 85->1 86->88 87->1 88->90 89->1 90->92 91->1 92->94 93->1 93->1 94->1 94->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern void exit ( int status ) ; extern int pthread_cond_signal ( int * cond ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; char * * _global_argv = ( char * * ) 0 ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; void encodeStrings_litStr2_i $ nit ( void ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int pthread_mutex_lock ( int * mutex ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; int main ( int argc , char * * argv , char * * _formal_envp ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; void encodeStrings_litStr0_i $ nit ( void ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; int _global_argc = 0 ; void megaInit ( void ) ; char * * _global_envp = ( char * * ) 0 ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; void encodeStrings_litStr3_i $ nit ( void ) ; extern int ( /* missing proto */ printf ) ( ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; void encodeStrings_litStr1_i $ nit ( void ) ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; char encodeStrings_litStr3 [ 11 ] ; char encodeStrings_litStr2 [ 10 ] ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; char encodeStrings_litStr1 [ 11 ] ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; char encodeStrings_litStr0 [ 10 ] ; void encodeStrings_litStr0_i $ nit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { case 3 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 2 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 1 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 0 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; } } } void encodeStrings_litStr1_i $ nit ( void ) { { } } void megaInit ( void ) { { encodeStrings_litStr3_i $ nit ( ) ; encodeStrings_litStr2_i $ nit ( ) ; encodeStrings_litStr1_i $ nit ( ) ; encodeStrings_litStr0_i $ nit ( ) ; } } void encodeStrings_litStr3_i $ nit ( void ) { { } } void encodeStrings_litStr2_i $ nit ( void ) { { } } int main ( int argc , char * * argv , char * * _formal_envp ) { unsigned char c ; int _BARRIER_0 ; { megaInit ( ) ; _global_argc = argc ; _global_argv = argv ; _global_envp = _formal_envp ; _BARRIER_0 = 1 ; c = ( unsigned char ) * ( * ( argv + 1 ) + 0 ) ; if ( ( int ) c == 127 ) { _1_stringEncoder ( 0 , encodeStrings_litStr0 ) ; printf ( encodeStrings_litStr0 ) ; } else { _1_stringEncoder ( 1 , encodeStrings_litStr1 ) ; printf ( encodeStrings_litStr1 ) ; } if ( ( int ) c == 63 ) { _1_stringEncoder ( 2 , encodeStrings_litStr2 ) ; printf ( encodeStrings_litStr2 ) ; } else { _1_stringEncoder ( 3 , encodeStrings_litStr3 ) ; printf ( encodeStrings_litStr3 ) ; } return ( 0 ) ; } }
>>>Func
METHOD pointer_equal
METHOD_RETURN int
PARAM void *location1
PARAM void *location2
RETURN return ((unsigned long )location1 == (unsigned long )location2); return ((unsigned long )location1 == (unsigned long )location2);
<operator>.equals (unsigned long )location1 == (unsigned long )location2
<operator>.cast (unsigned long )location1
<operator>.cast (unsigned long )location2
>>>PDG&8 0->2 0->3 0->5 0->6 0->7 2->5 2->6 3->5 3->7 4->1 5->1 5->1 5->1 5->4 6->1 7->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; void main ( void ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int printf ( char const * format , ... ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; int pointer_equal ( void * location1 , void * location2 ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; int pointer_equal ( void * location1 , void * location2 ) { { return ( ( unsigned long ) location1 == ( unsigned long ) location2 ) ; } } void megaInit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { } } } void main ( void ) { { megaInit ( ) ; } }
>>>Func
METHOD _1_stringEncoder
METHOD_RETURN void
PARAM int n
PARAM char str[]
BLOCK <empty> <empty>
<operator>.assignment encodeStrings_i3 = 0
IDENTIFIER n switch(n)
LITERAL 2 <empty>
<operator>.assignment str[encodeStrings_i3] = 'p'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 1 <empty>
<operator>.assignment str[encodeStrings_i3] = '('
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '.'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '2'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'g'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '.'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '2'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'g'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment,str[encodeStrings_i3] = ')'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '.'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '.'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '.'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '.'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 0 <empty>
<operator>.assignment str[encodeStrings_i3] = 'T'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '.'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '.'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '.'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '.'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
>>>PDG&88 0->2 0->3 0->4 0->5 0->6 0->7 0->8 0->9 0->10 0->11 0->12 0->13 0->14 0->15 0->16 0->17 0->18 0->19 0->20 0->21 0->22 0->23 0->24 0->25 0->26 0->27 0->28 0->29 0->30 0->31 0->32 0->33 0->34 0->35 0->36 0->37 0->38 0->39 0->40 0->41 0->42 0->43 0->44 0->45 0->46 0->47 0->48 0->49 0->50 0->51 0->52 0->53 0->54 0->55 0->56 0->57 0->58 0->59 0->60 0->61 0->62 0->63 0->64 0->65 0->66 0->67 0->68 0->69 0->70 0->71 0->72 0->73 0->74 0->75 0->76 0->77 0->78 0->79 0->80 0->81 0->82 0->83 0->84 0->85 0->86 0->87 2->1 3->1 5->1 5->1 5->9 5->26 5->63 8->1 9->11 10->1 11->13 13->15 14->1 15->17 16->1 17->19 18->1 19->21 20->1 21->23 22->1 22->1 23->1 23->1 25->1 26->28 28->30 30->32 32->34 34->36 35->1 36->38 38->40 39->1 40->42 42->44 43->1 44->46 45->1 46->48 47->1 48->50 50->52 52->54 54->56 55->1 56->58 57->1 58->60 59->1 59->1 60->1 60->1 62->1 63->65 64->1 65->67 66->1 67->69 68->1 69->71 71->73 72->1 73->75 74->1 75->77 77->79 79->81 81->83 82->1 83->85 84->1 85->87 86->1 86->1 87->1 87->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int ( /* missing proto */ get_rand ) ( ) ; extern void exit ( int status ) ; extern int pthread_cond_signal ( int * cond ) ; extern int ( /* missing proto */ hypot ) ( ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; void encodeStrings_litStr2_i $ nit ( void ) ; extern int unlink ( char const * filename ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int ( /* missing proto */ assert ) ( ) ; extern int pthread_mutex_lock ( int * mutex ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern int raise ( int sig ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int getpagesize ( ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern int ( /* missing proto */ to_polar ) ( ) ; extern unsigned long strlen ( char const * s ) ; void main ( void ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; void encodeStrings_litStr0_i $ nit ( void ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int ( /* missing proto */ printf ) ( ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern float strtof ( char const * str , char const * endptr ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern double strtod ( char const * str , char const * endptr ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; void test ( void ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern int ( /* missing proto */ fabs ) ( ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; void encodeStrings_litStr1_i $ nit ( void ) ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int ( /* missing proto */ atan2 ) ( ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern int ( /* missing proto */ srand ) ( ) ; char encodeStrings_litStr2 [ 8 ] ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; char encodeStrings_litStr1 [ 18 ] ; char encodeStrings_litStr0 [ 13 ] ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; void main ( void ) { { megaInit ( ) ; } } void encodeStrings_litStr1_i $ nit ( void ) { { } } void encodeStrings_litStr0_i $ nit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { case 2 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 1 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 0 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; } } } void test ( void ) { int NUM_TESTS ; int i ; double r ; double theta ; double x ; int tmp ; double y ; int tmp___0 ; int tmp___1 ; int tmp___2 ; int tmp___3 ; int tmp___4 ; { srand ( 10 ) ; NUM_TESTS = 5 ; i = 0 ; while ( i < NUM_TESTS ) { _1_stringEncoder ( 0 , encodeStrings_litStr0 ) ; printf ( encodeStrings_litStr0 , i ) ; tmp = get_rand ( -5 , 5 ) ; x = ( double ) tmp ; tmp___0 = get_rand ( -5 , 5 ) ; y = ( double ) tmp___0 ; _1_stringEncoder ( 1 , encodeStrings_litStr1 ) ; printf ( encodeStrings_litStr1 , x , y ) ; to_polar ( x , y , & r , & theta ) ; tmp___1 = hypot ( x , y ) ; tmp___2 = fabs ( r - ( double ) tmp___1 ) ; assert ( ( double ) tmp___2 < 0.01 ) ; tmp___3 = atan2 ( y , x ) ; tmp___4 = fabs ( theta - ( double ) tmp___3 ) ; assert ( ( double ) tmp___4 < 0.01 ) ; _1_stringEncoder ( 2 , encodeStrings_litStr2 ) ; printf ( encodeStrings_litStr2 ) ; i ++ ; } return ; } } void encodeStrings_litStr2_i $ nit ( void ) { { } } void megaInit ( void ) { { encodeStrings_litStr2_i $ nit ( ) ; encodeStrings_litStr1_i $ nit ( ) ; encodeStrings_litStr0_i $ nit ( ) ; } }
>>>Func
METHOD decimal_to_binary
METHOD_RETURN int
PARAM unsigned int number
RETURN return ((int )tmp___0); return ((int )tmp___0);
<operator>.equals number == 0U
<operator>.cast (int )tmp___0
<operator>.assignment tmp___0 = 0U
<operator>.assignment tmp = decimal_to_binary(number / 2U)
<operator>.assignment tmp___0 = number % 2U + (unsigned int )(10 * tmp)
decimal_to_binary decimal_to_binary(number / 2U)
<operator>.addition number % 2U + (unsigned int )(10 * tmp)
<operator>.division number / 2U
<operator>.modulo number % 2U
<operator>.cast (unsigned int )(10 * tmp)
<operator>.multiplication 10 * tmp
UNKNOWN unsigned int unsigned int
>>>PDG&16 0->2 0->4 0->5 0->6 0->11 0->12 0->14 2->4 3->1 4->1 4->1 4->6 4->7 4->8 4->9 4->10 4->11 4->11 4->12 4->13 4->14 4->15 5->1 5->1 5->3 6->1 6->5 7->1 7->1 7->14 8->1 8->1 8->5 9->1 9->7 10->1 10->1 11->9 11->9 11->12 12->1 12->8 12->8 12->10 12->10 13->1 14->1 14->8 14->8 14->10 14->10 14->13 14->13
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; int decimal_to_binary ( unsigned int number ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; void main ( void ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int printf ( char const * format , ... ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; int decimal_to_binary ( unsigned int number ) { int tmp ; unsigned int tmp___0 ; { if ( number == 0U ) { tmp___0 = 0U ; } else { tmp = decimal_to_binary ( number / 2U ) ; tmp___0 = number % 2U + ( unsigned int ) ( 10 * tmp ) ; } return ( ( int ) tmp___0 ) ; } } void megaInit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { } } } void main ( void ) { { megaInit ( ) ; } }
>>>Func
METHOD numcmp
METHOD_RETURN int
PARAM void const   *a
PARAM void const   *b
RETURN return (*((int *)a) - *((int *)b)); return (*((int *)a) - *((int *)b));
<operator>.subtraction *((int *)a) - *((int *)b)
<operator>.cast (int *)a
<operator>.cast (int *)b
>>>PDG&8 0->2 0->3 0->6 0->7 2->6 3->7 4->1 5->1 5->1 5->1 5->4 6->1 7->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; void main ( void ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int printf ( char const * format , ... ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; int numcmp ( void const * a , void const * b ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { } } } void megaInit ( void ) { { } } int numcmp ( void const * a , void const * b ) { { return ( * ( ( int * ) a ) - * ( ( int * ) b ) ) ; } } void main ( void ) { { megaInit ( ) ; } }
>>>Func
METHOD maxNumberOfBalloons
METHOD_RETURN int
PARAM char *text
<operator>.assignment count_letters[0] = 0
<operator>.assignment tmp = 1U
<operator>.assignment ptr = text
<operator>.assignmentDivision count_letters[2] /= 2
<operator>.assignmentDivision count_letters[3] /= 2
<operator>.assignment min_counter_ballons = count_letters[0]
<operator>.assignment i = 1
RETURN return (min_counter_ballons); return (min_counter_ballons);
<operator>.logicalNot ! (tmp >= 5U)
<operator>.lessThan i < 5
IDENTIFIER min_counter_ballons return (min_counter_ballons);
<operator>.assignment count_letters[tmp] = 0
<operator>.postIncrement tmp ++
<operator>.postIncrement ptr ++
<operator>.postIncrement i ++
<operator>.greaterEqualsThan tmp >= 5U
<operator>.equals (int )*ptr == 98
<operator>.lessThan count_letters[i] < min_counter_ballons
<operator>.postIncrement (count_letters[0]) ++
<operator>.assignment min_counter_ballons = count_letters[i]
<operator>.cast (int )*ptr
<operator>.equals (int )*ptr == 97
<operator>.postIncrement (count_letters[1]) ++
<operator>.cast (int )*ptr
<operator>.equals (int )*ptr == 108
<operator>.postIncrement (count_letters[2]) ++
<operator>.cast (int )*ptr
<operator>.equals (int )*ptr == 111
<operator>.postIncrement (count_letters[3]) ++
<operator>.cast (int )*ptr
<operator>.equals (int )*ptr == 110
<operator>.postIncrement (count_letters[4]) ++
<operator>.cast (int )*ptr
<operator>.indirection *ptr
<operator>.indirectIndexAccess count_letters[tmp]
<operator>.indirectIndexAccess count_letters[i]
UNKNOWN int int
<operator>.indirection *ptr
<operator>.indirectIndexAccess count_letters[0]
<operator>.indirectIndexAccess count_letters[i]
UNKNOWN int int
<operator>.indirection *ptr
<operator>.indirectIndexAccess count_letters[1]
UNKNOWN int int
<operator>.indirection *ptr
<operator>.indirectIndexAccess count_letters[2]
UNKNOWN int int
<operator>.indirection *ptr
<operator>.indirectIndexAccess count_letters[3]
UNKNOWN int int
<operator>.indirection *ptr
<operator>.indirectIndexAccess count_letters[4]
>>>PDG&55 0->2 0->3 0->4 0->5 0->6 0->7 0->9 0->12 0->13 0->14 0->15 0->16 0->17 0->18 0->19 0->20 0->24 0->27 0->30 0->33 2->5 3->1 3->8 3->21 4->1 4->18 5->1 5->1 5->1 5->16 6->1 6->1 7->1 7->1 8->1 8->1 8->1 8->13 8->20 9->1 9->12 10->1 11->1 11->1 11->11 11->14 11->15 11->18 11->37 12->1 12->1 12->12 12->17 12->17 12->20 12->38 13->10 14->1 14->1 15->1 15->18 16->1 16->1 17->1 17->12 18->1 18->11 18->11 18->15 19->1 19->1 19->21 19->24 19->26 19->41 19->43 19->44 20->1 20->1 20->1 20->13 20->22 20->22 20->42 21->1 21->8 22->1 22->1 22->1 22->13 22->20 23->1 24->1 24->1 24->25 24->27 24->29 24->45 24->46 24->47 25->1 25->1 26->1 27->1 27->1 27->28 27->30 27->32 27->48 27->49 27->50 28->1 28->6 29->1 30->1 30->1 30->31 30->33 30->35 30->51 30->52 30->53 31->1 31->7 32->1 33->1 33->1 33->34 33->54 34->1 34->1 35->1 36->16 36->19 36->23 36->36 36->39 36->40
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; int maxNumberOfBalloons ( char * text ) ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; void main ( void ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int printf ( char const * format , ... ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; int maxNumberOfBalloons ( char * text ) { int count_letters [ 5 ] ; unsigned int tmp ; int i ; int min_counter_ballons ; char * ptr ; { count_letters [ 0 ] = 0 ; tmp = 1U ; while ( ! ( tmp >= 5U ) ) { count_letters [ tmp ] = 0 ; tmp ++ ; } ptr = text ; while ( * ptr ) { if ( ( int ) * ptr == 98 ) { ( count_letters [ 0 ] ) ++ ; } else if ( ( int ) * ptr == 97 ) { ( count_letters [ 1 ] ) ++ ; } else if ( ( int ) * ptr == 108 ) { ( count_letters [ 2 ] ) ++ ; } else if ( ( int ) * ptr == 111 ) { ( count_letters [ 3 ] ) ++ ; } else if ( ( int ) * ptr == 110 ) { ( count_letters [ 4 ] ) ++ ; } ptr ++ ; } count_letters [ 2 ] /= 2 ; count_letters [ 3 ] /= 2 ; min_counter_ballons = count_letters [ 0 ] ; i = 1 ; while ( i < 5 ) { if ( count_letters [ i ] < min_counter_ballons ) { min_counter_ballons = count_letters [ i ] ; } i ++ ; } return ( min_counter_ballons ) ; } } void megaInit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { } } } void main ( void ) { { megaInit ( ) ; } }
>>>Func
METHOD firstBadVersion
METHOD_RETURN int
PARAM int n
<operator>.assignment low = 1
<operator>.assignment high = n
RETURN return (low); return (low);
<operator>.lessEqualsThan low <= high
IDENTIFIER low return (low);
<operator>.assignment mid = low + (high - low) / 2
<operator>.assignment tmp = isBadVersion(mid)
IDENTIFIER tmp if (tmp)
<operator>.addition low + (high - low) / 2
isBadVersion isBadVersion(mid)
<operator>.assignment high = mid - 1
<operator>.division (high - low) / 2
<operator>.assignment low = mid + 1
<operator>.subtraction high - low
<operator>.subtraction mid - 1
<operator>.addition mid + 1
>>>PDG&19 0->2 0->3 0->4 0->6 0->7 0->8 0->10 0->11 0->12 0->14 0->15 0->16 0->17 0->18 2->4 3->1 3->6 4->1 4->1 4->6 5->1 6->1 6->1 6->1 6->6 6->7 6->8 6->9 6->11 6->12 6->13 6->14 6->15 6->16 6->16 6->16 6->17 6->18 7->5 8->1 8->1 8->12 9->1 9->1 9->1 11->1 12->9 12->15 12->17 12->18 13->1 13->1 13->6 14->1 14->8 14->8 14->11 14->11 15->1 15->1 15->6 16->6 16->6 16->8 16->11 16->14 16->14 17->1 17->13 17->13 18->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int ( /* missing proto */ isBadVersion ) ( ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; void main ( void ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int printf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern int scanf ( char const * format , ... ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern float strtof ( char const * str , char const * endptr ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; int firstBadVersion ( int n ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; void megaInit ( void ) { { } } int firstBadVersion ( int n ) { int low ; int high ; int mid ; int tmp ; { low = 1 ; high = n ; while ( low <= high ) { mid = low + ( high - low ) / 2 ; tmp = isBadVersion ( mid ) ; if ( tmp ) { high = mid - 1 ; } else { low = mid + 1 ; } } return ( low ) ; } } void main ( void ) { { megaInit ( ) ; } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { } } }
>>>Func
METHOD _1_stringEncoder
METHOD_RETURN void
PARAM int n
PARAM char str[]
BLOCK <empty> <empty>
<operator>.assignment encodeStrings_i3 = 0
IDENTIFIER n switch(n)
LITERAL 1 <empty>
<operator>.assignment str[encodeStrings_i3] = 'S'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'u'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'm'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'i'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ':'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 0 <empty>
<operator>.assignment str[encodeStrings_i3] = 'S'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'u'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'm'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'i'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ':'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
>>>PDG&57 0->2 0->3 0->4 0->5 0->6 0->7 0->8 0->9 0->10 0->11 0->12 0->13 0->14 0->15 0->16 0->17 0->18 0->19 0->20 0->21 0->22 0->23 0->24 0->25 0->26 0->27 0->28 0->29 0->30 0->31 0->32 0->33 0->34 0->35 0->36 0->37 0->38 0->39 0->40 0->41 0->42 0->43 0->44 0->45 0->46 0->47 0->48 0->49 0->50 0->51 0->52 0->53 0->54 0->55 0->56 2->1 3->1 5->1 5->1 5->9 5->34 8->1 9->11 10->1 11->13 12->1 13->15 15->17 16->1 17->19 18->1 19->21 20->1 21->23 22->1 23->25 24->1 25->27 26->1 27->29 28->1 29->31 30->1 30->1 31->1 31->1 33->1 34->36 35->1 36->38 37->1 38->40 40->42 41->1 42->44 43->1 44->46 45->1 46->48 47->1 48->50 49->1 50->52 51->1 52->54 53->1 54->56 55->1 55->1 56->1 56->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; char * * _global_argv = ( char * * ) 0 ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern int raise ( int sig ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; int main ( int argc , char * * argv , char * * _formal_envp ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void encodeStrings_litStr0_i $ nit ( void ) ; int _global_argc = 0 ; void megaInit ( void ) ; char * * _global_envp = ( char * * ) 0 ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int ( /* missing proto */ printf ) ( ) ; extern int scanf ( char const * format , ... ) ; extern void perror ( char const * str ) ; extern long clock ( void ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern float strtof ( char const * str , char const * endptr ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern double strtod ( char const * str , char const * endptr ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; void encodeStrings_litStr1_i $ nit ( void ) ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; char encodeStrings_litStr1 [ 12 ] ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; char encodeStrings_litStr0 [ 12 ] ; void megaInit ( void ) { { encodeStrings_litStr1_i $ nit ( ) ; encodeStrings_litStr0_i $ nit ( ) ; } } void encodeStrings_litStr0_i $ nit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { case 1 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 0 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; } } } int main ( int argc , char * * argv , char * * _formal_envp ) { int i ; int sum ; int _BARRIER_0 ; { megaInit ( ) ; _global_argc = argc ; _global_argv = argv ; _global_envp = _formal_envp ; _BARRIER_0 = 1 ; sum = 0 ; i = 0 ; while ( i < ( int ) * ( * ( argv + 1 ) + 0 ) ) { sum += i ; i ++ ; } if ( sum > 8128 ) { _1_stringEncoder ( 0 , encodeStrings_litStr0 ) ; printf ( encodeStrings_litStr0 , sum ) ; } else { _1_stringEncoder ( 1 , encodeStrings_litStr1 ) ; printf ( encodeStrings_litStr1 , sum ) ; } return ( 0 ) ; } } void encodeStrings_litStr1_i $ nit ( void ) { { } }
>>>Func
METHOD findMin
METHOD_RETURN int
PARAM int *nums
PARAM int numsSize
<operator>.assignment low = 0
<operator>.assignment high = numsSize - 1
RETURN return (*(nums + low)); return (*(nums + low));
<operator>.lessThan low < high
<operator>.subtraction numsSize - 1
<operator>.assignment mid = low + (high - low) / 2
<operator>.lessThan *(nums + mid) < *(nums + high)
<operator>.addition nums + low
<operator>.addition low + (high - low) / 2
<operator>.assignment high = mid
<operator>.division (high - low) / 2
<operator>.assignment low = mid + 1
<operator>.subtraction high - low
<operator>.addition nums + mid
<operator>.addition nums + high
<operator>.addition mid + 1
<operator>.indirection *(nums + mid)
<operator>.indirection *(nums + high)
>>>PDG&22 0->2 0->3 0->4 0->6 0->7 0->8 0->9 0->11 0->12 0->13 0->14 0->15 0->16 0->17 0->18 0->19 2->11 2->17 2->18 3->8 4->1 4->7 5->1 5->1 5->7 6->1 7->1 7->1 7->7 7->9 7->10 7->11 7->12 7->14 7->16 7->16 7->16 7->17 7->18 7->20 7->21 8->1 8->5 8->5 9->1 9->1 9->13 9->15 9->17 9->19 10->1 10->1 10->1 10->13 10->15 10->19 11->1 11->1 12->1 13->1 13->1 13->7 14->1 14->9 14->9 14->12 14->12 15->1 15->1 15->7 16->7 16->7 16->9 16->12 16->14 16->14 16->18 19->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; int findMin ( int * nums , int numsSize ) ; extern unsigned long strlen ( char const * s ) ; void main ( void ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int printf ( char const * format , ... ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; int findMin ( int * nums , int numsSize ) { int low ; int high ; int mid ; { low = 0 ; high = numsSize - 1 ; while ( low < high ) { mid = low + ( high - low ) / 2 ; if ( * ( nums + mid ) < * ( nums + high ) ) { high = mid ; } else { low = mid + 1 ; } } return ( * ( nums + low ) ) ; } } void megaInit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { } } } void main ( void ) { { megaInit ( ) ; } }
>>>Func
METHOD min
METHOD_RETURN int
PARAM int a
PARAM int b
RETURN return (tmp); return (tmp);
<operator>.lessThan a < b
IDENTIFIER tmp return (tmp);
<operator>.assignment tmp = a
<operator>.assignment tmp = b
>>>PDG&9 0->2 0->3 0->5 0->6 0->7 0->8 2->5 3->5 4->1 5->1 5->1 5->1 5->7 5->7 5->8 5->8 6->4 7->1 7->1 7->1 7->6 8->1 8->1 8->1 8->6
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; int min ( int a , int b ) ; extern unsigned long strlen ( char const * s ) ; void main ( void ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int printf ( char const * format , ... ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; int min ( int a , int b ) { int tmp ; { if ( a < b ) { tmp = a ; } else { tmp = b ; } return ( tmp ) ; } } void megaInit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { } } } void main ( void ) { { megaInit ( ) ; } }
>>>Func
METHOD GCD
METHOD_RETURN int
PARAM int x
PARAM int y
<operator>.assignment tmp = GCD(y, x % y)
RETURN return (tmp); return (tmp);
<operator>.equals y == 0
IDENTIFIER tmp return (tmp);
RETURN return (x); return (x);
GCD GCD(y, x % y)
IDENTIFIER x return (x);
<operator>.modulo x % y
>>>PDG&12 0->2 0->3 0->6 0->7 0->9 0->10 0->11 2->1 2->10 2->11 3->6 4->7 5->1 6->1 6->1 6->4 6->5 6->8 6->9 6->11 6->11 7->5 8->1 9->4 9->4 10->8 11->9 11->9
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; void main ( void ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int printf ( char const * format , ... ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; int GCD ( int x , int y ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; int GCD ( int x , int y ) { int tmp ; { if ( y == 0 ) { return ( x ) ; } tmp = GCD ( y , x % y ) ; return ( tmp ) ; } } void megaInit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { } } } void main ( void ) { { megaInit ( ) ; } }
>>>Func
METHOD _1_stringEncoder
METHOD_RETURN void
PARAM int n
PARAM char str[]
BLOCK <empty> <empty>
<operator>.assignment encodeStrings_i3 = 0
IDENTIFIER n switch(n)
LITERAL 0 <empty>
<operator>.assignment str[encodeStrings_i3] = 'S'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'u'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'm'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'i'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ':'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
>>>PDG&32 0->2 0->3 0->4 0->5 0->6 0->7 0->8 0->9 0->10 0->11 0->12 0->13 0->14 0->15 0->16 0->17 0->18 0->19 0->20 0->21 0->22 0->23 0->24 0->25 0->26 0->27 0->28 0->29 0->30 0->31 2->1 3->1 5->1 5->1 5->9 8->1 9->11 10->1 11->13 12->1 13->15 15->17 16->1 17->19 18->1 19->21 20->1 21->23 22->1 23->25 24->1 25->27 26->1 27->29 28->1 29->31 30->1 30->1 31->1 31->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; char * * _global_argv = ( char * * ) 0 ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; int main ( int argc , char * * argv , char * * _formal_envp ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; void encodeStrings_litStr0_i $ nit ( void ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; int _global_argc = 0 ; void megaInit ( void ) ; char * * _global_envp = ( char * * ) 0 ; extern int ( /* missing proto */ printf ) ( ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; char encodeStrings_litStr0 [ 12 ] ; void megaInit ( void ) { { encodeStrings_litStr0_i $ nit ( ) ; } } void encodeStrings_litStr0_i $ nit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { case 0 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; } } } int main ( int argc , char * * argv , char * * _formal_envp ) { int i ; int sum ; int _BARRIER_0 ; { megaInit ( ) ; _global_argc = argc ; _global_argv = argv ; _global_envp = _formal_envp ; _BARRIER_0 = 1 ; sum = 0 ; i = 0 ; while ( i < ( int ) * ( * ( argv + 1 ) + 0 ) ) { sum += i ; i ++ ; } _1_stringEncoder ( 0 , encodeStrings_litStr0 ) ; printf ( encodeStrings_litStr0 , sum ) ; return ( 0 ) ; } }
>>>Func
METHOD swap
METHOD_RETURN void
PARAM int *first
PARAM int *second
<operator>.assignment temp = *first
<operator>.assignment *first = *second
<operator>.assignment *second = temp
RETURN return; return;
>>>PDG&8 0->2 0->3 0->6 0->7 2->1 3->1 4->1 4->6 5->1 5->1 6->1 6->1 6->1 7->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; void main ( void ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void swap ( int * first , int * second ) ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int printf ( char const * format , ... ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; void swap ( int * first , int * second ) { int temp ; { temp = * first ; * first = * second ; * second = temp ; return ; } } void megaInit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { } } } void main ( void ) { { megaInit ( ) ; } }
>>>Func
METHOD swap
METHOD_RETURN void
PARAM int *first
PARAM int *second
<operator>.assignment temp = *first
<operator>.assignment *first = *second
<operator>.assignment *second = temp
RETURN return; return;
>>>PDG&8 0->2 0->3 0->6 0->7 2->1 3->1 4->1 4->6 5->1 5->1 6->1 6->1 6->1 7->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; void main ( void ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void swap ( int * first , int * second ) ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int printf ( char const * format , ... ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; void swap ( int * first , int * second ) { int temp ; { temp = * first ; * first = * second ; * second = temp ; return ; } } void megaInit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { } } } void main ( void ) { { megaInit ( ) ; } }
>>>Func
METHOD increment
METHOD_RETURN void
PARAM char *str
<operator>.assignment i = 0
<operator>.assignment tmp = strlen(str)
<operator>.assignment len = tmp
RETURN return; return;
<operator>.notEquals (int )*(str + i) != 57
strlen strlen(str)
<operator>.assignment *(str + i) = (char )((int )*(str + i) + 1)
<operator>.assignment *(str + i) = (char )((int )*(str + i) + 1)
<operator>.postIncrement i ++
<operator>.assignment *(str + len) = (char )'\000'
<operator>.cast (char )((int )*(str + i) + 1)
<operator>.equals (int )*(str + i) == 57
<operator>.addition str + i
<operator>.addition str + i
<operator>.addition (int )*(str + i) + 1
<operator>.assignment *(str + i) = (char )'0'
<operator>.postIncrement i ++
<operator>.cast (char )((int )*(str + i) + 1)
<operator>.cast (char )'\000'
<operator>.equals (int )*(str + i) == 0
<operator>.addition str + i
<operator>.addition (int )*(str + i) + 1
<operator>.addition str + len
<operator>.cast (char )'0'
<operator>.assignment *(str + i) = (char )'1'
<operator>.assignment *(str + (i + 1)) = (char )'\000'
RETURN return; return;
<operator>.addition str + i
<operator>.addition str + i
<operator>.addition str + i
<operator>.cast (char )'1'
<operator>.cast (char )'\000'
<operator>.addition str + i
<operator>.addition str + i
<operator>.addition str + i
<operator>.addition str + (i + 1)
<operator>.addition i + 1
<operator>.indirection *(str + i)
UNKNOWN char char
<operator>.indirection *(str + i)
<operator>.indirection *(str + len)
<operator>.cast (int )*(str + i)
<operator>.cast (int )*(str + i)
UNKNOWN char char
UNKNOWN char char
UNKNOWN int int
<operator>.indirection *(str + i)
UNKNOWN int int
<operator>.indirection *(str + i)
<operator>.indirection *(str + i)
<operator>.cast (int )*(str + i)
UNKNOWN char char
<operator>.cast (int )*(str + i)
UNKNOWN int int
<operator>.indirection *(str + i)
UNKNOWN int int
<operator>.indirection *(str + i)
<operator>.indirection *(str + i)
<operator>.indirection *(str + (i + 1))
UNKNOWN char char
UNKNOWN char char
>>>PDG&64 0->2 0->3 0->5 0->6 0->7 0->8 0->9 0->10 0->11 0->12 0->13 0->14 0->15 0->16 0->17 0->18 0->19 0->20 0->21 0->22 0->23 0->24 0->25 0->26 0->27 0->28 0->29 0->30 0->31 0->32 0->33 0->34 0->35 0->36 0->37 0->38 0->39 2->8 3->1 3->11 3->15 3->16 3->19 3->23 3->30 3->31 3->32 3->35 4->1 4->1 4->5 5->1 5->1 5->1 5->25 6->1 7->1 7->6 7->9 7->13 7->14 7->16 7->17 7->30 7->31 7->40 7->41 7->44 7->45 7->48 7->49 7->50 7->51 8->4 8->15 8->16 8->23 8->25 8->30 8->31 8->35 14->1 14->6 14->10 14->11 14->12 14->18 14->19 14->20 14->21 14->22 14->23 14->24 14->25 14->26 14->32 14->35 14->36 14->42 14->43 14->46 14->47 14->52 14->53 14->54 14->55 14->56 14->57 14->58 14->59 18->1 18->1 19->1 19->11 19->23 19->31 19->32 19->35 19->36 19->37 19->38 19->39 22->1 22->1 22->14 22->27 22->28 22->29 22->31 22->33 22->34 22->37 22->38 22->39 22->45 22->50 22->51 22->60 22->61 22->62 22->63 27->1 27->1 27->1 28->1 28->1 28->1 29->1 38->1 38->1 39->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern int ( /* missing proto */ strlen ) ( ) ; void main ( void ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int printf ( char const * format , ... ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; void increment ( char * str ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; void increment ( char * str ) { int i ; int len ; int tmp ; { i = 0 ; tmp = strlen ( str ) ; len = tmp ; if ( ( int ) * ( str + i ) != 57 ) { * ( str + i ) = ( char ) ( ( int ) * ( str + i ) + 1 ) ; } else { while ( ( int ) * ( str + i ) == 57 ) { * ( str + i ) = ( char ) ' ' ; i ++ ; if ( ( int ) * ( str + i ) == 0 ) { * ( str + i ) = ( char ) ' ' ; * ( str + ( i + 1 ) ) = ( char ) ' \000 ' ; return ; } } * ( str + i ) = ( char ) ( ( int ) * ( str + i ) + 1 ) ; i ++ ; * ( str + len ) = ( char ) ' \000 ' ; } return ; } } void megaInit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { } } } void main ( void ) { { megaInit ( ) ; } }
>>>Func
METHOD findLengthOfLCIS
METHOD_RETURN int
PARAM int *nums
PARAM int numsSize
<operator>.assignment maxval = 1
<operator>.assignment count = 1
<operator>.assignment i = 1
RETURN return (maxval); return (maxval);
<operator>.equals numsSize == 0
<operator>.lessThan i < numsSize
IDENTIFIER maxval return (maxval);
RETURN return (0); return (0);
<operator>.postIncrement i ++
LITERAL 0 return (0);
<operator>.greaterThan *(nums + i) > *(nums + (i - 1))
<operator>.postIncrement count ++
<operator>.greaterEqualsThan count >= maxval
<operator>.assignment count = 1
<operator>.addition nums + i
<operator>.addition nums + (i - 1)
<operator>.assignment maxval = count
<operator>.subtraction i - 1
<operator>.indirection *(nums + i)
<operator>.indirection *(nums + (i - 1))
>>>PDG&24 0->2 0->3 0->4 0->5 0->6 0->8 0->9 0->10 0->11 0->12 0->13 0->15 0->16 0->17 0->18 0->19 0->20 0->21 2->1 2->18 3->8 4->1 4->1 4->10 4->16 5->1 5->1 5->15 6->9 7->1 8->1 8->1 8->6 8->7 8->9 8->9 8->11 9->9 9->12 9->14 9->18 9->18 9->19 9->21 9->21 9->22 9->23 10->7 11->1 12->9 13->11 14->15 14->16 14->17 15->16 16->10 16->15 16->20 16->20 17->15 20->10 20->16 21->12 21->19 21->19
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; int findLengthOfLCIS ( int * nums , int numsSize ) ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; void main ( void ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int printf ( char const * format , ... ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; int findLengthOfLCIS ( int * nums , int numsSize ) { int maxval ; int i ; int count ; { maxval = 1 ; count = 1 ; if ( numsSize == 0 ) { return ( 0 ) ; } i = 1 ; while ( i < numsSize ) { if ( * ( nums + i ) > * ( nums + ( i - 1 ) ) ) { count ++ ; if ( count >= maxval ) { maxval = count ; } } else { count = 1 ; } i ++ ; } return ( maxval ) ; } } void megaInit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { } } } void main ( void ) { { megaInit ( ) ; } }
>>>Func
METHOD main
METHOD_RETURN int
PARAM int _formal_argc
PARAM char **_formal_argv
PARAM char **_formal_envp
megaInit megaInit()
<operator>.assignment _global_argc = _formal_argc
<operator>.assignment _global_argv = _formal_argv
<operator>.assignment _global_envp = _formal_envp
<operator>.assignment _BARRIER_0 = 1
test test()
RETURN return (0); return (0);
LITERAL 0 return (0);
>>>PDG&13 0->2 0->3 0->4 0->5 0->6 0->7 0->8 0->9 0->10 0->11 0->12 2->6 3->7 4->8 5->1 6->1 6->1 6->1 7->1 7->1 7->1 8->1 8->1 8->1 9->1 9->1 10->1 11->1 12->11
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fclose ( void * stream ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; char * * _global_argv = ( char * * ) 0 ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; int main ( int _formal_argc , char * * _formal_argv , char * * _formal_envp ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; int _global_argc = 0 ; char * * _global_envp = ( char * * ) 0 ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int printf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern int scanf ( char const * format , ... ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int ( /* missing proto */ test ) ( ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { } } } void megaInit ( void ) { { } } int main ( int _formal_argc , char * * _formal_argv , char * * _formal_envp ) { int _BARRIER_0 ; { megaInit ( ) ; _global_argc = _formal_argc ; _global_argv = _formal_argv ; _global_envp = _formal_envp ; _BARRIER_0 = 1 ; test ( ) ; return ( 0 ) ; } }
>>>Func
METHOD _1_stringEncoder
METHOD_RETURN void
PARAM int n
PARAM char str[]
BLOCK <empty> <empty>
<operator>.assignment encodeStrings_i3 = 0
IDENTIFIER n switch(n)
LITERAL 7 <empty>
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 6 <empty>
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 5 <empty>
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'm'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'o'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'u'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '?'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'x'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'i'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '('
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '0'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment,str[encodeStrings_i3] = ')'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 4 <empty>
<operator>.assignment str[encodeStrings_i3] = '-'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '-'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '-'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '-'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'y'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'o'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'u'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'q'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'u'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 't'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '-'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '-'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '-'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 3 <empty>
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 2 <empty>
<operator>.assignment str[encodeStrings_i3] = 'c'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'o'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'i'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '?'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 1 <empty>
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
LITERAL 0 <empty>
<operator>.assignment str[encodeStrings_i3] = 'N'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'u'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'm'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'b'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'o'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'f'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'c'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'o'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'i'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '?'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
>>>PDG&175 0->2 0->3 0->4 0->5 0->6 0->7 0->8 0->9 0->10 0->11 0->12 0->13 0->14 0->15 0->16 0->17 0->18 0->19 0->20 0->21 0->22 0->23 0->24 0->25 0->26 0->27 0->28 0->29 0->30 0->31 0->32 0->33 0->34 0->35 0->36 0->37 0->38 0->39 0->40 0->41 0->42 0->43 0->44 0->45 0->46 0->47 0->48 0->49 0->50 0->51 0->52 0->53 0->54 0->55 0->56 0->57 0->58 0->59 0->60 0->61 0->62 0->63 0->64 0->65 0->66 0->67 0->68 0->69 0->70 0->71 0->72 0->73 0->74 0->75 0->76 0->77 0->78 0->79 0->80 0->81 0->82 0->83 0->84 0->85 0->86 0->87 0->88 0->89 0->90 0->91 0->92 0->93 0->94 0->95 0->96 0->97 0->98 0->99 0->100 0->101 0->102 0->103 0->104 0->105 0->106 0->107 0->108 0->109 0->110 0->111 0->112 0->113 0->114 0->115 0->116 0->117 0->118 0->119 0->120 0->121 0->122 0->123 0->124 0->125 0->126 0->127 0->128 0->129 0->130 0->131 0->132 0->133 0->134 0->135 0->136 0->137 0->138 0->139 0->140 0->141 0->142 0->143 0->144 0->145 0->146 0->147 0->148 0->149 0->150 0->151 0->152 0->153 0->154 0->155 0->156 0->157 0->158 0->159 0->160 0->161 0->162 0->163 0->164 0->165 0->166 0->167 0->168 0->169 0->170 0->171 0->172 0->173 0->174 2->1 3->1 5->1 5->1 5->9 5->18 5->25 5->60 5->111 5->118 5->133 5->140 8->1 9->11 10->1 11->13 12->1 13->15 14->1 14->1 15->1 15->1 17->1 18->20 19->1 20->22 21->1 21->1 22->1 22->1 24->1 25->27 26->1 27->29 28->1 29->31 30->1 31->33 32->1 33->35 35->37 36->1 37->39 39->41 40->1 41->43 42->1 43->45 44->1 45->47 46->1 47->49 48->1 49->51 50->1 51->53 52->1 53->55 54->1 55->57 56->1 56->1 57->1 57->1 60->62 62->64 64->66 66->68 68->70 69->1 70->72 71->1 72->74 74->76 76->78 78->80 79->1 80->82 82->84 83->1 84->86 85->1 86->88 87->1 88->90 90->92 91->1 92->94 93->1 94->96 96->98 98->100 100->102 101->1 102->104 103->1 104->106 105->1 106->108 107->1 107->1 108->1 108->1 110->1 111->113 112->1 113->115 114->1 114->1 115->1 115->1 117->1 118->120 119->1 120->122 121->1 122->124 123->1 124->126 125->1 126->128 127->1 128->130 129->1 129->1 130->1 130->1 132->1 133->135 134->1 135->137 136->1 136->1 137->1 137->1 139->1 140->142 141->1 142->144 143->1 144->146 145->1 146->148 147->1 148->150 149->1 150->152 152->154 154->156 155->1 156->158 158->160 159->1 160->162 161->1 162->164 163->1 164->166 165->1 166->168 167->1 168->170 169->1 170->172 171->1 172->174 173->1 173->1 174->1 174->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; char * * _global_argv = ( char * * ) 0 ; void encodeStrings_litStr2_i $ nit ( void ) ; extern int unlink ( char const * filename ) ; extern int fcntl ( int filedes , int cmd , ... ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int pthread_mutex_lock ( int * mutex ) ; void encodeStrings_litStr5_i $ nit ( void ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern int raise ( int sig ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern int ( /* missing proto */ malloc ) ( ) ; extern double ceil ( double x ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int getpagesize ( ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern int ( /* missing proto */ free ) ( ) ; extern unsigned long strlen ( char const * s ) ; int main ( int _formal_argc , char * * _formal_argv , char * * _formal_envp ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; void encodeStrings_litStr0_i $ nit ( void ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; int _global_argc = 0 ; void megaInit ( void ) ; char * * _global_envp = ( char * * ) 0 ; extern int ( /* missing proto */ printf ) ( ) ; void encodeStrings_litStr3_i $ nit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern void perror ( char const * str ) ; extern int ( /* missing proto */ scanf ) ( ) ; extern long clock ( void ) ; void encodeStrings_litStr6_i $ nit ( void ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern void signal ( int sig , void * func ) ; extern double difftime ( long tv1 , long tv0 ) ; extern int ( /* missing proto */ ways ) ( ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; void encodeStrings_litStr1_i $ nit ( void ) ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; void encodeStrings_litStr4_i $ nit ( void ) ; char encodeStrings_litStr7 [ 4 ] ; char encodeStrings_litStr6 [ 3 ] ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; void encodeStrings_litStr7_i $ nit ( void ) ; char encodeStrings_litStr5 [ 17 ] ; char encodeStrings_litStr4 [ 25 ] ; extern double sqrt ( double x ) ; extern int open ( char const * filename , int oflag , ... ) ; char encodeStrings_litStr3 [ 3 ] ; char encodeStrings_litStr2 [ 7 ] ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; char encodeStrings_litStr1 [ 3 ] ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; char encodeStrings_litStr0 [ 18 ] ; void encodeStrings_litStr3_i $ nit ( void ) { { } } void megaInit ( void ) { { encodeStrings_litStr7_i $ nit ( ) ; encodeStrings_litStr6_i $ nit ( ) ; encodeStrings_litStr5_i $ nit ( ) ; encodeStrings_litStr4_i $ nit ( ) ; encodeStrings_litStr3_i $ nit ( ) ; encodeStrings_litStr2_i $ nit ( ) ; encodeStrings_litStr1_i $ nit ( ) ; encodeStrings_litStr0_i $ nit ( ) ; } } void encodeStrings_litStr4_i $ nit ( void ) { { } } void encodeStrings_litStr6_i $ nit ( void ) { { } } void encodeStrings_litStr0_i $ nit ( void ) { { } } void encodeStrings_litStr5_i $ nit ( void ) { { } } void encodeStrings_litStr2_i $ nit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { case 7 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 6 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 5 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 4 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 3 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 2 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 1 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 0 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; } } } int main ( int _formal_argc , char * * _formal_argv , char * * _formal_envp ) { int m ; int n ; int * coin ; int tmp ; int i ; int tmp___0 ; int _BARRIER_0 ; { megaInit ( ) ; _global_argc = _formal_argc ; _global_argv = _formal_argv ; _global_envp = _formal_envp ; _BARRIER_0 = 1 ; _1_stringEncoder ( 0 , encodeStrings_litStr0 ) ; printf ( encodeStrings_litStr0 ) ; _1_stringEncoder ( 1 , encodeStrings_litStr1 ) ; scanf ( encodeStrings_litStr1 , & m ) ; tmp = malloc ( ( unsigned long ) m * 4UL ) ; coin = ( int * ) tmp ; i = 0 ; while ( i < m ) { _1_stringEncoder ( 2 , encodeStrings_litStr2 ) ; printf ( encodeStrings_litStr2 ) ; _1_stringEncoder ( 3 , encodeStrings_litStr3 ) ; scanf ( encodeStrings_litStr3 , coin + i ) ; i ++ ; } _1_stringEncoder ( 4 , encodeStrings_litStr4 ) ; printf ( encodeStrings_litStr4 ) ; while ( 1 ) { _1_stringEncoder ( 5 , encodeStrings_litStr5 ) ; printf ( encodeStrings_litStr5 ) ; _1_stringEncoder ( 6 , encodeStrings_litStr6 ) ; scanf ( encodeStrings_litStr6 , & n ) ; if ( ! n ) { break ; } tmp___0 = ways ( n , coin , m ) ; _1_stringEncoder ( 7 , encodeStrings_litStr7 ) ; printf ( encodeStrings_litStr7 , tmp___0 ) ; } free ( coin ) ; return ( 0 ) ; } } void encodeStrings_litStr1_i $ nit ( void ) { { } } void encodeStrings_litStr7_i $ nit ( void ) { { } }
>>>Func
METHOD findTheDifference
METHOD_RETURN char
PARAM char *s
PARAM char *t
<operator>.assignment sum1 = 0
<operator>.assignment sum2 = 0
<operator>.assignment i = 0
<operator>.assignment i = 0
RETURN return ((char )(sum2 - sum1)); return ((char )(sum2 - sum1));
LITERAL 1 while (1)
LITERAL 1 while (1)
<operator>.cast (char )(sum2 - sum1)
<operator>.assignment tmp = strlen(s)
<operator>.assignmentPlus sum1 += (int )*(s + i)
<operator>.postIncrement i ++
<operator>.assignment tmp___0 = strlen(t)
<operator>.assignmentPlus sum2 += (int )*(t + i)
<operator>.postIncrement i ++
<operator>.logicalNot ! (i < tmp)
<operator>.logicalNot ! (i < tmp___0)
<operator>.subtraction sum2 - sum1
strlen strlen(s)
<operator>.cast (int )*(s + i)
strlen strlen(t)
<operator>.cast (int )*(t + i)
<operator>.lessThan i < tmp
<operator>.lessThan i < tmp___0
<operator>.addition s + i
<operator>.addition t + i
UNKNOWN int int
<operator>.indirection *(s + i)
UNKNOWN int int
<operator>.indirection *(t + i)
>>>PDG&33 0->2 0->3 0->4 0->5 0->6 0->7 0->9 0->10 0->13 0->14 0->16 0->17 0->20 0->21 0->23 0->25 0->26 0->27 0->28 2->1 2->21 3->1 3->23 4->1 4->13 4->20 5->1 5->16 5->20 6->25 7->1 7->1 7->26 8->1 11->1 11->1 11->8 12->1 12->1 12->25 13->1 13->1 13->20 14->1 14->25 15->1 15->1 15->26 16->1 16->1 16->20 17->1 17->1 17->26 18->1 18->1 18->12 18->13 18->14 18->18 18->21 18->22 18->25 18->27 18->29 18->30 19->1 19->1 19->15 19->16 19->17 19->19 19->23 19->24 19->26 19->28 19->31 19->32 20->1 20->1 20->11 20->11 21->1 21->12 21->27 22->1 23->1 23->15 23->28 24->1 25->1 25->14 25->18 25->18 25->27 26->1 26->1 26->17 26->19 26->19 26->28 27->1 28->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern int ( /* missing proto */ strlen ) ( ) ; void main ( void ) ; char findTheDifference ( char * s , char * t ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int printf ( char const * format , ... ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; char findTheDifference ( char * s , char * t ) { int sum1 ; int sum2 ; int i ; int tmp ; int tmp___0 ; { sum1 = 0 ; sum2 = 0 ; i = 0 ; while ( 1 ) { tmp = strlen ( s ) ; if ( ! ( i < tmp ) ) { break ; } sum1 += ( int ) * ( s + i ) ; i ++ ; } i = 0 ; while ( 1 ) { tmp___0 = strlen ( t ) ; if ( ! ( i < tmp___0 ) ) { break ; } sum2 += ( int ) * ( t + i ) ; i ++ ; } return ( ( char ) ( sum2 - sum1 ) ) ; } } void megaInit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { } } } void main ( void ) { { megaInit ( ) ; } }
>>>Func
METHOD firstUniqChar
METHOD_RETURN int
PARAM char *s
<operator>.assignment tmp = calloc(256  sizeof(int ))
<operator>.assignment arr = (int *)tmp
<operator>.assignment i = 0
<operator>.assignment i = 0
RETURN return (-1); return (-1);
LITERAL 1 while (1)
LITERAL 1 while (1)
<operator>.minus -1
calloc calloc(256  sizeof(int ))
<operator>.cast (int *)tmp
<operator>.assignment tmp___0 = strlen(s)
<operator>.postIncrement (*(arr + *(s + i))) ++
<operator>.postIncrement i ++
<operator>.assignment tmp___1 = strlen(s)
<operator>.postIncrement i ++
<operator>.sizeOf sizeof(int )
<operator>.logicalNot ! (i < tmp___0)
<operator>.logicalNot ! (i < tmp___1)
<operator>.equals *(arr + *(s + i)) == 1
strlen strlen(s)
strlen strlen(s)
RETURN return (i); return (i);
<operator>.lessThan i < tmp___0
<operator>.addition arr + *(s + i)
<operator>.lessThan i < tmp___1
IDENTIFIER i return (i);
<operator>.addition arr + *(s + i)
<operator>.addition s + i
<operator>.addition s + i
<operator>.indirection *(arr + *(s + i))
<operator>.indirection *(arr + *(s + i))
<operator>.indirection *(s + i)
<operator>.indirection *(s + i)
>>>PDG&36 0->2 0->3 0->4 0->5 0->6 0->8 0->9 0->10 0->11 0->12 0->15 0->17 0->21 0->22 0->23 0->25 0->26 0->27 0->28 0->29 0->30 0->31 2->22 2->23 3->1 3->1 3->4 3->12 4->1 4->1 4->26 4->29 5->25 6->1 6->27 7->1 10->7 12->1 13->1 13->25 14->1 15->1 15->25 16->1 16->1 16->27 17->1 17->27 18->1 19->1 19->1 19->13 19->14 19->15 19->19 19->22 19->25 19->26 19->30 19->32 19->34 20->1 20->1 20->7 20->10 20->21 20->29 20->31 20->33 20->35 21->1 21->1 21->7 21->10 21->16 21->17 21->20 21->23 21->24 21->27 22->13 22->23 22->30 23->16 23->31 24->1 25->1 25->15 25->19 25->19 25->30 27->1 27->17 27->20 27->20 27->28 27->31 28->24 29->1 29->1 31->1 31->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int ( /* missing proto */ calloc ) ( ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern int ( /* missing proto */ strlen ) ( ) ; void main ( void ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int printf ( char const * format , ... ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; int firstUniqChar ( char * s ) ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; void megaInit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { } } } void main ( void ) { { megaInit ( ) ; } } int firstUniqChar ( char * s ) { int * arr ; int tmp ; int i ; int tmp___0 ; int tmp___1 ; { tmp = calloc ( 256 , sizeof ( int ) ) ; arr = ( int * ) tmp ; i = 0 ; while ( 1 ) { tmp___0 = strlen ( s ) ; if ( ! ( i < tmp___0 ) ) { break ; } ( * ( arr + * ( s + i ) ) ) ++ ; i ++ ; } i = 0 ; while ( 1 ) { tmp___1 = strlen ( s ) ; if ( ! ( i < tmp___1 ) ) { break ; } if ( * ( arr + * ( s + i ) ) == 1 ) { return ( i ) ; } i ++ ; } return ( -1 ) ; } }
>>>Func
METHOD _1_stringEncoder
METHOD_RETURN void
PARAM int n
PARAM char str[]
BLOCK <empty> <empty>
<operator>.assignment encodeStrings_i3 = 0
IDENTIFIER n switch(n)
LITERAL 0 <empty>
<operator>.assignment str[encodeStrings_i3] = 'S'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'u'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'm'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'i'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ':'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
>>>PDG&32 0->2 0->3 0->4 0->5 0->6 0->7 0->8 0->9 0->10 0->11 0->12 0->13 0->14 0->15 0->16 0->17 0->18 0->19 0->20 0->21 0->22 0->23 0->24 0->25 0->26 0->27 0->28 0->29 0->30 0->31 2->1 3->1 5->1 5->1 5->9 8->1 9->11 10->1 11->13 12->1 13->15 15->17 16->1 17->19 18->1 19->21 20->1 21->23 22->1 23->25 24->1 25->27 26->1 27->29 28->1 29->31 30->1 30->1 31->1 31->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; char * * _global_argv = ( char * * ) 0 ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; int main ( int argc , char * * argv , char * * _formal_envp ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; void encodeStrings_litStr0_i $ nit ( void ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; int _global_argc = 0 ; void megaInit ( void ) ; char * * _global_envp = ( char * * ) 0 ; extern int ( /* missing proto */ printf ) ( ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; char encodeStrings_litStr0 [ 12 ] ; void megaInit ( void ) { { encodeStrings_litStr0_i $ nit ( ) ; } } void encodeStrings_litStr0_i $ nit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { case 0 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; } } } int main ( int argc , char * * argv , char * * _formal_envp ) { int i ; int sum ; int _BARRIER_0 ; { megaInit ( ) ; _global_argc = argc ; _global_argv = argv ; _global_envp = _formal_envp ; _BARRIER_0 = 1 ; sum = 0 ; i = 0 ; while ( i < argc ) { if ( sum < 127 ) { sum += 64 ; } sum += i ; i ++ ; } _1_stringEncoder ( 0 , encodeStrings_litStr0 ) ; printf ( encodeStrings_litStr0 , sum ) ; return ( 0 ) ; } }
>>>Func
METHOD cmpvalue
METHOD_RETURN int
PARAM void const   *a
PARAM void const   *b
RETURN return (*((int *)b) - *((int *)a)); return (*((int *)b) - *((int *)a));
<operator>.subtraction *((int *)b) - *((int *)a)
<operator>.cast (int *)b
<operator>.cast (int *)a
>>>PDG&8 0->2 0->3 0->6 0->7 2->7 3->6 4->1 5->1 5->1 5->1 5->4 6->1 7->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; int cmpvalue ( void const * a , void const * b ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; void main ( void ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int printf ( char const * format , ... ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { } } } void megaInit ( void ) { { } } int cmpvalue ( void const * a , void const * b ) { { return ( * ( ( int * ) b ) - * ( ( int * ) a ) ) ; } } void main ( void ) { { megaInit ( ) ; } }
>>>Func
METHOD decimal2Hexadecimal
METHOD_RETURN void
PARAM long num
<operator>.assignment decimalnum = num
<operator>.assignment j = 0
<operator>.assignment quotient = decimalnum
<operator>.assignment i = j
_1_stringEncoder _1_stringEncoder(1, encodeStrings_litStr1)
printf printf(encodeStrings_litStr1)
RETURN return; return;
<operator>.notEquals quotient != 0L
<operator>.greaterEqualsThan i >= 0
<operator>.assignment remainder = quotient % 16L
<operator>.assignmentDivision quotient /= 16L
_1_stringEncoder _1_stringEncoder(0, encodeStrings_litStr0)
printf printf(encodeStrings_litStr0  (int )hexadecimalnum[i])
<operator>.postDecrement i --
<operator>.lessThan remainder < 10L
<operator>.modulo quotient % 16L
<operator>.assignment tmp = j
<operator>.postIncrement j ++
<operator>.assignment hexadecimalnum[tmp] = (char )(48L + remainder)
<operator>.cast (int )hexadecimalnum[i]
<operator>.assignment tmp___0 = j
<operator>.postIncrement j ++
<operator>.assignment hexadecimalnum[tmp___0] = (char )(55L + remainder)
<operator>.cast (char )(48L + remainder)
<operator>.addition 48L + remainder
<operator>.cast (char )(55L + remainder)
<operator>.addition 55L + remainder
UNKNOWN int int
<operator>.indirectIndexAccess hexadecimalnum[i]
<operator>.indirectIndexAccess hexadecimalnum[tmp]
UNKNOWN char char
<operator>.indirectIndexAccess hexadecimalnum[tmp___0]
UNKNOWN char char
>>>PDG&36 0->2 0->3 0->4 0->5 0->6 0->7 0->8 0->9 0->10 0->11 0->13 0->14 0->15 0->16 0->17 0->18 0->19 0->20 0->21 0->23 0->24 0->25 0->26 0->27 0->28 0->29 2->3 3->1 3->1 3->5 4->1 4->6 4->19 4->20 4->23 4->24 5->1 5->1 5->10 6->1 6->1 6->11 7->1 7->8 8->1 8->1 9->1 10->1 10->1 10->10 10->12 10->13 10->17 10->18 10->18 11->1 11->1 11->11 11->14 11->15 11->16 11->16 11->22 11->30 11->31 12->1 12->1 12->17 13->1 13->10 14->1 14->15 15->1 15->1 15->1 15->14 16->1 16->11 17->1 17->19 17->20 17->21 17->21 17->23 17->24 17->25 17->25 17->26 17->26 17->27 17->27 17->28 17->28 17->29 17->29 17->32 17->33 17->34 17->35 18->12 18->12 18->13 19->1 19->1 20->1 20->6 20->19 20->23 20->24 21->1 21->1 21->1 22->1 23->1 23->1 24->1 24->6 24->19 24->20 24->23 25->1 25->1 25->1 26->1 27->1 28->1 29->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int unlink ( char const * filename ) ; void decimal2Hexadecimal ( long num ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; void main ( void ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void encodeStrings_litStr0_i $ nit ( void ) ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int ( /* missing proto */ printf ) ( ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; void encodeStrings_litStr1_i $ nit ( void ) ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern double sqrt ( double x ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; char encodeStrings_litStr1 [ 2 ] ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; char encodeStrings_litStr0 [ 3 ] ; void encodeStrings_litStr0_i $ nit ( void ) { { } } void main ( void ) { { megaInit ( ) ; } } void megaInit ( void ) { { encodeStrings_litStr1_i $ nit ( ) ; encodeStrings_litStr0_i $ nit ( ) ; } } void encodeStrings_litStr1_i $ nit ( void ) { { } } void decimal2Hexadecimal ( long num ) { long decimalnum ; long quotient ; long remainder ; int i ; int j ; char hexadecimalnum [ 100 ] ; int tmp ; int tmp___0 ; { decimalnum = num ; j = 0 ; quotient = decimalnum ; while ( quotient != 0L ) { remainder = quotient % 16L ; if ( remainder < 10L ) { tmp = j ; j ++ ; hexadecimalnum [ tmp ] = ( char ) ( 48L + remainder ) ; } else { tmp___0 = j ; j ++ ; hexadecimalnum [ tmp___0 ] = ( char ) ( 55L + remainder ) ; } quotient /= 16L ; } i = j ; while ( i >= 0 ) { _1_stringEncoder ( 0 , encodeStrings_litStr0 ) ; printf ( encodeStrings_litStr0 , ( int ) hexadecimalnum [ i ] ) ; i -- ; } _1_stringEncoder ( 1 , encodeStrings_litStr1 ) ; printf ( encodeStrings_litStr1 ) ; return ; } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { case 1 : str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; case 0 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; } } }
>>>Func
METHOD main
METHOD_RETURN int
PARAM int argc
PARAM char **argv
PARAM char **_formal_envp
megaInit megaInit()
<operator>.assignment _global_argc = argc
<operator>.assignment _global_argv = argv
<operator>.assignment _global_envp = _formal_envp
<operator>.assignment _BARRIER_0 = 1
<operator>.assignment sum = 0
<operator>.assignment str = (char const   *)*(argv + 1)
<operator>.assignment s = str
<operator>.assignment len = (unsigned int )(s - str)
<operator>.assignment i = 0
_1_stringEncoder _1_stringEncoder(0, encodeStrings_litStr0)
printf printf(encodeStrings_litStr0, sum)
RETURN return (0); return (0);
<operator>.lessThan (unsigned int )i < len
LITERAL 0 return (0);
<operator>.cast (char const   *)*(argv + 1)
<operator>.assignmentPlus sum += (int )*s
<operator>.postIncrement s ++
<operator>.cast (unsigned int )(s - str)
<operator>.assignmentPlus sum += (int )*(str + i)
<operator>.postIncrement i ++
<operator>.subtraction s - str
<operator>.cast (unsigned int )i
<operator>.addition argv + 1
<operator>.cast (int )*s
<operator>.cast (int )*(str + i)
<operator>.addition str + i
<operator>.indirection *s
UNKNOWN unsigned int unsigned int
UNKNOWN int int
<operator>.indirection *s
UNKNOWN int int
<operator>.indirection *(str + i)
>>>PDG&38 0->2 0->3 0->4 0->5 0->6 0->7 0->8 0->9 0->10 0->12 0->14 0->15 0->16 0->17 0->18 0->19 0->21 0->22 0->24 0->25 0->26 0->27 0->28 0->31 2->6 3->7 3->28 4->8 5->1 6->1 6->1 6->1 7->1 7->1 8->1 8->1 8->1 9->1 9->1 10->1 10->16 10->21 10->24 11->1 11->1 11->12 11->26 12->1 12->22 12->26 13->1 13->1 13->18 14->1 14->18 14->25 14->27 14->31 15->1 15->16 16->1 16->1 16->1 17->1 18->1 18->1 18->1 18->18 18->24 18->25 18->27 18->30 18->31 18->33 18->36 18->37 19->17 20->1 21->1 21->1 21->16 21->24 22->1 22->26 23->1 24->1 24->1 24->16 25->1 25->18 25->27 25->31 26->1 26->1 26->13 26->13 26->23 26->23 26->31 27->1 28->1 29->1 30->1 31->1 32->21 32->22 32->29 32->32 32->34 32->35
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; char * * _global_argv = ( char * * ) 0 ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; int main ( int argc , char * * argv , char * * _formal_envp ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; void encodeStrings_litStr0_i $ nit ( void ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; int _global_argc = 0 ; void megaInit ( void ) ; char * * _global_envp = ( char * * ) 0 ; extern int ( /* missing proto */ printf ) ( ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; char encodeStrings_litStr0 [ 12 ] ; void megaInit ( void ) { { encodeStrings_litStr0_i $ nit ( ) ; } } void encodeStrings_litStr0_i $ nit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { case 0 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; } } } int main ( int argc , char * * argv , char * * _formal_envp ) { int i ; int sum ; char const * str ; register char const * s ; unsigned int len ; int _BARRIER_0 ; { megaInit ( ) ; _global_argc = argc ; _global_argv = argv ; _global_envp = _formal_envp ; _BARRIER_0 = 1 ; sum = 0 ; str = ( char const * ) * ( argv + 1 ) ; s = str ; while ( * s ) { sum += ( int ) * s ; s ++ ; } len = ( unsigned int ) ( s - str ) ; i = 0 ; while ( ( unsigned int ) i < len ) { sum += ( int ) * ( str + i ) ; i ++ ; } _1_stringEncoder ( 0 , encodeStrings_litStr0 ) ; printf ( encodeStrings_litStr0 , sum ) ; return ( 0 ) ; } }
>>>Func
METHOD test
METHOD_RETURN void
PARAM void
<operator>.assignment size = 10
<operator>.assignment tmp = calloc(size  sizeof(int ))
<operator>.assignment arr = (int *)tmp
<operator>.assignment i = 0
bubbleSort bubbleSort(arr, size)
<operator>.assignment i___0 = 0
free free(arr)
RETURN return; return;
<operator>.lessThan i < size
<operator>.lessThan i___0 < size - 1
calloc calloc(size  sizeof(int ))
<operator>.cast (int *)tmp
<operator>.assignment tmp___0 = rand()
<operator>.assignment *(arr + i) = tmp___0 % 100
<operator>.postIncrement i ++
assert assert(*(arr + i___0) <= *(arr + (i___0 + 1)))
<operator>.postIncrement i___0 ++
<operator>.sizeOf sizeof(int )
<operator>.subtraction size - 1
<operator>.modulo tmp___0 % 100
<operator>.lessEqualsThan *(arr + i___0) <= *(arr + (i___0 + 1))
<operator>.addition arr + i
<operator>.addition arr + i___0
<operator>.addition arr + (i___0 + 1)
<operator>.addition i___0 + 1
rand rand()
<operator>.indirection *(arr + i)
<operator>.indirection *(arr + i___0)
<operator>.indirection *(arr + (i___0 + 1))
>>>PDG&32 0->2 0->3 0->4 0->5 0->6 0->7 0->8 0->9 0->10 0->11 0->12 0->13 0->14 0->15 0->17 0->19 0->21 0->22 0->24 0->25 0->26 0->27 2->1 3->1 3->4 3->11 3->13 4->1 4->1 4->5 4->14 5->1 5->1 5->7 5->24 6->1 6->11 7->1 7->9 7->21 7->25 7->26 8->1 8->12 9->1 10->1 11->1 11->1 11->7 11->11 11->15 11->16 11->17 11->17 11->22 11->24 11->24 11->28 11->29 12->1 12->1 12->1 12->12 12->18 12->19 12->19 12->21 12->23 12->25 12->25 12->26 12->26 12->27 12->27 12->30 12->31 14->1 15->1 15->1 15->22 16->1 16->1 16->1 17->1 17->11 18->1 18->1 19->1 19->12 20->1 21->1 21->12 21->12 22->1 22->16 22->16 23->1 23->1 23->18 23->18 26->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int ( /* missing proto */ calloc ) ( ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int ( /* missing proto */ assert ) ( ) ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern int getpagesize ( ) ; extern double ceil ( double x ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int ( /* missing proto */ bubbleSort ) ( ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int ( /* missing proto */ rand ) ( ) ; extern int ( /* missing proto */ free ) ( ) ; extern unsigned long strlen ( char const * s ) ; void main ( void ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; void megaInit ( void ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int printf ( char const * format , ... ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; void test ( void ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; void main ( void ) { { megaInit ( ) ; } } void test ( void ) { int size ; int * arr ; int tmp ; int i ; int tmp___0 ; int i___0 ; { size = 10 ; tmp = calloc ( size , sizeof ( int ) ) ; arr = ( int * ) tmp ; i = 0 ; while ( i < size ) { tmp___0 = rand ( ) ; * ( arr + i ) = tmp___0 % 100 ; i ++ ; } bubbleSort ( arr , size ) ; i___0 = 0 ; while ( i___0 < size - 1 ) { assert ( * ( arr + i___0 ) <= * ( arr + ( i___0 + 1 ) ) ) ; i___0 ++ ; } free ( arr ) ; return ; } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { } } } void megaInit ( void ) { { } }
>>>Func
METHOD main
METHOD_RETURN int
PARAM int argc
PARAM char **argv
PARAM char **_formal_envp
megaInit megaInit()
<operator>.assignment _global_argc = argc
<operator>.assignment _global_argv = argv
<operator>.assignment _global_envp = _formal_envp
<operator>.assignment _BARRIER_0 = 1
<operator>.assignment sum = 0
<operator>.assignment str = (char const   *)*(argv + 1)
<operator>.assignment t = str
_1_stringEncoder _1_stringEncoder(0, encodeStrings_litStr0)
printf printf(encodeStrings_litStr0, sum)
RETURN return (0); return (0);
<operator>.greaterThan argc > 127
LITERAL 0 return (0);
<operator>.cast (char const   *)*(argv + 1)
<operator>.assignmentPlus sum += (int )*t
<operator>.postIncrement t ++
<operator>.assignmentPlus sum += (int )*t
<operator>.assignmentMultiplication sum *= (int )*t
<operator>.addition argv + 1
<operator>.cast (int )*t
<operator>.cast (int )*t
<operator>.indirection *t
<operator>.cast (int )*t
UNKNOWN int int
<operator>.indirection *t
UNKNOWN int int
<operator>.indirection *t
UNKNOWN int int
<operator>.indirection *t
>>>PDG&34 0->2 0->3 0->4 0->5 0->6 0->7 0->8 0->9 0->10 0->12 0->13 0->14 0->15 0->16 0->17 0->19 0->20 0->21 0->22 0->23 2->6 2->16 3->7 3->23 4->8 5->1 6->1 6->1 7->1 7->1 8->1 8->1 8->1 9->1 9->1 10->1 10->19 10->21 10->22 11->1 11->1 11->12 12->1 12->1 12->1 12->20 13->1 13->14 14->1 14->1 14->1 15->1 16->1 16->1 16->21 16->22 16->24 16->25 16->30 16->31 16->32 16->33 17->15 18->1 19->1 19->21 19->22 20->1 20->1 21->1 21->1 21->14 22->1 22->1 22->14 23->1 24->1 25->1 26->19 26->20 26->26 26->27 26->28 26->29
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; char * * _global_argv = ( char * * ) 0 ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int unlink ( char const * filename ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; extern int raise ( int sig ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; int main ( int argc , char * * argv , char * * _formal_envp ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; void encodeStrings_litStr0_i $ nit ( void ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; int _global_argc = 0 ; void megaInit ( void ) ; char * * _global_envp = ( char * * ) 0 ; extern int ( /* missing proto */ printf ) ( ) ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double sqrt ( double x ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; char encodeStrings_litStr0 [ 12 ] ; void megaInit ( void ) { { encodeStrings_litStr0_i $ nit ( ) ; } } void encodeStrings_litStr0_i $ nit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { case 0 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; } } } int main ( int argc , char * * argv , char * * _formal_envp ) { int sum ; char const * str ; register char const * t ; int _BARRIER_0 ; { megaInit ( ) ; _global_argc = argc ; _global_argv = argv ; _global_envp = _formal_envp ; _BARRIER_0 = 1 ; sum = 0 ; str = ( char const * ) * ( argv + 1 ) ; t = str ; while ( * t ) { sum += ( int ) * t ; t ++ ; } if ( argc > 127 ) { sum += ( int ) * t ; } else { sum *= ( int ) * t ; } _1_stringEncoder ( 0 , encodeStrings_litStr0 ) ; printf ( encodeStrings_litStr0 , sum ) ; return ( 0 ) ; } }
>>>Func
METHOD _1_stringEncoder
METHOD_RETURN void
PARAM int n
PARAM char str[]
BLOCK <empty> <empty>
<operator>.assignment encodeStrings_i3 = 0
IDENTIFIER n switch(n)
LITERAL 0 <empty>
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '.'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'f'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'i'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'b'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'o'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'a'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'c'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'c'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'i'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'u'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'm'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'b'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'e'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'r'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'i'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 's'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ':'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = ' '
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '%'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = 'd'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\n'
<operator>.postIncrement encodeStrings_i3 ++
<operator>.assignment str[encodeStrings_i3] = '\000'
<operator>.postIncrement encodeStrings_i3 ++
>>>PDG&66 0->2 0->3 0->4 0->5 0->6 0->7 0->8 0->9 0->10 0->11 0->12 0->13 0->14 0->15 0->16 0->17 0->18 0->19 0->20 0->21 0->22 0->23 0->24 0->25 0->26 0->27 0->28 0->29 0->30 0->31 0->32 0->33 0->34 0->35 0->36 0->37 0->38 0->39 0->40 0->41 0->42 0->43 0->44 0->45 0->46 0->47 0->48 0->49 0->50 0->51 0->52 0->53 0->54 0->55 0->56 0->57 0->58 0->59 0->60 0->61 0->62 0->63 0->64 0->65 2->1 3->1 5->1 5->1 5->9 9->11 11->13 12->1 13->15 15->17 16->1 17->19 19->21 21->23 22->1 23->25 25->27 26->1 27->29 29->31 30->1 31->33 33->35 35->37 36->1 37->39 38->1 39->41 40->1 41->43 42->1 43->45 44->1 45->47 46->1 47->49 49->51 50->1 51->53 52->1 53->55 54->1 55->57 56->1 57->59 58->1 59->61 60->1 61->63 62->1 63->65 64->1 64->1 65->1 65->1
>>>Token /* Generated by CIL v. 1.7.0 */ /* print_CIL_Input is false */ struct _IO_FILE ; struct timeval ; extern int pthread_cond_signal ( int * cond ) ; extern void exit ( int status ) ; extern int fseek ( struct _IO_FILE * stream , long offs , int whence ) ; extern int fclose ( void * stream ) ; extern int close ( int filedes ) ; extern int pthread_create ( void * thread , void * attr , void * start_routine , void * arg ) ; char * * _global_argv = ( char * * ) 0 ; extern int unlink ( char const * filename ) ; extern int fcntl ( int filedes , int cmd , ... ) ; extern int pthread_mutex_lock ( int * mutex ) ; struct timeval { long tv_sec ; long tv_usec ; } ; extern int pthread_cond_init ( int * cond , int * attr ) ; extern unsigned long strtoul ( char const * str , char const * endptr , int base ) ; void _1_stringEncoder ( int n , char str [ ] ) ; extern int raise ( int sig ) ; extern void abort ( ) ; extern int atoi ( char const * s ) ; extern void * malloc ( unsigned long size ) ; extern double ceil ( double x ) ; extern int getpagesize ( ) ; extern int posix_memalign ( void * * memptr , unsigned long alignment , unsigned long size ) ; extern int pthread_cond_broadcast ( int * cond ) ; extern int pthread_join ( void * thread , void * * value_ptr ) ; extern int rand ( ) ; extern void free ( void * ptr ) ; extern unsigned long strlen ( char const * s ) ; int main ( int _formal_argc , char * * _formal_argv , char * * _formal_envp ) ; extern unsigned long write ( int filedes , void * buf , unsigned long nbyte ) ; extern long strtol ( char const * str , char const * endptr , int base ) ; void encodeStrings_litStr0_i $ nit ( void ) ; extern int gettimeofday ( struct timeval * tv , void * tz ) ; int _global_argc = 0 ; void megaInit ( void ) ; char * * _global_envp = ( char * * ) 0 ; extern int fscanf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int ( /* missing proto */ printf ) ( ) ; extern int ( /* missing proto */ fib ) ( ) ; extern int scanf ( char const * format , ... ) ; extern long clock ( void ) ; extern void perror ( char const * str ) ; extern unsigned long read ( int filedes , void * buf , unsigned long nbyte ) ; extern int pthread_mutex_unlock ( int * mutex ) ; extern float strtof ( char const * str , char const * endptr ) ; extern int pthread_cond_wait ( int * cond , int * mutex ) ; extern int gethostname ( char * name , unsigned long namelen ) ; extern void qsort ( void * base , unsigned long nel , unsigned long width , int ( * compar ) ( void * a , void * b ) ) ; extern unsigned long strnlen ( char const * s , unsigned long maxlen ) ; extern double strtod ( char const * str , char const * endptr ) ; extern int pthread_mutex_init ( int * mutex , int * attr ) ; extern int ( /* missing proto */ test ) ( ) ; extern int strcmp ( char const * a , char const * b ) ; extern void * fopen ( char const * filename , char const * mode ) ; extern double difftime ( long tv1 , long tv0 ) ; extern void signal ( int sig , void * func ) ; extern long time ( long * tloc ) ; typedef struct _IO_FILE FILE ; extern int fprintf ( struct _IO_FILE * stream , char const * format , ... ) ; extern int strncmp ( char const * s1 , char const * s2 , unsigned long maxlen ) ; extern double sqrt ( double x ) ; extern int open ( char const * filename , int oflag , ... ) ; extern double log ( double x ) ; extern int snprintf ( char * str , unsigned long size , char const * format , ... ) ; extern void * memcpy ( void * s1 , void const * s2 , unsigned long size ) ; char encodeStrings_litStr0 [ 29 ] ; void encodeStrings_litStr0_i $ nit ( void ) { { } } void _1_stringEncoder ( int n , char str [ ] ) { int encodeStrings_i3 ; { encodeStrings_i3 = 0 ; switch ( n ) { case 0 : str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \n ' ; encodeStrings_i3 ++ ; str [ encodeStrings_i3 ] = ' \000 ' ; encodeStrings_i3 ++ ; break ; } } } int main ( int _formal_argc , char * * _formal_argv , char * * _formal_envp ) { int i ; int tmp ; int _BARRIER_0 ; { megaInit ( ) ; _global_argc = _formal_argc ; _global_argv = _formal_argv ; _global_envp = _formal_envp ; _BARRIER_0 = 1 ; test ( ) ; i = 0 ; while ( i <= 10 ) { tmp = fib ( i ) ; _1_stringEncoder ( 0 , encodeStrings_litStr0 ) ; printf ( encodeStrings_litStr0 , i , tmp ) ; i ++ ; } return ( 0 ) ; } } void megaInit ( void ) { { encodeStrings_litStr0_i $ nit ( ) ; } }
>>>Func
